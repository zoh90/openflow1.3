cscope 15 $HOME/of13ofswitch.bme               0002610605
	@config.h

6 
	#BUILDNR
 ""

	)

12 
	#HAVE_IF_PACKET
 1

	)

15 
	#HAVE_INTTYPES_H
 1

	)

18 
	#HAVE_LIBNBEE
 1

	)

25 
	#HAVE_MALLOC_HOOKS
 1

	)

28 
	#HAVE_MEMORY_H
 1

	)

31 
	#HAVE_NETLINK
 1

	)

37 
	#HAVE_STDINT_H
 1

	)

40 
	#HAVE_STDLIB_H
 1

	)

43 
	#HAVE_STRINGS_H
 1

	)

46 
	#HAVE_STRING_H
 1

	)

52 
	#HAVE_STRSIGNAL
 1

	)

55 
	#HAVE_SYS_STAT_H
 1

	)

58 
	#HAVE_SYS_TYPES_H
 1

	)

61 
	#HAVE_UNISTD_H
 1

	)

73 
	#PACKAGE
 "›íÊow"

	)

76 
	#PACKAGE_BUGREPORT
 "›íÊow-discuss@›íÊowswôch.‹g"

	)

79 
	#PACKAGE_NAME
 "›íÊow"

	)

82 
	#PACKAGE_STRING
 "›íÊow 1.3.0"

	)

85 
	#PACKAGE_TARNAME
 "›íÊow"

	)

88 
	#PACKAGE_URL
 ""

	)

91 
	#PACKAGE_VERSION
 "1.3.0"

	)

97 
	#STDC_HEADERS
 1

	)

103 #i‚de‡
_ALL_SOURCE


104 
	#_ALL_SOURCE
 1

	)

107 #i‚de‡
_GNU_SOURCE


108 
	#_GNU_SOURCE
 1

	)

111 #i‚de‡
_POSIX_PTHREAD_SEMANTICS


112 
	#_POSIX_PTHREAD_SEMANTICS
 1

	)

115 #i‚de‡
_TANDEM_SOURCE


116 
	#_TANDEM_SOURCE
 1

	)

119 #i‚de‡
__EXTENSIONS__


120 
	#__EXTENSIONS__
 1

	)

125 
	#VERSION
 "1.3.0"

	)

128 #i‚de‡
_DARWIN_USE_64_BIT_INODE


129 
	#_DARWIN_USE_64_BIT_INODE
 1

	)

	@include/openflow/bme-ext.h

32 #i‚de‡
OPENFLOW_BME_EXT_H


33 
	#OPENFLOW_BME_EXT_H
 1

	)

35 
	~"›íÊow/›íÊow.h
"

37 
	#BME_EXPERIMENTER_ID
 0xFF000001

	)

39 
	soÂ_bme_a˘i⁄_hódî
 {

40 
uöt16_t
 
	mty≥
;

41 
uöt16_t
 
	mÀn
;

42 
uöt8_t
 
	m∑d
[4];

44 
OFP_ASSERT
((
oÂ_bme_a˘i⁄_hódî
) == 8);

46 
	sbme_ö°ru˘i⁄_hódî
 {

47 
uöt16_t
 
	mty≥
;

48 
uöt16_t
 
	mÀn
;

50 
OFP_ASSERT
((
bme_ö°ru˘i⁄_hódî
) == 4);

52 
	ebme_a˘i⁄_ty≥
 {

61 
	mBME_OUTPUT_BY_METADATA
 = 1,

66 
	mBME_SET_METADATA_FROM_PACKET
 = 2,

73 
	mBME_SET_MPLS_LABEL_FROM_COUNTER
 = 3,

96 
	mBME_XOR_DECODE
 = 4,

117 
	mBME_XOR_ENCODE
 = 5,

134 
	mBME_UPDATE_DISTANCE_IN_METADATA
 = 6,

140 
	mBME_SET_METADATA_FROM_COUNTER
 = 7,

147 
	mBME_SET_FIELD_FROM_METADATA
 = 8,

157 
	mBME_SERIALIZE
 = 9,

162 
	mBME_RACE_MPLS_LABEL
 = 10,

166 
	sbme_ouçut_by_mëad©a
 {

167 
uöt16_t
 
	mty≥
;

168 
uöt16_t
 
	mÀn
;

169 
uöt8_t
 
	m∑d
[4];

171 
OFP_ASSERT
((
bme_ouçut_by_mëad©a
) == 8);

173 
	soÂ_bme_£t_mëad©a
 {

174 
uöt16_t
 
	mty≥
;

175 
uöt16_t
 
	mÀn
;

176 
uöt32_t
 
	mfõld
;

178 
uöt8_t
 
	moff£t
;

180 
uöt8_t
 
	m∑d
[7];

182 
OFP_ASSERT
((
oÂ_bme_£t_mëad©a
) == 16);

184 
	soÂ_bme_£t_m∂s_œbñ
 {

185 
uöt16_t
 
	mty≥
;

186 
uöt16_t
 
	mÀn
;

187 
uöt8_t
 
	m∑d
[4];

189 
OFP_ASSERT
((
oÂ_bme_£t_m∂s_œbñ
) == 8);

191 
	soÂ_bme_x‹_∑ckë
 {

192 
uöt16_t
 
	mty≥
;

193 
uöt16_t
 
	mÀn
;

194 
uöt32_t
 
	mœbñ_a
;

195 
uöt32_t
 
	mœbñ_b
;

196 
uöt8_t
 
	m∑d
[4];

198 
OFP_ASSERT
((
oÂ_bme_x‹_∑ckë
) == 16);

200 
	soÂ_bme_upd©e_di°™˚
 {

201 
uöt16_t
 
	mty≥
;

202 
uöt16_t
 
	mÀn
;

203 
uöt8_t
 
	mhw_addr
[
OFP_ETH_ALEN
];

204 
uöt8_t
 
	m∑d
[2];

205 
uöt32_t
 
	mp‹t
;

207 
OFP_ASSERT
((
oÂ_bme_upd©e_di°™˚
) == 16);

209 
	soÂ_bme_£t_mëad©a_‰om_cou¡î
 {

210 
uöt16_t
 
	mty≥
;

211 
uöt16_t
 
	mÀn
;

212 
uöt32_t
 
	mmax_num
;

214 
OFP_ASSERT
((
oÂ_bme_£t_mëad©a_‰om_cou¡î
) == 8);

216 
	soÂ_bme_£rülize
 {

217 
uöt16_t
 
	mty≥
;

218 
uöt16_t
 
	mÀn
;

219 
uöt32_t
 
	mm∂s_œbñ
;

220 
uöt16_t
 
	mtimeout
;

221 
uöt8_t
 
	m∑d
[6];

223 
OFP_ASSERT
((
oÂ_bme_£rülize
) == 16);

	@include/openflow/nicira-ext.h

17 #i‚de‡
OPENFLOW_NICIRA_EXT_H


18 
	#OPENFLOW_NICIRA_EXT_H
 1

	)

20 
	~"›íÊow/›íÊow.h
"

22 
	#NICIRA_OUI_STR
 "002320"

	)

28 
	#NX_VENDOR_ID
 0x00002320

	)

30 
	enicúa_ty≥
 {

34 
	mNXT_STATUS_REQUEST
,

38 
	mNXT_STATUS_REPLY
,

41 
	mNXT_ACT_SET_CONFIG__OBSOLETE
,

42 
	mNXT_ACT_GET_CONFIG__OBSOLETE
,

43 
	mNXT_COMMAND_REQUEST__OBSOLETE
,

44 
	mNXT_COMMAND_REPLY__OBSOLETE
,

45 
	mNXT_FLOW_END_CONFIG__OBSOLETE
,

46 
	mNXT_FLOW_END__OBSOLETE
,

47 
	mNXT_MGMT__OBSOLETE
,

51 
	mNXT_TUN_ID_FROM_COOKIE
,

55 
	mNXT_ROLE_REQUEST
,

56 
	mNXT_ROLE_REPLY


59 
	snicúa_hódî
 {

60 
oÂ_hódî
 
	mhódî
;

61 
uöt32_t
 
	mvíd‹
;

62 
uöt32_t
 
	msubty≥
;

64 
OFP_ASSERT
((
nicúa_hódî
) == 16);

66 
	snxt_tun_id_cookõ
 {

67 
oÂ_hódî
 
	mhódî
;

68 
uöt32_t
 
	mvíd‹
;

69 
uöt32_t
 
	msubty≥
;

70 
uöt8_t
 
	m£t
;

71 
uöt8_t
 
	m∑d
[7];

73 
OFP_ASSERT
((
nxt_tun_id_cookõ
) == 24);

94 
	snx_rﬁe_ªque°
 {

95 
nicúa_hódî
 
	mnxh
;

96 
uöt32_t
 
	mrﬁe
;

99 
	enx_rﬁe
 {

100 
	mNX_ROLE_OTHER
,

101 
	mNX_ROLE_MASTER
,

102 
	mNX_ROLE_SLAVE


105 
	enx_a˘i⁄_subty≥
 {

106 
	mNXAST_SNAT__OBSOLETE
,

132 
	mNXAST_RESUBMIT
,

135 
	mNXAST_SET_TUNNEL
,

145 
	mNXAST_DROP_SPOOFED_ARP


149 
	snx_a˘i⁄_ªsubmô
 {

150 
uöt16_t
 
	mty≥
;

151 
uöt16_t
 
	mÀn
;

152 
uöt32_t
 
	mvíd‹
;

153 
uöt16_t
 
	msubty≥
;

154 
uöt16_t
 
	mö_p‹t
;

155 
uöt8_t
 
	m∑d
[4];

157 
OFP_ASSERT
((
nx_a˘i⁄_ªsubmô
) == 16);

160 
	snx_a˘i⁄_£t_tu¬ñ
 {

161 
uöt16_t
 
	mty≥
;

162 
uöt16_t
 
	mÀn
;

163 
uöt32_t
 
	mvíd‹
;

164 
uöt16_t
 
	msubty≥
;

165 
uöt8_t
 
	m∑d
[2];

166 
uöt32_t
 
	mtun_id
;

168 
OFP_ASSERT
((
nx_a˘i⁄_£t_tu¬ñ
) == 16);

171 
	snx_a˘i⁄_hódî
 {

172 
uöt16_t
 
	mty≥
;

173 
uöt16_t
 
	mÀn
;

174 
uöt32_t
 
	mvíd‹
;

175 
uöt16_t
 
	msubty≥
;

176 
uöt8_t
 
	m∑d
[6];

178 
OFP_ASSERT
((
nx_a˘i⁄_hódî
) == 16);

181 
	#NXFW_TUN_ID
 (1 << 25)

	)

182 
	#NXFW_NW_SRC
 (1 << 26)

	)

183 
	#NXFW_NW_DST
 (1 << 27)

	)

184 
	#NXFW_DL_SRC
 (1 << 28)

	)

185 
	#NXFW_DL_DST
 (1 << 29)

	)

187 
	#NXFW_ALL
 
NXFW_TUN_ID
 | 
NXFW_NW_SRC
 | 
NXFW_NW_DST
 | 
NXFW_DL_SRC
 | 
NXFW_DL_DST


	)

188 
	#OVSFW_ALL
 (
OFPFW_ALL
 | 
NXFW_ALL
)

	)

	@include/openflow/of_hw_api.h

34 #i‡!
deföed
(
OF_HW_API_H
)

35 
	#OF_HW_API_H


	)

51 
	~<›íÊow/›íÊow.h
>

52 
	~<ud©≠©h/èbÀ.h
>

68 
uöt32_t
 
	tof_p‹t_t
;

69 
of_hw_drivî
 
	tof_hw_drivî_t
;

74 *
	tos_pkt_t
;

77 
	sof_∑ckë_s
 {

78 *
	md©a
;

79 
	mÀngth
;

80 
os_pkt_t
 
	mos_pkt
;

81 } 
	tof_∑ckë_t
;

84 
	#OF_PKT_INIT
(
pkt
, 
oÂ_buf
) do { \

85 (
pkt
)->
d©a
 = (
oÂ_buf
)->data; \

86 (
pkt
)->
Àngth
 = (
oÂ_buf
)->
size
; \

87 (
pkt
)->
os_pkt
 = (
oÂ_buf
); \

88 } 0)

	)

93 (*
	tof_∑ckë_ö_f
)(
	tof_p‹t_t
 
	tp‹t
,

94 
	tof_∑ckë_t
 *
	t∑ckë
,

95 
	tªas⁄
,

96 *
	tcookõ
);

98 (*
	tof_p‹t_ch™ge_f
)(
	tof_p‹t_t
 
	tp‹t
,

99 
	t°©e
,

100 *
	tcookõ
);

109 
	sof_hw_drivî_ˇps
 {

117 
uöt32_t
 
Êags
;

120 
max_Êows
;

121 
uöt32_t
 
wc_suµ‹ãd
;

122 
uöt32_t
 
a˘i⁄s_suµ‹ãd
;

123 
uöt32_t
 
oÂc_Êags
;

124 } 
	tof_hw_drivî_ˇps_t
;

126 
	eof_hw_drivî_Êags
 {

127 
OF_HW_DRV_COUNT_PKTS_OR_BYTES
 = 1 << 0,

128 
OF_HW_DRV_INTERNAL_PRI
 = 1 << 1,

129 
OF_HW_DRV_CPU_PKTS_THRU_TABLE
 = 1 << 2

134 
of_hw_drivî_t
 *
	`√w_of_hw_drivî
(
d©≠©h
 *
dp
);

135 
	`dñëe_of_hw_drivî
(
of_hw_drivî_t
 *
hw_drv
);

141 
	sof_hw_drivî
 {

151 
sw_èbÀ
 sw_table;

154 
of_hw_drivî_ˇps_t
 
ˇps
;

168 (*
öô
)(
of_hw_drivî_t
 *
hw_drv
, 
uöt32_t
 
Êags
);

188 (*
èbÀ_°©s_gë
)(
of_hw_drivî_t
 *
hw_drv
, 

189 
oÂ_èbÀ_°©s
 *
°©s
);

190 (*
p‹t_°©s_gë
)(
of_hw_drivî_t
 *
hw_drv
, 
of_p‹t
,

191 
oÂ_p‹t_°©s
 *
°©s
);

192 (*
Êow_°©s_gë
)(
of_hw_drivî_t
 *
hw_drv
, 
oÂ_m©ch
,

193 
oÂ_Êow_°©s
 **
°©s
, *
cou¡
);

194 (*
aggªg©e_°©s_gë
)(
oÂ_m©ch
,

195 
oÂ_aggªg©e_°©s_ª∂y
 *
°©s
);

203 (*
p‹t_add
)(
of_hw_drivî_t
 *
hw_drv
, 
of_p‹t
, c⁄° *
hw_«me
);

204 (*
p‹t_ªmove
)(
of_hw_drivî_t
 *
hw_drv
, 
of_p‹t_t
 
p‹t
);

214 (*
p‹t_lök_gë
)(
of_hw_drivî_t
 *
hw_drv
, 
of_p‹t
);

215 (*
p‹t_íabÀ_£t
)(
of_hw_drivî_t
 *
hw_drv
, 
of_p‹t
, 
íabÀ
);

216 (*
p‹t_íabÀ_gë
)(
of_hw_drivî_t
 *
hw_drv
, 
of_p‹t
);

224 (*
p‹t_queue_c⁄fig
)(
of_hw_drivî_t
 *
hw_drv
, 
of_p‹t
,

225 
uöt32_t
 
qid
, 
mö_bw
);

226 (*
p‹t_queue_ªmove
)(
of_hw_drivî_t
 *
hw_drv
, 
of_p‹t
,

227 
uöt32_t
 
qid
);

235 (*
p‹t_ch™ge_ªgi°î
)(
of_hw_drivî_t
 *
hw_drv
,

236 
of_p‹t_ch™ge_f
 
ˇŒback
, *
cookõ
);

251 (*
∑ckë_£nd
)(
of_hw_drivî_t
 *
hw_drv
, 
of_p‹t
, 
of_∑ckë_t
 *
pkt
,

252 
uöt32_t
 
Êags
);

262 (*
∑ckë_ª˚ive_ªgi°î
)(
of_hw_drivî_t
 *
hw_drv
,

263 
of_∑ckë_ö_f
 
ˇŒback
, *
cookõ
);

290 (*
io˘l
)(
of_hw_drivî_t
 *
hw_drv
, 
uöt32_t
 
›
, **
io_∑øm
,

291 *
io_Àn
);

297 
	eof_hw_io˘l_e
 {

298 
OF_HW_IOCTL_TABLE_DEBUG_SET
 = 1,

299 
OF_HW_IOCTL_PORT_DEBUG_SET
 = 2,

300 
OF_HW_IOCTL_BYTE_PKT_CNTR_SET
 = 3

304 
	#OF_HW_CNTR_PACKETS
 0

	)

305 
	#OF_HW_CNTR_BYTES
 1

	)

307 
	eof_hw_îr‹_e
 {

308 
OF_HW_OKAY
 = 0,

309 
OF_HW_ERROR
 = -1,

310 
OF_HW_PORT_DOWN
 = -2

	@include/openflow/openflow-ext.h

6 #i‚de‡
OPENFLOW_OPENFLOW_EXT_H


7 
	#OPENFLOW_OPENFLOW_EXT_H
 1

	)

9 
	~"›íÊow/›íÊow.h
"

19 
	#OPENFLOW_VENDOR_ID
 0x000026e1

	)

21 
	eoÂ_exãnsi⁄_comm™ds
 {

23 
	mOFP_EXT_QUEUE_MODIFY
,

24 
	mOFP_EXT_QUEUE_DELETE
,

25 
	mOFP_EXT_SET_DESC
,

27 
	mOFP_EXT_COUNT


30 
	soÂ_exãnsi⁄_hódî
 {

31 
oÂ_hódî
 
	mhódî
;

32 
uöt32_t
 
	mvíd‹
;

33 
uöt32_t
 
	msubty≥
;

35 
OFP_ASSERT
((
oÂ_exãnsi⁄_hódî
) == 16);

43 
	s›íÊow_queue_comm™d_hódî
 {

44 
oÂ_exãnsi⁄_hódî
 
	mhódî
;

45 
uöt32_t
 
	mp‹t
;

46 
uöt8_t
 
	m∑d
[4];

47 
uöt8_t
 
	mbody
[0];

49 
OFP_ASSERT
((
›íÊow_queue_comm™d_hódî
) == 24);

63 
	e›íÊow_queue_îr‹_code
 {

64 
	mOFQ_ERR_NONE
,

65 
	mOFQ_ERR_FAIL
,

66 
	mOFQ_ERR_NOT_FOUND
,

67 
	mOFQ_ERR_DISCIPLINE
,

68 
	mOFQ_ERR_BW_UNAVAIL
,

69 
	mOFQ_ERR_QUEUE_UNAVAIL
,

70 
	mOFQ_ERR_COUNT


73 
	#OPENFLOW_QUEUE_ERROR_STRINGS_DEF
 { \

80 }

	)

82 *
›íÊow_queue_îr‹_°rögs
[];

84 
	s›íÊow_ext_£t_dp_desc
 {

85 
oÂ_exãnsi⁄_hódî
 
	mhódî
;

86 
	mdp_desc
[
DESC_STR_LEN
];

88 
OFP_ASSERT
((
›íÊow_ext_£t_dp_desc
) == 272);

90 
	#ofq_îr‹_°rög
(
rv
Ë((‘vË< 
OFQ_ERR_COUNT
) && ((rv) >= 0) ? \

91 
›íÊow_queue_îr‹_°rögs
[
rv
] : "Unknow¿îr‹ code")

	)

101 
	#OPENFLOW_QUEUE_PROP_STRINGS_DEF
 { \

107 }

	)

108 *
›íÊow_queue_¥›_°rögs
[];

110 
	#ofq_¥›_°rög
(
vÆ
Ë(((vÆË< 
OFPQT_EXT_COUNT
) && ((val) >= 0) ? \

111 
›íÊow_queue_¥›_°rögs
[
vÆ
] : "Unknow¿¥›îty vÆue")

	)

115 
	soÂ_queue_¥›_buf_Æloc
 {

116 
oÂ_queue_¥›_hódî
 
	m¥›_hódî
;

117 
uöt16_t
 
	mÆloc_vÆ
;

118 
uöt8_t
 
	m∑d
[6];

120 
OFP_ASSERT
((
oÂ_queue_¥›_buf_Æloc
) == 16);

123 
	soÂ_queue_¥›_sched_weight
 {

124 
oÂ_queue_¥›_hódî
 
	m¥›_hódî
;

125 
uöt16_t
 
	mweight
;

126 
uöt8_t
 
	m∑d
[6];

128 
OFP_ASSERT
((
oÂ_queue_¥›_sched_weight
) == 16);

	@include/openflow/openflow-netlink.h

34 #i‚de‡
OPENFLOW_OPENFLOW_NETLINK_H


35 
	#OPENFLOW_OPENFLOW_NETLINK_H
 1

	)

37 
	#DP_GENL_FAMILY_NAME
 "O≥nFlow"

	)

41 
	mDP_GENL_A_UNSPEC
,

42 
	mDP_GENL_A_DP_IDX
,

43 
	mDP_GENL_A_PORTNAME
,

44 
	mDP_GENL_A_MC_GROUP
,

45 
	mDP_GENL_A_OPENFLOW
,

46 
	mDP_GENL_A_DP_NAME
,

48 
	m__DP_GENL_A_MAX
,

49 
	mDP_GENL_A_MAX
 = 
__DP_GENL_A_MAX
 - 1

53 
	edp_gíl_comm™d
 {

54 
	mDP_GENL_C_UNSPEC
,

55 
	mDP_GENL_C_ADD_DP
,

56 
	mDP_GENL_C_DEL_DP
,

57 
	mDP_GENL_C_QUERY_DP
,

58 
	mDP_GENL_C_ADD_PORT
,

59 
	mDP_GENL_C_DEL_PORT
,

60 
	mDP_GENL_C_OPENFLOW
,

62 
	m__DP_GENL_C_MAX
,

63 
	mDP_GENL_C_MAX
 = 
__DP_GENL_C_MAX
 - 1

67 
	#DP_MAX
 256

	)

	@include/openflow/openflow.h

3 #i‚de‡
OPENFLOW_OPENFLOW_H


4 
	#OPENFLOW_OPENFLOW_H
 1

	)

6 #ifde‡
__KERNEL__


7 
	~<löux/ty≥s.h
>

9 
	~<°döt.h
>

11 #ifde‡
SWIG


12 
	#OFP_ASSERT
(
EXPR
Ë

	)

13 #ñi‡!
deföed
(
__˝lu•lus
)

15 
	#OFP_ASSERT
(
EXPR
) \

16 (*
	`buûd_as£π
())[ (struct { \

17 
buûd_as£π_Áûed
 : (
EXPR
Ë? 1 : -1; })]

	)

19 
	#OFP_ASSERT
(
_EXPR
Ë
	tbuûd_as£π_Áûed
[(_EXPRË? 1 : -1]

	)

21 #i‚de‡
	tSWIG


22 
	tOFP_PACKED
 
	t__©åibuã__
((
	t∑cked
))

	)

24 
	tOFP_PACKED


	)

35 
	tOFP_VERSION
 0x04

	)

36 
	tOFP_MAX_TABLE_NAME_LEN
 32

	)

37 
	tOFP_MAX_PORT_NAME_LEN
 16

	)

38 
	tOFP_TCP_PORT
 6633

	)

39 
	tOFP_SSL_PORT
 6633

	)

40 
	tOFP_ETH_ALEN
 6

	)

42 
	tPIPELINE_TABLES
 64

	)

45 
	soÂ_hódî
 {

46 
uöt8_t
 
vîsi⁄
;

47 
uöt8_t
 
ty≥
;

48 
uöt16_t
 
Àngth
;

49 
uöt32_t
 
xid
;

53 
OFP_ASSERT
((
oÂ_hódî
) == 8);

55 
	eoÂ_ty≥
 {

57 
	mOFPT_HELLO
 = 0,

58 
	mOFPT_ERROR
 = 1,

59 
	mOFPT_ECHO_REQUEST
 = 2,

60 
	mOFPT_ECHO_REPLY
 = 3,

61 
	mOFPT_EXPERIMENTER
 = 4,

63 
	mOFPT_FEATURES_REQUEST
 = 5,

64 
	mOFPT_FEATURES_REPLY
 = 6,

65 
	mOFPT_GET_CONFIG_REQUEST
 = 7,

66 
	mOFPT_GET_CONFIG_REPLY
 = 8,

67 
	mOFPT_SET_CONFIG
 = 9,

69 
	mOFPT_PACKET_IN
 = 10,

70 
	mOFPT_FLOW_REMOVED
 = 11,

71 
	mOFPT_PORT_STATUS
 = 12,

73 
	mOFPT_PACKET_OUT
 = 13,

74 
	mOFPT_FLOW_MOD
 = 14,

75 
	mOFPT_GROUP_MOD
 = 15,

76 
	mOFPT_PORT_MOD
 = 16,

77 
	mOFPT_TABLE_MOD
 = 17,

79 
	mOFPT_MULTIPART_REQUEST
 = 18,

80 
	mOFPT_MULTIPART_REPLY
 = 19,

82 
	mOFPT_BARRIER_REQUEST
 = 20,

83 
	mOFPT_BARRIER_REPLY
 = 21,

85 
	mOFPT_QUEUE_GET_CONFIG_REQUEST
 = 22,

86 
	mOFPT_QUEUE_GET_CONFIG_REPLY
 = 23,

88 
	mOFPT_ROLE_REQUEST
 = 24,

89 
	mOFPT_ROLE_REPLY
 = 25,

91 
	mOFPT_GET_ASYNC_REQUEST
 = 26,

92 
	mOFPT_GET_ASYNC_REPLY
 = 27,

93 
	mOFPT_SET_ASYNC
 = 28,

95 
	mOFPT_METER_MOD
 = 29,

100 
	soÂ_hñlo
 {

101 
oÂ_hódî
 
	mhódî
;

104 
	#OFP_DEFAULT_MISS_SEND_LEN
 128

	)

110 
	soÂ_p‹t
 {

111 
uöt32_t
 
	mp‹t_no
;

112 
uöt8_t
 
	m∑d
[4];

113 
uöt8_t
 
	mhw_addr
[
OFP_ETH_ALEN
];

114 
uöt8_t
 
	m∑d2
[2];

115 
	m«me
[
OFP_MAX_PORT_NAME_LEN
];

116 
uöt32_t
 
	mc⁄fig
;

117 
uöt32_t
 
	m°©e
;

120 
uöt32_t
 
	mcuº
;

121 
uöt32_t
 
	madvîti£d
;

122 
uöt32_t
 
	msuµ‹ãd
;

123 
uöt32_t
 
	m≥î
;

124 
uöt32_t
 
	mcuº_•ìd
;

125 
uöt32_t
 
	mmax_•ìd
;

127 
OFP_ASSERT
((
oÂ_p‹t
) == 64);

133 
	eoÂ_p‹t_c⁄fig
 {

134 
	mOFPPC_PORT_DOWN
 = 1 << 0,

135 
	mOFPPC_NO_RECV
 = 1 << 2,

136 
	mOFPPC_NO_FWD
 = 1 << 5,

137 
	mOFPPC_NO_PACKET_IN
 = 1 << 6

143 
	eoÂ_p‹t_°©e
 {

144 
	mOFPPS_LINK_DOWN
 = 1 << 0,

145 
	mOFPPS_BLOCKED
 = 1 << 1,

146 
	mOFPPS_LIVE
 = 1 << 2,

150 
	eoÂ_p‹t_no
 {

152 
	mOFPP_MAX
 = 0xffffff00,

154 
	mOFPP_IN_PORT
 = 0xfffffff8,

158 
	mOFPP_TABLE
 = 0xfffffff9,

161 
	mOFPP_NORMAL
 = 0xfffffffa,

162 
	mOFPP_FLOOD
 = 0xfffffffb,

164 
	mOFPP_ALL
 = 0xfffffffc,

165 
	mOFPP_CONTROLLER
 = 0xfffffffd,

166 
	mOFPP_LOCAL
 = 0xfffffffe,

167 
	mOFPP_ANY
 = 0xffffffff

174 
	eoÂ_p‹t_„©uªs
 {

175 
	mOFPPF_10MB_HD
 = 1 << 0,

176 
	mOFPPF_10MB_FD
 = 1 << 1,

177 
	mOFPPF_100MB_HD
 = 1 << 2,

178 
	mOFPPF_100MB_FD
 = 1 << 3,

179 
	mOFPPF_1GB_HD
 = 1 << 4,

180 
	mOFPPF_1GB_FD
 = 1 << 5,

181 
	mOFPPF_10GB_FD
 = 1 << 6,

182 
	mOFPPF_40GB_FD
 = 1 << 7,

183 
	mOFPPF_100GB_FD
 = 1 << 8,

184 
	mOFPPF_1TB_FD
 = 1 << 9,

185 
	mOFPPF_OTHER
 = 1 << 10,

186 
	mOFPPF_COPPER
 = 1 << 11,

187 
	mOFPPF_FIBER
 = 1 << 12,

188 
	mOFPPF_AUTONEG
 = 1 << 13,

189 
	mOFPPF_PAUSE
 = 1 << 14,

190 
	mOFPPF_PAUSE_ASYM
 = 1 << 15

194 
	soÂ_queue_¥›_hódî
 {

195 
uöt16_t
 
	m¥›îty
;

196 
uöt16_t
 
	mÀn
;

197 
uöt8_t
 
	m∑d
[4];

199 
OFP_ASSERT
((
oÂ_queue_¥›_hódî
) == 8);

202 
	soÂ_∑ckë_queue
 {

203 
uöt32_t
 
	mqueue_id
;

204 
uöt32_t
 
	mp‹t
;

205 
uöt16_t
 
	mÀn
;

206 
uöt8_t
 
	m∑d
[6];

207 
oÂ_queue_¥›_hódî
 
	m¥›îtõs
[0];

209 
OFP_ASSERT
((
oÂ_∑ckë_queue
) == 16);

212 
	#OFPQ_ALL
 0xffffffff

	)

215 
	#OFPQ_MIN_RATE_UNCFG
 0xffff

	)

218 
	eoÂ_queue_¥›îtõs
 {

219 
	mOFPQT_MIN_RATE
 = 1,

220 
	mOFPQT_MAX_RATE
 = 2,

221 
	mOFPQT_EXPERIMENTER
 = 0xffff

225 
	soÂ_queue_¥›_mö_øã
 {

226 
oÂ_queue_¥›_hódî
 
	m¥›_hódî
;

227 
uöt16_t
 
	møã
;

228 
uöt8_t
 
	m∑d
[6];

230 
OFP_ASSERT
((
oÂ_queue_¥›_mö_øã
) == 16);

233 
	soÂ_queue_¥›_max_øã
 {

234 
oÂ_queue_¥›_hódî
 
	m¥›_hódî
;

235 
uöt16_t
 
	møã
;

236 
uöt8_t
 
	m∑d
[6];

238 
OFP_ASSERT
((
oÂ_queue_¥›_max_øã
) == 16);

241 
	soÂ_queue_¥›_ex≥rimíãr
 {

242 
oÂ_queue_¥›_hódî
 
	m¥›_hódî
;

243 
uöt32_t
 
	mex≥rimíãr
;

245 
uöt8_t
 
	m∑d
[4];

246 
uöt8_t
 
	md©a
[0];

248 
OFP_ASSERT
((
oÂ_queue_¥›_ex≥rimíãr
) == 16);

253 
	#OFPMT_STANDARD_LENGTH
 96

	)

289 
	soÂ_m©ch
 {

290 
uöt16_t
 
	mty≥
;

291 
uöt16_t
 
	mÀngth
;

299 
uöt8_t
 
	moxm_fõlds
[4];

301 
OFP_ASSERT
((
oÂ_m©ch
) == 8);

311 
	eoÂ_m©ch_ty≥
 {

312 
	mOFPMT_STANDARD
 = 0,

313 
	mOFPMT_OXM
 = 1,

321 
	eoÂ_oxm_˛ass
 {

322 
	mOFPXMC_NXM_0
 = 0x0000,

323 
	mOFPXMC_NXM_1
 = 0x0001,

324 
	mOFPXMC_OPENFLOW_BASIC
 = 0x8000,

325 
	mOFPXMC_EXPERIMENTER
 = 0xFFFF,

329 
	eoxm_ofb_m©ch_fõlds
 {

330 
	mOFPXMT_OFB_IN_PORT
 = 0,

331 
	mOFPXMT_OFB_IN_PHY_PORT
 = 1,

332 
	mOFPXMT_OFB_METADATA
 = 2,

333 
	mOFPXMT_OFB_ETH_DST
 = 3,

334 
	mOFPXMT_OFB_ETH_SRC
 = 4,

335 
	mOFPXMT_OFB_ETH_TYPE
 = 5,

336 
	mOFPXMT_OFB_VLAN_VID
 = 6,

337 
	mOFPXMT_OFB_VLAN_PCP
 = 7,

338 
	mOFPXMT_OFB_IP_DSCP
 = 8,

339 
	mOFPXMT_OFB_IP_ECN
 = 9,

340 
	mOFPXMT_OFB_IP_PROTO
 = 10,

341 
	mOFPXMT_OFB_IPV4_SRC
 = 11,

342 
	mOFPXMT_OFB_IPV4_DST
 = 12,

343 
	mOFPXMT_OFB_TCP_SRC
 = 13,

344 
	mOFPXMT_OFB_TCP_DST
 = 14,

345 
	mOFPXMT_OFB_UDP_SRC
 = 15,

346 
	mOFPXMT_OFB_UDP_DST
 = 16,

347 
	mOFPXMT_OFB_SCTP_SRC
 = 17,

348 
	mOFPXMT_OFB_SCTP_DST
 = 18,

349 
	mOFPXMT_OFB_ICMPV4_TYPE
 = 19,

350 
	mOFPXMT_OFB_ICMPV4_CODE
 = 20,

351 
	mOFPXMT_OFB_ARP_OP
 = 21,

352 
	mOFPXMT_OFB_ARP_SPA
 = 22,

353 
	mOFPXMT_OFB_ARP_TPA
 = 23,

354 
	mOFPXMT_OFB_ARP_SHA
 = 24,

355 
	mOFPXMT_OFB_ARP_THA
 = 25,

356 
	mOFPXMT_OFB_IPV6_SRC
 = 26,

357 
	mOFPXMT_OFB_IPV6_DST
 = 27,

358 
	mOFPXMT_OFB_IPV6_FLABEL
 = 28,

359 
	mOFPXMT_OFB_ICMPV6_TYPE
 = 29,

360 
	mOFPXMT_OFB_ICMPV6_CODE
 = 30,

361 
	mOFPXMT_OFB_IPV6_ND_TARGET
 = 31,

362 
	mOFPXMT_OFB_IPV6_ND_SLL
 = 32,

363 
	mOFPXMT_OFB_IPV6_ND_TLL
 = 33,

364 
	mOFPXMT_OFB_MPLS_LABEL
 = 34,

365 
	mOFPXMT_OFB_MPLS_TC
 = 35,

366 
	mOFPXMT_OFB_MPLS_BOS
 = 36,

367 
	mOFPXMT_OFB_PBB_ISID
 = 37,

368 
	mOFPXMT_OFB_TUNNEL_ID
 = 38,

369 
	mOFPXMT_OFB_IPV6_EXTHDR
 = 39

375 
	eoÂ_vœn_id
 {

376 
	mOFPVID_PRESENT
 = 0x1000,

379 
	mOFPVID_ANY
 = 0xfffe,

381 
	mOFPVID_NONE
 = 0x0000,

385 
	eoÂ_ùv6exthdr_Êags
 {

386 
	mOFPIEH_NONEXT
 = 1 << 0,

387 
	mOFPIEH_ESP
 = 1 << 1,

388 
	mOFPIEH_AUTH
 = 1 << 2,

389 
	mOFPIEH_DEST
 = 1 << 3,

390 
	mOFPIEH_FRAG
 = 1 << 4,

391 
	mOFPIEH_ROUTER
 = 1 << 5,

392 
	mOFPIEH_HOP
 = 1 << 6,

393 
	mOFPIEH_UNREP
 = 1 << 7,

394 
	mOFPIEH_UNSEQ
 = 1 << 8,

398 
	soÂ_oxm_ex≥rimíãr_hódî
 {

399 
uöt32_t
 
	moxm_hódî
;

400 
uöt32_t
 
	mex≥rimíãr
;

403 
OFP_ASSERT
((
oÂ_oxm_ex≥rimíãr_hódî
) == 8);

405 
	eoÂ_ö°ru˘i⁄_ty≥
 {

406 
	mOFPIT_GOTO_TABLE
 = 1,

407 
	mOFPIT_WRITE_METADATA
 = 2,

409 
	mOFPIT_WRITE_ACTIONS
 = 3,

411 
	mOFPIT_APPLY_ACTIONS
 = 4,

412 
	mOFPIT_CLEAR_ACTIONS
 = 5,

414 
	mOFPIT_METER
 = 6,

416 
	mOFPIT_EXPERIMENTER
 = 0xFFFF

420 
	soÂ_ö°ru˘i⁄
 {

421 
uöt16_t
 
	mty≥
;

422 
uöt16_t
 
	mÀn
;

423 
uöt8_t
 
	m∑d
[4];

425 
OFP_ASSERT
((
oÂ_ö°ru˘i⁄
) == 8);

428 
	soÂ_ö°ru˘i⁄_gŸo_èbÀ
 {

429 
uöt16_t
 
	mty≥
;

430 
uöt16_t
 
	mÀn
;

431 
uöt8_t
 
	mèbÀ_id
;

432 
uöt8_t
 
	m∑d
[3];

434 
OFP_ASSERT
((
oÂ_ö°ru˘i⁄_gŸo_èbÀ
) == 8);

437 
	soÂ_ö°ru˘i⁄_wrôe_mëad©a
 {

438 
uöt16_t
 
	mty≥
;

439 
uöt16_t
 
	mÀn
;

440 
uöt8_t
 
	m∑d
[4];

441 
uöt64_t
 
	mmëad©a
;

442 
uöt64_t
 
	mmëad©a_mask
;

444 
OFP_ASSERT
((
oÂ_ö°ru˘i⁄_wrôe_mëad©a
) == 24);

449 
	soÂ_a˘i⁄_hódî
 {

450 
uöt16_t
 
	mty≥
;

451 
uöt16_t
 
	mÀn
;

455 
uöt8_t
 
	m∑d
[4];

457 
OFP_ASSERT
((
oÂ_a˘i⁄_hódî
) == 8);

460 
	soÂ_ö°ru˘i⁄_a˘i⁄s
 {

461 
uöt16_t
 
	mty≥
;

462 
uöt16_t
 
	mÀn
;

463 
uöt8_t
 
	m∑d
[4];

464 
oÂ_a˘i⁄_hódî
 
	ma˘i⁄s
[0];

468 
OFP_ASSERT
((
oÂ_ö°ru˘i⁄_a˘i⁄s
) == 8);

471 
	soÂ_ö°ru˘i⁄_mëî
 {

472 
uöt16_t
 
	mty≥
;

473 
uöt16_t
 
	mÀn
;

474 
uöt32_t
 
	mmëî_id
;

476 
OFP_ASSERT
((
oÂ_ö°ru˘i⁄_mëî
) == 8);

478 
	eoÂ_a˘i⁄_ty≥
 {

479 
	mOFPAT_OUTPUT
 = 0,

480 
	mOFPAT_COPY_TTL_OUT
 = 11,

482 
	mOFPAT_COPY_TTL_IN
 = 12,

484 
	mOFPAT_SET_MPLS_TTL
 = 15,

485 
	mOFPAT_DEC_MPLS_TTL
 = 16,

486 
	mOFPAT_PUSH_VLAN
 = 17,

487 
	mOFPAT_POP_VLAN
 = 18,

488 
	mOFPAT_PUSH_MPLS
 = 19,

489 
	mOFPAT_POP_MPLS
 = 20,

490 
	mOFPAT_SET_QUEUE
 = 21,

491 
	mOFPAT_GROUP
 = 22,

492 
	mOFPAT_SET_NW_TTL
 = 23,

493 
	mOFPAT_DEC_NW_TTL
 = 24,

494 
	mOFPAT_SET_FIELD
 = 25,

495 
	mOFPAT_PUSH_PBB
 = 26,

496 
	mOFPAT_POP_PBB
 = 27,

499 
	mOFPAT_SET_MPLS_LABEL
 = 28,

500 
	mOFPAT_SET_DL_DST
 =29,

501 
	mOFPAT_SET_NW_DST
 =30,

502 
	mOFPAT_SET_PARITY_MPLS_LABEL
 = 31,

503 
	mOFPAT_SET_MPLS_LABEL_FROM_COUNTER
 = 32,

504 
	mOFPAT_XOR_ENCODE
 = 33,

505 
	mOFPAT_XOR_DECODE
 = 34,

509 
	mOFPAT_EXPERIMENTER
 = 0xffff

514 
	eoÂ_Êow_wûdˇrds
 {

515 
	mOFPFW_IN_PORT
 = 1 << 0,

516 
	mOFPFW_DL_VLAN
 = 1 << 1,

517 
	mOFPFW_DL_VLAN_PCP
 = 1 << 2,

518 
	mOFPFW_DL_TYPE
 = 1 << 3,

519 
	mOFPFW_NW_TOS
 = 1 << 4,

520 
	mOFPFW_NW_PROTO
 = 1 << 5,

521 
	mOFPFW_TP_SRC
 = 1 << 6,

522 
	mOFPFW_TP_DST
 = 1 << 7,

523 
	mOFPFW_MPLS_LABEL
 = 1 << 8,

524 
	mOFPFW_MPLS_TC
 = 1 << 9,

527 
	mOFPFW_ALL
 = ((1 << 10) - 1)

538 
	soÂ_a˘i⁄_ouçut
 {

539 
uöt16_t
 
	mty≥
;

540 
uöt16_t
 
	mÀn
;

541 
uöt32_t
 
	mp‹t
;

542 
uöt16_t
 
	mmax_Àn
;

543 
uöt8_t
 
	m∑d
[6];

545 
OFP_ASSERT
((
oÂ_a˘i⁄_ouçut
) == 16);

547 
	eoÂ_c⁄åﬁÀr_max_Àn
 {

548 
	mOFPCML_MAX
 = 0xffe5,

550 
	mOFPCML_NO_BUFFER
 = 0xffff

556 
	soÂ_a˘i⁄_group
 {

557 
uöt16_t
 
	mty≥
;

558 
uöt16_t
 
	mÀn
;

559 
uöt32_t
 
	mgroup_id
;

561 
OFP_ASSERT
((
oÂ_a˘i⁄_group
) == 8);

564 
	soÂ_a˘i⁄_£t_queue
 {

565 
uöt16_t
 
	mty≥
;

566 
uöt16_t
 
	mÀn
;

567 
uöt32_t
 
	mqueue_id
;

569 
OFP_ASSERT
((
oÂ_a˘i⁄_£t_queue
) == 8);

572 
	soÂ_a˘i⁄_∑rôy_m∂s_œbñ
 {

573 
uöt16_t
 
	mty≥
;

574 
uöt16_t
 
	mÀn
;

575 
uöt8_t
 
	m∑d
[4];

578 
OFP_ASSERT
((
oÂ_a˘i⁄_∑rôy_m∂s_œbñ
) == 8);

579 
	soÂ_a˘i⁄_m∂s_œbñ
 {

580 
uöt16_t
 
	mty≥
;

581 
uöt16_t
 
	mÀn
;

582 
uöt32_t
 
	mm∂s_œbñ
;

585 
OFP_ASSERT
((
oÂ_a˘i⁄_m∂s_œbñ
) == 8);

586 
	soÂ_a˘i⁄_£t_m∂s_œbñ_‰om_cou¡î
 {

587 
uöt16_t
 
	mty≥
;

588 
uöt16_t
 
	mÀn
;

589 
uöt8_t
 
	m∑d
[4];

592 
OFP_ASSERT
((
oÂ_a˘i⁄_£t_m∂s_œbñ_‰om_cou¡î
) == 8);

593 
	soÂ_a˘i⁄_x‹_ícode
 {

594 
uöt16_t
 
	mty≥
;

595 
uöt16_t
 
	mÀn
;

596 
uöt32_t
 
	mœbñ_a
;

597 
uöt32_t
 
	mœbñ_b
;

598 
uöt8_t
 
	m∑d
[4];

601 
OFP_ASSERT
((
oÂ_a˘i⁄_x‹_ícode
) == 16);

602 
	soÂ_a˘i⁄_x‹_decode
 {

603 
uöt16_t
 
	mty≥
;

604 
uöt16_t
 
	mÀn
;

605 
uöt32_t
 
	mœbñ_a
;

606 
uöt32_t
 
	mœbñ_b
;

607 
uöt8_t
 
	m∑d
[4];

610 
OFP_ASSERT
((
oÂ_a˘i⁄_x‹_decode
) == 16);

613 
	soÂ_a˘i⁄_m∂s_âl
 {

614 
uöt16_t
 
	mty≥
;

615 
uöt16_t
 
	mÀn
;

616 
uöt8_t
 
	mm∂s_âl
;

617 
uöt8_t
 
	m∑d
[3];

619 
OFP_ASSERT
((
oÂ_a˘i⁄_m∂s_âl
) == 8);

622 
	soÂ_a˘i⁄_nw_âl
 {

623 
uöt16_t
 
	mty≥
;

624 
uöt16_t
 
	mÀn
;

625 
uöt8_t
 
	mnw_âl
;

626 
uöt8_t
 
	m∑d
[3];

628 
OFP_ASSERT
((
oÂ_a˘i⁄_nw_âl
) == 8);

631 
	soÂ_a˘i⁄_push
 {

632 
uöt16_t
 
	mty≥
;

633 
uöt16_t
 
	mÀn
;

634 
uöt16_t
 
	mëhîty≥
;

635 
uöt8_t
 
	m∑d
[2];

637 
OFP_ASSERT
((
oÂ_a˘i⁄_push
) == 8);

640 
	soÂ_a˘i⁄_p›_m∂s
 {

641 
uöt16_t
 
	mty≥
;

642 
uöt16_t
 
	mÀn
;

643 
uöt16_t
 
	mëhîty≥
;

644 
uöt8_t
 
	m∑d
[2];

646 
OFP_ASSERT
((
oÂ_a˘i⁄_p›_m∂s
) == 8);

649 
	soÂ_a˘i⁄_£t_fõld
 {

650 
uöt16_t
 
	mty≥
;

651 
uöt16_t
 
	mÀn
;

657 
uöt8_t
 
	mfõld
[4];

659 
OFP_ASSERT
((
oÂ_a˘i⁄_£t_fõld
) == 8);

663 
	soÂ_a˘i⁄_ex≥rimíãr_hódî
 {

664 
uöt16_t
 
	mty≥
;

665 
uöt16_t
 
	mÀn
;

666 
uöt32_t
 
	mex≥rimíãr
;

670 
OFP_ASSERT
((
oÂ_a˘i⁄_ex≥rimíãr_hódî
) == 8);

676 
	soÂ_swôch_„©uªs
 {

677 
oÂ_hódî
 
	mhódî
;

678 
uöt64_t
 
	md©≠©h_id
;

681 
uöt32_t
 
	mn_buf„rs
;

682 
uöt8_t
 
	mn_èbÀs
;

683 
uöt8_t
 
	mauxûüry_id
;

684 
uöt8_t
 
	m∑d
[2];

686 
uöt32_t
 
	mˇ∑bûôõs
;

687 
uöt32_t
 
	mª£rved
;

689 
OFP_ASSERT
((
oÂ_swôch_„©uªs
) == 32);

692 
	eoÂ_ˇ∑bûôõs
 {

693 
	mOFPC_FLOW_STATS
 = 1 << 0,

694 
	mOFPC_TABLE_STATS
 = 1 << 1,

695 
	mOFPC_PORT_STATS
 = 1 << 2,

696 
	mOFPC_GROUP_STATS
 = 1 << 3,

697 
	mOFPC_IP_REASM
 = 1 << 5,

698 
	mOFPC_QUEUE_STATS
 = 1 << 6,

699 
	mOFPC_PORT_BLOCKED
 = 1 << 8

703 
	soÂ_swôch_c⁄fig
 {

704 
oÂ_hódî
 
	mhódî
;

705 
uöt16_t
 
	mÊags
;

706 
uöt16_t
 
	mmiss_£nd_Àn
;

710 
OFP_ASSERT
((
oÂ_swôch_c⁄fig
) == 12);

712 
	eoÂ_c⁄fig_Êags
 {

714 
	mOFPC_FRAG_NORMAL
 = 0,

715 
	mOFPC_FRAG_DROP
 = 1 << 0,

716 
	mOFPC_FRAG_REASM
 = 1 << 1,

717 
	mOFPC_FRAG_MASK
 = 3,

719 
	mOFPC_INVALID_TTL_TO_CONTROLLER
 = 1 << 2,

724 
	eoÂ_èbÀ
 {

726 
	mOFPTT_MAX
 = 0xfe,

728 
	mOFPTT_ALL
 = 0xff

733 
	soÂ_èbÀ_mod
 {

734 
oÂ_hódî
 
	mhódî
;

735 
uöt8_t
 
	mèbÀ_id
;

736 
uöt8_t
 
	m∑d
[3];

737 
uöt32_t
 
	mc⁄fig
;

739 
OFP_ASSERT
((
oÂ_èbÀ_mod
) == 16);

741 
	eoÂ_èbÀ_c⁄fig
 {

742 
	mOFPTC_TABLE_MISS_CONTROLLER
 = 0,

743 
	mOFPTC_TABLE_MISS_CONTINUE
 = 1 << 0,

745 
	mOFPTC_TABLE_MISS_DROP
 = 1 << 1,

746 
	mOFPTC_TABLE_MISS_MASK
 = 3

749 
	#OFP_DEFAULT_PRIORITY
 0x8000

	)

750 
	#OFP_FLOW_PERMANENT
 0

	)

753 
	soÂ_Êow_mod
 {

754 
oÂ_hódî
 
	mhódî
;

755 
uöt64_t
 
	mcookõ
;

756 
uöt64_t
 
	mcookõ_mask
;

761 
uöt8_t
 
	mèbÀ_id
;

765 
uöt8_t
 
	mcomm™d
;

766 
uöt16_t
 
	midÀ_timeout
;

767 
uöt16_t
 
	mh¨d_timeout
;

768 
uöt16_t
 
	m¥i‹ôy
;

769 
uöt32_t
 
	mbuf„r_id
;

772 
uöt32_t
 
	mout_p‹t
;

776 
uöt32_t
 
	mout_group
;

780 
uöt16_t
 
	mÊags
;

781 
uöt8_t
 
	m∑d
[2];

782 
oÂ_m©ch
 
	mm©ch
;

787 
OFP_ASSERT
((
oÂ_Êow_mod
) == 56);

791 
	eoÂ_Êow_mod_comm™d
 {

792 
	mOFPFC_ADD
 = 0,

793 
	mOFPFC_MODIFY
 = 1,

794 
	mOFPFC_MODIFY_STRICT
 = 2,

796 
	mOFPFC_DELETE
 = 3,

797 
	mOFPFC_DELETE_STRICT
 = 4,

801 
	eoÂ_Êow_mod_Êags
 {

802 
	mOFPFF_SEND_FLOW_REM
 = 1 << 0,

804 
	mOFPFF_CHECK_OVERLAP
 = 1 << 1,

805 
	mOFPFF_RESET_COUNTS
 = 1 << 2,

806 
	mOFPFF_NO_PKT_COUNTS
 = 1 << 3,

807 
	mOFPFF_NO_BYT_COUNTS
 = 1 << 4

811 
	eoÂ_group
 {

813 
	mOFPG_MAX
 = 0xffffff00,

816 
	mOFPG_ALL
 = 0xfffffffc,

818 
	mOFPG_ANY
 = 0xffffffff

824 
	soÂ_buckë
 {

825 
uöt16_t
 
	mÀn
;

828 
uöt16_t
 
	mweight
;

830 
uöt32_t
 
	mw©ch_p‹t
;

833 
uöt32_t
 
	mw©ch_group
;

836 
uöt8_t
 
	m∑d
[4];

837 
oÂ_a˘i⁄_hódî
 
	ma˘i⁄s
[0];

841 
OFP_ASSERT
((
oÂ_buckë
) == 16);

844 
	soÂ_group_mod
 {

845 
oÂ_hódî
 
	mhódî
;

846 
uöt16_t
 
	mcomm™d
;

847 
uöt8_t
 
	mty≥
;

848 
uöt8_t
 
	m∑d
;

849 
uöt32_t
 
	mgroup_id
;

850 
oÂ_buckë
 
	mbuckës
[0];

853 
OFP_ASSERT
((
oÂ_group_mod
) == 16);

856 
	eoÂ_group_mod_comm™d
 {

857 
	mOFPGC_ADD
 = 0,

858 
	mOFPGC_MODIFY
 = 1,

859 
	mOFPGC_DELETE
 = 2,

864 
	eoÂ_group_ty≥
 {

865 
	mOFPGT_ALL
 = 0,

866 
	mOFPGT_SELECT
 = 1,

867 
	mOFPGT_INDIRECT
 = 2,

868 
	mOFPGT_FF
 = 3,

873 
	soÂ_p‹t_mod
 {

874 
oÂ_hódî
 
	mhódî
;

875 
uöt32_t
 
	mp‹t_no
;

876 
uöt8_t
 
	m∑d
[4];

877 
uöt8_t
 
	mhw_addr
[
OFP_ETH_ALEN
];

882 
uöt8_t
 
	m∑d2
[2];

883 
uöt32_t
 
	mc⁄fig
;

884 
uöt32_t
 
	mmask
;

885 
uöt32_t
 
	madvîti£
;

887 
uöt8_t
 
	m∑d3
[4];

889 
OFP_ASSERT
((
oÂ_p‹t_mod
) == 40);

892 
	soÂ_mëî_b™d_hódî
 {

893 
uöt16_t
 
	mty≥
;

894 
uöt16_t
 
	mÀn
;

895 
uöt32_t
 
	møã
;

896 
uöt32_t
 
	mbur°_size
;

898 
OFP_ASSERT
((
oÂ_mëî_b™d_hódî
) == 12);

901 
	soÂ_mëî_mod
 {

902 
oÂ_hódî
 
	mhódî
;

903 
uöt16_t
 
	mcomm™d
;

904 
uöt16_t
 
	mÊags
;

905 
uöt32_t
 
	mmëî_id
;

906 
oÂ_mëî_b™d_hódî
 
	mb™ds
[0];

910 
OFP_ASSERT
((
oÂ_mëî_mod
) == 16);

913 
	eoÂ_mëî
 {

915 
	mOFPM_MAX
 = 0xffff0000,

917 
	mOFPM_SLOWPATH
 = 0xfffffffd,

918 
	mOFPM_CONTROLLER
 = 0xfffffffe,

919 
	mOFPM_ALL
 = 0xffffffff,

926 
	eoÂ_mëî_mod_comm™d
 {

927 
	mOFPMC_ADD
,

928 
	mOFPMC_MODIFY
,

929 
	mOFPMC_DELETE
,

933 
	eoÂ_mëî_Êags
 {

934 
	mOFPMF_KBPS
 = 1 << 0,

935 
	mOFPMF_PKTPS
 = 1 << 1,

936 
	mOFPMF_BURST
 = 1 << 2,

937 
	mOFPMF_STATS
 = 1 << 3,

942 
	eoÂ_mëî_b™d_ty≥
 {

943 
	mOFPMBT_DROP
 = 1,

944 
	mOFPMBT_DSCP_REMARK
 = 2,

945 
	mOFPMBT_EXPERIMENTER
 = 0xFFFF

949 
	soÂ_mëî_b™d_dr›
 {

950 
uöt16_t
 
	mty≥
;

951 
uöt16_t
 
	mÀn
;

952 
uöt32_t
 
	møã
;

953 
uöt32_t
 
	mbur°_size
;

954 
uöt8_t
 
	m∑d
[4];

956 
OFP_ASSERT
((
oÂ_mëî_b™d_dr›
) == 16);

959 
	soÂ_mëî_b™d_ds˝_ªm¨k
 {

960 
uöt16_t
 
	mty≥
;

961 
uöt16_t
 
	mÀn
;

962 
uöt32_t
 
	møã
;

963 
uöt32_t
 
	mbur°_size
;

964 
uöt8_t
 
	m¥ec_Àvñ
;

965 
uöt8_t
 
	m∑d
[3];

967 
OFP_ASSERT
((
oÂ_mëî_b™d_ds˝_ªm¨k
) == 16);

970 
	soÂ_mëî_b™d_ex≥rimíãr
 {

971 
uöt16_t
 
	mty≥
;

972 
uöt16_t
 
	mÀn
;

973 
uöt32_t
 
	møã
;

974 
uöt32_t
 
	mbur°_size
;

975 
uöt32_t
 
	mex≥rimíãr
;

979 
OFP_ASSERT
((
oÂ_mëî_b™d_ex≥rimíãr
) == 16);

982 
	soÂ_mu…ù¨t_ªque°
 {

983 
oÂ_hódî
 
	mhódî
;

984 
uöt16_t
 
	mty≥
;

985 
uöt16_t
 
	mÊags
;

986 
uöt8_t
 
	m∑d
[4];

987 
uöt8_t
 
	mbody
[0];

989 
OFP_ASSERT
((
oÂ_mu…ù¨t_ªque°
) == 16);

991 
	eoÂ_mu…ù¨t_ªque°_Êags
 {

992 
	mOFPMPF_REQ_MORE
 = 1 << 0

995 
	eoÂ_mu…ù¨t_ª∂y_Êags
 {

996 
	mOFPMPF_REPLY_MORE
 = 1 << 0

999 
	soÂ_mu…ù¨t_ª∂y
 {

1000 
oÂ_hódî
 
	mhódî
;

1001 
uöt16_t
 
	mty≥
;

1002 
uöt16_t
 
	mÊags
;

1003 
uöt8_t
 
	m∑d
[4];

1004 
uöt8_t
 
	mbody
[0];

1006 
OFP_ASSERT
((
oÂ_mu…ù¨t_ª∂y
) == 16);

1008 
	eoÂ_mu…ù¨t_ty≥s
 {

1012 
	mOFPMP_DESC
 = 0,

1016 
	mOFPMP_FLOW
 = 1,

1020 
	mOFPMP_AGGREGATE
 = 2,

1024 
	mOFPMP_TABLE
 = 3,

1028 
	mOFPMP_PORT_STATS
 = 4,

1032 
	mOFPMP_QUEUE
 = 5,

1036 
	mOFPMP_GROUP
 = 6,

1040 
	mOFPMP_GROUP_DESC
 = 7,

1044 
	mOFPMP_GROUP_FEATURES
 = 8,

1048 
	mOFPMP_METER
 = 9,

1052 
	mOFPMP_METER_CONFIG
 = 10,

1056 
	mOFPMP_METER_FEATURES
 = 11,

1063 
	mOFPMP_TABLE_FEATURES
 = 12,

1067 
	mOFPMP_PORT_DESC
 = 13,

1072 
	mOFPMP_EXPERIMENTER
 = 0xffff

1075 
	#DESC_STR_LEN
 256

	)

1076 
	#SERIAL_NUM_LEN
 32

	)

1079 
	soÂ_desc
 {

1080 
	mm‰_desc
[
DESC_STR_LEN
];

1081 
	mhw_desc
[
DESC_STR_LEN
];

1082 
	msw_desc
[
DESC_STR_LEN
];

1083 
	m£rül_num
[
SERIAL_NUM_LEN
];

1084 
	mdp_desc
[
DESC_STR_LEN
];

1086 
OFP_ASSERT
((
oÂ_desc
) == 1056);

1089 
	soÂ_Êow_°©s_ªque°
 {

1090 
uöt8_t
 
	mèbÀ_id
;

1092 
uöt8_t
 
	m∑d
[3];

1093 
uöt32_t
 
	mout_p‹t
;

1096 
uöt32_t
 
	mout_group
;

1099 
uöt8_t
 
	m∑d2
[4];

1100 
uöt64_t
 
	mcookõ
;

1102 
uöt64_t
 
	mcookõ_mask
;

1105 
oÂ_m©ch
 
	mm©ch
;

1109 
OFP_ASSERT
((
oÂ_Êow_°©s_ªque°
) == 40);

1114 
	soÂ_Êow_°©s
 {

1115 
uöt16_t
 
	mÀngth
;

1116 
uöt8_t
 
	mèbÀ_id
;

1117 
uöt8_t
 
	m∑d
;

1118 
uöt32_t
 
	mduøti⁄_£c
;

1119 
uöt32_t
 
	mduøti⁄_n£c
;

1121 
uöt16_t
 
	m¥i‹ôy
;

1122 
uöt16_t
 
	midÀ_timeout
;

1123 
uöt16_t
 
	mh¨d_timeout
;

1124 
uöt8_t
 
	m∑d2
[6];

1125 
uöt64_t
 
	mcookõ
;

1126 
uöt64_t
 
	m∑ckë_cou¡
;

1127 
uöt64_t
 
	mbyã_cou¡
;

1128 
oÂ_m©ch
 
	mm©ch
;

1133 
OFP_ASSERT
((
oÂ_Êow_°©s
) == 56);

1138 
	soÂ_aggªg©e_°©s_ªque°
 {

1139 
uöt8_t
 
	mèbÀ_id
;

1141 
uöt8_t
 
	m∑d
[3];

1142 
uöt32_t
 
	mout_p‹t
;

1145 
uöt32_t
 
	mout_group
;

1148 
uöt8_t
 
	m∑d2
[4];

1149 
uöt64_t
 
	mcookõ
;

1151 
uöt64_t
 
	mcookõ_mask
;

1154 
oÂ_m©ch
 
	mm©ch
;

1158 
OFP_ASSERT
((
oÂ_aggªg©e_°©s_ªque°
) == 40);

1163 
	soÂ_aggªg©e_°©s_ª∂y
 {

1164 
uöt64_t
 
	m∑ckë_cou¡
;

1165 
uöt64_t
 
	mbyã_cou¡
;

1166 
uöt32_t
 
	mÊow_cou¡
;

1167 
uöt8_t
 
	m∑d
[4];

1169 
OFP_ASSERT
((
oÂ_aggªg©e_°©s_ª∂y
) == 24);

1174 
	eoÂ_Êow_m©ch_fõlds
 {

1175 
	mOFPFMF_IN_PORT
 = 1 << 0,

1176 
	mOFPFMF_DL_VLAN
 = 1 << 1,

1177 
	mOFPFMF_DL_VLAN_PCP
 = 1 << 2,

1178 
	mOFPFMF_DL_TYPE
 = 1 << 3,

1179 
	mOFPFMF_NW_TOS
 = 1 << 4,

1180 
	mOFPFMF_NW_PROTO
 = 1 << 5,

1181 
	mOFPFMF_TP_SRC
 = 1 << 6,

1182 
	mOFPFMF_TP_DST
 = 1 << 7,

1183 
	mOFPFMF_MPLS_LABEL
 = 1 << 8,

1184 
	mOFPFMF_MPLS_TC
 = 1 << 9,

1185 
	mOFPFMF_TYPE
 = 1 << 10,

1186 
	mOFPFMF_DL_SRC
 = 1 << 11,

1187 
	mOFPFMF_DL_DST
 = 1 << 12,

1188 
	mOFPFMF_NW_SRC
 = 1 << 13,

1189 
	mOFPFMF_NW_DST
 = 1 << 14,

1190 
	mOFPFMF_METADATA
 = 1 << 15,

1195 
	soÂ_èbÀ_°©s
 {

1196 
uöt8_t
 
	mèbÀ_id
;

1198 
uöt8_t
 
	m∑d
[3];

1199 
uöt32_t
 
	ma˘ive_cou¡
;

1200 
uöt64_t
 
	mlookup_cou¡
;

1201 
uöt64_t
 
	mm©ched_cou¡
;

1203 
OFP_ASSERT
((
oÂ_èbÀ_°©s
) == 24);

1205 
	soÂ_èbÀ_„©uª_¥›_hódî
{

1206 
uöt16_t
 
	mty≥
;

1208 
uöt16_t
 
	mÀngth
;

1210 
OFP_ASSERT
((
oÂ_èbÀ_„©uª_¥›_hódî
) == 4);

1214 
	soÂ_èbÀ_„©uªs
 {

1215 
uöt16_t
 
	mÀngth
;

1216 
uöt8_t
 
	mèbÀ_id
;

1218 
uöt8_t
 
	m∑d
[5];

1219 
	m«me
[
OFP_MAX_TABLE_NAME_LEN
];

1220 
uöt64_t
 
	mmëad©a_m©ch
;

1221 
uöt64_t
 
	mmëad©a_wrôe
;

1222 
uöt32_t
 
	mc⁄fig
;

1223 
uöt32_t
 
	mmax_íåõs
;

1225 
oÂ_èbÀ_„©uª_¥›_hódî
 
	m¥›îtõs
[0];

1227 
OFP_ASSERT
((
oÂ_èbÀ_„©uªs
) == 64);

1233 
	eoÂ_èbÀ_„©uª_¥›_ty≥
 {

1234 
	mOFPTFPT_INSTRUCTIONS
 = 0,

1235 
	mOFPTFPT_INSTRUCTIONS_MISS
 = 1,

1236 
	mOFPTFPT_NEXT_TABLES
 = 2,

1237 
	mOFPTFPT_NEXT_TABLES_MISS
 = 3,

1238 
	mOFPTFPT_WRITE_ACTIONS
 = 4,

1239 
	mOFPTFPT_WRITE_ACTIONS_MISS
 = 5,

1240 
	mOFPTFPT_APPLY_ACTIONS
 = 6,

1241 
	mOFPTFPT_APPLY_ACTIONS_MISS
 = 7,

1242 
	mOFPTFPT_MATCH
 = 8,

1243 
	mOFPTFPT_WILDCARDS
 = 10,

1244 
	mOFPTFPT_WRITE_SETFIELD
 = 12,

1245 
	mOFPTFPT_WRITE_SETFIELD_MISS
 = 13,

1246 
	mOFPTFPT_APPLY_SETFIELD
 = 14,

1247 
	mOFPTFPT_APPLY_SETFIELD_MISS
 = 15,

1248 
	mOFPTFPT_EXPERIMENTER
 = 0xFFFE,

1249 
	mOFPTFPT_EXPERIMENTER_MISS
 = 0xFFFF,

1253 
	soÂ_èbÀ_„©uª_¥›_ö°ru˘i⁄s
 {

1254 
uöt16_t
 
	mty≥
;

1256 
uöt16_t
 
	mÀngth
;

1264 
oÂ_ö°ru˘i⁄
 
	mö°ru˘i⁄_ids
[0];

1266 
OFP_ASSERT
((
oÂ_èbÀ_„©uª_¥›_ö°ru˘i⁄s
) == 4);

1269 
	soÂ_èbÀ_„©uª_¥›_√xt_èbÀs
 {

1270 
uöt16_t
 
	mty≥
;

1272 
uöt16_t
 
	mÀngth
;

1280 
uöt8_t
 
	m√xt_èbÀ_ids
[0];

1282 
OFP_ASSERT
((
oÂ_èbÀ_„©uª_¥›_√xt_èbÀs
) == 4);

1285 
	soÂ_èbÀ_„©uª_¥›_a˘i⁄s
 {

1286 
uöt16_t
 
	mty≥
;

1291 
uöt16_t
 
	mÀngth
;

1299 
oÂ_a˘i⁄_hódî
 
	ma˘i⁄_ids
[0];

1301 
OFP_ASSERT
((
oÂ_èbÀ_„©uª_¥›_a˘i⁄s
) == 4);

1304 
	soÂ_èbÀ_„©uª_¥›_oxm
 {

1305 
uöt16_t
 
	mty≥
;

1312 
uöt16_t
 
	mÀngth
;

1320 
uöt32_t
 
	moxm_ids
[0];

1322 
OFP_ASSERT
((
oÂ_èbÀ_„©uª_¥›_oxm
) == 4);

1326 
	soÂ_p‹t_°©s_ªque°
 {

1327 
uöt32_t
 
	mp‹t_no
;

1331 
uöt8_t
 
	m∑d
[4];

1333 
OFP_ASSERT
((
oÂ_p‹t_°©s_ªque°
) == 8);

1337 
	soÂ_p‹t_°©s
 {

1338 
uöt32_t
 
	mp‹t_no
;

1339 
uöt8_t
 
	m∑d
[4];

1340 
uöt64_t
 
	mrx_∑ckës
;

1341 
uöt64_t
 
	mtx_∑ckës
;

1342 
uöt64_t
 
	mrx_byãs
;

1343 
uöt64_t
 
	mtx_byãs
;

1344 
uöt64_t
 
	mrx_dr›≥d
;

1345 
uöt64_t
 
	mtx_dr›≥d
;

1346 
uöt64_t
 
	mrx_îr‹s
;

1350 
uöt64_t
 
	mtx_îr‹s
;

1354 
uöt64_t
 
	mrx_‰ame_îr
;

1355 
uöt64_t
 
	mrx_ovî_îr
;

1356 
uöt64_t
 
	mrx_¸c_îr
;

1357 
uöt64_t
 
	mcﬁlisi⁄s
;

1358 
uöt32_t
 
	mduøti⁄_£c
;

1359 
uöt32_t
 
	mduøti⁄_n£c
;

1362 
OFP_ASSERT
((
oÂ_p‹t_°©s
) == 112);

1364 
	soÂ_queue_°©s_ªque°
 {

1365 
uöt32_t
 
	mp‹t_no
;

1366 
uöt32_t
 
	mqueue_id
;

1368 
OFP_ASSERT
((
oÂ_queue_°©s_ªque°
) == 8);

1370 
	soÂ_queue_°©s
 {

1371 
uöt32_t
 
	mp‹t_no
;

1372 
uöt32_t
 
	mqueue_id
;

1373 
uöt64_t
 
	mtx_byãs
;

1374 
uöt64_t
 
	mtx_∑ckës
;

1375 
uöt64_t
 
	mtx_îr‹s
;

1376 
uöt32_t
 
	mduøti⁄_£c
;

1377 
uöt32_t
 
	mduøti⁄_n£c
;

1380 
OFP_ASSERT
((
oÂ_queue_°©s
) == 40);

1383 
	soÂ_group_°©s_ªque°
 {

1384 
uöt32_t
 
	mgroup_id
;

1385 
uöt8_t
 
	m∑d
[4];

1387 
OFP_ASSERT
((
oÂ_group_°©s_ªque°
) == 8);

1390 
	soÂ_buckë_cou¡î
 {

1391 
uöt64_t
 
	m∑ckë_cou¡
;

1392 
uöt64_t
 
	mbyã_cou¡
;

1394 
OFP_ASSERT
((
oÂ_buckë_cou¡î
) == 16);

1397 
	soÂ_group_°©s
 {

1398 
uöt16_t
 
	mÀngth
;

1399 
uöt8_t
 
	m∑d
[2];

1400 
uöt32_t
 
	mgroup_id
;

1401 
uöt32_t
 
	mªf_cou¡
;

1403 
uöt8_t
 
	m∑d2
[4];

1404 
uöt64_t
 
	m∑ckë_cou¡
;

1405 
uöt64_t
 
	mbyã_cou¡
;

1406 
uöt32_t
 
	mduøti⁄_£c
;

1407 
uöt32_t
 
	mduøti⁄_n£c
;

1409 
oÂ_buckë_cou¡î
 
	mbuckë_°©s
[0];

1412 
OFP_ASSERT
((
oÂ_group_°©s
) == 40);

1415 
	soÂ_group_desc_°©s
 {

1416 
uöt16_t
 
	mÀngth
;

1417 
uöt8_t
 
	mty≥
;

1418 
uöt8_t
 
	m∑d
;

1419 
uöt32_t
 
	mgroup_id
;

1420 
oÂ_buckë
 
	mbuckës
[0];

1422 
OFP_ASSERT
((
oÂ_group_desc_°©s
) == 8);

1425 
	soÂ_group_„©uªs_°©s
 {

1426 
uöt32_t
 
	mty≥s
;

1427 
uöt32_t
 
	mˇ∑bûôõs
;

1428 
uöt32_t
 
	mmax_groups
[4];

1429 
uöt32_t
 
	ma˘i⁄s
[4];

1431 
OFP_ASSERT
((
oÂ_group_„©uªs_°©s
) == 40);

1434 
	eoÂ_group_ˇ∑bûôõs
 {

1435 
	mOFPGFC_SELECT_WEIGHT
 = 1 << 0,

1436 
	mOFPGFC_SELECT_LIVENESS
 = 1 << 1,

1437 
	mOFPGFC_CHAINING
 = 1 << 2,

1438 
	mOFPGFC_CHAINING_CHECKS
 = 1 << 3,

1442 
	soÂ_mëî_mu…ù¨t_ªque°
 {

1443 
uöt32_t
 
	mmëî_id
;

1444 
uöt8_t
 
	m∑d
[4];

1446 
OFP_ASSERT
((
oÂ_mëî_mu…ù¨t_ªque°
) == 8);

1449 
	soÂ_mëî_b™d_°©s
 {

1450 
uöt64_t
 
	m∑ckë_b™d_cou¡
;

1451 
uöt64_t
 
	mbyã_b™d_cou¡
;

1453 
OFP_ASSERT
((
oÂ_mëî_b™d_°©s
) == 16);

1456 
	soÂ_mëî_°©s
 {

1457 
uöt32_t
 
	mmëî_id
;

1458 
uöt16_t
 
	mÀn
;

1459 
uöt8_t
 
	m∑d
[6];

1460 
uöt32_t
 
	mÊow_cou¡
;

1461 
uöt64_t
 
	m∑ckë_ö_cou¡
;

1462 
uöt64_t
 
	mbyã_ö_cou¡
;

1463 
uöt32_t
 
	mduøti⁄_£c
;

1464 
uöt32_t
 
	mduøti⁄_n£c
;

1466 
oÂ_mëî_b™d_°©s
 
	mb™d_°©s
[0];

1469 
OFP_ASSERT
((
oÂ_mëî_°©s
) == 40);

1472 
	soÂ_mëî_c⁄fig
 {

1473 
uöt16_t
 
	mÀngth
;

1474 
uöt16_t
 
	mÊags
;

1475 
uöt32_t
 
	mmëî_id
;

1476 
oÂ_mëî_b™d_hódî
 
	mb™ds
[0];

1479 
OFP_ASSERT
((
oÂ_mëî_c⁄fig
) == 8);

1482 
	soÂ_mëî_„©uªs
 {

1483 
uöt32_t
 
	mmax_mëî
;

1484 
uöt32_t
 
	mb™d_ty≥s
;

1485 
uöt32_t
 
	mˇ∑bûôõs
;

1486 
uöt8_t
 
	mmax_b™ds
;

1487 
uöt8_t
 
	mmax_cﬁ‹
;

1488 
uöt8_t
 
	m∑d
[2];

1490 
OFP_ASSERT
((
oÂ_mëî_„©uªs
) == 16);

1494 
	soÂ_ex≥rimíãr_°©s_hódî
 {

1495 
uöt32_t
 
	mex≥rimíãr
;

1497 
uöt32_t
 
	mexp_ty≥
;

1500 
OFP_ASSERT
((
oÂ_ex≥rimíãr_°©s_hódî
) == 8);

1503 
	soÂ_queue_gë_c⁄fig_ªque°
 {

1504 
oÂ_hódî
 
	mhódî
;

1505 
uöt32_t
 
	mp‹t
;

1509 
uöt8_t
 
	m∑d
[4];

1511 
OFP_ASSERT
((
oÂ_queue_gë_c⁄fig_ªque°
) == 16);

1514 
	soÂ_queue_gë_c⁄fig_ª∂y
 {

1515 
oÂ_hódî
 
	mhódî
;

1516 
uöt32_t
 
	mp‹t
;

1517 
uöt8_t
 
	m∑d
[4];

1518 
oÂ_∑ckë_queue
 
	mqueues
[0];

1520 
OFP_ASSERT
((
oÂ_queue_gë_c⁄fig_ª∂y
) == 16);

1523 
	soÂ_∑ckë_out
 {

1524 
oÂ_hódî
 
	mhódî
;

1525 
uöt32_t
 
	mbuf„r_id
;

1527 
uöt32_t
 
	mö_p‹t
;

1528 
uöt16_t
 
	ma˘i⁄s_Àn
;

1529 
uöt8_t
 
	m∑d
[6];

1530 
oÂ_a˘i⁄_hódî
 
	ma˘i⁄s
[0];

1535 
OFP_ASSERT
((
oÂ_∑ckë_out
) == 24);

1538 
	soÂ_rﬁe_ªque°
 {

1539 
oÂ_hódî
 
	mhódî
;

1540 
uöt32_t
 
	mrﬁe
;

1541 
uöt8_t
 
	m∑d
[4];

1542 
uöt64_t
 
	mgíî©i⁄_id
;

1544 
OFP_ASSERT
((
oÂ_rﬁe_ªque°
) == 24);

1547 
	eoÂ_c⁄åﬁÀr_rﬁe
 {

1548 
	mOFPCR_ROLE_NOCHANGE
 = 0,

1549 
	mOFPCR_ROLE_EQUAL
 = 1,

1550 
	mOFPCR_ROLE_MASTER
 = 2,

1551 
	mOFPCR_ROLE_SLAVE
 = 3,

1555 
	soÂ_async_c⁄fig
 {

1556 
oÂ_hódî
 
	mhódî
;

1557 
uöt32_t
 
	m∑ckë_ö_mask
[2];

1558 
uöt32_t
 
	mp‹t_°©us_mask
[2];

1559 
uöt32_t
 
	mÊow_ªmoved_mask
[2];

1561 
OFP_ASSERT
((
oÂ_async_c⁄fig
) == 32);

1565 
	#OFP_NO_BUFFER
 0xffffffff

	)

1568 
	soÂ_∑ckë_ö
 {

1569 
oÂ_hódî
 
	mhódî
;

1570 
uöt32_t
 
	mbuf„r_id
;

1571 
uöt16_t
 
	mtŸÆ_Àn
;

1572 
uöt8_t
 
	mªas⁄
;

1573 
uöt8_t
 
	mèbÀ_id
;

1574 
uöt64_t
 
	mcookõ
;

1575 
oÂ_m©ch
 
	mm©ch
;

1587 
OFP_ASSERT
((
oÂ_∑ckë_ö
) == 32);

1592 
	eoÂ_∑ckë_ö_ªas⁄
 {

1593 
	mOFPR_NO_MATCH
 = 0,

1594 
	mOFPR_ACTION
 = 1,

1595 
	mOFPR_INVALID_TTL
 = 2,

1599 
	soÂ_Êow_ªmoved
 {

1600 
oÂ_hódî
 
	mhódî
;

1601 
uöt64_t
 
	mcookõ
;

1602 
uöt16_t
 
	m¥i‹ôy
;

1603 
uöt8_t
 
	mªas⁄
;

1604 
uöt8_t
 
	mèbÀ_id
;

1605 
uöt32_t
 
	mduøti⁄_£c
;

1606 
uöt32_t
 
	mduøti⁄_n£c
;

1608 
uöt16_t
 
	midÀ_timeout
;

1609 
uöt16_t
 
	mh¨d_timeout
;

1610 
uöt64_t
 
	m∑ckë_cou¡
;

1611 
uöt64_t
 
	mbyã_cou¡
;

1612 
oÂ_m©ch
 
	mm©ch
;

1616 
OFP_ASSERT
((
oÂ_Êow_ªmoved
) == 56);

1621 
	eoÂ_Êow_ªmoved_ªas⁄
 {

1622 
	mOFPRR_IDLE_TIMEOUT
 = 0,

1623 
	mOFPRR_HARD_TIMEOUT
 = 1,

1624 
	mOFPRR_DELETE
 = 2,

1625 
	mOFPRR_GROUP_DELETE
 = 3,

1626 
	mOFPRR_METER_DELETE
 = 4,

1630 
	soÂ_p‹t_°©us
 {

1631 
oÂ_hódî
 
	mhódî
;

1632 
uöt8_t
 
	mªas⁄
;

1633 
uöt8_t
 
	m∑d
[7];

1634 
oÂ_p‹t
 
	mdesc
;

1636 
OFP_ASSERT
((
oÂ_p‹t_°©us
) == 80);

1639 
	eoÂ_p‹t_ªas⁄
 {

1640 
	mOFPPR_ADD
 = 0,

1641 
	mOFPPR_DELETE
 = 1,

1642 
	mOFPPR_MODIFY
 = 2,

1646 
	soÂ_îr‹_msg
 {

1647 
oÂ_hódî
 
	mhódî
;

1648 
uöt16_t
 
	mty≥
;

1649 
uöt16_t
 
	mcode
;

1650 
uöt8_t
 
	md©a
[0];

1653 
OFP_ASSERT
((
oÂ_îr‹_msg
) == 12);

1658 
	eoÂ_îr‹_ty≥
 {

1659 
	mOFPET_HELLO_FAILED
 = 0,

1660 
	mOFPET_BAD_REQUEST
 = 1,

1661 
	mOFPET_BAD_ACTION
 = 2,

1662 
	mOFPET_BAD_INSTRUCTION
 = 3,

1663 
	mOFPET_BAD_MATCH
 = 4,

1664 
	mOFPET_FLOW_MOD_FAILED
 = 5,

1665 
	mOFPET_GROUP_MOD_FAILED
 = 6,

1666 
	mOFPET_PORT_MOD_FAILED
 = 7,

1667 
	mOFPET_TABLE_MOD_FAILED
 = 8,

1668 
	mOFPET_QUEUE_OP_FAILED
 = 9,

1669 
	mOFPET_SWITCH_CONFIG_FAILED
 = 10,

1670 
	mOFPET_ROLE_REQUEST_FAILED
 = 11,

1671 
	mOFPET_METER_MOD_FAILED
 = 12,

1672 
	mOFPET_TABLE_FEATURES_FAILED
 = 13,

1673 
	mOFPET_EXPERIMENTER
 = 0xffff

1678 
	eoÂ_hñlo_Áûed_code
 {

1679 
	mOFPHFC_INCOMPATIBLE
 = 0,

1680 
	mOFPHFC_EPERM
 = 1,

1685 
	eoÂ_bad_ªque°_code
 {

1686 
	mOFPBRC_BAD_VERSION
 = 0,

1687 
	mOFPBRC_BAD_TYPE
 = 1,

1688 
	mOFPBRC_BAD_MULTIPART
 = 2,

1689 
	mOFPBRC_BAD_EXPERIMENTER
 = 3,

1692 
	mOFPBRC_BAD_EXP_TYPE
 = 4,

1693 
	mOFPBRC_EPERM
 = 5,

1694 
	mOFPBRC_BAD_LEN
 = 6,

1695 
	mOFPBRC_BUFFER_EMPTY
 = 7,

1696 
	mOFPBRC_BUFFER_UNKNOWN
 = 8,

1697 
	mOFPBRC_BAD_TABLE_ID
 = 9,

1699 
	mOFPBRC_IS_SLAVE
 = 10,

1700 
	mOFPBRC_BAD_PORT
 = 11,

1701 
	mOFPBRC_BAD_PACKET
 = 12,

1702 
	mOFPBRC_MULTIPART_BUFFER_OVERFLOW
 = 13,

1709 
	eoÂ_bad_a˘i⁄_code
 {

1710 
	mOFPBAC_BAD_TYPE
 = 0,

1711 
	mOFPBAC_BAD_LEN
 = 1,

1712 
	mOFPBAC_BAD_EXPERIMENTER
 = 2,

1713 
	mOFPBAC_BAD_EXP_TYPE
 = 3,

1714 
	mOFPBAC_BAD_OUT_PORT
 = 4,

1715 
	mOFPBAC_BAD_ARGUMENT
 = 5,

1716 
	mOFPBAC_EPERM
 = 6,

1717 
	mOFPBAC_TOO_MANY
 = 7,

1718 
	mOFPBAC_BAD_QUEUE
 = 8,

1719 
	mOFPBAC_BAD_OUT_GROUP
 = 9,

1720 
	mOFPBAC_MATCH_INCONSISTENT
 = 10,

1722 
	mOFPBAC_UNSUPPORTED_ORDER
 = 11,

1724 
	mOFPBAC_BAD_TAG
 = 12,

1726 
	mOFPBAC_BAD_SET_TYPE
 = 13,

1727 
	mOFPBAC_BAD_SET_LEN
 = 14,

1728 
	mOFPBAC_BAD_SET_ARGUMENT
 = 15,

1733 
	eoÂ_bad_ö°ru˘i⁄_code
 {

1734 
	mOFPBIC_UNKNOWN_INST
 = 0,

1735 
	mOFPBIC_UNSUP_INST
 = 1,

1737 
	mOFPBIC_BAD_TABLE_ID
 = 2,

1738 
	mOFPBIC_UNSUP_METADATA
 = 3,

1739 
	mOFPBIC_UNSUP_METADATA_MASK
 = 4,

1741 
	mOFPBIC_BAD_EXPERIMENTER
 = 5,

1742 
	mOFPBIC_BAD_EXP_TYPE
 = 6,

1743 
	mOFPBIC_BAD_LEN
 = 7,

1744 
	mOFPBIC_EPERM
 = 8,

1749 
	eoÂ_bad_m©ch_code
 {

1750 
	mOFPBMC_BAD_TYPE
 = 0,

1752 
	mOFPBMC_BAD_LEN
 = 1,

1753 
	mOFPBMC_BAD_TAG
 = 2,

1754 
	mOFPBMC_BAD_DL_ADDR_MASK
 = 3,

1757 
	mOFPBMC_BAD_NW_ADDR_MASK
 = 4,

1760 
	mOFPBMC_BAD_WILDCARDS
 = 5,

1762 
	mOFPBMC_BAD_FIELD
 = 6,

1763 
	mOFPBMC_BAD_VALUE
 = 7,

1764 
	mOFPBMC_BAD_MASK
 = 8,

1766 
	mOFPBMC_BAD_PREREQ
 = 9,

1767 
	mOFPBMC_DUP_FIELD
 = 10,

1768 
	mOFPBMC_EPERM
 = 11,

1773 
	eoÂ_Êow_mod_Áûed_code
 {

1774 
	mOFPFMFC_UNKNOWN
 = 0,

1775 
	mOFPFMFC_TABLE_FULL
 = 1,

1776 
	mOFPFMFC_BAD_TABLE_ID
 = 2,

1777 
	mOFPFMFC_OVERLAP
 = 3,

1779 
	mOFPFMFC_EPERM
 = 4,

1780 
	mOFPFMFC_BAD_TIMEOUT
 = 5,

1782 
	mOFPFMFC_BAD_COMMAND
 = 6,

1783 
	mOFPFMFC_BAD_FLAGS
 = 7,

1788 
	eoÂ_group_mod_Áûed_code
 {

1789 
	mOFPGMFC_GROUP_EXISTS
 = 0,

1792 
	mOFPGMFC_INVALID_GROUP
 = 1,

1794 
	mOFPGMFC_OUT_OF_GROUPS
 = 3,

1796 
	mOFPGMFC_OUT_OF_BUCKETS
 = 4,

1798 
	mOFPGMFC_CHAINING_UNSUPPORTED
 = 5,

1800 
	mOFPGMFC_WATCH_UNSUPPORTED
 = 6,

1802 
	mOFPGMFC_LOOP
 = 7,

1803 
	mOFPGMFC_UNKNOWN_GROUP
 = 8,

1806 
	mOFPGMFC_CHAINED_GROUP
 = 9,

1808 
	mOFPGMFC_BAD_TYPE
 = 10,

1809 
	mOFPGMFC_BAD_COMMAND
 = 11,

1810 
	mOFPGMFC_BAD_BUCKET
 = 12,

1811 
	mOFPGMFC_BAD_WATCH
 = 13,

1812 
	mOFPGMFC_EPERM
 = 14,

1817 
	eoÂ_p‹t_mod_Áûed_code
 {

1818 
	mOFPPMFC_BAD_PORT
 = 0,

1819 
	mOFPPMFC_BAD_HW_ADDR
 = 1,

1821 
	mOFPPMFC_BAD_CONFIG
 = 2,

1822 
	mOFPPMFC_BAD_ADVERTISE
 = 3,

1823 
	mOFPPMFC_EPERM
 = 4,

1828 
	eoÂ_èbÀ_mod_Áûed_code
 {

1829 
	mOFPTMFC_BAD_TABLE
 = 0,

1830 
	mOFPTMFC_BAD_CONFIG
 = 1,

1831 
	mOFPTMFC_EPERM
 = 2,

1836 
	eoÂ_queue_›_Áûed_code
 {

1837 
	mOFPQOFC_BAD_PORT
 = 0,

1838 
	mOFPQOFC_BAD_QUEUE
 = 1,

1839 
	mOFPQOFC_EPERM
 = 2,

1844 
	eoÂ_swôch_c⁄fig_Áûed_code
 {

1845 
	mOFPSCFC_BAD_FLAGS
 = 0,

1846 
	mOFPSCFC_BAD_LEN
 = 1,

1847 
	mOFPQCFC_EPERM
 = 2,

1852 
	eoÂ_rﬁe_ªque°_Áûed_code
 {

1853 
	mOFPRRFC_STALE
 = 0,

1854 
	mOFPRRFC_UNSUP
 = 1,

1855 
	mOFPRRFC_BAD_ROLE
 = 2,

1860 
	eoÂ_mëî_mod_Áûed_code
 {

1861 
	mOFPMMFC_UNKNOWN
 = 0,

1862 
	mOFPMMFC_METER_EXISTS
 = 1,

1864 
	mOFPMMFC_INVALID_METER
 = 2,

1866 
	mOFPMMFC_UNKNOWN_METER
 = 3,

1869 
	mOFPMMFC_BAD_COMMAND
 = 4,

1870 
	mOFPMMFC_BAD_FLAGS
 = 5,

1871 
	mOFPMMFC_BAD_RATE
 = 6,

1872 
	mOFPMMFC_BAD_BURST
 = 7,

1873 
	mOFPMMFC_BAD_BAND
 = 8,

1874 
	mOFPMMFC_BAD_BAND_VALUE
 = 9,

1875 
	mOFPMMFC_OUT_OF_METERS
 = 10,

1876 
	mOFPMMFC_OUT_OF_BANDS
 = 11,

1882 
	eoÂ_èbÀ_„©uªs_Áûed_code
 {

1883 
	mOFPTFFC_BAD_TABLE
 = 0,

1884 
	mOFPTFFC_BAD_METADATA
 = 1,

1885 
	mOFPTFFC_BAD_TYPE
 = 2,

1886 
	mOFPTFFC_BAD_LEN
 = 3,

1887 
	mOFPTFFC_BAD_ARGUMENT
 = 4,

1888 
	mOFPTFFC_EPERM
 = 5,

1892 
	soÂ_îr‹_ex≥rimíãr_msg
 {

1893 
oÂ_hódî
 
	mhódî
;

1894 
uöt16_t
 
	mty≥
;

1895 
uöt16_t
 
	mexp_ty≥
;

1896 
uöt32_t
 
	mex≥rimíãr
;

1898 
uöt8_t
 
	md©a
[0];

1901 
OFP_ASSERT
((
oÂ_îr‹_ex≥rimíãr_msg
) == 16);

1904 
	soÂ_ex≥rimíãr_hódî
 {

1905 
oÂ_hódî
 
	mhódî
;

1906 
uöt32_t
 
	mex≥rimíãr
;

1909 
uöt32_t
 
	mexp_ty≥
;

1912 
OFP_ASSERT
((
oÂ_ex≥rimíãr_hódî
) == 16);

	@include/openflow/private-ext.h

33 #i‚de‡
OPENFLOW_PRIVATE_EXT_H_


34 
	#OPENFLOW_PRIVATE_EXT_H_


	)

36 #ifde‡
__KERNEL__


37 
	~<asm/byã‹dî.h
>

40 
	~"›íÊow/›íÊow.h
"

49 
	#PRIVATE_VENDOR_ID
 0x00acde48

	)

50 
	#PRIVATEOPT_PROTOCOL_STATS_REQUEST
 0x0001

	)

51 
	#PRIVATEOPT_PROTOCOL_STATS_REPLY
 0x0002

	)

52 
	#PRIVATEOPT_EMERG_FLOW_PROTECTION
 0x0003

	)

53 
	#PRIVATEOPT_EMERG_FLOW_RESTORATION
 0x0004

	)

55 
	s¥iv©e_vxhdr
 {

56 
oÂ_hódî
 
	moÂ_hdr
;

57 
uöt32_t
 
	moÂ_vxid
;

58 } 
__©åibuã__
 ((
__∑cked__
));

61 
	s¥iv©e_vx›t
 {

62 
uöt16_t
 
	mpvo_ty≥
;

63 
uöt16_t
 
	mpvo_Àn
;

66 } 
__©åibuã__
 ((
__∑cked__
));

	@lib/backtrace.c

34 
	~<c⁄fig.h
>

35 
	~"backåa˚.h
"

36 
	~<î∫o.h
>

37 
	~<öây≥s.h
>

38 
	~<°dboﬁ.h
>

39 
	~<°dio.h
>

40 
	~"compûî.h
"

42 
	#LOG_MODULE
 
VLM_backåa˚


	)

43 
	~"vlog.h
"

45 
uöçå_t
 
UNUSED


46 
	$gë_max_°ack
()

48 c⁄° 
fûe_«me
[] = "/proc/self/maps";

49 
löe
[1024];

50 
löe_numbî
;

51 
FILE
 *
f
;

53 
f
 = 
	`f›í
(
fûe_«me
, "r");

54 i‡(
f
 =
NULL
) {

55 
	`VLOG_WARN
(
LOG_MODULE
, "›íög %†Áûed: %s", 
fûe_«me
, 
	`°ªº‹
(
î∫o
));

59 
löe_numbî
 = 1; 
	`fgës
(
löe
, Üöe, 
f
);Üine_number++) {

60 i‡(
	`°r°r
(
löe
, "[stack]")) {

61 
uöçå_t
 
íd
;

62 i‡(
	`ssˇnf
(
löe
, "%*"
SCNxPTR
"-%"SCNxPTR, &
íd
) != 1) {

63 
	`VLOG_WARN
(
LOG_MODULE
, "%s:%d:Ö¨£Éº‹", 
fûe_«me
, 
löe_numbî
);

66 
	`f˛o£
(
f
);

67  
íd
;

70 
	`f˛o£
(
f
);

72 
	`VLOG_WARN
(
LOG_MODULE
, "%s:Çÿ°ack found", 
fûe_«me
);

74 
	}
}

76 
uöçå_t


77 
	$°ack_high
()

79 
uöçå_t
 
high
;

80 i‡(!
high
) {

81 
high
 = 
	`gë_max_°ack
();

83  
high
;

84 
	}
}

86 
uöçå_t


87 
	$°ack_low
()

89 #ifde‡
__i386__


90 
uöçå_t
 
low
;

91 
	`asm
("mov»%%e•,%0" : "=g" (
low
));

92  
low
;

96 
dummy
;

97  (
uöçå_t
Ë&
dummy
;

99 
	}
}

101 
boﬁ


102 
	$ö_°ack
(*
p
)

104 
uöçå_t
 
addªss
 = (uöçå_tË
p
;

105  
addªss
 >
	`°ack_low
(Ë&&áddªs†< 
	`°ack_high
();

106 
	}
}

109 
	$backåa˚_ˇ±uª
(
backåa˚
 *backtrace)

111 **
‰ame
;

112 
size_t
 
n
;

114 
n
 = 0;

115 
‰ame
 = 
	`__buûtö_‰ame_addªss
(1);

116 
‰ame
 !
NULL
 && 
	`ö_°ack
(frame) && frame[0] != NULL

117 && 
n
 < 
BACKTRACE_MAX_FRAMES
;

118 
‰ame
 = frame[0])

120 
backåa˚
->
‰ames
[
n
++] = (
uöçå_t
Ë
‰ame
[1];

122 
backåa˚
->
n_‰ames
 = 
n
;

123 
	}
}

	@lib/backtrace.h

34 #i‚de‡
BACKTRACE_H


35 
	#BACKTRACE_H
 1

	)

37 
	~<°döt.h
>

39 
	#BACKTRACE_MAX_FRAMES
 31

	)

41 
	sbackåa˚
 {

42 
	mn_‰ames
;

43 
uöçå_t
 
	m‰ames
[
BACKTRACE_MAX_FRAMES
];

46 
backåa˚_ˇ±uª
(
backåa˚
 *);

	@lib/byte-order.h

16 #i‚de‡
BYTE_ORDER_H


17 
	#BYTE_ORDER_H
 1

	)

19 
	~<¨∑/öë.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<öây≥s.h
>

23 
	ebyã_‹dî
{

25 
	mNETWORK_ORDER
 = 0,

26 
	mHOST_ORDER
 = 1,

29 
ölöe
 
uöt64_t


30 
	$ht⁄Œ
(
uöt64_t
 
n
)

32  
	`ht⁄l
(1Ë=1 ? 
n
 : ((
uöt64_t
) htonl(n) << 32) | htonl(n >> 32);

33 
	}
}

35 
ölöe
 
uöt64_t


36 
	$¡ohŒ
(
uöt64_t
 
n
)

38  
	`ht⁄l
(1Ë=1 ? 
n
 : ((
uöt64_t
Ë
	`¡ohl
(n) << 32) |Çtohl(n >> 32);

39 
	}
}

46 #ifde‡
WORDS_BIGENDIAN


47 
	#CONSTANT_HTONS
(
VALUE
Ë((
uöt16_t
Ë(VALUE))

	)

48 
	#CONSTANT_HTONL
(
VALUE
Ë((
uöt32_t
Ë(VALUE))

	)

49 
	#CONSTANT_HTONLL
(
VALUE
Ë((
uöt64_t
Ë(VALUE))

	)

51 
	#CONSTANT_HTONS
(
VALUE
) \

52 (((((
uöt16_t
Ë(
VALUE
)) & 0xff00) >> 8) | \

53 ((((
uöt16_t
Ë(
VALUE
)Ë& 0x00ffË<< 8))

	)

54 
	#CONSTANT_HTONL
(
VALUE
) \

55 (((((
uöt32_t
Ë(
VALUE
)) & 0x000000ff) << 24) | \

56 ((((
uöt32_t
Ë(
VALUE
)) & 0x0000ff00) << 8) | \

57 ((((
uöt32_t
Ë(
VALUE
)) & 0x00ff0000) >> 8) | \

58 ((((
uöt32_t
Ë(
VALUE
)Ë& 0xff000000Ë>> 24))

	)

59 
	#CONSTANT_HTONLL
(
VALUE
) \

60 (((((
uöt64_t
Ë(
VALUE
)Ë& 
	`UINT64_C
(0x00000000000000ff)) << 56) | \

61 ((((
uöt64_t
Ë(
VALUE
)Ë& 
	`UINT64_C
(0x000000000000ff00)) << 40) | \

62 ((((
uöt64_t
Ë(
VALUE
)Ë& 
	`UINT64_C
(0x0000000000ff0000)) << 24) | \

63 ((((
uöt64_t
Ë(
VALUE
)Ë& 
	`UINT64_C
(0x00000000ff000000)) << 8) | \

64 ((((
uöt64_t
Ë(
VALUE
)Ë& 
	`UINT64_C
(0x000000ff00000000)) >> 8) | \

65 ((((
uöt64_t
Ë(
VALUE
)Ë& 
	`UINT64_C
(0x0000ff0000000000)) >> 24) | \

66 ((((
uöt64_t
Ë(
VALUE
)Ë& 
	`UINT64_C
(0x00ff000000000000)) >> 40) | \

67 ((((
uöt64_t
Ë(
VALUE
)Ë& 
	`UINT64_C
(0xff00000000000000)Ë>> 56))

	)

	@lib/command-line.c

34 
	~<c⁄fig.h
>

35 
	~"comm™d-löe.h
"

36 
	~<gë›t.h
>

37 
	~<limôs.h
>

38 
	~"utû.h
"

39 
	~"vlog.h
"

45 
	$l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(c⁄° 
›ti⁄
 
›ti⁄s
[])

47 
sh‹t_›ti⁄s
[
UCHAR_MAX
 * 3 + 1];

48 *
p
 = 
sh‹t_›ti⁄s
;

50 ; 
›ti⁄s
->
«me
; options++) {

51 c⁄° 
›ti⁄
 *
o
 = 
›ti⁄s
;

52 i‡(
o
->
Êag
 =
NULL
 && o->
vÆ
 > 0 && o->vÆ <
UCHAR_MAX
) {

53 *
p
++ = 
o
->
vÆ
;

54 i‡(
o
->
has_¨g
 =
ªquúed_¨gumít
) {

55 *
p
++ = ':';

56 } i‡(
o
->
has_¨g
 =
›ti⁄Æ_¨gumít
) {

57 *
p
++ = ':';

58 *
p
++ = ':';

62 *
p
 = '\0';

64  
	`x°rdup
(
sh‹t_›ti⁄s
);

65 
	}
}

	@lib/command-line.h

34 #i‚de‡
COMMAND_LINE_H


35 
	#COMMAND_LINE_H
 1

	)

39 
	g›ti⁄
;

40 *
l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(c⁄° 
›ti⁄
 *
›ti⁄s
);

	@lib/compiler.h

34 #i‚de‡
COMPILER_H


35 
	#COMPILER_H
 1

	)

37 
	#NO_RETURN
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

38 
	#UNUSED
 
	`__©åibuã__
((
__unu£d__
))

	)

39 
	#PACKED
 
	`__©åibuã__
((
__∑cked__
))

	)

40 
	#PRINTF_FORMAT
(
FMT
, 
ARG1
Ë
	`__©åibuã__
((
	`__f‹m©__
(
¥ötf
, FMT, ARG1)))

	)

41 
	#STRFTIME_FORMAT
(
FMT
Ë
	`__©åibuã__
((
	`__f‹m©__
(
__°r·ime__
, FMT, 0)))

	)

42 
	#MALLOC_LIKE
 
	`__©åibuã__
((
__mÆloc__
))

	)

43 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
((x),1)

	)

44 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
((x),0)

	)

	@lib/csum.c

34 
	~<c⁄fig.h
>

35 
	~"csum.h
"

38 
uöt16_t


39 
	$csum
(c⁄° *
d©a
, 
size_t
 
n
)

41  
	`csum_föish
(
	`csum_c⁄töue
(0, 
d©a
, 
n
));

42 
	}
}

47 
uöt32_t


48 
	$csum_add16
(
uöt32_t
 
∑πül
, 
uöt16_t
 
√w
)

50  
∑πül
 + 
√w
;

51 
	}
}

56 
uöt32_t


57 
	$csum_add32
(
uöt32_t
 
∑πül
, uöt32_à
√w
)

59  
∑πül
 + (
√w
 >> 16) + (new & 0xffff);

60 
	}
}

67 
uöt32_t


68 
	$csum_c⁄töue
(
uöt32_t
 
∑πül
, c⁄° *
d©a_
, 
size_t
 
n
)

70 c⁄° 
uöt16_t
 *
d©a
 = 
d©a_
;

72 ; 
n
 > 1;Ç -= 2) {

73 
∑πül
 = 
	`csum_add16
’¨tül, *
d©a
++);

75 i‡(
n
) {

76 
∑πül
 +*(
uöt8_t
 *Ë
d©a
;

78  
∑πül
;

79 
	}
}

83 
uöt16_t


84 
	$csum_föish
(
uöt32_t
 
∑πül
)

86  ~((
∑πül
 & 0xffff) + (partial >> 16));

87 
	}
}

92 
uöt16_t


93 
	$ªˇlc_csum16
(
uöt16_t
 
ﬁd_csum
, uöt16_à
ﬁd_u16
, uöt16_à
√w_u16
)

99 
uöt16_t
 
hc_com∂emít
 = ~
ﬁd_csum
;

100 
uöt16_t
 
m_com∂emít
 = ~
ﬁd_u16
;

101 
uöt16_t
 
m_¥ime
 = 
√w_u16
;

102 
uöt32_t
 
sum
 = 
hc_com∂emít
 + 
m_com∂emít
 + 
m_¥ime
;

103 
uöt16_t
 
hc_¥ime_com∂emít
 = 
sum
 + (sum >> 16);

104  ~
hc_¥ime_com∂emít
;

105 
	}
}

110 
uöt16_t


111 
	$ªˇlc_csum32
(
uöt16_t
 
ﬁd_csum
, 
uöt32_t
 
ﬁd_u32
, uöt32_à
√w_u32
)

113  
	`ªˇlc_csum16
‘eˇlc_csum16(
ﬁd_csum
, 
ﬁd_u32
, 
√w_u32
),

114 
ﬁd_u32
 >> 16, 
√w_u32
 >> 16);

115 
	}
}

	@lib/csum.h

34 #i‚de‡
CSUM_H


35 
	#CSUM_H
 1

	)

37 
	~<°ddef.h
>

38 
	~<°döt.h
>

40 
uöt16_t
 
csum
(c⁄° *, 
size_t
);

41 
uöt32_t
 
csum_add16
(uöt32_à
∑πül
, 
uöt16_t
);

42 
uöt32_t
 
csum_add32
(uöt32_à
∑πül
, uint32_t);

43 
uöt32_t
 
csum_c⁄töue
(uöt32_à
∑πül
, c⁄° *, 
size_t
);

44 
uöt16_t
 
csum_föish
(
uöt32_t
 
∑πül
);

45 
uöt16_t
 
ªˇlc_csum16
(uöt16_à
ﬁd_csum
, uöt16_à
ﬁd_u16
, uöt16_à
√w_u16
);

46 
uöt16_t
 
ªˇlc_csum32
(uöt16_à
ﬁd_csum
, 
uöt32_t
 
ﬁd_u32
, uöt32_à
√w_u32
);

	@lib/daemon.c

34 
	~<c⁄fig.h
>

35 
	~"d´m⁄.h
"

36 
	~<î∫o.h
>

37 
	~<f˙é.h
>

38 
	~<°dlib.h
>

39 
	~<°rög.h
>

40 
	~<uni°d.h
>

41 
	~"Áèl-sig«l.h
"

42 
	~"dús.h
"

43 
	~"utû.h
"

45 
	#LOG_MODULE
 
VLM_d´m⁄


	)

46 
	~"vlog.h
"

49 
boﬁ
 
	gdëach
;

52 *
	gpidfûe
;

55 
boﬁ
 
	gf‹˚
;

60 
	$make_pidfûe_«me
(c⁄° *
«me
)

62  (!
«me
 ? 
	`xa•rötf
("%s/%s.pid", 
oÂ_rundú
, 
¥ogøm_«me
)

63 : *
«me
 ='/' ? 
	`x°rdup
(name)

64 : 
	`xa•rötf
("%s/%s", 
oÂ_rundú
, 
«me
));

65 
	}
}

74 
	$£t_pidfûe
(c⁄° *
«me
)

76 
	`‰ì
(
pidfûe
);

77 
pidfûe
 = 
	`make_pidfûe_«me
(
«me
);

78 
	}
}

84 
	$gë_pidfûe
()

86  
pidfûe
;

87 
	}
}

93 
	$ign‹e_exi°ög_pidfûe
()

95 
f‹˚
 = 
åue
;

96 
	}
}

101 
	$£t_dëach
()

103 
dëach
 = 
åue
;

104 
	}
}

109 
pid_t


110 
	$Æªady_ru¬ög
()

112 
pid_t
 
pid
 = 0;

113 i‡(
pidfûe
) {

114 
fd
 = 
	`›í
(
pidfûe
, 
O_RDWR
);

115 i‡(
fd
 >= 0) {

116 
Êock
 
lck
;

117 
lck
.
l_ty≥
 = 
F_WRLCK
;

118 
lck
.
l_whí˚
 = 
SEEK_SET
;

119 
lck
.
l_°¨t
 = 0;

120 
lck
.
l_Àn
 = 0;

121 i‡(
	`f˙é
(
fd
, 
F_GETLK
, &
lck
Ë!-1 &&Ück.
l_ty≥
 !
F_UNLCK
) {

122 
pid
 = 
lck
.
l_pid
;

124 
	`˛o£
(
fd
);

127  
pid
;

128 
	}
}

133 
	$dõ_if_Æªady_ru¬ög
()

135 
pid_t
 
pid
 = 
	`Æªady_ru¬ög
();

136 i‡(
pid
) {

137 i‡(!
f‹˚
) {

138 
	`oÂ_Áèl
(0, "%s:álreadyÑunningásÖid %ld",

139 
	`gë_pidfûe
(), (Ë
pid
);

141 
	`VLOG_WARN
(
LOG_MODULE
, "%s: %sálreadyÑunningásÖid %ld",

142 
	`gë_pidfûe
(), 
¥ogøm_«me
, (Ë
pid
);

145 
	}
}

151 
	$make_pidfûe
()

153 i‡(
pidfûe
) {

156 
pid
 = 
	`gëpid
();

157 *
tmpfûe
;

158 
fd
;

160 
tmpfûe
 = 
	`xa•rötf
("%s.tmp%ld", 
pidfûe
, 
pid
);

161 
	`Áèl_sig«l_add_fûe_to_u∆ök
(
tmpfûe
);

162 
fd
 = 
	`›í
(
tmpfûe
, 
O_CREAT
 | 
O_WRONLY
 | 
O_TRUNC
, 0666);

163 i‡(
fd
 >= 0) {

164 
Êock
 
lck
;

165 
lck
.
l_ty≥
 = 
F_WRLCK
;

166 
lck
.
l_whí˚
 = 
SEEK_SET
;

167 
lck
.
l_°¨t
 = 0;

168 
lck
.
l_Àn
 = 0;

169 i‡(
	`f˙é
(
fd
, 
F_SETLK
, &
lck
) != -1) {

170 *
ãxt
 = 
	`xa•rötf
("%ld\n", 
pid
);

171 i‡(
	`wrôe
(
fd
, 
ãxt
, 
	`°æí
(text)) == strlen(text)) {

172 
	`Áèl_sig«l_add_fûe_to_u∆ök
(
pidfûe
);

173 i‡(
	`ª«me
(
tmpfûe
, 
pidfûe
) < 0) {

174 
	`VLOG_ERR
(
LOG_MODULE
, "failedÅoÑename \"%s\"Åo \"%s\": %s",

175 
tmpfûe
, 
pidfûe
, 
	`°ªº‹
(
î∫o
));

176 
	`Áèl_sig«l_ªmove_fûe_to_u∆ök
(
pidfûe
);

177 
	`˛o£
(
fd
);

181 
	`‰ì
(
ãxt
);

183 
	`VLOG_ERR
(
LOG_MODULE
, "%s: wrôêÁûed: %s", 
tmpfûe
, 
	`°ªº‹
(
î∫o
));

184 
	`˛o£
(
fd
);

187 
	`VLOG_ERR
(
LOG_MODULE
, "%s: f˙é faûed: %s", 
tmpfûe
, 
	`°ªº‹
(
î∫o
));

188 
	`˛o£
(
fd
);

191 
	`VLOG_ERR
(
LOG_MODULE
, "%s: cª©êÁûed: %s", 
tmpfûe
, 
	`°ªº‹
(
î∫o
));

193 
	`Áèl_sig«l_ªmove_fûe_to_u∆ök
(
tmpfûe
);

194 
	`‰ì
(
tmpfûe
);

196 
	`‰ì
(
pidfûe
);

197 
pidfûe
 = 
NULL
;

198 
	}
}

203 
	$d´m⁄ize
()

205 i‡(
dëach
) {

206 
c
 = 0;

207 
fds
[2];

208 i‡(
	`pùe
(
fds
) < 0) {

209 
	`oÂ_Áèl
(
î∫o
, "pipe failed");

212 
	`f‹k
()) {

215 
	`˛o£
(
fds
[1]);

216 
	`Áèl_sig«l_f‹k
();

217 i‡(
	`ªad
(
fds
[0], &
c
, 1) != 1) {

218 
	`oÂ_Áèl
(
î∫o
, "daemon child failedÅo signal startup");

220 
	`exô
(0);

224 
	`˛o£
(
fds
[0]);

225 
	`make_pidfûe
();

226 
	`wrôe
(
fds
[1], &
c
, 1);

227 
	`˛o£
(
fds
[1]);

228 
	`£tsid
();

229 
	`chdú
("/");

234 
	`oÂ_Áèl
(
î∫o
, "couldÇot fork");

238 
	`make_pidfûe
();

240 
	}
}

243 
	$d´m⁄_ußge
()

245 
	`¥ötf
(

250 
oÂ_rundú
, 
¥ogøm_«me
);

251 
	}
}

255 
pid_t


256 
	$ªad_pidfûe
(c⁄° *
pidfûe
)

258 
löe
[128];

259 
Êock
 
lck
;

260 
FILE
 *
fûe
;

261 
îr‹
;

263 
fûe
 = 
	`f›í
(
pidfûe
, "r");

264 i‡(!
fûe
) {

265 
îr‹
 = 
î∫o
;

266 
	`VLOG_WARN
(
LOG_MODULE
, "%s: o≥n: %s", 
pidfûe
, 
	`°ªº‹
(
îr‹
));

267 
îr‹
;

270 
lck
.
l_ty≥
 = 
F_WRLCK
;

271 
lck
.
l_whí˚
 = 
SEEK_SET
;

272 
lck
.
l_°¨t
 = 0;

273 
lck
.
l_Àn
 = 0;

274 i‡(
	`f˙é
(
	`fûío
(
fûe
), 
F_GETLK
, &
lck
)) {

275 
îr‹
 = 
î∫o
;

276 
	`VLOG_WARN
(
LOG_MODULE
, "%s: f˙é: %s", 
pidfûe
, 
	`°ªº‹
(
îr‹
));

277 
îr‹
;

279 i‡(
lck
.
l_ty≥
 =
F_UNLCK
) {

280 
îr‹
 = 
ESRCH
;

281 
	`VLOG_WARN
(
LOG_MODULE
, "%s:Öid fûêi†nŸÜocked", 
pidfûe
);

282 
îr‹
;

285 i‡(!
	`fgës
(
löe
, Üöe, 
fûe
)) {

286 i‡(
	`„º‹
(
fûe
)) {

287 
îr‹
 = 
î∫o
;

288 
	`VLOG_WARN
(
LOG_MODULE
, "%s:Ñód: %s", 
pidfûe
, 
	`°ªº‹
(
îr‹
));

290 
îr‹
 = 
ESRCH
;

291 
	`VLOG_WARN
(
LOG_MODULE
, "%s:Ñód: u√x≥˘edÉnd o‡fûe", 
pidfûe
);

293 
îr‹
;

296 i‡(
lck
.
l_pid
 !
	`°πoul
(
löe
, 
NULL
, 10)) {

297 
îr‹
 = 
ESRCH
;

298 
	`VLOG_WARN
(
LOG_MODULE
, "l_pid (%ld) != %sÖid (%s)",

299 (Ë
lck
.
l_pid
, 
pidfûe
, 
löe
);

300 
îr‹
;

303 
	`f˛o£
(
fûe
);

304  
lck
.
l_pid
;

306 
îr‹
:

307 i‡(
fûe
) {

308 
	`f˛o£
(
fûe
);

310  -
îr‹
;

311 
	}
}

	@lib/daemon.h

34 #i‚de‡
DAEMON_H


35 
	#DAEMON_H
 1

	)

37 
	~<°dboﬁ.h
>

38 
	~<sys/ty≥s.h
>

40 
	#DAEMON_LONG_OPTIONS
 \

41 {"dëach", 
no_¨gumít
, 0, 'D'}, \

42 {"f‹˚", 
no_¨gumít
, 0, 'f'}, \

43 {"pidfûe", 
›ti⁄Æ_¨gumít
, 0, 'P'}

	)

45 
	#DAEMON_OPTION_HANDLERS
 \

47 
	`£t_dëach
(); \

51 
	`£t_pidfûe
(
›èrg
); \

55 
	`ign‹e_exi°ög_pidfûe
(); \

56 ;

	)

58 *
make_pidfûe_«me
(c⁄° *
«me
);

59 
£t_pidfûe
(c⁄° *
«me
);

60 c⁄° *
gë_pidfûe
();

61 
£t_dëach
();

62 
d´m⁄ize
();

63 
dõ_if_Æªady_ru¬ög
();

64 
ign‹e_exi°ög_pidfûe
();

65 
d´m⁄_ußge
();

66 
pid_t
 
ªad_pidfûe
(c⁄° *
«me
);

	@lib/dhcp-client.c

34 
	~<c⁄fig.h
>

35 
	~"dh˝-˛õ¡.h
"

36 
	~<¨∑/öë.h
>

37 
	~<as£π.h
>

38 
	~<î∫o.h
>

39 
	~<öây≥s.h
>

40 
	~<limôs.h
>

41 
	~<°dlib.h
>

42 
	~<°rög.h
>

43 
	~<sys/ty≥s.h
>

44 
	~<time.h
>

45 
	~<uni°d.h
>

46 
	~"csum.h
"

47 
	~"dh˝.h
"

48 
	~"dy«mic-°rög.h
"

49 
	~"√tdev.h
"

50 
	~"oÂbuf.h
"

51 
	~"pﬁl-lo›.h
"

52 
	~"ßt-m©h.h
"

53 
	~"timevÆ.h
"

55 
	#LOG_MODULE
 
VLM_dh˝_˛õ¡


	)

56 
	~"vlog.h
"

58 
	#DHCLIENT_STATES
 \

59 
	`DHCLIENT_STATE
(
INIT
, 1 << 0) \

60 
	`DHCLIENT_STATE
(
INIT_REBOOT
, 1 << 1) \

61 
	`DHCLIENT_STATE
(
REBOOTING
, 1 << 2) \

62 
	`DHCLIENT_STATE
(
SELECTING
, 1 << 3) \

63 
	`DHCLIENT_STATE
(
REQUESTING
, 1 << 4) \

64 
	`DHCLIENT_STATE
(
BOUND
, 1 << 5) \

65 
	`DHCLIENT_STATE
(
RENEWING
, 1 << 6) \

66 
	`DHCLIENT_STATE
(
REBINDING
, 1 << 7) \

67 
	`DHCLIENT_STATE
(
RELEASED
, 1 << 8)

	)

68 
	edh˛õ¡_°©e
 {

69 
	#DHCLIENT_STATE
(
NAME
, 
VALUE
Ë
S_
##NAME = VALUE,

	)

70 
	mDHCLIENT_STATES


71 #unde‡
DHCLIENT_STATE


74 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

77 
	$°©e_«me
(
dh˛õ¡_°©e
 
°©e
)

79 
°©e
) {

80 
	#DHCLIENT_STATE
(
NAME
, 
VALUE
Ë
S_
##NAME:  #NAME;

	)

81 
DHCLIENT_STATES


82 #unde‡
DHCLIENT_STATE


85 
	}
}

87 
	sdh˛õ¡
 {

89 
√tdev
 *
	m√tdev
;

91 (*
	mmodify_ªque°
)(
	mdh˝_msg
 *, *
	maux
);

92 
boﬁ
 (*
vÆid©e_of„r
)(c⁄° 
	mdh˝_msg
 *, *
	maux
);

93 *
	maux
;

96 
dh˛õ¡_°©e
 
	m°©e
;

97 
	m°©e_íãªd
;

98 
uöt32_t
 
	mxid
;

99 
uöt32_t
 
	mùaddr
, 
	m√tmask
, 
	mrouãr
;

100 
uöt32_t
 
	m£rvî_ù
;

101 
dh˝_msg
 *
	mbödög
;

102 
boﬁ
 
	mch™ged
;

104 
	mªå™smô
, 
	mdñay
;

105 
	mmax_timeout
;

107 
	möô_dñay
;

109 
time_t
 
	mÀa£_expú©i⁄
;

110 
	mbound_timeout
;

111 
	mª√wög_timeout
;

112 
	mªbödög_timeout
;

115 
	mmö_timeout
;

116 
	mª˚ived
;

119 
uöt32_t
 
	m£cs
;

121 
ds
 
	ms
;

125 
	#MIN_ACCEPTABLE_LEASE
 15

	)

127 
°©e_å™sôi⁄
(
dh˛õ¡
 *, 
dh˛õ¡_°©e
);

128 
ñ≠£d_ö_this_°©e
(c⁄° 
dh˛õ¡
 *
˛i
);

129 
boﬁ
 
timeout
(
dh˛õ¡
 *, 
£cs
);

131 
dh˛õ¡_msg_öô
(
dh˛õ¡
 *, 
dh˝_msg_ty≥
,

132 
dh˝_msg
 *);

133 
£nd_ªlübly
(
dh˛õ¡
 *
˛i
,

134 (*
make_∑ckë
)(
dh˛õ¡
 *,

135 
dh˝_msg
 *));

136 
boﬁ
 
	`do_ª˚ive_msg
(
dh˛õ¡
 *, 
dh˝_msg
 *);

137 
	`do_£nd_msg
(
dh˛õ¡
 *, c⁄° 
dh˝_msg
 *);

138 
boﬁ
 
	`ª˚ive_ack
(
dh˛õ¡
 *);

140 
	`fuzz
(
x
, 
max_fuzz
);

141 
	`ˇlc_t2
(
Àa£
);

142 
	`ˇlc_t1
(
Àa£
, 
t2
);

144 
	`˛amp
(
x
, 
mö
, 
max
);

164 
	`dh˛õ¡_¸óã
(c⁄° *
√tdev_«me
,

165 (*
modify_ªque°
)(
dh˝_msg
 *, *
aux
),

166 
	$boﬁ
 (*
vÆid©e_of„r
)(c⁄° 
dh˝_msg
 *, *
aux
),

167 *
aux
, 
dh˛õ¡
 **
˛i_
)

169 
dh˛õ¡
 *
˛i
;

170 
√tdev
 *netdev;

171 
îr‹
;

173 *
˛i_
 = 
NULL
;

175 
îr‹
 = 
	`√tdev_›í
(
√tdev_«me
, 
ETH_TYPE_IP
, &
√tdev
);

177 i‡(
îr‹
) {

178 
	`VLOG_ERR
(
LOG_MODULE
, "couldÇot open %sÇetwork device: %s",

179 
√tdev_«me
, 
	`°ªº‹
(
îr‹
));

180  
îr‹
;

183 
îr‹
 = 
	`√tdev_tu∫_Êags_⁄
(
√tdev
, 
NETDEV_UP
, 
Ál£
);

184 i‡(
îr‹
) {

185 
	`VLOG_ERR
(
LOG_MODULE
, "couldÇot bring %s device up: %s",

186 
√tdev_«me
, 
	`°ªº‹
(
îr‹
));

187 
	`√tdev_˛o£
(
√tdev
);

188  
îr‹
;

191 
˛i
 = 
	`xˇŒoc
(1,  *cli);

192 
˛i
->
modify_ªque°
 = modify_request;

193 
˛i
->
vÆid©e_of„r
 = validate_offer;

194 
˛i
->
aux
 =áux;

195 
˛i
->
√tdev
 =Çetdev;

196 
˛i
->
°©e
 = 
S_RELEASED
;

197 
˛i
->
°©e_íãªd
 = 
	`time_now
();

198 
˛i
->
xid
 = 
	`øndom_uöt32
();

199 
˛i
->
ùaddr
 = 0;

200 
˛i
->
£rvî_ù
 = 0;

201 
˛i
->
ªå™smô
 = cli->
dñay
 = 0;

202 
˛i
->
max_timeout
 = 64;

203 
˛i
->
mö_timeout
 = 1;

204 
	`ds_öô
(&
˛i
->
s
);

205 
˛i
->
ch™ged
 = 
åue
;

206 *
˛i_
 = 
˛i
;

208 
	}
}

214 
	$dh˛õ¡_£t_max_timeout
(
dh˛õ¡
 *
˛i
, 
max_timeout
)

216 
˛i
->
max_timeout
 = 
	`MAX
(2, max_timeout);

217 
	}
}

221 
	$dh˛õ¡_de°roy
(
dh˛õ¡
 *
˛i
)

223 i‡(
˛i
) {

224 
	`dh˝_msg_unöô
(
˛i
->
bödög
);

225 
	`‰ì
(
˛i
->
bödög
);

226 
	`√tdev_˛o£
(
˛i
->
√tdev
);

227 
	`ds_de°roy
(&
˛i
->
s
);

228 
	`‰ì
(
˛i
);

230 
	}
}

234 
√tdev
 *

235 
	$dh˛õ¡_gë_√tdev
(
dh˛õ¡
 *
˛i
)

237  
˛i
->
√tdev
;

238 
	}
}

245 
	$dh˛õ¡_öô
(
dh˛õ¡
 *
˛i
, 
uöt32_t
 
ªque°ed_ù
)

247 
	`°©e_å™sôi⁄
(
˛i
, 
ªque°ed_ù
 ? 
S_INIT_REBOOT
 : 
S_INIT
);

248 
˛i
->
ùaddr
 = 
ªque°ed_ù
;

249 
˛i
->
mö_timeout
 = 0;

250 
˛i
->
öô_dñay
 = 0;

251 
	}
}

256 
	$dh˛õ¡_ªÀa£
(
dh˛õ¡
 *
˛i
)

258 i‡(
	`dh˛õ¡_is_bound
(
˛i
)) {

259 
dh˝_msg
 
msg
;

260 
	`dh˛õ¡_msg_öô
(
˛i
, 
DHCPRELEASE
, &
msg
);

261 
msg
.
cüddr
 = 
˛i
->
ùaddr
;

262 
	`do_£nd_msg
(
˛i
, &
msg
);

263 
	`dh˝_msg_unöô
(&
msg
);

265 
	`°©e_å™sôi⁄
(
˛i
, 
S_RELEASED
);

266 
˛i
->
mö_timeout
 = 
UINT_MAX
;

267 
	}
}

270 
	$do_f‹˚_ª√w
(
dh˛õ¡
 *
˛i
, 
dódlöe
)

272 
time_t
 
now
 = 
	`time_now
();

273 
Àa£_À·
 = 
	`ßt_sub
(
˛i
->
Àa£_expú©i⁄
, 
now
);

274 i‡(
Àa£_À·
 <
dódlöe
) {

275 i‡(
˛i
->
°©e
 & (
S_RENEWING
 | 
S_REBINDING
)) {

278 
dódlöe
 = 
Àa£_À·
;

280 i‡(
˛i
->
°©e
 & (
S_BOUND
 | 
S_RENEWING
)) {

281 
	`°©e_å™sôi⁄
(
˛i
, 
S_RENEWING
);

282 
˛i
->
ª√wög_timeout
 = 
dódlöe
 * 3 / 4;

283 
˛i
->
ªbödög_timeout
 = 
dódlöe
 * 1 / 4;

285 
	`°©e_å™sôi⁄
(
˛i
, 
S_REBINDING
);

286 
˛i
->
ªbödög_timeout
 = 
dódlöe
;

288 
˛i
->
mö_timeout
 = 0;

289 
	}
}

295 
	$dh˛õ¡_f‹˚_ª√w
(
dh˛õ¡
 *
˛i
, 
dódlöe
)

299 
	`√tdev_døö
(
˛i
->
√tdev
);

301 
˛i
->
°©e
) {

302 
S_INIT
:

303 
S_INIT_REBOOT
:

304 
S_REBOOTING
:

305 
S_SELECTING
:

306 
S_REQUESTING
:

309 
S_BOUND
:

310 
S_RENEWING
:

311 
S_REBINDING
:

312 
	`do_f‹˚_ª√w
(
˛i
, 
dódlöe
);

315 
S_RELEASED
:

316 
	`dh˛õ¡_öô
(
˛i
, 0);

319 
	}
}

322 
boﬁ


323 
	$dh˛õ¡_is_bound
(c⁄° 
dh˛õ¡
 *
˛i
)

325  
˛i
->
°©e
 & (
S_BOUND
 | 
S_RENEWING
 | 
S_REBINDING
);

326 
	}
}

330 
boﬁ


331 
	$dh˛õ¡_ch™ged
(
dh˛õ¡
 *
˛i
)

333 
boﬁ
 
ch™ged
 = 
˛i
->changed;

334 
˛i
->
ch™ged
 = 0;

335  
ch™ged
;

336 
	}
}

341 
	$dh˛õ¡_gë_°©e
(c⁄° 
dh˛õ¡
 *
˛i
)

343  
	`°©e_«me
(
˛i
->
°©e
);

344 
	}
}

348 
	$dh˛õ¡_gë_°©e_ñ≠£d
(c⁄° 
dh˛õ¡
 *
˛i
)

350  
	`ñ≠£d_ö_this_°©e
(
˛i
);

351 
	}
}

356 
	$dh˛õ¡_gë_Àa£_ªmaöög
(c⁄° 
dh˛õ¡
 *
˛i
)

358 i‡(
	`dh˛õ¡_is_bound
(
˛i
)) {

359 
time_t
 
now
 = 
	`time_now
();

360  
˛i
->
Àa£_expú©i⁄
 > 
now
 ? cli->lease_expiration -Çow : 0;

364 
	}
}

368 
uöt32_t


369 
	$dh˛õ¡_gë_ù
(c⁄° 
dh˛õ¡
 *
˛i
)

371  
	`dh˛õ¡_is_bound
(
˛i
Ë? cli->
ùaddr
 : 0;

372 
	}
}

376 
uöt32_t


377 
	$dh˛õ¡_gë_√tmask
(c⁄° 
dh˛õ¡
 *
˛i
)

379  
	`dh˛õ¡_is_bound
(
˛i
Ë? cli->
√tmask
 : 0;

380 
	}
}

384 
uöt32_t


385 
	$dh˛õ¡_gë_rouãr
(c⁄° 
dh˛õ¡
 *
˛i
)

387  
	`dh˛õ¡_is_bound
(
˛i
Ë? cli->
rouãr
 : 0;

388 
	}
}

393 c⁄° 
dh˝_msg
 *

394 
	$dh˛õ¡_gë_c⁄fig
(c⁄° 
dh˛õ¡
 *
˛i
)

396  
	`dh˛õ¡_is_bound
(
˛i
Ë? cli->
bödög
 : 
NULL
;

397 
	}
}

414 
	$dh˛õ¡_c⁄figuª_√tdev
(
dh˛õ¡
 *
˛i
)

416 
ö_addr
 
addr
 = { 
	`dh˛õ¡_gë_ù
(
˛i
) };

417 
ö_addr
 
mask
 = { 
	`dh˛õ¡_gë_√tmask
(
˛i
) };

418 
ö_addr
 
rouãr
 = { 
	`dh˛õ¡_gë_rouãr
(
˛i
) };

419 
îr‹
;

421 
îr‹
 = 
	`√tdev_£t_ö4
(
˛i
->
√tdev
, 
addr
, 
mask
);

422 i‡(
îr‹
) {

423 
	`VLOG_ERR
(
LOG_MODULE
, "couldÇŸ së %†addªs†"
IP_FMT
"/"IP_FMT": %s",

424 
	`√tdev_gë_«me
(
˛i
->
√tdev
),

425 
	`IP_ARGS
(&
addr
.
s_addr
), IP_ARGS(&
mask
.s_addr),

426 
	`°ªº‹
(
îr‹
));

429 i‡(!
îr‹
 && 
rouãr
.
s_addr
) {

430 
îr‹
 = 
	`√tdev_add_rouãr
(
rouãr
);

431 i‡(
îr‹
) {

432 
	`VLOG_ERR
(
LOG_MODULE
, "ÁûedÅÿadd deÁu…ÑouãÅÿ"
IP_FMT
" on %s: %s",

433 
	`IP_ARGS
(&
rouãr
), 
	`√tdev_gë_«me
(
˛i
->
√tdev
),

434 
	`°ªº‹
(
îr‹
));

438  
îr‹
;

439 
	}
}

445 
	$dh˛õ¡_upd©e_ªsﬁv_c⁄f
(
dh˛õ¡
 *
˛i
)

447 
uöt32_t
 
dns_£rvî
;

448 *
domaö_«me
;

449 
boﬁ
 
has_domaö_«me
;

450 
√w_«me
[128];

451 
FILE
 *
ﬁd
, *
√w
;

452 
i
;

454 i‡(!
	`dh˛õ¡_is_bound
(
˛i
)) {

457 i‡(!
	`dh˝_msg_gë_ù
(
˛i
->
bödög
, 
DHCP_CODE_DNS_SERVER
, 0, &
dns_£rvî
)) {

458 
	`VLOG_DBG
(
LOG_MODULE
, "binding doesÇot includeány DNS servers");

462 
	`•rötf
(
√w_«me
, "/ëc/ªsﬁv.c⁄f.tmp%ld", (Ë
	`gëpid
());

463 
√w
 = 
	`f›í
(
√w_«me
, "w");

464 i‡(!
√w
) {

465 
	`VLOG_WARN
(
LOG_MODULE
, "%s: cª©e: %s", 
√w_«me
, 
	`°ªº‹
(
î∫o
));

466  
î∫o
;

469 
domaö_«me
 = 
	`dh˝_msg_gë_°rög
(
˛i
->
bödög
, 
DHCP_CODE_DOMAIN_NAME
);

470 
has_domaö_«me
 = 
domaö_«me
 !
NULL
;

471 i‡(
domaö_«me
) {

472 i‡(
	`°r•n
(
domaö_«me
, "-_.0123456789abcdefghijklmnopqrstuvwxyz"

473 "ABCDEFGHIJKLMNOPQRSTUVWXYZ"Ë=
	`°æí
(
domaö_«me
)) {

474 
	`Ârötf
(
√w
, "domaö %s\n", 
domaö_«me
);

476 
	`VLOG_WARN
(
LOG_MODULE
, "ign‹ög invÆid domaöÇamê%s", 
domaö_«me
);

477 
has_domaö_«me
 = 
Ál£
;

480 
	`VLOG_DBG
(
LOG_MODULE
, "binding doesÇot include domainÇame");

482 
	`‰ì
(
domaö_«me
);

484 
i
 = 0; 
	`dh˝_msg_gë_ù
(
˛i
->
bödög
, 
DHCP_CODE_DNS_SERVER
,

485 
i
, &
dns_£rvî
); i++) {

486 
	`Ârötf
(
√w
, "«me£rvî "
IP_FMT
"\n", 
	`IP_ARGS
(&
dns_£rvî
));

489 
ﬁd
 = 
	`f›í
("/etc/resolv.conf", "r");

490 i‡(
ﬁd
) {

491 
löe
[128];

493 
	`fgës
(
löe
, Üöe, 
ﬁd
)) {

494 *
kw
 = 
	`xmemdup0
(
löe
, 
	`°rc•n
(line, " \t\r\n"));

495 i‡(
	`°rcmp
(
kw
, "nameserver")

496 && (!
has_domaö_«me


497 || (
	`°rcmp
(
kw
, "domain") && strcmp(kw, "search")))) {

498 
	`Âuts
(
löe
, 
√w
);

500 
	`‰ì
(
kw
);

502 
	`f˛o£
(
ﬁd
);

504 
	`VLOG_DBG
(
LOG_MODULE
, "/ëc/ªsﬁv.c⁄f: o≥n: %s", 
	`°ªº‹
(
î∫o
));

507 i‡(
	`f˛o£
(
√w
) < 0) {

508 
	`VLOG_WARN
(
LOG_MODULE
, "%s: clo£: %s", 
√w_«me
, 
	`°ªº‹
(
î∫o
));

509  
î∫o
;

512 i‡(
	`ª«me
(
√w_«me
, "/etc/resolv.conf") < 0) {

513 
	`VLOG_WARN
(
LOG_MODULE
, "failedÅoÑename %sÅo /etc/resolv.conf: %s",

514 
√w_«me
, 
	`°ªº‹
(
î∫o
));

515  
î∫o
;

519 
	}
}

524 
	$make_dh˝discovî
(
dh˛õ¡
 *
˛i
, 
dh˝_msg
 *
msg
)

526 
˛i
->
£cs
 = 
	`ñ≠£d_ö_this_°©e
(cli);

527 
	`dh˛õ¡_msg_öô
(
˛i
, 
DHCPDISCOVER
, 
msg
);

528 i‡(
˛i
->
ùaddr
) {

529 
	`dh˝_msg_put_ù
(
msg
, 
DHCP_CODE_REQUESTED_IP
, 
˛i
->
ùaddr
);

531 
	}
}

534 
	$make_dh˝ªque°
(
dh˛õ¡
 *
˛i
, 
dh˝_msg
 *
msg
)

536 
	`dh˛õ¡_msg_öô
(
˛i
, 
DHCPREQUEST
, 
msg
);

537 
msg
->
cüddr
 = 
	`dh˛õ¡_gë_ù
(
˛i
);

538 i‡(
˛i
->
°©e
 =
S_REQUESTING
) {

539 
	`dh˝_msg_put_ù
(
msg
, 
DHCP_CODE_SERVER_IDENTIFIER
, 
˛i
->
£rvî_ù
);

541 
	`dh˝_msg_put_ù
(
msg
, 
DHCP_CODE_REQUESTED_IP
, 
˛i
->
ùaddr
);

542 
	}
}

545 
	$do_öô
(
dh˛õ¡
 *
˛i
, 
dh˛õ¡_°©e
 
√xt_°©e
)

547 i‡(!
˛i
->
öô_dñay
) {

548 
˛i
->
öô_dñay
 = 
	`fuzz
(2, 1);

550 i‡(
	`timeout
(
˛i
, cli->
öô_dñay
)) {

551 
	`°©e_å™sôi⁄
(
˛i
, 
√xt_°©e
);

553 
	}
}

556 
	$dh˛õ¡_run_INIT
(
dh˛õ¡
 *
˛i
)

558 
	`do_öô
(
˛i
, 
S_SELECTING
);

559 
	}
}

562 
	$dh˛õ¡_run_INIT_REBOOT
(
dh˛õ¡
 *
˛i
)

564 
	`do_öô
(
˛i
, 
S_REBOOTING
);

565 
	}
}

568 
	$dh˛õ¡_run_REBOOTING
(
dh˛õ¡
 *
˛i
)

570 
	`£nd_ªlübly
(
˛i
, 
make_dh˝ªque°
);

571 i‡(!
	`ª˚ive_ack
(
˛i
Ë&& 
	`timeout
(cli, 60)) {

572 
	`°©e_å™sôi⁄
(
˛i
, 
S_INIT
);

574 
	}
}

576 
boﬁ


577 
	$dh˝_ª˚ive
(
dh˛õ¡
 *
˛i
, 
msgs
, 
dh˝_msg
 *
msg
)

579 
	`do_ª˚ive_msg
(
˛i
, 
msg
)) {

580 i‡(
msg
->
ty≥
 > 31 || !((1u << msg->ty≥Ë& 
msgs
)) {

581 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "received unexpected %s in %s state: %s",

582 
	`dh˝_ty≥_«me
(
msg
->
ty≥
), 
	`°©e_«me
(
˛i
->
°©e
),

583 
	`dh˝_msg_to_°rög
(
msg
, 
Ál£
, &
˛i
->
s
));

584 } i‡(
msg
->
xid
 !
˛i
->xid) {

585 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
,

586 "ign‹ög %†wôh xid !%08"
PRIx32
" in %s state: %s",

587 
	`dh˝_ty≥_«me
(
msg
->
ty≥
), msg->
xid
,

588 
	`°©e_«me
(
˛i
->
°©e
),

589 
	`dh˝_msg_to_°rög
(
msg
, 
Ál£
, &
˛i
->
s
));

591  
åue
;

593 
	`dh˝_msg_unöô
(
msg
);

595  
Ál£
;

596 
	}
}

598 
boﬁ


599 
	$vÆid©e_of„ªd_›ti⁄s
(
dh˛õ¡
 *
˛i
, c⁄° 
dh˝_msg
 *
msg
)

601 
uöt32_t
 
Àa£
, 
√tmask
;

602 i‡(!
	`dh˝_msg_gë_£cs
(
msg
, 
DHCP_CODE_LEASE_TIME
, 0, &
Àa£
)) {

603 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "%†œck†Àa£Åime: %s", 
	`dh˝_ty≥_«me
(
msg
->
ty≥
),

604 
	`dh˝_msg_to_°rög
(
msg
, 
Ál£
, &
˛i
->
s
));

605 } i‡(!
	`dh˝_msg_gë_ù
(
msg
, 
DHCP_CODE_SUBNET_MASK
, 0, &
√tmask
)) {

606 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "%†œck†√tmask: %s", 
	`dh˝_ty≥_«me
(
msg
->
ty≥
),

607 
	`dh˝_msg_to_°rög
(
msg
, 
Ál£
, &
˛i
->
s
));

608 } i‡(
Àa£
 < 
MIN_ACCEPTABLE_LEASE
) {

609 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Ign‹ög %†wôh %"
PRIu32
"-secondÜeaseÅime: %s",

610 
	`dh˝_ty≥_«me
(
msg
->
ty≥
), 
Àa£
,

611 
	`dh˝_msg_to_°rög
(
msg
, 
Ál£
, &
˛i
->
s
));

612 } i‡(
˛i
->
vÆid©e_of„r
 && !˛i->
	`vÆid©e_of„r
(
msg
, cli->
aux
)) {

613 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "client validation hookÑefused offer: %s",

614 
	`dh˝_msg_to_°rög
(
msg
, 
Ál£
, &
˛i
->
s
));

616  
åue
;

618  
Ál£
;

619 
	}
}

622 
	$dh˛õ¡_run_SELECTING
(
dh˛õ¡
 *
˛i
)

624 
dh˝_msg
 
msg
;

626 
	`£nd_ªlübly
(
˛i
, 
make_dh˝discovî
);

627 i‡(
˛i
->
£rvî_ù
 && 
	`timeout
(cli, 60)) {

628 
˛i
->
£rvî_ù
 = 0;

629 
	`°©e_å™sôi⁄
(
˛i
, 
S_INIT
);

631 ; 
	`dh˝_ª˚ive
(
˛i
, 1u << 
DHCPOFFER
, &
msg
); 
	`dh˝_msg_unöô
(&msg)) {

632 i‡(!
	`vÆid©e_of„ªd_›ti⁄s
(
˛i
, &
msg
)) {

635 i‡(!
	`dh˝_msg_gë_ù
(&
msg
, 
DHCP_CODE_SERVER_IDENTIFIER
,

636 0, &
˛i
->
£rvî_ù
)) {

637 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "DHCPOFFERÜacks server identifier: %s",

638 
	`dh˝_msg_to_°rög
(&
msg
, 
Ál£
, &
˛i
->
s
));

642 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "accepting DHCPOFFER: %s",

643 
	`dh˝_msg_to_°rög
(&
msg
, 
Ál£
, &
˛i
->
s
));

644 
˛i
->
ùaddr
 = 
msg
.
yüddr
;

645 
	`°©e_å™sôi⁄
(
˛i
, 
S_REQUESTING
);

648 
	}
}

650 
boﬁ


651 
	$ßme_bödög
(c⁄° 
dh˝_msg
 *
ﬁd
, c⁄° dh˝_msg *
√w
)

653 c⁄° 
codes
[] = {

654 
DHCP_CODE_SUBNET_MASK
,

655 
DHCP_CODE_ROUTER
,

656 
DHCP_CODE_DNS_SERVER
,

657 
DHCP_CODE_HOST_NAME
,

658 
DHCP_CODE_DOMAIN_NAME
,

659 
DHCP_CODE_IP_TTL
,

660 
DHCP_CODE_MTU
,

661 
DHCP_CODE_BROADCAST_ADDRESS
,

662 
DHCP_CODE_STATIC_ROUTE
,

663 
DHCP_CODE_ARP_CACHE_TIMEOUT
,

664 
DHCP_CODE_ETHERNET_ENCAPSULATION
,

665 
DHCP_CODE_TCP_TTL
,

666 
DHCP_CODE_SERVER_IDENTIFIER
,

667 
DHCP_CODE_OFP_CONTROLLER_VCONN
,

668 
DHCP_CODE_OFP_PKI_URI
,

670 
i
;

671 
boﬁ
 
ßme
 = 
åue
;

673 i‡(
ﬁd
->
yüddr
 !
√w
->yiaddr) {

674 
	`VLOG_WARN
(
LOG_MODULE
, "DHCP bödög ch™ged IPáddªs†‰om "
IP_FMT
"Åo "IP_FMT,

675 
	`IP_ARGS
(&
ﬁd
->
yüddr
), IP_ARGS(&
√w
->yiaddr));

676 
ßme
 = 
Ál£
;

678 
i
 = 0; i < 
	`ARRAY_SIZE
(
codes
); i++) {

679 
code
 = 
codes
[
i
];

680 c⁄° 
dh˝_›ti⁄
 *
ﬁd_›t
 = &
ﬁd
->
›ti⁄s
[
code
];

681 c⁄° 
dh˝_›ti⁄
 *
√w_›t
 = &
√w
->
›ti⁄s
[
code
];

682 i‡(!
	`dh˝_›ti⁄_equÆs
(
ﬁd_›t
, 
√w_›t
)) {

683 
ds
 
ﬁd_°rög
 = 
DS_EMPTY_INITIALIZER
;

684 
ds
 
√w_°rög
 = 
DS_EMPTY_INITIALIZER
;

685 
	`VLOG_WARN
(
LOG_MODULE
, "DHCP binding changed option from %sÅo %s",

686 
	`dh˝_›ti⁄_to_°rög
(
ﬁd_›t
, 
code
, &
ﬁd_°rög
),

687 
	`dh˝_›ti⁄_to_°rög
(
√w_›t
, 
code
, &
√w_°rög
));

688 
	`ds_de°roy
(&
ﬁd_°rög
);

689 
	`ds_de°roy
(&
√w_°rög
);

690 
ßme
 = 
Ál£
;

693  
ßme
;

694 
	}
}

696 
boﬁ


697 
	$ª˚ive_ack
(
dh˛õ¡
 *
˛i
)

699 
dh˝_msg
 
msg
;

701 i‡(!
	`dh˝_ª˚ive
(
˛i
, (1u << 
DHCPACK
Ë| (1u << 
DHCPNAK
), &
msg
)) {

702  
Ál£
;

703 } i‡(
msg
.
ty≥
 =
DHCPNAK
) {

704 
	`dh˝_msg_unöô
(&
msg
);

705 
	`°©e_å™sôi⁄
(
˛i
, 
S_INIT
);

706  
åue
;

707 } i‡(!
	`vÆid©e_of„ªd_›ti⁄s
(
˛i
, &
msg
)) {

708 
	`dh˝_msg_unöô
(&
msg
);

709  
Ál£
;

711 
uöt32_t
 
Àa£
 = 0, 
t1
 = 0, 
t2
 = 0;

713 i‡(
˛i
->
bödög
) {

714 i‡(!
	`ßme_bödög
(
˛i
->
bödög
, &
msg
)) {

715 
˛i
->
ch™ged
 = 
åue
;

717 
	`dh˝_msg_unöô
(
˛i
->
bödög
);

719 
˛i
->
bödög
 = 
	`xmÆloc
( *cli->binding);

721 
	`dh˝_msg_c›y
(
˛i
->
bödög
, &
msg
);

723 
	`dh˝_msg_gë_£cs
(&
msg
, 
DHCP_CODE_LEASE_TIME
, 0, &
Àa£
);

724 
	`dh˝_msg_gë_£cs
(&
msg
, 
DHCP_CODE_T1
, 0, &
t1
);

725 
	`dh˝_msg_gë_£cs
(&
msg
, 
DHCP_CODE_T2
, 0, &
t2
);

726 
	`as£π
(
Àa£
 >
MIN_ACCEPTABLE_LEASE
);

728 i‡(!
t2
 ||Å2 >
Àa£
) {

729 
t2
 = 
	`ˇlc_t2
(
Àa£
);

731 i‡(!
t1
 ||Å1 >
t2
) {

732 
t1
 = 
	`ˇlc_t1
(
Àa£
, 
t2
);

735 
˛i
->
Àa£_expú©i⁄
 = 
	`ßt_add
(
	`time_now
(), 
Àa£
);

736 
˛i
->
bound_timeout
 = 
t1
;

737 
˛i
->
ª√wög_timeout
 = 
t2
 - 
t1
;

738 
˛i
->
ªbödög_timeout
 = 
Àa£
 - 
t2
;

740 
˛i
->
ùaddr
 = 
msg
.
yüddr
;

741 
	`dh˝_msg_gë_ù
(&
msg
, 
DHCP_CODE_SUBNET_MASK
, 0, &
˛i
->
√tmask
);

742 i‡(!
	`dh˝_msg_gë_ù
(&
msg
, 
DHCP_CODE_ROUTER
, 0, &
˛i
->
rouãr
)) {

743 
˛i
->
rouãr
 = 
INADDR_ANY
;

745 
	`°©e_å™sôi⁄
(
˛i
, 
S_BOUND
);

746 
	`VLOG_DBG
(
LOG_MODULE
, "Bound: %s", 
	`dh˝_msg_to_°rög
(&
msg
, 
Ál£
, &
˛i
->
s
));

747  
åue
;

749 
	}
}

752 
	$dh˛õ¡_run_REQUESTING
(
dh˛õ¡
 *
˛i
)

754 
	`£nd_ªlübly
(
˛i
, 
make_dh˝ªque°
);

755 i‡(!
	`ª˚ive_ack
(
˛i
Ë&& 
	`timeout
(cli, 60)) {

756 
	`°©e_å™sôi⁄
(
˛i
, 
S_INIT
);

758 
	}
}

761 
	$dh˛õ¡_run_BOUND
(
dh˛õ¡
 *
˛i
)

763 i‡(
	`timeout
(
˛i
, cli->
bound_timeout
)) {

764 
	`°©e_å™sôi⁄
(
˛i
, 
S_RENEWING
);

766 
	}
}

769 
	$dh˛õ¡_run_RENEWING
(
dh˛õ¡
 *
˛i
)

771 
	`£nd_ªlübly
(
˛i
, 
make_dh˝ªque°
);

772 i‡(!
	`ª˚ive_ack
(
˛i
Ë&& 
	`timeout
(˛i, cli->
ª√wög_timeout
)) {

773 
	`°©e_å™sôi⁄
(
˛i
, 
S_REBINDING
);

775 
	}
}

778 
	$dh˛õ¡_run_REBINDING
(
dh˛õ¡
 *
˛i
)

780 
	`£nd_ªlübly
(
˛i
, 
make_dh˝ªque°
);

781 i‡(!
	`ª˚ive_ack
(
˛i
Ë&& 
	`timeout
(˛i, cli->
ªbödög_timeout
)) {

782 
	`°©e_å™sôi⁄
(
˛i
, 
S_INIT
);

784 
	}
}

787 
	$dh˛õ¡_run_RELEASED
(
dh˛õ¡
 *
˛i
 
UNUSED
)

790 
	}
}

794 
	$dh˛õ¡_run
(
dh˛õ¡
 *
˛i
)

796 
ﬁd_°©e
;

798 
ﬁd_°©e
 = 
˛i
->
°©e
;

799 
˛i
->
mö_timeout
 = 
UINT_MAX
;

800 
˛i
->
ª˚ived
 = 0;

801 
˛i
->
°©e
) {

802 
	#DHCLIENT_STATE
(
NAME
, 
VALUE
) \

803 
S_
##
NAME
: 
dh˛õ¡_run_
##
	`NAME
(
˛i
); ;

	)

804 
DHCLIENT_STATES


805 #unde‡
DHCLIENT_STATE


807 
	`NOT_REACHED
();

809 } 
˛i
->
°©e
 !
ﬁd_°©e
);

810 
	}
}

815 
	$dh˛õ¡_waô
(
dh˛õ¡
 *
˛i
)

817 i‡(
˛i
->
mö_timeout
 !
UINT_MAX
) {

818 
time_t
 
now
 = 
	`time_now
();

819 
wake
 = 
	`ßt_add
(
˛i
->
°©e_íãªd
, cli->
mö_timeout
);

820 i‡(
wake
 <
now
) {

821 
	`pﬁl_immedüã_wake
();

823 
	`pﬁl_timî_waô
(
	`ßt_mul
(
	`ßt_sub
(
wake
, 
now
), 1000));

830 
˛i
->
mö_timeout
 = 1;

832 i‡(
˛i
->
°©e
 & (
S_SELECTING
 | 
S_REQUESTING
 | 
S_RENEWING
 | 
S_REBINDING
)) {

833 
	`√tdev_ªcv_waô
(
˛i
->
√tdev
);

835 
	}
}

838 
	$°©e_å™sôi⁄
(
dh˛õ¡
 *
˛i
, 
dh˛õ¡_°©e
 
°©e
)

840 
boﬁ
 
was_bound
 = 
	`dh˛õ¡_is_bound
(
˛i
);

841 
boﬁ
 
am_bound
;

842 i‡(
˛i
->
°©e
 != state) {

843 
	`VLOG_DBG
(
LOG_MODULE
, "íãrög %s", 
	`°©e_«me
(
°©e
));

844 
˛i
->
°©e
 = state;

846 
˛i
->
°©e_íãªd
 = 
	`time_now
();

847 
˛i
->
ªå™smô
 = cli->
dñay
 = 0;

848 
am_bound
 = 
	`dh˛õ¡_is_bound
(
˛i
);

849 i‡(
was_bound
 !
am_bound
) {

850 
˛i
->
ch™ged
 = 
åue
;

851 i‡(
am_bound
) {

852 
	`as£π
(
˛i
->
bödög
 !
NULL
);

853 
	`VLOG_INFO
(
LOG_MODULE
, "%s: obèöedáddªs†"
IP_FMT
",Çetmask "IP_FMT,

854 
	`√tdev_gë_«me
(
˛i
->
√tdev
),

855 
	`IP_ARGS
(&
˛i
->
ùaddr
), IP_ARGS(&˛i->
√tmask
));

856 i‡(
˛i
->
rouãr
) {

857 
	`VLOG_INFO
(
LOG_MODULE
, "%s: obèöed deÁu… g©eway "
IP_FMT
,

858 
	`√tdev_gë_«me
(
˛i
->
√tdev
), 
	`IP_ARGS
(&˛i->
rouãr
));

861 
	`dh˝_msg_unöô
(
˛i
->
bödög
);

862 
	`‰ì
(
˛i
->
bödög
);

863 
˛i
->
bödög
 = 
NULL
;

865 
	`VLOG_INFO
(
LOG_MODULE
, "%s:Çetworkáddress unbound",

866 
	`√tdev_gë_«me
(
˛i
->
√tdev
));

869 i‡(
˛i
->
°©e
 & (
S_SELECTING
 | 
S_REQUESTING
 | 
S_REBOOTING
)) {

870 
	`√tdev_døö
(
˛i
->
√tdev
);

872 
	}
}

875 
£nd_ªlübly
(
dh˛õ¡
 *
˛i
,

876 (*
make_∑ckë
)(
dh˛õ¡
 *, 
dh˝_msg
 *))

878 i‡(
	`timeout
(
˛i
, cli->
ªå™smô
)) {

879 
dh˝_msg
 
msg
;

880 
	`make_∑ckë
(
˛i
, &
msg
);

881 i‡(
˛i
->
modify_ªque°
) {

882 
˛i
->
	`modify_ªque°
(&
msg
, cli->
aux
);

884 
	`do_£nd_msg
(
˛i
, &
msg
);

885 
˛i
->
dñay
 = 
	`MIN
(˛i->
max_timeout
, 
	`MAX
(4, cli->delay * 2));

886 
˛i
->
ªå™smô
 +
	`fuzz
(˛i->
dñay
, 1);

887 
	`timeout
(
˛i
, cli->
ªå™smô
);

888 
	`dh˝_msg_unöô
(&
msg
);

890 
	}
}

893 
	$dh˛õ¡_msg_öô
(
dh˛õ¡
 *
˛i
, 
dh˝_msg_ty≥
 
ty≥
,

894 
dh˝_msg
 *
msg
)

896 
	`dh˝_msg_öô
(
msg
);

897 
msg
->
›
 = 
DHCP_BOOTREQUEST
;

898 
msg
->
xid
 = 
˛i
->xid;

899 
msg
->
£cs
 = 
˛i
->secs;

900 
msg
->
ty≥
 =Åype;

901 
	`mem˝y
(
msg
->
chaddr
, 
	`√tdev_gë_ëhîaddr
(
˛i
->
√tdev
), 
ETH_ADDR_LEN
);

902 
	}
}

909 
	$ñ≠£d_ö_this_°©e
(c⁄° 
dh˛õ¡
 *
˛i
)

911  
	`time_now
(Ë- 
˛i
->
°©e_íãªd
;

912 
	}
}

914 
boﬁ


915 
	$timeout
(
dh˛õ¡
 *
˛i
, 
£cs
)

917 
˛i
->
mö_timeout
 = 
	`MIN
(˛i->mö_timeout, 
£cs
);

918  
	`time_now
(Ë>
	`ßt_add
(
˛i
->
°©e_íãªd
, 
£cs
);

919 
	}
}

921 
boﬁ


922 
	$do_ª˚ive_msg
(
dh˛õ¡
 *
˛i
, 
dh˝_msg
 *
msg
)

924 
oÂbuf
 
b
;

926 
	`oÂbuf_öô
(&
b
, 
	`√tdev_gë_mtu
(
˛i
->
√tdev
Ë+ 
VLAN_ETH_HEADER_LEN
);

927 ; 
˛i
->
ª˚ived
 < 50; cli->received++) {

928 c⁄° 
ù_hódî
 *
ù
;

929 c⁄° 
dh˝_hódî
 *
dh˝
;

931 
îr‹
;

933 
	`oÂbuf_˛ór
(&
b
);

934 
îr‹
 = 
	`√tdev_ªcv
(
˛i
->
√tdev
, &
b
);

935 i‡(
îr‹
) {

936 
døöed
;

949 
ù
 = 
b
.
l3
;

950 i‡(
	`IP_IS_FRAGMENT
(
ù
->
ù_‰ag_off
)) {

952 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "ignoring fragmented DHCP datagram");

956 
dh˝
 = 
b
.
l7
;

957 i‡(!
dh˝
) {

958 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "ignoring DHCP datagram with missingÖayload");

962 
	`oÂbuf_puŒ
(&
b
, (*)b.
l7
 - (*)b.
d©a
);

963 
îr‹
 = 
	`dh˝_∑r£
(
msg
, &
b
);

964 i‡(!
îr‹
) {

965 i‡(
	`VLOG_IS_DBG_ENABLED
(
LOG_MODULE
)) {

966 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "received %s",

967 
	`dh˝_msg_to_°rög
(
msg
, 
Ál£
, &
˛i
->
s
));

969 
	`VLOG_INFO_RL
(
LOG_MODULE
, &
æ
, "ª˚ived %s", 
	`dh˝_ty≥_«me
(
msg
->
ty≥
));

971 
	`oÂbuf_unöô
(&
b
);

972  
åue
;

975 
	`√tdev_døö
(
˛i
->
√tdev
);

976 
døöed
:

977 
	`oÂbuf_unöô
(&
b
);

978  
Ál£
;

979 
	}
}

982 
	$do_£nd_msg
(
dh˛õ¡
 *
˛i
, c⁄° 
dh˝_msg
 *
msg
)

984 
oÂbuf
 
b
;

985 
ëh_hódî
 
eh
;

986 
ù_hódî
 
nh
;

987 
udp_hódî
 
th
;

988 
uöt32_t
 
udp_csum
;

989 
îr‹
;

991 
	`oÂbuf_öô
(&
b
, 
ETH_TOTAL_MAX
);

992 
	`oÂbuf_ª£rve
(&
b
, 
ETH_HEADER_LEN
 + 
IP_HEADER_LEN
 + 
UDP_HEADER_LEN
);

994 
	`dh˝_as£mbÀ
(
msg
, &
b
);

996 
	`mem˝y
(
eh
.
ëh_§c
, 
	`√tdev_gë_ëhîaddr
(
˛i
->
√tdev
), 
ETH_ADDR_LEN
);

997 
	`mem˝y
(
eh
.
ëh_d°
, 
ëh_addr_brﬂdˇ°
, 
ETH_ADDR_LEN
);

998 
eh
.
ëh_ty≥
 = 
	`ht⁄s
(
ETH_TYPE_IP
);

1000 
nh
.
ù_ihl_vî
 = 
	`IP_IHL_VER
(5, 
IP_VERSION
);

1001 
nh
.
ù_tos
 = 0;

1002 
nh
.
ù_tŸ_Àn
 = 
	`ht⁄s
(
IP_HEADER_LEN
 + 
UDP_HEADER_LEN
 + 
b
.
size
);

1007 
nh
.
ù_id
 = 0;

1008 
nh
.
ù_‰ag_off
 = 
	`ht⁄s
(
IP_DONT_FRAGMENT
);

1009 
nh
.
ù_âl
 = 64;

1010 
nh
.
ù_¥Ÿo
 = 
IP_TYPE_UDP
;

1011 
nh
.
ù_csum
 = 0;

1012 
nh
.
ù_§c
 = 
	`dh˛õ¡_gë_ù
(
˛i
);

1022 
nh
.
ù_d°
 = 
INADDR_BROADCAST
;

1023 
nh
.
ù_csum
 = 
	`csum
(&nh, Çh);

1025 
th
.
udp_§c
 = 
	`ht⁄s
(66);

1026 
th
.
udp_d°
 = 
	`ht⁄s
(67);

1027 
th
.
udp_Àn
 = 
	`ht⁄s
(
UDP_HEADER_LEN
 + 
b
.
size
);

1028 
th
.
udp_csum
 = 0;

1029 
udp_csum
 = 
	`csum_add32
(0, 
nh
.
ù_§c
);

1030 
udp_csum
 = 
	`csum_add32
(udp_csum, 
nh
.
ù_d°
);

1031 
udp_csum
 = 
	`csum_add16
(udp_csum, 
IP_TYPE_UDP
 << 8);

1032 
udp_csum
 = 
	`csum_add16
(udp_csum, 
th
.
udp_Àn
);

1033 
udp_csum
 = 
	`csum_c⁄töue
(udp_csum, &
th
, Åh);

1034 
th
.
udp_csum
 = 
	`csum_föish
(
	`csum_c⁄töue
(udp_csum, 
b
.
d©a
, b.
size
));

1036 
	`oÂbuf_push
(&
b
, &
th
, Åh);

1037 
	`oÂbuf_push
(&
b
, &
nh
, Çh);

1038 
	`oÂbuf_push
(&
b
, &
eh
, Éh);

1044 i‡(
b
.
size
 <
ETH_TOTAL_MAX
) {

1045 i‡(
	`VLOG_IS_DBG_ENABLED
(
LOG_MODULE
)) {

1046 
	`VLOG_DBG
(
LOG_MODULE
, "£ndög %s", 
	`dh˝_msg_to_°rög
(
msg
, 
Ál£
, &
˛i
->
s
));

1048 
	`VLOG_INFO
(
LOG_MODULE
, "£ndög %s", 
	`dh˝_ty≥_«me
(
msg
->
ty≥
));

1050 
îr‹
 = 
	`√tdev_£nd
(
˛i
->
√tdev
, &
b
, 0);

1051 i‡(
îr‹
) {

1052 
	`VLOG_ERR
(
LOG_MODULE
, "send failed on %s: %s",

1053 
	`√tdev_gë_«me
(
˛i
->
√tdev
), 
	`°ªº‹
(
îr‹
));

1056 
	`VLOG_ERR
(
LOG_MODULE
, "ˇ¬Ÿ síd %zu-byã Ethî√à‰ame", 
b
.
size
);

1059 
	`oÂbuf_unöô
(&
b
);

1060 
	}
}

1063 
	$fuzz
(
x
, 
max_fuzz
)

1066 
fuzz
 = 
	`øndom_ønge
(
max_fuzz
 * 2 + 1) - max_fuzz;

1067 
y
 = 
x
 + 
fuzz
;

1068  
fuzz
 >0 ? (
y
 >
x
 ? y : 
UINT_MAX
) : (y <= x ? y : 0);

1069 
	}
}

1072 
	$˛amp
(
x
, 
mö
, 
max
)

1074  
x
 < 
mö
 ? mö : x > 
max
 ? max : x;

1075 
	}
}

1078 
	$ˇlc_t2
(
Àa£
)

1080 
ba£
 = 
Àa£
 * 0.875;

1081  
Àa£
 >60 ? 
	`˛amp
(
	`fuzz
(
ba£
, 10), 0,Üease - 1) : base;

1082 
	}
}

1085 
	$ˇlc_t1
(
Àa£
, 
t2
)

1087 
ba£
 = 
Àa£
 / 2;

1088  
Àa£
 >60 ? 
	`˛amp
(
	`fuzz
(
ba£
, 10), 0, 
t2
 - 1) : base;

1089 
	}
}

	@lib/dhcp-client.h

34 #i‚de‡
DHCP_CLIENT_H


35 
	#DHCP_CLIENT_H
 1

	)

37 
	~<°dboﬁ.h
>

38 
	~<°döt.h
>

40 
	gdh˛õ¡
;

41 
	gdh˝_msg
;

42 
	g√tdev
;

43 
dh˛õ¡_¸óã
(c⁄° *
√tdev
,

44 (*
modify_ªque°
)(
dh˝_msg
 *, *
aux
),

45 
	$boﬁ
 (*
vÆid©e_of„r
)(c⁄° 
dh˝_msg
 *, *
aux
),

46 *
aux
, 
dh˛õ¡
 **);

47 
	`dh˛õ¡_£t_max_timeout
(
dh˛õ¡
 *, 
max_timeout
);

48 
	`dh˛õ¡_de°roy
(
dh˛õ¡
 *);

50 
√tdev
 *
	`dh˛õ¡_gë_√tdev
(
dh˛õ¡
 *);

52 
	`dh˛õ¡_öô
(
dh˛õ¡
 *, 
uöt32_t
 
ªque°ed_ù
);

53 
	`dh˛õ¡_ªÀa£
(
dh˛õ¡
 *);

54 
	`dh˛õ¡_f‹˚_ª√w
(
dh˛õ¡
 *, 
dódlöe
);

55 
boﬁ
 
	`dh˛õ¡_is_bound
(c⁄° 
dh˛õ¡
 *);

56 
boﬁ
 
	`dh˛õ¡_ch™ged
(
dh˛õ¡
 *);

58 c⁄° *
	`dh˛õ¡_gë_°©e
(c⁄° 
dh˛õ¡
 *);

59 
	`dh˛õ¡_gë_°©e_ñ≠£d
(c⁄° 
dh˛õ¡
 *);

60 
	`dh˛õ¡_gë_Àa£_ªmaöög
(c⁄° 
dh˛õ¡
 *);

62 
uöt32_t
 
	`dh˛õ¡_gë_ù
(c⁄° 
dh˛õ¡
 *);

63 
uöt32_t
 
	`dh˛õ¡_gë_√tmask
(c⁄° 
dh˛õ¡
 *);

64 
uöt32_t
 
	`dh˛õ¡_gë_rouãr
(c⁄° 
dh˛õ¡
 *);

65 c⁄° 
dh˝_msg
 *
	`dh˛õ¡_gë_c⁄fig
(c⁄° 
dh˛õ¡
 *);

67 
	`dh˛õ¡_c⁄figuª_√tdev
(
dh˛õ¡
 *);

68 
	`dh˛õ¡_upd©e_ªsﬁv_c⁄f
(
dh˛õ¡
 *);

70 
	`dh˛õ¡_run
(
dh˛õ¡
 *);

71 
	`dh˛õ¡_waô
(
dh˛õ¡
 *);

	@lib/dhcp.c

34 
	~<c⁄fig.h
>

35 
	~"dh˝.h
"

36 
	~<¨∑/öë.h
>

37 
	~<as£π.h
>

38 
	~<˘y≥.h
>

39 
	~<î∫o.h
>

40 
	~<öây≥s.h
>

41 
	~<°dlib.h
>

42 
	~"dy«mic-°rög.h
"

43 
	~"oÂbuf.h
"

45 
	#LOG_MODULE
 
VLM_dh˝


	)

46 
	~"vlog.h
"

49 
	s¨g_ty≥
 {

50 c⁄° *
	m«me
;

51 
size_t
 
	msize
;

54 
¨g_ty≥
 
	gty≥s
[] = {

55 
	#DHCP_ARG
(
NAME
, 
SIZE
Ë[
DHCP_ARG_
##NAME] = {#NAME, SIZE},

	)

56 
DHCP_ARGS


57 #unde‡
DHCP_ARG


61 
	s›ti⁄_˛ass
 {

62 c⁄° *
	m«me
;

63 
dh˝_¨g_ty≥
 
	mty≥
;

64 
size_t
 
	mmö_¨gs
;

65 
size_t
 
	mmax_¨gs
;

68 c⁄° 
›ti⁄_˛ass
 *

69 
	$gë_›ti⁄_˛ass
(
code
)

71 
›ti⁄_˛ass
 
˛as£s
[
DHCP_N_OPTIONS
];

72 
boﬁ
 
öô
 = 
Ál£
;

73 i‡(!
öô
) {

74 
i
;

76 
öô
 = 
åue
;

77 
	#DHCP_OPT
(
NAME
, 
CODE
, 
TYPE
, 
MIN
, 
MAX
) \

78 
˛as£s
[
CODE
].
«me
 = #NAME; \

79 
˛as£s
[
CODE
].
ty≥
 = 
DHCP_ARG_
##
TYPE
; \

80 
˛as£s
[
CODE
].
mö_¨gs
 = 
MIN
; \

81 
˛as£s
[
CODE
].
max_¨gs
 = 
MAX
;

	)

82 
DHCP_OPTS


83 #unde‡
DHCP_OPT


85 
i
 = 0; i < 
DHCP_N_OPTIONS
; i++) {

86 i‡(!
˛as£s
[
i
].
«me
) {

87 
˛as£s
[
i
].
«me
 = 
	`xa•rötf
("option-%d", i);

88 
˛as£s
[
i
].
ty≥
 = 
DHCP_ARG_UINT8
;

89 
˛as£s
[
i
].
mö_¨gs
 = 0;

90 
˛as£s
[
i
].
max_¨gs
 = 
SIZE_MAX
;

94 
	`as£π
(
code
 >0 && codê< 
DHCP_N_OPTIONS
);

95  &
˛as£s
[
code
];

96 
	}
}

101 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 600);

103 
c›y_d©a
(
dh˝_msg
 *);

106 
	$dh˝_ty≥_«me
(
dh˝_msg_ty≥
 
ty≥
)

108 
ty≥
) {

109 
	#DHCP_MSG
(
NAME
, 
VALUE
ËNAME:  #NAME;

	)

110 
DHCP_MSGS


111 #unde‡
DHCP_MSG


114 
	}
}

119 
	$dh˝_msg_öô
(
dh˝_msg
 *
msg
)

121 
	`mem£t
(
msg
, 0,  *msg);

122 
	}
}

127 
	$dh˝_msg_unöô
(
dh˝_msg
 *
msg
)

129 i‡(
msg
) {

130 
	`‰ì
(
msg
->
d©a
);

132 
	}
}

137 
	$dh˝_msg_c›y
(
dh˝_msg
 *
d°
, c⁄° dh˝_msg *
§c
)

139 *
d°
 = *
§c
;

140 
d°
->
d©a_Æloˇãd
 = 
§c
->
d©a_u£d
;

141 
d°
->
d©a_u£d
 = 0;

142 
d°
->
d©a
 = 
	`xmÆloc
(d°->
d©a_Æloˇãd
);

143 
	`c›y_d©a
(
d°
);

144 
	}
}

147 
	$¥óŒoc_d©a
(
dh˝_msg
 *
msg
, 
size_t
 
n
)

149 
size_t
 
√eded
 = 
msg
->
d©a_u£d
 + 
n
;

150 i‡(
√eded
 > 
msg
->
d©a_Æloˇãd
) {

151 
uöt8_t
 *
ﬁd_d©a
 = 
msg
->
d©a
;

152 
msg
->
d©a_Æloˇãd
 = 
	`MAX
(
√eded
 * 2, 64);

153 
msg
->
d©a
 = 
	`xmÆloc
(msg->
d©a_Æloˇãd
);

154 i‡(
ﬁd_d©a
) {

155 
	`c›y_d©a
(
msg
);

156 
	`‰ì
(
ﬁd_d©a
);

159 
	}
}

162 
	$≠≥nd_d©a
(
dh˝_msg
 *
msg
, c⁄° *
d©a
, 
size_t
 
n
)

164 
uöt8_t
 *
p
 = &
msg
->
d©a
[msg->
d©a_u£d
];

165 
	`mem˝y
(
p
, 
d©a
, 
n
);

166 
msg
->
d©a_u£d
 +
n
;

167  
p
;

168 
	}
}

171 
	$c›y_d©a
(
dh˝_msg
 *
msg
)

173 
code
;

175 
msg
->
d©a_u£d
 = 0;

176 
code
 = 0; codê< 
DHCP_N_OPTIONS
; code++) {

177 
dh˝_›ti⁄
 *
›t
 = &
msg
->
›ti⁄s
[
code
];

178 i‡(
›t
->
d©a
) {

179 
	`as£π
(
msg
->
d©a_u£d
 + 
›t
->
n
 <msg->
d©a_Æloˇãd
);

180 
›t
->
d©a
 = 
	`≠≥nd_d©a
(
msg
, o±->d©a, o±->
n
);

183 
	}
}

188 
	$dh˝_msg_put
(
dh˝_msg
 *
msg
, 
code
,

189 c⁄° *
d©a
, 
size_t
 
n
)

191 
dh˝_›ti⁄
 *
›t
;

192 i‡(
code
 =
DHCP_CODE_PAD
 || codê=
DHCP_CODE_END
) {

196 
›t
 = &
msg
->
›ti⁄s
[
code
];

197 
	`¥óŒoc_d©a
(
msg
, 
n
 + 
›t
->n);

198 i‡(
›t
->
n
) {

199 i‡(&
msg
->
d©a
[msg->
d©a_u£d
 - 
›t
->
n
] != opt->data) {

200 
›t
->
d©a
 = 
	`≠≥nd_d©a
(
msg
, o±->d©a, o±->
n
);

202 
	`≠≥nd_d©a
(
msg
, 
d©a
, 
n
);

204 
›t
->
d©a
 = 
	`≠≥nd_d©a
(
msg
, d©a, 
n
);

206 
›t
->
n
 +=Ç;

207 
	}
}

213 
	$dh˝_msg_put_boﬁ
(
dh˝_msg
 *
msg
, 
code
, 
boﬁ
 
b_
)

215 
b
 = !!
b_
;

216 
	`dh˝_msg_put
(
msg
, 
code
, &
b
, 1);

217 
	}
}

223 
	$dh˝_msg_put_£cs
(
dh˝_msg
 *
msg
, 
code
, 
uöt32_t
 
£cs_
)

225 
uöt32_t
 
£cs
 = 
	`ht⁄l
(
£cs_
);

226 
	`dh˝_msg_put
(
msg
, 
code
, &
£cs
,  secs);

227 
	}
}

233 
	$dh˝_msg_put_ù
(
dh˝_msg
 *
msg
, 
code
, 
uöt32_t
 
ù
)

235 
	`dh˝_msg_put
(
msg
, 
code
, &
ù
,  ip);

236 
	}
}

241 
	$dh˝_msg_put_°rög
(
dh˝_msg
 *
msg
, 
code
, c⁄° *
°rög
)

243 
	`dh˝_msg_put
(
msg
, 
code
, 
°rög
, 
	`°æí
(string));

244 
	}
}

249 
	$dh˝_msg_put_uöt8
(
dh˝_msg
 *
msg
, 
code
, 
uöt8_t
 
x
)

251 
	`dh˝_msg_put
(
msg
, 
code
, &
x
,  x);

252 
	}
}

256 
	$dh˝_msg_put_uöt8_¨øy
(
dh˝_msg
 *
msg
, 
code
,

257 c⁄° 
uöt8_t
 
d©a
[], 
size_t
 
n
)

259 
	`dh˝_msg_put
(
msg
, 
code
, 
d©a
, 
n
);

260 
	}
}

266 
	$dh˝_msg_put_uöt16
(
dh˝_msg
 *
msg
, 
code
, 
uöt16_t
 
x_
)

268 
uöt16_t
 
x
 = 
	`ht⁄s
(
x_
);

269 
	`dh˝_msg_put
(
msg
, 
code
, &
x
,  x);

270 
	}
}

277 
	$dh˝_msg_put_uöt16_¨øy
(
dh˝_msg
 *
msg
, 
code
,

278 c⁄° 
uöt16_t
 
d©a
[], 
size_t
 
n
)

280 
size_t
 
i
;

282 
i
 = 0; i < 
n
; i++) {

283 
	`dh˝_msg_put_uöt16
(
msg
, 
code
, 
d©a
[
i
]);

285 
	}
}

292 
	$dh˝_msg_gë
(c⁄° 
dh˝_msg
 *
msg
, 
code
,

293 
size_t
 
off£t
, size_à
size
)

295 c⁄° 
dh˝_›ti⁄
 *
›t
 = &
msg
->
›ti⁄s
[
code
];

296  
off£t
 + 
size
 <
›t
->
n
 ? (c⁄° *Ë›t->
d©a
 + off£à: 
NULL
;

297 
	}
}

303 
boﬁ


304 
	$dh˝_msg_gë_boﬁ
(c⁄° 
dh˝_msg
 *
msg
, 
code
, 
size_t
 
off£t
,

305 
boﬁ
 *
out
)

307 c⁄° 
uöt8_t
 *
uöt8
 = 
	`dh˝_msg_gë
(
msg
, 
code
, 
off£t
,  *uint8);

308 i‡(
uöt8
) {

309 *
out
 = *
uöt8
 != 0;

310  
åue
;

312  
Ál£
;

314 
	}
}

321 
boﬁ


322 
	$dh˝_msg_gë_£cs
(c⁄° 
dh˝_msg
 *
msg
, 
code
, 
size_t
 
off£t
,

323 
uöt32_t
 *
out
)

325 c⁄° 
uöt32_t
 *
uöt32
 = 
	`dh˝_msg_gë
(
msg
, 
code
, 
off£t
 *  *uint32,

326  *
uöt32
);

327 i‡(
uöt32
) {

328 *
out
 = 
	`¡ohl
(*
uöt32
);

329  
åue
;

331  
Ál£
;

333 
	}
}

340 
boﬁ


341 
	$dh˝_msg_gë_ù
(c⁄° 
dh˝_msg
 *
msg
, 
code
,

342 
size_t
 
off£t
, 
uöt32_t
 *
out
)

344 c⁄° 
uöt32_t
 *
uöt32
 = 
	`dh˝_msg_gë
(
msg
, 
code
, 
off£t
 *  *uint32,

345  *
uöt32
);

346 i‡(
uöt32
) {

347 *
out
 = *
uöt32
;

348  
åue
;

350  
Ál£
;

352 
	}
}

362 
	$dh˝_msg_gë_°rög
(c⁄° 
dh˝_msg
 *
msg
, 
code
)

364 c⁄° 
dh˝_›ti⁄
 *
›t
 = &
msg
->
›ti⁄s
[
code
];

365  
›t
->
d©a
 ? 
	`xmemdup0
(›t->d©a, o±->
n
Ë: 
NULL
;

366 
	}
}

372 
boﬁ


373 
	$dh˝_msg_gë_uöt8
(c⁄° 
dh˝_msg
 *
msg
, 
code
,

374 
size_t
 
off£t
, 
uöt8_t
 *
out
)

376 c⁄° 
uöt8_t
 *
uöt8
 = 
	`dh˝_msg_gë
(
msg
, 
code
, 
off£t
,  *uint8);

377 i‡(
uöt8
) {

378 *
out
 = *
uöt8
;

379  
åue
;

381  
Ál£
;

383 
	}
}

390 
boﬁ


391 
	$dh˝_msg_gë_uöt16
(c⁄° 
dh˝_msg
 *
msg
, 
code
,

392 
size_t
 
off£t
, 
uöt16_t
 *
out
)

394 c⁄° 
uöt16_t
 *
uöt16
 = 
	`dh˝_msg_gë
(
msg
, 
code
, 
off£t
 *  *uint16,

395  *
uöt16
);

396 i‡(
uöt16
) {

397 *
out
 = 
	`¡ohs
(*
uöt16
);

398  
åue
;

400  
Ál£
;

402 
	}
}

406 
	$put_duøti⁄
(
ds
 *ds, 
duøti⁄
)

408 i‡(
duøti⁄
) {

409 i‡(
duøti⁄
 >= 86400) {

410 
	`ds_put_f‹m©
(
ds
, "%ud", 
duøti⁄
 / 86400);

411 
duøti⁄
 %= 86400;

413 i‡(
duøti⁄
 >= 3600) {

414 
	`ds_put_f‹m©
(
ds
, "%uh", 
duøti⁄
 / 3600);

415 
duøti⁄
 %= 3600;

417 i‡(
duøti⁄
 >= 60) {

418 
	`ds_put_f‹m©
(
ds
, "%umö", 
duøti⁄
 / 60);

419 
duøti⁄
 %= 60;

421 i‡(
duøti⁄
 > 0) {

422 
	`ds_put_f‹m©
(
ds
, "%us", 
duøti⁄
);

425 
	`ds_put_c°r
(
ds
, "0s");

427 
	}
}

432 
	$dh˝_›ti⁄_to_°rög
(c⁄° 
dh˝_›ti⁄
 *
›t
, 
code
, 
ds
 *ds)

434 c⁄° 
›ti⁄_˛ass
 *
˛ass
 = 
	`gë_›ti⁄_˛ass
(
code
);

435 c⁄° 
¨g_ty≥
 *
ty≥
 = &
ty≥s
[
˛ass
->type];

436 
size_t
 
off£t
;

437 c⁄° *
˝
;

439 
˝
 = 
˛ass
->
«me
; *cp; cp++) {

440 
c
 = *
˝
;

441 
	`ds_put_ch¨
(
ds
, 
c
 ='_' ? '-' : 
	`tﬁowî
(c));

443 
	`ds_put_ch¨
(
ds
, '=');

445 i‡(!
›t
->
d©a
 || !›t->
n
) {

446 
	`ds_put_c°r
(
ds
, 
›t
->
d©a
 ? "empty" : "null");

447  
	`ds_c°r
(
ds
);

450 i‡(
˛ass
->
ty≥
 =
DHCP_ARG_STRING
) {

451 
	`ds_put_ch¨
(
ds
, '"');

452 
	`ds_put_¥öèbÀ
(
ds
, 
›t
->
d©a
, o±->
n
);

453 
	`ds_put_ch¨
(
ds
, '"');

454  
	`ds_c°r
(
ds
);

456 
off£t
 = 0; off£à+ 
ty≥
->
size
 <
›t
->
n
; offset +=Åype->size) {

457 c⁄° *
p
 = (c⁄° *Ë
›t
->
d©a
 + 
off£t
;

458 c⁄° 
uöt8_t
 *
uöt8
 = 
p
;

459 c⁄° 
uöt32_t
 *
uöt32
 = 
p
;

460 c⁄° 
uöt16_t
 *
uöt16
 = 
p
;

462 i‡(
off£t
 && 
˛ass
->
ty≥
 !
DHCP_ARG_STRING
) {

463 
	`ds_put_c°r
(
ds
, 
˛ass
->
ty≥
 =
DHCP_ARG_UINT8
 ? ":" : ", ");

465 
˛ass
->
ty≥
) {

466 
DHCP_ARG_FIXED
:

467 
	`NOT_REACHED
();

468 
DHCP_ARG_IP
:

469 
	`ds_put_f‹m©
(
ds
, 
IP_FMT
, 
	`IP_ARGS
(
uöt32
));

471 
DHCP_ARG_UINT8
:

472 
	`ds_put_f‹m©
(
ds
, "%02"
PRIx8
, *
uöt8
);

474 
DHCP_ARG_UINT16
:

475 
	`ds_put_f‹m©
(
ds
, "%"
PRIu16
, 
	`¡ohs
(*
uöt16
));

477 
DHCP_ARG_UINT32
:

478 
	`ds_put_f‹m©
(
ds
, "%"
PRIu32
, 
	`¡ohl
(*
uöt32
));

480 
DHCP_ARG_SECS
:

481 
	`put_duøti⁄
(
ds
, 
	`¡ohl
(*
uöt32
));

483 
DHCP_ARG_STRING
:

484 
	`NOT_REACHED
();

485 
DHCP_ARG_BOOLEAN
:

486 i‡(*
uöt8
 == 0) {

487 
	`ds_put_c°r
(
ds
, "false");

488 } i‡(*
uöt8
 == 1) {

489 
	`ds_put_c°r
(
ds
, "true");

491 
	`ds_put_f‹m©
(
ds
, "**%"
PRIu8
"**", *
uöt8
);

496 i‡(
off£t
 !
›t
->
n
) {

497 i‡(
off£t
) {

498 
	`ds_put_c°r
(
ds
, ", ");

500 
	`ds_put_c°r
(
ds
, "**leftovers:");

501 ; 
off£t
 < 
›t
->
n
; offset++) {

502 c⁄° *
p
 = (c⁄° *Ë
›t
->
d©a
 + 
off£t
;

503 c⁄° 
uöt8_t
 *
uöt8
 = 
p
;

504 
	`ds_put_f‹m©
(
ds
, " %"
PRIu8
, *
uöt8
);

506 
	`ds_put_c°r
(
ds
, "**");

508  
	`ds_c°r
(
ds
);

509 
	}
}

512 
boﬁ


513 
	$dh˝_›ti⁄_equÆs
(c⁄° 
dh˝_›ti⁄
 *
a
, c⁄° dh˝_›ti⁄ *
b
)

515  ((
a
->
d©a
 !
NULL
Ë=(
b
->data != NULL)

516 && 
a
->
n
 =
b
->n

517 && !
	`memcmp
(
a
->
d©a
, 
b
->d©a,á->
n
));

518 
	}
}

524 
	$dh˝_msg_to_°rög
(c⁄° 
dh˝_msg
 *
msg
, 
boﬁ
 
mu…ûöe
, 
ds
 *ds)

526 
£∑øt‹
 = 
mu…ûöe
 ? '\n' : ' ';

527 
code
;

529 
	`ds_˛ór
(
ds
);

530 
	`ds_put_f‹m©
(
ds
, "op=%s",

531 (
msg
->
›
 =
DHCP_BOOTREQUEST
 ? "request"

532 : 
msg
->
›
 =
DHCP_BOOTREPLY
 ? "reply"

534 
	`ds_put_f‹m©
(
ds
, "%˘y≥=%s", 
£∑øt‹
, 
	`dh˝_ty≥_«me
(
msg
->
ty≥
));

535 
	`ds_put_f‹m©
(
ds
, "%cxid=0x%08"
PRIx32
, 
£∑øt‹
, 
msg
->
xid
);

536 
	`ds_put_f‹m©
(
ds
, "%c£cs=", 
£∑øt‹
);

537 
	`put_duøti⁄
(
ds
, 
msg
->
£cs
);

538 i‡(
msg
->
Êags
) {

539 
	`ds_put_f‹m©
(
ds
, "%cÊags=", 
£∑øt‹
);

540 i‡(
msg
->
Êags
 & 
DHCP_FLAGS_BROADCAST
) {

541 
	`ds_put_c°r
(
ds
, "[BROADCAST]");

543 i‡(
msg
->
Êags
 & 
DHCP_FLAGS_MBZ
) {

544 
	`ds_put_f‹m©
(
ds
, "[0x%04"
PRIx16
"]", 
msg
->
Êags
 & 
DHCP_FLAGS_MBZ
);

547 i‡(
msg
->
cüddr
) {

548 
	`ds_put_f‹m©
(
ds
, "%ccüddr="
IP_FMT
, 
£∑øt‹
, 
	`IP_ARGS
(&
msg
->
cüddr
));

550 i‡(
msg
->
yüddr
) {

551 
	`ds_put_f‹m©
(
ds
, "%cyüddr="
IP_FMT
, 
£∑øt‹
, 
	`IP_ARGS
(&
msg
->
yüddr
));

553 i‡(
msg
->
süddr
) {

554 
	`ds_put_f‹m©
(
ds
, "%csüddr="
IP_FMT
, 
£∑øt‹
, 
	`IP_ARGS
(&
msg
->
süddr
));

556 i‡(
msg
->
güddr
) {

557 
	`ds_put_f‹m©
(
ds
, "%cgüddr="
IP_FMT
, 
£∑øt‹
, 
	`IP_ARGS
(&
msg
->
güddr
));

559 
	`ds_put_f‹m©
(
ds
, "%cchaddr="
ETH_ADDR_FMT
,

560 
£∑øt‹
, 
	`ETH_ADDR_ARGS
(
msg
->
chaddr
));

562 
code
 = 0; codê< 
DHCP_N_OPTIONS
; code++) {

563 c⁄° 
dh˝_›ti⁄
 *
›t
 = &
msg
->
›ti⁄s
[
code
];

564 i‡(
›t
->
d©a
) {

565 
	`ds_put_ch¨
(
ds
, 
£∑øt‹
);

566 
	`dh˝_›ti⁄_to_°rög
(
›t
, 
code
, 
ds
);

569 i‡(
mu…ûöe
) {

570 
	`ds_put_ch¨
(
ds
, 
£∑øt‹
);

572  
	`ds_c°r
(
ds
);

573 
	}
}

576 
	$∑r£_›ti⁄s
(
dh˝_msg
 *
msg
, c⁄° *
«me
, *
d©a
, 
size_t
 
size
,

577 
›ti⁄_off£t
)

579 
oÂbuf
 
b
;

581 
b
.
d©a
 = data;

582 
b
.
size
 = size;

584 
uöt8_t
 *
code
, *
Àn
;

585 *
∑ylﬂd
;

587 
code
 = 
	`oÂbuf_åy_puŒ
(&
b
, 1);

588 i‡(!
code
 || *codê=
DHCP_CODE_END
) {

590 } i‡(*
code
 =
DHCP_CODE_PAD
) {

594 
Àn
 = 
	`oÂbuf_åy_puŒ
(&
b
, 1);

595 i‡(!
Àn
) {

596 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "ªachedÉnd o‡%†ex≥˘ögÜígth byã", 
«me
);

600 
∑ylﬂd
 = 
	`oÂbuf_åy_puŒ
(&
b
, *
Àn
);

601 i‡(!
∑ylﬂd
) {

602 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "ex≥˘ed %"
PRIu8
" bytes of option-%"PRIu8" "

604 *
Àn
, *
code
, 
b
.
size
, 
«me
);

607 
	`dh˝_msg_put
(
msg
, *
code
 + 
›ti⁄_off£t
, 
∑ylﬂd
, *
Àn
);

609 
	}
}

612 
	$vÆid©e_›ti⁄s
(
dh˝_msg
 *
msg
)

614 
code
;

616 
code
 = 0; codê< 
DHCP_N_OPTIONS
; code++) {

617 
dh˝_›ti⁄
 *
›t
 = &
msg
->
›ti⁄s
[
code
];

618 c⁄° 
›ti⁄_˛ass
 *
˛ass
 = 
	`gë_›ti⁄_˛ass
(
code
);

619 
¨g_ty≥
 *
ty≥
 = &
ty≥s
[
˛ass
->type];

620 i‡(
›t
->
d©a
) {

621 
size_t
 
n_ñems
 = 
›t
->
n
 / 
ty≥
->
size
;

622 
size_t
 
ªmaödî
 = 
›t
->
n
 % 
ty≥
->
size
;

623 
boﬁ
 
ok
 = 
åue
;

624 i‡(
ªmaödî
) {

625 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "%s option has %zu %zu-byte %sárguments "

627 
˛ass
->
«me
, 
n_ñems
, 
ty≥
->
size
,

628 
ty≥
->
«me
, 
ªmaödî
);

629 
ok
 = 
Ál£
;

631 i‡(
n_ñems
 < 
˛ass
->
mö_¨gs
 ||Ç_ñem†> cœss->
max_¨gs
) {

632 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "%s option has %zu %zu-byte %sárguments but "

634 
˛ass
->
«me
, 
n_ñems
, 
ty≥
->
size
,Åype->name,

635 
˛ass
->
mö_¨gs
, cœss->
max_¨gs
);

636 
ok
 = 
Ál£
;

638 i‡(!
ok
) {

639 
ds
 d†
DS_EMPTY_INITIALIZER
;

640 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "%†›ti⁄ c⁄èös: %s", 
˛ass
->
«me
,

641 
	`dh˝_›ti⁄_to_°rög
(
›t
, 
code
, &
ds
));

642 
	`ds_de°roy
(&
ds
);

644 
›t
->
n
 = 0;

645 
›t
->
d©a
 = 
NULL
;

649 
	}
}

655 
	$dh˝_∑r£
(
dh˝_msg
 *
msg
, c⁄° 
oÂbuf
 *
b_
)

657 
oÂbuf
 
b
 = *
b_
;

658 
dh˝_hódî
 *
dh˝
;

659 
uöt32_t
 *
cookõ
;

660 
uöt8_t
 
ty≥
;

661 *
víd‹_˛ass
;

663 
dh˝
 = 
	`oÂbuf_åy_puŒ
(&
b
,  *dhcp);

664 i‡(!
dh˝
) {

665 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "bufferÅoo small for DHCP header (%zu bytes)",

666 
b
.
size
);

667 
îr‹
;

670 i‡(
dh˝
->
›
 !
DHCP_BOOTREPLY
 && dh˝->› !
DHCP_BOOTREQUEST
) {

671 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "övÆid DHCP o∞(%"
PRIu8
")", 
dh˝
->
›
);

672 
îr‹
;

674 i‡(
dh˝
->
hty≥
 !
ARP_HRD_ETHERNET
) {

675 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "övÆid DHCP hty≥ (%"
PRIu8
")", 
dh˝
->
hty≥
);

676 
îr‹
;

678 i‡(
dh˝
->
hÀn
 !
ETH_ADDR_LEN
) {

679 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "övÆid DHCP hÀ¿(%"
PRIu8
")", 
dh˝
->
hÀn
);

680 
îr‹
;

683 
	`dh˝_msg_öô
(
msg
);

684 
msg
->
›
 = 
dh˝
->op;

685 
msg
->
xid
 = 
	`¡ohl
(
dh˝
->xid);

686 
msg
->
£cs
 = 
	`¡ohs
(
dh˝
->secs);

687 
msg
->
Êags
 = 
	`¡ohs
(
dh˝
->flags);

688 
msg
->
cüddr
 = 
dh˝
->ciaddr;

689 
msg
->
yüddr
 = 
dh˝
->yiaddr;

690 
msg
->
süddr
 = 
dh˝
->siaddr;

691 
msg
->
güddr
 = 
dh˝
->giaddr;

692 
	`mem˝y
(
msg
->
chaddr
, 
dh˝
->chaddr, 
ETH_ADDR_LEN
);

694 
cookõ
 = 
	`oÂbuf_åy_puŒ
(&
b
,  cookie);

695 i‡(
cookõ
) {

696 i‡(
	`¡ohl
(*
cookõ
Ë=
DHCP_OPTS_COOKIE
) {

697 
uöt8_t
 
ovîlﬂd
;

699 
	`∑r£_›ti⁄s
(
msg
, "›ti⁄s", 
b
.
d©a
, b.
size
, 0);

700 i‡(
	`dh˝_msg_gë_uöt8
(
msg
, 
DHCP_CODE_OPTION_OVERLOAD
,

701 0, &
ovîlﬂd
)) {

702 i‡(
ovîlﬂd
 & 1) {

703 
	`∑r£_›ti⁄s
(
msg
, "fûe", 
dh˝
->
fûe
,  dhcp->file,

706 i‡(
ovîlﬂd
 & 2) {

707 
	`∑r£_›ti⁄s
(
msg
, "sname",

708 
dh˝
->
¢ame
,  dhcp->sname, 0);

712 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "bad DHCP o±i⁄†cookõ: %08"
PRIx32
,

713 
	`¡ohl
(*
cookõ
));

716 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "DHCPÖacket hasÇo options");

719 
víd‹_˛ass
 = 
	`dh˝_msg_gë_°rög
(
msg
, 
DHCP_CODE_VENDOR_CLASS
);

720 i‡(
víd‹_˛ass
 && !
	`°rcmp
(vendor_class, "OpenFlow")) {

721 
	`∑r£_›ti⁄s
(
msg
, "vendor-specific",

722 
msg
->
›ti⁄s
[
DHCP_CODE_VENDOR_SPECIFIC
].
d©a
,

723 
msg
->
›ti⁄s
[
DHCP_CODE_VENDOR_SPECIFIC
].
n
,

724 
DHCP_VENDOR_OFS
);

726 
	`‰ì
(
víd‹_˛ass
);

728 
	`vÆid©e_›ti⁄s
(
msg
);

729 i‡(!
	`dh˝_msg_gë_uöt8
(
msg
, 
DHCP_CODE_DHCP_MSG_TYPE
, 0, &
ty≥
)) {

730 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "missing DHCP messageÅype");

731 
	`dh˝_msg_unöô
(
msg
);

732 
îr‹
;

734 
msg
->
ty≥
 =Åype;

737 
îr‹
:

738 i‡(
	`VLOG_IS_DBG_ENABLED
(
LOG_MODULE
)) {

739 
ds
 ds;

741 
	`ds_öô
(&
ds
);

742 
	`ds_put_hex_dump
(&
ds
, 
b_
->
d©a
, b_->
size
, 0, 
åue
);

743 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "övÆid DHCP mesßgêdump:\n%s", 
	`ds_c°r
(&
ds
));

745 
	`ds_˛ór
(&
ds
);

746 
	`dh˝_msg_to_°rög
(
msg
, 
Ál£
, &
ds
);

747 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "∑πüŒy dis£˘ed DHCP mesßge: %s", 
	`ds_c°r
(&
ds
));

749 
	`ds_de°roy
(&
ds
);

751  
EPROTO
;

752 
	}
}

755 
	$put_›ti⁄_chunk
(
oÂbuf
 *
b
, 
uöt8_t
 
code
, *
d©a
, 
size_t
 
n
)

757 
uöt8_t
 
hódî
[2];

759 
	`as£π
(
n
 < 256);

760 
hódî
[0] = 
code
;

761 
hódî
[1] = 
n
;

762 
	`oÂbuf_put
(
b
, 
hódî
,  header);

763 
	`oÂbuf_put
(
b
, 
d©a
, 
n
);

764 
	}
}

767 
	$put_›ti⁄
(
oÂbuf
 *
b
, 
uöt8_t
 
code
, *
d©a
, 
size_t
 
n
)

769 i‡(
d©a
) {

770 i‡(
n
) {

775 
uöt8_t
 *
p
 = 
d©a
;

776 
n
) {

777 
size_t
 
chunk
 = 
n
 > 255 ? 248 :Ç;

778 
	`put_›ti⁄_chunk
(
b
, 
code
, 
p
, 
chunk
);

779 
p
 +
chunk
;

780 
n
 -
chunk
;

784 
	`put_›ti⁄_chunk
(
b
, 
code
, 
NULL
, 0);

787 
	}
}

791 
	$dh˝_as£mbÀ
(c⁄° 
dh˝_msg
 *
msg
, 
oÂbuf
 *
b
)

793 c⁄° 
uöt8_t
 
íd
 = 
DHCP_CODE_END
;

794 
uöt32_t
 
cookõ
 = 
	`ht⁄l
(
DHCP_OPTS_COOKIE
);

795 
oÂbuf
 
vnd_d©a
;

796 
dh˝_hódî
 
dh˝
;

797 
i
;

799 
	`mem£t
(&
dh˝
, 0,  dhcp);

800 
dh˝
.
›
 = 
msg
->op;

801 
dh˝
.
hty≥
 = 
ARP_HRD_ETHERNET
;

802 
dh˝
.
hÀn
 = 
ETH_ADDR_LEN
;

803 
dh˝
.
h›s
 = 0;

804 
dh˝
.
xid
 = 
	`ht⁄l
(
msg
->xid);

805 
dh˝
.
£cs
 = 
	`ht⁄s
(
msg
->secs);

806 
dh˝
.
Êags
 = 
	`ht⁄s
(
msg
->flags);

807 
dh˝
.
cüddr
 = 
msg
->ciaddr;

808 
dh˝
.
yüddr
 = 
msg
->yiaddr;

809 
dh˝
.
süddr
 = 
msg
->siaddr;

810 
dh˝
.
güddr
 = 
msg
->giaddr;

811 
	`mem˝y
(
dh˝
.
chaddr
, 
msg
->chaddr, 
ETH_ADDR_LEN
);

812 
	`oÂbuf_put
(
b
, &
dh˝
,  dhcp);

813 
	`oÂbuf_put
(
b
, &
cookõ
,  cookie);

817 i‡(
msg
->
ty≥
) {

818 
uöt8_t
 
ty≥
 = 
msg
->type;

819 
	`put_›ti⁄
(
b
, 
DHCP_CODE_DHCP_MSG_TYPE
, &
ty≥
, 1);

823 
i
 = 0; i < 
DHCP_VENDOR_OFS
; i++) {

824 c⁄° 
dh˝_›ti⁄
 *
›ti⁄
 = &
msg
->
›ti⁄s
[
i
];

825 
	`put_›ti⁄
(
b
, 
i
, 
›ti⁄
->
d©a
, o±i⁄->
n
);

829 
	`oÂbuf_öô
(&
vnd_d©a
, 0);

830 
i
 = 
DHCP_VENDOR_OFS
; i < 
DHCP_N_OPTIONS
; i++) {

831 c⁄° 
dh˝_›ti⁄
 *
›ti⁄
 = &
msg
->
›ti⁄s
[
i
];

832 
	`put_›ti⁄
(&
vnd_d©a
, 
i
 - 
DHCP_VENDOR_OFS
, 
›ti⁄
->
d©a
, o±i⁄->
n
);

834 i‡(
vnd_d©a
.
size
) {

835 
	`put_›ti⁄
(
b
, 
DHCP_CODE_VENDOR_SPECIFIC
, 
vnd_d©a
.
d©a
, vnd_d©a.
size
);

837 
	`oÂbuf_unöô
(&
vnd_d©a
);

840 
	`oÂbuf_put
(
b
, &
íd
, Énd);

841 
	}
}

	@lib/dhcp.h

34 #i‚de‡
DHCP_H


35 
	#DHCP_H
 1

	)

37 
	~<°döt.h
>

38 
	~"∑ckës.h
"

39 
	~"utû.h
"

41 
	gds
;

42 
	goÂbuf
;

45 
	#DHCP_BOOTREQUEST
 1

	)

46 
	#DHCP_BOOTREPLY
 2

	)

49 
	#DHCP_FLAGS_BROADCAST
 0x8000

	)

50 
	#DHCP_FLAGS_MBZ
 0x7ff‡

	)

53 
	#DHCP_OPTS_COOKIE
 0x63825363

	)

55 
	#DHCP_HEADER_LEN
 236

	)

56 
	sdh˝_hódî
 {

57 
uöt8_t
 
	m›
;

58 
uöt8_t
 
	mhty≥
;

59 
uöt8_t
 
	mhÀn
;

60 
uöt8_t
 
	mh›s
;

61 
uöt32_t
 
	mxid
;

62 
uöt16_t
 
	m£cs
;

63 
uöt16_t
 
	mÊags
;

64 
uöt32_t
 
	mcüddr
;

65 
uöt32_t
 
	myüddr
;

66 
uöt32_t
 
	msüddr
;

67 
uöt32_t
 
	mgüddr
;

68 
uöt8_t
 
	mchaddr
[16];

69 
	m¢ame
[64];

70 
	mfûe
[128];

73 
BUILD_ASSERT_DECL
(
DHCP_HEADER_LEN
 =(
dh˝_hódî
));

75 
	#DHCP_ARGS
 \

76 
	`DHCP_ARG
(
FIXED
, 0) \

77 
	`DHCP_ARG
(
IP
, 4) \

78 
	`DHCP_ARG
(
SECS
, 4) \

79 
	`DHCP_ARG
(
STRING
, 1) \

80 
	`DHCP_ARG
(
UINT8
, 1) \

81 
	`DHCP_ARG
(
UINT16
, 2) \

82 
	`DHCP_ARG
(
UINT32
, 4) \

83 
	`DHCP_ARG
(
BOOLEAN
, 1Ë

	)

86 
	edh˝_¨g_ty≥
 {

87 
	#DHCP_ARG
(
NAME
, 
SIZE
Ë
DHCP_ARG_
##NAME,

	)

88 
	mDHCP_ARGS


89 #unde‡
DHCP_ARG


92 
	#DHCP_MSGS
 \

93 
	`DHCP_MSG
(
DHCPDISCOVER
, 1) \

94 
	`DHCP_MSG
(
DHCPOFFER
, 2) \

95 
	`DHCP_MSG
(
DHCPREQUEST
, 3) \

96 
	`DHCP_MSG
(
DHCPDECLINE
, 4) \

97 
	`DHCP_MSG
(
DHCPACK
, 5) \

98 
	`DHCP_MSG
(
DHCPNAK
, 6) \

99 
	`DHCP_MSG
(
DHCPRELEASE
, 7) \

100 
	`DHCP_MSG
(
DCHPINFORM
, 8Ë

	)

103 
	edh˝_msg_ty≥
 {

104 
	#DHCP_MSG
(
NAME
, 
VALUE
ËNAME = VALUE,

	)

105 
	mDHCP_MSGS


106 #unde‡
DHCP_MSG


108 c⁄° *
dh˝_ty≥_«me
(
dh˝_msg_ty≥
);

113 
	#DHCP_N_OPTIONS
 512

	)

114 
	#DHCP_VENDOR_OFS
 256

	)

117 
	#DHCP_OPTS
 \

120 
	`DHCP_OPT
(
PAD
, 0, 
FIXED
, 0, 0) \

121 
	`DHCP_OPT
(
END
, 255, 
FIXED
, 0, 0) \

122 
	`DHCP_OPT
(
SUBNET_MASK
, 1, 
IP
, 1, 1) \

123 
	`DHCP_OPT
(
TIME_OFFSET
, 2, 
SECS
, 1, 1) \

124 
	`DHCP_OPT
(
ROUTER
, 3, 
IP
, 1, 
SIZE_MAX
) \

127 
	`DHCP_OPT
(
DNS_SERVER
, 6, 
IP
, 1, 
SIZE_MAX
) \

130 
	`DHCP_OPT
(
LPR_SERVER
, 9, 
IP
, 1, 
SIZE_MAX
) \

133 
	`DHCP_OPT
(
HOST_NAME
, 12, 
STRING
, 1, 
SIZE_MAX
) \

134 
	`DHCP_OPT
(
BOOT_FILE_SIZE
, 13, 
UINT16
, 1, 1) \

136 
	`DHCP_OPT
(
DOMAIN_NAME
, 15, 
STRING
, 1, 
SIZE_MAX
) \

138 
	`DHCP_OPT
(
ROOT_PATH
, 17, 
STRING
, 1, 
SIZE_MAX
) \

139 
	`DHCP_OPT
(
EXTENSIONS_PATH
, 18, 
STRING
, 1, 
SIZE_MAX
) \

140 
	`DHCP_OPT
(
IP_FORWARDING
, 19, 
BOOLEAN
, 1, 1) \

141 
	`DHCP_OPT
(
SOURCE_ROUTING
, 20, 
BOOLEAN
, 1, 1) \

142 
	`DHCP_OPT
(
POLICY_FILTER
, 21, 
IP
, 2, 
SIZE_MAX
) \

143 
	`DHCP_OPT
(
MAX_DGRAM_REASSEMBLY
, 22, 
UINT16
, 1, 1) \

144 
	`DHCP_OPT
(
IP_TTL
, 23, 
UINT8
, 1, 1) \

145 
	`DHCP_OPT
(
PATH_MTU_TIMEOUT
, 24, 
SECS
, 1, 1) \

146 
	`DHCP_OPT
(
PATH_MTU_PLATEAU
, 25, 
UINT16
, 2, 
SIZE_MAX
) \

147 
	`DHCP_OPT
(
MTU
, 26, 
UINT16
, 1, 1) \

148 
	`DHCP_OPT
(
ALL_SUBNETS_ARE_LOCAL
, 27, 
BOOLEAN
, 1, 1) \

149 
	`DHCP_OPT
(
BROADCAST_ADDRESS
, 28, 
IP
, 1, 1) \

150 
	`DHCP_OPT
(
PERFORM_MASK_DISCOVERY
, 29, 
BOOLEAN
, 1, 1) \

151 
	`DHCP_OPT
(
MASK_SUPPLIER
, 30, 
BOOLEAN
, 1, 1) \

152 
	`DHCP_OPT
(
PERFORM_ROUTER_DISCOVERY
, 31, 
BOOLEAN
, 1, 1) \

153 
	`DHCP_OPT
(
ROUTER_SOLICITATION
, 32, 
IP
, 1, 1) \

154 
	`DHCP_OPT
(
STATIC_ROUTE
, 33, 
IP
, 2, 
SIZE_MAX
) \

156 
	`DHCP_OPT
(
ARP_CACHE_TIMEOUT
, 35, 
SECS
, 1, 1) \

157 
	`DHCP_OPT
(
ETHERNET_ENCAPSULATION
, 36, 
BOOLEAN
, 1, 1) \

158 
	`DHCP_OPT
(
TCP_TTL
, 37, 
UINT8
, 1, 1) \

159 
	`DHCP_OPT
(
TCP_KEEPALIVE_INTERVAL
, 38, 
SECS
, 1, 1) \

160 
	`DHCP_OPT
(
TCP_KEEPALIVE_GARBAGE
, 39, 
BOOLEAN
, 1, 1) \

161 
	`DHCP_OPT
(
NIS_DOMAIN
, 40, 
STRING
, 1, 
SIZE_MAX
) \

162 
	`DHCP_OPT
(
NIS_SERVERS
, 41, 
IP
, 1, 
SIZE_MAX
) \

163 
	`DHCP_OPT
(
NTP_SERVERS
, 42, 
IP
, 1, 
SIZE_MAX
) \

164 
	`DHCP_OPT
(
VENDOR_SPECIFIC
, 43, 
UINT8
, 1, 
SIZE_MAX
) \

165 
	`DHCP_OPT
(
NETBIOS_NS
, 44, 
IP
, 1, 
SIZE_MAX
) \

166 
	`DHCP_OPT
(
NETBIOS_DDS
, 45, 
IP
, 1, 
SIZE_MAX
) \

167 
	`DHCP_OPT
(
NETBIOS_NODE_TYPE
, 46, 
UINT8
, 1, 1) \

168 
	`DHCP_OPT
(
NETBIOS_SCOPE
, 47, 
STRING
, 1, 
SIZE_MAX
) \

169 
	`DHCP_OPT
(
X_FONT_SERVER
, 48, 
IP
, 1, 
SIZE_MAX
) \

170 
	`DHCP_OPT
(
XDM
, 49, 
IP
, 1, 
SIZE_MAX
) \

171 
	`DHCP_OPT
(
NISPLUS_DOMAIN
, 64, 
STRING
, 1, 
SIZE_MAX
) \

172 
	`DHCP_OPT
(
NISPLUS_SERVERS
, 65, 
IP
, 1, 
SIZE_MAX
) \

173 
	`DHCP_OPT
(
MOBILE_IP_HOME_AGENT
, 68, 
IP
, 0, 
SIZE_MAX
) \

174 
	`DHCP_OPT
(
SMTP_SERVER
, 69, 
IP
, 1, 
SIZE_MAX
) \

175 
	`DHCP_OPT
(
POP3_SERVER
, 70, 
IP
, 1, 
SIZE_MAX
) \

176 
	`DHCP_OPT
(
NNTP_SERVER
, 71, 
IP
, 1, 
SIZE_MAX
) \

177 
	`DHCP_OPT
(
WWW_SERVER
, 72, 
IP
, 1, 
SIZE_MAX
) \

178 
	`DHCP_OPT
(
FINGER_SERVER
, 73, 
IP
, 1, 
SIZE_MAX
) \

179 
	`DHCP_OPT
(
IRC_SERVER
, 74, 
IP
, 1, 
SIZE_MAX
) \

182 
	`DHCP_OPT
(
REQUESTED_IP
, 50, 
IP
, 1, 1) \

183 
	`DHCP_OPT
(
LEASE_TIME
, 51, 
SECS
, 1, 1) \

184 
	`DHCP_OPT
(
OPTION_OVERLOAD
, 52, 
UINT8
, 1, 1) \

185 
	`DHCP_OPT
(
TFTP_SERVER
, 66, 
STRING
, 1, 
SIZE_MAX
) \

186 
	`DHCP_OPT
(
BOOTFILE_NAME
, 67, 
STRING
, 1, 
SIZE_MAX
) \

187 
	`DHCP_OPT
(
DHCP_MSG_TYPE
, 53, 
UINT8
, 1, 1) \

188 
	`DHCP_OPT
(
SERVER_IDENTIFIER
, 54, 
IP
, 1, 1) \

189 
	`DHCP_OPT
(
PARAMETER_REQUEST_LIST
, 55, 
UINT8
, 1, 
SIZE_MAX
) \

190 
	`DHCP_OPT
(
MESSAGE
, 56, 
STRING
, 1, 
SIZE_MAX
) \

191 
	`DHCP_OPT
(
MAX_DHCP_MSG_SIZE
, 57, 
UINT16
, 1, 1) \

192 
	`DHCP_OPT
(
T1
, 58, 
SECS
, 1, 1) \

193 
	`DHCP_OPT
(
T2
, 59, 
SECS
, 1, 1) \

194 
	`DHCP_OPT
(
VENDOR_CLASS
, 60, 
STRING
, 1, 
SIZE_MAX
) \

195 
	`DHCP_OPT
(
CLIENT_ID
, 61, 
UINT8
, 2, 
SIZE_MAX
) \

196 
	`DHCP_VNDOPT
(
OFP_CONTROLLER_VCONN
, 1, 
STRING
, 1, 
SIZE_MAX
) \

197 
	`DHCP_VNDOPT
(
OFP_PKI_URI
, 2, 
STRING
, 1, 
SIZE_MAX
)

	)

200 
	#DHCP_VNDOPT
(
NAME
, 
CODE
, 
ARG
, 
MIN
, 
MAX
) \

201 
	`DHCP_OPT
(
NAME
, (
CODE
Ë+ 
DHCP_VENDOR_OFS
, 
ARG
, 
MIN
, 
MAX
)

	)

205 
	#DHCP_OPT
(
NAME
, 
VALUE
, 
ARGTYPE
, 
MIN_ARGS
, 
MAX_ARGS
) \

206 
DHCP_CODE_
##
NAME
 = 
VALUE
,

	)

207 
	mDHCP_OPTS


208 #unde‡
DHCP_OPT


216 
	sdh˝_›ti⁄
 {

217 
size_t
 
	mn
;

218 *
	md©a
;

221 c⁄° *
dh˝_›ti⁄_to_°rög
(c⁄° 
dh˝_›ti⁄
 *, 
code
,

222 
ds
 *);

223 
boﬁ
 
dh˝_›ti⁄_equÆs
(c⁄° 
dh˝_›ti⁄
 *,

224 c⁄° 
dh˝_›ti⁄
 *);

228 
	sdh˝_msg
 {

230 
uöt8_t
 
	m›
;

231 
uöt32_t
 
	mxid
;

232 
uöt16_t
 
	m£cs
;

233 
uöt16_t
 
	mÊags
;

234 
uöt32_t
 
	mcüddr
;

235 
uöt32_t
 
	myüddr
;

236 
uöt32_t
 
	msüddr
;

237 
uöt32_t
 
	mgüddr
;

238 
uöt8_t
 
	mchaddr
[
ETH_ADDR_LEN
];

239 
dh˝_msg_ty≥
 
	mty≥
;

240 
dh˝_›ti⁄
 
	m›ti⁄s
[
DHCP_N_OPTIONS
];

243 
uöt8_t
 *
	md©a
;

244 
size_t
 
	md©a_u£d
, 
	md©a_Æloˇãd
;

247 
dh˝_msg_öô
(
dh˝_msg
 *);

248 
dh˝_msg_unöô
(
dh˝_msg
 *);

249 
dh˝_msg_c›y
(
dh˝_msg
 *, const dhcp_msg *);

250 
dh˝_msg_put
(
dh˝_msg
 *, 
code
, c⁄° *, 
size_t
);

251 
dh˝_msg_put_boﬁ
(
dh˝_msg
 *, 
code
, 
boﬁ
);

252 
dh˝_msg_put_£cs
(
dh˝_msg
 *, 
code
, 
uöt32_t
);

253 
dh˝_msg_put_ù
(
dh˝_msg
 *, 
code
, 
uöt32_t
);

254 
dh˝_msg_put_°rög
(
dh˝_msg
 *, 
code
, const *);

255 
dh˝_msg_put_uöt8
(
dh˝_msg
 *, 
code
, 
uöt8_t
);

256 
dh˝_msg_put_uöt8_¨øy
(
dh˝_msg
 *, 
code
,

257 c⁄° 
uöt8_t
[], 
size_t
 
n
);

258 
dh˝_msg_put_uöt16
(
dh˝_msg
 *, 
code
, 
uöt16_t
);

259 
dh˝_msg_put_uöt16_¨øy
(
dh˝_msg
 *, 
code
,

260 c⁄° 
uöt16_t
[], 
size_t
 
n
);

261 c⁄° *
dh˝_msg_gë
(c⁄° 
dh˝_msg
 *, 
code
, 
size_t
 
off£t
,

262 
size_t
 
size
);

263 
boﬁ
 
dh˝_msg_gë_boﬁ
(c⁄° 
dh˝_msg
 *, 
code
,

264 
size_t
 
off£t
, 
boﬁ
 *);

265 
boﬁ
 
dh˝_msg_gë_£cs
(c⁄° 
dh˝_msg
 *, 
code
,

266 
size_t
 
off£t
, 
uöt32_t
 *);

267 
boﬁ
 
dh˝_msg_gë_ù
(c⁄° 
dh˝_msg
 *, 
code
,

268 
size_t
 
off£t
, 
uöt32_t
 *);

269 *
dh˝_msg_gë_°rög
(c⁄° 
dh˝_msg
 *, 
code
);

270 
boﬁ
 
dh˝_msg_gë_uöt8
(c⁄° 
dh˝_msg
 *, 
code
,

271 
size_t
 
off£t
, 
uöt8_t
 *);

272 
boﬁ
 
dh˝_msg_gë_uöt16
(c⁄° 
dh˝_msg
 *, 
code
,

273 
size_t
 
off£t
, 
uöt16_t
 *);

274 c⁄° *
dh˝_msg_to_°rög
(c⁄° 
dh˝_msg
 *, 
boﬁ
 
mu…ûöe
,

275 
ds
 *);

276 
dh˝_∑r£
(
dh˝_msg
 *, c⁄° 
oÂbuf
 *);

277 
dh˝_as£mbÀ
(c⁄° 
dh˝_msg
 *, 
oÂbuf
 *);

	@lib/dhparams.h

1 #i‚de‡
DHPARAMS_H


2 
	#DHPARAMS_H
 1

	)

4 
	~<›ís¶/dh.h
>

6 
DH
 *
gë_dh1024
();

7 
DH
 *
gë_dh2048
();

8 
DH
 *
gë_dh4096
();

	@lib/dirs.c

2 c⁄° 
	goÂ_pkgd©adú
[] = "/usr/local/share/openflow";

3 c⁄° 
	goÂ_rundú
[] = "/usr/local/var/run";

4 c⁄° 
	goÂ_logdú
[] = "/usr/local/var/log/openflow";

	@lib/dirs.h

34 #i‚de‡
DIRS_H


35 
	#DIRS_H
 1

	)

37 c⁄° 
oÂ_pkgd©adú
[];

38 c⁄° 
oÂ_rundú
[];

39 c⁄° 
oÂ_logdú
[];

	@lib/dpif.c

34 
	~<c⁄fig.h
>

35 
	~"dpif.h
"

37 
	~<as£π.h
>

38 
	~<˘y≥.h
>

39 
	~<î∫o.h
>

40 
	~<öây≥s.h
>

41 
	~<√töë/ö.h
>

42 
	~<°dlib.h
>

43 
	~<°rög.h
>

45 
	~"√éök.h
"

46 
	~"√éök-¥Ÿocﬁ.h
"

47 
	~"oÂbuf.h
"

48 
	~"›íÊow/›íÊow-√éök.h
"

49 
	~"›íÊow/›íÊow.h
"

50 
	~"∑ckës.h
"

51 
	~"utû.h
"

52 
	~"xtoxŒ.h
"

54 
	~"vlog.h
"

55 
	#LOG_MODULE
 
VLM_dpif


	)

58 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(5, 60);

61 
	g›íÊow_Ámûy
;

63 
lookup_›íÊow_mu…iˇ°_group
(
dp_idx
, *
mu…iˇ°_group
);

64 
£nd_mgmt_comm™d
(
dpif
 *, 
dp_idx
, 
comm™d
,

65 c⁄° *
√tdev
);

72 
	$dpif_›í
(
subs¸ibe_dp_idx
, 
dpif
 *
dp
)

74 
∆_sock
 *
sock
;

75 
mu…iˇ°_group
 = 0;

76 
ªtvÆ
;

78 
ªtvÆ
 = 
	`∆_lookup_gíl_Ámûy
(
DP_GENL_FAMILY_NAME
, &
›íÊow_Ámûy
);

79 i‡(
ªtvÆ
) {

80  
ªtvÆ
;

83 i‡(
subs¸ibe_dp_idx
 >= 0) {

84 
ªtvÆ
 = 
	`lookup_›íÊow_mu…iˇ°_group
(
subs¸ibe_dp_idx
,

85 &
mu…iˇ°_group
);

86 i‡(
ªtvÆ
) {

87  
ªtvÆ
;

93 
ªtvÆ
 = 
	`∆_sock_¸óã
(
NETLINK_GENERIC
, 
mu…iˇ°_group
, 0,

94 4 * 1024u * 1024, &
sock
);

95 i‡(
ªtvÆ
) {

96  
ªtvÆ
;

99 
dp
->
sock
 = sock;

101 
	}
}

105 
	$dpif_˛o£
(
dpif
 *
dp
)

107 i‡(
dp
) {

108 
	`∆_sock_de°roy
(
dp
->
sock
);

110 
	}
}

112 c⁄° 
∆_pﬁicy
 
	g›íÊow_pﬁicy
[] = {

113 [
DP_GENL_A_DP_IDX
] = { .
ty≥
 = 
NL_A_U32
,

114 .
	g›ti⁄Æ
 = 
Ál£
 },

115 [
DP_GENL_A_OPENFLOW
] = { .
ty≥
 = 
NL_A_UNSPEC
,

116 .
	gmö_Àn
 = (
oÂ_hódî
),

117 .
	gmax_Àn
 = 65535,

118 .
	g›ti⁄Æ
 = 
Ál£
 },

133 
	$dpif_ªcv_›íÊow
(
dpif
 *
dp
, 
dp_idx
, 
oÂbuf
 **
buf„Ω
,

134 
boﬁ
 
waô
)

136 
∆©å
 *
©ås
[
	`ARRAY_SIZE
(
›íÊow_pﬁicy
)];

137 
oÂbuf
 *
buf„r
;

138 
oÂ_hódî
 *
oh
;

139 
uöt16_t
 
oÂ_Àn
;

141 
buf„r
 = *
buf„Ω
 = 
NULL
;

143 
ªtvÆ
;

146 
	`oÂbuf_dñëe
(
buf„r
);

147 
ªtvÆ
 = 
	`∆_sock_ªcv
(
dp
->
sock
, &
buf„r
, 
waô
);

148 } 
ªtvÆ
 =
ENOBUFS


149 || (!
ªtvÆ


150 && (
	`∆_msg_∆msghdr
(
buf„r
)->
∆msg_ty≥
 =
NLMSG_DONE


151 || 
	`∆_msg_∆msgîr
(
buf„r
, 
NULL
))));

152 i‡(
ªtvÆ
) {

153 i‡(
ªtvÆ
 !
EAGAIN
) {

154 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "dpif_ªcv_›íÊow: %s", 
	`°ªº‹
(
ªtvÆ
));

156  
ªtvÆ
;

159 i‡(
	`∆_msg_gílmsghdr
(
buf„r
Ë=
NULL
) {

160 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "receivedÖacketÅoo short for Generic Netlink");

161 
îr‹
;

163 i‡(
	`∆_msg_∆msghdr
(
buf„r
)->
∆msg_ty≥
 !
›íÊow_Ámûy
) {

164 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
,

165 "ª˚ivedÅy≥ (%"
PRIu16
") != openflow family (%d)",

166 
	`∆_msg_∆msghdr
(
buf„r
)->
∆msg_ty≥
, 
›íÊow_Ámûy
);

167 
îr‹
;

170 i‡(!
	`∆_pﬁicy_∑r£
(
buf„r
, 
NLMSG_HDRLEN
 + 
GENL_HDRLEN
,

171 
›íÊow_pﬁicy
, 
©ås
,

172 
	`ARRAY_SIZE
(
›íÊow_pﬁicy
))) {

173 
îr‹
;

175 } 
	`∆_©å_gë_u32
(
©ås
[
DP_GENL_A_DP_IDX
]Ë!
dp_idx
);

177 
oh
 = 
buf„r
->
d©a
 = (*Ë
	`∆_©å_gë
(
©ås
[
DP_GENL_A_OPENFLOW
]);

178 
buf„r
->
size
 = 
	`∆_©å_gë_size
(
©ås
[
DP_GENL_A_OPENFLOW
]);

179 
oÂ_Àn
 = 
	`¡ohs
(
oh
->
Àngth
);

180 i‡(
oÂ_Àn
 !
buf„r
->
size
) {

181 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
,

182 "oÂ_hódî.Àngth %"
PRIu16
" !=áttributeÜength %zu\n",

183 
oÂ_Àn
, 
buf„r
->
size
);

184 
buf„r
->
size
 = 
	`MIN
(
oÂ_Àn
, buffer->size);

186 *
buf„Ω
 = 
buf„r
;

189 
îr‹
:

190 
	`oÂbuf_dñëe
(
buf„r
);

191  
EPROTO
;

192 
	}
}

206 
	$dpif_£nd_›íÊow
(
dpif
 *
dp
, 
dp_idx
, 
oÂbuf
 *
buf„r
)

208 
oÂ_hódî
 *
oh
;

209 
dump_Êag
;

210 
oÂbuf
 
hdr
;

211 
∆©å
 *
∆a
;

212 
uöt32_t
 
fixed_buf„r
[64 / 4];

213 
iovec
 
iov
[3];

214 
∑d_byãs
;

215 
n_iov
;

216 
ªtvÆ
;

220 
oh
 = 
	`oÂbuf_©_as£π
(
buf„r
, 0,  *oh);

221 
dump_Êag
 = 
oh
->
ty≥
 =
OFPT_MULTIPART_REQUEST
 ? 
NLM_F_DUMP
 : 0;

223 
	`oÂbuf_u£
(&
hdr
, 
fixed_buf„r
,  fixed_buffer);

224 
	`∆_msg_put_gílmsghdr
(&
hdr
, 
dp
->
sock
, 32, 
›íÊow_Ámûy
,

225 
NLM_F_REQUEST
 | 
dump_Êag
, 
DP_GENL_C_OPENFLOW
, 1);

226 
	`∆_msg_put_u32
(&
hdr
, 
DP_GENL_A_DP_IDX
, 
dp_idx
);

227 
∆a
 = 
	`oÂbuf_put_unöô
(&
hdr
,  *nla);

228 
∆a
->
∆a_Àn
 =  *∆®+ 
buf„r
->
size
;

229 
∆a
->
∆a_ty≥
 = 
DP_GENL_A_OPENFLOW
;

230 
∑d_byãs
 = 
	`NLA_ALIGN
(
∆a
->
∆a_Àn
) -Çla->nla_len;

231 
	`∆_msg_∆msghdr
(&
hdr
)->
∆msg_Àn
 = hdr.
size
 + 
buf„r
->sizê+ 
∑d_byãs
;

232 
n_iov
 = 2;

233 
iov
[0].
iov_ba£
 = 
hdr
.
d©a
;

234 
iov
[0].
iov_Àn
 = 
hdr
.
size
;

235 
iov
[1].
iov_ba£
 = 
buf„r
->
d©a
;

236 
iov
[1].
iov_Àn
 = 
buf„r
->
size
;

237 i‡(
∑d_byãs
) {

238 
zîos
[
NLA_ALIGNTO
];

239 
n_iov
++;

240 
iov
[2].
iov_ba£
 = 
zîos
;

241 
iov
[2].
iov_Àn
 = 
∑d_byãs
;

243 
ªtvÆ
 = 
	`∆_sock_£ndv
(
dp
->
sock
, 
iov
, 
n_iov
, 
Ál£
);

244 i‡(
ªtvÆ
 &&ÑëvÆ !
EAGAIN
) {

245 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "dpif_£nd_›íÊow: %s", 
	`°ªº‹
(
ªtvÆ
));

247  
ªtvÆ
;

248 
	}
}

256 
	$dpif_add_dp
(
dpif
 *
dp
, 
dp_idx
, c⁄° *
dp_«me
)

258  
	`£nd_mgmt_comm™d
(
dp
, 
dp_idx
, 
DP_GENL_C_ADD_DP
, 
dp_«me
);

259 
	}
}

266 
	$dpif_dñ_dp
(
dpif
 *
dp
, 
dp_idx
, c⁄° *
dp_«me
)

268  
	`£nd_mgmt_comm™d
(
dp
, 
dp_idx
, 
DP_GENL_C_DEL_DP
, 
dp_«me
);

269 
	}
}

274 
	$dpif_add_p‹t
(
dpif
 *
dp
, 
dp_idx
, c⁄° *
√tdev
)

276  
	`£nd_mgmt_comm™d
(
dp
, 
dp_idx
, 
DP_GENL_C_ADD_PORT
, 
√tdev
);

277 
	}
}

282 
	$dpif_dñ_p‹t
(
dpif
 *
dp
, 
dp_idx
, c⁄° *
√tdev
)

284  
	`£nd_mgmt_comm™d
(
dp
, 
dp_idx
, 
DP_GENL_C_DEL_PORT
, 
√tdev
);

285 
	}
}

287 c⁄° 
∆_pﬁicy
 
	g›íÊow_mu…iˇ°_pﬁicy
[] = {

288 [
DP_GENL_A_DP_IDX
] = { .
ty≥
 = 
NL_A_U32
 },

289 [
DP_GENL_A_DP_NAME
] = { .
ty≥
 = 
NL_A_STRING
 },

290 [
DP_GENL_A_MC_GROUP
] = { .
ty≥
 = 
NL_A_U32
 },

299 
	$quîy_d©≠©h
(*
dp_idx
, *
mu…iˇ°_group
, c⁄° *
dp_«me
)

301 
∆_sock
 *
sock
;

302 
oÂbuf
 
ªque°
, *
ª∂y
;

303 
∆©å
 *
©ås
[
	`ARRAY_SIZE
(
›íÊow_mu…iˇ°_pﬁicy
)];

304 
ªtvÆ
;

306 
ªtvÆ
 = 
	`∆_sock_¸óã
(
NETLINK_GENERIC
, 0, 0, 0, &
sock
);

307 i‡(
ªtvÆ
) {

308  
ªtvÆ
;

310 
	`oÂbuf_öô
(&
ªque°
, 0);

311 
	`∆_msg_put_gílmsghdr
(&
ªque°
, 
sock
, 0, 
›íÊow_Ámûy
, 
NLM_F_REQUEST
,

312 
DP_GENL_C_QUERY_DP
, 1);

313 i‡(*
dp_idx
 != -1) {

314 
	`∆_msg_put_u32
(&
ªque°
, 
DP_GENL_A_DP_IDX
, *
dp_idx
);

316 i‡(
dp_«me
) {

317 
	`∆_msg_put_°rög
(&
ªque°
, 
DP_GENL_A_DP_NAME
, 
dp_«me
);

319 
ªtvÆ
 = 
	`∆_sock_å™ß˘
(
sock
, &
ªque°
, &
ª∂y
);

320 
	`oÂbuf_unöô
(&
ªque°
);

321 i‡(
ªtvÆ
) {

322 
	`∆_sock_de°roy
(
sock
);

323  
ªtvÆ
;

325 i‡(!
	`∆_pﬁicy_∑r£
(
ª∂y
, 
NLMSG_HDRLEN
 + 
GENL_HDRLEN
,

326 
›íÊow_mu…iˇ°_pﬁicy
, 
©ås
,

327 
	`ARRAY_SIZE
(
›íÊow_mu…iˇ°_pﬁicy
))) {

328 
	`∆_sock_de°roy
(
sock
);

329 
	`oÂbuf_dñëe
(
ª∂y
);

330  
EPROTO
;

332 *
dp_idx
 = 
	`∆_©å_gë_u32
(
©ås
[
DP_GENL_A_DP_IDX
]);

333 *
mu…iˇ°_group
 = 
	`∆_©å_gë_u32
(
©ås
[
DP_GENL_A_MC_GROUP
]);

334 
	`∆_sock_de°roy
(
sock
);

335 
	`oÂbuf_dñëe
(
ª∂y
);

338 
	}
}

344 
	$lookup_›íÊow_mu…iˇ°_group
(
dp_idx
, *
mu…iˇ°_group
)

346  
	`quîy_d©≠©h
(&
dp_idx
, 
mu…iˇ°_group
, 
NULL
);

347 
	}
}

352 
	$dpif_gë_idx
(c⁄° *
«me
)

354 
dp_idx
 = -1;

355 
mc_group
 = 0;

357 i‡(
	`quîy_d©≠©h
(&
dp_idx
, &
mc_group
, 
«me
)) {

361  
dp_idx
;

362 
	}
}

369 
	$£nd_mgmt_comm™d
(
dpif
 *
dp
, 
dp_idx
, 
comm™d
, c⁄° *
¨g
)

371 
oÂbuf
 
ªque°
, *
ª∂y
;

372 
ªtvÆ
;

374 
	`oÂbuf_öô
(&
ªque°
, 0);

375 
	`∆_msg_put_gílmsghdr
(&
ªque°
, 
dp
->
sock
, 32, 
›íÊow_Ámûy
,

376 
NLM_F_REQUEST
 | 
NLM_F_ACK
, 
comm™d
, 1);

377 i‡(
dp_idx
 != -1) {

378 
	`∆_msg_put_u32
(&
ªque°
, 
DP_GENL_A_DP_IDX
, 
dp_idx
);

380 i‡(
¨g
) {

381 i‡((
comm™d
 =
DP_GENL_C_ADD_DP
Ë|| (comm™d =
DP_GENL_C_DEL_DP
)) {

382 
	`∆_msg_put_°rög
(&
ªque°
, 
DP_GENL_A_DP_NAME
, 
¨g
);

384 
	`∆_msg_put_°rög
(&
ªque°
, 
DP_GENL_A_PORTNAME
, 
¨g
);

387 
ªtvÆ
 = 
	`∆_sock_å™ß˘
(
dp
->
sock
, &
ªque°
, &
ª∂y
);

388 
	`oÂbuf_unöô
(&
ªque°
);

389 
	`oÂbuf_dñëe
(
ª∂y
);

391  
ªtvÆ
;

392 
	}
}

	@lib/dpif.h

35 #i‚de‡
DPIF_H


36 
	#DPIF_H
 1

	)

42 
	~<°dboﬁ.h
>

43 
	~<°döt.h
>

45 
	goÂbuf
;

46 
	goÂ_m©ch
;

49 
	sdpif


51 
∆_sock
 *
	msock
;

54 
dpif_›í
(
subs¸ibe_dp_idx
, 
dpif
 *);

55 
dpif_˛o£
(
dpif
 *);

58 
dpif_ªcv_›íÊow
(
dpif
 *, 
dp_idx
, 
oÂbuf
 **, 
boﬁ
 
waô
);

59 
dpif_£nd_›íÊow
(
dpif
 *, 
dp_idx
, 
oÂbuf
 *);

62 
dpif_add_dp
(
dpif
 *, 
dp_idx
, c⁄° *
dp_«me
);

63 
dpif_dñ_dp
(
dpif
 *, 
dp_idx
, c⁄° *
dp_«me
);

64 
dpif_add_p‹t
(
dpif
 *, 
dp_idx
, c⁄° *
√tdev
);

65 
dpif_dñ_p‹t
(
dpif
 *, 
dp_idx
, c⁄° *
√tdev
);

66 
dpif_gë_idx
(c⁄° *
dp_«me
);

	@lib/dynamic-string.c

34 
	~<c⁄fig.h
>

35 
	~"dy«mic-°rög.h
"

36 
	~<as£π.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<time.h
>

40 
	~"timevÆ.h
"

41 
	~"utû.h
"

44 
	$ds_öô
(
ds
 *ds)

46 
ds
->
°rög
 = 
NULL
;

47 
ds
->
Àngth
 = 0;

48 
ds
->
Æloˇãd
 = 0;

49 
	}
}

52 
	$ds_˛ór
(
ds
 *ds)

54 
ds
->
Àngth
 = 0;

55 
	}
}

58 
	$ds_åunˇã
(
ds
 *ds, 
size_t
 
√w_Àngth
)

60 i‡(
ds
->
Àngth
 > 
√w_Àngth
) {

61 
ds
->
Àngth
 = 
√w_Àngth
;

62 
ds
->
°rög
[
√w_Àngth
] = '\0';

64 
	}
}

67 
	$ds_ª£rve
(
ds
 *ds, 
size_t
 
mö_Àngth
)

69 i‡(
mö_Àngth
 > 
ds
->
Æloˇãd
 || !ds->
°rög
) {

70 
ds
->
Æloˇãd
 +
	`MAX
(
mö_Àngth
, ds->allocated);

71 
ds
->
Æloˇãd
 = 
	`MAX
(8, ds->allocated);

72 
ds
->
°rög
 = 
	`xªÆloc
(ds->°rög, ds->
Æloˇãd
 + 1);

74 
	}
}

77 
	$ds_put_unöô
(
ds
 *ds, 
size_t
 
n
)

79 
	`ds_ª£rve
(
ds
, ds->
Àngth
 + 
n
);

80 
ds
->
Àngth
 +
n
;

81 
ds
->
°rög
[ds->
Àngth
] = '\0';

82  &
ds
->
°rög
[ds->
Àngth
 - 
n
];

83 
	}
}

86 
	$ds_put_ch¨
(
ds
 *ds, 
c
)

88 *
	`ds_put_unöô
(
ds
, 1Ë
c
;

89 
	}
}

92 
	$ds_put_ch¨_mu…ùÀ
(
ds
 *ds, 
c
, 
size_t
 
n
)

94 
	`mem£t
(
	`ds_put_unöô
(
ds
, 
n
), 
c
,Ç);

95 
	}
}

98 
	$ds_put_buf„r
(
ds
 *ds, c⁄° *
s
, 
size_t
 
n
)

100 
	`mem˝y
(
	`ds_put_unöô
(
ds
, 
n
), 
s
,Ç);

101 
	}
}

104 
	$ds_put_c°r
(
ds
 *ds, c⁄° *
s
)

106 
size_t
 
s_Àn
 = 
	`°æí
(
s
);

107 
	`mem˝y
(
	`ds_put_unöô
(
ds
, 
s_Àn
), 
s
, s_len);

108 
	}
}

111 
	$ds_put_f‹m©
(
ds
 *ds, c⁄° *
f‹m©
, ...)

113 
va_li°
 
¨gs
;

115 
	`va_°¨t
(
¨gs
, 
f‹m©
);

116 
	`ds_put_f‹m©_vÆi°
(
ds
, 
f‹m©
, 
¨gs
);

117 
	`va_íd
(
¨gs
);

118 
	}
}

121 
	$ds_put_f‹m©_vÆi°
(
ds
 *ds, c⁄° *
f‹m©
, 
va_li°
 
¨gs_
)

123 
va_li°
 
¨gs
;

124 
size_t
 
avaûabÀ
;

125 
√eded
;

127 
	`va_c›y
(
¨gs
, 
¨gs_
);

128 
avaûabÀ
 = 
ds
->
°rög
 ? ds->
Æloˇãd
 - ds->
Àngth
 + 1 : 0;

129 
√eded
 = 
	`v¢¥ötf
(&
ds
->
°rög
[ds->
Àngth
], 
avaûabÀ
, 
f‹m©
, 
¨gs
);

130 
	`va_íd
(
¨gs
);

132 i‡(
√eded
 < 
avaûabÀ
) {

133 
ds
->
Àngth
 +
√eded
;

135 
size_t
 
avaûabÀ
;

137 
	`ds_ª£rve
(
ds
, ds->
Àngth
 + 
√eded
);

139 
	`va_c›y
(
¨gs
, 
¨gs_
);

140 
avaûabÀ
 = 
ds
->
Æloˇãd
 - ds->
Àngth
 + 1;

141 
√eded
 = 
	`v¢¥ötf
(&
ds
->
°rög
[ds->
Àngth
], 
avaûabÀ
, 
f‹m©
, 
¨gs
);

142 
	`va_íd
(
¨gs
);

144 
	`as£π
(
√eded
 < 
avaûabÀ
);

145 
ds
->
Àngth
 +
√eded
;

147 
	}
}

150 
	$ds_put_¥öèbÀ
(
ds
 *ds, c⁄° *
s
, 
size_t
 
n
)

152 
	`ds_ª£rve
(
ds
, ds->
Àngth
 + 
n
);

153 
n
-- > 0) {

154 
c
 = *
s
++;

155 i‡(
c
 < 0x20 || c > 0x7e || c == '\\' || c == '"') {

156 
	`ds_put_f‹m©
(
ds
, "\\%03o", (Ë
c
);

158 
	`ds_put_ch¨
(
ds
, 
c
);

161 
	}
}

164 
	$ds_put_°r·ime
(
ds
 *ds, c⁄° *
ãm∂©e
, c⁄° 
tm
 *tm)

166 i‡(!
tm
) {

167 
time_t
 
now
 = 
	`time_now
();

168 
tm
 = 
	`loˇ…ime
(&
now
);

171 
size_t
 
avaû
 = 
ds
->
°rög
 ? ds->
Æloˇãd
 - ds->
Àngth
 + 1 : 0;

172 
size_t
 
u£d
 = 
	`°r·ime
(&
ds
->
°rög
[ds->
Àngth
], 
avaû
, 
ãm∂©e
, 
tm
);

173 i‡(
u£d
) {

174 
ds
->
Àngth
 +
u£d
;

177 
	`ds_ª£rve
(
ds
, ds->
Àngth
 + (
avaû
 < 32 ? 64 : 2 *ávail));

179 
	}
}

182 
	$ds_gë_löe
(
ds
 *ds, 
FILE
 *
fûe
)

184 
	`ds_˛ór
(
ds
);

186 
c
 = 
	`gëc
(
fûe
);

187 i‡(
c
 =
EOF
) {

188  
ds
->
Àngth
 ? 0 : 
EOF
;

189 } i‡(
c
 == '\n') {

192 
	`ds_put_ch¨
(
ds
, 
c
);

195 
	}
}

198 
	$ds_c°r
(
ds
 *ds)

200 i‡(!
ds
->
°rög
) {

201 
	`ds_ª£rve
(
ds
, 0);

203 
ds
->
°rög
[ds->
Àngth
] = '\0';

204  
ds
->
°rög
;

205 
	}
}

208 
	$ds_de°roy
(
ds
 *ds)

210 
	`‰ì
(
ds
->
°rög
);

211 
	}
}

218 
	$ds_put_hex_dump
(
ds
 *ds, c⁄° *
buf_
, 
size_t
 
size
,

219 
uöçå_t
 
ofs
, 
boﬁ
 
ascii
)

221 c⁄° 
uöt8_t
 *
buf
 = 
buf_
;

222 c⁄° 
size_t
 
≥r_löe
 = 16;

224 
size
 > 0)

226 
size_t
 
°¨t
, 
íd
, 
n
;

227 
size_t
 
i
;

230 
°¨t
 = 
ofs
 % 
≥r_löe
;

231 
íd
 = 
≥r_löe
;

232 i‡(
íd
 - 
°¨t
 > 
size
)

233 
íd
 = 
°¨t
 + 
size
;

234 
n
 = 
íd
 - 
°¨t
;

237 
	`ds_put_f‹m©
(
ds
, "%08jx ", (
uötmax_t
Ë
	`ROUND_DOWN
(
ofs
, 
≥r_löe
));

238 
i
 = 0; i < 
°¨t
; i++)

239 
	`ds_put_f‹m©
(
ds
, " ");

240 ; 
i
 < 
íd
; i++)

241 
	`ds_put_f‹m©
(
ds
, "%02hhx%c",

242 
buf
[
i
 - 
°¨t
], i =
≥r_löe
 / 2 - 1? '-' : ' ');

243 i‡(
ascii
)

245 ; 
i
 < 
≥r_löe
; i++)

246 
	`ds_put_f‹m©
(
ds
, " ");

247 
	`ds_put_f‹m©
(
ds
, "|");

248 
i
 = 0; i < 
°¨t
; i++)

249 
	`ds_put_f‹m©
(
ds
, " ");

250 ; 
i
 < 
íd
; i++) {

251 
c
 = 
buf
[
i
 - 
°¨t
];

252 
	`ds_put_ch¨
(
ds
, 
c
 >= 32 && c < 127 ? c : '.');

254 ; 
i
 < 
≥r_löe
; i++)

255 
	`ds_put_f‹m©
(
ds
, " ");

256 
	`ds_put_f‹m©
(
ds
, "|");

258 
	`ds_put_f‹m©
(
ds
, "\n");

260 
ofs
 +
n
;

261 
buf
 +
n
;

262 
size
 -
n
;

264 
	}
}

267 
	$ds_œ°
(c⁄° 
ds
 *ds)

269  
ds
->
Àngth
 > 0 ? (Ëds->
°rög
[ds->Àngth - 1] : 
EOF
;

270 
	}
}

273 
	$ds_chomp
(
ds
 *ds, 
c
)

275 i‡(
ds
->
Àngth
 > 0 && ds->
°rög
[ds->Àngth - 1] =(Ë
c
) {

276 
ds
->
°rög
[--ds->
Àngth
] = '\0';

278 
	}
}

	@lib/dynamic-string.h

34 #i‚de‡
DYNAMIC_STRING_H


35 
	#DYNAMIC_STRING_H
 1

	)

37 
	~<°d¨g.h
>

38 
	~<°dboﬁ.h
>

39 
	~<°ddef.h
>

40 
	~<°döt.h
>

41 
	~<°dio.h
>

42 
	~"compûî.h
"

44 
	gtm
;

46 
	sds
 {

47 *
	m°rög
;

48 
size_t
 
	mÀngth
;

49 
size_t
 
	mÆloˇãd
;

52 
	#DS_EMPTY_INITIALIZER
 { 
NULL
, 0, 0 }

	)

54 
ds_öô
(
ds
 *);

55 
ds_˛ór
(
ds
 *);

56 
ds_åunˇã
(
ds
 *, 
size_t
 
√w_Àngth
);

57 
ds_ª£rve
(
ds
 *, 
size_t
 
mö_Àngth
);

58 *
ds_put_unöô
(
ds
 *, 
size_t
 
n
);

59 
ds_put_ch¨
(
ds
 *, );

60 
ds_put_ch¨_mu…ùÀ
(
ds
 *, , 
size_t
 
n
);

61 
ds_put_buf„r
(
ds
 *, c⁄° *, 
size_t
 
n
);

62 
ds_put_c°r
(
ds
 *, const *);

63 
	$ds_put_f‹m©
(
ds
 *, c⁄° *, ...Ë
	`PRINTF_FORMAT
(2, 3);

64 
	$ds_put_f‹m©_vÆi°
(
ds
 *, c⁄° *, 
va_li°
)

65 
	`PRINTF_FORMAT
(2, 0);

66 
	`ds_put_¥öèbÀ
(
ds
 *, c⁄° *, 
size_t
);

67 
	$ds_put_°r·ime
(
ds
 *, c⁄° *, c⁄° 
tm
 *)

68 
	`STRFTIME_FORMAT
(2);

69 
	`ds_put_hex_dump
(
ds
 *ds, c⁄° *
buf_
, 
size_t
 
size
,

70 
uöçå_t
 
ofs
, 
boﬁ
 
ascii
);

71 
	`ds_gë_löe
(
ds
 *, 
FILE
 *);

73 *
	`ds_c°r
(
ds
 *);

74 
	`ds_de°roy
(
ds
 *);

76 
	`ds_œ°
(c⁄° 
ds
 *);

77 
	`ds_chomp
(
ds
 *, 
c
);

	@lib/fatal-signal.c

33 
	~<c⁄fig.h
>

34 
	~"Áèl-sig«l.h
"

35 
	~<as£π.h
>

36 
	~<î∫o.h
>

37 
	~<sig«l.h
>

38 
	~<°dboﬁ.h
>

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 
	~<°rög.h
>

42 
	~<uni°d.h
>

43 
	~"utû.h
"

46 c⁄° 
	gÁèl_sig«ls
[] = { 
SIGTERM
, 
SIGINT
, 
SIGHUP
, 
SIGALRM
 };

49 
sig£t_t
 
	gÁèl_sig«l_£t
;

52 
	shook
 {

53 (*
	mfunc
)(*
	maux
);

54 *
	maux
;

55 
boﬁ
 
	mrun_©_exô
;

57 
	#MAX_HOOKS
 32

	)

58 
hook
 
	ghooks
[
MAX_HOOKS
];

59 
size_t
 
	gn_hooks
;

62 
	gblock_Àvñ
 = 0;

65 
sig£t_t
 
	gßved_sig«l_mask
;

68 
boﬁ
 
	gdißbÀd
;

70 
ˇŒ_sig¥ocmask
(
how
, 
sig£t_t
* 
√w_£t
, sig£t_t* 
ﬁd_£t
);

71 
©exô_h™dÀr
();

72 
ˇŒ_hooks
(
sig_ƒ
);

78 
Áèl_sig«l_add_hook
((*
func
)(*
aux
), *aux, 
boﬁ
 
run_©_exô
)

80 
	`Áèl_sig«l_block
();

81 
	`as£π
(
n_hooks
 < 
MAX_HOOKS
);

82 
hooks
[
n_hooks
].
func
 = func;

83 
hooks
[
n_hooks
].
aux
 =áux;

84 
hooks
[
n_hooks
].
run_©_exô
 =Ñun_at_exit;

85 
n_hooks
++;

86 
	`Áèl_sig«l_unblock
();

87 
	}
}

97 
	$Áèl_sig«l_block
()

99 
boﬁ
 
öôed
 = 
Ál£
;

100 i‡(!
öôed
) {

101 
size_t
 
i
;

103 
öôed
 = 
åue
;

104 
	`sigem±y£t
(&
Áèl_sig«l_£t
);

105 
i
 = 0; i < 
	`ARRAY_SIZE
(
Áèl_sig«ls
); i++) {

106 
sig_ƒ
 = 
Áèl_sig«ls
[
i
];

107 
siga˘i⁄
 
ﬁd_ß
;

109 
	`sigadd£t
(&
Áèl_sig«l_£t
, 
sig_ƒ
);

110 i‡(
	`siga˘i⁄
(
sig_ƒ
, 
NULL
, &
ﬁd_ß
)) {

111 
	`oÂ_Áèl
(
î∫o
, "sigaction");

113 i‡(
ﬁd_ß
.
ß_h™dÀr
 =
SIG_DFL


114 && 
	`sig«l
(
sig_ƒ
, 
Áèl_sig«l_h™dÀr
Ë=
SIG_ERR
) {

115 
	`oÂ_Áèl
(
î∫o
, "signal");

118 
	`©exô
(
©exô_h™dÀr
);

121 i‡(++
block_Àvñ
 == 1) {

122 
	`ˇŒ_sig¥ocmask
(
SIG_BLOCK
, &
Áèl_sig«l_£t
, &
ßved_sig«l_mask
);

124 
	}
}

131 
	$Áèl_sig«l_unblock
()

133 
	`as£π
(
block_Àvñ
 > 0);

134 i‡(--
block_Àvñ
 == 0) {

135 
	`ˇŒ_sig¥ocmask
(
SIG_SETMASK
, &
ßved_sig«l_mask
, 
NULL
);

137 
	}
}

149 
	$Áèl_sig«l_h™dÀr
(
sig_ƒ
)

151 
	`ˇŒ_hooks
(
sig_ƒ
);

155 
	`sig«l
(
sig_ƒ
, 
SIG_DFL
);

156 
	`øi£
(
sig_ƒ
);

157 
	}
}

160 
	$©exô_h™dÀr
()

162 i‡(!
dißbÀd
) {

163 
	`ˇŒ_hooks
(0);

165 
	}
}

168 
	$ˇŒ_hooks
(
sig_ƒ
)

170 vﬁ©ûê
sig_©omic_t
 
ªcur£
 = 0;

171 i‡(!
ªcur£
) {

172 
size_t
 
i
;

174 
ªcur£
 = 1;

176 
i
 = 0; i < 
n_hooks
; i++) {

177 
hook
 *
h
 = &
hooks
[
i
];

178 i‡(
sig_ƒ
 || 
h
->
run_©_exô
) {

179 
h
->
	`func
(h->
aux
);

183 
	}
}

185 **
	gfûes
;

186 
size_t
 
	gn_fûes
, 
	gmax_fûes
;

188 
u∆ök_fûes
(*
aux
);

189 
do_u∆ök_fûes
();

194 
	$Áèl_sig«l_add_fûe_to_u∆ök
(c⁄° *
fûe
)

196 
boﬁ
 
added_hook
 = 
Ál£
;

197 i‡(!
added_hook
) {

198 
added_hook
 = 
åue
;

199 
	`Áèl_sig«l_add_hook
(
u∆ök_fûes
, 
NULL
, 
åue
);

202 
	`Áèl_sig«l_block
();

203 i‡(
n_fûes
 >
max_fûes
) {

204 
fûes
 = 
	`x2ƒóŒoc
(fûes, &
max_fûes
,  *files);

206 
fûes
[
n_fûes
++] = 
	`x°rdup
(
fûe
);

207 
	`Áèl_sig«l_unblock
();

208 
	}
}

213 
	$Áèl_sig«l_ªmove_fûe_to_u∆ök
(c⁄° *
fûe
)

215 
size_t
 
i
;

217 
	`Áèl_sig«l_block
();

218 
i
 = 0; i < 
n_fûes
; i++) {

219 i‡(!
	`°rcmp
(
fûes
[
i
], 
fûe
)) {

220 
	`‰ì
(
fûes
[
i
]);

221 
fûes
[
i
] = fûes[--
n_fûes
];

225 
	`Áèl_sig«l_unblock
();

226 
	}
}

229 
	$u∆ök_fûes
(*
aux
 
UNUSED
)

231 
	`do_u∆ök_fûes
();

232 
	}
}

235 
	$do_u∆ök_fûes
()

237 
size_t
 
i
;

239 
i
 = 0; i < 
n_fûes
; i++) {

240 
	`u∆ök
(
fûes
[
i
]);

242 
	}
}

249 
	$Áèl_sig«l_f‹k
()

251 
size_t
 
i
;

253 
dißbÀd
 = 
åue
;

255 
i
 = 0; i < 
	`ARRAY_SIZE
(
Áèl_sig«ls
); i++) {

256 
sig_ƒ
 = 
Áèl_sig«ls
[
i
];

257 i‡(
	`sig«l
(
sig_ƒ
, 
SIG_DFL
Ë=
SIG_IGN
) {

258 
	`sig«l
(
sig_ƒ
, 
SIG_IGN
);

261 
	}
}

264 
	$ˇŒ_sig¥ocmask
(
how
, 
sig£t_t
* 
√w_£t
, sig£t_t* 
ﬁd_£t
)

266 
îr‹
 = 
	`sig¥ocmask
(
how
, 
√w_£t
, 
ﬁd_£t
);

267 i‡(
îr‹
) {

268 
	`Ârötf
(
°dîr
, "sig¥ocmask: %s\n", 
	`°ªº‹
(
î∫o
));

270 
	}
}

	@lib/fatal-signal.h

34 #i‚de‡
FATAL_SIGNAL_H


35 
	#FATAL_SIGNAL_H
 1

	)

37 
	~<°dboﬁ.h
>

40 
Áèl_sig«l_add_hook
((*)(*
aux
), *aux, 
boﬁ
 
run_©_exô
);

41 
	`Áèl_sig«l_block
();

42 
	`Áèl_sig«l_unblock
();

43 
	`Áèl_sig«l_f‹k
();

49 
	`Áèl_sig«l_add_fûe_to_u∆ök
(const *);

50 
	`Áèl_sig«l_ªmove_fûe_to_u∆ök
(const *);

54 
	`Áèl_sig«l_h™dÀr
(
sig_ƒ
);

	@lib/fault.c

34 
	~<c⁄fig.h
>

35 
	~"Áu….h
"

36 
	~<dlf˙.h
>

37 
	~<öây≥s.h
>

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

41 
	~<sig«l.h
>

42 
	~"utû.h
"

44 
	~"vlog.h
"

45 
	#LOG_MODULE
 
VLM_Áu…


	)

48 
	$Áu…_h™dÀr
(
sig_ƒ
)

50 
	`VLOG_EMER
(
LOG_MODULE
, "Caughàsig«»%d.", 
sig_ƒ
);

51 
	`log_backåa˚
();

52 
	`fÊush
(
°dout
);

53 
	`fÊush
(
°dîr
);

55 
	`sig«l
(
sig_ƒ
, 
SIG_DFL
);

56 
	`øi£
(
sig_ƒ
);

57 
	}
}

60 
	$log_backåa˚
()

66 **
‰ame
;

67 
	#STACK_DEPTH_LIMIT
 128

	)

68 
°ack_dïth
 = 0;

69 
‰ame
 = 
	`__buûtö_‰ame_addªss
(0);

70 
‰ame
 !
NULL
 && frame[0] != NULL

71 && 
°ack_dïth
 < 
STACK_DEPTH_LIMIT
;

72 
‰ame
 = føme[0], ++
°ack_dïth
) {

73 
Dl_öfo
 
addröfo
;

74 i‡(!
	`dœddr
(
‰ame
[1], &
addröfo
Ë|| !addröfo.
dli_¢ame
) {

75 
	`Ârötf
(
°dîr
, " 0x%08"
PRIxPTR
"\n", (
uöçå_t
Ë
‰ame
[1]);

77 
	`Ârötf
(
°dîr
, " 0x%08"
PRIxPTR
" (%s+%zu)\n",

78 (
uöçå_t
Ë
‰ame
[1], 
addröfo
.
dli_¢ame
,

79 (*Ë
‰ame
[1] - (*Ë
addröfo
.
dli_ßddr
);

82 
	`fÊush
(
°dîr
);

83 
	}
}

86 
	$ªgi°î_Áu…_h™dÀrs
()

88 
	`sig«l
(
SIGABRT
, 
Áu…_h™dÀr
);

89 
	`sig«l
(
SIGBUS
, 
Áu…_h™dÀr
);

90 
	`sig«l
(
SIGFPE
, 
Áu…_h™dÀr
);

91 
	`sig«l
(
SIGILL
, 
Áu…_h™dÀr
);

92 
	`sig«l
(
SIGSEGV
, 
Áu…_h™dÀr
);

93 
	}
}

	@lib/fault.h

34 #i‚de‡
FAULT_H


35 
	#FAULT_H
 1

	)

37 
ªgi°î_Áu…_h™dÀrs
();

38 
log_backåa˚
();

	@lib/flow.c

33 
	~<c⁄fig.h
>

34 
	~<sys/ty≥s.h
>

35 
	~"Êow.h
"

36 
	~<öây≥s.h
>

37 
	~<√töë/ö.h
>

38 
	~<°rög.h
>

39 
	~"compûî.h
"

40 
	~"hash.h
"

41 
	~"oÂbuf.h
"

42 
	~"›íÊow/›íÊow.h
"

43 
	~"∑ckës.h
"

45 
	~"vlog.h
"

46 
	#THIS_MODULE
 
VLM_Êow


	)

48 
¨p_ëh_hódî
 *

49 
	$puŒ_¨p
(
oÂbuf
 *
∑ckë
)

51 i‡(
∑ckë
->
size
 >
ARP_ETH_HEADER_LEN
) {

52  
	`oÂbuf_puŒ
(
∑ckë
, 
ARP_ETH_HEADER_LEN
);

54  
NULL
;

55 
	}
}

57 
ù_hódî
 *

58 
	$puŒ_ù
(
oÂbuf
 *
∑ckë
)

60 i‡(
∑ckë
->
size
 >
IP_HEADER_LEN
) {

61 
ù_hódî
 *
ù
 = 
∑ckë
->
d©a
;

62 
ù_Àn
 = 
	`IP_IHL
(
ù
->
ù_ihl_vî
) * 4;

63 i‡(
ù_Àn
 >
IP_HEADER_LEN
 && 
∑ckë
->
size
 >= ip_len) {

64  
	`oÂbuf_puŒ
(
∑ckë
, 
ù_Àn
);

67  
NULL
;

68 
	}
}

70 
t˝_hódî
 *

71 
	$puŒ_t˝
(
oÂbuf
 *
∑ckë
)

73 i‡(
∑ckë
->
size
 >
TCP_HEADER_LEN
) {

74 
t˝_hódî
 *
t˝
 = 
∑ckë
->
d©a
;

75 
t˝_Àn
 = 
	`TCP_OFFSET
(
t˝
->
t˝_˘l
) * 4;

76 i‡(
t˝_Àn
 >
TCP_HEADER_LEN
 && 
∑ckë
->
size
 >=Åcp_len) {

77  
	`oÂbuf_puŒ
(
∑ckë
, 
t˝_Àn
);

80  
NULL
;

81 
	}
}

83 
udp_hódî
 *

84 
	$puŒ_udp
(
oÂbuf
 *
∑ckë
)

86  
	`oÂbuf_åy_puŒ
(
∑ckë
, 
UDP_HEADER_LEN
);

87 
	}
}

89 
icmp_hódî
 *

90 
	$puŒ_icmp
(
oÂbuf
 *
∑ckë
)

92  
	`oÂbuf_åy_puŒ
(
∑ckë
, 
ICMP_HEADER_LEN
);

93 
	}
}

95 
ëh_hódî
 *

96 
	$puŒ_ëh
(
oÂbuf
 *
∑ckë
)

98  
	`oÂbuf_åy_puŒ
(
∑ckë
, 
ETH_HEADER_LEN
);

99 
	}
}

101 
vœn_hódî
 *

102 
	$puŒ_vœn
(
oÂbuf
 *
∑ckë
)

104  
	`oÂbuf_åy_puŒ
(
∑ckë
, 
VLAN_HEADER_LEN
);

105 
	}
}

109 
	$Êow_exåa˘
(
oÂbuf
 *
∑ckë
, 
uöt32_t
 
ö_p‹t
, 
Êow
 *flow)

111 
oÂbuf
 
b
 = *
∑ckë
;

112 
ëh_hódî
 *
ëh
;

113 
ªtvÆ
 = 0;

115 
	`mem£t
(
Êow
, 0,  *flow);

116 
Êow
->
dl_vœn
 = 
	`ht⁄s
(
OFPVID_NONE
);

117 
Êow
->
ö_p‹t
 = 
	`ht⁄l
(in_port);

119 
∑ckë
->
l2
 = 
b
.
d©a
;

120 
∑ckë
->
l3
 = 
NULL
;

121 
∑ckë
->
l4
 = 
NULL
;

122 
∑ckë
->
l7
 = 
NULL
;

124 
ëh
 = 
	`puŒ_ëh
(&
b
);

125 i‡(
ëh
) {

126 i‡(
	`¡ohs
(
ëh
->
ëh_ty≥
) >= 0x600) {

128 
Êow
->
dl_ty≥
 = 
ëh
->
ëh_ty≥
;

131 
Œc_hódî
 *
Œc
 = 
	`oÂbuf_©
(&
b
, 0,  *llc);

132 
¢≠_hódî
 *
¢≠
 = 
	`oÂbuf_©
(&
b
,  *
Œc
,

133  *
¢≠
);

134 i‡(
Œc
 =
NULL
) {

137 i‡(
¢≠


138 && 
Œc
->
Œc_dßp
 =
LLC_DSAP_SNAP


139 && 
Œc
->
Œc_sßp
 =
LLC_SSAP_SNAP


140 && 
Œc
->
Œc_˙é
 =
LLC_CNTL_SNAP


141 && !
	`memcmp
(
¢≠
->
¢≠_‹g
, 
SNAP_ORG_ETHERNET
,

142  
¢≠
->
¢≠_‹g
)) {

143 
Êow
->
dl_ty≥
 = 
¢≠
->
¢≠_ty≥
;

144 
	`oÂbuf_puŒ
(&
b
, 
LLC_SNAP_HEADER_LEN
);

146 
Êow
->
dl_ty≥
 = 
	`ht⁄s
(0x05ff);

147 
	`oÂbuf_puŒ
(&
b
, (
Œc_hódî
));

152 i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_VLAN
)) {

153 
vœn_hódî
 *
vh
 = 
	`puŒ_vœn
(&
b
);

154 i‡(
vh
) {

155 
Êow
->
dl_ty≥
 = 
vh
->
vœn_√xt_ty≥
;

156 
Êow
->
dl_vœn
 = 
vh
->
vœn_tci
 & 
	`ht⁄s
(
VLAN_VID_MASK
);

157 
Êow
->
dl_vœn_p˝
 = (
uöt8_t
)((
	`¡ohs
(
vh
->
vœn_tci
Ë>> 
VLAN_PCP_SHIFT
)

158 & 
VLAN_PCP_BITMASK
);

161 
	`mem˝y
(
Êow
->
dl_§c
, 
ëh
->
ëh_§c
, 
ETH_ADDR_LEN
);

162 
	`mem˝y
(
Êow
->
dl_d°
, 
ëh
->
ëh_d°
, 
ETH_ADDR_LEN
);

164 
∑ckë
->
l3
 = 
b
.
d©a
;

165 i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
)) {

166 c⁄° 
ù_hódî
 *
nh
 = 
	`puŒ_ù
(&
b
);

167 i‡(
nh
) {

168 
Êow
->
nw_tos
 = 
nh
->
ù_tos
 & 0xfc;

169 
Êow
->
nw_¥Ÿo
 = 
nh
->
ù_¥Ÿo
;

170 
Êow
->
nw_§c
 = 
nh
->
ù_§c
;

171 
Êow
->
nw_d°
 = 
nh
->
ù_d°
;

172 
∑ckë
->
l4
 = 
b
.
d©a
;

173 i‡(!
	`IP_IS_FRAGMENT
(
nh
->
ù_‰ag_off
)) {

174 i‡(
Êow
->
nw_¥Ÿo
 =
IP_TYPE_TCP
) {

175 c⁄° 
t˝_hódî
 *
t˝
 = 
	`puŒ_t˝
(&
b
);

176 i‡(
t˝
) {

177 
Êow
->
ç_§c
 = 
t˝
->
t˝_§c
;

178 
Êow
->
ç_d°
 = 
t˝
->
t˝_d°
;

179 
∑ckë
->
l7
 = 
b
.
d©a
;

183 
Êow
->
nw_¥Ÿo
 = 0;

185 } i‡(
Êow
->
nw_¥Ÿo
 =
IP_TYPE_UDP
) {

186 c⁄° 
udp_hódî
 *
udp
 = 
	`puŒ_udp
(&
b
);

187 i‡(
udp
) {

188 
Êow
->
ç_§c
 = 
udp
->
udp_§c
;

189 
Êow
->
ç_d°
 = 
udp
->
udp_d°
;

190 
∑ckë
->
l7
 = 
b
.
d©a
;

194 
Êow
->
nw_¥Ÿo
 = 0;

196 } i‡(
Êow
->
nw_¥Ÿo
 =
IP_TYPE_ICMP
) {

197 c⁄° 
icmp_hódî
 *
icmp
 = 
	`puŒ_icmp
(&
b
);

198 i‡(
icmp
) {

199 
Êow
->
ç_§c
 = 
	`ht⁄s
(
icmp
->
icmp_ty≥
);

200 
Êow
->
ç_d°
 = 
	`ht⁄s
(
icmp
->
icmp_code
);

201 
∑ckë
->
l7
 = 
b
.
d©a
;

205 
Êow
->
nw_¥Ÿo
 = 0;

209 
ªtvÆ
 = 1;

212 } i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_ARP
)) {

213 
¨p_ëh_hódî
 *
¨p
 = 
	`puŒ_¨p
(&
b
);

214 i‡(
¨p
) {

215 i‡(
¨p
->
¨_¥o
 =
	`ht⁄s
(
ARP_PRO_IP
Ë&&áΩ->
¨_∂n
 =
IP_ADDR_LEN
) {

216 
Êow
->
nw_§c
 = 
¨p
->
¨_•a
;

217 
Êow
->
nw_d°
 = 
¨p
->
¨_ça
;

219 
Êow
->
nw_¥Ÿo
 = 
	`¡ohs
(
¨p
->
¨_›
) & 0xff;

223  
ªtvÆ
;

224 
	}
}

227 
	$Êow_¥öt
(
FILE
 *
°ªam
, c⁄° 
Êow
 *flow)

229 
	`Ârötf
(
°ªam
,

230 "p‹à%04x vœn-vid %04x vœn-p˝ %02x src-ma¯"
ETH_ADDR_FMT
" "

231 "d°-ma¯"
ETH_ADDR_FMT
" frm-type %04x ip-tos %02x ip-proto %02x "

232 "§c-ù "
IP_FMT
" dst-ip "IP_FMT"Åp-src %dÅp-dst %d",

233 
	`¡ohs
(
Êow
->
ö_p‹t
),Çtohs(Êow->
dl_vœn
), flow->
dl_vœn_p˝
,

234 
	`ETH_ADDR_ARGS
(
Êow
->
dl_§c
), ETH_ADDR_ARGS(Êow->
dl_d°
),

235 
	`¡ohs
(
Êow
->
dl_ty≥
),

236 
Êow
->
nw_tos
, flow->
nw_¥Ÿo
,

237 
	`IP_ARGS
(&
Êow
->
nw_§c
), IP_ARGS(&Êow->
nw_d°
),

238 
	`¡ohs
(
Êow
->
ç_§c
),Çtohs(Êow->
ç_d°
));

239 
	}
}

	@lib/flow.h

33 #i‚de‡
FLOW_H


34 
	#FLOW_H
 1

	)

36 
	~<°dboﬁ.h
>

37 
	~<°döt.h
>

38 
	~<°rög.h
>

39 
	~"hash.h
"

40 
	~"utû.h
"

42 
	goÂ_m©ch
;

43 
	goÂbuf
;

49 
	sÊow
 {

50 
uöt32_t
 
	mnw_§c
;

51 
uöt32_t
 
	mnw_d°
;

52 
uöt32_t
 
	mö_p‹t
;

53 
uöt16_t
 
	mdl_vœn
;

54 
uöt16_t
 
	mdl_ty≥
;

55 
uöt16_t
 
	mç_§c
;

56 
uöt16_t
 
	mç_d°
;

57 
uöt8_t
 
	mdl_§c
[6];

58 
uöt8_t
 
	mdl_d°
[6];

59 
uöt8_t
 
	mdl_vœn_p˝
;

60 
uöt8_t
 
	mnw_tos
;

61 
uöt8_t
 
	mnw_¥Ÿo
;

62 
uöt8_t
 
	m∑d
[5];

64 
BUILD_ASSERT_DECL
((
Êow
) == 40);

66 
Êow_exåa˘
(
oÂbuf
 *, 
uöt32_t
 
ö_p‹t
, 
Êow
 *);

68 
Êow_¥öt
(
FILE
 *, c⁄° 
Êow
 *);

69 
ölöe
 
Êow_com∑ª
(c⁄° 
Êow
 *, const flow *);

70 
ölöe
 
boﬁ
 
Êow_equÆ
(c⁄° 
Êow
 *, const flow *);

71 
ölöe
 
size_t
 
Êow_hash
(c⁄° 
Êow
 *, 
uöt32_t
 
basis
);

73 
ölöe
 

74 
	$Êow_com∑ª
(c⁄° 
Êow
 *
a
, c⁄° Êow *
b
)

76  
	`memcmp
(
a
, 
b
,  *a);

77 
	}
}

79 
ölöe
 
boﬁ


80 
	$Êow_equÆ
(c⁄° 
Êow
 *
a
, c⁄° Êow *
b
)

82  !
	`Êow_com∑ª
(
a
, 
b
);

83 
	}
}

85 
ölöe
 
size_t


86 
	$Êow_hash
(c⁄° 
Êow
 *Êow, 
uöt32_t
 
basis
)

88 
	`BUILD_ASSERT_DECL
(!( *
Êow
 % (
uöt32_t
)));

89  
	`hash_w‹ds
((c⁄° 
uöt32_t
 *Ë
Êow
,

90  *
Êow
 / (
uöt32_t
), 
basis
);

91 
	}
}

	@lib/hash.c

16 
	~"hash.h
"

17 
	~<°rög.h
>

21 
uöt32_t


22 
	$hash_w‹ds
(c⁄° 
uöt32_t
 *
p
, 
size_t
 
n
, uöt32_à
basis
)

24 
uöt32_t
 
a
, 
b
, 
c
;

26 
a
 = 
b
 = 
c
 = 0xdódbì‡+ (((
uöt32_t
Ë
n
Ë<< 2Ë+ 
basis
;

28 
n
 > 3) {

29 
a
 +
p
[0];

30 
b
 +
p
[1];

31 
c
 +
p
[2];

32 
	`HASH_MIX
(
a
, 
b
, 
c
);

33 
n
 -= 3;

34 
p
 += 3;

37 
n
) {

39 
c
 +
p
[2];

42 
b
 +
p
[1];

45 
a
 +
p
[0];

46 
	`HASH_FINAL
(
a
, 
b
, 
c
);

51  
c
;

52 
	}
}

55 
uöt32_t


56 
	$hash_3w‹ds
(
uöt32_t
 
a
, uöt32_à
b
, uöt32_à
c
)

58 
a
 += 0xdeadbeef;

59 
b
 += 0xdeadbeef;

60 
c
 += 0xdeadbeef;

61 
	`HASH_FINAL
(
a
, 
b
, 
c
);

62  
c
;

63 
	}
}

66 
uöt32_t


67 
	$hash_2w‹ds
(
uöt32_t
 
a
, uöt32_à
b
)

69  
	`hash_3w‹ds
(
a
, 
b
, 0);

70 
	}
}

73 
uöt32_t


74 
	$hash_byãs
(c⁄° *
p_
, 
size_t
 
n
, 
uöt32_t
 
basis
)

76 c⁄° 
uöt8_t
 *
p
 = 
p_
;

77 
uöt32_t
 
a
, 
b
, 
c
;

78 
uöt32_t
 
tmp
[3];

80 
a
 = 
b
 = 
c
 = 0xdódbì‡+ 
n
 + 
basis
;

82 
n
 > 
tmp
) {

83 
	`mem˝y
(
tmp
, 
p
, Åmp);

84 
a
 +
tmp
[0];

85 
b
 +
tmp
[1];

86 
c
 +
tmp
[2];

87 
	`HASH_MIX
(
a
, 
b
, 
c
);

88 
n
 - 
tmp
;

89 
p
 + 
tmp
;

92 i‡(
n
) {

93 
tmp
[0] =Åmp[1] =Åmp[2] = 0;

94 
	`mem˝y
(
tmp
, 
p
, 
n
);

95 
a
 +
tmp
[0];

96 
b
 +
tmp
[1];

97 
c
 +
tmp
[2];

98 
	`HASH_FINAL
(
a
, 
b
, 
c
);

101  
c
;

102 
	}
}

	@lib/hash.h

16 #i‚de‡
HASH_H


17 
	#HASH_H
 1

	)

19 
	~<°dboﬁ.h
>

20 
	~<°ddef.h
>

21 
	~<°döt.h
>

22 
	~<°rög.h
>

23 
	~"utû.h
"

28 
	#HASH_ROT
(
x
, 
k
Ë(((xË<< (k)Ë| ((xË>> (32 - (k))))

	)

30 
	#HASH_MIX
(
a
, 
b
, 
c
) \

32 
a
 -
c
;á ^
	`HASH_ROT
(c, 4); c +
b
; \

33 
b
 -
a
; b ^
	`HASH_ROT
◊, 6);á +
c
; \

34 
c
 -
b
; c ^
	`HASH_ROT
(b, 8); b +
a
; \

35 
a
 -
c
;á ^
	`HASH_ROT
(c, 16); c +
b
; \

36 
b
 -
a
; b ^
	`HASH_ROT
◊, 19);á +
c
; \

37 
c
 -
b
; c ^
	`HASH_ROT
(b, 4); b +
a
; \

38 } 0)

	)

40 
	#HASH_FINAL
(
a
, 
b
, 
c
) \

42 
c
 ^
b
; c -
	`HASH_ROT
(b, 14); \

43 
a
 ^
c
;á -
	`HASH_ROT
(c, 11); \

44 
b
 ^
a
; b -
	`HASH_ROT
(a, 25); \

45 
c
 ^
b
; c -
	`HASH_ROT
(b, 16); \

46 
a
 ^
c
;á -
	`HASH_ROT
(c, 4); \

47 
b
 ^
a
; b -
	`HASH_ROT
(a, 14); \

48 
c
 ^
b
; c -
	`HASH_ROT
(b, 24); \

49 } 0)

	)

51 
uöt32_t
 
hash_w‹ds
(c⁄° uöt32_à*, 
size_t
 
n_w‹d
, uöt32_à
basis
);

52 
uöt32_t
 
hash_2w‹ds
(uint32_t, uint32_t);

53 
uöt32_t
 
hash_3w‹ds
(uint32_t, uint32_t, uint32_t);

54 
uöt32_t
 
hash_byãs
(c⁄° *, 
size_t
 
n_byãs
, uöt32_à
basis
);

56 
ölöe
 
uöt32_t
 
	$hash_°rög
(c⁄° *
s
, 
uöt32_t
 
basis
)

58  
	`hash_byãs
(
s
, 
	`°æí
(s), 
basis
);

59 
	}
}

67 
ölöe
 
uöt32_t
 
	$hash_öt
(
uöt32_t
 
x
, uöt32_à
basis
)

69 
x
 -= x << 6;

70 
x
 ^= x >> 17;

71 
x
 -= x << 9;

72 
x
 ^= x << 4;

73 
x
 +
basis
;

74 
x
 -= x << 3;

75 
x
 ^= x << 10;

76 
x
 ^= x >> 15;

77  
x
;

78 
	}
}

80 
ölöe
 
uöt32_t
 
	$hash_doubÀ
(
x
, 
uöt32_t
 
basis
)

82 
uöt32_t
 
vÆue
[2];

83 
	`BUILD_ASSERT_DECL
( 
x
 = 
vÆue
);

85 
	`mem˝y
(
vÆue
, &
x
,  value);

86  
	`hash_3w‹ds
(
vÆue
[0], vÆue[1], 
basis
);

87 
	}
}

89 
ölöe
 
uöt32_t
 
	$hash_poöãr
(c⁄° *
p
, 
uöt32_t
 
basis
)

99  
	`hash_öt
((
uöt32_t
Ë(
uöçå_t
Ë
p
, 
basis
);

100 
	}
}

	@lib/hmap.c

34 
	~<c⁄fig.h
>

35 
	~"hm≠.h
"

36 
	~<as£π.h
>

37 
	~<°döt.h
>

38 
	~"utû.h
"

42 
	$hm≠_öô
(
hm≠
 *hmap)

44 
hm≠
->
buckës
 = &hm≠->
⁄e
;

45 
hm≠
->
⁄e
 = 
NULL
;

46 
hm≠
->
mask
 = 0;

47 
hm≠
->
n
 = 0;

48 
	}
}

53 
	$hm≠_de°roy
(
hm≠
 *hmap)

55 i‡(
hm≠
 && hm≠->
buckës
 !&hm≠->
⁄e
) {

56 
	`‰ì
(
hm≠
->
buckës
);

58 
	}
}

62 
	$hm≠_sw≠
(
hm≠
 *
a
, hm≠ *
b
)

64 
hm≠
 
tmp
 = *
a
;

65 *
a
 = *
b
;

66 *
b
 = 
tmp
;

67 i‡(
a
->
buckës
 =&
b
->
⁄e
) {

68 
a
->
buckës
 = &a->
⁄e
;

70 i‡(
b
->
buckës
 =&
a
->
⁄e
) {

71 
b
->
buckës
 = &b->
⁄e
;

73 
	}
}

76 
	$ªsize
(
hm≠
 *hm≠, 
size_t
 
√w_mask
)

78 
hm≠
 
tmp
;

79 
size_t
 
i
;

81 
	`as£π
(!(
√w_mask
 & (new_mask + 1)));

82 
	`as£π
(
√w_mask
 !
SIZE_MAX
);

84 
	`hm≠_öô
(&
tmp
);

85 i‡(
√w_mask
) {

86 
tmp
.
buckës
 = 
	`xmÆloc
( *tmp.buckë†* (
√w_mask
 + 1));

87 
tmp
.
mask
 = 
√w_mask
;

88 
i
 = 0; i <
tmp
.
mask
; i++) {

89 
tmp
.
buckës
[
i
] = 
NULL
;

92 
i
 = 0; i <
hm≠
->
mask
; i++) {

93 
hm≠_node
 *
node
, *
√xt
;

94 
node
 = 
hm≠
->
buckës
[
i
];Çode;Çodê
√xt
) {

95 
√xt
 = 
node
->next;

96 
	`hm≠_ö£π_Á°
(&
tmp
, 
node
,Çode->
hash
);

99 
	`hm≠_sw≠
(
hm≠
, &
tmp
);

100 
	`hm≠_de°roy
(&
tmp
);

101 
	}
}

103 
size_t


104 
	$ˇlc_mask
(
size_t
 
ˇ∑côy
)

106 
size_t
 
mask
 = 
ˇ∑côy
 / 2;

107 
mask
 |= mask >> 1;

108 
mask
 |= mask >> 2;

109 
mask
 |= mask >> 4;

110 
mask
 |= mask >> 8;

111 
mask
 |= mask >> 16;

112 #i‡
SIZE_MAX
 > 
UINT32_MAX


113 
mask
 |= mask >> 32;

118 
mask
 |= (mask & 1) << 1;

120  
mask
;

121 
	}
}

125 
	$hm≠_ex∑nd
(
hm≠
 *hmap)

127 
size_t
 
√w_mask
 = 
	`ˇlc_mask
(
hm≠
->
n
);

128 i‡(
√w_mask
 > 
hm≠
->
mask
) {

129 
	`ªsize
(
hm≠
, 
√w_mask
);

131 
	}
}

135 
	$hm≠_shrök
(
hm≠
 *hmap)

137 
size_t
 
√w_mask
 = 
	`ˇlc_mask
(
hm≠
->
n
);

138 i‡(
√w_mask
 < 
hm≠
->
mask
) {

139 
	`ªsize
(
hm≠
, 
√w_mask
);

141 
	}
}

143 
	$hm≠_ªmove_™d_shrök
(
hm≠
 *hm≠, 
hm≠_node
 *
node
){

144 
	`hm≠_ªmove
(
hm≠
, 
node
);

146 
	}
}

152 
	$hm≠_ª£rve
(
hm≠
 *hm≠, 
size_t
 
n
)

154 
size_t
 
√w_mask
 = 
	`ˇlc_mask
(
n
);

155 i‡(
√w_mask
 > 
hm≠
->
mask
) {

156 
	`ªsize
(
hm≠
, 
√w_mask
);

158 
	}
}

	@lib/hmap.h

34 #i‚de‡
HMAP_H


35 
	#HMAP_H
 1

	)

37 
	~<°dboﬁ.h
>

38 
	~<°dlib.h
>

39 
	~"utû.h
"

42 
	shm≠_node
 {

43 
size_t
 
	mhash
;

44 
hm≠_node
 *
	m√xt
;

48 
ölöe
 
size_t
 
	$hm≠_node_hash
(c⁄° 
hm≠_node
 *
node
)

50  
node
->
hash
;

51 
	}
}

54 
	shm≠
 {

55 
hm≠_node
 **
	mbuckës
;

56 
hm≠_node
 *
	m⁄e
;

57 
size_t
 
	mmask
;

58 
size_t
 
	mn
;

62 
	#HMAP_INITIALIZER
(
HMAP
Ë{ &(HMAP)->
⁄e
, 
NULL
, 0, 0 }

	)

64 
	#HMAP_NODE_NULL
 ((
hm≠_node
 *Ë1)

	)

65 
	#HMAP_NODE_NULL_INITIALIZER
 { 0, 
HMAP_NODE_NULL
 }

	)

69 
hm≠_öô
(
hm≠
 *);

70 
hm≠_de°roy
(
hm≠
 *);

71 
hm≠_sw≠
(
hm≠
 *
a
, hm≠ *
b
);

72 
ölöe
 
size_t
 
hm≠_cou¡
(c⁄° 
hm≠
 *);

73 
ölöe
 
boﬁ
 
hm≠_is_em±y
(c⁄° 
hm≠
 *);

76 
hm≠_ex∑nd
(
hm≠
 *);

77 
hm≠_shrök
(
hm≠
 *);

78 
hm≠_ª£rve
(
hm≠
 *, 
size_t
 
ˇ∑côy
);

81 
ölöe
 
hm≠_ö£π_Á°
(
hm≠
 *,

82 
hm≠_node
 *, 
size_t
 
hash
);

83 
ölöe
 
hm≠_ö£π
(
hm≠
 *, 
hm≠_node
 *, 
size_t
 
hash
);

84 
ölöe
 
hm≠_ªmove
(
hm≠
 *, 
hm≠_node
 *);

85 
hm≠_ªmove_™d_shrök
(
hm≠
 *hm≠, 
hm≠_node
 *
node
);

88 
	#HMAP_FOR_EACH_WITH_HASH
(
NODE
, 
STRUCT
, 
MEMBER
, 
HASH
, 
HMAP
) \

89 (
NODE
Ë
	`CONTAINER_OF
(
	`hm≠_fú°_wôh_hash
(
HMAP
, 
HASH
), \

90 
STRUCT
, 
MEMBER
); \

91 &(
NODE
)->
MEMBER
 !
NULL
; \

92 (
NODE
Ë
	`CONTAINER_OF
(
	`hm≠_√xt_wôh_hash
(&(NODE)->
MEMBER
), \

93 
STRUCT
, 
MEMBER
))

	)

95 
ölöe
 
hm≠_node
 *
hm≠_fú°_wôh_hash
(c⁄° 
hm≠
 *,

96 
size_t
 
hash
);

97 
ölöe
 
hm≠_node
 *
hm≠_√xt_wôh_hash
(const hmap_node *);

104 
	#HMAP_FOR_EACH
(
NODE
, 
STRUCT
, 
MEMBER
, 
HMAP
) \

105 (
NODE
Ë
	`CONTAINER_OF
(
	`hm≠_fú°
(
HMAP
), 
STRUCT
, 
MEMBER
); \

106 &(
NODE
)->
MEMBER
 !
NULL
; \

107 (
NODE
Ë
	`CONTAINER_OF
(
	`hm≠_√xt
(
HMAP
, &(NODE)->
MEMBER
), \

108 
STRUCT
, 
MEMBER
))

	)

110 
	#HMAP_FOR_EACH_SAFE
(
NODE
, 
NEXT
, 
STRUCT
, 
MEMBER
, 
HMAP
) \

111 (
NODE
Ë
	`CONTAINER_OF
(
	`hm≠_fú°
(
HMAP
), 
STRUCT
, 
MEMBER
); \

112 (&(
NODE
)->
MEMBER
 !
NULL
 \

113 ? (
NEXT
Ë
	`CONTAINER_OF
(
	`hm≠_√xt
(
HMAP
, &(
NODE
)->
MEMBER
), \

114 
STRUCT
, 
MEMBER
), 1 \

116 (
NODE
Ë(
NEXT
))

	)

118 
ölöe
 
hm≠_node
 *
hm≠_fú°
(c⁄° 
hm≠
 *);

119 
ölöe
 
hm≠_node
 *
hm≠_√xt
(c⁄° 
hm≠
 *,

120 c⁄° 
hm≠_node
 *);

123 
ölöe
 
size_t


124 
	$hm≠_cou¡
(c⁄° 
hm≠
 *hmap)

126  
hm≠
->
n
;

127 
	}
}

131 
ölöe
 
boﬁ


132 
	$hm≠_is_em±y
(c⁄° 
hm≠
 *hmap)

134  
hm≠
->
n
 == 0;

135 
	}
}

139 
ölöe
 

140 
	$hm≠_ö£π_Á°
(
hm≠
 *hm≠, 
hm≠_node
 *
node
, 
size_t
 
hash
)

142 
hm≠_node
 **
buckë
 = &
hm≠
->
buckës
[
hash
 & hm≠->
mask
];

143 
node
->
hash
 = hash;

144 
node
->
√xt
 = *
buckë
;

145 *
buckë
 = 
node
;

146 
hm≠
->
n
++;

147 
	}
}

151 
ölöe
 

152 
	$hm≠_ö£π
(
hm≠
 *hm≠, 
hm≠_node
 *
node
, 
size_t
 
hash
)

154 
	`hm≠_ö£π_Á°
(
hm≠
, 
node
, 
hash
);

155 i‡(
hm≠
->
n
 / 2 > hm≠->
mask
) {

156 
	`hm≠_ex∑nd
(
hm≠
);

158 
	}
}

162 
ölöe
 

163 
	$hm≠_ªmove
(
hm≠
 *hm≠, 
hm≠_node
 *
node
)

165 
hm≠_node
 **
buckë
 = &
hm≠
->
buckës
[
node
->
hash
 & hm≠->
mask
];

166 *
buckë
 !
node
) {

167 
buckë
 = &(*buckë)->
√xt
;

169 *
buckë
 = 
node
->
√xt
;

170 
hm≠
->
n
--;

171 
	}
}

173 
ölöe
 
hm≠_node
 *

174 
	$hm≠_√xt_wôh_hash__
(c⁄° 
hm≠_node
 *
node
, 
size_t
 
hash
)

176 
node
 !
NULL
 &&Çode->
hash
 != hash) {

177 
node
 =Çode->
√xt
;

179  (
hm≠_node
 *Ë
node
;

180 
	}
}

184 
ölöe
 
hm≠_node
 *

185 
	$hm≠_fú°_wôh_hash
(c⁄° 
hm≠
 *hm≠, 
size_t
 
hash
)

187  
	`hm≠_√xt_wôh_hash__
(
hm≠
->
buckës
[
hash
 & hm≠->
mask
], hash);

188 
	}
}

198 
ölöe
 
hm≠_node
 *

199 
	$hm≠_√xt_wôh_hash
(c⁄° 
hm≠_node
 *
node
)

201  
	`hm≠_√xt_wôh_hash__
(
node
->
√xt
,Çode->
hash
);

202 
	}
}

204 
ölöe
 
hm≠_node
 *

205 
	$hm≠_√xt__
(c⁄° 
hm≠
 *hm≠, 
size_t
 
°¨t
)

207 
size_t
 
i
;

208 
i
 = 
°¨t
; i <
hm≠
->
mask
; i++) {

209 
hm≠_node
 *
node
 = 
hm≠
->
buckës
[
i
];

210 i‡(
node
) {

211  
node
;

214  
NULL
;

215 
	}
}

219 
ölöe
 
hm≠_node
 *

220 
	$hm≠_fú°
(c⁄° 
hm≠
 *hmap)

222  
	`hm≠_√xt__
(
hm≠
, 0);

223 
	}
}

232 
ölöe
 
hm≠_node
 *

233 
	$hm≠_√xt
(c⁄° 
hm≠
 *hm≠, c⁄° 
hm≠_node
 *
node
)

235  (
node
->
√xt


236 ? 
node
->
√xt


237 : 
	`hm≠_√xt__
(
hm≠
, (
node
->
hash
 & hm≠->
mask
) + 1));

238 
	}
}

	@lib/ipv6_util.c

1 
	~"ùv6_utû.h
"

3 c⁄° 
ö6_addr
 
	gö6addr_exa˘
 = 
IN6ADDR_EXACT_INIT
;

5 c⁄° 
ö6_addr
 
	gö6addr_zîo
 = 
IN6ADDR_ZERO_INIT
;

11 
	$lookup_ùv6
(c⁄° *
ho°_«me
, 
ö6_addr
 *
addr
)

13 i‡(
	`öë_±⁄
(
AF_INET6
, 
ho°_«me
, 
addr
) != 1) {

14 
	`¥ötf
("%†i†nŸá vÆid IPv6áddªs†\n", 
ho°_«me
);

15  
ENOENT
;

18 
	}
}

23 
ö6_addr


24 
	$ùv6_¸óã_mask
(
mask
)

26 
ö6_addr
 
√tmask
;

27 
uöt8_t
 *
√tmaskp
 = &
√tmask
.
s6_addr
[0];

29 
	`mem£t
(&
√tmask
, 0, Çetmask);

30 
mask
 > 8) {

31 *
√tmaskp
 = 0xff;

32 
√tmaskp
++;

33 
mask
 -= 8;

36 i‡(
mask
) {

37 *
√tmaskp
 = 0xf‡<< (8 - 
mask
);

40  
√tmask
;

41 
	}
}

44 
ö6_addr
 
	$ùv6_addr_bô™d
(c⁄° 
ö6_addr
 *
a
,

45 c⁄° 
ö6_addr
 *
b
)

47 
i
;

48 
ö6_addr
 
d°
;

50 #ifde‡
s6_addr32


51 
i
=0; i<4; i++) {

52 
d°
.
s6_addr32
[
i
] = 
a
->s6_addr32[i] & 
b
->s6_addr32[i];

55 
i
=0; i<16; i++) {

56 
d°
.
s6_addr
[
i
] = 
a
->s6_addr[i] & 
b
->s6_addr[i];

60  
d°
;

61 
	}
}

65 
	$°r_to_ùv6
(c⁄° *
°r_
, 
ö6_addr
 *
addΩ
, ö6_add∏*
maskp
)

68 *
°r
 = 
	`x°rdup
(
°r_
);

69 *
ßve_±r
 = 
NULL
;

70 c⁄° *
«me
, *
√tmask
;

71 
ö6_addr
 
addr
;

72 
ªtvÆ
;

74 
«me
 = 
	`°πok_r
(
°r
, "/", &
ßve_±r
);

75 
ªtvÆ
 = 
«me
 ? 
	`lookup_ùv6
“ame, &
addr
Ë: 
EINVAL
;

76 i‡(
ªtvÆ
) {

77 
	`¥ötf
("%s: couldÇŸ c⁄vîàtÿIPv6áddªss\n", 
°r
);

81 
√tmask
 = 
	`°πok_r
(
NULL
, "/", &
ßve_±r
);

82 i‡(
√tmask
) {

83 
¥efix
 = 
	`©oi
(
√tmask
);

84 i‡(
¥efix
 <= 0 ||Örefix > 128) {

85 
	`¥ötf
("%s:ÇetworkÖrefix bitsÇot between 1ánd 128\n",

86 
°r
);

89 *
maskp
 = 
	`ùv6_¸óã_mask
(
¥efix
);

90 *
addΩ
 = 
	`ùv6_addr_bô™d
(&
addr
, &
ö6addr_exa˘
);

94 *
maskp
 = 
ö6addr_zîo
 ;

95 *
addΩ
 = 
	`ùv6_addr_bô™d
(&
addr
, &
ö6addr_exa˘
);

98 
	`‰ì
(
°r
);

100 
	}
}

	@lib/ipv6_util.h

1 #i‚de‡
IPV6_UTIL_H


2 
	#IPV6_UTIL_H
 1

	)

4 
	~<¨∑/öë.h
>

5 
	~<î∫o.h
>

6 
	~<f˙é.h
>

7 
	~<√tdb.h
>

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<sys/ªsour˚.h
>

12 
	~<sys/sockë.h
>

13 
	~<sys/°©.h
>

14 
	~<sys/un.h
>

15 
	~"utû.h
"

16 
	~<uni°d.h
>

19 
	#IN6ADDR_EXACT_INIT
 { { { 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, \

20 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf‡} } }

	)

22 
	#IN6ADDR_ZERO_INIT
 { { { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, \

23 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 } } }

	)

25 c⁄° 
ö6_addr
 
ö6addr_exa˘
;

27 
ölöe
 
boﬁ
 
	$ùv6_addr_equÆs
(c⁄° 
ö6_addr
 *
a
,

28 c⁄° 
ö6_addr
 *
b
)

30 #ifde‡
IN6_ARE_ADDR_EQUAL


31  
	`IN6_ARE_ADDR_EQUAL
(
a
, 
b
);

33  !
	`memcmp
(
a
, 
b
, (*a));

35 
	}
}

37 
ölöe
 
boﬁ
 
	$ùv6_mask_is_exa˘
(c⁄° 
ö6_addr
 *
mask
) {

38  
	`ùv6_addr_equÆs
(
mask
, &
ö6addr_exa˘
);

39 
	}
}

42 
°r_to_ùv6
(c⁄° *
°r_
, 
ö6_addr
 *
addΩ
, ö6_add∏*
maskp
);

	@lib/leak-checker.c

34 
	~<c⁄fig.h
>

35 
	~"Àak-checkî.h
"

36 
	~<öây≥s.h
>

37 
	~"backåa˚.h
"

39 
	#LOG_MODULE
 
VLM_Àak_checkî


	)

40 
	~"vlog.h
"

42 #i‚de‡
HAVE_MALLOC_HOOKS


44 
	$Àak_checkî_°¨t
(c⁄° *
fûe_«me
 
UNUSED
)

46 
	`VLOG_WARN
(
LOG_MODULE
, "notÉnablingÜeak checker becauseÅheÜibc in use doesÇot "

48 
	}
}

51 
	$Àak_checkî_£t_limô
(
off_t
 
max_size
 
UNUSED
)

53 
	}
}

56 
	$Àak_checkî_˛aim
(c⁄° *
p
 
UNUSED
)

58 
	}
}

61 
	$Àak_checkî_ußge
()

63 
	`¥ötf
(" --check-leaks=FILE (accepted but ignored inÅhis build)\n");

64 
	}
}

66 
	~<î∫o.h
>

67 
	~<f˙é.h
>

68 
	~<mÆloc.h
>

69 
	~<sys/°©.h
>

71 *
	tmÆloc_hook_ty≥
(
	tsize_t
, const *);

72 *
	tªÆloc_hook_ty≥
(*, 
	tsize_t
, const *);

73 
	t‰ì_hook_ty≥
(*, const *);

75 
	shooks
 {

76 
mÆloc_hook_ty≥
 *
	mmÆloc_hook_func
;

77 
ªÆloc_hook_ty≥
 *
	mªÆloc_hook_func
;

78 
‰ì_hook_ty≥
 *
	m‰ì_hook_func
;

81 
mÆloc_hook_ty≥
 
	ghook_mÆloc
;

82 
ªÆloc_hook_ty≥
 
	ghook_ªÆloc
;

83 
‰ì_hook_ty≥
 
	ghook_‰ì
;

85 
hooks
 
	glibc_hooks
;

86 c⁄° 
hooks
 
	gour_hooks
 = { 
hook_mÆloc
, 
hook_ªÆloc
, 
hook_‰ì
 };

88 
FILE
 *
	gfûe
;

89 
off_t
 
	glimô
 = 10 * 1000 * 1000;

92 
	$gë_hooks
(
hooks
 *hooks)

94 
hooks
->
mÆloc_hook_func
 = 
__mÆloc_hook
;

95 
hooks
->
ªÆloc_hook_func
 = 
__ªÆloc_hook
;

96 
hooks
->
‰ì_hook_func
 = 
__‰ì_hook
;

97 
	}
}

100 
	$£t_hooks
(c⁄° 
hooks
 *hooks)

102 
__mÆloc_hook
 = 
hooks
->
mÆloc_hook_func
;

103 
__ªÆloc_hook
 = 
hooks
->
ªÆloc_hook_func
;

104 
__‰ì_hook
 = 
hooks
->
‰ì_hook_func
;

105 
	}
}

108 
	$Àak_checkî_°¨t
(c⁄° *
fûe_«me
)

110 i‡(!
fûe
) {

111 
fûe
 = 
	`f›í
(
fûe_«me
, "w");

112 i‡(!
fûe
) {

113 
	`VLOG_WARN
(
LOG_MODULE
, "failedÅo create \"%s\": %s",

114 
fûe_«me
, 
	`°ªº‹
(
î∫o
));

117 
	`£tvbuf
(
fûe
, 
NULL
, 
_IONBF
, 0);

118 
	`VLOG_WARN
(
LOG_MODULE
, "íabÀd mem‹yÜókÜoggögÅÿ\"%s\"", 
fûe_«me
);

119 
	`gë_hooks
(&
libc_hooks
);

120 
	`£t_hooks
(&
our_hooks
);

122 
	}
}

125 
	$Àak_checkî_°›
()

127 i‡(
fûe
) {

128 
	`f˛o£
(
fûe
);

129 
fûe
 = 
NULL
;

130 
	`£t_hooks
(&
libc_hooks
);

131 
	`VLOG_WARN
(
LOG_MODULE
, "disabled memoryÜeakÜogging");

133 
	}
}

136 
	$Àak_checkî_£t_limô
(
off_t
 
limô_
)

138 
limô
 = 
limô_
;

139 
	}
}

142 
	$Àak_checkî_ußge
()

144 
	`¥ötf
(" --check-leaks=FILEÜog mallocánd free callsÅo FILE\n");

145 
	}
}

147 
	$PRINTF_FORMAT
(1, 2)

148 
	$log_ˇŒîs
(c⁄° *
f‹m©
, ...)

150 
backåa˚
 backtrace;

151 
va_li°
 
¨gs
;

152 
i
;

154 
	`va_°¨t
(
¨gs
, 
f‹m©
);

155 
	`vÂrötf
(
fûe
, 
f‹m©
, 
¨gs
);

156 
	`va_íd
(
¨gs
);

158 
	`putc
(':', 
fûe
);

159 
	`backåa˚_ˇ±uª
(&
backåa˚
);

160 
i
 = 0; i < 
backåa˚
.
n_‰ames
; i++) {

161 
	`Ârötf
(
fûe
, " 0x%"
PRIxPTR
"", 
backåa˚
.
‰ames
[
i
]);

163 
	`putc
('\n', 
fûe
);

164 
	}
}

167 
	$ª£t_hooks
()

169 
cou¡
;

171 i‡(
cou¡
++ >100 && 
limô
 && 
fûe
) {

172 
°©
 
s
;

173 
cou¡
 = 0;

174 i‡(
	`f°©
(
	`fûío
(
fûe
), &
s
) < 0) {

175 
	`VLOG_WARN
(
LOG_MODULE
, "cannot fstatÜeak checkerÜog file: %s",

176 
	`°ªº‹
(
î∫o
));

179 i‡(
s
.
°_size
 > 
limô
) {

180 
	`VLOG_WARN
(
LOG_MODULE
, "leak checkerÜog file sizeÉxceededÜimit");

181 
	`Àak_checkî_°›
();

185 i‡(
fûe
) {

186 
	`£t_hooks
(&
our_hooks
);

188 
	}
}

191 
	$hook_mÆloc
(
size_t
 
size
, c⁄° *
ˇŒî
 
UNUSED
)

193 *
p
;

195 
	`£t_hooks
(&
libc_hooks
);

196 
p
 = 
	`mÆloc
(
size
);

197 
	`gë_hooks
(&
libc_hooks
);

199 
	`log_ˇŒîs
("mÆloc(%zuË-> %p", 
size
, 
p
);

201 
	`ª£t_hooks
();

202  
p
;

203 
	}
}

206 
	$Àak_checkî_˛aim
(c⁄° *
p
)

208 i‡(!
fûe
) {

212 i‡(
p
) {

213 
	`£t_hooks
(&
libc_hooks
);

214 
	`log_ˇŒîs
("˛aim(%p)", 
p
);

215 
	`ª£t_hooks
();

217 
	}
}

220 
	$hook_‰ì
(*
p
, c⁄° *
ˇŒî
 
UNUSED
)

222 i‡(!
p
) {

226 
	`£t_hooks
(&
libc_hooks
);

227 
	`‰ì
(
p
);

228 
	`gë_hooks
(&
libc_hooks
);

230 
	`log_ˇŒîs
("‰ì(%p)", 
p
);

232 
	`ª£t_hooks
();

233 
	}
}

236 
	$hook_ªÆloc
(*
p
, 
size_t
 
size
, c⁄° *
ˇŒî
 
UNUSED
)

238 *
q
;

240 
	`£t_hooks
(&
libc_hooks
);

241 
q
 = 
	`ªÆloc
(
p
, 
size
);

242 
	`gë_hooks
(&
libc_hooks
);

244 i‡(
p
 !
q
) {

245 
	`log_ˇŒîs
("ªÆloc(%p, %zuË-> %p", 
p
, 
size
, 
q
);

248 
	`ª£t_hooks
();

250  
q
;

251 
	}
}

	@lib/leak-checker.h

34 #i‚de‡
LEAK_CHECKER_H


35 
	#LEAK_CHECKER_H
 1

	)

37 
	~<sys/ty≥s.h
>

39 
	#LEAK_CHECKER_OPTION_ENUMS
 \

40 
OPT_CHECK_LEAKS
, \

41 
OPT_LEAK_LIMIT


	)

42 
	#LEAK_CHECKER_LONG_OPTIONS
 \

43 {"check-Àaks", 
ªquúed_¨gumít
, 0, 
OPT_CHECK_LEAKS
}, \

44 {"Àak-limô", 
ªquúed_¨gumít
, 0, 
OPT_LEAK_LIMIT
}

	)

45 
	#LEAK_CHECKER_OPTION_HANDLERS
 \

46 
OPT_CHECK_LEAKS
: \

47 
	`Àak_checkî_°¨t
(
›èrg
); \

49 
OPT_LEAK_LIMIT
: \

50 
	`Àak_checkî_£t_limô
(
	`©ﬁ
(
›èrg
)); \

51 ;

	)

52 
Àak_checkî_°¨t
(c⁄° *
fûe_«me
);

53 
Àak_checkî_£t_limô
(
off_t
 
limô
);

54 
Àak_checkî_°›
();

55 
Àak_checkî_˛aim
(const *);

56 
Àak_checkî_ußge
();

	@lib/list.c

33 
	~<c⁄fig.h
>

34 
	~"li°.h
"

35 
	~<as£π.h
>

39 
	$li°_öô
(
li°
 *list)

41 
li°
->
√xt
 =Üi°->
¥ev
 =Üist;

42 
	}
}

46 
	$li°_ö£π
(
li°
 *
bef‹e
, li° *
ñem
)

48 
ñem
->
¥ev
 = 
bef‹e
->prev;

49 
ñem
->
√xt
 = 
bef‹e
;

50 
bef‹e
->
¥ev
->
√xt
 = 
ñem
;

51 
bef‹e
->
¥ev
 = 
ñem
;

52 
	}
}

57 
	$li°_•li˚
(
li°
 *
bef‹e
, li° *
fú°
, li° *
œ°
)

59 i‡(
fú°
 =
œ°
)

61 
œ°
 =Üa°->
¥ev
;

64 
fú°
->
¥ev
->
√xt
 = 
œ°
->next;

65 
œ°
->
√xt
->
¥ev
 = 
fú°
->prev;

68 
fú°
->
¥ev
 = 
bef‹e
->prev;

69 
œ°
->
√xt
 = 
bef‹e
;

70 
bef‹e
->
¥ev
->
√xt
 = 
fú°
;

71 
bef‹e
->
¥ev
 = 
œ°
;

72 
	}
}

77 
	$li°_push_‰⁄t
(
li°
 *li°, li° *
ñem
)

79 
	`li°_ö£π
(
li°
->
√xt
, 
ñem
);

80 
	}
}

85 
	$li°_push_back
(
li°
 *li°, li° *
ñem
)

87 
	`li°_ö£π
(
li°
, 
ñem
);

88 
	}
}

93 
	$li°_ª∂a˚
(
li°
 *
ñemít
, c⁄° li° *
posôi⁄
)

95 
ñemít
->
√xt
 = 
posôi⁄
->next;

96 
ñemít
->
√xt
->
¥ev
 =Élement;

97 
ñemít
->
¥ev
 = 
posôi⁄
->prev;

98 
ñemít
->
¥ev
->
√xt
 =Élement;

99 
	}
}

103 
li°
 *

104 
	$li°_ªmove
(
li°
 *
ñem
)

106 
ñem
->
¥ev
->
√xt
 =Élem->next;

107 
ñem
->
√xt
->
¥ev
 =Élem->prev;

108  
ñem
->
√xt
;

109 
	}
}

113 
li°
 *

114 
	$li°_p›_‰⁄t
(
li°
 *list)

116 
li°
 *
‰⁄t
 =Üi°->
√xt
;

117 
	`li°_ªmove
(
‰⁄t
);

118  
‰⁄t
;

119 
	}
}

123 
li°
 *

124 
	$li°_p›_back
(
li°
 *list)

126 
li°
 *
back
 =Üi°->
¥ev
;

127 
	`li°_ªmove
(
back
);

128  
back
;

129 
	}
}

133 
li°
 *

134 
	$li°_‰⁄t
(
li°
 *list)

136 
	`as£π
(!
	`li°_is_em±y
(
li°
));

137  
li°
->
√xt
;

138 
	}
}

142 
li°
 *

143 
	$li°_back
(
li°
 *list)

145 
	`as£π
(!
	`li°_is_em±y
(
li°
));

146  
li°
->
¥ev
;

147 
	}
}

151 
size_t


152 
	$li°_size
(c⁄° 
li°
 *list)

154 c⁄° 
li°
 *
e
;

155 
size_t
 
˙t
 = 0;

157 
e
 = 
li°
->
√xt
;É !=Üist;É =É->next)

158 
˙t
++;

159  
˙t
;

160 
	}
}

163 
boﬁ


164 
	$li°_is_em±y
(c⁄° 
li°
 *list)

166  
li°
->
√xt
 ==Üist;

167 
	}
}

	@lib/list.h

33 #i‚de‡
LIST_H


34 
	#LIST_H
 1

	)

38 
	~<°dboﬁ.h
>

39 
	~<°ddef.h
>

40 
	~"utû.h
"

43 
	sli°


45 
li°
 *
	m¥ev
;

46 
li°
 *
	m√xt
;

49 
	#LIST_INITIALIZER
(
LIST
Ë{ LIST, LIST }

	)

51 
li°_öô
(
li°
 *);

54 
li°_ö£π
(
li°
 *, list *);

55 
li°_•li˚
(
li°
 *
bef‹e
, li° *
fú°
, li° *
œ°
);

56 
li°_push_‰⁄t
(
li°
 *, list *);

57 
li°_push_back
(
li°
 *, list *);

58 
li°_ª∂a˚
(
li°
 *, const list *);

61 
li°
 *
li°_ªmove
(list *);

62 
li°
 *
li°_p›_‰⁄t
(list *);

63 
li°
 *
li°_p›_back
(list *);

66 
li°
 *
li°_‰⁄t
(list *);

67 
li°
 *
li°_back
(list *);

70 
size_t
 
li°_size
(c⁄° 
li°
 *);

71 
boﬁ
 
li°_is_em±y
(c⁄° 
li°
 *);

73 
	#LIST_FOR_EACH
(
ITER
, 
STRUCT
, 
MEMBER
, 
LIST
) \

74 
ITER
 = 
	`CONTAINER_OF
((
LIST
)->
√xt
, 
STRUCT
, 
MEMBER
); \

75 &(
ITER
)->
MEMBER
 !(
LIST
); \

76 
ITER
 = 
	`CONTAINER_OF
((ITER)->
MEMBER
.
√xt
, 
STRUCT
, MEMBER))

	)

77 
	#LIST_FOR_EACH_REVERSE
(
ITER
, 
STRUCT
, 
MEMBER
, 
LIST
) \

78 
ITER
 = 
	`CONTAINER_OF
((
LIST
)->
¥ev
, 
STRUCT
, 
MEMBER
); \

79 &(
ITER
)->
MEMBER
 !(
LIST
); \

80 
ITER
 = 
	`CONTAINER_OF
((ITER)->
MEMBER
.
¥ev
, 
STRUCT
, MEMBER))

	)

81 
	#LIST_FOR_EACH_SAFE
(
ITER
, 
NEXT
, 
STRUCT
, 
MEMBER
, 
LIST
) \

82 
ITER
 = 
	`CONTAINER_OF
((
LIST
)->
√xt
, 
STRUCT
, 
MEMBER
); \

83 (
NEXT
 = 
	`CONTAINER_OF
((
ITER
)->
MEMBER
.
√xt
, 
STRUCT
, MEMBER), \

84 &(
ITER
)->
MEMBER
 !(
LIST
)); \

85 
ITER
 = 
NEXT
)

	)

	@lib/mac-learning.c

34 
	~<c⁄fig.h
>

35 
	~"mac-À¨nög.h
"

37 
	~<as£π.h
>

38 
	~<öây≥s.h
>

39 
	~<°dlib.h
>

41 
	~"hash.h
"

42 
	~"li°.h
"

43 
	~"›íÊow/›íÊow.h
"

44 
	~"pﬁl-lo›.h
"

45 
	~"èg.h
"

46 
	~"timevÆ.h
"

47 
	~"utû.h
"

49 
	#LOG_MODULE
 
VLM_mac_À¨nög


	)

50 
	~"vlog.h
"

52 
	#MAC_HASH_BITS
 10

	)

53 
	#MAC_HASH_MASK
 (
MAC_HASH_SIZE
 - 1)

	)

54 
	#MAC_HASH_SIZE
 (1u << 
MAC_HASH_BITS
)

	)

56 
	#MAC_MAX
 1024

	)

59 
	smac_íåy
 {

60 
li°
 
	mhash_node
;

61 
li°
 
	mÃu_node
;

62 
time_t
 
	mexpúes
;

63 
uöt8_t
 
	mmac
[
ETH_ADDR_LEN
];

64 
uöt16_t
 
	mvœn
;

65 
	mp‹t
;

66 
èg_ty≥
 
	mèg
;

70 
	smac_À¨nög
 {

71 
li°
 
	m‰ì
;

72 
li°
 
	mÃus
;

74 
li°
 
	mèbÀ
[
MAC_HASH_SIZE
];

75 
mac_íåy
 
	míåõs
[
MAC_MAX
];

76 
uöt32_t
 
	m£¸ë
;

79 
uöt32_t


80 
	$mac_èbÀ_hash
(c⁄° 
uöt8_t
 
mac
[
ETH_ADDR_LEN
], 
uöt16_t
 
vœn
)

82  
	`hash_byãs
(
mac
, 
ETH_ADDR_LEN
, 
vœn
);

83 
	}
}

85 
mac_íåy
 *

86 
	$mac_íåy_‰om_Ãu_node
(
li°
 *list)

88  
	`CONTAINER_OF
(
li°
, 
mac_íåy
, 
Ãu_node
);

89 
	}
}

94 
èg_ty≥


95 
	$make_unknown_mac_èg
(c⁄° 
mac_À¨nög
 *
ml
,

96 c⁄° 
uöt8_t
 
mac
[
ETH_ADDR_LEN
], 
uöt16_t
 
vœn
)

98 
uöt32_t
 
h
 = 
	`hash_byãs
(&
ml
->
£¸ë
,  ml->secret,

99 
	`mac_èbÀ_hash
(
mac
, 
vœn
));

100  
	`èg_¸óã_dëîmöi°ic
(
h
);

101 
	}
}

103 
li°
 *

104 
	$mac_èbÀ_buckë
(c⁄° 
mac_À¨nög
 *
ml
,

105 c⁄° 
uöt8_t
 
mac
[
ETH_ADDR_LEN
],

106 
uöt16_t
 
vœn
)

108 
uöt32_t
 
hash
 = 
	`mac_èbÀ_hash
(
mac
, 
vœn
);

109 c⁄° 
li°
 *li° = &
ml
->
èbÀ
[
hash
 & 
MAC_HASH_BITS
];

110  (
li°
 *)Üist;

111 
	}
}

113 
mac_íåy
 *

114 
	$£¨ch_buckë
(
li°
 *
buckë
, c⁄° 
uöt8_t
 
mac
[
ETH_ADDR_LEN
],

115 
uöt16_t
 
vœn
)

117 
mac_íåy
 *
e
;

118 
	`LIST_FOR_EACH
 (
e
, 
mac_íåy
, 
hash_node
, 
buckë
) {

119 i‡(
	`ëh_addr_equÆs
(
e
->
mac
, macË&&É->
vœn
 == vlan) {

120  
e
;

123  
NULL
;

124 
	}
}

129 
boﬁ


130 
	$gë_Ãu
(
mac_À¨nög
 *
ml
, 
mac_íåy
 **
e
)

132 i‡(!
	`li°_is_em±y
(&
ml
->
Ãus
)) {

133 *
e
 = 
	`mac_íåy_‰om_Ãu_node
(
ml
->
Ãus
.
√xt
);

134  
åue
;

136 *
e
 = 
NULL
;

137  
Ál£
;

139 
	}
}

144 
	$‰ì_mac_íåy
(
mac_À¨nög
 *
ml
, 
mac_íåy
 *
e
)

146 
	`li°_ªmove
(&
e
->
hash_node
);

147 
	`li°_ªmove
(&
e
->
Ãu_node
);

148 
	`li°_push_‰⁄t
(&
ml
->
‰ì
, &
e
->
Ãu_node
);

149 
	}
}

152 
mac_À¨nög
 *

153 
	$mac_À¨nög_¸óã
()

155 
mac_À¨nög
 *
ml
;

156 
i
;

158 
ml
 = 
	`xmÆloc
( *ml);

159 
	`li°_öô
(&
ml
->
Ãus
);

160 
	`li°_öô
(&
ml
->
‰ì
);

161 
i
 = 0; i < 
MAC_HASH_SIZE
; i++) {

162 
	`li°_öô
(&
ml
->
èbÀ
[
i
]);

164 
i
 = 0; i < 
MAC_MAX
; i++) {

165 
mac_íåy
 *
s
 = &
ml
->
íåõs
[
i
];

166 
	`li°_push_‰⁄t
(&
ml
->
‰ì
, &
s
->
Ãu_node
);

168 
ml
->
£¸ë
 = 
	`øndom_uöt32
();

169  
ml
;

170 
	}
}

174 
	$mac_À¨nög_de°roy
(
mac_À¨nög
 *
ml
)

176 
	`‰ì
(
ml
);

177 
	}
}

188 
èg_ty≥


189 
	$mac_À¨nög_À¨n
(
mac_À¨nög
 *
ml
,

190 c⁄° 
uöt8_t
 
§c_mac
[
ETH_ADDR_LEN
], 
uöt16_t
 
vœn
,

191 
uöt16_t
 
§c_p‹t
)

193 
mac_íåy
 *
e
;

194 
li°
 *
buckë
;

196 i‡(
	`ëh_addr_is_mu…iˇ°
(
§c_mac
)) {

197 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(30, 30);

198 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "mu…iˇ°Öackë sour˚ "
ETH_ADDR_FMT
,

199 
	`ETH_ADDR_ARGS
(
§c_mac
));

203 
buckë
 = 
	`mac_èbÀ_buckë
(
ml
, 
§c_mac
, 
vœn
);

204 
e
 = 
	`£¨ch_buckë
(
buckë
, 
§c_mac
, 
vœn
);

205 i‡(!
e
) {

206 i‡(!
	`li°_is_em±y
(&
ml
->
‰ì
)) {

207 
e
 = 
	`mac_íåy_‰om_Ãu_node
(
ml
->
‰ì
.
√xt
);

209 
e
 = 
	`mac_íåy_‰om_Ãu_node
(
ml
->
Ãus
.
√xt
);

210 
	`li°_ªmove
(&
e
->
hash_node
);

212 
	`mem˝y
(
e
->
mac
, 
§c_mac
, 
ETH_ADDR_LEN
);

213 
	`li°_push_‰⁄t
(
buckë
, &
e
->
hash_node
);

214 
e
->
p‹t
 = -1;

215 
e
->
vœn
 = vlan;

216 
e
->
èg
 = 
	`make_unknown_mac_èg
(
ml
, 
§c_mac
, 
vœn
);

220 
	`li°_ªmove
(&
e
->
Ãu_node
);

221 
	`li°_push_back
(&
ml
->
Ãus
, &
e
->
Ãu_node
);

222 
e
->
expúes
 = 
	`time_now
() + 60;

225 i‡(
e
->
p‹t
 !
§c_p‹t
) {

226 
èg_ty≥
 
ﬁd_èg
 = 
e
->
èg
;

227 
e
->
p‹t
 = 
§c_p‹t
;

228 
e
->
èg
 = 
	`èg_¸óã_øndom
();

229  
ﬁd_èg
;

232 
	}
}

236 
uöt16_t


237 
	$mac_À¨nög_lookup
(c⁄° 
mac_À¨nög
 *
ml
,

238 c⁄° 
uöt8_t
 
d°
[
ETH_ADDR_LEN
], 
uöt16_t
 
vœn
)

240 
èg_ty≥
 
èg
 = 0;

241  
	`mac_À¨nög_lookup_èg
(
ml
, 
d°
, 
vœn
, &
èg
);

242 
	}
}

250 
uöt32_t


251 
	$mac_À¨nög_lookup_èg
(c⁄° 
mac_À¨nög
 *
ml
,

252 c⁄° 
uöt8_t
 
d°
[
ETH_ADDR_LEN
], 
uöt16_t
 
vœn
,

253 
èg_ty≥
 *
èg
)

255 i‡(
	`ëh_addr_is_mu…iˇ°
(
d°
)) {

256  
OFPP_FLOOD
;

258 
mac_íåy
 *
e
 = 
	`£¨ch_buckë
(
	`mac_èbÀ_buckë
(
ml
, 
d°
, 
vœn
),

259 
d°
, 
vœn
);

260 i‡(
e
) {

261 *
èg
 |
e
->tag;

262  
e
->
p‹t
;

264 *
èg
 |
	`make_unknown_mac_èg
(
ml
, 
d°
, 
vœn
);

265  
OFPP_FLOOD
;

268 
	}
}

274 
	$mac_À¨nög_Êush
(
mac_À¨nög
 *
ml
)

276 
mac_íåy
 *
e
;

277 
	`gë_Ãu
(
ml
, &
e
)){

278 
	`‰ì_mac_íåy
(
ml
, 
e
);

280 
	}
}

283 
	$mac_À¨nög_run
(
mac_À¨nög
 *
ml
, 
èg_£t
 *
£t
)

285 
mac_íåy
 *
e
;

286 
	`gë_Ãu
(
ml
, &
e
Ë&& 
	`time_now
(Ë>e->
expúes
) {

287 i‡(
£t
) {

288 
	`èg_£t_add
(
£t
, 
e
->
èg
);

290 
	`‰ì_mac_íåy
(
ml
, 
e
);

292 
	}
}

295 
	$mac_À¨nög_waô
(
mac_À¨nög
 *
ml
)

297 i‡(!
	`li°_is_em±y
(&
ml
->
Ãus
)) {

298 
mac_íåy
 *
e
 = 
	`mac_íåy_‰om_Ãu_node
(
ml
->
Ãus
.
√xt
);

299 
	`pﬁl_timî_waô
((
e
->
expúes
 - 
	`time_now
()) * 1000);

301 
	}
}

	@lib/mac-learning.h

34 #i‚de‡
MAC_LEARNING_H


35 
	#MAC_LEARNING_H
 1

	)

37 
	~"∑ckës.h
"

38 
	~"èg.h
"

40 
mac_À¨nög
 *
mac_À¨nög_¸óã
();

41 
mac_À¨nög_de°roy
(
mac_À¨nög
 *);

42 
èg_ty≥
 
mac_À¨nög_À¨n
(
mac_À¨nög
 *,

43 c⁄° 
uöt8_t
 
§c
[
ETH_ADDR_LEN
], 
uöt16_t
 
vœn
,

44 
uöt16_t
 
§c_p‹t
);

45 
uöt16_t
 
mac_À¨nög_lookup
(c⁄° 
mac_À¨nög
 *,

46 c⁄° 
uöt8_t
 
d°
[
ETH_ADDR_LEN
], 
uöt16_t
 
vœn
);

47 
uöt32_t
 
mac_À¨nög_lookup_èg
(c⁄° 
mac_À¨nög
 *,

48 c⁄° 
uöt8_t
 
d°
[
ETH_ADDR_LEN
],

49 
uöt16_t
 
vœn
, 
èg_ty≥
 *
èg
);

50 
mac_À¨nög_Êush
(
mac_À¨nög
 *);

51 
mac_À¨nög_run
(
mac_À¨nög
 *, 
èg_£t
 *);

52 
mac_À¨nög_waô
(
mac_À¨nög
 *);

	@lib/netdev.c

66 
	~<c⁄fig.h
>

67 
	~"√tdev.h
"

69 
	~<as£π.h
>

70 
	~<î∫o.h
>

71 
	~<f˙é.h
>

72 
	~<¨∑/öë.h
>

73 
	~<öây≥s.h
>

74 
	~<löux/if_tun.h
>

75 
	~<löux/if_∑ckë.h
>

78 #ifde‡
PACKET_AUXDATA


79 
	#HAVE_PACKET_AUXDATA


	)

86 #i‚de‡
__KERNEL__


87 
	~<löux/ty≥s.h
>

88 
	#u8
 
__u8


	)

89 
	#u16
 
__u16


	)

90 
	#u32
 
__u32


	)

91 
	#u64
 
__u64


	)

92 
	#s8
 
__s8


	)

93 
	#s16
 
__s16


	)

94 
	#s32
 
__s32


	)

95 
	#s64
 
__s64


	)

98 
	~<löux/ëhtoﬁ.h
>

99 
	~<löux/π√éök.h
>

100 
	~<löux/sockios.h
>

101 
	~<löux/vîsi⁄.h
>

102 
	~<sys/ty≥s.h
>

103 
	~<sys/io˘l.h
>

104 
	~<sys/sockë.h
>

105 
	~<√t/ëhî√t.h
>

106 
	~<√t/if.h
>

107 
	~<√t/if_¨p.h
>

108 
	~<√t/rouã.h
>

109 
	~<√töë/ö.h
>

110 
	~<°dlib.h
>

111 
	~<°rög.h
>

112 
	~<uni°d.h
>

114 
	~"Áèl-sig«l.h
"

115 
	~"li°.h
"

116 
	~"√éök.h
"

117 
	~"oÂbuf.h
"

118 
	~"›íÊow/›íÊow.h
"

119 
	~"∑ckës.h
"

120 
	~"pﬁl-lo›.h
"

121 
	~"sockë-utû.h
"

122 
	~"svec.h
"

127 #i‚de‡
IFF_LOWER_UP


128 
	#IFF_LOWER_UP
 0x10000

	)

131 
	#LOG_MODULE
 
VLM_√tdev


	)

132 
	~"vlog.h
"

134 
	s√tdev
 {

135 
li°
 
	mnode
;

136 *
	m«me
;

140 
	m√tdev_fd
;

141 
	mèp_fd
;

145 
	mqueue_fd
[
NETDEV_MAX_QUEUES
 + 1];

146 
uöt16_t
 
	mnum_queues
;

149 
	mifödex
;

150 
uöt8_t
 
	mëhîaddr
[
ETH_ADDR_LEN
];

151 
ö6_addr
 
	mö6
;

152 
	m•ìd
;

153 
	mmtu
;

154 
	mtxqÀn
;

155 
	mhwaddr_Ámûy
;

159 
uöt32_t
 
	mcuº
;

160 
uöt32_t
 
	madvîti£d
;

161 
uöt32_t
 
	msuµ‹ãd
;

162 
uöt32_t
 
	m≥î
;

164 
	mßve_Êags
;

165 
	mch™ged_Êags
;

169 
li°
 
	g√tdev_li°
 = 
LIST_INITIALIZER
(&
√tdev_li°
);

172 
	gaf_öë_sock
 = -1;

176 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(5, 20);

178 
öô_√tdev
();

179 
do_›í_√tdev
(c⁄° *
«me
, 
ëhîty≥
, 
èp_fd
,

180 
√tdev
 **
√tdev_
);

181 
ª°‹e_Êags
(
√tdev
 *netdev);

182 
gë_Êags
(c⁄° *
√tdev_«me
, *
Êag•
);

183 
£t_Êags
(c⁄° *
√tdev_«me
, 
Êags
);

187 
	$gë_ùv6_addªss
(c⁄° *
«me
, 
ö6_addr
 *
ö6
)

189 
FILE
 *
fûe
;

190 
löe
[128];

192 
fûe
 = 
	`f›í
("/proc/net/if_inet6", "r");

193 i‡(
fûe
 =
NULL
) {

196 *
ö6
 = 
ö6addr_™y
;

200 
	`fgës
(
löe
, Üöe, 
fûe
)) {

201 
uöt8_t
 *
s6
 = 
ö6
->
s6_addr
;

202 
i‚ame
[16 + 1];

204 
	#X8
 "%2"
SCNx8


	)

205 i‡(
	`ssˇnf
(
löe
, " "
X8
 X8 X8 X8 X8 X8 X8 X8 X8 X8 X8 X8 X8 X8 X8 X8

207 &
s6
[0], &s6[1], &s6[2], &s6[3],

208 &
s6
[4], &s6[5], &s6[6], &s6[7],

209 &
s6
[8], &s6[9], &s6[10], &s6[11],

210 &
s6
[12], &s6[13], &s6[14], &s6[15],

211 
i‚ame
) == 17

212 && !
	`°rcmp
(
«me
, 
i‚ame
))

214 
	`f˛o£
(
fûe
);

218 *
ö6
 = 
ö6addr_™y
;

220 
	`f˛o£
(
fûe
);

221 
	}
}

224 
	#TC_QDISC
 0x0001

	)

227 
	#TC_ROOT_CLASS
 0xffff

	)

231 
	#TC_DEFAULT_CLASS
 0xff„

	)

232 
	#TC_MIN_RATE
 1

	)

234 
	#COMMAND_ADD_DEV_QDISC
 "/sbin/tc qdiscádd dev %s " \

235 "roŸ h™dÀ %x: htb deÁu… %x"

	)

236 
	#COMMAND_DEL_DEV_QDISC
 "/sbö/t¯qdis¯dñ dev %†roŸ"

	)

237 
	#COMMAND_ADD_CLASS
 "/sbin/tc classádd dev %sÖarent %x:%x " \

238 "˛assid %x:%x htbÑ©ê%dkbô ceû %dkbô"

	)

239 
	#COMMAND_CHANGE_CLASS
 "/sbin/tc class change dev %sÖarent %x:%x " \

240 "˛assid %x:%x htbÑ©ê%dkbô ceû %dkbô"

	)

241 
	#COMMAND_DEL_CLASS
 "/sbö/t¯˛as†dñ dev %†∑ª¡ %x:%x cœssid %x:%x"

	)

244 
	$√tdev_£tup_roŸ_˛ass
(c⁄° 
√tdev
 *√tdev, 
uöt16_t
 
˛ass_id
,

245 
uöt16_t
 
øã
)

247 
comm™d
[1024];

248 
a˘uÆ_øã
;

251 
a˘uÆ_øã
 = 
øã
*
√tdev
->
•ìd
;

253 
	`¢¥ötf
(
comm™d
, (comm™d), 
COMMAND_ADD_CLASS
, 
√tdev
->
«me
,

254 
TC_QDISC
,0,TC_QDISC, 
˛ass_id
, 
a˘uÆ_øã
, 
√tdev
->
•ìd
*1000);

255 i‡(
	`sy°em
(
comm™d
) != 0) {

256 
	`VLOG_ERR
(
LOG_MODULE
, "Problem configuringÑoot class %d for device %s",

257 
˛ass_id
, 
√tdev
->
«me
);

262 
	}
}

276 
	$√tdev_£tup_˛ass
(c⁄° 
√tdev
 *√tdev, 
uöt16_t
 
˛ass_id
,

277 
uöt16_t
 
øã
)

279 
comm™d
[1024];

280 
a˘uÆ_øã
;

283 
a˘uÆ_øã
 = 
øã
*
√tdev
->
•ìd
;

285 
	`¢¥ötf
(
comm™d
, (comm™d), 
COMMAND_ADD_CLASS
, 
√tdev
->
«me
,

286 
TC_QDISC
, 
TC_ROOT_CLASS
, TC_QDISC, 
˛ass_id
, 
a˘uÆ_øã
,

287 
√tdev
->
•ìd
*1000);

288 i‡(
	`sy°em
(
comm™d
) != 0) {

289 
	`VLOG_ERR
(
LOG_MODULE
, "ProbÀm c⁄figurög cœs†%d f‹ devi˚ %s",
˛ass_id
,

290 
√tdev
->
«me
);

295 
	}
}

308 
	$√tdev_ch™ge_˛ass
(c⁄° 
√tdev
 *√tdev, 
uöt16_t
 
˛ass_id
, uöt16_à
øã
)

310 
comm™d
[1024];

311 
a˘uÆ_øã
;

314 
a˘uÆ_øã
 = 
øã
*
√tdev
->
•ìd
;

316 
	`¢¥ötf
(
comm™d
, (comm™d), 
COMMAND_CHANGE_CLASS
, 
√tdev
->
«me
,

317 
TC_QDISC
, 
TC_ROOT_CLASS
, TC_QDISC, 
˛ass_id
, 
a˘uÆ_øã
,

318 
√tdev
->
•ìd
*1000 );

319 i‡(
	`sy°em
(
comm™d
) != 0) {

320 
	`VLOG_ERR
(
LOG_MODULE
, "Problem configuring class %d for device %s",

321 
˛ass_id
, 
√tdev
->
«me
);

326 
	}
}

337 
	$√tdev_dñëe_˛ass
(c⁄° 
√tdev
 *√tdev, 
uöt16_t
 
˛ass_id
)

339 
comm™d
[1024];

341 
	`¢¥ötf
(
comm™d
, (comm™d), 
COMMAND_DEL_CLASS
, 
√tdev
->
«me
,

342 
TC_QDISC
, 
TC_ROOT_CLASS
, TC_QDISC, 
˛ass_id
);

343 i‡(
	`sy°em
(
comm™d
) != 0) {

344 
	`VLOG_ERR
(
LOG_MODULE
, "ProbÀm dñëög cœs†%d f‹ devi˚ %s",
˛ass_id
,

345 
√tdev
->
«me
);

350 
	}
}

353 
	$›í_queue_sockë
(c⁄° * 
«me
, 
uöt16_t
 
˛ass_id
, * 
fd
)

355 
îr‹
;

356 
i‰eq
 
i‰
;

357 
sockaddr_Œ
 
¶l
;

358 
uöt32_t
 
¥i‹ôy
;

360 *
fd
 = 
	`sockë
(
PF_PACKET
, 
SOCK_RAW
, 
	`ht⁄s
(0));

361 i‡(*
fd
 < 0) {

362  
î∫o
;

366 
îr‹
 = 
	`£t_n⁄blockög
(*
fd
);

367 i‡(
îr‹
) {

368 
îr‹_Æªady_£t
;

372 
	`°∫˝y
(
i‰
.
i‰_«me
, 
«me
,  ifr.ifr_name);

373 i‡(
	`io˘l
(*
fd
, 
SIOCGIFINDEX
, &
i‰
) < 0) {

374 
	`VLOG_ERR
(
LOG_MODULE
, "ioctl(SIOCGIFINDEX) on %s device failed: %s",

375 
«me
, 
	`°ªº‹
(
î∫o
));

376 
îr‹
;

380 
	`mem£t
(&
¶l
, 0,  sll);

381 
¶l
.
¶l_Ámûy
 = 
PF_PACKET
;

382 
¶l
.
¶l_ifödex
 = 
i‰
.
i‰_ifödex
;

383 i‡(
	`böd
(*
fd
, (
sockaddr
 *Ë&
¶l
,  sll) < 0) {

384 
	`VLOG_ERR
(
LOG_MODULE
, "bödÅÿ%†Áûed: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

385 
îr‹
;

392 
¥i‹ôy
 = (
TC_QDISC
<<16Ë+ 
˛ass_id
;

393 i‡–
	`£t_sockë_¥i‹ôy
(*
fd
,
¥i‹ôy
) < 0) {

394 
	`VLOG_ERR
(
LOG_MODULE
, "£àsockëÖri‹ôy faûed f‹ %†: %s",
«me
,
	`°ªº‹
(
î∫o
));

395 
îr‹
;

400 
îr‹
:

401 
îr‹
 = 
î∫o
;

402 
îr‹_Æªady_£t
:

403 
	`˛o£
(*
fd
);

404  
îr‹
;

405 
	}
}

429 
	$do_£tup_qdisc
(c⁄° *
√tdev_«me
)

431 
comm™d
[1024];

432 
îr‹
;

434 
	`¢¥ötf
(
comm™d
, (comm™d), 
COMMAND_ADD_DEV_QDISC
, 
√tdev_«me
,

435 
TC_QDISC
, 
TC_DEFAULT_CLASS
);

436 
îr‹
 = 
	`sy°em
(
comm™d
);

437 i‡(
îr‹
) {

438 
	`VLOG_WARN
(
LOG_MODULE
, "ProbÀm c⁄figurög qdis¯f‹ devi˚ %s",
√tdev_«me
);

439  
îr‹
;

442 
	}
}

448 
	$do_ªmove_qdisc
(c⁄° *
√tdev_«me
)

450 
comm™d
[1024];

452 
	`¢¥ötf
(
comm™d
, (comm™d), 
COMMAND_DEL_DEV_QDISC
, 
√tdev_«me
);

453 
	`sy°em
(
comm™d
);

458 
	}
}

467 
	$√tdev_£tup_¶icög
(
√tdev
 *√tdev, 
uöt16_t
 
num_queues
)

469 
i
;

470 * 
fd
;

471 
îr‹
;

473 
√tdev
->
num_queues
 =Çum_queues;

476 
îr‹
 = 
	`do_ªmove_qdisc
(
√tdev
->
«me
);

477 i‡(
îr‹
) {

478  
îr‹
;

482 
îr‹
 = 
	`do_£tup_qdisc
(
√tdev
->
«me
);

483 i‡(
îr‹
) {

484  
îr‹
;

491 
îr‹
 = 
	`√tdev_£tup_roŸ_˛ass
(
√tdev
, 
TC_ROOT_CLASS
,1000);

492 i‡(
îr‹
) {

493  
îr‹
;

498 
îr‹
 = 
	`√tdev_£tup_˛ass
(
√tdev
,
TC_DEFAULT_CLASS
,1);

499 i‡(
îr‹
) {

500  
îr‹
;

514 
i
=1; i <
√tdev
->
num_queues
; i++) {

515 
fd
 = &
√tdev
->
queue_fd
[
i
];

516 
îr‹
 = 
	`›í_queue_sockë
(
√tdev
->
«me
,
i
,
fd
);

517 i‡(
îr‹
) {

518  
îr‹
;

523 
	}
}

526 
	$do_ëhtoﬁ
(
√tdev
 *netdev)

528 
i‰eq
 
i‰
;

529 
ëhtoﬁ_cmd
 
ecmd
;

531 
√tdev
->
cuº
 = 0;

532 
√tdev
->
suµ‹ãd
 = 0;

533 
√tdev
->
advîti£d
 = 0;

534 
√tdev
->
≥î
 = 0;

535 
√tdev
->
•ìd
 = 
SPEED_1000
;

537 
	`mem£t
(&
i‰
, 0,  ifr);

538 
	`°∫˝y
(
i‰
.
i‰_«me
, 
√tdev
->
«me
,  ifr.ifr_name);

539 
i‰
.
i‰_d©a
 = (
ˇddr_t
Ë&
ecmd
;

541 
	`mem£t
(&
ecmd
, 0, Écmd);

542 
ecmd
.
cmd
 = 
ETHTOOL_GSET
;

543 i‡(
	`io˘l
(
√tdev
->
√tdev_fd
, 
SIOCETHTOOL
, &
i‰
) == 0) {

544 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_10ba£T_HÆf
) {

545 
√tdev
->
suµ‹ãd
 |
OFPPF_10MB_HD
;

547 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_10ba£T_FuŒ
) {

548 
√tdev
->
suµ‹ãd
 |
OFPPF_10MB_FD
;

550 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_100ba£T_HÆf
) {

551 
√tdev
->
suµ‹ãd
 |
OFPPF_100MB_HD
;

553 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_100ba£T_FuŒ
) {

554 
√tdev
->
suµ‹ãd
 |
OFPPF_100MB_FD
;

556 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_1000ba£T_HÆf
) {

557 
√tdev
->
suµ‹ãd
 |
OFPPF_1GB_HD
;

559 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_1000ba£T_FuŒ
) {

560 
√tdev
->
suµ‹ãd
 |
OFPPF_1GB_FD
;

562 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_10000ba£T_FuŒ
) {

563 
√tdev
->
suµ‹ãd
 |
OFPPF_10GB_FD
;

565 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_TP
) {

566 
√tdev
->
suµ‹ãd
 |
OFPPF_COPPER
;

568 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_FIBRE
) {

569 
√tdev
->
suµ‹ãd
 |
OFPPF_FIBER
;

571 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_Aut⁄eg
) {

572 
√tdev
->
suµ‹ãd
 |
OFPPF_AUTONEG
;

574 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,14)

575 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_Pau£
) {

576 
√tdev
->
suµ‹ãd
 |
OFPPF_PAUSE
;

578 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_Asym_Pau£
) {

579 
√tdev
->
suµ‹ãd
 |
OFPPF_PAUSE_ASYM
;

584 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_10ba£T_HÆf
) {

585 
√tdev
->
advîti£d
 |
OFPPF_10MB_HD
;

587 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_10ba£T_FuŒ
) {

588 
√tdev
->
advîti£d
 |
OFPPF_10MB_FD
;

590 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_100ba£T_HÆf
) {

591 
√tdev
->
advîti£d
 |
OFPPF_100MB_HD
;

593 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_100ba£T_FuŒ
) {

594 
√tdev
->
advîti£d
 |
OFPPF_100MB_FD
;

596 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_1000ba£T_HÆf
) {

597 
√tdev
->
advîti£d
 |
OFPPF_1GB_HD
;

599 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_1000ba£T_FuŒ
) {

600 
√tdev
->
advîti£d
 |
OFPPF_1GB_FD
;

602 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_10000ba£T_FuŒ
) {

603 
√tdev
->
advîti£d
 |
OFPPF_10GB_FD
;

605 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_TP
) {

606 
√tdev
->
advîti£d
 |
OFPPF_COPPER
;

608 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_FIBRE
) {

609 
√tdev
->
advîti£d
 |
OFPPF_FIBER
;

611 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_Aut⁄eg
) {

612 
√tdev
->
advîti£d
 |
OFPPF_AUTONEG
;

614 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,14)

615 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_Pau£
) {

616 
√tdev
->
advîti£d
 |
OFPPF_PAUSE
;

618 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_Asym_Pau£
) {

619 
√tdev
->
advîti£d
 |
OFPPF_PAUSE_ASYM
;

624 i‡(
ecmd
.
•ìd
 =
SPEED_10
) {

625 
√tdev
->
cuº
 = (
ecmd
.
du∂ex
Ë? 
OFPPF_10MB_FD
 : 
OFPPF_10MB_HD
;

627 i‡(
ecmd
.
•ìd
 =
SPEED_100
) {

628 
√tdev
->
cuº
 = (
ecmd
.
du∂ex
Ë? 
OFPPF_100MB_FD
 : 
OFPPF_100MB_HD
;

630 i‡(
ecmd
.
•ìd
 =
SPEED_1000
) {

631 
√tdev
->
cuº
 = (
ecmd
.
du∂ex
Ë? 
OFPPF_1GB_FD
 : 
OFPPF_1GB_HD
;

633 i‡(
ecmd
.
•ìd
 =
SPEED_10000
) {

634 
√tdev
->
cuº
 = 
OFPPF_10GB_FD
;

637 i‡(
ecmd
.
p‹t
 =
PORT_TP
) {

638 
√tdev
->
cuº
 |
OFPPF_COPPER
;

640 i‡(
ecmd
.
p‹t
 =
PORT_FIBRE
) {

641 
√tdev
->
cuº
 |
OFPPF_FIBER
;

644 i‡(
ecmd
.
aut⁄eg
) {

645 
√tdev
->
cuº
 |
OFPPF_AUTONEG
;

648 
√tdev
->
•ìd
 = 
ecmd
.speed;

651 
	`VLOG_DBG
(
LOG_MODULE
, "io˘l(SIOCETHTOOLËÁûed: %s", 
	`°ªº‹
(
î∫o
));

653 
	}
}

664 
	$√tdev_›í
(c⁄° *
«me
, 
ëhîty≥
, 
√tdev
 **
√tdevp
)

666 i‡(!
	`°∫cmp
(
«me
, "tap:", 4)) {

667  
	`√tdev_›í_èp
(
«me
 + 4, 
√tdevp
);

669  
	`do_›í_√tdev
(
«me
, 
ëhîty≥
, -1, 
√tdevp
);

671 
	}
}

679 
	$√tdev_›í_èp
(c⁄° *
«me
, 
√tdev
 **
√tdevp
)

681 c⁄° 
èp_dev
[] = "/dev/net/tun";

682 
i‰eq
 
i‰
;

683 
îr‹
;

684 
èp_fd
;

686 
èp_fd
 = 
	`›í
(
èp_dev
, 
O_RDWR
);

687 i‡(
èp_fd
 < 0) {

688 
	`oÂ_îr‹
(
î∫o
, "›íög \"%s\" faûed", 
èp_dev
);

689  
î∫o
;

692 
	`mem£t
(&
i‰
, 0,  ifr);

693 
i‰
.
i‰_Êags
 = 
IFF_TAP
 | 
IFF_NO_PI
;

694 i‡(
«me
) {

695 
	`°∫˝y
(
i‰
.
i‰_«me
, 
«me
,  ifr.ifr_name);

697 i‡(
	`io˘l
(
èp_fd
, 
TUNSETIFF
, &
i‰
) < 0) {

698 
îr‹
 = 
î∫o
;

699 
	`oÂ_îr‹
(
îr‹
, "io˘l(TUNSETIFFË⁄ \"%s\" faûed", 
èp_dev
);

700 
	`˛o£
(
èp_fd
);

701  
îr‹
;

704 
îr‹
 = 
	`£t_n⁄blockög
(
èp_fd
);

705 i‡(
îr‹
) {

706 
	`oÂ_îr‹
(
îr‹
, "£t_n⁄blockög o¿\"%s\" faûed", 
èp_dev
);

707 
	`˛o£
(
èp_fd
);

708  
îr‹
;

711 
îr‹
 = 
	`do_›í_√tdev
(
i‰
.
i‰_«me
, 
NETDEV_ETH_TYPE_NONE
, 
èp_fd
,

712 
√tdevp
);

713 i‡(
îr‹
) {

714 
	`˛o£
(
èp_fd
);

716  
îr‹
;

717 
	}
}

720 
	$do_›í_√tdev
(c⁄° *
«me
, 
ëhîty≥
, 
èp_fd
,

721 
√tdev
 **
√tdev_
)

723 
√tdev_fd
;

724 
sockaddr_Œ
 
¶l
;

725 
i‰eq
 
i‰
;

726 
ifödex
;

727 
uöt8_t
 
ëhîaddr
[
ETH_ADDR_LEN
];

728 
ö6_addr
 
ö6
;

729 
mtu
;

730 
txqÀn
;

731 
hwaddr_Ámûy
;

732 
îr‹
;

733 
√tdev
 *netdev;

735 
	`öô_√tdev
();

736 *
√tdev_
 = 
NULL
;

739 
√tdev_fd
 = 
	`sockë
(
PF_PACKET
, 
SOCK_RAW
,

740 
	`ht⁄s
(
ëhîty≥
 =
NETDEV_ETH_TYPE_NONE
 ? 0

741 : 
ëhîty≥
 =
NETDEV_ETH_TYPE_ANY
 ? 
ETH_P_ALL


742 : 
ëhîty≥
 =
NETDEV_ETH_TYPE_802_2
 ? 
ETH_P_802_2


743 : 
ëhîty≥
));

744 i‡(
√tdev_fd
 < 0) {

745  
î∫o
;

747 #ifde‡
HAVE_PACKET_AUXDATA


748 
uöt32_t
 
vÆ
 = 1;

749 i‡(
	`£tsock›t
(
√tdev_fd
, 
SOL_PACKET
, 
PACKET_AUXDATA
, &
vÆ
,

750  
vÆ
Ë=-1 && 
î∫o
 !
ENOPROTOOPT
){

751 
	`VLOG_ERR
(
LOG_MODULE
, "£tsock›t(SO_RCVBUF,%zu): %s", 
vÆ
, 
	`°ªº‹
(
î∫o
));

756 
îr‹
 = 
	`£t_n⁄blockög
(
√tdev_fd
);

757 i‡(
îr‹
) {

758 
îr‹_Æªady_£t
;

762 
	`°∫˝y
(
i‰
.
i‰_«me
, 
«me
,  ifr.ifr_name);

763 i‡(
	`io˘l
(
√tdev_fd
, 
SIOCGIFINDEX
, &
i‰
) < 0) {

764 
	`VLOG_ERR
(
LOG_MODULE
, "ioctl(SIOCGIFINDEX) on %s device failed: %s",

765 
«me
, 
	`°ªº‹
(
î∫o
));

766 
îr‹
;

768 
ifödex
 = 
i‰
.
i‰_ifödex
;

771 
	`mem£t
(&
¶l
, 0,  sll);

772 
¶l
.
¶l_Ámûy
 = 
AF_PACKET
;

773 
¶l
.
¶l_ifödex
 = 
ifödex
;

774 i‡(
	`böd
(
√tdev_fd
, (
sockaddr
 *Ë&
¶l
,  sll) < 0) {

775 
	`VLOG_ERR
(
LOG_MODULE
, "bödÅÿ%†Áûed: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

776 
îr‹
;

779 i‡(
ëhîty≥
 !
NETDEV_ETH_TYPE_NONE
) {

784 
îr‹
 = 
	`døö_rcvbuf
(
√tdev_fd
);

785 i‡(
îr‹
) {

786 
îr‹
;

791 i‡(
	`io˘l
(
√tdev_fd
, 
SIOCGIFHWADDR
, &
i‰
) < 0) {

792 
	`VLOG_ERR
(
LOG_MODULE
, "ioctl(SIOCGIFHWADDR) on %s device failed: %s",

793 
«me
, 
	`°ªº‹
(
î∫o
));

794 
îr‹
;

796 
hwaddr_Ámûy
 = 
i‰
.
i‰_hwaddr
.
ß_Ámûy
;

797 i‡(
hwaddr_Ámûy
 !
AF_UNSPEC
 && hwaddr_Ámûy !
ARPHRD_ETHER
) {

798 
	`VLOG_WARN
(
LOG_MODULE
, "%s device has unknown hardwareáddress family %d",

799 
«me
, 
hwaddr_Ámûy
);

801 
	`mem˝y
(
ëhîaddr
, 
i‰
.
i‰_hwaddr
.
ß_d©a
, Étheraddr);

804 i‡(
	`io˘l
(
√tdev_fd
, 
SIOCGIFMTU
, &
i‰
) < 0) {

805 
	`VLOG_ERR
(
LOG_MODULE
, "ioctl(SIOCGIFMTU) on %s device failed: %s",

806 
«me
, 
	`°ªº‹
(
î∫o
));

807 
îr‹
;

809 
mtu
 = 
i‰
.
i‰_mtu
;

812 i‡(
	`io˘l
(
√tdev_fd
, 
SIOCGIFTXQLEN
, &
i‰
) < 0) {

813 
	`VLOG_ERR
(
LOG_MODULE
, "ioctl(SIOCGIFTXQLEN) on %s device failed: %s",

814 
«me
, 
	`°ªº‹
(
î∫o
));

815 
îr‹
;

817 
txqÀn
 = 
i‰
.
i‰_qÀn
;

819 
	`gë_ùv6_addªss
(
«me
, &
ö6
);

822 
√tdev
 = 
	`xmÆloc
( *netdev);

823 
√tdev
->
«me
 = 
	`x°rdup
(name);

824 
√tdev
->
ifödex
 = ifindex;

825 
√tdev
->
txqÀn
 =Åxqlen;

826 
√tdev
->
hwaddr_Ámûy
 = hwaddr_family;

827 
√tdev
->
√tdev_fd
 =Çetdev_fd;

828 
√tdev
->
èp_fd
 =Å≠_fd < 0 ? 
√tdev_fd
 :Åap_fd;

829 
√tdev
->
queue_fd
[0] =Çëdev->
èp_fd
;

830 
	`mem˝y
(
√tdev
->
ëhîaddr
,Étheraddr, Étheraddr);

831 
√tdev
->
mtu
 = mtu;

832 
√tdev
->
ö6
 = in6;

833 
√tdev
->
num_queues
 = 0;

836 
	`do_ëhtoﬁ
(
√tdev
);

839 
îr‹
 = 
	`gë_Êags
(
√tdev
->
«me
, &√tdev->
ßve_Êags
);

840 i‡(
îr‹
) {

841 
îr‹_Æªady_£t
;

843 
√tdev
->
ch™ged_Êags
 = 0;

844 
	`Áèl_sig«l_block
();

845 
	`li°_push_back
(&
√tdev_li°
, &
√tdev
->
node
);

846 
	`Áèl_sig«l_unblock
();

849 *
√tdev_
 = 
√tdev
;

852 
îr‹
:

853 
îr‹
 = 
î∫o
;

854 
îr‹_Æªady_£t
:

855 
	`˛o£
(
√tdev_fd
);

856 i‡(
èp_fd
 >= 0) {

857 
	`˛o£
(
èp_fd
);

859  
îr‹
;

860 
	}
}

864 
	$√tdev_˛o£
(
√tdev
 *netdev)

866 
i
;

868 i‡(
√tdev
) {

871 
îr‹
;

872 
	`Áèl_sig«l_block
();

873 
îr‹
 = 
	`ª°‹e_Êags
(
√tdev
);

874 
	`li°_ªmove
(&
√tdev
->
node
);

875 
	`Áèl_sig«l_unblock
();

876 i‡(
îr‹
) {

877 
	`VLOG_WARN
(
LOG_MODULE
, "failedÅoÑestoreÇetwork device flags on %s: %s",

878 
√tdev
->
«me
, 
	`°ªº‹
(
îr‹
));

882 
	`‰ì
(
√tdev
->
«me
);

883 
	`˛o£
(
√tdev
->
√tdev_fd
);

884 i‡(
√tdev
->
√tdev_fd
 !√tdev->
èp_fd
) {

885 
	`˛o£
(
√tdev
->
èp_fd
);

888 
i
 =1; i <
√tdev
->
num_queues
; i++) {

889 
	`˛o£
(
√tdev
->
queue_fd
[
i
]);

891 
	`‰ì
(
√tdev
);

893 
	}
}

898 
	$∑d_to_möimum_Àngth
(
oÂbuf
 *
buf„r
)

900 i‡(
buf„r
->
size
 < 
ETH_TOTAL_MIN
) {

901 
	`oÂbuf_put_zîos
(
buf„r
, 
ETH_TOTAL_MIN
 - buf„r->
size
);

903 
	}
}

918 
	$√tdev_ªcv
(
√tdev
 *√tdev, 
oÂbuf
 *
buf„r
)

921 #ifde‡
HAVE_PACKET_AUXDATA


923 
iovec
 
iov
;

924 
cmsghdr
 *
cmsg
;

925 
msghdr
 
msg
;

926 
sockaddr
 
‰om
;

928 
cmsghdr
 
cmsg
;

929 
buf
[
	`CMSG_SPACE
((
çackë_auxd©a
))];

930 } 
cmsg_buf
;

932 
sockaddr_Œ
 
¶l
;

933 
sockÀn_t
 
¶l_Àn
;

935 
ssize_t
 
n_byãs
;

937 
	`as£π
(
buf„r
->
size
 == 0);

938 
	`as£π
(
	`oÂbuf_èûroom
(
buf„r
Ë>
ETH_TOTAL_MIN
);

940 #ifde‡
HAVE_PACKET_AUXDATA


942 
	`mem£t
(&
msg
, 0, (
msghdr
));

943 
	`mem£t
(
cmsg_buf
.
buf
, 0, 
	`CMSG_SPACE
((
çackë_auxd©a
)));

945 
msg
.
msg_«me
 = &
‰om
;

946 
msg
.
msg_«mñí
 = (
‰om
);

947 
msg
.
msg_iov
 = &
iov
;

948 
msg
.
msg_iovÀn
 = 1;

949 
msg
.
msg_c⁄åﬁ
 = &
cmsg_buf
;

950 
msg
.
msg_c⁄åﬁÀn
 = (
cmsg_buf
);

951 
msg
.
msg_Êags
 = 0;

953 
iov
.
iov_Àn
 = 
buf„r
->
Æloˇãd
;

954 
iov
.
iov_ba£
 = 
buf„r
->
d©a
;

958 
	`mem£t
(&
¶l
,0, sll);

959 
¶l_Àn
 =  
¶l
;

963 i‡(!
	`°∫cmp
(
√tdev
->
«me
, "tap", 3)) {

965 
n_byãs
 = 
	`ªad
(
√tdev
->
èp_fd
, 
	`oÂbuf_èû
(
buf„r
),

966 (
ssize_t
)
	`oÂbuf_èûroom
(
buf„r
));

967 } 
n_byãs
 < 0 && 
î∫o
 =
EINTR
);

971 #ifde‡
HAVE_PACKET_AUXDATA


973 
n_byãs
 = 
	`ªcvmsg
(
√tdev
->
èp_fd
, &
msg
, 0);

975 
n_byãs
 = 
	`ªcv‰om
(
√tdev
->
èp_fd
, 
	`oÂbuf_èû
(
buf„r
),

976 (
ssize_t
)
	`oÂbuf_èûroom
(
buf„r
), 0,

977 (
sockaddr
 *)&
¶l
, &
¶l_Àn
);

980 } 
n_byãs
 < 0 && 
î∫o
 =
EINTR
);

982 i‡(
n_byãs
 < 0) {

983 i‡(
î∫o
 !
EAGAIN
) {

984 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "errorÑeceiving EthernetÖacket on %s: %s",

985 
	`°ªº‹
(
î∫o
), 
√tdev
->
«me
);

987  
î∫o
;

990 #ifde‡
HAVE_PACKET_AUXDATA


992 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msg
); cmsg; cmsg = 
	`CMSG_NXTHDR
(&msg, cmsg)) {

993 
çackë_auxd©a
 *
aux
;

994 
vœn_èg
 *
èg
;

996 
buf„r
->
size
 +
n_byãs
;

998 i‡(
cmsg
->
cmsg_Àn
 < 
	`CMSG_LEN
((
çackë_auxd©a
)) ||

999 
cmsg
->
cmsg_Àvñ
 !
SOL_PACKET
 ||

1000 
cmsg
->
cmsg_ty≥
 !
PACKET_AUXDATA
){

1003 
aux
 = (
çackë_auxd©a
 *)
	`CMSG_DATA
(
cmsg
);

1004 i‡(
aux
->
ç_vœn_tci
 == 0)

1008 
	`oÂbuf_push_unöô
(
buf„r
, 
VLAN_HEADER_LEN
);

1009 
	`memmove
(
buf„r
->
d©a
, (
uöt8_t
*)buf„r->d©a+
VLAN_HEADER_LEN
, 
ETH_ALEN
 * 2);

1010 
èg
 = (
vœn_èg
 *)((
uöt8_t
*)
buf„r
->
d©a
 + 
ETH_ALEN
 * 2);

1011 
èg
->
vœn_ç_id
 = 
	`ht⁄s
(
ETH_P_8021Q
);

1012 
èg
->
vœn_tci
 = 
	`ht⁄s
(
aux
->
ç_vœn_tci
);

1018 i‡(
¶l
.
¶l_pkây≥
 =
PACKET_OUTGOING
) {

1019  
EAGAIN
;

1021 
buf„r
->
size
 +
n_byãs
;

1028 
	`∑d_to_möimum_Àngth
(
buf„r
);

1033 
	}
}

1038 
	$√tdev_ªcv_waô
(
√tdev
 *netdev)

1040 
	`pﬁl_fd_waô
(
√tdev
->
èp_fd
, 
POLLIN
);

1041 
	}
}

1045 
	$√tdev_døö
(
√tdev
 *netdev)

1047 i‡(
√tdev
->
èp_fd
 !√tdev->
√tdev_fd
) {

1048 
	`døö_fd
(
√tdev
->
èp_fd
,Çëdev->
txqÀn
);

1051  
	`døö_rcvbuf
(
√tdev
->
√tdev_fd
);

1053 
	}
}

1069 
	$√tdev_£nd
(
√tdev
 *√tdev, c⁄° 
oÂbuf
 *
buf„r
,

1070 
uöt16_t
 
˛ass_id
)

1072 
ssize_t
 
n_byãs
;

1074 
	`as£π
(
˛ass_id
 <
NETDEV_MAX_QUEUES
);

1077 
n_byãs
 = 
	`wrôe
(
√tdev
->
queue_fd
[
˛ass_id
], 
buf„r
->
d©a
, buf„r->
size
);

1078 } 
n_byãs
 < 0 && 
î∫o
 =
EINTR
);

1080 i‡(
n_byãs
 < 0) {

1084 i‡(
î∫o
 =
ENOBUFS
) {

1085  
EAGAIN
;

1086 } i‡(
î∫o
 !
EAGAIN
) {

1087 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "error sending EthernetÖacket on %s: %s",

1088 
√tdev
->
«me
, 
	`°ªº‹
(
î∫o
));

1090  
î∫o
;

1091 } i‡(
n_byãs
 !
buf„r
->
size
) {

1092 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
,

1094 (Ë
n_byãs
, 
buf„r
->
size
, 
√tdev
->
«me
);

1095  
EMSGSIZE
;

1099 
	}
}

1109 
	$√tdev_£nd_waô
(
√tdev
 *netdev)

1111 i‡(
√tdev
->
èp_fd
 =√tdev->
√tdev_fd
) {

1112 
	`pﬁl_fd_waô
(
√tdev
->
èp_fd
, 
POLLOUT
);

1115 
	`pﬁl_immedüã_wake
();

1117 
	}
}

1122 
	$√tdev_£t_ëhîaddr
(
√tdev
 *√tdev, c⁄° 
uöt8_t
 
mac
[
ETH_ADDR_LEN
])

1124 
i‰eq
 
i‰
;

1126 
	`mem£t
(&
i‰
, 0,  ifr);

1127 
	`°∫˝y
(
i‰
.
i‰_«me
, 
√tdev
->
«me
,  ifr.ifr_name);

1128 
i‰
.
i‰_hwaddr
.
ß_Ámûy
 = 
√tdev
->
hwaddr_Ámûy
;

1129 
	`mem˝y
(
i‰
.
i‰_hwaddr
.
ß_d©a
, 
mac
, 
ETH_ADDR_LEN
);

1130 i‡(
	`io˘l
(
√tdev
->
√tdev_fd
, 
SIOCSIFHWADDR
, &
i‰
) < 0) {

1131 
	`VLOG_ERR
(
LOG_MODULE
, "ioctl(SIOCSIFHWADDR) on %s device failed: %s",

1132 
√tdev
->
«me
, 
	`°ªº‹
(
î∫o
));

1133  
î∫o
;

1135 
	`mem˝y
(
√tdev
->
ëhîaddr
, 
mac
, 
ETH_ADDR_LEN
);

1137 
	}
}

1141 c⁄° 
uöt8_t
 *

1142 
	$√tdev_gë_ëhîaddr
(c⁄° 
√tdev
 *netdev)

1144  
√tdev
->
ëhîaddr
;

1145 
	}
}

1150 
	$√tdev_gë_«me
(c⁄° 
√tdev
 *netdev)

1152  
√tdev
->
«me
;

1153 
	}
}

1159 
	$√tdev_gë_mtu
(c⁄° 
√tdev
 *netdev)

1161  
√tdev
->
mtu
;

1162 
	}
}

1166 
uöt32_t


1167 
	$√tdev_gë_„©uªs
(
√tdev
 *√tdev, 
ty≥
)

1169 
	`do_ëhtoﬁ
(
√tdev
);

1170 
ty≥
) {

1171 
NETDEV_FEAT_CURRENT
:

1172  
√tdev
->
cuº
;

1173 
NETDEV_FEAT_ADVERTISED
:

1174  
√tdev
->
advîti£d
;

1175 
NETDEV_FEAT_SUPPORTED
:

1176  
√tdev
->
suµ‹ãd
;

1177 
NETDEV_FEAT_PEER
:

1178  
√tdev
->
≥î
;

1180 
	`VLOG_WARN
(
LOG_MODULE
, "Unknow¿„©uªÅy≥: %d\n", 
ty≥
);

1183 
	}
}

1187 
boﬁ


1188 
	$√tdev_gë_ö4
(c⁄° 
√tdev
 *√tdev, 
ö_addr
 *
ö4
)

1190 
i‰eq
 
i‰
;

1191 
ö_addr
 
ù
 = { 
INADDR_ANY
 };

1193 
	`°∫˝y
(
i‰
.
i‰_«me
, 
√tdev
->
«me
,  ifr.ifr_name);

1194 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

1195 i‡(
	`io˘l
(
af_öë_sock
, 
SIOCGIFADDR
, &
i‰
) == 0) {

1196 
sockaddr_ö
 *
sö
 = (sockaddr_ö *Ë&
i‰
.
i‰_addr
;

1197 
ù
 = 
sö
->
sö_addr
;

1199 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "%s: ioctl(SIOCGIFADDR) failed: %s",

1200 
√tdev
->
«me
, 
	`°ªº‹
(
î∫o
));

1202 i‡(
ö4
) {

1203 *
ö4
 = 
ù
;

1205  
ù
.
s_addr
 !
INADDR_ANY
;

1206 
	}
}

1209 
	$make_ö4_sockaddr
(
sockaddr
 *
ß
, 
ö_addr
 
addr
)

1211 
sockaddr_ö
 
sö
;

1212 
	`mem£t
(&
sö
, 0,  sin);

1213 
sö
.
sö_Ámûy
 = 
AF_INET
;

1214 
sö
.
sö_addr
 = 
addr
;

1215 
sö
.
sö_p‹t
 = 0;

1217 
	`mem£t
(
ß
, 0,  *sa);

1218 
	`mem˝y
(
ß
, &
sö
,  sin);

1219 
	}
}

1222 
	$do_£t_addr
(
√tdev
 *√tdev, 
sock
,

1223 
io˘l_ƒ
, c⁄° *
io˘l_«me
, 
ö_addr
 
addr
)

1225 
i‰eq
 
i‰
;

1226 
îr‹
;

1228 
	`°∫˝y
(
i‰
.
i‰_«me
, 
√tdev
->
«me
,  ifr.ifr_name);

1229 
	`make_ö4_sockaddr
(&
i‰
.
i‰_addr
, 
addr
);

1230 
îr‹
 = 
	`io˘l
(
sock
, 
io˘l_ƒ
, &
i‰
Ë< 0 ? 
î∫o
 : 0;

1231 i‡(
îr‹
) {

1232 
	`VLOG_WARN
(
LOG_MODULE
, "io˘l(%s): %s", 
io˘l_«me
, 
	`°ªº‹
(
îr‹
));

1234  
îr‹
;

1235 
	}
}

1241 
	$√tdev_£t_ö4
(
√tdev
 *√tdev, 
ö_addr
 
addr
, ö_add∏
mask
)

1243 
îr‹
;

1245 
îr‹
 = 
	`do_£t_addr
(
√tdev
, 
af_öë_sock
,

1246 
SIOCSIFADDR
, "SIOCSIFADDR", 
addr
);

1247 i‡(!
îr‹
 && 
addr
.
s_addr
 !
INADDR_ANY
) {

1248 
îr‹
 = 
	`do_£t_addr
(
√tdev
, 
af_öë_sock
,

1249 
SIOCSIFNETMASK
, "SIOCSIFNETMASK", 
mask
);

1251  
îr‹
;

1252 
	}
}

1256 
	$√tdev_add_rouãr
(
ö_addr
 
rouãr
)

1258 
ö_addr
 
™y
 = { 
INADDR_ANY
 };

1259 
πíåy
 
π
;

1260 
îr‹
;

1262 
	`mem£t
(&
π
, 0, Ñt);

1263 
	`make_ö4_sockaddr
(&
π
.
π_d°
, 
™y
);

1264 
	`make_ö4_sockaddr
(&
π
.
π_g©eway
, 
rouãr
);

1265 
	`make_ö4_sockaddr
(&
π
.
π_gímask
, 
™y
);

1266 
π
.
π_Êags
 = 
RTF_UP
 | 
RTF_GATEWAY
;

1267 
îr‹
 = 
	`io˘l
(
af_öë_sock
, 
SIOCADDRT
, &
π
Ë< 0 ? 
î∫o
 : 0;

1268 i‡(
îr‹
) {

1269 
	`VLOG_WARN
(
LOG_MODULE
, "io˘l(SIOCADDRT): %s", 
	`°ªº‹
(
îr‹
));

1271  
îr‹
;

1272 
	}
}

1276 
boﬁ


1277 
	$√tdev_gë_ö6
(c⁄° 
√tdev
 *√tdev, 
ö6_addr
 *
ö6
)

1279 i‡(
ö6
) {

1280 *
ö6
 = 
√tdev
->in6;

1282  
	`memcmp
(&
√tdev
->
ö6
, &
ö6addr_™y
, Çetdev->in6) != 0;

1283 
	}
}

1288 
	$√tdev_gë_Êags
(c⁄° 
√tdev
 *√tdev, 
√tdev_Êags
 *
Êag•
)

1290  
	`√tdev_nodev_gë_Êags
(
√tdev
->
«me
, 
Êag•
);

1291 
	}
}

1294 
	$nd_to_iff_Êags
(
√tdev_Êags
 
nd
)

1296 
iff
 = 0;

1297 i‡(
nd
 & 
NETDEV_UP
) {

1298 
iff
 |
IFF_UP
;

1300 i‡(
nd
 & 
NETDEV_PROMISC
) {

1301 
iff
 |
IFF_PROMISC
;

1303  
iff
;

1304 
	}
}

1311 
	$do_upd©e_Êags
(
√tdev
 *√tdev, 
√tdev_Êags
 
off
,

1312 
√tdev_Êags
 
⁄
, 
boﬁ
 
≥rm™ít
)

1314 
ﬁd_Êags
, 
√w_Êags
;

1315 
îr‹
;

1317 
îr‹
 = 
	`gë_Êags
(
√tdev
->
«me
, &
ﬁd_Êags
);

1318 i‡(
îr‹
) {

1319  
îr‹
;

1322 
√w_Êags
 = (
ﬁd_Êags
 & ~
	`nd_to_iff_Êags
(
off
)Ë|Çd_to_iff_Êags(
⁄
);

1323 i‡(!
≥rm™ít
) {

1324 
√tdev
->
ch™ged_Êags
 |
√w_Êags
 ^ 
ﬁd_Êags
;

1326 i‡(
√w_Êags
 !
ﬁd_Êags
) {

1327 
îr‹
 = 
	`£t_Êags
(
√tdev
->
«me
, 
√w_Êags
);

1329  
îr‹
;

1330 
	}
}

1337 
	$√tdev_£t_Êags
(
√tdev
 *√tdev, 
√tdev_Êags
 
Êags
,

1338 
boﬁ
 
≥rm™ít
)

1340  
	`do_upd©e_Êags
(
√tdev
, -1, 
Êags
, 
≥rm™ít
);

1341 
	}
}

1348 
	$√tdev_tu∫_Êags_⁄
(
√tdev
 *√tdev, 
√tdev_Êags
 
Êags
,

1349 
boﬁ
 
≥rm™ít
)

1351  
	`do_upd©e_Êags
(
√tdev
, 0, 
Êags
, 
≥rm™ít
);

1352 
	}
}

1359 
	$√tdev_tu∫_Êags_off
(
√tdev
 *√tdev, 
√tdev_Êags
 
Êags
,

1360 
boﬁ
 
≥rm™ít
)

1362  
	`do_upd©e_Êags
(
√tdev
, 
Êags
, 0, 
≥rm™ít
);

1363 
	}
}

1370 
	$√tdev_¨p_lookup
(c⁄° 
√tdev
 *netdev,

1371 
uöt32_t
 
ù
, 
uöt8_t
 
mac
[
ETH_ADDR_LEN
])

1373 
¨¥eq
 
r
;

1374 
sockaddr_ö
 *
∑
;

1375 
ªtvÆ
;

1377 
	`mem£t
(&
r
, 0, Ñ);

1378 
∑
 = (
sockaddr_ö
 *Ë&
r
.
¨p_∑
;

1379 
∑
->
sö_Ámûy
 = 
AF_INET
;

1380 
∑
->
sö_addr
.
s_addr
 = 
ù
;

1381 
∑
->
sö_p‹t
 = 0;

1382 
r
.
¨p_ha
.
ß_Ámûy
 = 
ARPHRD_ETHER
;

1383 
r
.
¨p_Êags
 = 0;

1384 
	`°∫˝y
(
r
.
¨p_dev
, 
√tdev
->
«me
, Ñ.arp_dev);

1385 
ªtvÆ
 = 
	`io˘l
(
af_öë_sock
, 
SIOCGARP
, &
r
Ë< 0 ? 
î∫o
 : 0;

1386 i‡(!
ªtvÆ
) {

1387 
	`mem˝y
(
mac
, 
r
.
¨p_ha
.
ß_d©a
, 
ETH_ADDR_LEN
);

1388 } i‡(
ªtvÆ
 !
ENXIO
) {

1389 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "%s: couldÇŸÜook u∞ARPÉ¡ry f‹ "
IP_FMT
": %s",

1390 
√tdev
->
«me
, 
	`IP_ARGS
(&
ù
), 
	`°ªº‹
(
ªtvÆ
));

1392  
ªtvÆ
;

1393 
	}
}

1397 
	$√tdev_íumî©e
(
svec
 *svec)

1399 
if_«meödex
 *
«mes
;

1401 
	`svec_öô
(
svec
);

1402 
«mes
 = 
	`if_«meödex
();

1403 i‡(
«mes
) {

1404 
size_t
 
i
;

1406 
i
 = 0; 
«mes
[i].
if_«me
 !
NULL
; i++) {

1407 
	`svec_add
(
svec
, 
«mes
[
i
].
if_«me
);

1409 
	`if_‰ì«meödex
(
«mes
);

1411 
	`VLOG_WARN
(
LOG_MODULE
, "couldÇot obtainÜist ofÇetwork deviceÇames: %s",

1412 
	`°ªº‹
(
î∫o
));

1414 
	}
}

1423 
	$√tdev_nodev_gë_Êags
(c⁄° *
√tdev_«me
, 
√tdev_Êags
 *
Êag•
)

1425 
îr‹
, 
Êags
;

1427 
	`öô_√tdev
();

1429 
îr‹
 = 
	`gë_Êags
(
√tdev_«me
, &
Êags
);

1430 i‡(
îr‹
) {

1431  
îr‹
;

1434 *
Êag•
 = 0;

1435 i‡(
Êags
 & 
IFF_UP
) {

1436 *
Êag•
 |
NETDEV_UP
;

1438 i‡(
Êags
 & 
IFF_PROMISC
) {

1439 *
Êag•
 |
NETDEV_PROMISC
;

1441 i‡(
Êags
 & 
IFF_LOWER_UP
) {

1442 *
Êag•
 |
NETDEV_CARRIER
;

1445 
	}
}

1447 
	s√tdev_m⁄ô‹
 {

1448 
∆_sock
 *
	msock
;

1449 
svec
 
	m√tdevs
;

1450 
svec
 
	mch™ged
;

1457 c⁄° 
∆_pﬁicy
 
	gπ∆gΩ_lök_pﬁicy
[] = {

1458 [
IFLA_IFNAME
] = { .
ty≥
 = 
NL_A_STRING
, .
	g›ti⁄Æ
 = 
Ál£
 },

1461 c⁄° *
lookup_√tdev
(c⁄° 
√tdev_m⁄ô‹
 *, const *);

1462 c⁄° *
p›_ch™ged
(
√tdev_m⁄ô‹
 *);

1463 c⁄° *
Æl_√tdevs_ch™ged
(
√tdev_m⁄ô‹
 *);

1470 
	$√tdev_m⁄ô‹_¸óã
(
√tdev_m⁄ô‹
 **
m⁄p
)

1472 
√tdev_m⁄ô‹
 *
m⁄
;

1473 
∆_sock
 *
sock
;

1474 
îr‹
;

1476 *
m⁄p
 = 
NULL
;

1477 
îr‹
 = 
	`∆_sock_¸óã
(
NETLINK_ROUTE
, 
RTNLGRP_LINK
, 0, 0, &
sock
);

1478 i‡(
îr‹
) {

1481 
	`VLOG_WARN
(
LOG_MODULE
, "couldÇŸ cª©êπ√éök sockë: %s", 
	`°ªº‹
(
îr‹
));

1482  
îr‹
;

1485 
m⁄
 = *
m⁄p
 = 
	`xmÆloc
( *mon);

1486 
m⁄
->
sock
 = sock;

1487 
	`svec_öô
(&
m⁄
->
√tdevs
);

1488 
	`svec_öô
(&
m⁄
->
ch™ged
);

1490 
	}
}

1493 
	$√tdev_m⁄ô‹_de°roy
(
√tdev_m⁄ô‹
 *
m⁄
)

1495 i‡(
m⁄
) {

1496 
	`∆_sock_de°roy
(
m⁄
->
sock
);

1497 
	`svec_de°roy
(&
m⁄
->
√tdevs
);

1498 
	`svec_de°roy
(&
m⁄
->
ch™ged
);

1499 
	`‰ì
(
m⁄
);

1501 
	}
}

1507 
	$√tdev_m⁄ô‹_£t_devi˚s
(
√tdev_m⁄ô‹
 *
m⁄
,

1508 **
√tdevs
, 
size_t
 
n_√tdevs
)

1510 
size_t
 
i
;

1512 
	`svec_˛ór
(&
m⁄
->
√tdevs
);

1513 
i
 = 0; i < 
n_√tdevs
; i++) {

1514 
	`svec_add
(&
m⁄
->
√tdevs
,Çëdevs[
i
]);

1516 
	`svec_s‹t
(&
m⁄
->
√tdevs
);

1517 
	}
}

1527 
	$√tdev_m⁄ô‹_pﬁl
(
√tdev_m⁄ô‹
 *
m⁄
)

1529 
vlog_øã_limô
 
¶ow_æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

1530 c⁄° *
ch™ged_«me
;

1532 
ch™ged_«me
 = 
	`p›_ch™ged
(
m⁄
);

1533 i‡(
ch™ged_«me
) {

1534  
ch™ged_«me
;

1538 
oÂbuf
 *
buf
;

1539 
ªtvÆ
;

1541 
ªtvÆ
 = 
	`∆_sock_ªcv
(
m⁄
->
sock
, &
buf
, 
Ál£
);

1542 i‡(
ªtvÆ
 =
EAGAIN
) {

1543  
NULL
;

1544 } i‡(
ªtvÆ
 =
ENOBUFS
) {

1545 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
¶ow_æ
, "network monitor socket overflowed");

1546  
	`Æl_√tdevs_ch™ged
(
m⁄
);

1547 } i‡(
ªtvÆ
) {

1548 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
¶ow_æ
, "error onÇetwork monitor socket: %s",

1549 
	`°ªº‹
(
ªtvÆ
));

1550  
NULL
;

1552 
∆©å
 *
©ås
[
	`ARRAY_SIZE
(
π∆gΩ_lök_pﬁicy
)];

1553 c⁄° *
«me
;

1555 i‡(!
	`∆_pﬁicy_∑r£
(
buf
, 
NLMSG_HDRLEN
 + (
iföfomsg
),

1556 
π∆gΩ_lök_pﬁicy
,

1557 
©ås
, 
	`ARRAY_SIZE
(
π∆gΩ_lök_pﬁicy
))) {

1558 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
¶ow_æ
, "received badÑtnl message");

1559  
	`Æl_√tdevs_ch™ged
(
m⁄
);

1561 
«me
 = 
	`lookup_√tdev
(
m⁄
, 
	`∆_©å_gë_°rög
(
©ås
[
IFLA_IFNAME
]));

1562 
	`oÂbuf_dñëe
(
buf
);

1563 i‡(
«me
) {

1566  
«me
;

1570 
	}
}

1573 
	$√tdev_m⁄ô‹_run
(
√tdev_m⁄ô‹
 *
m⁄
 
UNUSED
)

1576 
	}
}

1579 
	$√tdev_m⁄ô‹_waô
(
√tdev_m⁄ô‹
 *
m⁄
)

1581 
	`∆_sock_waô
(
m⁄
->
sock
, 
POLLIN
);

1582 
	}
}

1585 
	$lookup_√tdev
(c⁄° 
√tdev_m⁄ô‹
 *
m⁄
, c⁄° *
«me
)

1587 
size_t
 
idx
 = 
	`svec_föd
(&
m⁄
->
√tdevs
, 
«me
);

1588  
idx
 !
SIZE_MAX
 ? 
m⁄
->
√tdevs
.
«mes
[idx] : 
NULL
;

1589 
	}
}

1592 
	$p›_ch™ged
(
√tdev_m⁄ô‹
 *
m⁄
)

1594 
m⁄
->
ch™ged
.
n
) {

1595 c⁄° *
«me
 = 
	`lookup_√tdev
(
m⁄
, 
	`svec_back
(&m⁄->
ch™ged
));

1596 
	`svec_p›_back
(&
m⁄
->
ch™ged
);

1597 i‡(
«me
) {

1598  
«me
;

1601  
NULL
;

1602 
	}
}

1605 
	$Æl_√tdevs_ch™ged
(
√tdev_m⁄ô‹
 *
m⁄
)

1607 
	`svec_˛ór
(&
m⁄
->
ch™ged
);

1608 
	`svec_≠≥nd
(&
m⁄
->
ch™ged
, &m⁄->
√tdevs
);

1609  
	`p›_ch™ged
(
m⁄
);

1610 
	}
}

1612 
ª°‹e_Æl_Êags
(*
aux
);

1617 
	$öô_√tdev
()

1619 
boﬁ
 
öôed
;

1620 i‡(!
öôed
) {

1621 
öôed
 = 
åue
;

1622 
	`Áèl_sig«l_add_hook
(
ª°‹e_Æl_Êags
, 
NULL
, 
åue
);

1623 
af_öë_sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

1624 i‡(
af_öë_sock
 < 0) {

1625 
	`oÂ_Áèl
(
î∫o
, "socket(AF_INET)");

1628 
	}
}

1636 
	$ª°‹e_Êags
(
√tdev
 *netdev)

1638 
i‰eq
 
i‰
;

1639 
ª°‹e_Êags
;

1642 
	`°∫˝y
(
i‰
.
i‰_«me
, 
√tdev
->
«me
,  ifr.ifr_name);

1643 i‡(
	`io˘l
(
√tdev
->
√tdev_fd
, 
SIOCGIFFLAGS
, &
i‰
) < 0) {

1644  
î∫o
;

1648 
ª°‹e_Êags
 = 
√tdev
->
ch™ged_Êags
 & (
IFF_PROMISC
 | 
IFF_UP
);

1649 i‡((
i‰
.
i‰_Êags
 ^ 
√tdev
->
ßve_Êags
Ë& 
ª°‹e_Êags
) {

1650 
i‰
.
i‰_Êags
 &~
ª°‹e_Êags
;

1651 
i‰
.
i‰_Êags
 |
√tdev
->
ßve_Êags
 & 
ª°‹e_Êags
;

1652 i‡(
	`io˘l
(
√tdev
->
√tdev_fd
, 
SIOCSIFFLAGS
, &
i‰
) < 0) {

1653  
î∫o
;

1658 
	}
}

1663 
	$ª°‹e_Æl_Êags
(*
aux
 
UNUSED
)

1665 
√tdev
 *netdev;

1666 
	`LIST_FOR_EACH
 (
√tdev
, √tdev, 
node
, &
√tdev_li°
) {

1667 
	`ª°‹e_Êags
(
√tdev
);

1669 
	}
}

1672 
	$gë_Êags
(c⁄° *
√tdev_«me
, *
Êags
)

1674 
i‰eq
 
i‰
;

1675 
	`°∫˝y
(
i‰
.
i‰_«me
, 
√tdev_«me
,  ifr.ifr_name);

1676 i‡(
	`io˘l
(
af_öë_sock
, 
SIOCGIFFLAGS
, &
i‰
) < 0) {

1677 
	`VLOG_ERR
(
LOG_MODULE
, "ioctl(SIOCGIFFLAGS) on %s device failed: %s",

1678 
√tdev_«me
, 
	`°ªº‹
(
î∫o
));

1679  
î∫o
;

1681 *
Êags
 = 
i‰
.
i‰_Êags
;

1683 
	}
}

1686 
	$£t_Êags
(c⁄° *
√tdev_«me
, 
Êags
)

1688 
i‰eq
 
i‰
;

1689 
	`°∫˝y
(
i‰
.
i‰_«me
, 
√tdev_«me
,  ifr.ifr_name);

1690 
i‰
.
i‰_Êags
 = 
Êags
;

1691 i‡(
	`io˘l
(
af_öë_sock
, 
SIOCSIFFLAGS
, &
i‰
) < 0) {

1692 
	`VLOG_ERR
(
LOG_MODULE
, "ioctl(SIOCSIFFLAGS) on %s device failed: %s",

1693 
√tdev_«me
, 
	`°ªº‹
(
î∫o
));

1694  
î∫o
;

1697 
	}
}

	@lib/netdev.h

34 #i‚de‡
NETDEV_H


35 
	#NETDEV_H
 1

	)

37 
	~<°dboﬁ.h
>

38 
	~<°ddef.h
>

39 
	~<°döt.h
>

47 
	goÂbuf
;

48 
	gö_addr
;

49 
	gö6_addr
;

50 
	gsvec
;

52 
	e√tdev_„©uª_ty≥
 {

53 
	mNETDEV_FEAT_CURRENT
,

54 
	mNETDEV_FEAT_ADVERTISED
,

55 
	mNETDEV_FEAT_SUPPORTED
,

56 
	mNETDEV_FEAT_PEER


59 
	e√tdev_Êags
 {

60 
	mNETDEV_UP
 = 0x0001,

61 
	mNETDEV_PROMISC
 = 0x0002,

62 
	mNETDEV_CARRIER
 = 0x0004

65 
	e√tdev_p£udo_ëhîty≥
 {

66 
	mNETDEV_ETH_TYPE_NONE
 = -128,

67 
	mNETDEV_ETH_TYPE_ANY
,

68 
	mNETDEV_ETH_TYPE_802_2


71 
	#NETDEV_MAX_QUEUES
 8

	)

73 
	g√tdev
;

75 
√tdev_›í
(c⁄° *
«me
, 
ëhîty≥
, 
√tdev
 **);

76 
√tdev_›í_èp
(c⁄° *
«me
, 
√tdev
 **);

77 
√tdev_˛o£
(
√tdev
 *);

79 
√tdev_ªcv
(
√tdev
 *, 
oÂbuf
 *);

80 
√tdev_ªcv_waô
(
√tdev
 *);

81 
√tdev_døö
(
√tdev
 *);

82 
√tdev_£nd
(
√tdev
 *, c⁄° 
oÂbuf
 *, 
uöt16_t
 
˛ass_id
);

83 
√tdev_£nd_waô
(
√tdev
 *);

84 
√tdev_£t_ëhîaddr
(
√tdev
 *, c⁄° 
uöt8_t
 
mac
[6]);

85 c⁄° 
uöt8_t
 *
√tdev_gë_ëhîaddr
(c⁄° 
√tdev
 *);

86 c⁄° *
√tdev_gë_«me
(c⁄° 
√tdev
 *);

87 
√tdev_gë_mtu
(c⁄° 
√tdev
 *);

88 
uöt32_t
 
√tdev_gë_„©uªs
(
√tdev
 *, );

89 
boﬁ
 
√tdev_gë_ö4
(c⁄° 
√tdev
 *, 
ö_addr
 *);

90 
√tdev_£t_ö4
(
√tdev
 *, 
ö_addr
 
addr
, ö_add∏
mask
);

91 
√tdev_add_rouãr
(
ö_addr
 
rouãr
);

92 
boﬁ
 
√tdev_gë_ö6
(c⁄° 
√tdev
 *, 
ö6_addr
 *);

93 
√tdev_gë_Êags
(c⁄° 
√tdev
 *, 
√tdev_Êags
 *);

94 
√tdev_£t_Êags
(
√tdev
 *, 
√tdev_Êags
, 
boﬁ
 
≥rm™ít
);

95 
√tdev_tu∫_Êags_⁄
(
√tdev
 *, 
√tdev_Êags
, 
boﬁ
 
≥rm™ít
);

96 
√tdev_tu∫_Êags_off
(
√tdev
 *, 
√tdev_Êags
, 
boﬁ
 
≥rm™ít
);

97 
√tdev_¨p_lookup
(c⁄° 
√tdev
 *, 
uöt32_t
 
ù
, 
uöt8_t
 
mac
[6]);

98 
√tdev_£tup_¶icög
(
√tdev
 *, 
uöt16_t
);

99 
√tdev_£tup_˛ass
(c⁄° 
√tdev
 *, 
uöt16_t
 , uint16_t);

100 
√tdev_ch™ge_˛ass
(c⁄° 
√tdev
 *, 
uöt16_t
 , uint16_t);

101 
√tdev_dñëe_˛ass
(c⁄° 
√tdev
 *, 
uöt16_t
);

103 
√tdev_íumî©e
(
svec
 *);

104 
√tdev_nodev_gë_Êags
(c⁄° *
√tdev_«me
, 
√tdev_Êags
 *);

112 
	g√tdev_m⁄ô‹
;

113 
√tdev_m⁄ô‹_¸óã
(
√tdev_m⁄ô‹
 **);

114 
√tdev_m⁄ô‹_de°roy
(
√tdev_m⁄ô‹
 *);

115 
√tdev_m⁄ô‹_£t_devi˚s
(
√tdev_m⁄ô‹
 *, **, 
size_t
);

116 c⁄° *
√tdev_m⁄ô‹_pﬁl
(
√tdev_m⁄ô‹
 *);

117 
√tdev_m⁄ô‹_run
(
√tdev_m⁄ô‹
 *);

118 
√tdev_m⁄ô‹_waô
(
√tdev_m⁄ô‹
 *);

	@lib/netlink-protocol.h

34 #i‚de‡
NETLINK_PROTOCOL_H


35 
	#NETLINK_PROTOCOL_H
 1

	)

42 
	~<°döt.h
>

43 
	~<sys/sockë.h
>

44 
	~"utû.h
"

46 
	#NETLINK_GENERIC
 16

	)

48 
	ssockaddr_∆
 {

49 
ß_Ámûy_t
 
	m∆_Ámûy
;

50 
	m∆_∑d
;

51 
uöt32_t
 
	m∆_pid
;

52 
uöt32_t
 
	m∆_groups
;

54 
BUILD_ASSERT_DECL
((
sockaddr_∆
) == 12);

57 
	#NLM_F_REQUEST
 0x001

	)

58 
	#NLM_F_MULTI
 0x002

	)

59 
	#NLM_F_ACK
 0x004

	)

60 
	#NLM_F_ECHO
 0x008

	)

62 
	#NLM_F_ROOT
 0x100

	)

63 
	#NLM_F_MATCH
 0x200

	)

64 
	#NLM_F_ATOMIC
 0x400

	)

65 
	#NLM_F_DUMP
 (
NLM_F_ROOT
 | 
NLM_F_MATCH
)

	)

68 
	#NLMSG_NOOP
 1

	)

69 
	#NLMSG_ERROR
 2

	)

70 
	#NLMSG_DONE
 3

	)

71 
	#NLMSG_OVERRUN
 4

	)

73 
	#NLMSG_MIN_TYPE
 0x10

	)

75 
	s∆msghdr
 {

76 
uöt32_t
 
	m∆msg_Àn
;

77 
uöt16_t
 
	m∆msg_ty≥
;

78 
uöt16_t
 
	m∆msg_Êags
;

79 
uöt32_t
 
	m∆msg_£q
;

80 
uöt32_t
 
	m∆msg_pid
;

82 
BUILD_ASSERT_DECL
((
∆msghdr
) == 16);

84 
	#NLMSG_ALIGNTO
 4

	)

85 
	#NLMSG_ALIGN
(
SIZE
Ë
	`ROUND_UP
(SIZE, 
NLMSG_ALIGNTO
)

	)

86 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

88 
	s∆msgîr


90 
	mîr‹
;

91 
∆msghdr
 
	mmsg
;

93 
BUILD_ASSERT_DECL
((
∆msgîr
) == 20);

95 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

96 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

97 
	#NETLINK_PKTINFO
 3

	)

99 
	sgílmsghdr
 {

100 
uöt8_t
 
	mcmd
;

101 
uöt8_t
 
	mvîsi⁄
;

102 
uöt16_t
 
	mª£rved
;

104 
BUILD_ASSERT_DECL
((
gílmsghdr
) == 4);

106 
	#GENL_HDRLEN
 
	`NLMSG_ALIGN
((
gílmsghdr
))

	)

108 
	s∆©å
 {

109 
uöt16_t
 
	m∆a_Àn
;

110 
uöt16_t
 
	m∆a_ty≥
;

112 
BUILD_ASSERT_DECL
((
∆©å
) == 4);

114 
	#NLA_ALIGNTO
 4

	)

115 
	#NLA_ALIGN
(
SIZE
Ë
	`ROUND_UP
(SIZE, 
NLA_ALIGNTO
)

	)

116 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

118 
	#GENL_MIN_ID
 
NLMSG_MIN_TYPE


	)

119 
	#GENL_MAX_ID
 1023

	)

121 
	#GENL_ID_CTRL
 
NLMSG_MIN_TYPE


	)

124 
	mCTRL_CMD_UNSPEC
,

125 
	mCTRL_CMD_NEWFAMILY
,

126 
	mCTRL_CMD_DELFAMILY
,

127 
	mCTRL_CMD_GETFAMILY
,

128 
	mCTRL_CMD_NEWOPS
,

129 
	mCTRL_CMD_DELOPS
,

130 
	mCTRL_CMD_GETOPS
,

131 
	m__CTRL_CMD_MAX
,

134 
	#CTRL_CMD_MAX
 (
__CTRL_CMD_MAX
 - 1)

	)

137 
	mCTRL_ATTR_UNSPEC
,

138 
	mCTRL_ATTR_FAMILY_ID
,

139 
	mCTRL_ATTR_FAMILY_NAME
,

140 
	mCTRL_ATTR_VERSION
,

141 
	mCTRL_ATTR_HDRSIZE
,

142 
	mCTRL_ATTR_MAXATTR
,

143 
	mCTRL_ATTR_OPS
,

144 
	m__CTRL_ATTR_MAX
,

147 
	#CTRL_ATTR_MAX
 (
__CTRL_ATTR_MAX
 - 1)

	)

150 
	mCTRL_ATTR_OP_UNSPEC
,

151 
	mCTRL_ATTR_OP_ID
,

152 
	mCTRL_ATTR_OP_FLAGS
,

153 
	m__CTRL_ATTR_OP_MAX
,

156 
	#CTRL_ATTR_OP_MAX
 (
__CTRL_ATTR_OP_MAX
 - 1)

	)

	@lib/netlink.c

34 
	~<c⁄fig.h
>

35 
	~"√éök.h
"

36 
	~<as£π.h
>

37 
	~<î∫o.h
>

38 
	~<öây≥s.h
>

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 
	~<°rög.h
>

42 
	~<time.h
>

43 
	~<uni°d.h
>

44 
	~"dy«mic-°rög.h
"

45 
	~"√éök-¥Ÿocﬁ.h
"

46 
	~"oÂbuf.h
"

47 
	~"pﬁl-lo›.h
"

48 
	~"timevÆ.h
"

49 
	~"utû.h
"

51 
	~"vlog.h
"

52 
	#LOG_MODULE
 
VLM_√éök


	)

55 #i‚de‡
SOL_NETLINK


56 
	#SOL_NETLINK
 270

	)

62 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 600);

64 
log_∆msg
(c⁄° *
fun˘i⁄
, 
îr‹
,

65 c⁄° *
mesßge
, 
size_t
 
size
);

69 
	s∆_sock


71 
	mfd
;

72 
uöt32_t
 
	mpid
;

83 
uöt32_t
 
	g√xt_£q
;

85 
Æloc_pid
(
uöt32_t
 *);

86 
‰ì_pid
(
uöt32_t
);

100 
	$∆_sock_¸óã
(
¥Ÿocﬁ
, 
mu…iˇ°_group
,

101 
size_t
 
so_¢dbuf
, size_à
so_rcvbuf
, 
∆_sock
 **
sockp
)

103 
∆_sock
 *
sock
;

104 
sockaddr_∆
 
loˇl
, 
ªmŸe
;

105 
ªtvÆ
 = 0;

107 i‡(
√xt_£q
 == 0) {

109 
√xt_£q
 = 
	`gëpid
(Ë^ 
	`time_now
();

112 *
sockp
 = 
NULL
;

113 
sock
 = 
	`mÆloc
( *sock);

114 i‡(
sock
 =
NULL
) {

115  
ENOMEM
;

118 
sock
->
fd
 = 
	`sockë
(
AF_NETLINK
, 
SOCK_RAW
, 
¥Ÿocﬁ
);

119 i‡(
sock
->
fd
 < 0) {

120 
	`VLOG_ERR
(
LOG_MODULE
, "f˙é: %s", 
	`°ªº‹
(
î∫o
));

121 
îr‹
;

124 
ªtvÆ
 = 
	`Æloc_pid
(&
sock
->
pid
);

125 i‡(
ªtvÆ
) {

126 
îr‹
;

129 i‡(
so_¢dbuf
 != 0

130 && 
	`£tsock›t
(
sock
->
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
,

131 &
so_¢dbuf
,  so_sndbuf) < 0) {

132 
	`VLOG_ERR
(
LOG_MODULE
, "£tsock›t(SO_SNDBUF,%zu): %s", 
so_¢dbuf
, 
	`°ªº‹
(
î∫o
));

133 
îr‹_‰ì_pid
;

136 i‡(
so_rcvbuf
 != 0

137 && 
	`£tsock›t
(
sock
->
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
,

138 &
so_rcvbuf
,  so_rcvbuf) < 0) {

139 
	`VLOG_ERR
(
LOG_MODULE
, "£tsock›t(SO_RCVBUF,%zu): %s", 
so_rcvbuf
, 
	`°ªº‹
(
î∫o
));

140 
îr‹_‰ì_pid
;

144 
	`mem£t
(&
loˇl
, 0, Üocal);

145 
loˇl
.
∆_Ámûy
 = 
AF_NETLINK
;

146 
loˇl
.
∆_pid
 = 
sock
->
pid
;

147 i‡(
mu…iˇ°_group
 > 0 && multicast_group <= 32) {

150 
loˇl
.
∆_groups
 |1u»<< (
mu…iˇ°_group
 - 1);

152 i‡(
	`böd
(
sock
->
fd
, (
sockaddr
 *Ë&
loˇl
, Üocal) < 0) {

153 
	`VLOG_ERR
(
LOG_MODULE
, "böd(%"
PRIu32
"): %s", 
sock
->
pid
, 
	`°ªº‹
(
î∫o
));

154 
îr‹_‰ì_pid
;

158 
	`mem£t
(&
ªmŸe
, 0, Ñemote);

159 
ªmŸe
.
∆_Ámûy
 = 
AF_NETLINK
;

160 
ªmŸe
.
∆_pid
 = 0;

161 i‡(
	`c⁄√˘
(
sock
->
fd
, (
sockaddr
 *Ë&
ªmŸe
, Ñemote) < 0) {

162 
	`VLOG_ERR
(
LOG_MODULE
, "c⁄√˘(0): %s", 
	`°ªº‹
(
î∫o
));

163 
îr‹_‰ì_pid
;

169 #i‚de‡
NETLINK_ADD_MEMBERSHIP


170 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

175 i‡(
mu…iˇ°_group
 > 32

176 && 
	`£tsock›t
(
sock
->
fd
, 
SOL_NETLINK
, 
NETLINK_ADD_MEMBERSHIP
,

177 &
mu…iˇ°_group
,  multicast_group) < 0) {

178 
	`VLOG_ERR
(
LOG_MODULE
, "setsockopt(NETLINK_ADD_MEMBERSHIP,%d): %s",

179 
mu…iˇ°_group
, 
	`°ªº‹
(
î∫o
));

180 
îr‹_‰ì_pid
;

183 *
sockp
 = 
sock
;

186 
îr‹_‰ì_pid
:

187 
	`‰ì_pid
(
sock
->
pid
);

188 
îr‹
:

189 i‡(
ªtvÆ
 == 0) {

190 
ªtvÆ
 = 
î∫o
;

191 i‡(
ªtvÆ
 == 0) {

192 
ªtvÆ
 = 
EINVAL
;

195 i‡(
sock
->
fd
 >= 0) {

196 
	`˛o£
(
sock
->
fd
);

198 
	`‰ì
(
sock
);

199  
ªtvÆ
;

200 
	}
}

204 
	$∆_sock_de°roy
(
∆_sock
 *
sock
)

206 i‡(
sock
) {

207 
	`˛o£
(
sock
->
fd
);

208 
	`‰ì_pid
(
sock
->
pid
);

209 
	`‰ì
(
sock
);

211 
	}
}

221 
	$∆_sock_£nd
(
∆_sock
 *
sock
, c⁄° 
oÂbuf
 *
msg
, 
boﬁ
 
waô
)

223 
îr‹
;

225 
	`∆_msg_∆msghdr
(
msg
)->
∆msg_Àn
 = msg->
size
;

227 
ªtvÆ
;

228 
ªtvÆ
 = 
	`£nd
(
sock
->
fd
, 
msg
->
d©a
, msg->
size
, 
waô
 ? 0 : 
MSG_DONTWAIT
);

229 
îr‹
 = 
ªtvÆ
 < 0 ? 
î∫o
 : 0;

230 } 
îr‹
 =
EINTR
);

231 
	`log_∆msg
(
__func__
, 
îr‹
, 
msg
->
d©a
, msg->
size
);

232  
îr‹
;

233 
	}
}

243 
	$∆_sock_£ndv
(
∆_sock
 *
sock
, c⁄° 
iovec
 
iov
[], 
size_t
 
n_iov
,

244 
boﬁ
 
waô
)

246 
msghdr
 
msg
;

247 
îr‹
;

249 
	`mem£t
(&
msg
, 0,  msg);

250 
msg
.
msg_iov
 = (
iovec
 *Ë
iov
;

251 
msg
.
msg_iovÀn
 = 
n_iov
;

253 
ªtvÆ
;

254 
ªtvÆ
 = 
	`£ndmsg
(
sock
->
fd
, &
msg
, 
waô
 ? 0 : 
MSG_DONTWAIT
);

255 
îr‹
 = 
ªtvÆ
 < 0 ? 
î∫o
 : 0;

256 } 
îr‹
 =
EINTR
);

257 i‡(
îr‹
 !
EAGAIN
) {

258 
	`log_∆msg
(
__func__
, 
îr‹
, 
iov
[0].
iov_ba£
, iov[0].
iov_Àn
);

260  
îr‹
;

261 
	}
}

272 
	$∆_sock_ªcv
(
∆_sock
 *
sock
, 
oÂbuf
 **
buÂ
, 
boﬁ
 
waô
)

274 
uöt8_t
 
tmp
;

275 
ssize_t
 
bufsize
 = 2048;

276 
ssize_t
 
nbyãs
, 
nbyãs2
;

277 
oÂbuf
 *
buf
;

278 
∆msghdr
 *nlmsghdr;

279 
iovec
 
iov
;

280 
msghdr
 
msg
 = {

281 .
msg_«me
 = 
NULL
,

282 .
msg_«mñí
 = 0,

283 .
msg_iov
 = &
iov
,

284 .
msg_iovÀn
 = 1,

285 .
msg_c⁄åﬁ
 = 
NULL
,

286 .
msg_c⁄åﬁÀn
 = 0,

287 .
msg_Êags
 = 0

290 
buf
 = 
	`oÂbuf_√w
(
bufsize
);

291 *
buÂ
 = 
NULL
;

293 
åy_agaö
:

298 
∆msghdr
 = 
	`oÂbuf_put_unöô
(
buf
, 
bufsize
);

299 
iov
.
iov_ba£
 = 
∆msghdr
;

300 
iov
.
iov_Àn
 = 
bufsize
;

302 
nbyãs
 = 
	`ªcvmsg
(
sock
->
fd
, &
msg
, (
waô
 ? 0 : 
MSG_DONTWAIT
Ë| 
MSG_PEEK
);

303 } 
nbyãs
 < 0 && 
î∫o
 =
EINTR
);

304 i‡(
nbyãs
 < 0) {

305 
	`oÂbuf_dñëe
(
buf
);

306  
î∫o
;

308 i‡(
msg
.
msg_Êags
 & 
MSG_TRUNC
) {

309 
bufsize
 *= 2;

310 
	`oÂbuf_ªöô
(
buf
, 
bufsize
);

311 
åy_agaö
;

313 
buf
->
size
 = 
nbyãs
;

316 
iov
.
iov_ba£
 = &
tmp
;

317 
iov
.
iov_Àn
 = 1;

319 
nbyãs2
 = 
	`ªcvmsg
(
sock
->
fd
, &
msg
, 
MSG_DONTWAIT
);

320 } 
nbyãs2
 < 0 && 
î∫o
 =
EINTR
);

321 i‡(
nbyãs2
 < 0) {

322 i‡(
î∫o
 =
ENOBUFS
) {

327 
	`oÂbuf_dñëe
(
buf
);

328  
ENOBUFS
;

330 
	`VLOG_ERR_RL
(
LOG_MODULE
, &
æ
, "failedÅoÑemoveÇlmsg from socket: %s\n",

331 
	`°ªº‹
(
î∫o
));

334 i‡(
nbyãs
 <  *
∆msghdr


335 || 
∆msghdr
->
∆msg_Àn
 <  *nlmsghdr

336 || 
∆msghdr
->
∆msg_Àn
 > 
nbyãs
) {

337 
	`VLOG_ERR_RL
(
LOG_MODULE
, &
æ
, "received invalidÇlmsg (%zd bytes < %d)",

338 
bufsize
, 
NLMSG_HDRLEN
);

339 
	`oÂbuf_dñëe
(
buf
);

340  
EPROTO
;

342 *
buÂ
 = 
buf
;

343 
	`log_∆msg
(
__func__
, 0, 
buf
->
d©a
, buf->
size
);

345 
	}
}

379 
	$∆_sock_å™ß˘
(
∆_sock
 *
sock
,

380 c⁄° 
oÂbuf
 *
ªque°
, oÂbu‡**
ª∂yp
)

382 
uöt32_t
 
£q
 = 
	`∆_msg_∆msghdr
(
ªque°
)->
∆msg_£q
;

383 
∆msghdr
 *nlmsghdr;

384 
oÂbuf
 *
ª∂y
;

385 
ªtvÆ
;

387 *
ª∂yp
 = 
NULL
;

391 
	`∆_msg_∆msghdr
(
ªque°
)->
∆msg_Êags
 |
NLM_F_ACK
;

393 
£nd
:

394 
ªtvÆ
 = 
	`∆_sock_£nd
(
sock
, 
ªque°
, 
åue
);

395 i‡(
ªtvÆ
) {

396  
ªtvÆ
;

399 
ªcv
:

400 
ªtvÆ
 = 
	`∆_sock_ªcv
(
sock
, &
ª∂y
, 
åue
);

401 i‡(
ªtvÆ
) {

402 i‡(
ªtvÆ
 =
ENOBUFS
) {

403 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "receive buffer overflow,ÑesendingÑequest");

404 
£nd
;

406  
ªtvÆ
;

409 
∆msghdr
 = 
	`∆_msg_∆msghdr
(
ª∂y
);

410 i‡(
£q
 !
∆msghdr
->
∆msg_£q
) {

411 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "ign‹ög seq %"
PRIu32
" !=Éxpected %"PRIu32,

412 
	`∆_msg_∆msghdr
(
ª∂y
)->
∆msg_£q
, 
£q
);

413 
	`oÂbuf_dñëe
(
ª∂y
);

414 
ªcv
;

416 i‡(
	`∆_msg_∆msgîr
(
ª∂y
, &
ªtvÆ
)) {

417 
	`oÂbuf_dñëe
(
ª∂y
);

418 i‡(
ªtvÆ
) {

419 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "received NAKÉrror=%d (%s)",

420 
ªtvÆ
, 
	`°ªº‹
(retval));

422  
ªtvÆ
 !
EAGAIN
 ?ÑëvÆ : 
EPROTO
;

425 *
ª∂yp
 = 
ª∂y
;

427 
	}
}

432 
	$∆_sock_waô
(c⁄° 
∆_sock
 *
sock
, 
evíts
)

434 
	`pﬁl_fd_waô
(
sock
->
fd
, 
evíts
);

435 
	}
}

442 
∆msghdr
 *

443 
	$∆_msg_∆msghdr
(c⁄° 
oÂbuf
 *
msg
)

445  
	`oÂbuf_©_as£π
(
msg
, 0, 
NLMSG_HDRLEN
);

446 
	}
}

452 
gílmsghdr
 *

453 
	$∆_msg_gílmsghdr
(c⁄° 
oÂbuf
 *
msg
)

455  
	`oÂbuf_©
(
msg
, 
NLMSG_HDRLEN
, 
GENL_HDRLEN
);

456 
	}
}

463 
boﬁ


464 
	$∆_msg_∆msgîr
(c⁄° 
oÂbuf
 *
msg
, *
îr‹p
)

466 i‡(
	`∆_msg_∆msghdr
(
msg
)->
∆msg_ty≥
 =
NLMSG_ERROR
) {

467 
∆msgîr
 *
îr
 = 
	`oÂbuf_©
(
msg
, 
NLMSG_HDRLEN
,  *err);

468 
code
 = 
EPROTO
;

469 i‡(!
îr
) {

470 
	`VLOG_ERR_RL
(
LOG_MODULE
, &
æ
, "received invalidÇlmsgerr (%zd bytes < %zd)",

471 
msg
->
size
, 
NLMSG_HDRLEN
 +  *
îr
);

472 } i‡(
îr
->
îr‹
 <0 &&Éº->îr‹ > 
INT_MIN
) {

473 
code
 = -
îr
->
îr‹
;

475 i‡(
îr‹p
) {

476 *
îr‹p
 = 
code
;

478  
åue
;

480  
Ál£
;

482 
	}
}

487 
	$∆_msg_ª£rve
(
oÂbuf
 *
msg
, 
size_t
 
size
)

489 
	`oÂbuf_¥óŒoc_èûroom
(
msg
, 
	`NLMSG_ALIGN
(
size
));

490 
	}
}

509 
	$∆_msg_put_∆msghdr
(
oÂbuf
 *
msg
, 
∆_sock
 *
sock
,

510 
size_t
 
ex≥˘ed_∑ylﬂd
, 
uöt32_t
 
ty≥
, uöt32_à
Êags
)

512 
∆msghdr
 *nlmsghdr;

514 
	`as£π
(
msg
->
size
 == 0);

516 
	`∆_msg_ª£rve
(
msg
, 
NLMSG_HDRLEN
 + 
ex≥˘ed_∑ylﬂd
);

517 
∆msghdr
 = 
	`∆_msg_put_unöô
(
msg
, 
NLMSG_HDRLEN
);

518 
∆msghdr
->
∆msg_Àn
 = 0;

519 
∆msghdr
->
∆msg_ty≥
 = 
ty≥
;

520 
∆msghdr
->
∆msg_Êags
 = 
Êags
;

521 
∆msghdr
->
∆msg_£q
 = ++
√xt_£q
;

522 
∆msghdr
->
∆msg_pid
 = 
sock
->
pid
;

523 
	}
}

545 
	$∆_msg_put_gílmsghdr
(
oÂbuf
 *
msg
, 
∆_sock
 *
sock
,

546 
size_t
 
ex≥˘ed_∑ylﬂd
, 
Ámûy
, 
uöt32_t
 
Êags
,

547 
uöt8_t
 
cmd
, uöt8_à
vîsi⁄
)

549 
gílmsghdr
 *genlmsghdr;

551 
	`∆_msg_put_∆msghdr
(
msg
, 
sock
, 
GENL_HDRLEN
 + 
ex≥˘ed_∑ylﬂd
,

552 
Ámûy
, 
Êags
);

553 
	`as£π
(
msg
->
size
 =
NLMSG_HDRLEN
);

554 
gílmsghdr
 = 
	`∆_msg_put_unöô
(
msg
, 
GENL_HDRLEN
);

555 
gílmsghdr
->
cmd
 = cmd;

556 
gílmsghdr
->
vîsi⁄
 = version;

557 
gílmsghdr
->
ª£rved
 = 0;

558 
	}
}

564 
	$∆_msg_put
(
oÂbuf
 *
msg
, c⁄° *
d©a
, 
size_t
 
size
)

566 
	`mem˝y
(
	`∆_msg_put_unöô
(
msg
, 
size
), 
d©a
, size);

567 
	}
}

573 
	$∆_msg_put_unöô
(
oÂbuf
 *
msg
, 
size_t
 
size
)

575 
size_t
 
∑d
 = 
	`NLMSG_ALIGN
(
size
) - size;

576 *
p
 = 
	`oÂbuf_put_unöô
(
msg
, 
size
 + 
∑d
);

577 i‡(
∑d
) {

578 
	`mem£t
(
p
 + 
size
, 0, 
∑d
);

580  
p
;

581 
	}
}

588 
	$∆_msg_put_un•ec_unöô
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, 
size_t
 
size
)

590 
size_t
 
tŸÆ_size
 = 
NLA_HDRLEN
 + 
size
;

591 
∆©å
* 
∆a
 = 
	`∆_msg_put_unöô
(
msg
, 
tŸÆ_size
);

592 
	`as£π
(
	`NLA_ALIGN
(
tŸÆ_size
Ë<
UINT16_MAX
);

593 
∆a
->
∆a_Àn
 = 
tŸÆ_size
;

594 
∆a
->
∆a_ty≥
 = 
ty≥
;

595  
∆a
 + 1;

596 
	}
}

603 
	$∆_msg_put_un•ec
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
,

604 c⁄° *
d©a
, 
size_t
 
size
)

606 
	`mem˝y
(
	`∆_msg_put_un•ec_unöô
(
msg
, 
ty≥
, 
size
), 
d©a
, size);

607 
	}
}

613 
	$∆_msg_put_Êag
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
)

615 
	`∆_msg_put_un•ec
(
msg
, 
ty≥
, 
NULL
, 0);

616 
	}
}

621 
	$∆_msg_put_u8
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, 
uöt8_t
 
vÆue
)

623 
	`∆_msg_put_un•ec
(
msg
, 
ty≥
, &
vÆue
,  value);

624 
	}
}

629 
	$∆_msg_put_u16
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, uöt16_à
vÆue
)

631 
	`∆_msg_put_un•ec
(
msg
, 
ty≥
, &
vÆue
,  value);

632 
	}
}

637 
	$∆_msg_put_u32
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, 
uöt32_t
 
vÆue
)

639 
	`∆_msg_put_un•ec
(
msg
, 
ty≥
, &
vÆue
,  value);

640 
	}
}

645 
	$∆_msg_put_u64
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, 
uöt64_t
 
vÆue
)

647 
	`∆_msg_put_un•ec
(
msg
, 
ty≥
, &
vÆue
,  value);

648 
	}
}

653 
	$∆_msg_put_°rög
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, c⁄° *
vÆue
)

655 
	`∆_msg_put_un•ec
(
msg
, 
ty≥
, 
vÆue
, 
	`°æí
(value) + 1);

656 
	}
}

662 
	$∆_msg_put_√°ed
(
oÂbuf
 *
msg
,

663 
uöt16_t
 
ty≥
, 
oÂbuf
 *
√°ed_msg
)

665 
	`∆_msg_∆msghdr
(
√°ed_msg
)->
∆msg_Àn
 =Çe°ed_msg->
size
;

666 
	`∆_msg_put_un•ec
(
msg
, 
ty≥
, 
√°ed_msg
->
d©a
,Çe°ed_msg->
size
);

667 
	}
}

671 
	$∆_©å_gë
(c⁄° 
∆©å
 *
∆a
)

673 
	`as£π
(
∆a
->
∆a_Àn
 >
NLA_HDRLEN
);

674  
∆a
 + 1;

675 
	}
}

678 
size_t


679 
	$∆_©å_gë_size
(c⁄° 
∆©å
 *
∆a
)

681 
	`as£π
(
∆a
->
∆a_Àn
 >
NLA_HDRLEN
);

682  
∆a
->
∆a_Àn
 - 
NLA_HDRLEN
;

683 
	}
}

688 
	$∆_©å_gë_un•ec
(c⁄° 
∆©å
 *
∆a
, 
size_t
 
size
)

690 
	`as£π
(
∆a
->
∆a_Àn
 >
NLA_HDRLEN
 + 
size
);

691  
∆a
 + 1;

692 
	}
}

696 
boﬁ


697 
	$∆_©å_gë_Êag
(c⁄° 
∆©å
 *
∆a
)

699  
∆a
 !
NULL
;

700 
	}
}

702 
	#NL_ATTR_GET_AS
(
NLA
, 
TYPE
) \

703 (*(
TYPE
*Ë
	`∆_©å_gë_un•ec
(
∆a
, (TYPE)))

	)

708 
uöt8_t


709 
	$∆_©å_gë_u8
(c⁄° 
∆©å
 *
∆a
)

711  
	`NL_ATTR_GET_AS
(
∆a
, 
uöt8_t
);

712 
	}
}

717 
uöt16_t


718 
	$∆_©å_gë_u16
(c⁄° 
∆©å
 *
∆a
)

720  
	`NL_ATTR_GET_AS
(
∆a
, 
uöt16_t
);

721 
	}
}

726 
uöt32_t


727 
	$∆_©å_gë_u32
(c⁄° 
∆©å
 *
∆a
)

729  
	`NL_ATTR_GET_AS
(
∆a
, 
uöt32_t
);

730 
	}
}

735 
uöt64_t


736 
	$∆_©å_gë_u64
(c⁄° 
∆©å
 *
∆a
)

738  
	`NL_ATTR_GET_AS
(
∆a
, 
uöt64_t
);

739 
	}
}

745 
	$∆_©å_gë_°rög
(c⁄° 
∆©å
 *
∆a
)

747 
	`as£π
(
∆a
->
∆a_Àn
 > 
NLA_HDRLEN
);

748 
	`as£π
(
	`memchr
(
	`∆_©å_gë
(
∆a
), '\0',Çœ->
∆a_Àn
 - 
NLA_HDRLEN
Ë!
NULL
);

749  
	`∆_©å_gë
(
∆a
);

750 
	}
}

753 c⁄° 
size_t
 
	g©å_Àn_ønge
[][2] = {

754 [0 ... 
N_NL_ATTR_TYPES
 - 1] = { 0, 
SIZE_MAX
 },

755 [
NL_A_U8
] = { 1, 1 },

756 [
NL_A_U16
] = { 2, 2 },

757 [
NL_A_U32
] = { 4, 4 },

758 [
NL_A_U64
] = { 8, 8 },

759 [
NL_A_STRING
] = { 1, 
SIZE_MAX
 },

760 [
NL_A_FLAG
] = { 0, 
SIZE_MAX
 },

761 [
NL_A_NESTED
] = { 
NLMSG_HDRLEN
, 
SIZE_MAX
 },

771 
boﬁ


772 
	$∆_pﬁicy_∑r£
(c⁄° 
oÂbuf
 *
msg
, 
size_t
 
∆a_off£t
,

773 c⁄° 
∆_pﬁicy
 
pﬁicy
[],

774 
∆©å
 *
©ås
[], 
size_t
 
n_©ås
)

776 *
p
, *
èû
;

777 
size_t
 
n_ªquúed
;

778 
size_t
 
i
;

780 
n_ªquúed
 = 0;

781 
i
 = 0; i < 
n_©ås
; i++) {

782 
©ås
[
i
] = 
NULL
;

784 
	`as£π
(
pﬁicy
[
i
].
ty≥
 < 
N_NL_ATTR_TYPES
);

785 i‡(
pﬁicy
[
i
].
ty≥
 !
NL_A_NO_ATTR


786 && 
pﬁicy
[
i
].
ty≥
 !
NL_A_FLAG


787 && !
pﬁicy
[
i
].
›ti⁄Æ
) {

788 
n_ªquúed
++;

792 
p
 = 
	`oÂbuf_©
(
msg
, 
∆a_off£t
, 0);

793 i‡(
p
 =
NULL
) {

794 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "missing headers inÇl_policy_parse");

795  
Ál£
;

797 
èû
 = 
	`oÂbuf_èû
(
msg
);

799 
p
 < 
èû
) {

800 
size_t
 
off£t
 = (*)
p
 - (*)
msg
->
d©a
;

801 
∆©å
 *
∆a
 = 
p
;

802 
size_t
 
Àn
, 
Æig√d_Àn
;

803 
uöt16_t
 
ty≥
;

806 i‡(
∆a
->
∆a_Àn
 < 
NLA_HDRLEN
) {

807 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "%zu:áâ∏sh‹ã∏th™ NLA_HDRLEN (%"
PRIu16
")",

808 
off£t
, 
∆a
->
∆a_Àn
);

809  
Ál£
;

811 
Àn
 = 
∆a
->
∆a_Àn
 - 
NLA_HDRLEN
;

812 
Æig√d_Àn
 = 
	`NLA_ALIGN
(
Àn
);

813 i‡(
Æig√d_Àn
 > (*)
èû
 - (*)
p
) {

814 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "%zu:áâ∏%"
PRIu16
"áligned dataÜen (%zu) "

816 
off£t
, 
∆a
->
∆a_ty≥
, 
Æig√d_Àn
,

817 (*)
èû
 - (*)
p
);

818  
Ál£
;

821 
ty≥
 = 
∆a
->
∆a_ty≥
;

822 i‡(
ty≥
 < 
n_©ås
 && 
pﬁicy
[ty≥].ty≥ !
NL_A_NO_ATTR
) {

823 c⁄° 
∆_pﬁicy
 *
p
 = &
pﬁicy
[
ty≥
];

824 
size_t
 
mö_Àn
, 
max_Àn
;

827 
mö_Àn
 = 
p
->mö_À¿?Ö->mö_À¿: 
©å_Àn_ønge
[p->
ty≥
][0];

828 
max_Àn
 = 
p
->max_À¿?Ö->max_À¿: 
©å_Àn_ønge
[p->
ty≥
][1];

829 i‡(
Àn
 < 
mö_Àn
 ||Üí > 
max_Àn
) {

830 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "%zu:áâ∏%"
PRIu16
"Üength %zuÇot in "

832 
off£t
, 
ty≥
, 
Àn
, 
mö_Àn
, 
max_Àn
);

833  
Ál£
;

835 i‡(
p
->
ty≥
 =
NL_A_STRING
) {

836 i‡(((*Ë
∆a
)[∆a->
∆a_Àn
 - 1]) {

837 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "%zu:áâ∏%"
PRIu16
"ÜacksÇullátÉnd",

838 
off£t
, 
ty≥
);

839  
Ál£
;

841 i‡(
	`memchr
(
∆a
 + 1, '\0', 
Àn
 - 1Ë!
NULL
) {

842 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "%zu:áâ∏%"
PRIu16
" has badÜength",

843 
off£t
, 
ty≥
);

844  
Ál£
;

847 i‡(!
p
->
›ti⁄Æ
 && 
©ås
[
ty≥
] =
NULL
) {

848 
	`as£π
(
n_ªquúed
 > 0);

849 --
n_ªquúed
;

851 
©ås
[
ty≥
] = 
∆a
;

855 
p
 = (*Ì + 
	`NLA_ALIGN
(
∆a
->
∆a_Àn
);

857 i‡(
n_ªquúed
) {

858 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "%zuÑequúedáâr†missög", 
n_ªquúed
);

859  
Ál£
;

861  
åue
;

862 
	}
}

866 c⁄° 
∆_pﬁicy
 
	gÁmûy_pﬁicy
[
CTRL_ATTR_MAX
 + 1] = {

867 [
CTRL_ATTR_FAMILY_ID
] = {.
ty≥
 = 
NL_A_U16
},

870 
	$do_lookup_gíl_Ámûy
(c⁄° *
«me
)

872 
∆_sock
 *
sock
;

873 
oÂbuf
 
ªque°
, *
ª∂y
;

874 
∆©å
 *
©ås
[
	`ARRAY_SIZE
(
Ámûy_pﬁicy
)];

875 
ªtvÆ
;

877 
ªtvÆ
 = 
	`∆_sock_¸óã
(
NETLINK_GENERIC
, 0, 0, 0, &
sock
);

878 i‡(
ªtvÆ
) {

879  -
ªtvÆ
;

882 
	`oÂbuf_öô
(&
ªque°
, 0);

883 
	`∆_msg_put_gílmsghdr
(&
ªque°
, 
sock
, 0, 
GENL_ID_CTRL
, 
NLM_F_REQUEST
,

884 
CTRL_CMD_GETFAMILY
, 1);

885 
	`∆_msg_put_°rög
(&
ªque°
, 
CTRL_ATTR_FAMILY_NAME
, 
«me
);

886 
ªtvÆ
 = 
	`∆_sock_å™ß˘
(
sock
, &
ªque°
, &
ª∂y
);

887 
	`oÂbuf_unöô
(&
ªque°
);

888 i‡(
ªtvÆ
) {

889 
	`∆_sock_de°roy
(
sock
);

890  -
ªtvÆ
;

893 i‡(!
	`∆_pﬁicy_∑r£
(
ª∂y
, 
NLMSG_HDRLEN
 + 
GENL_HDRLEN
,

894 
Ámûy_pﬁicy
, 
©ås
, 
	`ARRAY_SIZE
(family_policy))) {

895 
	`∆_sock_de°roy
(
sock
);

896 
	`oÂbuf_dñëe
(
ª∂y
);

897  -
EPROTO
;

900 
ªtvÆ
 = 
	`∆_©å_gë_u16
(
©ås
[
CTRL_ATTR_FAMILY_ID
]);

901 i‡(
ªtvÆ
 == 0) {

902 
ªtvÆ
 = -
EPROTO
;

904 
	`∆_sock_de°roy
(
sock
);

905 
	`oÂbuf_dñëe
(
ª∂y
);

906  
ªtvÆ
;

907 
	}
}

914 
	$∆_lookup_gíl_Ámûy
(c⁄° *
«me
, *
numbî
)

916 i‡(*
numbî
 == 0) {

917 *
numbî
 = 
	`do_lookup_gíl_Ámûy
(
«me
);

918 
	`as£π
(*
numbî
 != 0);

920  *
numbî
 > 0 ? 0 : -*number;

921 
	}
}

935 
	#SOCKET_BITS
 10

	)

936 
	#MAX_SOCKETS
 (1u << 
SOCKET_BITS
)

	)

938 
	#PROCESS_BITS
 (32 - 
SOCKET_BITS
)

	)

939 
	#MAX_PROCESSES
 (1u << 
PROCESS_BITS
)

	)

940 
	#PROCESS_MASK
 ((
uöt32_t
Ë(
MAX_PROCESSES
 - 1))

	)

943 
uöt32_t
 
	gavaû_sockës
[
ROUND_UP
(
MAX_SOCKETS
, 32)];

947 
	$Æloc_pid
(
uöt32_t
 *
pid
)

949 
i
;

951 
i
 = 0; i < 
MAX_SOCKETS
; i++) {

952 i‡((
avaû_sockës
[
i
 / 32] & (1u << (i % 32))) == 0) {

953 
avaû_sockës
[
i
 / 32] |= 1u << (i % 32);

954 *
pid
 = (
	`gëpid
(Ë& 
PROCESS_MASK
Ë| (
i
 << 
PROCESS_BITS
);

958 
	`VLOG_ERR
(
LOG_MODULE
, "netlinkÖid spaceÉxhausted");

959  
ENOBUFS
;

960 
	}
}

964 
	$‰ì_pid
(
uöt32_t
 
pid
)

966 
sock
 = 
pid
 >> 
PROCESS_BITS
;

967 
	`as£π
(
avaû_sockës
[
sock
 / 32] & (1u << (sock % 32)));

968 
avaû_sockës
[
sock
 / 32] &= ~(1u << (sock % 32));

969 
	}
}

972 
	$∆msghdr_to_°rög
(c⁄° 
∆msghdr
 *
h
, 
ds
 *ds)

974 
	s∆msg_Êag
 {

975 
bôs
;

976 c⁄° *
«me
;

978 c⁄° 
∆msg_Êag
 
Êags
[] = {

979 { 
NLM_F_REQUEST
, "REQUEST" },

980 { 
NLM_F_MULTI
, "MULTI" },

981 { 
NLM_F_ACK
, "ACK" },

982 { 
NLM_F_ECHO
, "ECHO" },

983 { 
NLM_F_DUMP
, "DUMP" },

984 { 
NLM_F_ROOT
, "ROOT" },

985 { 
NLM_F_MATCH
, "MATCH" },

986 { 
NLM_F_ATOMIC
, "ATOMIC" },

988 c⁄° 
∆msg_Êag
 *
Êag
;

989 
uöt16_t
 
Êags_À·
;

991 
	`ds_put_f‹m©
(
ds
, "∆÷í:%"
PRIu32
",Åy≥=%"
PRIu16
,

992 
h
->
∆msg_Àn
, h->
∆msg_ty≥
);

993 i‡(
h
->
∆msg_ty≥
 =
NLMSG_NOOP
) {

994 
	`ds_put_c°r
(
ds
, "(no-op)");

995 } i‡(
h
->
∆msg_ty≥
 =
NLMSG_ERROR
) {

996 
	`ds_put_c°r
(
ds
, "(error)");

997 } i‡(
h
->
∆msg_ty≥
 =
NLMSG_DONE
) {

998 
	`ds_put_c°r
(
ds
, "(done)");

999 } i‡(
h
->
∆msg_ty≥
 =
NLMSG_OVERRUN
) {

1000 
	`ds_put_c°r
(
ds
, "(overrun)");

1001 } i‡(
h
->
∆msg_ty≥
 < 
NLMSG_MIN_TYPE
) {

1002 
	`ds_put_c°r
(
ds
, "(reserved)");

1004 
	`ds_put_c°r
(
ds
, "(family-defined)");

1006 
	`ds_put_f‹m©
(
ds
, ", fœgs=%"
PRIx16
, 
h
->
∆msg_Êags
);

1007 
Êags_À·
 = 
h
->
∆msg_Êags
;

1008 
Êag
 = 
Êags
; fœg < &Êags[
	`ARRAY_SIZE
(flags)]; flag++) {

1009 i‡((
Êags_À·
 & 
Êag
->
bôs
) == flag->bits) {

1010 
	`ds_put_f‹m©
(
ds
, "[%s]", 
Êag
->
«me
);

1011 
Êags_À·
 &~
Êag
->
bôs
;

1014 i‡(
Êags_À·
) {

1015 
	`ds_put_f‹m©
(
ds
, "[OTHER:%"
PRIx16
"]", 
Êags_À·
);

1017 
	`ds_put_f‹m©
(
ds
, ", seq=%"
PRIx32
",Öid=%"
PRIu32
"(%d:%d))",

1018 
h
->
∆msg_£q
, h->
∆msg_pid
,

1019 (Ë(
h
->
∆msg_pid
 & 
PROCESS_MASK
),

1020 (Ë(
h
->
∆msg_pid
 >> 
PROCESS_BITS
));

1021 
	}
}

1024 
	$∆msg_to_°rög
(c⁄° 
oÂbuf
 *
buf„r
)

1026 
ds
 d†
DS_EMPTY_INITIALIZER
;

1027 c⁄° 
∆msghdr
 *
h
 = 
	`oÂbuf_©
(
buf„r
, 0, 
NLMSG_HDRLEN
);

1028 i‡(
h
) {

1029 
	`∆msghdr_to_°rög
(
h
, &
ds
);

1030 i‡(
h
->
∆msg_ty≥
 =
NLMSG_ERROR
) {

1031 c⁄° 
∆msgîr
 *
e
;

1032 
e
 = 
	`oÂbuf_©
(
buf„r
, 
NLMSG_HDRLEN
,

1033 
	`NLMSG_ALIGN
((
∆msgîr
)));

1034 i‡(
e
) {

1035 
	`ds_put_f‹m©
(&
ds
, "Éº‹(%d", 
e
->
îr‹
);

1036 i‡(
e
->
îr‹
 < 0) {

1037 
	`ds_put_f‹m©
(&
ds
, "(%s)", 
	`°ªº‹
(-
e
->
îr‹
));

1039 
	`ds_put_c°r
(&
ds
, ", in-reply-to(");

1040 
	`∆msghdr_to_°rög
(&
e
->
msg
, &
ds
);

1041 
	`ds_put_c°r
(&
ds
, "))");

1043 
	`ds_put_c°r
(&
ds
, "Érror(truncated)");

1045 } i‡(
h
->
∆msg_ty≥
 =
NLMSG_DONE
) {

1046 *
îr‹
 = 
	`oÂbuf_©
(
buf„r
, 
NLMSG_HDRLEN
,  *error);

1047 i‡(
îr‹
) {

1048 
	`ds_put_f‹m©
(&
ds
, " d⁄e(%d", *
îr‹
);

1049 i‡(*
îr‹
 < 0) {

1050 
	`ds_put_f‹m©
(&
ds
, "(%s)", 
	`°ªº‹
(-*
îr‹
));

1052 
	`ds_put_c°r
(&
ds
, ")");

1054 
	`ds_put_c°r
(&
ds
, " done(truncated)");

1058 
	`ds_put_c°r
(&
ds
, "nl(truncated)");

1060  
ds
.
°rög
;

1061 
	}
}

1064 
	$log_∆msg
(c⁄° *
fun˘i⁄
, 
îr‹
,

1065 c⁄° *
mesßge
, 
size_t
 
size
)

1067 
oÂbuf
 
buf„r
;

1068 *
∆msg
;

1070 i‡(!
	`VLOG_IS_DBG_ENABLED
(
LOG_MODULE
)) {

1074 
buf„r
.
d©a
 = (*Ë
mesßge
;

1075 
buf„r
.
size
 = size;

1076 
∆msg
 = 
	`∆msg_to_°rög
(&
buf„r
);

1077 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "%†(%s): %s", 
fun˘i⁄
, 
	`°ªº‹
(
îr‹
), 
∆msg
);

1078 
	`‰ì
(
∆msg
);

1079 
	}
}

	@lib/netlink.h

34 #i‚de‡
NETLINK_H


35 
	#NETLINK_H
 1

	)

46 
	~<°dboﬁ.h
>

47 
	~<sys/uio.h
>

48 
	~<°döt.h
>

50 
	goÂbuf
;

51 
	g∆_sock
;

52 
	g∆©å
;

56 
∆_sock_¸óã
(
¥Ÿocﬁ
, 
mu…iˇ°_group
,

57 
size_t
 
so_¢dbuf
, size_à
so_rcvbuf
,

58 
∆_sock
 **);

59 
∆_sock_de°roy
(
∆_sock
 *);

61 
∆_sock_£nd
(
∆_sock
 *, c⁄° 
oÂbuf
 *, 
boﬁ
 
waô
);

62 
∆_sock_£ndv
(
∆_sock
 *
sock
, c⁄° 
iovec
 
iov
[], 
size_t
 
n_iov
,

63 
boﬁ
 
waô
);

64 
∆_sock_ªcv
(
∆_sock
 *, 
oÂbuf
 **, 
boﬁ
 
waô
);

65 
∆_sock_å™ß˘
(
∆_sock
 *, c⁄° 
oÂbuf
 *
ªque°
,

66 
oÂbuf
 **
ª∂y
);

68 
∆_sock_waô
(c⁄° 
∆_sock
 *, 
evíts
);

73 
∆msghdr
 *
∆_msg_∆msghdr
(c⁄° 
oÂbuf
 *);

74 
gílmsghdr
 *
∆_msg_gílmsghdr
(c⁄° 
oÂbuf
 *);

75 
boﬁ
 
∆_msg_∆msgîr
(c⁄° 
oÂbuf
 *, *
îr‹
);

76 
∆_msg_ª£rve
(
oÂbuf
 *, 
size_t
);

79 
∆_msg_put_∆msghdr
(
oÂbuf
 *, 
∆_sock
 *,

80 
size_t
 
ex≥˘ed_∑ylﬂd
,

81 
uöt32_t
 
ty≥
, uöt32_à
Êags
);

82 
∆_msg_put_gílmsghdr
(
oÂbuf
 *, 
∆_sock
 *,

83 
size_t
 
ex≥˘ed_∑ylﬂd
, 
Ámûy
, 
uöt32_t
 
Êags
,

84 
uöt8_t
 
cmd
, uöt8_à
vîsi⁄
);

85 
∆_msg_put
(
oÂbuf
 *, c⁄° *, 
size_t
);

86 *
∆_msg_put_unöô
(
oÂbuf
 *, 
size_t
);

89 *
∆_msg_put_un•ec_unöô
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, 
size_t
);

90 
∆_msg_put_un•ec
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, c⁄° *, 
size_t
);

91 
∆_msg_put_Êag
(
oÂbuf
 *, 
uöt16_t
 
ty≥
);

92 
∆_msg_put_u8
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, 
uöt8_t
 
vÆue
);

93 
∆_msg_put_u16
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, uöt16_à
vÆue
);

94 
∆_msg_put_u32
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, 
uöt32_t
 
vÆue
);

95 
∆_msg_put_u64
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, 
uöt64_t
 
vÆue
);

96 
∆_msg_put_°rög
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, c⁄° *
vÆue
);

97 
∆_msg_put_√°ed
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, ofpbuf *);

100 
	e∆_©å_ty≥


102 
	mNL_A_NO_ATTR
 = 0,

103 
	mNL_A_UNSPEC
,

104 
	mNL_A_U8
,

105 
	mNL_A_U16
,

106 
	mNL_A_U32
,

107 
	mNL_A_U64
,

108 
	mNL_A_STRING
,

109 
	mNL_A_FLAG
,

110 
	mNL_A_NESTED
,

111 
	mN_NL_ATTR_TYPES


115 c⁄° *
∆_©å_gë
(c⁄° 
∆©å
 *);

116 
size_t
 
∆_©å_gë_size
(c⁄° 
∆©å
 *);

117 c⁄° *
∆_©å_gë_un•ec
(c⁄° 
∆©å
 *, 
size_t
 
size
);

118 
boﬁ
 
∆_©å_gë_Êag
(c⁄° 
∆©å
 *);

119 
uöt8_t
 
∆_©å_gë_u8
(c⁄° 
∆©å
 *);

120 
uöt16_t
 
∆_©å_gë_u16
(c⁄° 
∆©å
 *);

121 
uöt32_t
 
∆_©å_gë_u32
(c⁄° 
∆©å
 *);

122 
uöt64_t
 
∆_©å_gë_u64
(c⁄° 
∆©å
 *);

123 c⁄° *
∆_©å_gë_°rög
(c⁄° 
∆©å
 *);

129 
	s∆_pﬁicy


131 
∆_©å_ty≥
 
	mty≥
;

132 
size_t
 
	mmö_Àn
, 
	mmax_Àn
;

133 
boﬁ
 
	m›ti⁄Æ
;

136 
boﬁ
 
∆_pﬁicy_∑r£
(c⁄° 
oÂbuf
 *, 
size_t
 
off£t
,

137 c⁄° 
∆_pﬁicy
[],

138 
∆©å
 *[], 
size_t
 
n_©ås
);

142 
∆_lookup_gíl_Ámûy
(c⁄° *
«me
, *
numbî
);

	@lib/ofp.c

55 
	~<c⁄fig.h
>

56 
	~<as£π.h
>

57 
	~<î∫o.h
>

58 
	~<öây≥s.h
>

59 
	~<√töë/ö.h
>

60 
	~<°dlib.h
>

61 
	~"oÂ.h
"

62 
	~"oÂbuf.h
"

63 
	~"›íÊow/›íÊow.h
"

64 
	~"›íÊow/nicúa-ext.h
"

65 
	~"∑ckës.h
"

66 
	~"øndom.h
"

67 
	~"utû.h
"

69 
	#LOG_MODULE
 
VLM_oÂ


	)

70 
	~"vlog.h
"

74 
ölöe
 
uöt32_t


75 
	$Æloc_xid
()

77  
	`øndom_uöt32
();

78 
	}
}

94 
	$make_›íÊow
(
size_t
 
›íÊow_Àn
, 
uöt8_t
 
ty≥
, 
oÂbuf
 **
buf„Ω
)

96 *
buf„Ω
 = 
	`oÂbuf_√w
(
›íÊow_Àn
);

97  
	`put_›íÊow_xid
(
›íÊow_Àn
, 
ty≥
, 
	`Æloc_xid
(), *
buf„Ω
);

98 
	}
}

116 
	$make_›íÊow_xid
(
size_t
 
›íÊow_Àn
, 
uöt8_t
 
ty≥
, 
uöt32_t
 
xid
,

117 
oÂbuf
 **
buf„Ω
)

119 *
buf„Ω
 = 
	`oÂbuf_√w
(
›íÊow_Àn
);

120  
	`put_›íÊow_xid
(
›íÊow_Àn
, 
ty≥
, 
xid
, *
buf„Ω
);

121 
	}
}

133 
	$put_›íÊow
(
size_t
 
›íÊow_Àn
, 
uöt8_t
 
ty≥
, 
oÂbuf
 *
buf„r
)

135  
	`put_›íÊow_xid
(
›íÊow_Àn
, 
ty≥
, 
	`Æloc_xid
(), 
buf„r
);

136 
	}
}

148 
	$put_›íÊow_xid
(
size_t
 
›íÊow_Àn
, 
uöt8_t
 
ty≥
, 
uöt32_t
 
xid
,

149 
oÂbuf
 *
buf„r
)

151 
oÂ_hódî
 *
oh
;

153 
	`as£π
(
›íÊow_Àn
 > *
oh
);

154 
	`as£π
(
›íÊow_Àn
 <
UINT16_MAX
);

156 
oh
 = 
	`oÂbuf_put_unöô
(
buf„r
, 
›íÊow_Àn
);

157 
oh
->
vîsi⁄
 = 
OFP_VERSION
;

158 
oh
->
ty≥
 =Åype;

159 
oh
->
Àngth
 = 
	`ht⁄s
(
›íÊow_Àn
);

160 
oh
->
xid
 = xid;

161 
	`mem£t
(
oh
 + 1, 0, 
›íÊow_Àn
 -  *oh);

162  
oh
;

163 
	}
}

168 
	$upd©e_›íÊow_Àngth
(
oÂbuf
 *
buf„r
)

170 
oÂ_hódî
 *
oh
 = 
	`oÂbuf_©_as£π
(
buf„r
, 0,  *oh);

171 
oh
->
Àngth
 = 
	`ht⁄s
(
buf„r
->
size
);

172 
	}
}

177 
	$upd©e_ö°ru˘i⁄_Àngth
(
oÂbuf
 *
buf„r
, 
size_t
 
oü_off£t
)

179 
oÂ_hódî
 *
oh
 = 
	`oÂbuf_©_as£π
(
buf„r
, 0,  *oh);

180 
oÂ_ö°ru˘i⁄
 *
ih
 = 
	`oÂbuf_©_as£π
(
buf„r
, 
oü_off£t
,

181  *
ih
);

182 
ih
->
Àn
 = 
	`ht⁄s
(
buf„r
->
size
 - 
oü_off£t
);

183 
	}
}

185 
oÂbuf
 *

186 
	$make_Êow_mod
(
uöt8_t
 
comm™d
, uöt8_à
èbÀ_id
,

187 c⁄° 
Êow
 *Êow, 
size_t
 
a˘i⁄s_Àn
)

189 
oÂ_Êow_mod
 *
ofm
;

190 
size_t
 
size
 =  *
ofm
 + 
a˘i⁄s_Àn
;

191 
oÂbuf
 *
out
 = 
	`oÂbuf_√w
(
size
);

192 
ofm
 = 
	`oÂbuf_put_zîos
(
out
,  *ofm);

193 
ofm
->
hódî
.
vîsi⁄
 = 
OFP_VERSION
;

194 
ofm
->
hódî
.
ty≥
 = 
OFPT_FLOW_MOD
;

195 
ofm
->
hódî
.
Àngth
 = 
	`ht⁄s
(
size
);

196 
ofm
->
cookõ
 = 0;

210 
ofm
->
comm™d
 = command;

211 
ofm
->
èbÀ_id
 =Åable_id;

213  
out
;

214 
	}
}

216 
oÂbuf
 *

217 
	$make_add_Êow
(c⁄° 
Êow
 *Êow, 
uöt32_t
 
buf„r_id
, 
uöt8_t
 
èbÀ_id
,

218 
uöt16_t
 
idÀ_timeout
, 
size_t
 
a˘i⁄s_Àn
)

220 
oÂ_ö°ru˘i⁄_a˘i⁄s
 *
oü
;

221 
size_t
 
ö°ru˘i⁄_Àn
 =  *
oü
 + 
a˘i⁄s_Àn
;

222 
oÂbuf
 *
out
 = 
	`make_Êow_mod
(
OFPFC_ADD
, 
èbÀ_id
,

223 
Êow
, 
ö°ru˘i⁄_Àn
);

224 
oÂ_Êow_mod
 *
ofm
 = 
out
->
d©a
;

225 
ofm
->
idÀ_timeout
 = 
	`ht⁄s
(idle_timeout);

226 
ofm
->
h¨d_timeout
 = 
	`ht⁄s
(
OFP_FLOW_PERMANENT
);

227 
ofm
->
buf„r_id
 = 
	`ht⁄l
(buffer_id);

229 
oü
 = 
	`oÂbuf_put_zîos
(
out
,  *oia);

230 
oü
->
ty≥
 = 
	`ht⁄s
(
OFPIT_APPLY_ACTIONS
);

231 
oü
->
Àn
 = 
	`ht⁄s
(
ö°ru˘i⁄_Àn
);

232  
out
;

233 
	}
}

237 
oÂbuf
 *

238 
	$make_dñ_Êow
(c⁄° 
Êow
 *Êow, 
uöt8_t
 
èbÀ_id
)

240 
oÂbuf
 *
out
 = 
	`make_Êow_mod
(
OFPFC_DELETE_STRICT
, 
èbÀ_id
, 
Êow
, 0);

241 
oÂ_Êow_mod
 *
ofm
 = 
out
->
d©a
;

242 
ofm
->
out_p‹t
 = 
	`ht⁄l
(
OFPP_ANY
);

243  
out
;

244 
	}
}

247 
oÂbuf
 *

248 
	$make_add_sim∂e_Êow
(c⁄° 
Êow
 *flow,

249 
uöt32_t
 
buf„r_id
, uöt32_à
out_p‹t
,

250 
uöt16_t
 
idÀ_timeout
)

252 i‡(
out_p‹t
 !
OFPP_ANY
) {

253 
oÂ_a˘i⁄_ouçut
 *
ﬂo
;

254 
oÂbuf
 *
buf„r
;

256 
buf„r
 = 
	`make_add_Êow
(
Êow
, 
buf„r_id
, 0x00, 
idÀ_timeout
,  *
ﬂo
);

257 
ﬂo
 = 
	`oÂbuf_put_zîos
(
buf„r
,  *oao);

258 
ﬂo
->
ty≥
 = 
	`ht⁄s
(
OFPAT_OUTPUT
);

259 
ﬂo
->
Àn
 = 
	`ht⁄s
( *oao);

260 
ﬂo
->
p‹t
 = 
	`ht⁄l
(
out_p‹t
);

261  
buf„r
;

263  
	`make_add_Êow
(
Êow
, 
buf„r_id
, 0, 
idÀ_timeout
, 0);

265 
	}
}

267 
oÂbuf
 *

268 
	$make_p‹t_desc_ªque°
(){

270 
oÂ_mu…ù¨t_ªque°
 *
desc
;

271 
oÂbuf
 *
out
 = 
	`oÂbuf_√w
( *
desc
);

272 
desc
 = 
	`oÂbuf_put_unöô
(
out
,  *desc);

273 
desc
->
hódî
.
vîsi⁄
 = 
OFP_VERSION
;

274 
desc
->
hódî
.
ty≥
 = 
OFPT_MULTIPART_REQUEST
;

275 
desc
->
hódî
.
Àngth
 = 
	`ht⁄s
( *desc);

276 
desc
->
hódî
.
xid
 = 
	`Æloc_xid
();

277 
desc
->
ty≥
 = 
	`ht⁄s
(
OFPMP_PORT_DESC
);

278 
desc
->
Êags
 = 0x0000;

279 
	`mem£t
(
desc
->
∑d
, 0x0, 4);

280  
out
;

282 
	}
}

284 
oÂbuf
 *

285 
	$make_∑ckë_out
(c⁄° 
oÂbuf
 *
∑ckë
, 
uöt32_t
 
buf„r_id
,

286 
uöt32_t
 
ö_p‹t
,

287 c⁄° 
oÂ_a˘i⁄_hódî
 *
a˘i⁄s
, 
size_t
 
n_a˘i⁄s
)

289 
size_t
 
a˘i⁄s_Àn
 = 
n_a˘i⁄s
 *  *
a˘i⁄s
;

290 
oÂ_∑ckë_out
 *
›o
;

291 
size_t
 
size
 =  *
›o
 + 
a˘i⁄s_Àn
 + (
∑ckë
 ?Öacket->size : 0);

292 
oÂbuf
 *
out
 = 
	`oÂbuf_√w
(
size
);

294 
›o
 = 
	`oÂbuf_put_unöô
(
out
,  *opo);

295 
›o
->
hódî
.
vîsi⁄
 = 
OFP_VERSION
;

296 
›o
->
hódî
.
ty≥
 = 
OFPT_PACKET_OUT
;

297 
›o
->
hódî
.
Àngth
 = 
	`ht⁄s
(
size
);

298 
›o
->
hódî
.
xid
 = 
	`ht⁄l
(0);

299 
›o
->
buf„r_id
 = 
	`ht⁄l
(buffer_id);

300 
›o
->
ö_p‹t
 = 
	`ht⁄l
(in_port);

301 
›o
->
a˘i⁄s_Àn
 = 
	`ht⁄s
(actions_len);

302 
	`oÂbuf_put
(
out
, 
a˘i⁄s
, 
a˘i⁄s_Àn
);

303 i‡(
∑ckë
) {

304 
	`oÂbuf_put
(
out
, 
∑ckë
->
d©a
,Öackë->
size
);

306  
out
;

307 
	}
}

310 
oÂbuf
 *

311 
	$make_unbuf„ªd_∑ckë_out
(c⁄° 
oÂbuf
 *
∑ckë
,

312 
uöt32_t
 
ö_p‹t
, uöt32_à
out_p‹t
)

314 
oÂ_a˘i⁄_ouçut
 
a˘i⁄
;

315 
a˘i⁄
.
ty≥
 = 
	`ht⁄s
(
OFPAT_OUTPUT
);

316 
a˘i⁄
.
Àn
 = 
	`ht⁄s
(áction);

317 
a˘i⁄
.
p‹t
 = 
	`ht⁄l
(
out_p‹t
);

318  
	`make_∑ckë_out
(
∑ckë
, 
UINT32_MAX
, 
ö_p‹t
,

319 (
oÂ_a˘i⁄_hódî
 *Ë&
a˘i⁄
, 1);

320 
	}
}

322 
oÂbuf
 *

323 
	$make_buf„ªd_∑ckë_out
(
uöt32_t
 
buf„r_id
,

324 
uöt32_t
 
ö_p‹t
, uöt32_à
out_p‹t
)

326 i‡(
out_p‹t
 !
OFPP_ANY
) {

327 
oÂ_a˘i⁄_ouçut
 
a˘i⁄
;

328 
a˘i⁄
.
ty≥
 = 
	`ht⁄s
(
OFPAT_OUTPUT
);

329 
a˘i⁄
.
Àn
 = 
	`ht⁄s
(áction);

330 
a˘i⁄
.
p‹t
 = 
	`ht⁄l
(
out_p‹t
);

331  
	`make_∑ckë_out
(
NULL
, 
buf„r_id
, 
ö_p‹t
,

332 (
oÂ_a˘i⁄_hódî
 *Ë&
a˘i⁄
, 1);

334  
	`make_∑ckë_out
(
NULL
, 
buf„r_id
, 
ö_p‹t
, NULL, 0);

336 
	}
}

340 
oÂbuf
 *

341 
	$make_echo_ªque°
()

343 
oÂ_hódî
 *
rq
;

344 
oÂbuf
 *
out
 = 
	`oÂbuf_√w
( *
rq
);

345 
rq
 = 
	`oÂbuf_put_unöô
(
out
,  *rq);

346 
rq
->
vîsi⁄
 = 
OFP_VERSION
;

347 
rq
->
ty≥
 = 
OFPT_ECHO_REQUEST
;

348 
rq
->
Àngth
 = 
	`ht⁄s
( *rq);

349 
rq
->
xid
 = 
	`Æloc_xid
();

350  
out
;

351 
	}
}

355 
oÂbuf
 *

356 
	$make_echo_ª∂y
(c⁄° 
oÂ_hódî
 *
rq
)

358 
size_t
 
size
 = 
	`¡ohs
(
rq
->
Àngth
);

359 
oÂbuf
 *
out
 = 
	`oÂbuf_√w
(
size
);

360 
oÂ_hódî
 *
ª∂y
 = 
	`oÂbuf_put
(
out
, 
rq
, 
size
);

361 
ª∂y
->
ty≥
 = 
OFPT_ECHO_REPLY
;

362  
out
;

363 
	}
}

367 
	$check_mesßge_ty≥
(
uöt8_t
 
gŸ_ty≥
, uöt8_à
w™t_ty≥
)

369 i‡(
gŸ_ty≥
 !
w™t_ty≥
) {

370 
	`VLOG_WARN
(
LOG_MODULE
, "received bad messageÅype %d (expected %d)",

371 
gŸ_ty≥
, 
w™t_ty≥
);

372  
	`oÂ_mkîr
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_TYPE
);;

375 
	}
}

381 
	$check_oÂ_mesßge
(c⁄° 
oÂ_hódî
 *
msg
, 
uöt8_t
 
ty≥
, 
size_t
 
size
)

383 
size_t
 
gŸ_size
;

384 
îr‹
;

386 
îr‹
 = 
	`check_mesßge_ty≥
(
msg
->
ty≥
,Åype);

387 i‡(
îr‹
) {

388  
îr‹
;

391 
gŸ_size
 = 
	`¡ohs
(
msg
->
Àngth
);

392 i‡(
gŸ_size
 !
size
) {

393 
	`VLOG_WARN
(
LOG_MODULE
, "received %d message ofÜength %zu (expected %zu)",

394 
ty≥
, 
gŸ_size
, 
size
);

395  
	`oÂ_mkîr
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

399 
	}
}

410 
	$check_oÂ_ö°ru˘i⁄_¨øy
(c⁄° 
oÂ_ö°ru˘i⁄
 *
ö°
, 
uöt8_t
 
ty≥
,

411 
size_t
 
mö_size
, size_à
¨øy_ñt_size
,

412 
size_t
 *
n_¨øy_ñts
)

414 
size_t
 
gŸ_size
;

416 
	`as£π
(
¨øy_ñt_size
);

418 i‡(
	`¡ohs
(
ö°
->
ty≥
) !=Åype) {

419 
	`VLOG_WARN
(
LOG_MODULE
, "received bad instructionÅype %X (expected %X)",

420 
	`¡ohs
(
ö°
->
ty≥
),Åype);

421  
	`oÂ_mkîr
(
OFPET_BAD_INSTRUCTION
, 
OFPBIC_UNSUP_INST
);

424 
gŸ_size
 = 
	`¡ohs
(
ö°
->
Àn
);

425 i‡(
gŸ_size
 < 
mö_size
) {

426 
	`VLOG_WARN
(
LOG_MODULE
, "received %X instruction ofÜength %zu "

428 
ty≥
, 
gŸ_size
, 
mö_size
);

429  
	`oÂ_mkîr
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

431 i‡((
gŸ_size
 - 
mö_size
Ë% 
¨øy_ñt_size
) {

432 
	`VLOG_WARN
(
LOG_MODULE
, "received %X message of badÜength %zu:Åhe "

435 
ty≥
, 
gŸ_size
, 
mö_size
, got_size - min_size,

436 
¨øy_ñt_size
, (
gŸ_size
 - 
mö_size
) %árray_elt_size);

437  
	`oÂ_mkîr
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);;

439 i‡(
n_¨øy_ñts
) {

440 *
n_¨øy_ñts
 = (
gŸ_size
 - 
mö_size
Ë/ 
¨øy_ñt_size
;

443 
	}
}

455 
	$check_oÂ_mesßge_¨øy
(c⁄° 
oÂ_hódî
 *
msg
, 
uöt8_t
 
ty≥
,

456 
size_t
 
mö_size
, size_à
¨øy_ñt_size
,

457 
size_t
 *
n_¨øy_ñts
)

459 
size_t
 
gŸ_size
;

460 
îr‹
;

462 
	`as£π
(
¨øy_ñt_size
);

464 
îr‹
 = 
	`check_mesßge_ty≥
(
msg
->
ty≥
,Åype);

465 i‡(
îr‹
) {

466  
îr‹
;

469 
gŸ_size
 = 
	`¡ohs
(
msg
->
Àngth
);

470 i‡(
gŸ_size
 < 
mö_size
) {

471 
	`VLOG_WARN
(
LOG_MODULE
, "received %d message ofÜength %zu "

473 
ty≥
, 
gŸ_size
, 
mö_size
);

474  
	`oÂ_mkîr
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

476 i‡((
gŸ_size
 - 
mö_size
Ë% 
¨øy_ñt_size
) {

477 
	`VLOG_WARN
(
LOG_MODULE
,

481 
ty≥
, 
gŸ_size
, 
mö_size
, got_size - min_size,

482 
¨øy_ñt_size
, (
gŸ_size
 - 
mö_size
) %árray_elt_size);

483  
	`oÂ_mkîr
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

485 i‡(
n_¨øy_ñts
) {

486 *
n_¨øy_ñts
 = (
gŸ_size
 - 
mö_size
Ë/ 
¨øy_ñt_size
;

489 
	}
}

493 
	$check_oÂ_∑ckë_out
(c⁄° 
oÂ_hódî
 *
oh
, 
oÂbuf
 *
d©a
,

494 *
n_a˘i⁄•
, 
max_p‹ts
)

496 c⁄° 
oÂ_∑ckë_out
 *
›o
;

497 
a˘i⁄s_Àn
, 
n_a˘i⁄s
;

498 
size_t
 
exåa
;

499 
îr‹
;

501 *
n_a˘i⁄•
 = 0;

502 
îr‹
 = 
	`check_oÂ_mesßge_¨øy
(
oh
, 
OFPT_PACKET_OUT
,

503  *
›o
, 1, &
exåa
);

504 i‡(
îr‹
) {

505  
îr‹
;

507 
›o
 = (c⁄° 
oÂ_∑ckë_out
 *Ë
oh
;

509 
a˘i⁄s_Àn
 = 
	`¡ohs
(
›o
->actions_len);

510 i‡(
a˘i⁄s_Àn
 > 
exåa
) {

511 
	`VLOG_WARN
(
LOG_MODULE
, "packet-out claims %u bytes ofáctions "

513 
a˘i⁄s_Àn
, 
exåa
);

514  
	`oÂ_mkîr
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

516 i‡(
a˘i⁄s_Àn
 % (
oÂ_a˘i⁄
)) {

517 
	`VLOG_WARN
(
LOG_MODULE
, "packet-out claims %u bytes ofáctions, "

519 
a˘i⁄s_Àn
, (
oÂ_a˘i⁄
));

520  
	`oÂ_mkîr
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

523 
n_a˘i⁄s
 = 
a˘i⁄s_Àn
 / (
oÂ_a˘i⁄
);

524 
îr‹
 = 
	`vÆid©e_a˘i⁄s
((c⁄° 
oÂ_a˘i⁄
 *Ë
›o
->
a˘i⁄s
,

525 
n_a˘i⁄s
, 
max_p‹ts
, 
åue
);

526 i‡(
îr‹
) {

527  
îr‹
;

530 
d©a
->d©®(*Ë&
›o
->
a˘i⁄s
[
n_a˘i⁄s
];

531 
d©a
->
size
 = 
exåa
 - 
a˘i⁄s_Àn
;

532 *
n_a˘i⁄•
 = 
n_a˘i⁄s
;

534 
	}
}

537 c⁄° 
oÂ_Êow_°©s
 *

538 
	$Êow_°©s_fú°
(
Êow_°©s_ôî©‹
 *
ôî
,

539 c⁄° 
oÂ_mu…ù¨t_ª∂y
 *
o§
)

541 
ôî
->
pos
 = 
o§
->
body
;

542 
ôî
->
íd
 = 
o§
->
body
 + (
	`¡ohs
(o§->
hódî
.
Àngth
)

543 - 
	`off£tof
(
oÂ_mu…ù¨t_ª∂y
, 
body
));

544  
	`Êow_°©s_√xt
(
ôî
);

545 
	}
}

548 c⁄° 
oÂ_Êow_°©s
 *

549 
	$Êow_°©s_√xt
(
Êow_°©s_ôî©‹
 *
ôî
)

551 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

552 
±rdiff_t
 
byãs_À·
 = 
ôî
->
íd
 - iãr->
pos
;

553 c⁄° 
oÂ_Êow_°©s
 *
fs
;

554 
size_t
 
Àngth
;

556 i‡(
byãs_À·
 <  *
fs
) {

557 i‡(
byãs_À·
 != 0) {

558 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "%tdÜeftover bytes in flow statsÑeply",

559 
byãs_À·
);

561  
NULL
;

564 
fs
 = (c⁄° *Ë
ôî
->
pos
;

565 
Àngth
 = 
	`¡ohs
(
fs
->length);

566 i‡(
Àngth
 <  *
fs
) {

567 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "flow statsÜength %zu is shorterÅhan min %zu",

568 
Àngth
,  *
fs
);

569  
NULL
;

570 } i‡(
Àngth
 > 
byãs_À·
) {

571 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "flow statsÜength %zu but only %td bytesÜeft",

572 
Àngth
, 
byãs_À·
);

573  
NULL
;

582 
ôî
->
pos
 +
Àngth
;

583  
fs
;

584 
	}
}

587 
	#ACTION_ALIGNMENT
 8

	)

591 
	$check_a˘i⁄_exa˘_Àn
(c⁄° 
oÂ_a˘i⁄
 *
a
, 
Àn
,

592 
ªquúed_Àn
)

594 i‡(
Àn
 !
ªquúed_Àn
) {

595 
	`VLOG_DBG
(
LOG_MODULE
, "a˘i⁄ %u ha†övÆidÜígth %"
PRIu16
" (must be %u)\n",

596 
a
->
ty≥
, 
	`¡ohs
◊->
hódî
.
Àn
), 
ªquúed_Àn
);

597  
	`oÂ_mkîr
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

600 
	}
}

606 
	$check_ouçut_p‹t
(
uöt32_t
 
p‹t
, 
max_p‹ts
, 
boﬁ
 
èbÀ_Ælowed
)

608 
p‹t
) {

609 
OFPP_IN_PORT
:

610 
OFPP_NORMAL
:

611 
OFPP_FLOOD
:

612 
OFPP_ALL
:

613 
OFPP_CONTROLLER
:

614 
OFPP_LOCAL
:

617 
OFPP_TABLE
:

618 i‡(
èbÀ_Ælowed
) {

621  
	`oÂ_mkîr
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_OUT_PORT
);

625 i‡(
p‹t
 < 
max_p‹ts
) {

628 
	`VLOG_WARN
(
LOG_MODULE
, "unknow¿ouçuàp‹à%x", 
p‹t
);

629  
	`oÂ_mkîr
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_OUT_PORT
);;

631 
	}
}

637 
	$check_£tqueue_a˘i⁄
(c⁄° 
oÂ_a˘i⁄
 *
a
, 
Àn
)

639 c⁄° 
oÂ_a˘i⁄_£t_queue
 *
ﬂq
;

640 
îr‹
;

642 
îr‹
 = 
	`check_a˘i⁄_exa˘_Àn
(
a
, 
Àn
, 8);

643 i‡(
îr‹
) {

644  
îr‹
;

647 
ﬂq
 = (c⁄° 
oÂ_a˘i⁄_£t_queue
 *Ë
a
;

649 
	}
}

652 
	$check_nicúa_a˘i⁄
(c⁄° 
oÂ_a˘i⁄
 *
a
, 
Àn
)

654 c⁄° 
nx_a˘i⁄_hódî
 *
«h
;

656 i‡(
Àn
 < 16) {

657 
	`VLOG_DBG
(
LOG_MODULE
, "Nicú®víd‹á˘i⁄ o∆y %u byãs", 
Àn
);

658  
	`oÂ_mkîr
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);;

660 
«h
 = (c⁄° 
nx_a˘i⁄_hódî
 *Ë
a
;

662 
	`¡ohs
(
«h
->
subty≥
)) {

663 
NXAST_RESUBMIT
:

664 
NXAST_SET_TUNNEL
:

665  
	`check_a˘i⁄_exa˘_Àn
(
a
, 
Àn
, 16);

667  
	`oÂ_mkîr
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_EXPERIMENTER
);

669 
	}
}

672 
	$check_a˘i⁄
(c⁄° 
oÂ_a˘i⁄
 *
a
, 
Àn
, 
max_p‹ts
,

673 
boﬁ
 
is_∑ckë_out
)

675 
îr‹
;

677 
	`¡ohs
(
a
->
ty≥
)) {

678 
OFPAT_OUTPUT
: {

679 c⁄° 
oÂ_a˘i⁄_ouçut
 *
ﬂo
;

680 
îr‹
 = 
	`check_a˘i⁄_exa˘_Àn
(
a
, 
Àn
, 16);

681 i‡(
îr‹
) {

682  
îr‹
;

684 
ﬂo
 = (c⁄° 
oÂ_a˘i⁄_ouçut
 *Ë
a
;

685  
	`check_ouçut_p‹t
(
	`¡ohl
(
ﬂo
->
p‹t
), 
max_p‹ts
, 
is_∑ckë_out
);

689 
OFPAT_EXPERIMENTER
:

690  (
a
->
ex≥rimíãr
.ex≥rimíã∏=
	`ht⁄l
(
NX_VENDOR_ID
)

691 ? 
	`check_nicúa_a˘i⁄
(
a
, 
Àn
)

692 : 
	`oÂ_mkîr
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_EXPERIMENTER
));

694 
OFPAT_SET_QUEUE
:

695  
	`check_£tqueue_a˘i⁄
(
a
, 
Àn
);

698 
	`VLOG_WARN
(
LOG_MODULE
, "unknow¿a˘i⁄Åy≥ %"
PRIu16
,

699 
	`¡ohs
(
a
->
ty≥
));

700  
	`oÂ_mkîr
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_TYPE
);

702 
	}
}

705 
	$vÆid©e_a˘i⁄s
(c⁄° 
oÂ_a˘i⁄
 *
a˘i⁄s
, 
size_t
 
n_a˘i⁄s
,

706 
max_p‹ts
, 
boﬁ
 
is_∑ckë_out
)

708 c⁄° 
oÂ_a˘i⁄
 *
a
;

710 
a
 = 
a˘i⁄s
;á < &a˘i⁄s[
n_a˘i⁄s
]; ) {

711 
Àn
 = 
	`¡ohs
(
a
->
hódî
.len);

712 
n_¶Ÿs
 = 
Àn
 / 
ACTION_ALIGNMENT
;

713 
¶Ÿs_À·
 = &
a˘i⁄s
[
n_a˘i⁄s
] - 
a
;

714 
îr‹
;

716 i‡(
n_¶Ÿs
 > 
¶Ÿs_À·
) {

717 
	`VLOG_DBG
(
LOG_MODULE
,

719 
n_¶Ÿs
, 
¶Ÿs_À·
);

720  
	`oÂ_mkîr
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

721 } i‡(!
Àn
) {

722 
	`VLOG_DBG
(
LOG_MODULE
, "action has invalidÜength 0");

723  
	`oÂ_mkîr
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

724 } i‡(
Àn
 % 
ACTION_ALIGNMENT
) {

725 
	`VLOG_DBG
(
LOG_MODULE
, "actionÜength %u isÇotá multiple "

726 "o‡%d", 
Àn
, 
ACTION_ALIGNMENT
);

727  
	`oÂ_mkîr
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

730 
îr‹
 = 
	`check_a˘i⁄
(
a
, 
Àn
, 
max_p‹ts
, 
is_∑ckë_out
);

731 i‡(
îr‹
) {

732  
îr‹
;

734 
a
 +
n_¶Ÿs
;

737 
	}
}

741 
boﬁ


742 
	$a˘i⁄_ouçuts_to_p‹t
(c⁄° 
oÂ_a˘i⁄
 *
a˘i⁄
, 
uöt32_t
 
p‹t
)

744 
	`¡ohs
(
a˘i⁄
->
ty≥
)) {

745 
OFPAT_OUTPUT
: {

746 c⁄° 
oÂ_a˘i⁄_ouçut
 *
ﬂo
;

747 
ﬂo
 = (c⁄° 
oÂ_a˘i⁄_ouçut
 *Ë
a˘i⁄
;

748  
ﬂo
->
p‹t
 ==Öort;

751  
Ál£
;

753 
	}
}

757 c⁄° 
oÂ_a˘i⁄
 *

758 
	$a˘i⁄s_fú°
(
a˘i⁄s_ôî©‹
 *
ôî
,

759 c⁄° 
oÂ_a˘i⁄
 *
ﬂ
, 
size_t
 
n_a˘i⁄s
)

761 
ôî
->
pos
 = 
ﬂ
;

762 
ôî
->
íd
 = 
ﬂ
 + 
n_a˘i⁄s
;

763  
	`a˘i⁄s_√xt
(
ôî
);

764 
	}
}

766 c⁄° 
oÂ_a˘i⁄
 *

767 
	$a˘i⁄s_√xt
(
a˘i⁄s_ôî©‹
 *
ôî
)

769 i‡(
ôî
->
pos
 < iãr->
íd
) {

770 c⁄° 
oÂ_a˘i⁄
 *
a
 = 
ôî
->
pos
;

771 
Àn
 = 
	`¡ohs
(
a
->
hódî
.len);

772 
ôî
->
pos
 +
Àn
 / 
ACTION_ALIGNMENT
;

773  
a
;

775  
NULL
;

777 
	}
}

	@lib/ofp.h

56 #i‚de‡
OFP_H


57 
	#OFP_H
 1

	)

59 
	~<as£π.h
>

60 
	~<°dboﬁ.h
>

61 
	~<°ddef.h
>

62 
	~<°döt.h
>

63 
	~"oÂbuf.h
"

64 
	~"Êow.h
"

65 
	~"../ö˛ude/›íÊow/›íÊow.h
"

68 *
make_›íÊow
(
size_t
 
›íÊow_Àn
, 
uöt8_t
 
ty≥
, 
oÂbuf
 **);

69 *
make_›íÊow_xid
(
size_t
 
›íÊow_Àn
, 
uöt8_t
 
ty≥
,

70 
uöt32_t
 
xid
, 
oÂbuf
 **);

71 *
put_›íÊow
(
size_t
 
›íÊow_Àn
, 
uöt8_t
 
ty≥
, 
oÂbuf
 *);

72 *
put_›íÊow_xid
(
size_t
 
›íÊow_Àn
, 
uöt8_t
 
ty≥
, 
uöt32_t
 
xid
,

73 
oÂbuf
 *);

74 
upd©e_›íÊow_Àngth
(
oÂbuf
 *);

75 
upd©e_ö°ru˘i⁄_Àngth
(
oÂbuf
 *, 
size_t
 
oü_off£t
);

76 
oÂbuf
 *
make_Êow_mod
(
uöt8_t
 
comm™d
, uöt8_à
èbÀ_id
,

77 c⁄° 
Êow
 *, 
size_t
 
a˘i⁄s_Àn
);

78 
oÂbuf
 *
make_add_Êow
(c⁄° 
Êow
 *, 
uöt32_t
 
buf„r_id
,

79 
uöt8_t
 
èbÀ_id
,

80 
uöt16_t
 
max_idÀ
, 
size_t
 
a˘i⁄s_Àn
);

81 
oÂbuf
 *
make_dñ_Êow
(c⁄° 
Êow
 *, 
uöt8_t
 
èbÀ_id
);

82 
oÂbuf
 *
make_add_sim∂e_Êow
(c⁄° 
Êow
 *,

83 
uöt32_t
 
buf„r_id
, uöt32_à
out_p‹t
,

84 
uöt16_t
 
max_idÀ
);

86 
oÂbuf
 * 
make_p‹t_desc_ªque°
();

88 
oÂbuf
 *
make_∑ckë_out
(c⁄° oÂbu‡*
∑ckë
, 
uöt32_t
 
buf„r_id
,

89 
uöt32_t
 
ö_p‹t
,

90 c⁄° 
oÂ_a˘i⁄_hódî
 *,

91 
size_t
 
n_a˘i⁄s
);

92 
oÂbuf
 *
make_buf„ªd_∑ckë_out
(
uöt32_t
 
buf„r_id
,

93 
uöt32_t
 
ö_p‹t
, uöt32_à
out_p‹t
);

94 
oÂbuf
 *
make_unbuf„ªd_∑ckë_out
(c⁄° oÂbu‡*
∑ckë
,

95 
uöt32_t
 
ö_p‹t
, uöt32_à
out_p‹t
);

96 
oÂbuf
 *
make_echo_ªque°
();

97 
oÂbuf
 *
make_echo_ª∂y
(c⁄° 
oÂ_hódî
 *
rq
);

98 
check_oÂ_mesßge
(c⁄° 
oÂ_hódî
 *, 
uöt8_t
 
ty≥
, 
size_t
 
size
);

99 
check_oÂ_ö°ru˘i⁄_¨øy
(c⁄° 
oÂ_ö°ru˘i⁄
 *, 
uöt8_t
 
ty≥
,

100 
size_t
 
size
, size_à
¨øy_ñt_size
,

101 
size_t
 *
n_¨øy_ñts
);

102 
check_oÂ_mesßge_¨øy
(c⁄° 
oÂ_hódî
 *, 
uöt8_t
 
ty≥
,

103 
size_t
 
size
, size_à
¨øy_ñt_size
,

104 
size_t
 *
n_¨øy_ñts
);

105 
check_oÂ_∑ckë_out
(c⁄° 
oÂ_hódî
 *, 
oÂbuf
 *
d©a
,

106 *
n_a˘i⁄s
, 
max_p‹ts
);

108 
	sÊow_°©s_ôî©‹
 {

109 c⁄° 
uöt8_t
 *
	mpos
, *
	míd
;

111 c⁄° 
oÂ_Êow_°©s
 *
Êow_°©s_fú°
(
Êow_°©s_ôî©‹
 *,

112 c⁄° 
oÂ_mu…ù¨t_ª∂y
 *);

113 c⁄° 
oÂ_Êow_°©s
 *
Êow_°©s_√xt
(
Êow_°©s_ôî©‹
 *);

115 
	sa˘i⁄s_ôî©‹
 {

116 c⁄° 
oÂ_a˘i⁄
 *
	mpos
, *
	míd
;

118 c⁄° 
oÂ_a˘i⁄
 *
a˘i⁄s_fú°
(
a˘i⁄s_ôî©‹
 *,

119 c⁄° 
oÂ_a˘i⁄
 *,

120 
size_t
 
n_a˘i⁄s
);

121 c⁄° 
oÂ_a˘i⁄
 *
a˘i⁄s_√xt
(
a˘i⁄s_ôî©‹
 *);

122 
vÆid©e_a˘i⁄s
(c⁄° 
oÂ_a˘i⁄
 *, 
size_t
 
n_a˘i⁄s
,

123 
max_p‹ts
, 
boﬁ
 
is_∑ckë_out
);

124 
boﬁ
 
a˘i⁄_ouçuts_to_p‹t
(c⁄° 
oÂ_a˘i⁄
 *, 
uöt32_t
 
p‹t
);

127 
ölöe
 

128 
	$oÂ_mkîr
(
uöt16_t
 
ty≥
, uöt16_à
code
)

130 
	`as£π
(
ty≥
 > 0 &&Åype <= 0x7fff);

131  (
ty≥
 << 16Ë| 
code
;

132 
	}
}

135 
	uoÂ_a˘i⁄
 {

136 
uöt16_t
 
	mty≥
;

137 
oÂ_a˘i⁄_hódî
 
	mhódî
;

138 
oÂ_a˘i⁄_ex≥rimíãr_hódî
 
	mex≥rimíãr
;

140 
OFP_ASSERT
((
oÂ_a˘i⁄
) == 8);

	@lib/ofpbuf.c

34 
	~"oÂbuf.h
"

35 
	~<as£π.h
>

36 
	~<°dlib.h
>

37 
	~<°rög.h
>

38 
	~"dy«mic-°rög.h
"

39 
	~"utû.h
"

49 
	$oÂbuf_u£
(
oÂbuf
 *
b
, *
ba£
, 
size_t
 
Æloˇãd
)

51 
b
->
ba£
 = b->
d©a
 = base;

52 
b
->
Æloˇãd
 =állocated;

53 
b
->
size
 = 0;

54 
b
->
l2
 = b->
l3
 = b->
l4
 = b->
l7
 = 
NULL
;

55 
b
->
√xt
 = 
NULL
;

56 
b
->
¥iv©e_p
 = 
NULL
;

57 
	}
}

62 
	$oÂbuf_öô
(
oÂbuf
 *
b
, 
size_t
 
size
)

64 
	`oÂbuf_u£
(
b
, 
size
 ? 
	`xmÆloc
(sizeË: 
NULL
, size);

65 
	}
}

69 
	$oÂbuf_unöô
(
oÂbuf
 *
b
)

71 i‡(
b
) {

72 
	`‰ì
(
b
->
ba£
);

74 
	}
}

78 
	$oÂbuf_ªöô
(
oÂbuf
 *
b
, 
size_t
 
size
)

80 
	`oÂbuf_unöô
(
b
);

81 
	`oÂbuf_öô
(
b
, 
size
);

82 
	}
}

86 
oÂbuf
 *

87 
	$oÂbuf_√w
(
size_t
 
size
)

89 
oÂbuf
 *
b
 = 
	`xmÆloc
( *b);

90 
	`oÂbuf_öô
(
b
, 
size
);

91  
b
;

92 
	}
}

96 
oÂbuf
 *

97 
	$oÂbuf_√w_wôh_hódroom
(
size_t
 
size
, size_à
hódroom
)

99 
oÂbuf
 *
b
 = 
	`oÂbuf_√w
(
size
 + 
hódroom
);

100 
	`oÂbuf_ª£rve
(
b
, 
hódroom
);

101  
b
;

102 
	}
}

104 
oÂbuf
 *

105 
	$oÂbuf_˛⁄e
(c⁄° 
oÂbuf
 *
buf„r
)

107  
	`oÂbuf_˛⁄e_d©a
(
buf„r
->
d©a
, buf„r->
size
);

108 
	}
}

112 
oÂbuf
 *

113 
	$oÂbuf_˛⁄e_wôh_hódroom
(c⁄° 
oÂbuf
 *
buf„r
, 
size_t
 
hódroom
)

115 
oÂbuf
 *
b
 = 
	`oÂbuf_√w_wôh_hódroom
(
buf„r
->
size
, 
hódroom
);

116 
	`oÂbuf_put
(
b
, 
buf„r
->
d©a
, buf„r->
size
);

117  
b
;

118 
	}
}

120 
oÂbuf
 *

121 
	$oÂbuf_˛⁄e_d©a
(c⁄° *
d©a
, 
size_t
 
size
)

123 
oÂbuf
 *
b
 = 
	`oÂbuf_√w
(
size
);

124 
	`oÂbuf_put
(
b
, 
d©a
, 
size
);

125  
b
;

126 
	}
}

130 
	$oÂbuf_dñëe
(
oÂbuf
 *
b
)

132 i‡(
b
) {

133 
	`oÂbuf_unöô
(
b
);

134 
	`‰ì
(
b
);

136 
	}
}

142 
size_t


143 
	$oÂbuf_hódroom
(c⁄° 
oÂbuf
 *
b
)

145  (*)
b
->
d©a
 - (*)b->
ba£
;

146 
	}
}

150 
size_t


151 
	$oÂbuf_èûroom
(c⁄° 
oÂbuf
 *
b
)

153  (*)
	`oÂbuf_íd
(
b
Ë- (*)
	`oÂbuf_èû
(b);

154 
	}
}

159 
	$oÂbuf_ªba£__
(
oÂbuf
 *
b
, *
√w_ba£
)

161 i‡(
b
->
ba£
 !
√w_ba£
) {

162 
uöçå_t
 
ba£_dñè
 = (*)
√w_ba£
 - (*)
b
->
ba£
;

163 
b
->
ba£
 = 
√w_ba£
;

164 
b
->
d©a
 = (*)b->d©®+ 
ba£_dñè
;

165 i‡(
b
->
l2
) {

166 
b
->
l2
 = (*)b->l2 + 
ba£_dñè
;

168 i‡(
b
->
l3
) {

169 
b
->
l3
 = (*)b->l3 + 
ba£_dñè
;

171 i‡(
b
->
l4
) {

172 
b
->
l4
 = (*)b->l4 + 
ba£_dñè
;

174 i‡(
b
->
l7
) {

175 
b
->
l7
 = (*)b->l7 + 
ba£_dñè
;

178 
	}
}

182 
	$oÂbuf_ªsize_èûroom__
(
oÂbuf
 *
b
, 
size_t
 
√w_èûroom
)

184 
b
->
Æloˇãd
 = 
	`oÂbuf_hódroom
(bË+ b->
size
 + 
√w_èûroom
;

185 
	`oÂbuf_ªba£__
(
b
, 
	`xªÆloc
(b->
ba£
, b->
Æloˇãd
));

186 
	}
}

192 
	$oÂbuf_¥óŒoc_èûroom
(
oÂbuf
 *
b
, 
size_t
 
size
)

194 i‡(
size
 > 
	`oÂbuf_èûroom
(
b
)) {

195 
	`oÂbuf_ªsize_èûroom__
(
b
, 
	`MAX
(
size
, 64));

197 
	}
}

200 
	$oÂbuf_¥óŒoc_hódroom
(
oÂbuf
 *
b
, 
size_t
 
size
)

202 
	`as£π
(
size
 <
	`oÂbuf_hódroom
(
b
));

203 
	}
}

208 
	$oÂbuf_åim
(
oÂbuf
 *
b
)

210 i‡(
	`oÂbuf_èûroom
(
b
) > 0) {

211 
	`oÂbuf_ªsize_èûroom__
(
b
, 0);

213 
	}
}

219 
	$oÂbuf_put_unöô
(
oÂbuf
 *
b
, 
size_t
 
size
)

221 *
p
;

222 
	`oÂbuf_¥óŒoc_èûroom
(
b
, 
size
);

223 
p
 = 
	`oÂbuf_èû
(
b
);

224 
b
->
size
 += size;

225  
p
;

226 
	}
}

232 
	$oÂbuf_put_zîos
(
oÂbuf
 *
b
, 
size_t
 
size
)

234 *
d°
 = 
	`oÂbuf_put_unöô
(
b
, 
size
);

235 
	`mem£t
(
d°
, 0, 
size
);

236  
d°
;

237 
	}
}

243 
	$oÂbuf_put
(
oÂbuf
 *
b
, c⁄° *
p
, 
size_t
 
size
)

245 *
d°
 = 
	`oÂbuf_put_unöô
(
b
, 
size
);

246 
	`mem˝y
(
d°
, 
p
, 
size
);

247  
d°
;

248 
	}
}

253 
	$oÂbuf_ª£rve
(
oÂbuf
 *
b
, 
size_t
 
size
)

255 
	`as£π
(!
b
->
size
);

256 
	`oÂbuf_¥óŒoc_èûroom
(
b
, 
size
);

257 
b
->
d©a
 = (*)b->d©®+ 
size
;

258 
	}
}

261 
	$oÂbuf_push_unöô
(
oÂbuf
 *
b
, 
size_t
 
size
)

263 
	`oÂbuf_¥óŒoc_hódroom
(
b
, 
size
);

264 
b
->
d©a
 = (*)b->d©®- 
size
;

265 
b
->
size
 += size;

266  
b
->
d©a
;

267 
	}
}

273 
	$oÂbuf_push_zîos
(
oÂbuf
 *
b
, 
size_t
 
size
)

275 *
d°
 = 
	`oÂbuf_push_unöô
(
b
, 
size
);

276 
	`mem£t
(
d°
, 0, 
size
);

277  
d°
;

278 
	}
}

281 
	$oÂbuf_push
(
oÂbuf
 *
b
, c⁄° *
p
, 
size_t
 
size
)

283 *
d°
 = 
	`oÂbuf_push_unöô
(
b
, 
size
);

284 
	`mem˝y
(
d°
, 
p
, 
size
);

285  
d°
;

286 
	}
}

291 
	$oÂbuf_©
(c⁄° 
oÂbuf
 *
b
, 
size_t
 
off£t
, size_à
size
)

293  
off£t
 + 
size
 <
b
->sizê? (*Ëb->
d©a
 + off£à: 
NULL
;

294 
	}
}

299 
	$oÂbuf_©_as£π
(c⁄° 
oÂbuf
 *
b
, 
size_t
 
off£t
, size_à
size
)

301 
	`as£π
(
off£t
 + 
size
 <
b
->size);

302  ((*Ë
b
->
d©a
Ë+ 
off£t
;

303 
	}
}

307 
	$oÂbuf_èû
(c⁄° 
oÂbuf
 *
b
)

309  (*Ë
b
->
d©a
 + b->
size
;

310 
	}
}

315 
	$oÂbuf_íd
(c⁄° 
oÂbuf
 *
b
)

317  (*Ë
b
->
ba£
 + b->
Æloˇãd
;

318 
	}
}

322 
	$oÂbuf_˛ór
(
oÂbuf
 *
b
)

324 
b
->
d©a
 = b->
ba£
;

325 
b
->
size
 = 0;

326 
	}
}

331 
	$oÂbuf_puŒ
(
oÂbuf
 *
b
, 
size_t
 
size
)

333 *
d©a
 = 
b
->data;

334 
	`as£π
(
b
->
size
 >= size);

335 
b
->
d©a
 = (*)b->d©®+ 
size
;

336 
b
->
size
 -= size;

337  
d©a
;

338 
	}
}

344 
	$oÂbuf_åy_puŒ
(
oÂbuf
 *
b
, 
size_t
 
size
)

346  
b
->
size
 >sizê? 
	`oÂbuf_puŒ
(b, sizeË: 
NULL
;

347 
	}
}

	@lib/ofpbuf.h

34 #i‚de‡
OFPBUF_H


35 
	#OFPBUF_H
 1

	)

37 
	~<°ddef.h
>

38 
	~<°döt.h
>

42 
	soÂbuf
 {

43 *
	mba£
;

44 
size_t
 
	mÆloˇãd
;

46 
uöt8_t
 
	mc⁄n_id
;

49 *
	md©a
;

50 
size_t
 
	msize
;

52 *
	ml2
;

53 *
	ml3
;

54 *
	ml4
;

55 *
	ml7
;

57 
oÂbuf
 *
	m√xt
;

58 *
	m¥iv©e_p
;

61 
oÂbuf_u£
(
oÂbuf
 *, *, 
size_t
);

63 
oÂbuf_öô
(
oÂbuf
 *, 
size_t
);

64 
oÂbuf_unöô
(
oÂbuf
 *);

65 
oÂbuf_ªöô
(
oÂbuf
 *, 
size_t
);

67 
oÂbuf
 *
oÂbuf_√w
(
size_t
);

68 
oÂbuf
 *
oÂbuf_√w_wôh_hódroom
(
size_t
, size_à
hódroom
);

69 
oÂbuf
 *
oÂbuf_˛⁄e
(const ofpbuf *);

70 
oÂbuf
 *
oÂbuf_˛⁄e_wôh_hódroom
(const ofpbuf *,

71 
size_t
 
hódroom
);

72 
oÂbuf
 *
oÂbuf_˛⁄e_d©a
(c⁄° *, 
size_t
);

73 
oÂbuf_dñëe
(
oÂbuf
 *);

75 *
oÂbuf_©
(c⁄° 
oÂbuf
 *, 
size_t
 
off£t
, size_à
size
);

76 *
oÂbuf_©_as£π
(c⁄° 
oÂbuf
 *, 
size_t
 
off£t
, size_à
size
);

77 *
oÂbuf_èû
(c⁄° 
oÂbuf
 *);

78 *
oÂbuf_íd
(c⁄° 
oÂbuf
 *);

80 *
oÂbuf_put_unöô
(
oÂbuf
 *, 
size_t
);

81 *
oÂbuf_put_zîos
(
oÂbuf
 *, 
size_t
);

82 *
oÂbuf_put
(
oÂbuf
 *, c⁄° *, 
size_t
);

83 
oÂbuf_ª£rve
(
oÂbuf
 *, 
size_t
);

84 *
oÂbuf_push_unöô
(
oÂbuf
 *
b
, 
size_t
);

85 *
oÂbuf_push_zîos
(
oÂbuf
 *, 
size_t
);

86 *
oÂbuf_push
(
oÂbuf
 *
b
, c⁄° *, 
size_t
);

88 
size_t
 
oÂbuf_hódroom
(c⁄° 
oÂbuf
 *);

89 
size_t
 
oÂbuf_èûroom
(c⁄° 
oÂbuf
 *);

90 
oÂbuf_¥óŒoc_hódroom
(
oÂbuf
 *, 
size_t
);

91 
oÂbuf_¥óŒoc_èûroom
(
oÂbuf
 *, 
size_t
);

92 
oÂbuf_åim
(
oÂbuf
 *);

94 
oÂbuf_˛ór
(
oÂbuf
 *);

95 *
oÂbuf_puŒ
(
oÂbuf
 *, 
size_t
);

96 *
oÂbuf_åy_puŒ
(
oÂbuf
 *, 
size_t
);

	@lib/ofpstat.c

33 
	~<c⁄fig.h
>

34 
	~<√töë/ö.h
>

36 
	~"›íÊow/›íÊow.h
"

37 
	~"oÂ°©.h
"

39 
	#INC_IFP_STAT
(
iÂs
, 
èg
Ëdÿ{++(iÂs)->èg;} 0)

	)

41 
öc_¥Ÿocﬁ_mesßge
(
oÂ°©
 *, 
oÂ_hódî
 *);

42 
öc_îr‹_nŸifiˇti⁄
(
oÂ°©
 *, 
oÂ_hódî
 *);

43 
öc_Êow_m™ùuœti⁄
(
oÂ°©
 *, 
oÂ_hódî
 *);

46 
	$öc_¥Ÿocﬁ_mesßge
(
oÂ°©
 *
iÂs
, 
oÂ_hódî
 *
hdr
)

48 
hdr
->
ty≥
) {

49 
OFPT_HELLO
:

50 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_hñlo
);

52 
OFPT_ERROR
:

53 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹
);

55 
OFPT_ECHO_REQUEST
:

56 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_echo_ªque°
);

58 
OFPT_ECHO_REPLY
:

59 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_echo_ª∂y
);

61 
OFPT_VENDOR
:

62 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_víd‹
);

64 
OFPT_FEATURES_REQUEST
:

65 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_„©s_ªque°
);

67 
OFPT_FEATURES_REPLY
:

68 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_„©s_ª∂y
);

70 
OFPT_GET_CONFIG_REQUEST
:

71 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_gë_c⁄fig_ªque°
);

73 
OFPT_GET_CONFIG_REPLY
:

74 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_gë_c⁄fig_ª∂y
);

76 
OFPT_SET_CONFIG
:

77 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_£t_c⁄fig
);

79 
OFPT_PACKET_IN
:

80 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_∑ckë_ö
);

82 
OFPT_FLOW_REMOVED
:

83 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_Êow_ªmoved
);

85 
OFPT_PORT_STATUS
:

86 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_p‹t_°©us
);

88 
OFPT_PACKET_OUT
:

89 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_∑ckë_out
);

91 
OFPT_FLOW_MOD
:

92 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_Êow_mod
);

94 
OFPT_PORT_MOD
:

95 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_p‹t_mod
);

97 
OFPT_MULTIPART_REQUEST
:

98 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_°©s_ªque°
);

100 
OFPT_MULTIPART_REPLY
:

101 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_°©s_ª∂y
);

103 
OFPT_BARRIER_REQUEST
:

104 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_b¨rõr_ªque°
);

106 
OFPT_BARRIER_REPLY
:

107 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_b¨rõr_ª∂y
);

110 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_unknown
);

113 
	}
}

116 
	$öc_îr‹_nŸifiˇti⁄
(
oÂ°©
 *
iÂs
, 
oÂ_hódî
 *
hdr
)

118 
oÂ_îr‹_msg
 *
îrmsg
 = (oÂ_îr‹_msg *)
hdr
;

119 
uöt16_t
 
îπy≥
 = 
	`¡ohs
(
îrmsg
->
ty≥
);

120 
uöt16_t
 
îrcode
 = 
	`¡ohs
(
îrmsg
->
code
);

122 
îπy≥
) {

123 
OFPET_HELLO_FAILED
:

124 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_ty≥
.
hñlo_Áû
);

125 
îrcode
) {

126 
OFPHFC_INCOMPATIBLE
:

127 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
hf_öcom∑t
);

129 
OFPHFC_EPERM
:

130 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
hf_ïîm
);

133 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
unknown
);

137 
OFPET_BAD_REQUEST
:

138 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_ty≥
.
bad_ªque°
);

139 
îrcode
) {

140 
OFPBRC_BAD_VERSION
:

141 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
br_bad_vîsi⁄
);

143 
OFPBRC_BAD_TYPE
:

144 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
br_bad_ty≥
);

146 
OFPBRC_BAD_MULTIPART
:

147 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
br_bad_°©
);

149 
OFPBRC_BAD_VENDOR
:

150 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
br_bad_víd‹
);

152 
OFPBRC_EPERM
:

153 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
br_ïîm
);

156 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
unknown
);

160 
OFPET_BAD_ACTION
:

161 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_ty≥
.
bad_a˘i⁄
);

162 
îrcode
) {

163 
OFPBAC_BAD_TYPE
:

164 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
ba_bad_ty≥
);

166 
OFPBAC_BAD_LEN
:

167 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
ba_bad_Àn
);

169 
OFPBAC_BAD_VENDOR
:

170 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
ba_bad_víd‹
);

172 
OFPBAC_BAD_VENDOR_TYPE
:

173 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
ba_bad_víd‹_ty≥
);

175 
OFPBAC_BAD_OUT_PORT
:

176 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
ba_bad_out_p‹t
);

178 
OFPBAC_BAD_ARGUMENT
:

179 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
ba_bad_¨gumít
);

181 
OFPBAC_EPERM
:

182 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
ba_ïîm
);

185 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
unknown
);

189 
OFPET_FLOW_MOD_FAILED
:

190 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_ty≥
.
Êow_mod_Áû
);

191 
îrcode
) {

192 
OFPFMFC_ALL_TABLES_FULL
:

193 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
fmf_Æl_èbÀs_fuŒ
);

195 
OFPFMFC_OVERLAP
:

196 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
fmf_ovîœp
);

198 
OFPFMFC_EPERM
:

199 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
fmf_ïîm
);

201 
OFPFMFC_BAD_EMERG_TIMEOUT
:

202 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
fmf_emîg
);

205 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_code
.
unknown
);

210 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_îr‹_ty≥
.
unknown
);

213 
	}
}

216 
	$öc_Êow_m™ùuœti⁄
(
oÂ°©
 *
iÂs
, 
oÂ_hódî
 *
hdr
)

218 
oÂ_Êow_mod
 *
Êowmodmsg
 = (oÂ_Êow_mod *)
hdr
;

219 
uöt16_t
 
Êowmod›s
 = 
	`¡ohs
(
Êowmodmsg
->
comm™d
);

221 
Êowmod›s
) {

222 
OFPFC_ADD
:

223 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_Êow_mod_›s
.
add
);

225 
OFPFC_MODIFY
:

226 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_Êow_mod_›s
.
modify
);

228 
OFPFC_MODIFY_STRICT
:

229 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_Êow_mod_›s
.
modify_°ri˘
);

231 
OFPFC_DELETE
:

232 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_Êow_mod_›s
.
dñëe
);

234 
OFPFC_DELETE_STRICT
:

235 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_Êow_mod_›s
.
dñëe_°ri˘
);

238 
	`INC_IFP_STAT
(
iÂs
, 
oÂs_Êow_mod_›s
.
unknown
);

241 
	}
}

244 
	$oÂ°©_öc_¥Ÿocﬁ_°©
(
oÂ°©
 *
iÂs
, 
oÂ_hódî
 *
hdr
)

246 ++
iÂs
->
oÂs_tŸÆ
;

247 
	`öc_¥Ÿocﬁ_mesßge
(
iÂs
, 
hdr
);

249 
hdr
->
ty≥
) {

250 
OFPT_ERROR
:

251 
	`öc_îr‹_nŸifiˇti⁄
(
iÂs
, 
hdr
);

253 
OFPT_FLOW_MOD
:

254 
	`öc_Êow_m™ùuœti⁄
(
iÂs
, 
hdr
);

259 
	}
}

	@lib/ofpstat.h

33 #i‚de‡
OFPSTAT_H_


34 
	#OFPSTAT_H_


	)

36 
	goÂ_hódî
;

38 
	soÂ°©
 {

39 
uöt64_t
 
	moÂs_tŸÆ
;

40 
uöt64_t
 
	moÂs_unknown
;

42 
uöt64_t
 
	moÂs_hñlo
;

43 
uöt64_t
 
	moÂs_îr‹
;

45 
uöt64_t
 
	mhñlo_Áû
;

46 
uöt64_t
 
	mbad_ªque°
;

47 
uöt64_t
 
	mbad_a˘i⁄
;

48 
uöt64_t
 
	mÊow_mod_Áû
;

49 
uöt64_t
 
	munknown
;

50 } 
	moÂs_îr‹_ty≥
;

52 
uöt64_t
 
	mhf_öcom∑t
;

53 
uöt64_t
 
	mhf_ïîm
;

54 
uöt64_t
 
	mbr_bad_vîsi⁄
;

55 
uöt64_t
 
	mbr_bad_ty≥
;

56 
uöt64_t
 
	mbr_bad_°©
;

57 
uöt64_t
 
	mbr_bad_víd‹
;

58 
uöt64_t
 
	mbr_ïîm
;

59 
uöt64_t
 
	mba_bad_ty≥
;

60 
uöt64_t
 
	mba_bad_Àn
;

61 
uöt64_t
 
	mba_bad_víd‹
;

62 
uöt64_t
 
	mba_bad_víd‹_ty≥
;

63 
uöt64_t
 
	mba_bad_out_p‹t
;

64 
uöt64_t
 
	mba_bad_¨gumít
;

65 
uöt64_t
 
	mba_ïîm
;

66 
uöt64_t
 
	mfmf_Æl_èbÀs_fuŒ
;

67 
uöt64_t
 
	mfmf_ovîœp
;

68 
uöt64_t
 
	mfmf_ïîm
;

69 
uöt64_t
 
	mfmf_emîg
;

70 
uöt64_t
 
	munknown
;

71 } 
	moÂs_îr‹_code
;

72 
uöt64_t
 
	moÂs_echo_ªque°
;

73 
uöt64_t
 
	moÂs_echo_ª∂y
;

74 
uöt64_t
 
	moÂs_víd‹
;

75 
uöt64_t
 
	moÂs_„©s_ªque°
;

76 
uöt64_t
 
	moÂs_„©s_ª∂y
;

77 
uöt64_t
 
	moÂs_gë_c⁄fig_ªque°
;

78 
uöt64_t
 
	moÂs_gë_c⁄fig_ª∂y
;

79 
uöt64_t
 
	moÂs_£t_c⁄fig
;

80 
uöt64_t
 
	moÂs_∑ckë_ö
;

81 
uöt64_t
 
	moÂs_Êow_ªmoved
;

82 
uöt64_t
 
	moÂs_p‹t_°©us
;

83 
uöt64_t
 
	moÂs_∑ckë_out
;

84 
uöt64_t
 
	moÂs_Êow_mod
;

86 
uöt64_t
 
	madd
;

87 
uöt64_t
 
	mmodify
;

88 
uöt64_t
 
	mmodify_°ri˘
;

89 
uöt64_t
 
	mdñëe
;

90 
uöt64_t
 
	mdñëe_°ri˘
;

91 
uöt64_t
 
	munknown
;

92 } 
	moÂs_Êow_mod_›s
;

93 
uöt64_t
 
	moÂs_p‹t_mod
;

94 
uöt64_t
 
	moÂs_°©s_ªque°
;

95 
uöt64_t
 
	moÂs_°©s_ª∂y
;

96 
uöt64_t
 
	moÂs_b¨rõr_ªque°
;

97 
uöt64_t
 
	moÂs_b¨rõr_ª∂y
;

100 
oÂ°©_öc_¥Ÿocﬁ_°©
(
oÂ°©
 *, 
oÂ_hódî
 *);

	@lib/packets.h

33 #i‚de‡
PACKETS_H


34 
	#PACKETS_H
 1

	)

36 
	~<°döt.h
>

37 
	~<°rög.h
>

38 
	~<öây≥s.h
>

39 
	~<√töë/ö.h
>

40 
	~"compûî.h
"

41 
	~"øndom.h
"

42 
	~"utû.h
"

44 
	#ETH_ADDR_LEN
 6

	)

46 c⁄° 
uöt8_t
 
	gëh_addr_brﬂdˇ°
[
ETH_ADDR_LEN
] 
	gUNUSED


49 
ölöe
 
boﬁ
 
	$ëh_addr_is_brﬂdˇ°
(c⁄° 
uöt8_t
 
ó
[6])

51  (
ó
[0] &Éa[1] &Éa[2] &Éa[3] &Éa[4] &Éa[5]) == 0xff;

52 
	}
}

53 
ölöe
 
boﬁ
 
	$ëh_addr_is_mu…iˇ°
(c⁄° 
uöt8_t
 
ó
[6])

55  
ó
[0] & 1;

56 
	}
}

57 
ölöe
 
boﬁ
 
	$ëh_addr_is_loˇl
(c⁄° 
uöt8_t
 
ó
[6])

59  
ó
[0] & 2;

60 
	}
}

61 
ölöe
 
boﬁ
 
	$ëh_addr_is_zîo
(c⁄° 
uöt8_t
 
ó
[6])

63  !(
ó
[0] |Éa[1] |Éa[2] |Éa[3] |Éa[4] |Éa[5]);

64 
	}
}

65 
ölöe
 
boﬁ
 
	$ëh_addr_equÆs
(c⁄° 
uöt8_t
 
a
[
ETH_ADDR_LEN
],

66 c⁄° 
uöt8_t
 
b
[
ETH_ADDR_LEN
])

68  !
	`memcmp
(
a
, 
b
, 
ETH_ADDR_LEN
);

69 
	}
}

70 
ölöe
 
uöt64_t
 
	$ëh_addr_to_uöt64
(c⁄° 
uöt8_t
 
ó
[
ETH_ADDR_LEN
])

72  (((
uöt64_t
Ë
ó
[0] << 40)

73 | ((
uöt64_t
Ë
ó
[1] << 32)

74 | ((
uöt64_t
Ë
ó
[2] << 24)

75 | ((
uöt64_t
Ë
ó
[3] << 16)

76 | ((
uöt64_t
Ë
ó
[4] << 8)

77 | 
ó
[5]);

78 
	}
}

79 
ölöe
 
	$ëh_addr_‰om_uöt64
(
uöt64_t
 
x
, 
uöt8_t
 
ó
[
ETH_ADDR_LEN
])

81 
ó
[0] = 
x
 >> 40;

82 
ó
[1] = 
x
 >> 32;

83 
ó
[2] = 
x
 >> 24;

84 
ó
[3] = 
x
 >> 16;

85 
ó
[4] = 
x
 >> 8;

86 
ó
[5] = 
x
;

87 
	}
}

88 
ölöe
 
	$ëh_addr_øndom
(
uöt8_t
 
ó
[
ETH_ADDR_LEN
])

90 
	`øndom_byãs
(
ó
, 
ETH_ADDR_LEN
);

91 
ó
[0] &= ~1;

92 
ó
[0] |= 2;

93 
	}
}

96 
ölöe
 
boﬁ
 
	$ëh_addr_is_ª£rved
(c⁄° 
uöt8_t
 
ó
[
ETH_ADDR_LEN
])

98  (
ó
[0] == 0x01

99 && 
ó
[1] == 0x80

100 && 
ó
[2] == 0xc2

101 && 
ó
[3] == 0x00

102 && 
ó
[4] == 0x00

103 && (
ó
[5] & 0xf0) == 0x00);

104 
	}
}

106 
	#ETH_ADDR_FMT
 \

107 "%02"
PRIx8
":%02"PRIx8":%02"PRIx8":%02"PRIx8":%02"PRIx8":%02"
	)
PRIx8

108 
	#ETH_ADDR_ARGS
(
ó
) \

109 (
ó
)[0], (ó)[1], (ó)[2], (ó)[3], (ó)[4], (ó)[5]

	)

112 
	#ETH_TYPE_II_START
 0x0600

	)

113 
	#ETH_TYPE_IP
 0x0800

	)

114 
	#ETH_TYPE_IPV6
 0x86dd

	)

115 
	#ETH_TYPE_ARP
 0x0806

	)

116 
	#ETH_TYPE_VLAN
 0x8100

	)

117 
	#ETH_TYPE_SVLAN
 0x9200

	)

118 
	#ETH_TYPE_VLAN_QöQ
 0x9100

	)

119 
	#ETH_TYPE_VLAN_PBB_B
 0x88a8

	)

120 
	#ETH_TYPE_VLAN_PBB_S
 0x88e7

	)

121 
	#ETH_TYPE_MPLS
 0x8847

	)

122 
	#ETH_TYPE_MPLS_MCAST
 0x8848

	)

124 
	#ETH_HEADER_LEN
 14

	)

125 
	#ETH_PAYLOAD_MIN
 46

	)

126 
	#ETH_PAYLOAD_MAX
 1500

	)

127 
	#ETH_TOTAL_MIN
 (
ETH_HEADER_LEN
 + 
ETH_PAYLOAD_MIN
)

	)

128 
	#ETH_TOTAL_MAX
 (
ETH_HEADER_LEN
 + 
ETH_PAYLOAD_MAX
)

	)

129 
	#ETH_VLAN_TOTAL_MAX
 (
ETH_HEADER_LEN
 + 
VLAN_HEADER_LEN
 + 
ETH_PAYLOAD_MAX
)

	)

130 
	sëh_hódî
 {

131 
uöt8_t
 
	mëh_d°
[
ETH_ADDR_LEN
];

132 
uöt8_t
 
	mëh_§c
[
ETH_ADDR_LEN
];

133 
uöt16_t
 
	mëh_ty≥
;

134 } 
__©åibuã__
((
∑cked
));

135 
BUILD_ASSERT_DECL
(
ETH_HEADER_LEN
 =(
ëh_hódî
));

137 
	#LLC_DSAP_SNAP
 0xØ

	)

138 
	#LLC_SSAP_SNAP
 0xØ

	)

139 
	#LLC_CNTL_SNAP
 3

	)

141 
	#LLC_HEADER_LEN
 3

	)

142 
	sŒc_hódî
 {

143 
uöt8_t
 
	mŒc_dßp
;

144 
uöt8_t
 
	mŒc_sßp
;

145 
uöt8_t
 
	mŒc_˙é
;

146 } 
__©åibuã__
((
∑cked
));

147 
BUILD_ASSERT_DECL
(
LLC_HEADER_LEN
 =(
Œc_hódî
));

149 
	#SNAP_ORG_ETHERNET
 "\0\0"

	)

151 
	#SNAP_HEADER_LEN
 5

	)

152 
	s¢≠_hódî
 {

153 
uöt8_t
 
	m¢≠_‹g
[3];

154 
uöt16_t
 
	m¢≠_ty≥
;

155 } 
__©åibuã__
((
∑cked
));

156 
BUILD_ASSERT_DECL
(
SNAP_HEADER_LEN
 =(
¢≠_hódî
));

158 
	#LLC_SNAP_HEADER_LEN
 (
LLC_HEADER_LEN
 + 
SNAP_HEADER_LEN
)

	)

159 
	sŒc_¢≠_hódî
 {

160 
Œc_hódî
 
	mŒc
;

161 
¢≠_hódî
 
	m¢≠
;

162 } 
__©åibuã__
((
∑cked
));

163 
BUILD_ASSERT_DECL
(
LLC_SNAP_HEADER_LEN
 =(
Œc_¢≠_hódî
));

165 
	#VLAN_VID_MASK
 0x0fff

	)

166 
	#VLAN_VID_SHIFT
 0

	)

167 
	#VLAN_PCP_MASK
 0xe000

	)

168 
	#VLAN_PCP_SHIFT
 13

	)

169 
	#VLAN_PCP_BITMASK
 0x0007

	)

171 
	#VLAN_VID_MAX
 4095

	)

172 
	#VLAN_PCP_MAX
 7

	)

174 
	#VLAN_HEADER_LEN
 4

	)

175 
	svœn_hódî
 {

176 
uöt16_t
 
	mvœn_tci
;

177 
uöt16_t
 
	mvœn_√xt_ty≥
;

179 
BUILD_ASSERT_DECL
(
VLAN_HEADER_LEN
 =(
vœn_hódî
));

182 
	svœn_èg
 {

183 
uöt16_t
 
	mvœn_ç_id
;

184 
uöt16_t
 
	mvœn_tci
;

187 
	#VLAN_ETH_HEADER_LEN
 (
ETH_HEADER_LEN
 + 
VLAN_HEADER_LEN
)

	)

188 
	svœn_ëh_hódî
 {

189 
uöt8_t
 
	mvëh_d°
[
ETH_ADDR_LEN
];

190 
uöt8_t
 
	mvëh_§c
[
ETH_ADDR_LEN
];

191 
uöt16_t
 
	mvëh_ty≥
;

192 
uöt16_t
 
	mvëh_tci
;

193 
uöt16_t
 
	mvëh_√xt_ty≥
;

194 } 
__©åibuã__
((
∑cked
));

195 
BUILD_ASSERT_DECL
(
VLAN_ETH_HEADER_LEN
 =(
vœn_ëh_hódî
));

201 
	#IP_FMT
 "%"
PRIu8
".%"PRIu8".%"PRIu8".%"
	)
PRIu8

202 
	#IP_ARGS
(
ù
) \

203 ((Ë(
ù
)[0], ((
uöt8_t
 *) ip)[0]), \

204 ((
uöt8_t
 *Ë
ù
)[1], \

205 ((
uöt8_t
 *Ë
ù
)[2], \

206 ((
uöt8_t
 *Ë
ù
)[3]

	)

208 
	#IP_VER
(
ù_ihl_vî
Ë((ù_ihl_vîË>> 4)

	)

209 
	#IP_IHL
(
ù_ihl_vî
Ë((ù_ihl_vîË& 15)

	)

210 
	#IP_IHL_VER
(
ihl
, 
vî
Ë(((vîË<< 4Ë| (ihl))

	)

213 
	#IP_ECN_MASK
 0x03

	)

214 
	#IP_DSCP_MASK
 0xfc

	)

217 
	#IP_TYPE_ICMP
 1

	)

218 
	#IP_TYPE_TCP
 6

	)

219 
	#IP_TYPE_UDP
 17

	)

220 
	#IP_TYPE_SCTP
 132

	)

224 
	#IP_VERSION
 4

	)

226 
	#IP_DONT_FRAGMENT
 0x4000

	)

227 
	#IP_MORE_FRAGMENTS
 0x2000

	)

228 
	#IP_FRAG_OFF_MASK
 0x1ff‡

	)

229 
	#IP_IS_FRAGMENT
(
ù_‰ag_off
) \

230 ((
ù_‰ag_off
Ë& 
	`ht⁄s
(
IP_MORE_FRAGMENTS
 | 
IP_FRAG_OFF_MASK
))

	)

232 
	#IP_ADDR_LEN
 4

	)

234 
	#IP_HEADER_LEN
 20

	)

235 
	sù_hódî
 {

236 
uöt8_t
 
	mù_ihl_vî
;

237 
uöt8_t
 
	mù_tos
;

238 
uöt16_t
 
	mù_tŸ_Àn
;

239 
uöt16_t
 
	mù_id
;

240 
uöt16_t
 
	mù_‰ag_off
;

241 
uöt8_t
 
	mù_âl
;

242 
uöt8_t
 
	mù_¥Ÿo
;

243 
uöt16_t
 
	mù_csum
;

244 
uöt32_t
 
	mù_§c
;

245 
uöt32_t
 
	mù_d°
;

247 
BUILD_ASSERT_DECL
(
IP_HEADER_LEN
 =(
ù_hódî
));

249 
	#IPV6_TYPE_HBH
 0

	)

250 
	#IPV6_TYPE_DOH
 60

	)

251 
	#IPV6_TYPE_RH
 43

	)

252 
	#IPV6_TYPE_FH
 44

	)

253 
	#IPV6_TYPE_AH
 51

	)

254 
	#IPV6_TYPE_ESP
 50

	)

255 
	#IPV6_TYPE_ICMPV6
 58

	)

256 
	#IPV6_NO_NEXT_HEADER
 59

	)

258 
	#IPV6_VER
(
ùv6_vî_tc_Ê
Ë((ùv6_vî_tc_ÊË>> 28)

	)

259 
	#IPV6_TC
(
ùv6_vî_tc_Ê
Ë((ùv6_vî_tc_ÊË& 0xff00000)

	)

260 
	#IPV6_FLABEL
(
ùv6_vî_tc_Ê
Ë((ùv6_vî_tc_ÊË& 0xffff)

	)

262 
	#IPV6_FLABEL_MASK
 0xfffff

	)

264 
	#IPV6_HEADER_LEN
 40

	)

265 
	sùv6_hódî
 {

266 
uöt32_t
 
	mùv6_vî_tc_Ê
;

267 
uöt16_t
 
	mùv6_∑y_Àn
;

268 
uöt8_t
 
	mùv6_√xt_hd
;

269 
uöt8_t
 
	mùv6_h›_limô
;

270 
ö6_addr
 
	mùv6_§c
;

271 
ö6_addr
 
	mùv6_d°
;

273 
BUILD_ASSERT_DECL
(
IPV6_HEADER_LEN
 =(
ùv6_hódî
));

275 
	eùv6_ext_hdr_‹dî_T1
 {

276 
	mHBH
 = 1 << 0,

277 
	mDESTINATION
 = 1 << 1,

278 
	mROUTING
 = 1 << 2,

279 
	mFRAGMENT
 = 1 << 3,

280 
	mAUTHENTICATION
 = 1 << 4,

281 
	mESP
 = 1 << 5,

284 
	#ICMPV6_NEIGHSOL
 135

	)

285 
	#ICMPV6_NEIGHADV
 136

	)

287 
	#ICMP_HEADER_LEN
 4

	)

288 
	sicmp_hódî
 {

289 
uöt8_t
 
	micmp_ty≥
;

290 
uöt8_t
 
	micmp_code
;

291 
uöt16_t
 
	micmp_csum
;

293 
BUILD_ASSERT_DECL
(
ICMP_HEADER_LEN
 =(
icmp_hódî
));

296 
	#ND_OPT_SLL
 1

	)

297 
	#ND_OPT_TLL
 2

	)

299 
	#IPV6_ND_HEADER_LEN
 20

	)

300 
	sùv6_nd_hódî
{

301 
uöt32_t
 
	mª£rved
;

302 
ö6_addr
 
	mèrgë_addr
;

305 
	#IPV6_ND_OPT_HD_LEN
 2

	)

306 
	sùv6_nd_›ti⁄s_hd
{

307 
uöt8_t
 
	mty≥
;

308 
uöt8_t
 
	mÀngth
;

311 
	#UDP_HEADER_LEN
 8

	)

312 
	sudp_hódî
 {

313 
uöt16_t
 
	mudp_§c
;

314 
uöt16_t
 
	mudp_d°
;

315 
uöt16_t
 
	mudp_Àn
;

316 
uöt16_t
 
	mudp_csum
;

318 
BUILD_ASSERT_DECL
(
UDP_HEADER_LEN
 =(
udp_hódî
));

320 
	#TCP_FIN
 0x01

	)

321 
	#TCP_SYN
 0x02

	)

322 
	#TCP_RST
 0x04

	)

323 
	#TCP_PSH
 0x08

	)

324 
	#TCP_ACK
 0x10

	)

325 
	#TCP_URG
 0x20

	)

327 
	#TCP_FLAGS
(
t˝_˘l
Ë(
	`ht⁄s
—˝_˘lË& 0x003f)

	)

328 
	#TCP_OFFSET
(
t˝_˘l
Ë(
	`ht⁄s
—˝_˘lË>> 12)

	)

330 
	#TCP_HEADER_LEN
 20

	)

331 
	st˝_hódî
 {

332 
uöt16_t
 
	mt˝_§c
;

333 
uöt16_t
 
	mt˝_d°
;

334 
uöt32_t
 
	mt˝_£q
;

335 
uöt32_t
 
	mt˝_ack
;

336 
uöt16_t
 
	mt˝_˘l
;

337 
uöt16_t
 
	mt˝_wösz
;

338 
uöt16_t
 
	mt˝_csum
;

339 
uöt16_t
 
	mt˝_urg
;

341 
BUILD_ASSERT_DECL
(
TCP_HEADER_LEN
 =(
t˝_hódî
));

343 
	#SCTP_HEADER_LEN
 12

	)

344 
	ss˘p_hódî
 {

345 
uöt16_t
 
	ms˘p_§c
;

346 
uöt16_t
 
	ms˘p_d°
;

347 
uöt32_t
 
	ms˘p_vîif
;

348 
uöt32_t
 
	ms˘p_csum
;

350 
BUILD_ASSERT_DECL
(
SCTP_HEADER_LEN
 =(
s˘p_hódî
));

352 
	#ARP_HRD_ETHERNET
 1

	)

353 
	#ARP_PRO_IP
 0x0800

	)

354 
	#ARP_OP_REQUEST
 1

	)

355 
	#ARP_OP_REPLY
 2

	)

357 
	#ARP_ETH_HEADER_LEN
 28

	)

358 
	s¨p_ëh_hódî
 {

360 
uöt16_t
 
	m¨_hrd
;

361 
uöt16_t
 
	m¨_¥o
;

362 
uöt8_t
 
	m¨_h 
;

363 
uöt8_t
 
	m¨_∂n
;

364 
uöt16_t
 
	m¨_›
;

367 
uöt8_t
 
	m¨_sha
[
ETH_ADDR_LEN
];

368 
uöt32_t
 
	m¨_•a
;

369 
uöt8_t
 
	m¨_tha
[
ETH_ADDR_LEN
];

370 
uöt32_t
 
	m¨_ça
;

371 } 
__©åibuã__
((
∑cked
));

372 
BUILD_ASSERT_DECL
(
ARP_ETH_HEADER_LEN
 =(
¨p_ëh_hódî
));

374 
	sqèg_¥efix
 {

375 
uöt16_t
 
	mëh_ty≥
;

376 
uöt16_t
 
	mtci
;

379 
	#PBB_HEADER_LEN
 18

	)

380 
	#PBB_ISID_MASK
 0xffffff

	)

382 
	spbb_hódî
 {

383 
uöt32_t
 
	mid
;

384 
uöt8_t
 
	mc_ëh_d°
[
ETH_ADDR_LEN
];

385 
uöt8_t
 
	mc_ëh_§c
[
ETH_ADDR_LEN
];

386 
uöt16_t
 
	mpbb_√xt_ty≥
;

389 
	#MPLS_LABEL_MAX
 1048575

	)

390 
	#MPLS_TC_MAX
 7

	)

392 
	#MPLS_HEADER_LEN
 4

	)

393 
	sm∂s_hódî
 {

394 
uöt32_t
 
	mfõlds
;

397 
	#MPLS_TTL_MASK
 0x000000ff

	)

398 
	#MPLS_TTL_SHIFT
 0

	)

399 
	#MPLS_S_MASK
 0x00000100

	)

400 
	#MPLS_S_SHIFT
 8

	)

401 
	#MPLS_TC_MASK
 0x00000e00

	)

402 
	#MPLS_TC_SHIFT
 9

	)

403 
	#MPLS_LABEL_MASK
 0xfffff000

	)

404 
	#MPLS_LABEL_SHIFT
 12

	)

406 
BUILD_ASSERT_DECL
(
MPLS_HEADER_LEN
 =(
m∂s_hódî
));

408 
	s¥Ÿocﬁs_°d
 {

409 
ëh_hódî
 * 
	mëh
;

410 
¢≠_hódî
 * 
	mëh_¢≠
;

411 
vœn_hódî
 * 
	mvœn
;

412 
vœn_hódî
 * 
	mvœn_œ°
;

413 
m∂s_hódî
 * 
	mm∂s
;

414 
pbb_hódî
 * 
	mpbb
;

415 
ù_hódî
 * 
	mùv4
;

416 
ùv6_hódî
 * 
	mùv6
;

417 
¨p_ëh_hódî
 * 
	m¨p
;

418 
t˝_hódî
 * 
	mt˝
;

419 
udp_hódî
 * 
	mudp
;

420 
s˘p_hódî
 * 
	ms˘p
;

421 
icmp_hódî
 * 
	micmp
;

424 
ölöe
 

425 
	$¥Ÿocﬁ_ª£t
(
¥Ÿocﬁs_°d
 *
¥Ÿo
) {

426 
¥Ÿo
->
ëh
 = 
NULL
;

427 
¥Ÿo
->
ëh_¢≠
 = 
NULL
;

428 
¥Ÿo
->
vœn
 = 
NULL
;

429 
¥Ÿo
->
vœn_œ°
 = 
NULL
;

430 
¥Ÿo
->
m∂s
 = 
NULL
;

431 
¥Ÿo
->
ùv4
 = 
NULL
;

432 
¥Ÿo
->
ùv6
 = 
NULL
;

433 
¥Ÿo
->
¨p
 = 
NULL
;

434 
¥Ÿo
->
t˝
 = 
NULL
;

435 
¥Ÿo
->
udp
 = 
NULL
;

436 
¥Ÿo
->
s˘p
 = 
NULL
;

437 
¥Ÿo
->
icmp
 = 
NULL
;

438 
¥Ÿo
->
pbb
 = 
NULL
;

439 
	}
}

	@lib/pcap.c

34 
	~<c⁄fig.h
>

35 
	~"pˇp.h
"

36 
	~<as£π.h
>

37 
	~<î∫o.h
>

38 
	~<öây≥s.h
>

39 
	~<°rög.h
>

40 
	~"compûî.h
"

41 
	~"oÂbuf.h
"

43 
	#LOG_MODULE
 
VLM_pˇp


	)

44 
	~"vlog.h
"

46 
	spˇp_hdr
 {

47 
uöt32_t
 
	mmagic_numbî
;

48 
uöt16_t
 
	mvîsi⁄_maj‹
;

49 
uöt16_t
 
	mvîsi⁄_mö‹
;

50 
öt32_t
 
	mthisz⁄e
;

51 
uöt32_t
 
	msigfigs
;

52 
uöt32_t
 
	m¢≠Àn
;

53 
uöt32_t
 
	m√tw‹k
;

54 } 
	gPACKED
;

56 
	spˇ¥ec_hdr
 {

57 
uöt32_t
 
	mts_£c
;

58 
uöt32_t
 
	mts_u£c
;

59 
uöt32_t
 
	mö˛_Àn
;

60 
uöt32_t
 
	m‹ig_Àn
;

61 } 
	gPACKED
;

63 
FILE
 *

64 
	$pˇp_›í
(c⁄° *
fûe_«me
, c⁄° *
mode
)

66 
FILE
 *
fûe
;

68 
	`as£π
(!
	`°rcmp
(
mode
, "rb") || !strcmp(mode, "wb"));

70 
fûe
 = 
	`f›í
(
fûe_«me
, 
mode
);

71 i‡(
fûe
 =
NULL
) {

72 
	`VLOG_WARN
(
LOG_MODULE
, "%s: failedÅo openÖcap file for %s",

73 
fûe_«me
, 
mode
[0] == 'r' ? "reading" : "writing");

74  
NULL
;

77 i‡(
mode
[0] == 'r') {

78 i‡(!
	`pˇp_ªad_hódî
(
fûe
)) {

79 
	`f˛o£
(
fûe
);

80  
NULL
;

83 
	`pˇp_wrôe_hódî
(
fûe
);

85  
fûe
;

86 
	}
}

89 
	$pˇp_ªad_hódî
(
FILE
 *
fûe
)

91 
pˇp_hdr
 
ph
;

92 i‡(
	`‰ód
(&
ph
, Öh, 1, 
fûe
) != 1) {

93 
îr‹
 = 
	`„º‹
(
fûe
Ë? 
î∫o
 : 
EOF
;

94 
	`VLOG_WARN
(
LOG_MODULE
, "failedÅoÑeadÖcap header: %s",

95 
îr‹
 > 0 ? 
	`°ªº‹
(error) : "end of file");

96  
îr‹
;

98 i‡(
ph
.
magic_numbî
 != 0xa1b2c3d4 &&Öh.magic_number != 0xd4c3b2a1) {

99 
	`VLOG_WARN
(
LOG_MODULE
, "bad magi¯0x%08"
PRIx32
"ÑeadingÖcap file "

100 "”x≥˘ed 0xa1b2c3d4 o∏0xd4c3b2a1)", 
ph
.
magic_numbî
);

101  
EPROTO
;

104 
	}
}

107 
	$pˇp_wrôe_hódî
(
FILE
 *
fûe
)

111 
pˇp_hdr
 
ph
;

112 
ph
.
magic_numbî
 = 0xa1b2c3d4;

113 
ph
.
vîsi⁄_maj‹
 = 2;

114 
ph
.
vîsi⁄_mö‹
 = 4;

115 
ph
.
thisz⁄e
 = 0;

116 
ph
.
sigfigs
 = 0;

117 
ph
.
¢≠Àn
 = 1518;

118 
ph
.
√tw‹k
 = 1;

119 
	`fwrôe
(&
ph
, Öh, 1, 
fûe
);

120 
	}
}

123 
	$pˇp_ªad
(
FILE
 *
fûe
, 
oÂbuf
 **
buÂ
)

125 
pˇ¥ec_hdr
 
¥h
;

126 
oÂbuf
 *
buf
;

127 *
d©a
;

128 
size_t
 
Àn
;

130 *
buÂ
 = 
NULL
;

133 i‡(
	`‰ód
(&
¥h
, Örh, 1, 
fûe
) != 1) {

134 
îr‹
 = 
	`„º‹
(
fûe
Ë? 
î∫o
 : 
EOF
;

135 
	`VLOG_WARN
(
LOG_MODULE
, "failedÅoÑeadÖcapÑecord header: %s",

136 
îr‹
 > 0 ? 
	`°ªº‹
(error) : "end of file");

137  
îr‹
;

141 
Àn
 = 
¥h
.
ö˛_Àn
;

142 i‡(
Àn
 > 0xffff) {

143 
uöt32_t
 
sw≠≥d_Àn
 = (((
Àn
 & 0xff000000) >> 24) |

144 ((
Àn
 & 0x00ff0000) >> 8) |

145 ((
Àn
 & 0x0000ff00) << 8) |

146 ((
Àn
 & 0x000000ff) << 24));

147 i‡(
sw≠≥d_Àn
 > 0xffff) {

148 
	`VLOG_WARN
(
LOG_MODULE
, "badÖackëÜígth %zu o∏%"
PRIu32
" "

150 
Àn
, 
sw≠≥d_Àn
);

151  
EPROTO
;

153 
Àn
 = 
sw≠≥d_Àn
;

157 
buf
 = 
	`oÂbuf_√w
(
Àn
);

158 
d©a
 = 
	`oÂbuf_put_unöô
(
buf
, 
Àn
);

159 i‡(
	`‰ód
(
d©a
, 
Àn
, 1, 
fûe
) != 1) {

160 
îr‹
 = 
	`„º‹
(
fûe
Ë? 
î∫o
 : 
EOF
;

161 
	`VLOG_WARN
(
LOG_MODULE
, "failedÅoÑeadÖcapÖacket: %s",

162 
îr‹
 > 0 ? 
	`°ªº‹
(error) : "end of file");

163 
	`oÂbuf_dñëe
(
buf
);

164  
îr‹
;

166 *
buÂ
 = 
buf
;

168 
	}
}

171 
	$pˇp_wrôe
(
FILE
 *
fûe
, 
oÂbuf
 *
buf
)

173 
pˇ¥ec_hdr
 
¥h
;

174 
¥h
.
ts_£c
 = 0;

175 
¥h
.
ts_u£c
 = 0;

176 
¥h
.
ö˛_Àn
 = 
buf
->
size
;

177 
¥h
.
‹ig_Àn
 = 
buf
->
size
;

178 
	`fwrôe
(&
¥h
, Örh, 1, 
fûe
);

179 
	`fwrôe
(
buf
->
d©a
, buf->
size
, 1, 
fûe
);

180 
	}
}

	@lib/pcap.h

34 #i‚de‡
PCAP_H


35 
	#PCAP_H
 1

	)

37 
	~<°dio.h
>

39 
	goÂbuf
;

41 
FILE
 *
pˇp_›í
(c⁄° *
fûe_«me
, c⁄° *
mode
);

42 
pˇp_ªad_hódî
(
FILE
 *);

43 
pˇp_wrôe_hódî
(
FILE
 *);

44 
pˇp_ªad
(
FILE
 *, 
oÂbuf
 **);

45 
pˇp_wrôe
(
FILE
 *, 
oÂbuf
 *);

	@lib/poll-loop.c

34 
	~<c⁄fig.h
>

35 
	~"pﬁl-lo›.h
"

36 
	~<as£π.h
>

37 
	~<î∫o.h
>

38 
	~<pﬁl.h
>

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

41 
	~<öây≥s.h
>

42 
	~"backåa˚.h
"

43 
	~"dy«mic-°rög.h
"

44 
	~"li°.h
"

45 
	~"timevÆ.h
"

47 
	#LOG_MODULE
 
VLM_pﬁl_lo›


	)

48 
	~"vlog.h
"

51 
	spﬁl_waôî
 {

53 
li°
 
	mnode
;

54 
	mfd
;

55 
	mevíts
;

56 
pﬁl_fd_func
 *
	mfun˘i⁄
;

57 *
	maux
;

58 
backåa˚
 *
	mbackåa˚
;

61 
pﬁlfd
 *
	mpﬁlfd
;

66 
li°
 
	gwaôîs
 = 
LIST_INITIALIZER
(&
waôîs
);

69 
size_t
 
	gn_waôîs
;

73 
	gtimeout
 = -1;

76 
backåa˚
 
	gtimeout_backåa˚
;

80 #i‚de‡
NDEBUG


81 
pﬁl_waôî
 *
	gru¬ög_cb
;

84 
pﬁl_waôî
 *
√w_waôî
(
fd
, 
evíts
);

93 
pﬁl_waôî
 *

94 
	$pﬁl_fd_waô
(
fd
, 
evíts
)

96  
	`√w_waôî
(
fd
, 
evíts
);

97 
	}
}

107 
	$pﬁl_timî_waô
(
m£c
)

109 i‡(
timeout
 < 0 || 
m£c
 <Åimeout) {

110 
timeout
 = 
	`MAX
(0, 
m£c
);

111 i‡(
	`VLOG_IS_DBG_ENABLED
(
LOG_MODULE
)) {

112 
	`backåa˚_ˇ±uª
(&
timeout_backåa˚
);

115 
	}
}

118 
	$pﬁl_timî_waô_de¸ó£
(
m£c
)

120 i‡(
m£c
 > 0 && m£¯< 
timeout
) {

121 
	`pﬁl_timî_waô
(
m£c
);

123 
	}
}

129 
	$pﬁl_immedüã_wake
()

131 
	`pﬁl_timî_waô
(0);

132 
	}
}

134 
	$PRINTF_FORMAT
(2, 3)

135 
	$log_wakeup
(c⁄° 
backåa˚
 *backåa˚, c⁄° *
f‹m©
, ...)

137 
ds
 ds;

138 
va_li°
 
¨gs
;

140 
	`ds_öô
(&
ds
);

141 
	`va_°¨t
(
¨gs
, 
f‹m©
);

142 
	`ds_put_f‹m©_vÆi°
(&
ds
, 
f‹m©
, 
¨gs
);

143 
	`va_íd
(
¨gs
);

145 i‡(
backåa˚
) {

146 
i
;

148 
	`ds_put_ch¨
(&
ds
, ':');

149 
i
 = 0; i < 
backåa˚
->
n_‰ames
; i++) {

150 
	`ds_put_f‹m©
(&
ds
, " 0x%"
PRIxPTR
"", 
backåa˚
->
‰ames
[
i
]);

153 
	`VLOG_DBG
(
LOG_MODULE
, "%s", 
	`ds_c°r
(&
ds
));

154 
	`ds_de°roy
(&
ds
);

155 
	}
}

164 
	$pﬁl_block
()

166 
pﬁlfd
 *
pﬁlfds
;

167 
size_t
 
max_pﬁlfds
;

169 
pﬁl_waôî
 *
pw
;

170 
li°
 *
node
;

171 
n_pﬁlfds
;

172 
ªtvÆ
;

174 
	`as£π
(!
ru¬ög_cb
);

175 i‡(
max_pﬁlfds
 < 
n_waôîs
) {

176 
max_pﬁlfds
 = 
n_waôîs
;

177 
pﬁlfds
 = 
	`xªÆloc
’ﬁlfds, 
max_pﬁlfds
 *  *pollfds);

180 
n_pﬁlfds
 = 0;

181 
	`LIST_FOR_EACH
 (
pw
, 
pﬁl_waôî
, 
node
, &
waôîs
) {

182 
pw
->
pﬁlfd
 = &
pﬁlfds
[
n_pﬁlfds
];

183 
pﬁlfds
[
n_pﬁlfds
].
fd
 = 
pw
->fd;

184 
pﬁlfds
[
n_pﬁlfds
].
evíts
 = 
pw
->events;

185 
pﬁlfds
[
n_pﬁlfds
].
ªvíts
 = 0;

186 
n_pﬁlfds
++;

189 
ªtvÆ
 = 
	`time_pﬁl
(
pﬁlfds
, 
n_pﬁlfds
, 
timeout
);

190 i‡(
ªtvÆ
 < 0) {

191 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

192 
	`VLOG_ERR_RL
(
LOG_MODULE
, &
æ
, "pﬁl: %s", 
	`°ªº‹
(-
ªtvÆ
));

193 } i‡(!
ªtvÆ
 && 
	`VLOG_IS_DBG_ENABLED
(
LOG_MODULE
)) {

194 
	`log_wakeup
(&
timeout_backåa˚
, "%d-m†timeout", 
timeout
);

197 
node
 = 
waôîs
.
√xt
;Çode != &waiters; ) {

198 
pw
 = 
	`CONTAINER_OF
(
node
, 
pﬁl_waôî
,Çode);

199 i‡(!
pw
->
pﬁlfd
 || !pw->pﬁlfd->
ªvíts
) {

200 i‡(
pw
->
fun˘i⁄
) {

201 
node
 =Çode->
√xt
;

205 i‡(
	`VLOG_IS_DBG_ENABLED
(
LOG_MODULE
)) {

206 
	`log_wakeup
(
pw
->
backåa˚
, "%s%s%s%s%s on fd %d",

207 
pw
->
pﬁlfd
->
ªvíts
 & 
POLLIN
 ? "[POLLIN]" : "",

208 
pw
->
pﬁlfd
->
ªvíts
 & 
POLLOUT
 ? "[POLLOUT]" : "",

209 
pw
->
pﬁlfd
->
ªvíts
 & 
POLLERR
 ? "[POLLERR]" : "",

210 
pw
->
pﬁlfd
->
ªvíts
 & 
POLLHUP
 ? "[POLLHUP]" : "",

211 
pw
->
pﬁlfd
->
ªvíts
 & 
POLLNVAL
 ? "[POLLNVAL]" : "",

212 
pw
->
fd
);

215 i‡(
pw
->
fun˘i⁄
) {

216 #i‚de‡
NDEBUG


217 
ru¬ög_cb
 = 
pw
;

219 
pw
->
	`fun˘i⁄
’w->
fd
,Öw->
pﬁlfd
->
ªvíts
,Öw->
aux
);

220 #i‚de‡
NDEBUG


221 
ru¬ög_cb
 = 
NULL
;

225 
node
 =Çode->
√xt
;

226 
	`pﬁl_ˇn˚l
(
pw
);

229 
timeout
 = -1;

230 
timeout_backåa˚
.
n_‰ames
 = 0;

231 
	}
}

241 
pﬁl_waôî
 *

242 
	$pﬁl_fd_ˇŒback
(
fd
, 
evíts
, 
pﬁl_fd_func
 *
fun˘i⁄
, *
aux
)

244 
pﬁl_waôî
 *
pw
 = 
	`√w_waôî
(
fd
, 
evíts
);

245 
pw
->
fun˘i⁄
 = function;

246 
pw
->
aux
 =áux;

247  
pw
;

248 
	}
}

263 
	$pﬁl_ˇn˚l
(
pﬁl_waôî
 *
pw
)

265 i‡(
pw
) {

266 
	`as£π
(
pw
 !
ru¬ög_cb
);

267 
	`li°_ªmove
(&
pw
->
node
);

268 
	`‰ì
(
pw
->
backåa˚
);

269 
	`‰ì
(
pw
);

270 
n_waôîs
--;

272 
	}
}

275 
pﬁl_waôî
 *

276 
	$√w_waôî
(
fd
, 
evíts
)

278 
pﬁl_waôî
 *
waôî
 = 
	`xˇŒoc
(1,  *waiter);

279 
	`as£π
(
fd
 >= 0);

280 
waôî
->
fd
 = fd;

281 
waôî
->
evíts
 =Évents;

282 i‡(
	`VLOG_IS_DBG_ENABLED
(
LOG_MODULE
)) {

283 
waôî
->
backåa˚
 = 
	`xmÆloc
( *waiter->backtrace);

284 
	`backåa˚_ˇ±uª
(
waôî
->
backåa˚
);

286 
	`li°_push_back
(&
waôîs
, &
waôî
->
node
);

287 
n_waôîs
++;

288  
waôî
;

289 
	}
}

	@lib/poll-loop.h

49 #i‚de‡
POLL_LOOP_H


50 
	#POLL_LOOP_H
 1

	)

52 
	~<pﬁl.h
>

54 
	gpﬁl_waôî
;

57 
pﬁl_waôî
 *
pﬁl_fd_waô
(
fd
, 
evíts
);

58 
pﬁl_timî_waô
(
m£c
);

59 
pﬁl_immedüã_wake
();

62 
pﬁl_block
();

65 
	tpﬁl_fd_func
(
	tfd
, 
	tªvíts
, *
	taux
);

66 
pﬁl_waôî
 *
pﬁl_fd_ˇŒback
(
fd
, 
evíts
,

67 
pﬁl_fd_func
 *, *
aux
);

70 
pﬁl_ˇn˚l
(
pﬁl_waôî
 *);

	@lib/port-array.c

34 
	~<c⁄fig.h
>

35 
	~"p‹t-¨øy.h
"

36 
	~<°dlib.h
>

38 
p‹t_¨øy_l2
 
	gl2_£¡öñ
;

39 
p‹t_¨øy_l3
 
	gl3_£¡öñ
;

40 
boﬁ
 
	göôed
;

44 
	$p‹t_¨øy_öô
(
p‹t_¨øy
 *
∑
)

46 
size_t
 
i
;

47 i‡(!
öôed
) {

48 
öôed
 = 
åue
;

49 
i
 = 0; i < 
PORT_ARRAY_L2_SIZE
; i++) {

50 
l2_£¡öñ
.
l2
[
i
] = &
l3_£¡öñ
;

53 
i
 = 0; i < 
PORT_ARRAY_L1_SIZE
; i++) {

54 
∑
->
l1
[
i
] = &
l2_£¡öñ
;

56 
	}
}

61 
	$p‹t_¨øy_de°roy
(
p‹t_¨øy
 *
∑
)

63 
l1_idx
;

65 
l1_idx
 = 0;Ü1_idx < 
PORT_ARRAY_L1_SIZE
;Ü1_idx++) {

66 
p‹t_¨øy_l2
 *
l2
 = 
∑
->
l1
[
l1_idx
];

68 i‡(
l2
 !&
l2_£¡öñ
) {

69 
l2_idx
;

71 
l2_idx
 = 0;Ü2_idx < 
PORT_ARRAY_L2_SIZE
;Ü2_idx++) {

72 
p‹t_¨øy_l3
 *
l3
 = 
l2
->l2[
l2_idx
];

73 i‡(
l3
 !&
l3_£¡öñ
) {

74 
	`‰ì
(
l3
);

77 
	`‰ì
(
l2
);

80 
	}
}

84 
	$p‹t_¨øy_˛ór
(
p‹t_¨øy
 *
∑
)

86 
	`p‹t_¨øy_de°roy
(
∑
);

87 
	`p‹t_¨øy_öô
(
∑
);

88 
	}
}

92 
	$p‹t_¨øy_£t
(
p‹t_¨øy
 *
∑
, 
uöt16_t
 
idx
, *
p
)

94 
p‹t_¨øy_l2
 **
l2p
, *
l2
;

95 
p‹t_¨øy_l3
 **
l3p
, *
l3
;

98 
l2p
 = &
∑
->
l1
[
	`PORT_ARRAY_L1
(
idx
)];

99 i‡(*
l2p
 =&
l2_£¡öñ
) {

100 *
l2p
 = 
	`xmemdup
(&
l2_£¡öñ
, Ü2_sentinel);

102 
l2
 = *
l2p
;

105 
l3p
 = &
l2
->l2[
	`PORT_ARRAY_L2
(
idx
)];

106 i‡(*
l3p
 =&
l3_£¡öñ
) {

107 *
l3p
 = 
	`xmemdup
(&
l3_£¡öñ
, Ü3_sentinel);

109 
l3
 = *
l3p
;

112 
l3
->l3[
	`PORT_ARRAY_L3
(
idx
)] = 
p
;

113 
	}
}

116 
	$√xt
(c⁄° 
p‹t_¨øy
 *
∑
, *
idxp
)

118 
idx
 = *
idxp
;

123 
l1_idx
 = 
idx
 >> 
PORT_ARRAY_L1_SHIFT
;

124 
l2_idx
 = 
	`PORT_ARRAY_L2
(
idx
);

125 
l3_idx
 = 
	`PORT_ARRAY_L3
(
idx
);

126 
l1_idx
 < 
PORT_ARRAY_L1_SIZE
) {

127 
p‹t_¨øy_l2
 *
l2
 = 
∑
->
l1
[
l1_idx
];

128 i‡(
l2
 !&
l2_£¡öñ
) {

129 
l2_idx
 < 
PORT_ARRAY_L2_SIZE
) {

130 
p‹t_¨øy_l3
 *
l3
 = 
l2
->l2[
l2_idx
];

131 i‡(
l3
 !&
l3_£¡öñ
) {

132 
l3_idx
 < 
PORT_ARRAY_L3_SIZE
) {

133 *
p
 = 
l3
->l3[
l3_idx
];

134 i‡(
p
) {

135 *
idxp
 = ((
l1_idx
 << 
PORT_ARRAY_L1_SHIFT
)

136 | (
l2_idx
 << 
PORT_ARRAY_L2_SHIFT
)

137 | (
l3_idx
 << 
PORT_ARRAY_L3_SHIFT
));

138  
p
;

140 
l3_idx
++;

143 
l2_idx
++;

144 
l3_idx
 = 0;

147 
l1_idx
++;

148 
l2_idx
 = 0;

149 
l3_idx
 = 0;

151 *
idxp
 = 
PORT_ARRAY_SIZE
;

152  
NULL
;

153 
	}
}

159 
	$p‹t_¨øy_fú°
(c⁄° 
p‹t_¨øy
 *
∑
, *
idxp
)

161 *
idxp
 = 0;

162  
	`√xt
(
∑
, 
idxp
);

163 
	}
}

170 
	$p‹t_¨øy_√xt
(c⁄° 
p‹t_¨øy
 *
∑
, *
idxp
)

172 ++*
idxp
;

173  
	`√xt
(
∑
, 
idxp
);

174 
	}
}

	@lib/port-array.h

34 #i‚de‡
PORT_ARRAY_H


35 
	#PORT_ARRAY_H
 1

	)

37 
	~<as£π.h
>

38 
	~"›íÊow/›íÊow.h
"

39 
	~"utû.h
"

41 
ölöe
 
uöt16_t


42 
	$p‹t_¨øy_exåa˘_bôs__
(
uöt16_t
 
d©a
, 
°¨t
, 
cou¡
)

44  (
d©a
 >> 
°¨t
Ë& ((1u << 
cou¡
) - 1);

45 
	}
}

48 
	#PORT_ARRAY_L1_BITS
 5

	)

49 
	#PORT_ARRAY_L1_SHIFT
 (
PORT_ARRAY_L3_BITS
 + 
PORT_ARRAY_L2_BITS
)

	)

50 
	#PORT_ARRAY_L1_SIZE
 (1u << 
PORT_ARRAY_L1_BITS
)

	)

51 
	#PORT_ARRAY_L1
(
IDX
) \

52 
	`p‹t_¨øy_exåa˘_bôs__
(
IDX
, 
PORT_ARRAY_L1_SHIFT
, 
PORT_ARRAY_L1_BITS
)

	)

55 
	#PORT_ARRAY_L2_BITS
 5

	)

56 
	#PORT_ARRAY_L2_SHIFT
 
PORT_ARRAY_L3_BITS


	)

57 
	#PORT_ARRAY_L2_SIZE
 (1u << 
PORT_ARRAY_L2_BITS
)

	)

58 
	#PORT_ARRAY_L2
(
IDX
) \

59 
	`p‹t_¨øy_exåa˘_bôs__
(
IDX
, 
PORT_ARRAY_L2_SHIFT
, 
PORT_ARRAY_L2_BITS
)

	)

62 
	#PORT_ARRAY_L3_BITS
 6

	)

63 
	#PORT_ARRAY_L3_SHIFT
 0

	)

64 
	#PORT_ARRAY_L3_SIZE
 (1u << 
PORT_ARRAY_L3_BITS
)

	)

65 
	#PORT_ARRAY_L3
(
IDX
) \

66 
	`p‹t_¨øy_exåa˘_bôs__
(
IDX
, 
PORT_ARRAY_L3_SHIFT
, 
PORT_ARRAY_L3_BITS
)

	)

68 
	#PORT_ARRAY_SIZE
 (1u << (
PORT_ARRAY_L1_BITS
 \

69 + 
PORT_ARRAY_L2_BITS
 \

70 + 
PORT_ARRAY_L3_BITS
))

	)

72 
BUILD_ASSERT_DECL
(
PORT_ARRAY_SIZE
 > 0xffff);

77 
	sp‹t_¨øy
 {

78 
p‹t_¨øy_l2
 *
	ml1
[1u << 
PORT_ARRAY_L1_BITS
];

81 
	sp‹t_¨øy_l2
 {

82 
p‹t_¨øy_l3
 *
	ml2
[1u << 
PORT_ARRAY_L2_BITS
];

85 
	sp‹t_¨øy_l3
 {

86 *
	ml3
[1u << 
PORT_ARRAY_L3_BITS
];

91 
ölöe
 *

92 
	$p‹t_¨øy_gë
(c⁄° 
p‹t_¨øy
 *
∑
, 
uöt16_t
 
idx
)

94 
l1_idx
 = 
	`PORT_ARRAY_L1
(
idx
);

95 
l2_idx
 = 
	`PORT_ARRAY_L2
(
idx
);

96 
l3_idx
 = 
	`PORT_ARRAY_L3
(
idx
);

97  
∑
->
l1
[
l1_idx
]->
l2
[
l2_idx
]->
l3
[
l3_idx
];

98 
	}
}

100 
p‹t_¨øy_öô
(
p‹t_¨øy
 *);

101 
p‹t_¨øy_de°roy
(
p‹t_¨øy
 *);

102 
p‹t_¨øy_˛ór
(
p‹t_¨øy
 *);

103 
p‹t_¨øy_£t
(
p‹t_¨øy
 *, 
uöt16_t
 
idx
, *);

104 *
p‹t_¨øy_fú°
(c⁄° 
p‹t_¨øy
 *, *);

105 *
p‹t_¨øy_√xt
(c⁄° 
p‹t_¨øy
 *, *);

	@lib/process.c

34 
	~<c⁄fig.h
>

35 
	~"¥o˚ss.h
"

36 
	~<as£π.h
>

37 
	~<î∫o.h
>

38 
	~<f˙é.h
>

39 
	~<sig«l.h
>

40 
	~<°dlib.h
>

41 
	~<°rög.h
>

42 
	~<sys/°©.h
>

43 
	~<sys/waô.h
>

44 
	~<uni°d.h
>

45 
	~"dy«mic-°rög.h
"

46 
	~"li°.h
"

47 
	~"pﬁl-lo›.h
"

48 
	~"sockë-utû.h
"

49 
	~"utû.h
"

51 
	#LOG_MODULE
 
VLM_¥o˚ss


	)

52 
	~"vlog.h
"

54 
	s¥o˚ss
 {

55 
li°
 
	mnode
;

56 *
	m«me
;

57 
pid_t
 
	mpid
;

60 vﬁ©ûê
boﬁ
 
	mexôed
;

61 vﬁ©ûê
	m°©us
;

65 
	gfds
[2];

68 
li°
 
	gÆl_¥o˚s£s
 = 
LIST_INITIALIZER
(&
Æl_¥o˚s£s
);

70 
block_sigchld
(
sig£t_t
 *);

71 
unblock_sigchld
(c⁄° 
sig£t_t
 *);

72 
sigchld_h™dÀr
(
sigƒ
 
UNUSED
);

73 
boﬁ
 
is_membî
(
x
, c⁄° *
¨øy
, 
size_t
);

74 
boﬁ
 
föd_ö_∑th
(c⁄° *
«me
);

83 
	$¥o˚ss_öô
()

85 
boﬁ
 
öôed
;

86 
siga˘i⁄
 
ß
;

88 i‡(
öôed
) {

91 
öôed
 = 
åue
;

94 i‡(
	`pùe
(
fds
)) {

95 
	`oÂ_Áèl
(
î∫o
, "couldÇot createÖipe");

97 
	`£t_n⁄blockög
(
fds
[0]);

98 
	`£t_n⁄blockög
(
fds
[1]);

101 
	`mem£t
(&
ß
, 0,  sa);

102 
ß
.
ß_h™dÀr
 = 
sigchld_h™dÀr
;

103 
	`sigem±y£t
(&
ß
.
ß_mask
);

104 
ß
.
ß_Êags
 = 
SA_NOCLDSTOP
 | 
SA_RESTART
;

105 i‡(
	`siga˘i⁄
(
SIGCHLD
, &
ß
, 
NULL
)) {

106 
	`oÂ_Áèl
(
î∫o
, "sigaction(SIGCHLD) failed");

108 
	}
}

111 
	$¥o˚ss_esˇ≥_¨gs
(**
¨gv
)

113 
ds
 d†
DS_EMPTY_INITIALIZER
;

114 **
¨gp
;

115 
¨gp
 = 
¨gv
; *argp;árgp++) {

116 c⁄° *
¨g
 = *
¨gp
;

117 c⁄° *
p
;

118 i‡(
¨gp
 !
¨gv
) {

119 
	`ds_put_ch¨
(&
ds
, ' ');

121 i‡(
¨g
[
	`°rc•n
(arg, " \t\r\n\v\\")]) {

122 
	`ds_put_ch¨
(&
ds
, '"');

123 
p
 = 
¨g
; *p;Ö++) {

124 i‡(*
p
 == '\\' || *p == '\"') {

125 
	`ds_put_ch¨
(&
ds
, '\\');

127 
	`ds_put_ch¨
(&
ds
, *
p
);

129 
	`ds_put_ch¨
(&
ds
, '"');

131 
	`ds_put_c°r
(&
ds
, 
¨g
);

134  
	`ds_c°r
(&
ds
);

135 
	}
}

149 
	$¥o˚ss_°¨t
(**
¨gv
,

150 c⁄° 
kìp_fds
[], 
size_t
 
n_kìp_fds
,

151 c⁄° 
nuŒ_fds
[], 
size_t
 
n_nuŒ_fds
,

152 
¥o˚ss
 **
µ
)

154 
sig£t_t
 
ﬁdsigs
;

155 
pid_t
 
pid
;

157 *
µ
 = 
NULL
;

158 
	`¥o˚ss_öô
();

160 i‡(
	`VLOG_IS_DBG_ENABLED
(
LOG_MODULE
)) {

161 *
¨gs
 = 
	`¥o˚ss_esˇ≥_¨gs
(
¨gv
);

162 
	`VLOG_DBG
(
LOG_MODULE
, "°¨tög sub¥o˚ss: %s", 
¨gs
);

163 
	`‰ì
(
¨gs
);

168 i‡(!
	`föd_ö_∑th
(
¨gv
[0])) {

169 
	`VLOG_ERR
(
LOG_MODULE
, "%†nŸ found i¿PATH", 
¨gv
[0]);

170  
ENOENT
;

173 
	`block_sigchld
(&
ﬁdsigs
);

174 
pid
 = 
	`f‹k
();

175 i‡(
pid
 < 0) {

176 
	`unblock_sigchld
(&
ﬁdsigs
);

177 
	`VLOG_WARN
(
LOG_MODULE
, "f‹k faûed: %s", 
	`°ªº‹
(
î∫o
));

178  
î∫o
;

179 } i‡(
pid
) {

181 
¥o˚ss
 *
p
;

182 c⁄° *
¶ash
;

184 
p
 = 
	`xˇŒoc
(1,  *p);

185 
p
->
pid
 =Öid;

186 
¶ash
 = 
	`°ºchr
(
¨gv
[0], '/');

187 
p
->
«me
 = 
	`x°rdup
(
¶ash
 ? sœsh + 1 : 
¨gv
[0]);

188 
p
->
exôed
 = 
Ál£
;

190 
	`li°_push_back
(&
Æl_¥o˚s£s
, &
p
->
node
);

191 
	`unblock_sigchld
(&
ﬁdsigs
);

193 *
µ
 = 
p
;

197 
fd_max
 = 
	`gë_max_fds
();

198 
fd
;

200 
	`unblock_sigchld
(&
ﬁdsigs
);

201 
fd
 = 0; fd < 
fd_max
; fd++) {

202 i‡(
	`is_membî
(
fd
, 
nuŒ_fds
, 
n_nuŒ_fds
)) {

203 
nuŒfd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

204 
	`dup2
(
nuŒfd
, 
fd
);

205 
	`˛o£
(
nuŒfd
);

206 } i‡(
fd
 >3 && !
	`is_membî
(fd, 
kìp_fds
, 
n_kìp_fds
)) {

207 
	`˛o£
(
fd
);

210 
	`execvp
(
¨gv
[0],árgv);

211 
	`Ârötf
(
°dîr
, "execvp(\"%s\") failed: %s\n",

212 
¨gv
[0], 
	`°ªº‹
(
î∫o
));

213 
	`_exô
(1);

215 
	}
}

219 
	$¥o˚ss_de°roy
(
¥o˚ss
 *
p
)

221 i‡(
p
) {

222 
sig£t_t
 
ﬁdsigs
;

224 
	`block_sigchld
(&
ﬁdsigs
);

225 
	`li°_ªmove
(&
p
->
node
);

226 
	`unblock_sigchld
(&
ﬁdsigs
);

228 
	`‰ì
(
p
->
«me
);

229 
	`‰ì
(
p
);

231 
	}
}

236 
	$¥o˚ss_kûl
(c⁄° 
¥o˚ss
 *
p
, 
sigƒ
)

238  (
p
->
exôed
 ? 
ESRCH


239 : !
	`kûl
(
p
->
pid
, 
sigƒ
) ? 0

240 : 
î∫o
);

241 
	}
}

244 
pid_t


245 
	$¥o˚ss_pid
(c⁄° 
¥o˚ss
 *
p
)

247  
p
->
pid
;

248 
	}
}

253 
	$¥o˚ss_«me
(c⁄° 
¥o˚ss
 *
p
)

255  
p
->
«me
;

256 
	}
}

259 
boﬁ


260 
	$¥o˚ss_exôed
(
¥o˚ss
 *
p
)

262 i‡(
p
->
exôed
) {

263  
åue
;

265 
buf
[
_POSIX_PIPE_BUF
];

266 
	`ªad
(
fds
[0], 
buf
,  buf);

267  
Ál£
;

269 
	}
}

275 
	$¥o˚ss_°©us
(c⁄° 
¥o˚ss
 *
p
)

277 
	`as£π
(
p
->
exôed
);

278  
p
->
°©us
;

279 
	}
}

282 
	$¥o˚ss_run
(**
¨gv
,

283 c⁄° 
kìp_fds
[], 
size_t
 
n_kìp_fds
,

284 c⁄° 
nuŒ_fds
[], 
size_t
 
n_nuŒ_fds
,

285 *
°©us
)

287 
¥o˚ss
 *
p
;

288 
ªtvÆ
;

290 
ªtvÆ
 = 
	`¥o˚ss_°¨t
(
¨gv
, 
kìp_fds
, 
n_kìp_fds
, 
nuŒ_fds
, 
n_nuŒ_fds
,

291 &
p
);

292 i‡(
ªtvÆ
) {

293 *
°©us
 = 0;

294  
ªtvÆ
;

297 !
	`¥o˚ss_exôed
(
p
)) {

298 
	`¥o˚ss_waô
(
p
);

299 
	`pﬁl_block
();

301 *
°©us
 = 
	`¥o˚ss_°©us
(
p
);

302 
	`¥o˚ss_de°roy
(
p
);

304 
	}
}

311 
	$¥o˚ss_°©us_msg
(
°©us
)

313 
ds
 d†
DS_EMPTY_INITIALIZER
;

314 i‡(
	`WIFEXITED
(
°©us
)) {

315 
	`ds_put_f‹m©
(&
ds
, "exô sètu†%d", 
	`WEXITSTATUS
(
°©us
));

316 } i‡(
	`WIFSIGNALED
(
°©us
Ë|| 
	`WIFSTOPPED
(status)) {

317 
sigƒ
 = 
	`WIFSIGNALED
(
°©us
Ë? 
	`WTERMSIG
(°©usË: 
	`WSTOPSIG
(status);

318 c⁄° *
«me
 = 
NULL
;

319 #ifde‡
HAVE_STRSIGNAL


320 
«me
 = 
	`°rsig«l
(
sigƒ
);

322 
	`ds_put_f‹m©
(&
ds
, "%s by signal %d",

323 
	`WIFSIGNALED
(
°©us
Ë? "kûÀd" : "°›≥d", 
sigƒ
);

324 i‡(
«me
) {

325 
	`ds_put_f‹m©
(&
ds
, " (%s)", 
«me
);

328 
	`ds_put_f‹m©
(&
ds
, "ãrmö©edábn‹mÆly (%x)", 
°©us
);

330 i‡(
	`WCOREDUMP
(
°©us
)) {

331 
	`ds_put_c°r
(&
ds
, ", core dumped");

333  
	`ds_c°r
(&
ds
);

334 
	}
}

339 
	$¥o˚ss_waô
(
¥o˚ss
 *
p
)

341 i‡(
p
->
exôed
) {

342 
	`pﬁl_immedüã_wake
();

344 
	`pﬁl_fd_waô
(
fds
[0], 
POLLIN
);

346 
	}
}

349 
	$sigchld_h™dÀr
(
sigƒ
 
UNUSED
)

351 
¥o˚ss
 *
p
;

353 
	`LIST_FOR_EACH
 (
p
, 
¥o˚ss
, 
node
, &
Æl_¥o˚s£s
) {

354 i‡(!
p
->
exôed
) {

355 
ªtvÆ
, 
°©us
;

357 
ªtvÆ
 = 
	`waôpid
(
p
->
pid
, &
°©us
, 
WNOHANG
);

358 } 
ªtvÆ
 =-1 && 
î∫o
 =
EINTR
);

359 i‡(
ªtvÆ
 =
p
->
pid
) {

360 
p
->
exôed
 = 
åue
;

361 
p
->
°©us
 = status;

362 } i‡(
ªtvÆ
 < 0) {

365 
p
->
exôed
 = 
åue
;

366 
p
->
°©us
 = -1;

370 
	`wrôe
(
fds
[1], "", 1);

371 
	}
}

373 
boﬁ


374 
	$is_membî
(
x
, c⁄° *
¨øy
, 
size_t
 
n
)

376 
size_t
 
i
;

378 
i
 = 0; i < 
n
; i++) {

379 i‡(
¨øy
[
i
] =
x
) {

380  
åue
;

383  
Ál£
;

384 
	}
}

387 
	$block_sigchld
(
sig£t_t
 *
ﬁdsigs
)

389 
sig£t_t
 
sigchld
;

390 
	`sigem±y£t
(&
sigchld
);

391 
	`sigadd£t
(&
sigchld
, 
SIGCHLD
);

392 i‡(
	`sig¥ocmask
(
SIG_BLOCK
, &
sigchld
, 
ﬁdsigs
)) {

393 
	`oÂ_Áèl
(
î∫o
, "sigprocmask");

395 
	}
}

398 
	$unblock_sigchld
(c⁄° 
sig£t_t
 *
ﬁdsigs
)

400 i‡(
	`sig¥ocmask
(
SIG_SETMASK
, 
ﬁdsigs
, 
NULL
)) {

401 
	`oÂ_Áèl
(
î∫o
, "sigprocmask");

403 
	}
}

405 
boﬁ


406 
	$föd_ö_∑th
(c⁄° *
«me
)

408 *
ßve_±r
 = 
NULL
;

409 *
∑th
, *
dú
;

410 
°©
 
s
;

412 i‡(
	`°rchr
(
«me
, '/'Ë|| !
	`gëív
("PATH")) {

413  
	`°©
(
«me
, &
s
) == 0;

416 
∑th
 = 
	`x°rdup
(
	`gëív
("PATH"));

417 
dú
 = 
	`°πok_r
(
∑th
, ":", &
ßve_±r
); dir;

418 
dú
 = 
	`°πok_r
(
NULL
, ":", &
ßve_±r
)) {

419 *
fûe
 = 
	`xa•rötf
("%s/%s", 
dú
, 
«me
);

420 i‡(
	`°©
(
fûe
, &
s
) == 0) {

421 
	`‰ì
(
fûe
);

422 
	`‰ì
(
∑th
);

423  
åue
;

425 
	`‰ì
(
fûe
);

427 
	`‰ì
(
∑th
);

428  
Ál£
;

429 
	}
}

	@lib/process.h

34 #i‚de‡
PROCESS_H


35 
	#PROCESS_H
 1

	)

37 
	~<°dboﬁ.h
>

38 
	~<sys/ty≥s.h
>

40 
	g¥o˚ss
;

41 
¥o˚ss_öô
();

42 *
¥o˚ss_esˇ≥_¨gs
(**
¨gv
);

43 
¥o˚ss_°¨t
(**
¨gv
,

44 c⁄° *
kìp_fds
, 
size_t
 
n_kìp_fds
,

45 c⁄° *
nuŒ_fds
, 
size_t
 
n_nuŒ_fds
,

46 
¥o˚ss
 **);

47 
¥o˚ss_de°roy
(
¥o˚ss
 *);

48 
¥o˚ss_kûl
(c⁄° 
¥o˚ss
 *, 
sigƒ
);

50 
¥o˚ss_run
(**
¨gv
,

51 c⁄° *
kìp_fds
, 
size_t
 
n_kìp_fds
,

52 c⁄° *
nuŒ_fds
, 
size_t
 
n_nuŒ_fds
,

53 *
°©us
);

55 
pid_t
 
¥o˚ss_pid
(c⁄° 
¥o˚ss
 *);

56 c⁄° *
¥o˚ss_«me
(c⁄° 
¥o˚ss
 *);

57 
boﬁ
 
¥o˚ss_exôed
(
¥o˚ss
 *);

58 
¥o˚ss_°©us
(c⁄° 
¥o˚ss
 *);

59 *
¥o˚ss_°©us_msg
();

61 
¥o˚ss_waô
(
¥o˚ss
 *);

	@lib/queue.c

34 
	~<c⁄fig.h
>

35 
	~"queue.h
"

36 
	~<as£π.h
>

37 
	~"compûî.h
"

38 
	~"Àak-checkî.h
"

39 
	~"oÂbuf.h
"

41 
check_queue
(
oÂ_queue
 *
q
);

45 
	$queue_öô
(
oÂ_queue
 *
q
)

47 
q
->
n
 = 0;

48 
q
->
hód
 = 
NULL
;

49 
q
->
èû
 = 
NULL
;

50 
	}
}

54 
	$queue_de°roy
(
oÂ_queue
 *
q
)

56 
oÂbuf
 *
cur
, *
√xt
;

57 
cur
 = 
q
->
hód
; cu∏!
NULL
; cu∏
√xt
) {

58 
√xt
 = 
cur
->next;

59 
	`oÂbuf_dñëe
(
cur
);

61 
	}
}

65 
	$queue_˛ór
(
oÂ_queue
 *
q
)

67 
	`queue_de°roy
(
q
);

68 
	`queue_öô
(
q
);

69 
	}
}

78 
	$queue_adv™˚_hód
(
oÂ_queue
 *
q
, 
oÂbuf
 *
√xt
)

80 
	`as£π
(
q
->
n
);

81 
	`as£π
(
q
->
hód
);

82 
q
->
hód
 = 
√xt
;

83 i‡(
q
->
hód
 =
NULL
) {

84 
q
->
èû
 = 
NULL
;

86 
q
->
n
--;

87 
	}
}

91 
	$queue_push_èû
(
oÂ_queue
 *
q
, 
oÂbuf
 *
b
)

93 
	`check_queue
(
q
);

94 
	`Àak_checkî_˛aim
(
b
);

96 
b
->
√xt
 = 
NULL
;

97 i‡(
q
->
n
++) {

98 
q
->
èû
->
√xt
 = 
b
;

100 
q
->
hód
 = 
b
;

102 
q
->
èû
 = 
b
;

104 
	`check_queue
(
q
);

105 
	}
}

110 
oÂbuf
 *

111 
	$queue_p›_hód
(
oÂ_queue
 *
q
)

113 
oÂbuf
 *
hód
 = 
q
->head;

114 
	`queue_adv™˚_hód
(
q
, 
hód
->
√xt
);

115  
hód
;

116 
	}
}

120 
	$check_queue
(
oÂ_queue
 *
q
 
UNUSED
)

123 
oÂbuf
 *
ôî
;

124 
size_t
 
n
;

126 
	`as£π
(
q
->
n
 == 0

127 ? 
q
->
hód
 =
NULL
 && q->
èû
 == NULL

128 : 
q
->
hód
 !
NULL
 && q->
èû
 != NULL);

130 
n
 = 0;

131 
ôî
 = 
q
->
hód
; iã∏!
NULL
; iã∏ôî->
√xt
) {

132 
n
++;

133 
	`as£π
((
ôî
->
√xt
 !
NULL
Ë=(ôî !
q
->
èû
));

135 
	`as£π
(
n
 =
q
->n);

137 
	}
}

	@lib/queue.h

34 #i‚de‡
QUEUE_H


35 
	#QUEUE_H
 1

	)

38 
	soÂ_queue
 {

39 
	mn
;

40 
oÂbuf
 *
	mhód
;

41 
oÂbuf
 *
	mèû
;

44 
queue_öô
(
oÂ_queue
 *);

45 
queue_de°roy
(
oÂ_queue
 *);

46 
queue_˛ór
(
oÂ_queue
 *);

47 
queue_adv™˚_hód
(
oÂ_queue
 *, 
oÂbuf
 *
√xt
);

48 
queue_push_èû
(
oÂ_queue
 *, 
oÂbuf
 *);

49 
oÂbuf
 *
queue_p›_hód
(
oÂ_queue
 *);

	@lib/random.c

34 
	~<c⁄fig.h
>

35 
	~"øndom.h
"

37 
	~<î∫o.h
>

38 
	~<°dlib.h
>

39 
	~<sys/time.h
>

41 
	~"utû.h
"

44 
	$øndom_öô
()

46 
boﬁ
 
öôed
 = 
Ál£
;

47 i‡(!
öôed
) {

48 
timevÆ
 
tv
;

49 
öôed
 = 
åue
;

50 i‡(
	`gëtimeofday
(&
tv
, 
NULL
) < 0) {

51 
	`oÂ_Áèl
(
î∫o
, "gettimeofday");

53 
	`§™d
(
tv
.
tv_£c
 ^Åv.
tv_u£c
);

55 
	}
}

58 
	$øndom_byãs
(*
p_
, 
size_t
 
n
)

60 
uöt8_t
 *
p
 = 
p_
;

61 
	`øndom_öô
();

62 
n
--) {

63 *
p
++ = 
	`ønd
();

65 
	}
}

67 
uöt8_t


68 
	$øndom_uöt8
()

70 
	`øndom_öô
();

71  
	`ønd
();

72 
	}
}

74 
uöt16_t


75 
	$øndom_uöt16
()

77 i‡(
RAND_MAX
 >
UINT16_MAX
) {

78 
	`øndom_öô
();

79  
	`ønd
();

81 
uöt16_t
 
x
;

82 
	`øndom_byãs
(&
x
,  x);

83  
x
;

85 
	}
}

87 
uöt32_t


88 
	$øndom_uöt32
()

90 i‡(
RAND_MAX
 >
UINT32_MAX
) {

91 
	`øndom_öô
();

92  
	`ønd
();

93 } i‡(
RAND_MAX
 =
INT32_MAX
) {

94 
	`øndom_öô
();

95  
	`ønd
() | ((rand() & 1u) << 31);

97 
uöt32_t
 
x
;

98 
	`øndom_byãs
(&
x
,  x);

99  
x
;

101 
	}
}

104 
	$øndom_ønge
(
max
)

106  
	`øndom_uöt32
(Ë% 
max
;

107 
	}
}

	@lib/random.h

34 #i‚de‡
RANDOM_H


35 
	#RANDOM_H
 1

	)

37 
	~<°ddef.h
>

38 
	~<°döt.h
>

40 
øndom_öô
();

41 
øndom_byãs
(*, 
size_t
);

42 
uöt8_t
 
øndom_uöt8
();

43 
uöt16_t
 
øndom_uöt16
();

44 
uöt32_t
 
øndom_uöt32
();

45 
øndom_ønge
(
max
);

	@lib/rconn.c

34 
	~<c⁄fig.h
>

35 
	~"rc⁄n.h
"

36 
	~<as£π.h
>

37 
	~<î∫o.h
>

38 
	~<limôs.h
>

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

41 
	~"oÂ.h
"

42 
	~"oÂbuf.h
"

43 
	~"›íÊow/›íÊow.h
"

44 
	~"pﬁl-lo›.h
"

45 
	~"ßt-m©h.h
"

46 
	~"timevÆ.h
"

47 
	~"utû.h
"

48 
	~"vc⁄n.h
"

49 
	~"vc⁄n-¥ovidî.h
"

51 
	#LOG_MODULE
 
VLM_rc⁄n


	)

52 
	~"vlog.h
"

54 
	#STATES
 \

55 
	`STATE
(
VOID
, 1 << 0) \

56 
	`STATE
(
BACKOFF
, 1 << 1) \

57 
	`STATE
(
CONNECTING
, 1 << 2) \

58 
	`STATE
(
ACTIVE
, 1 << 3) \

59 
	`STATE
(
IDLE
, 1 << 4)

	)

60 
	e°©e
 {

61 
	#STATE
(
NAME
, 
VALUE
Ë
S_
##NAME = VALUE,

	)

62 
	mSTATES


63 #unde‡
STATE


67 
	$°©e_«me
(
°©e
 state)

69 
°©e
) {

70 
	#STATE
(
NAME
, 
VALUE
Ë
S_
##NAME:  #NAME;

	)

71 
STATES


72 #unde‡
STATE


75 
	}
}

80 
	src⁄n
 {

81 
°©e
 
	m°©e
;

82 
time_t
 
	m°©e_íãªd
;

84 
vc⁄n
 *
	mvc⁄n
;

85 *
	m«me
;

86 
boﬁ
 
	mªlübÀ
;

88 
oÂ_queue
 
	mtxq
;

90 
	mbackoff
;

91 
	mmax_backoff
;

92 
time_t
 
	mbackoff_dódlöe
;

93 
time_t
 
	mœ°_ª˚ived
;

94 
time_t
 
	mœ°_c⁄√˘ed
;

95 
	m∑ckës_£¡
;

96 
	m£qno
;

106 
boﬁ
 
	m¥obably_admôãd
;

107 
time_t
 
	mœ°_admôãd
;

111 
	m∑ckës_ª˚ived
;

112 
	mn_©ãm±ed_c⁄√˘i⁄s
, 
	mn_suc˚ssful_c⁄√˘i⁄s
;

113 
time_t
 
	m¸óti⁄_time
;

114 
	mtŸÆ_time_c⁄√˘ed
;

123 
boﬁ
 
	mque°i⁄abÀ_c⁄√˘ivôy
;

124 
time_t
 
	mœ°_que°i⁄ed
;

130 
	m¥obe_öãrvÆ
;

133 
	#MAX_MONITORS
 8

	)

134 
vc⁄n
 *
	mm⁄ô‹s
[8];

135 
size_t
 
	mn_m⁄ô‹s
;

144 
uöt32_t
 
	midÀ_echo_xid
;

147 
ñ≠£d_ö_this_°©e
(c⁄° 
rc⁄n
 *);

148 
timeout
(c⁄° 
rc⁄n
 *);

149 
boﬁ
 
timed_out
(c⁄° 
rc⁄n
 *);

150 
°©e_å™sôi⁄
(
rc⁄n
 *, 
°©e
);

151 
åy_£nd
(
rc⁄n
 *);

152 
ªc⁄√˘
(
rc⁄n
 *);

153 
disc⁄√˘
(
rc⁄n
 *, 
îr‹
);

154 
Êush_queue
(
rc⁄n
 *);

155 
que°i⁄_c⁄√˘ivôy
(
rc⁄n
 *);

156 
c›y_to_m⁄ô‹
(
rc⁄n
 *, c⁄° 
oÂbuf
 *);

157 
boﬁ
 
is_c⁄√˘ed_°©e
(
°©e
);

158 
boﬁ
 
is_admôãd_msg
(c⁄° 
oÂbuf
 *);

161 
rc⁄n
 *

162 
	$rc⁄n_√w
(c⁄° *
«me
, 
öa˘ivôy_¥obe_öãrvÆ
, 
max_backoff
)

164 
rc⁄n
 *
rc
 = 
	`rc⁄n_¸óã
(
öa˘ivôy_¥obe_öãrvÆ
, 
max_backoff
);

165 
	`rc⁄n_c⁄√˘
(
rc
, 
«me
);

166  
rc
;

167 
	}
}

170 
rc⁄n
 *

171 
	$rc⁄n_√w_‰om_vc⁄n
(c⁄° *
«me
, 
vc⁄n
 *vconn)

173 
rc⁄n
 *
rc
 = 
	`rc⁄n_¸óã
(60, 0);

174 
	`rc⁄n_c⁄√˘_uƒñübly
(
rc
, 
«me
, 
vc⁄n
);

175  
rc
;

176 
	}
}

190 
rc⁄n
 *

191 
	$rc⁄n_¸óã
(
¥obe_öãrvÆ
, 
max_backoff
)

193 
rc⁄n
 *
rc
 = 
	`xˇŒoc
(1,  *rc);

195 
rc
->
°©e
 = 
S_VOID
;

196 
rc
->
°©e_íãªd
 = 
	`time_now
();

198 
rc
->
vc⁄n
 = 
NULL
;

199 
rc
->
«me
 = 
	`x°rdup
("void");

200 
rc
->
ªlübÀ
 = 
Ál£
;

202 
	`queue_öô
(&
rc
->
txq
);

204 
rc
->
backoff
 = 0;

205 
rc
->
max_backoff
 = max_backoff ? max_backoff : 60;

206 
rc
->
backoff_dódlöe
 = 
TIME_MIN
;

207 
rc
->
œ°_ª˚ived
 = 
	`time_now
();

208 
rc
->
œ°_c⁄√˘ed
 = 
	`time_now
();

209 
rc
->
£qno
 = 0;

211 
rc
->
∑ckës_£¡
 = 0;

213 
rc
->
¥obably_admôãd
 = 
Ál£
;

214 
rc
->
œ°_admôãd
 = 
	`time_now
();

216 
rc
->
∑ckës_ª˚ived
 = 0;

217 
rc
->
n_©ãm±ed_c⁄√˘i⁄s
 = 0;

218 
rc
->
n_suc˚ssful_c⁄√˘i⁄s
 = 0;

219 
rc
->
¸óti⁄_time
 = 
	`time_now
();

220 
rc
->
tŸÆ_time_c⁄√˘ed
 = 0;

222 
rc
->
que°i⁄abÀ_c⁄√˘ivôy
 = 
Ál£
;

223 
rc
->
œ°_que°i⁄ed
 = 
	`time_now
();

225 
rc
->
¥obe_öãrvÆ
 =Örobe_öãrvÆ ? 
	`MAX
(1,Örobe_interval) : 0;

227 
rc
->
n_m⁄ô‹s
 = 0;

235 
rc
->
idÀ_echo_xid
 = 0;

237  
rc
;

238 
	}
}

241 
	$rc⁄n_c⁄√˘
(
rc⁄n
 *
rc
, c⁄° *
«me
)

243 
	`rc⁄n_disc⁄√˘
(
rc
);

244 
	`‰ì
(
rc
->
«me
);

245 
rc
->
«me
 = 
	`x°rdup
(name);

246 
rc
->
ªlübÀ
 = 
åue
;

247  
	`ªc⁄√˘
(
rc
);

248 
	}
}

251 
	$rc⁄n_c⁄√˘_uƒñübly
(
rc⁄n
 *
rc
,

252 c⁄° *
«me
, 
vc⁄n
 *vconn)

254 
	`as£π
(
vc⁄n
 !
NULL
);

255 
	`rc⁄n_disc⁄√˘
(
rc
);

256 
	`‰ì
(
rc
->
«me
);

257 
rc
->
«me
 = 
	`x°rdup
(name);

258 
rc
->
ªlübÀ
 = 
Ál£
;

259 
rc
->
vc⁄n
 = vconn;

260 
rc
->
œ°_c⁄√˘ed
 = 
	`time_now
();

261 
	`°©e_å™sôi⁄
(
rc
, 
S_ACTIVE
);

262 
	}
}

265 
	$rc⁄n_disc⁄√˘
(
rc⁄n
 *
rc
)

267 i‡(
rc
->
°©e
 !
S_VOID
) {

268 i‡(
rc
->
vc⁄n
) {

269 
	`vc⁄n_˛o£
(
rc
->
vc⁄n
);

270 
rc
->
vc⁄n
 = 
NULL
;

272 
	`‰ì
(
rc
->
«me
);

273 
rc
->
«me
 = 
	`x°rdup
("void");

274 
rc
->
ªlübÀ
 = 
Ál£
;

276 
rc
->
backoff
 = 0;

277 
rc
->
backoff_dódlöe
 = 
TIME_MIN
;

279 
	`°©e_å™sôi⁄
(
rc
, 
S_VOID
);

281 
	}
}

285 
	$rc⁄n_de°roy
(
rc⁄n
 *
rc
)

287 i‡(
rc
) {

288 
size_t
 
i
;

290 
	`‰ì
(
rc
->
«me
);

291 
	`vc⁄n_˛o£
(
rc
->
vc⁄n
);

292 
	`Êush_queue
(
rc
);

293 
	`queue_de°roy
(&
rc
->
txq
);

294 
i
 = 0; i < 
rc
->
n_m⁄ô‹s
; i++) {

295 
	`vc⁄n_˛o£
(
rc
->
m⁄ô‹s
[
i
]);

297 
	`‰ì
(
rc
);

299 
	}
}

302 
	$timeout_VOID
(c⁄° 
rc⁄n
 *
rc
 
UNUSED
)

304  
UINT_MAX
;

305 
	}
}

308 
	$run_VOID
(
rc⁄n
 *
rc
 
UNUSED
)

311 
	}
}

314 
	$ªc⁄√˘
(
rc⁄n
 *
rc
)

316 
ªtvÆ
;

318 
	`VLOG_INFO
(
LOG_MODULE
, "%s: c⁄√˘ög...", 
rc
->
«me
);

319 
rc
->
n_©ãm±ed_c⁄√˘i⁄s
++;

320 
ªtvÆ
 = 
	`vc⁄n_›í
(
rc
->
«me
, 
OFP_VERSION
, &rc->
vc⁄n
);

321 i‡(!
ªtvÆ
) {

322 i‡(!
	`vc⁄n_is_ªc⁄√˘abÀ
(
rc
->
vc⁄n
)) {

323 
rc
->
ªlübÀ
 = 
Ál£
;

325 
rc
->
backoff_dódlöe
 = 
	`time_now
(Ë+Ñc->
backoff
;

326 
	`°©e_å™sôi⁄
(
rc
, 
S_CONNECTING
);

328 
	`VLOG_WARN
(
LOG_MODULE
, "%s: c⁄√˘i⁄ faûed (%s)", 
rc
->
«me
, 
	`°ªº‹
(
ªtvÆ
));

329 
rc
->
backoff_dódlöe
 = 
TIME_MAX
;

330 
	`disc⁄√˘
(
rc
, 0);

332  
ªtvÆ
;

333 
	}
}

336 
	$timeout_BACKOFF
(c⁄° 
rc⁄n
 *
rc
)

338  
rc
->
backoff
;

339 
	}
}

342 
	$run_BACKOFF
(
rc⁄n
 *
rc
)

344 i‡(
	`timed_out
(
rc
)) {

345 
	`ªc⁄√˘
(
rc
);

347 
	}
}

350 
	$timeout_CONNECTING
(c⁄° 
rc⁄n
 *
rc
)

352  
	`MAX
(1, 
rc
->
backoff
);

353 
	}
}

356 
	$run_CONNECTING
(
rc⁄n
 *
rc
)

358 
ªtvÆ
 = 
	`vc⁄n_c⁄√˘
(
rc
->
vc⁄n
);

359 i‡(!
ªtvÆ
) {

360 
	`VLOG_INFO
(
LOG_MODULE
, "%s: c⁄√˘ed", 
rc
->
«me
);

361 
rc
->
n_suc˚ssful_c⁄√˘i⁄s
++;

362 
	`°©e_å™sôi⁄
(
rc
, 
S_ACTIVE
);

363 
rc
->
œ°_c⁄√˘ed
 =Ñc->
°©e_íãªd
;

364 } i‡(
ªtvÆ
 !
EAGAIN
) {

365 
	`VLOG_INFO
(
LOG_MODULE
, "%s: c⁄√˘i⁄ faûed (%s)", 
rc
->
«me
, 
	`°ªº‹
(
ªtvÆ
));

366 
	`disc⁄√˘
(
rc
, 
ªtvÆ
);

367 } i‡(
	`timed_out
(
rc
)) {

368 
	`VLOG_INFO
(
LOG_MODULE
, "%s: c⁄√˘i⁄Åimed out", 
rc
->
«me
);

369 
rc
->
backoff_dódlöe
 = 
TIME_MAX
;

370 
	`disc⁄√˘
(
rc
, 0);

372 
	}
}

375 
	$do_tx_w‹k
(
rc⁄n
 *
rc
)

377 i‡(!
rc
->
txq
.
n
) {

380 
rc
->
txq
.
n
 > 0) {

381 
îr‹
 = 
	`åy_£nd
(
rc
);

382 i‡(
îr‹
) {

386 i‡(!
rc
->
txq
.
n
) {

387 
	`pﬁl_immedüã_wake
();

389 
	}
}

392 
	$timeout_ACTIVE
(c⁄° 
rc⁄n
 *
rc
)

394 i‡(
rc
->
¥obe_öãrvÆ
) {

395 
ba£
 = 
	`MAX
(
rc
->
œ°_ª˚ived
,Ñc->
°©e_íãªd
);

396 
¨g
 = 
ba£
 + 
rc
->
¥obe_öãrvÆ
 -Ñc->
°©e_íãªd
;

397  
¨g
;

399  
UINT_MAX
;

400 
	}
}

403 
	$run_ACTIVE
(
rc⁄n
 *
rc
)

405 i‡(
	`timed_out
(
rc
)) {

406 
ba£
 = 
	`MAX
(
rc
->
œ°_ª˚ived
,Ñc->
°©e_íãªd
);

407 
	`VLOG_DBG
(
LOG_MODULE
, "%s: idle %u seconds, sending inactivityÖrobe",

408 
rc
->
«me
, (Ë(
	`time_now
(Ë- 
ba£
));

413 
	`°©e_å™sôi⁄
(
rc
, 
S_IDLE
);

414 
	`rc⁄n_£nd
(
rc
, 
	`make_echo_ªque°
(), 
NULL
);

418 
	`do_tx_w‹k
(
rc
);

419 
	}
}

422 
	$timeout_IDLE
(c⁄° 
rc⁄n
 *
rc
)

424  
rc
->
¥obe_öãrvÆ
;

425 
	}
}

428 
	$run_IDLE
(
rc⁄n
 *
rc
)

430 i‡(
	`timed_out
(
rc
)) {

431 
	`que°i⁄_c⁄√˘ivôy
(
rc
);

432 
	`VLOG_ERR
(
LOG_MODULE
, "%s:ÇoÑesponseÅo inactivityÖrobeáfter %u "

434 
rc
->
«me
, 
	`ñ≠£d_ö_this_°©e
(rc));

435 
	`disc⁄√˘
(
rc
, 0);

437 
	`do_tx_w‹k
(
rc
);

439 
	}
}

445 
	$rc⁄n_run
(
rc⁄n
 *
rc
)

447 
ﬁd_°©e
;

449 
ﬁd_°©e
 = 
rc
->
°©e
;

450 
rc
->
°©e
) {

451 
	#STATE
(
NAME
, 
VALUE
Ë
S_
##NAME: 
run_
##
	`NAME
(
rc
); ;

	)

452 
STATES


453 #unde‡
STATE


455 
	`NOT_REACHED
();

457 } 
rc
->
°©e
 !
ﬁd_°©e
);

458 
	}
}

463 
	$rc⁄n_run_waô
(
rc⁄n
 *
rc
)

465 
timeo
 = 
	`timeout
(
rc
);

466 i‡(
timeo
 !
UINT_MAX
) {

467 
expúes
 = 
	`ßt_add
(
rc
->
°©e_íãªd
, 
timeo
);

468 
ªmaöög
 = 
	`ßt_sub
(
expúes
, 
	`time_now
());

469 
	`pﬁl_timî_waô
(
	`ßt_mul
(
ªmaöög
, 1000));

472 i‡((
rc
->
°©e
 & (
S_ACTIVE
 | 
S_IDLE
)Ë&&Ñc->
txq
.
n
) {

473 
	`vc⁄n_waô
(
rc
->
vc⁄n
, 
WAIT_SEND
);

475 
	}
}

480 
oÂbuf
 *

481 
	$rc⁄n_ªcv
(
rc⁄n
 *
rc
)

483 i‡(
rc
->
°©e
 & (
S_ACTIVE
 | 
S_IDLE
)) {

484 
oÂbuf
 *
buf„r
;

485 
îr‹
 = 
	`vc⁄n_ªcv
(
rc
->
vc⁄n
, &
buf„r
);

486 i‡(!
îr‹
) {

487 
oÂ_hódî
 *
h
 = 
buf„r
->
d©a
;

488 
	`c›y_to_m⁄ô‹
(
rc
, 
buf„r
);

489 i‡(
	`is_admôãd_msg
(
buf„r
)

490 || 
	`time_now
(Ë- 
rc
->
œ°_c⁄√˘ed
 >= 30) {

491 
rc
->
¥obably_admôãd
 = 
åue
;

492 
rc
->
œ°_admôãd
 = 
	`time_now
();

494 
rc
->
œ°_ª˚ived
 = 
	`time_now
();

495 
rc
->
∑ckës_ª˚ived
++;

498 i‡(
rc
->
°©e
 =
S_IDLE
) {

500 i‡(
h
->
ty≥
 =
OFPT_ECHO_REPLY
) {

501 i‡(
rc
->
idÀ_echo_xid
 == 0) {

502 
	`°©e_å™sôi⁄
(
rc
, 
S_ACTIVE
);

504 i‡(
rc
->
idÀ_echo_xid
 =
h
->
xid
)

505 
	`°©e_å™sôi⁄
(
rc
, 
S_ACTIVE
);

506 
rc
->
idÀ_echo_xid
 = 0;

509 
	`°©e_å™sôi⁄
(
rc
, 
S_ACTIVE
);

512  
buf„r
;

513 } i‡(
îr‹
 !
EAGAIN
) {

514 
	`disc⁄√˘
(
rc
, 
îr‹
);

517  
NULL
;

518 
	}
}

523 
	$rc⁄n_ªcv_waô
(
rc⁄n
 *
rc
)

525 i‡(
rc
->
vc⁄n
) {

526 
	`vc⁄n_waô
(
rc
->
vc⁄n
, 
WAIT_RECV
);

528 
	}
}

544 
	$rc⁄n_£nd
(
rc⁄n
 *
rc
, 
oÂbuf
 *
b
, *
n_queued
)

546 i‡(
	`rc⁄n_is_c⁄√˘ed
(
rc
)) {

547 
	`c›y_to_m⁄ô‹
(
rc
, 
b
);

548 
b
->
¥iv©e_p
 = 
n_queued
;

549 i‡(
n_queued
) {

550 ++*
n_queued
;

552 
	`queue_push_èû
(&
rc
->
txq
, 
b
);

558 i‡(
rc
->
txq
.
n
 == 1) {

559 
	`åy_£nd
(
rc
);

563  
ENOTCONN
;

565 
	}
}

580 
	$rc⁄n_£nd_wôh_limô
(
rc⁄n
 *
rc
, 
oÂbuf
 *
b
,

581 *
n_queued
, 
queue_limô
)

583 
ªtvÆ
;

584 
ªtvÆ
 = *
n_queued
 >
queue_limô
 ? 
EAGAIN
 : 
	`rc⁄n_£nd
(
rc
, 
b
,Ç_queued);

585 i‡(
ªtvÆ
) {

586 
	`oÂbuf_dñëe
(
b
);

588  
ªtvÆ
;

589 
	}
}

595 
	$rc⁄n_∑ckës_£¡
(c⁄° 
rc⁄n
 *
rc
)

597  
rc
->
∑ckës_£¡
;

598 
	}
}

603 
	$rc⁄n_add_m⁄ô‹
(
rc⁄n
 *
rc
, 
vc⁄n
 *vconn)

605 i‡(
rc
->
n_m⁄ô‹s
 < 
	`ARRAY_SIZE
‘c->
m⁄ô‹s
)) {

606 
	`VLOG_INFO
(
LOG_MODULE
, "√w m⁄ô‹ c⁄√˘i⁄ from %s", 
	`vc⁄n_gë_«me
(
vc⁄n
));

607 
rc
->
m⁄ô‹s
[rc->
n_m⁄ô‹s
++] = 
vc⁄n
;

609 
	`VLOG_DBG
(
LOG_MODULE
, "too many monitor connections, discarding %s",

610 
	`vc⁄n_gë_«me
(
vc⁄n
));

611 
	`vc⁄n_˛o£
(
vc⁄n
);

613 
	}
}

617 
	$rc⁄n_gë_«me
(c⁄° 
rc⁄n
 *
rc
)

619  
rc
->
«me
;

620 
	}
}

624 
boﬁ


625 
	$rc⁄n_is_Æive
(c⁄° 
rc⁄n
 *rconn)

627  
rc⁄n
->
°©e
 !
S_VOID
;

628 
	}
}

631 
boﬁ


632 
	$rc⁄n_is_c⁄√˘ed
(c⁄° 
rc⁄n
 *rconn)

634  
	`is_c⁄√˘ed_°©e
(
rc⁄n
->
°©e
);

635 
	}
}

643 
	$rc⁄n_Áûuª_duøti⁄
(c⁄° 
rc⁄n
 *rconn)

645  
	`rc⁄n_is_c⁄√˘ed
(
rc⁄n
Ë? 0 : 
	`time_now
(Ë-Ñc⁄n->
œ°_admôãd
;

646 
	}
}

650 
uöt32_t


651 
	$rc⁄n_gë_ù
(c⁄° 
rc⁄n
 *rconn)

653  
rc⁄n
->
vc⁄n
 ? 
	`vc⁄n_gë_ù
(rconn->vconn) : 0;

654 
	}
}

664 
boﬁ


665 
	$rc⁄n_is_c⁄√˘ivôy_que°i⁄abÀ
(
rc⁄n
 *rconn)

667 
boﬁ
 
que°i⁄abÀ
 = 
rc⁄n
->
que°i⁄abÀ_c⁄√˘ivôy
;

668 
rc⁄n
->
que°i⁄abÀ_c⁄√˘ivôy
 = 
Ál£
;

669  
que°i⁄abÀ
;

670 
	}
}

675 
	$rc⁄n_∑ckës_ª˚ived
(c⁄° 
rc⁄n
 *
rc
)

677  
rc
->
∑ckës_ª˚ived
;

678 
	}
}

683 
	$rc⁄n_gë_°©e
(c⁄° 
rc⁄n
 *
rc
)

685  
	`°©e_«me
(
rc
->
°©e
);

686 
	}
}

691 
	$rc⁄n_gë_©ãm±ed_c⁄√˘i⁄s
(c⁄° 
rc⁄n
 *
rc
)

693  
rc
->
n_©ãm±ed_c⁄√˘i⁄s
;

694 
	}
}

698 
	$rc⁄n_gë_suc˚ssful_c⁄√˘i⁄s
(c⁄° 
rc⁄n
 *
rc
)

700  
rc
->
n_suc˚ssful_c⁄√˘i⁄s
;

701 
	}
}

705 
time_t


706 
	$rc⁄n_gë_œ°_c⁄√˘i⁄
(c⁄° 
rc⁄n
 *
rc
)

708  
rc
->
œ°_c⁄√˘ed
;

709 
	}
}

712 
time_t


713 
	$rc⁄n_gë_¸óti⁄_time
(c⁄° 
rc⁄n
 *
rc
)

715  
rc
->
¸óti⁄_time
;

716 
	}
}

720 
	$rc⁄n_gë_tŸÆ_time_c⁄√˘ed
(c⁄° 
rc⁄n
 *
rc
)

722  (
rc
->
tŸÆ_time_c⁄√˘ed


723 + (
	`rc⁄n_is_c⁄√˘ed
(
rc
Ë? 
	`ñ≠£d_ö_this_°©e
(rc) : 0));

724 
	}
}

729 
	$rc⁄n_gë_backoff
(c⁄° 
rc⁄n
 *
rc
)

731  
rc
->
backoff
;

732 
	}
}

736 
	$rc⁄n_gë_°©e_ñ≠£d
(c⁄° 
rc⁄n
 *
rc
)

738  
	`ñ≠£d_ö_this_°©e
(
rc
);

739 
	}
}

744 
	$rc⁄n_gë_c⁄√˘i⁄_£qno
(c⁄° 
rc⁄n
 *
rc
)

746  
rc
->
£qno
;

747 
	}
}

788 
	$åy_£nd
(
rc⁄n
 *
rc
)

790 
ªtvÆ
 = 0;

791 
oÂbuf
 *
√xt
 = 
rc
->
txq
.
hód
->next;

792 
oÂ_hódî
 *
h
 = 
rc
->
txq
.
hód
->
d©a
;

793 *
n_queued
 = 
rc
->
txq
.
hód
->
¥iv©e_p
;

796 
rc
->
idÀ_echo_xid
 = 
h
->
xid
;

797 
ªtvÆ
 = 
	`vc⁄n_£nd
(
rc
->
vc⁄n
,Ñc->
txq
.
hód
);

798 i‡(
ªtvÆ
) {

799 
rc
->
idÀ_echo_xid
 = 0;

800 i‡(
ªtvÆ
 !
EAGAIN
) {

801 
	`disc⁄√˘
(
rc
, 
ªtvÆ
);

803  
ªtvÆ
;

805 
rc
->
∑ckës_£¡
++;

806 i‡(
n_queued
) {

807 --*
n_queued
;

809 
	`queue_adv™˚_hód
(&
rc
->
txq
, 
√xt
);

811 
	}
}

817 
	$disc⁄√˘
(
rc⁄n
 *
rc
, 
îr‹
)

819 i‡(
rc
->
ªlübÀ
) {

820 
time_t
 
now
 = 
	`time_now
();

822 i‡(
rc
->
°©e
 & (
S_CONNECTING
 | 
S_ACTIVE
 | 
S_IDLE
)) {

823 i‡(
îr‹
 > 0) {

824 
	`VLOG_WARN
(
LOG_MODULE
, "%s: connection dropped (%s)",

825 
rc
->
«me
, 
	`°ªº‹
(
îr‹
));

826 } i‡(
îr‹
 =
EOF
) {

827 i‡(
rc
->
ªlübÀ
) {

828 
	`VLOG_INFO
(
LOG_MODULE
, "%s: c⁄√˘i⁄ clo£d byÖìr", 
rc
->
«me
);

831 
	`VLOG_INFO
(
LOG_MODULE
, "%s: c⁄√˘i⁄ dr›≥d", 
rc
->
«me
);

833 
	`vc⁄n_˛o£
(
rc
->
vc⁄n
);

834 
rc
->
vc⁄n
 = 
NULL
;

835 
	`Êush_queue
(
rc
);

838 i‡(
now
 >
rc
->
backoff_dódlöe
) {

839 
rc
->
backoff
 = 1;

841 
rc
->
backoff
 = 
	`MIN
‘c->
max_backoff
, 
	`MAX
(1, 2 *Ñc->backoff));

842 
	`VLOG_INFO
(
LOG_MODULE
, "%s: waiting %d seconds beforeÑeconnect",

843 
rc
->
«me
,Ñc->
backoff
);

845 
rc
->
backoff_dódlöe
 = 
now
 +Ñc->
backoff
;

846 
	`°©e_å™sôi⁄
(
rc
, 
S_BACKOFF
);

847 i‡(
now
 - 
rc
->
œ°_c⁄√˘ed
 > 60) {

848 
	`que°i⁄_c⁄√˘ivôy
(
rc
);

851 
	`rc⁄n_disc⁄√˘
(
rc
);

853 
	}
}

858 
	$Êush_queue
(
rc⁄n
 *
rc
)

860 i‡(!
rc
->
txq
.
n
) {

863 
rc
->
txq
.
n
 > 0) {

864 
oÂbuf
 *
b
 = 
	`queue_p›_hód
(&
rc
->
txq
);

865 *
n_queued
 = 
b
->
¥iv©e_p
;

866 i‡(
n_queued
) {

867 --*
n_queued
;

869 
	`oÂbuf_dñëe
(
b
);

871 
	`pﬁl_immedüã_wake
();

872 
	}
}

875 
	$ñ≠£d_ö_this_°©e
(c⁄° 
rc⁄n
 *
rc
)

877  
	`time_now
(Ë- 
rc
->
°©e_íãªd
;

878 
	}
}

881 
	$timeout
(c⁄° 
rc⁄n
 *
rc
)

883 
rc
->
°©e
) {

884 
	#STATE
(
NAME
, 
VALUE
Ë
S_
##NAME:  
timeout_
##
	`NAME
(
rc
);

	)

885 
STATES


886 #unde‡
STATE


888 
	`NOT_REACHED
();

890 
	}
}

892 
boﬁ


893 
	$timed_out
(c⁄° 
rc⁄n
 *
rc
)

895  
	`time_now
(Ë>
	`ßt_add
(
rc
->
°©e_íãªd
, 
	`timeout
(rc));

896 
	}
}

899 
	$°©e_å™sôi⁄
(
rc⁄n
 *
rc
, 
°©e
 state)

901 
rc
->
£qno
 +‘c->
°©e
 =
S_ACTIVE
) != (state == S_ACTIVE);

902 i‡(
	`is_c⁄√˘ed_°©e
(
°©e
Ë&& !is_c⁄√˘ed_°©e(
rc
->state)) {

903 
rc
->
¥obably_admôãd
 = 
Ál£
;

905 i‡(
	`rc⁄n_is_c⁄√˘ed
(
rc
)) {

906 
rc
->
tŸÆ_time_c⁄√˘ed
 +
	`ñ≠£d_ö_this_°©e
(rc);

908 
	`VLOG_DBG
(
LOG_MODULE
, "%s:É¡îög %s", 
rc
->
«me
, 
	`°©e_«me
(
°©e
));

909 
rc
->
°©e
 = state;

910 
rc
->
°©e_íãªd
 = 
	`time_now
();

911 
	}
}

914 
	$que°i⁄_c⁄√˘ivôy
(
rc⁄n
 *
rc
)

916 
time_t
 
now
 = 
	`time_now
();

917 i‡(
now
 - 
rc
->
œ°_que°i⁄ed
 > 60) {

918 
rc
->
que°i⁄abÀ_c⁄√˘ivôy
 = 
åue
;

919 
rc
->
œ°_que°i⁄ed
 = 
now
;

921 
	}
}

924 
	$c›y_to_m⁄ô‹
(
rc⁄n
 *
rc
, c⁄° 
oÂbuf
 *
b
)

926 
oÂbuf
 *
˛⁄e
 = 
NULL
;

927 
ªtvÆ
;

928 
size_t
 
i
;

930 
i
 = 0; i < 
rc
->
n_m⁄ô‹s
; ) {

931 
vc⁄n
 *vc⁄¿
rc
->
m⁄ô‹s
[
i
];

933 i‡(!
˛⁄e
) {

934 
˛⁄e
 = 
	`oÂbuf_˛⁄e
(
b
);

936 
ªtvÆ
 = 
	`vc⁄n_£nd
(
vc⁄n
, 
˛⁄e
);

937 i‡(!
ªtvÆ
) {

938 
˛⁄e
 = 
NULL
;

939 } i‡(
ªtvÆ
 !
EAGAIN
) {

940 
	`VLOG_DBG
(
LOG_MODULE
, "%s: closing monitor connectionÅo %s: %s",

941 
	`rc⁄n_gë_«me
(
rc
), 
	`vc⁄n_gë_«me
(
vc⁄n
),

942 
	`°ªº‹
(
ªtvÆ
));

943 
rc
->
m⁄ô‹s
[
i
] =Ñc->m⁄ô‹s[--rc->
n_m⁄ô‹s
];

946 
i
++;

948 
	`oÂbuf_dñëe
(
˛⁄e
);

949 
	}
}

951 
boﬁ


952 
	$is_c⁄√˘ed_°©e
(
°©e
 state)

954  (
°©e
 & (
S_ACTIVE
 | 
S_IDLE
)) != 0;

955 
	}
}

957 
boﬁ


958 
	$is_admôãd_msg
(c⁄° 
oÂbuf
 *
b
)

960 
oÂ_hódî
 *
oh
 = 
b
->
d©a
;

962 
oh
->
ty≥
) {

963 
OFPT_HELLO
 :

964 
OFPT_ECHO_REQUEST
 :

965 
OFPT_ECHO_REPLY
 :

966 
OFPT_EXPERIMENTER
 :

967 
OFPT_FEATURES_REQUEST
 :

968 
OFPT_GET_CONFIG_REQUEST
 :

969 
OFPT_SET_CONFIG
 :

970 
OFPT_FLOW_REMOVED
 :

971 
OFPT_PACKET_OUT
 :

972 
OFPT_FLOW_MOD
 :

973 
OFPT_GROUP_MOD
 :

974 
OFPT_PORT_MOD
 :

975 
OFPT_TABLE_MOD
 :

976 
OFPT_MULTIPART_REQUEST
 :

977 
OFPT_BARRIER_REQUEST
 :

978 
OFPT_QUEUE_GET_CONFIG_REQUEST
 : {

979  
åue
;

982  
Ál£
;

985 
	}
}

	@lib/rconn.h

34 #i‚de‡
RCONN_H


35 
	#RCONN_H
 1

	)

37 
	~"queue.h
"

38 
	~<°dboﬁ.h
>

39 
	~<°döt.h
>

40 
	~<time.h
>

54 
	gvc⁄n
;

58 
rc⁄n
 *
rc⁄n_√w
(c⁄° *
«me
,

59 
öa˘ivôy_¥obe_öãrvÆ
, 
max_backoff
);

60 
rc⁄n
 *
rc⁄n_√w_‰om_vc⁄n
(c⁄° *
«me
, 
vc⁄n
 *);

61 
rc⁄n
 *
rc⁄n_¸óã
(
öa˘ivôy_¥obe_öãrvÆ
, 
max_backoff
);

62 
rc⁄n_c⁄√˘
(
rc⁄n
 *, c⁄° *
«me
);

63 
rc⁄n_c⁄√˘_uƒñübly
(
rc⁄n
 *,

64 c⁄° *
«me
, 
vc⁄n
 *vconn);

65 
rc⁄n_disc⁄√˘
(
rc⁄n
 *);

66 
rc⁄n_de°roy
(
rc⁄n
 *);

68 
rc⁄n_run
(
rc⁄n
 *);

69 
rc⁄n_run_waô
(
rc⁄n
 *);

70 
oÂbuf
 *
rc⁄n_ªcv
(
rc⁄n
 *);

71 
rc⁄n_ªcv_waô
(
rc⁄n
 *);

72 
rc⁄n_£nd
(
rc⁄n
 *, 
oÂbuf
 *, *
n_queued
);

73 
rc⁄n_£nd_wôh_limô
(
rc⁄n
 *, 
oÂbuf
 *,

74 *
n_queued
, 
queue_limô
);

75 
rc⁄n_∑ckës_£¡
(c⁄° 
rc⁄n
 *);

76 
rc⁄n_∑ckës_ª˚ived
(c⁄° 
rc⁄n
 *);

78 
rc⁄n_add_m⁄ô‹
(
rc⁄n
 *, 
vc⁄n
 *);

80 c⁄° *
rc⁄n_gë_«me
(c⁄° 
rc⁄n
 *);

81 
boﬁ
 
rc⁄n_is_Æive
(c⁄° 
rc⁄n
 *);

82 
boﬁ
 
rc⁄n_is_c⁄√˘ed
(c⁄° 
rc⁄n
 *);

83 
rc⁄n_Áûuª_duøti⁄
(c⁄° 
rc⁄n
 *);

84 
boﬁ
 
rc⁄n_is_c⁄√˘ivôy_que°i⁄abÀ
(
rc⁄n
 *);

86 
uöt32_t
 
rc⁄n_gë_ù
(c⁄° 
rc⁄n
 *);

88 c⁄° *
rc⁄n_gë_°©e
(c⁄° 
rc⁄n
 *);

89 
rc⁄n_gë_©ãm±ed_c⁄√˘i⁄s
(c⁄° 
rc⁄n
 *);

90 
rc⁄n_gë_suc˚ssful_c⁄√˘i⁄s
(c⁄° 
rc⁄n
 *);

91 
time_t
 
rc⁄n_gë_œ°_c⁄√˘i⁄
(c⁄° 
rc⁄n
 *);

92 
time_t
 
rc⁄n_gë_¸óti⁄_time
(c⁄° 
rc⁄n
 *);

93 
rc⁄n_gë_tŸÆ_time_c⁄√˘ed
(c⁄° 
rc⁄n
 *);

94 
rc⁄n_gë_backoff
(c⁄° 
rc⁄n
 *);

95 
rc⁄n_gë_°©e_ñ≠£d
(c⁄° 
rc⁄n
 *);

96 
rc⁄n_gë_c⁄√˘i⁄_£qno
(c⁄° 
rc⁄n
 *);

	@lib/sat-math.h

34 #i‚de‡
SAT_MATH_H


35 
	#SAT_MATH_H
 1

	)

37 
	~<as£π.h
>

38 
	~<limôs.h
>

41 
ölöe
 

42 
	$ßt_add
(
x
, 
y
)

44  
x
 + 
y
 >x ? x + y : 
UINT_MAX
;

45 
	}
}

48 
ölöe
 

49 
	$ßt_sub
(
x
, 
y
)

51  
x
 >
y
 ? x - y : 0;

52 
	}
}

55 
ölöe
 

56 
	$ßt_mul
(
x
, 
y
)

58  (!
y
 ? 0

59 : 
x
 <
UINT_MAX
 / 
y
 ? x * y

60 : 
UINT_MAX
);

61 
	}
}

	@lib/shash.c

34 
	~<c⁄fig.h
>

35 
	~"shash.h
"

36 
	~<as£π.h
>

37 
	~"hash.h
"

39 
size_t


40 
	$hash_«me
(c⁄° *
«me
)

42  
	`hash_byãs
(
«me
, 
	`°æí
(name), 0);

43 
	}
}

46 
	$shash_öô
(
shash
 *
sh
)

48 
	`hm≠_öô
(&
sh
->
m≠
);

49 
	}
}

52 
	$shash_de°roy
(
shash
 *
sh
)

54 i‡(
sh
) {

55 
	`shash_˛ór
(
sh
);

56 
	`‰ì
(
sh
);

58 
	}
}

61 
	$shash_˛ór
(
shash
 *
sh
)

63 
shash_node
 *
node
, *
√xt
;

65 
	`HMAP_FOR_EACH_SAFE
 (
node
, 
√xt
, 
shash_node
,Çode, &
sh
->
m≠
) {

66 
	`hm≠_ªmove
(&
sh
->
m≠
, &
node
->node);

67 
	`‰ì
(
node
->
«me
);

68 
	`‰ì
(
node
);

70 
	}
}

75 
	$shash_add
(
shash
 *
sh
, c⁄° *
«me
, *
d©a
)

77 
shash_node
 *
node
 = 
	`xmÆloc
( *node);

78 
node
->
«me
 = 
	`x°rdup
(name);

79 
node
->
d©a
 = data;

80 
	`hm≠_ö£π
(&
sh
->
m≠
, &
node
->node, 
	`hash_«me
(
«me
));

81 
	}
}

84 
	$shash_dñëe
(
shash
 *
sh
, 
shash_node
 *
node
)

86 
	`hm≠_ªmove
(&
sh
->
m≠
, &
node
->node);

87 
	`‰ì
(
node
->
«me
);

88 
	`‰ì
(
node
);

89 
	}
}

92 
shash_node
 *

93 
	$shash_föd
(c⁄° 
shash
 *
sh
, c⁄° *
«me
)

95 
shash_node
 *
node
;

97 
	`HMAP_FOR_EACH_WITH_HASH
 (
node
, 
shash_node
,Çode,

98 
	`hash_«me
(
«me
), &
sh
->
m≠
) {

99 i‡(!
	`°rcmp
(
node
->
«me
,Çame)) {

100  
node
;

103  
NULL
;

104 
	}
}

107 
	$shash_föd_d©a
(c⁄° 
shash
 *
sh
, c⁄° *
«me
)

109 
shash_node
 *
node
 = 
	`shash_föd
(
sh
, 
«me
);

110  
node
 ?Çode->
d©a
 : 
NULL
;

111 
	}
}

	@lib/shash.h

34 #i‚de‡
SHASH_H


35 
	#SHASH_H
 1

	)

37 
	~"hm≠.h
"

39 
	sshash_node
 {

40 
hm≠_node
 
	mnode
;

41 *
	m«me
;

42 *
	md©a
;

45 
	sshash
 {

46 
hm≠
 
	mm≠
;

49 
	#SHASH_INITIALIZER
(
SHASH
Ë{ 
	`HMAP_INITIALIZER
(&(SHASH)->
m≠
Ë}

	)

51 
shash_öô
(
shash
 *);

52 
shash_de°roy
(
shash
 *);

53 
shash_˛ór
(
shash
 *);

54 
shash_add
(
shash
 *, const *, *);

55 
shash_dñëe
(
shash
 *, 
shash_node
 *);

56 
shash_node
 *
shash_föd
(c⁄° 
shash
 *, const *);

57 *
shash_föd_d©a
(c⁄° 
shash
 *, const *);

	@lib/signals.c

34 
	~<c⁄fig.h
>

35 
	~"sig«ls.h
"

36 
	~<as£π.h
>

37 
	~<î∫o.h
>

38 
	~<limôs.h
>

39 
	~<sig«l.h
>

40 
	~<uni°d.h
>

41 
	~"pﬁl-lo›.h
"

42 
	~"sockë-utû.h
"

43 
	~"utû.h
"

45 #i‡
deföed
(
_NSIG
)

46 
	#N_SIGNALS
 
_NSIG


	)

47 #ñi‡
deföed
(
NSIG
)

48 
	#N_SIGNALS
 
NSIG


	)

52 
	#N_SIGNALS
 32

	)

55 
	ssig«l
 {

56 
	msigƒ
;

59 vﬁ©ûê
sig_©omic_t
 
	gsig«Àd
[
N_SIGNALS
];

61 
	gfds
[2];

63 
sig«l_h™dÀr
(
sigƒ
);

72 
	$sig«l_öô
()

74 
boﬁ
 
öôed
;

75 i‡(!
öôed
) {

76 
öôed
 = 
åue
;

77 i‡(
	`pùe
(
fds
)) {

78 
	`oÂ_Áèl
(
î∫o
, "couldÇot createÖipe");

80 
	`£t_n⁄blockög
(
fds
[0]);

81 
	`£t_n⁄blockög
(
fds
[1]);

83 
	}
}

88 
sig«l
 *

89 
	$sig«l_ªgi°î
(
sigƒ
)

91 
siga˘i⁄
 
ß
;

92 
sig«l
 *
s
;

94 
	`sig«l_öô
();

97 
	`as£π
(
sigƒ
 >1 && sigƒ < 
N_SIGNALS
);

98 
	`mem£t
(&
ß
, 0,  sa);

99 
ß
.
ß_h™dÀr
 = 
sig«l_h™dÀr
;

100 
	`sigem±y£t
(&
ß
.
ß_mask
);

101 
ß
.
ß_Êags
 = 
SA_RESTART
;

102 i‡(
	`siga˘i⁄
(
sigƒ
, &
ß
, 
NULL
)) {

103 
	`oÂ_Áèl
(
î∫o
, "siga˘i⁄(%dËÁûed", 
sigƒ
);

107 
s
 = 
	`xmÆloc
( *s);

108 
s
->
sigƒ
 = signr;

109  
s
;

110 
	}
}

114 
boﬁ


115 
	$sig«l_pﬁl
(
sig«l
 *
s
)

117 
buf
[
_POSIX_PIPE_BUF
];

118 
	`ªad
(
fds
[0], 
buf
,  buf);

119 i‡(
sig«Àd
[
s
->
sigƒ
]) {

120 
sig«Àd
[
s
->
sigƒ
] = 0;

121  
åue
;

123  
Ál£
;

124 
	}
}

129 
	$sig«l_waô
(
sig«l
 *
s
)

131 i‡(
sig«Àd
[
s
->
sigƒ
]) {

132 
	`pﬁl_immedüã_wake
();

134 
	`pﬁl_fd_waô
(
fds
[0], 
POLLIN
);

136 
	}
}

139 
	$sig«l_h™dÀr
(
sigƒ
)

141 i‡(
sigƒ
 >1 && sigƒ < 
N_SIGNALS
) {

142 
	`wrôe
(
fds
[1], "", 1);

143 
sig«Àd
[
sigƒ
] = 
åue
;

145 
	}
}

	@lib/signals.h

34 #i‚de‡
SIGNALS_H


35 
	#SIGNALS_H
 1

	)

37 
	~<°dboﬁ.h
>

39 
sig«l_öô
();

40 
sig«l
 *
sig«l_ªgi°î
(
sigƒ
);

41 
boﬁ
 
sig«l_pﬁl
(
sig«l
 *);

42 
sig«l_waô
(
sig«l
 *);

	@lib/socket-util.c

34 
	~<c⁄fig.h
>

35 
	~"sockë-utû.h
"

36 
	~<¨∑/öë.h
>

37 
	~<î∫o.h
>

38 
	~<f˙é.h
>

39 
	~<√tdb.h
>

40 
	~<pﬁl.h
>

41 
	~<°ddef.h
>

42 
	~<°dio.h
>

43 
	~<°rög.h
>

44 
	~<sys/ªsour˚.h
>

45 
	~<sys/°©.h
>

46 
	~<sys/un.h
>

47 
	~<uni°d.h
>

48 
	~"Áèl-sig«l.h
"

49 
	~"utû.h
"

51 
	~"vlog.h
"

52 
	#LOG_MODULE
 
VLM_sockë_utû


	)

57 
	$£t_n⁄blockög
(
fd
)

59 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0);

60 i‡(
Êags
 != -1) {

61 i‡(
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) != -1) {

64 
	`VLOG_ERR
(
LOG_MODULE
, "f˙é(F_SETFLËÁûed: %s", 
	`°ªº‹
(
î∫o
));

65  
î∫o
;

68 
	`VLOG_ERR
(
LOG_MODULE
, "f˙é(F_GETFLËÁûed: %s", 
	`°ªº‹
(
î∫o
));

69  
î∫o
;

71 
	}
}

76 
	$£t_sockë_¥i‹ôy
(
fd
, 
¥i‹ôy
)

78 
¥io
 = 
¥i‹ôy
;

79  
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_PRIORITY
, (*)&
¥io
, (prio));

80 
	}
}

84 
	$gë_max_fds
()

86 
max_fds
 = -1;

87 i‡(
max_fds
 < 0) {

88 
æimô
 
r
;

89 i‡(!
	`gëæimô
(
RLIMIT_NOFILE
, &
r
)

90 && 
r
.
æim_cur
 !
RLIM_INFINITY


91 && 
r
.
æim_cur
 !
RLIM_SAVED_MAX


92 && 
r
.
æim_cur
 !
RLIM_SAVED_CUR
) {

93 
max_fds
 = 
r
.
æim_cur
;

95 
	`VLOG_WARN
(
LOG_MODULE
, "failedÅo obtain fdÜimit, defaultingÅo 1024");

96 
max_fds
 = 1024;

99  
max_fds
;

100 
	}
}

106 
	$lookup_ù
(c⁄° *
ho°_«me
, 
ö_addr
 *
addr
)

108 i‡(!
	`öë_©⁄
(
ho°_«me
, 
addr
)) {

109 
ho°ít
 *
he
 = 
	`gëho°by«me
(
ho°_«me
);

110 i‡(
he
 =
NULL
) {

111 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

112 
	`VLOG_ERR_RL
(
LOG_MODULE
, &
æ
, "gëho°by«me(%s): %s", 
ho°_«me
,

113 (
h_î∫o
 =
HOST_NOT_FOUND
 ? "hostÇot found"

114 : 
h_î∫o
 =
TRY_AGAIN
 ? "tryágain"

115 : 
h_î∫o
 =
NO_RECOVERY
 ? "non-recoverableÉrror"

116 : 
h_î∫o
 =
NO_ADDRESS
 ? "noáddress"

118  
ENOENT
;

120 
addr
->
s_addr
 = *(
uöt32_t
 *Ë
he
->
h_addr
;

123 
	}
}

128 
	$gë_sockë_îr‹
(
fd
)

130 
îr‹
;

131 
sockÀn_t
 
Àn
 = (
îr‹
);

132 i‡(
	`gësock›t
(
fd
, 
SOL_SOCKET
, 
SO_ERROR
, &
îr‹
, &
Àn
) < 0) {

133 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(5, 10);

134 
îr‹
 = 
î∫o
;

135 
	`VLOG_ERR_RL
(
LOG_MODULE
, &
æ
, "gësock›t(SO_ERROR): %s", 
	`°ªº‹
(
îr‹
));

137  
îr‹
;

138 
	}
}

141 
	$check_c⁄√˘i⁄_com∂ëi⁄
(
fd
)

143 
pﬁlfd
 
pfd
;

144 
ªtvÆ
;

146 
pfd
.
fd
 = fd;

147 
pfd
.
evíts
 = 
POLLOUT
;

149 
ªtvÆ
 = 
	`pﬁl
(&
pfd
, 1, 0);

150 } 
ªtvÆ
 < 0 && 
î∫o
 =
EINTR
);

151 i‡(
ªtvÆ
 == 1) {

152  
	`gë_sockë_îr‹
(
fd
);

153 } i‡(
ªtvÆ
 < 0) {

154 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(5, 10);

155 
	`VLOG_ERR_RL
(
LOG_MODULE
, &
æ
, "pﬁl: %s", 
	`°ªº‹
(
î∫o
));

156  
î∫o
;

158  
EAGAIN
;

160 
	}
}

168 
	$døö_rcvbuf
(
fd
)

170 
sockÀn_t
 
rcvbuf_Àn
;

171 
size_t
 
rcvbuf
;

173 
rcvbuf_Àn
 =  
rcvbuf
;

174 i‡(
	`gësock›t
(
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
rcvbuf
, &
rcvbuf_Àn
) < 0) {

175 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(5, 10);

176 
	`VLOG_ERR_RL
(
LOG_MODULE
, &
æ
, "gësock›t(SO_RCVBUFËÁûed: %s", 
	`°ªº‹
(
î∫o
));

177  
î∫o
;

179 
rcvbuf
 > 0) {

188 #ifde‡
__löux__


189 
	#BUFFER_SIZE
 1

	)

191 
	#BUFFER_SIZE
 2048

	)

193 
buf„r
[
BUFFER_SIZE
];

194 
ssize_t
 
n_byãs
 = 
	`ªcv
(
fd
, 
buf„r
,  buffer,

195 
MSG_TRUNC
 | 
MSG_DONTWAIT
);

196 i‡(
n_byãs
 <0 ||Ç_byã†>
rcvbuf
) {

199 
rcvbuf
 -
n_byãs
;

202 
	}
}

208 
	$døö_fd
(
fd
, 
size_t
 
n_∑ckës
)

210 ; 
n_∑ckës
 > 0;Ç_packets--) {

215 
buf„r
[128];

216 i‡(
	`ªad
(
fd
, 
buf„r
,  buffer) <= 0) {

220 
	}
}

225 
	$make_sockaddr_un
(c⁄° *
«me
, 
sockaddr_un
* 
un
, 
sockÀn_t
 *
un_Àn
)

227 
un
->
sun_Ámûy
 = 
AF_UNIX
;

228 
	`°∫˝y
(
un
->
sun_∑th
, 
«me
,  un->sun_path);

229 
un
->
sun_∑th
[ un->sun_path - 1] = '\0';

230 *
un_Àn
 = (
	`off£tof
(
sockaddr_un
, 
sun_∑th
)

231 + 
	`°æí
 (
un
->
sun_∑th
) + 1);

232 
	}
}

242 
	$make_unix_sockë
(
°yÀ
, 
boﬁ
 
n⁄block
, boﬁ 
∑ss¸ed
 
UNUSED
,

243 c⁄° *
böd_∑th
, c⁄° *
c⁄√˘_∑th
)

245 
îr‹
;

246 
fd
;

248 
fd
 = 
	`sockë
(
PF_UNIX
, 
°yÀ
, 0);

249 i‡(
fd
 < 0) {

250  -
î∫o
;

257 i‡(
n⁄block
) {

258 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0);

259 i‡(
Êags
 == -1) {

260 
îr‹
;

262 i‡(
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) == -1) {

263 
îr‹
;

267 i‡(
böd_∑th
) {

268 
sockaddr_un
 
un
;

269 
sockÀn_t
 
un_Àn
;

270 
	`make_sockaddr_un
(
böd_∑th
, &
un
, &
un_Àn
);

271 i‡(
	`u∆ök
(
un
.
sun_∑th
Ë&& 
î∫o
 !
ENOENT
) {

272 
	`VLOG_WARN
(
LOG_MODULE
, "u∆ökög \"%s\": %s\n", 
un
.
sun_∑th
, 
	`°ªº‹
(
î∫o
));

274 
	`Áèl_sig«l_add_fûe_to_u∆ök
(
böd_∑th
);

275 i‡(
	`böd
(
fd
, (
sockaddr
*Ë&
un
, 
un_Àn
)

276 || 
	`fchmod
(
fd
, 
S_IRWXU
)) {

277 
îr‹
;

281 i‡(
c⁄√˘_∑th
) {

282 
sockaddr_un
 
un
;

283 
sockÀn_t
 
un_Àn
;

284 
	`make_sockaddr_un
(
c⁄√˘_∑th
, &
un
, &
un_Àn
);

285 i‡(
	`c⁄√˘
(
fd
, (
sockaddr
*Ë&
un
, 
un_Àn
)

286 && 
î∫o
 !
EINPROGRESS
) {

287 
îr‹
;

291 #ifde‡
SCM_CREDENTIALS


292 i‡(
∑ss¸ed
) {

293 
íabÀ
 = 1;

294 i‡(
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_PASSCRED
, &
íabÀ
, (enable))) {

295 
îr‹
;

300  
fd
;

302 
îr‹
:

303 i‡(
böd_∑th
) {

304 
	`Áèl_sig«l_ªmove_fûe_to_u∆ök
(
böd_∑th
);

306 
îr‹
 = 
î∫o
;

307 
	`˛o£
(
fd
);

308  -
îr‹
;

309 
	}
}

312 
	$gë_unix_«me_Àn
(
sockÀn_t
 
sun_Àn
)

314  (
sun_Àn
 >
	`off£tof
(
sockaddr_un
, 
sun_∑th
)

315 ? 
sun_Àn
 - 
	`off£tof
(
sockaddr_un
, 
sun_∑th
)

317 
	}
}

	@lib/socket-util.h

34 #i‚de‡
SOCKET_UTIL_H


35 
	#SOCKET_UTIL_H
 1

	)

37 
	~<sys/ty≥s.h
>

38 
	~<√töë/ö.h
>

39 
	~<°dboﬁ.h
>

41 
£t_n⁄blockög
(
fd
);

42 
£t_sockë_¥i‹ôy
(
fd
, 
¥i‹ôy
);

43 
gë_max_fds
();

44 
lookup_ù
(c⁄° *
ho°_«me
, 
ö_addr
 *
addªss
);

45 
gë_sockë_îr‹
(
sock
);

46 
check_c⁄√˘i⁄_com∂ëi⁄
(
fd
);

47 
døö_rcvbuf
(
fd
);

48 
døö_fd
(
fd
, 
size_t
 
n_∑ckës
);

49 
make_unix_sockë
(
°yÀ
, 
boﬁ
 
n⁄block
, boﬁ 
∑ss¸ed
,

50 c⁄° *
böd_∑th
, c⁄° *
c⁄√˘_∑th
);

51 
gë_unix_«me_Àn
(
sockÀn_t
 
sun_Àn
);

	@lib/stp.c

37 
	~"°p.h
"

38 
	~<¨∑/öë.h
>

39 
	~<as£π.h
>

40 
	~<öây≥s.h
>

41 
	~<°dlib.h
>

42 
	~"oÂbuf.h
"

43 
	~"∑ckës.h
"

44 
	~"utû.h
"

45 
	~"xtoxŒ.h
"

47 
	~"vlog.h
"

48 
	#LOG_MODULE
 
VLM_°p


	)

51 c⁄° 
uöt8_t
 
	g°p_ëh_addr
[
ETH_ADDR_LEN
]

54 
	#STP_PROTOCOL_ID
 0x0000

	)

55 
	#STP_PROTOCOL_VERSION
 0x00

	)

56 
	#STP_TYPE_CONFIG
 0x00

	)

57 
	#STP_TYPE_TCN
 0x80

	)

59 
	s°p_bpdu_hódî
 {

60 
uöt16_t
 
	m¥Ÿocﬁ_id
;

61 
uöt8_t
 
	m¥Ÿocﬁ_vîsi⁄
;

62 
uöt8_t
 
	mbpdu_ty≥
;

63 } 
__©åibuã__
((
∑cked
));

64 
BUILD_ASSERT_DECL
((
°p_bpdu_hódî
) == 4);

66 
	e°p_c⁄fig_bpdu_Êags
 {

67 
	mSTP_CONFIG_TOPOLOGY_CHANGE_ACK
 = 0x80,

68 
	mSTP_CONFIG_TOPOLOGY_CHANGE
 = 0x01

71 
	s°p_c⁄fig_bpdu
 {

72 
°p_bpdu_hódî
 
	mhódî
;

73 
uöt8_t
 
	mÊags
;

74 
uöt64_t
 
	mroŸ_id
;

75 
uöt32_t
 
	mroŸ_∑th_co°
;

76 
uöt64_t
 
	mbridge_id
;

77 
uöt16_t
 
	mp‹t_id
;

78 
uöt16_t
 
	mmesßge_age
;

79 
uöt16_t
 
	mmax_age
;

80 
uöt16_t
 
	mhñlo_time
;

81 
uöt16_t
 
	mf‹w¨d_dñay
;

82 } 
__©åibuã__
((
∑cked
));

83 
BUILD_ASSERT_DECL
((
°p_c⁄fig_bpdu
) == 35);

85 
	s°p_t˙_bpdu
 {

86 
°p_bpdu_hódî
 
	mhódî
;

87 } 
__©åibuã__
((
∑cked
));

88 
BUILD_ASSERT_DECL
((
°p_t˙_bpdu
) == 4);

90 
	s°p_timî
 {

91 
boﬁ
 
	ma˘ive
;

92 
	mvÆue
;

95 
	s°p_p‹t
 {

96 
°p
 *
	m°p
;

97 
	mp‹t_id
;

98 
°p_°©e
 
	m°©e
;

99 
	m∑th_co°
;

100 
°p_idítifõr
 
	mdesig«ãd_roŸ
;

101 
	mdesig«ãd_co°
;

102 
°p_idítifõr
 
	mdesig«ãd_bridge
;

103 
	mdesig«ãd_p‹t
;

104 
boﬁ
 
	mt›ﬁogy_ch™ge_ack
;

105 
boﬁ
 
	mc⁄fig_≥ndög
;

106 
boﬁ
 
	mch™ge_dëe˘i⁄_íabÀd
;

108 
°p_timî
 
	mmesßge_age_timî
;

109 
°p_timî
 
	mf‹w¨d_dñay_timî
;

110 
°p_timî
 
	mhﬁd_timî
;

112 
boﬁ
 
	m°©e_ch™ged
;

115 
	s°p
 {

117 *
	m«me
;

118 
°p_idítifõr
 
	mbridge_id
;

119 
	mmax_age
;

120 
	mhñlo_time
;

121 
	mf‹w¨d_dñay
;

122 
	mbridge_max_age
;

123 
	mbridge_hñlo_time
;

124 
	mbridge_f‹w¨d_dñay
;

125 
	mrq_max_age
;

126 
	mrq_hñlo_time
;

127 
	mrq_f‹w¨d_dñay
;

128 
	mñ≠£d_ªmaödî
;

131 
°p_idítifõr
 
	mdesig«ãd_roŸ
;

132 
	mroŸ_∑th_co°
;

133 
°p_p‹t
 *
	mroŸ_p‹t
;

134 
boﬁ
 
	mt›ﬁogy_ch™ge_dëe˘ed
;

135 
boﬁ
 
	mt›ﬁogy_ch™ge
;

138 
°p_timî
 
	mhñlo_timî
;

139 
°p_timî
 
	mt˙_timî
;

140 
°p_timî
 
	mt›ﬁogy_ch™ge_timî
;

143 
°p_p‹t
 
	mp‹ts
[
STP_MAX_PORTS
];

146 
°p_p‹t
 *
	mfú°_ch™ged_p‹t
;

147 (*
	m£nd_bpdu
)(
oÂbuf
 *
	mbpdu
, 
	mp‹t_no
, *
	maux
);

148 *
	maux
;

151 
	#FOR_EACH_ENABLED_PORT
(
PORT
, 
STP
) \

152 (
PORT
Ë
	`°p_√xt_íabÀd_p‹t
((
STP
), (STP)->
p‹ts
); \

153 (
PORT
); \

154 (
PORT
Ë
	`°p_√xt_íabÀd_p‹t
((
STP
), (PORTË+ 1))

	)

155 
°p_p‹t
 *

156 
	$°p_√xt_íabÀd_p‹t
(c⁄° 
°p
 *°p, c⁄° 
°p_p‹t
 *
p‹t
)

158 ; 
p‹t
 < &
°p
->
p‹ts
[
	`ARRAY_SIZE
(stp->ports)];Öort++) {

159 i‡(
p‹t
->
°©e
 !
STP_DISABLED
) {

160  (
°p_p‹t
 *Ë
p‹t
;

163  
NULL
;

164 
	}
}

166 
	#MESSAGE_AGE_INCREMENT
 1

	)

168 
°p_å™smô_c⁄fig
(
°p_p‹t
 *);

169 
boﬁ
 
°p_su≥r£des_p‹t_öfo
(c⁄° 
°p_p‹t
 *,

170 c⁄° 
°p_c⁄fig_bpdu
 *);

171 
°p_ªc‹d_c⁄fig_öf‹m©i⁄
(
°p_p‹t
 *,

172 c⁄° 
°p_c⁄fig_bpdu
 *);

173 
°p_ªc‹d_c⁄fig_timeout_vÆues
(
°p
 *,

174 c⁄° 
°p_c⁄fig_bpdu
 *);

175 
boﬁ
 
°p_is_desig«ãd_p‹t
(c⁄° 
°p_p‹t
 *);

176 
°p_c⁄fig_bpdu_gíî©i⁄
(
°p
 *);

177 
°p_å™smô_t˙
(
°p
 *);

178 
°p_c⁄figuøti⁄_upd©e
(
°p
 *);

179 
boﬁ
 
°p_su≥r£des_roŸ
(c⁄° 
°p_p‹t
 *
roŸ
,

180 c⁄° 
°p_p‹t
 *);

181 
°p_roŸ_£À˘i⁄
(
°p
 *);

182 
°p_desig«ãd_p‹t_£À˘i⁄
(
°p
 *);

183 
°p_become_desig«ãd_p‹t
(
°p_p‹t
 *);

184 
°p_p‹t_°©e_£À˘i⁄
(
°p
 *);

185 
°p_make_f‹w¨dög
(
°p_p‹t
 *);

186 
°p_make_blockög
(
°p_p‹t
 *);

187 
°p_£t_p‹t_°©e
(
°p_p‹t
 *, 
°p_°©e
);

188 
°p_t›ﬁogy_ch™ge_dëe˘i⁄
(
°p
 *);

189 
°p_t›ﬁogy_ch™ge_acknowÀdged
(
°p
 *);

190 
°p_acknowÀdge_t›ﬁogy_ch™ge
(
°p_p‹t
 *);

191 
°p_ª˚ived_c⁄fig_bpdu
(
°p
 *, 
°p_p‹t
 *,

192 c⁄° 
°p_c⁄fig_bpdu
 *);

193 
°p_ª˚ived_t˙_bpdu
(
°p
 *, 
°p_p‹t
 *);

194 
°p_hñlo_timî_expúy
(
°p
 *);

195 
°p_mesßge_age_timî_expúy
(
°p_p‹t
 *);

196 
boﬁ
 
°p_is_desig«ãd_f‹_some_p‹t
(c⁄° 
°p
 *);

197 
°p_f‹w¨d_dñay_timî_expúy
(
°p_p‹t
 *);

198 
°p_t˙_timî_expúy
(
°p
 *);

199 
°p_t›ﬁogy_ch™ge_timî_expúy
(
°p
 *);

200 
°p_hﬁd_timî_expúy
(
°p_p‹t
 *);

201 
°p_öôülize_p‹t
(
°p_p‹t
 *, 
°p_°©e
);

202 
°p_become_roŸ_bridge
(
°p
 *);

203 
°p_upd©e_bridge_timîs
(
°p
 *);

205 
˛amp
(
x
, 
mö
, 
max
);

206 
ms_to_timî
(
ms
);

207 
ms_to_timî_ªmaödî
(
ms
);

208 
timî_to_ms
(
timî
);

209 
°p_°¨t_timî
(
°p_timî
 *, 
vÆue
);

210 
°p_°›_timî
(
°p_timî
 *);

211 
boﬁ
 
°p_timî_expúed
(
°p_timî
 *, 
ñ≠£d
, 
timeout
);

213 
°p_£nd_bpdu
(
°p_p‹t
 *, c⁄° *, 
size_t
);

226 
°p
 *

227 
°p_¸óã
(c⁄° *
«me
, 
°p_idítifõr
 
bridge_id
,

228 (*
£nd_bpdu
)(
oÂbuf
 *
bpdu
, 
p‹t_no
, *
aux
),

229 *
aux
)

231 
°p
 *stp;

232 
°p_p‹t
 *
p
;

234 
°p
 = 
	`xˇŒoc
(1,  *stp);

235 
°p
->
«me
 = 
	`x°rdup
(name);

236 
°p
->
bridge_id
 = bridge_id;

237 i‡(!(
°p
->
bridge_id
 >> 48)) {

238 
°p
->
bridge_id
 |(
uöt64_t
Ë
STP_DEFAULT_BRIDGE_PRIORITY
 << 48;

241 
°p
->
rq_max_age
 = 6000;

242 
°p
->
rq_hñlo_time
 = 2000;

243 
°p
->
rq_f‹w¨d_dñay
 = 4000;

244 
	`°p_upd©e_bridge_timîs
(
°p
);

245 
°p
->
max_age
 = sç->
bridge_max_age
;

246 
°p
->
hñlo_time
 = sç->
bridge_hñlo_time
;

247 
°p
->
f‹w¨d_dñay
 = sç->
bridge_f‹w¨d_dñay
;

249 
°p
->
desig«ãd_roŸ
 = sç->
bridge_id
;

250 
°p
->
roŸ_∑th_co°
 = 0;

251 
°p
->
roŸ_p‹t
 = 
NULL
;

252 
°p
->
t›ﬁogy_ch™ge_dëe˘ed
 = 
Ál£
;

253 
°p
->
t›ﬁogy_ch™ge
 = 
Ál£
;

255 
	`°p_°›_timî
(&
°p
->
t˙_timî
);

256 
	`°p_°›_timî
(&
°p
->
t›ﬁogy_ch™ge_timî
);

257 
	`°p_°¨t_timî
(&
°p
->
hñlo_timî
, 0);

259 
°p
->
£nd_bpdu
 = send_bpdu;

260 
°p
->
aux
 =áux;

262 
°p
->
fú°_ch™ged_p‹t
 = &°p->
p‹ts
[
	`ARRAY_SIZE
(stp->ports)];

263 
p
 = 
°p
->
p‹ts
;Ö < &°p->p‹ts[
	`ARRAY_SIZE
(stp->ports)];Ö++) {

264 
p
->
°p
 = stp;

265 
p
->
p‹t_id
 = (
	`°p_p‹t_no
’Ë+ 1Ë| (
STP_DEFAULT_PORT_PRIORITY
 << 8);

266 
p
->
∑th_co°
 = 19;

267 
	`°p_öôülize_p‹t
(
p
, 
STP_DISABLED
);

269  
°p
;

270 
	}
}

274 
	$°p_de°roy
(
°p
 *stp)

276 
	`‰ì
(
°p
);

277 
	}
}

281 
	$°p_tick
(
°p
 *°p, 
ms
)

283 
°p_p‹t
 *
p
;

284 
ñ≠£d
;

289 
ms
 = 
	`˛amp
(ms, 0, 
INT_MAX
 - 1000Ë+ 
°p
->
ñ≠£d_ªmaödî
;

290 
ñ≠£d
 = 
	`ms_to_timî
(
ms
);

291 
°p
->
ñ≠£d_ªmaödî
 = 
	`ms_to_timî_ªmaödî
(
ms
);

292 i‡(!
ñ≠£d
) {

296 i‡(
	`°p_timî_expúed
(&
°p
->
hñlo_timî
, 
ñ≠£d
, sç->
hñlo_time
)) {

297 
	`°p_hñlo_timî_expúy
(
°p
);

299 i‡(
	`°p_timî_expúed
(&
°p
->
t˙_timî
, 
ñ≠£d
, sç->
bridge_hñlo_time
)) {

300 
	`°p_t˙_timî_expúy
(
°p
);

302 i‡(
	`°p_timî_expúed
(&
°p
->
t›ﬁogy_ch™ge_timî
, 
ñ≠£d
,

303 
°p
->
max_age
 + sç->
f‹w¨d_dñay
)) {

304 
	`°p_t›ﬁogy_ch™ge_timî_expúy
(
°p
);

306 
	`FOR_EACH_ENABLED_PORT
 (
p
, 
°p
) {

307 i‡(
	`°p_timî_expúed
(&
p
->
mesßge_age_timî
, 
ñ≠£d
, 
°p
->
max_age
)) {

308 
	`°p_mesßge_age_timî_expúy
(
p
);

311 
	`FOR_EACH_ENABLED_PORT
 (
p
, 
°p
) {

312 i‡(
	`°p_timî_expúed
(&
p
->
f‹w¨d_dñay_timî
, 
ñ≠£d
,

313 
°p
->
f‹w¨d_dñay
)) {

314 
	`°p_f‹w¨d_dñay_timî_expúy
(
p
);

316 i‡(
	`°p_timî_expúed
(&
p
->
hﬁd_timî
, 
ñ≠£d
, 
	`ms_to_timî
(1000))) {

317 
	`°p_hﬁd_timî_expúy
(
p
);

320 
	}
}

323 
	$£t_bridge_id
(
°p
 *°p, 
°p_idítifõr
 
√w_bridge_id
)

325 i‡(
√w_bridge_id
 !
°p
->
bridge_id
) {

326 
boﬁ
 
roŸ
;

327 
°p_p‹t
 *
p
;

329 
roŸ
 = 
	`°p_is_roŸ_bridge
(
°p
);

330 
	`FOR_EACH_ENABLED_PORT
 (
p
, 
°p
) {

331 i‡(
	`°p_is_desig«ãd_p‹t
(
p
)) {

332 
p
->
desig«ãd_bridge
 = 
√w_bridge_id
;

335 
°p
->
bridge_id
 = 
√w_bridge_id
;

336 
	`°p_c⁄figuøti⁄_upd©e
(
°p
);

337 
	`°p_p‹t_°©e_£À˘i⁄
(
°p
);

338 i‡(
	`°p_is_roŸ_bridge
(
°p
Ë&& !
roŸ
) {

339 
	`°p_become_roŸ_bridge
(
°p
);

342 
	}
}

345 
	$°p_£t_bridge_id
(
°p
 *°p, 
°p_idítifõr
 
bridge_id
)

347 c⁄° 
uöt64_t
 
mac_bôs
 = (
	`UINT64_C
(1) << 48) - 1;

348 c⁄° 
uöt64_t
 
¥i_bôs
 = ~
mac_bôs
;

349 
	`£t_bridge_id
(
°p
, (°p->
bridge_id
 & 
¥i_bôs
Ë| (bridge_id & 
mac_bôs
));

350 
	}
}

353 
	$°p_£t_bridge_¥i‹ôy
(
°p
 *°p, 
uöt16_t
 
√w_¥i‹ôy
)

355 c⁄° 
uöt64_t
 
mac_bôs
 = (
	`UINT64_C
(1) << 48) - 1;

356 
	`£t_bridge_id
(
°p
, ((°p->
bridge_id
 & 
mac_bôs
)

357 | ((
uöt64_t
Ë
√w_¥i‹ôy
 << 48)));

358 
	}
}

365 
	$°p_£t_hñlo_time
(
°p
 *°p, 
ms
)

367 
°p
->
rq_hñlo_time
 = 
ms
;

368 
	`°p_upd©e_bridge_timîs
(
°p
);

369 
	}
}

377 
	$°p_£t_max_age
(
°p
 *°p, 
ms
)

379 
°p
->
rq_max_age
 = 
ms
;

380 
	`°p_upd©e_bridge_timîs
(
°p
);

381 
	}
}

388 
	$°p_£t_f‹w¨d_dñay
(
°p
 *°p, 
ms
)

390 
°p
->
rq_f‹w¨d_dñay
 = 
ms
;

391 
	`°p_upd©e_bridge_timîs
(
°p
);

392 
	}
}

396 
	$°p_gë_«me
(c⁄° 
°p
 *stp)

398  
°p
->
«me
;

399 
	}
}

402 
°p_idítifõr


403 
	$°p_gë_bridge_id
(c⁄° 
°p
 *stp)

405  
°p
->
bridge_id
;

406 
	}
}

409 
°p_idítifõr


410 
	$°p_gë_desig«ãd_roŸ
(c⁄° 
°p
 *stp)

412  
°p
->
desig«ãd_roŸ
;

413 
	}
}

417 
boﬁ


418 
	$°p_is_roŸ_bridge
(c⁄° 
°p
 *stp)

420  
°p
->
bridge_id
 =°p->
desig«ãd_roŸ
;

421 
	}
}

425 
	$°p_gë_roŸ_∑th_co°
(c⁄° 
°p
 *stp)

427  
°p
->
roŸ_∑th_co°
;

428 
	}
}

434 
	$°p_gë_hñlo_time
(c⁄° 
°p
 *stp)

436  
	`timî_to_ms
(
°p
->
bridge_hñlo_time
);

437 
	}
}

444 
	$°p_gë_max_age
(c⁄° 
°p
 *stp)

446  
	`timî_to_ms
(
°p
->
bridge_max_age
);

447 
	}
}

454 
	$°p_gë_f‹w¨d_dñay
(c⁄° 
°p
 *stp)

456  
	`timî_to_ms
(
°p
->
bridge_f‹w¨d_dñay
);

457 
	}
}

461 
°p_p‹t
 *

462 
	$°p_gë_p‹t
(
°p
 *°p, 
p‹t_no
)

464 
	`as£π
(
p‹t_no
 >0 &&Ö‹t_nÿ< 
	`ARRAY_SIZE
(
°p
->
p‹ts
));

465  &
°p
->
p‹ts
[
p‹t_no
];

466 
	}
}

470 
°p_p‹t
 *

471 
	$°p_gë_roŸ_p‹t
(
°p
 *stp)

473  
°p
->
roŸ_p‹t
;

474 
	}
}

479 
boﬁ


480 
	$°p_gë_ch™ged_p‹t
(
°p
 *°p, 
°p_p‹t
 **
p‹ç
)

482 
°p_p‹t
 *
íd
 = &
°p
->
p‹ts
[
	`ARRAY_SIZE
(stp->ports)];

483 
°p_p‹t
 *
p
;

485 
p
 = 
°p
->
fú°_ch™ged_p‹t
;Ö < 
íd
;Ö++) {

486 i‡(
p
->
°©e_ch™ged
) {

487 
p
->
°©e_ch™ged
 = 
Ál£
;

488 
°p
->
fú°_ch™ged_p‹t
 = 
p
 + 1;

489 *
p‹ç
 = 
p
;

490  
åue
;

493 
°p
->
fú°_ch™ged_p‹t
 = 
íd
;

494 *
p‹ç
 = 
NULL
;

495  
Ál£
;

496 
	}
}

501 
	$°p_°©e_«me
(
°p_°©e
 
°©e
)

503 
°©e
) {

504 
STP_DISABLED
:

506 
STP_LISTENING
:

508 
STP_LEARNING
:

510 
STP_FORWARDING
:

512 
STP_BLOCKING
:

515 
	`NOT_REACHED
();

517 
	}
}

524 
boﬁ


525 
	$°p_f‹w¨d_ö_°©e
(
°p_°©e
 
°©e
)

527  (
°©e
 & (
STP_DISABLED
 | 
STP_FORWARDING
)) != 0;

528 
	}
}

535 
boﬁ


536 
	$°p_À¨n_ö_°©e
(
°p_°©e
 
°©e
)

538  (
°©e
 & (
STP_DISABLED
 | 
STP_LEARNING
 | 
STP_FORWARDING
)) != 0;

539 
	}
}

546 
	$°p_ª˚ived_bpdu
(
°p_p‹t
 *
p
, c⁄° *
bpdu
, 
size_t
 
bpdu_size
)

548 
°p
 *°∞
p
->stp;

549 c⁄° 
°p_bpdu_hódî
 *
hódî
;

551 i‡(
p
->
°©e
 =
STP_DISABLED
) {

555 i‡(
bpdu_size
 < (
°p_bpdu_hódî
)) {

556 
	`VLOG_WARN
(
LOG_MODULE
, "%s:Ñe˚ivedÑu¡ %zu-byã BPDU", 
°p
->
«me
, 
bpdu_size
);

560 
hódî
 = 
bpdu
;

561 i‡(
hódî
->
¥Ÿocﬁ_id
 !
	`ht⁄s
(
STP_PROTOCOL_ID
)) {

562 
	`VLOG_WARN
(
LOG_MODULE
, "%s:Ñe˚ived BPDU wôh u√x≥˘edÖrŸocﬁ ID %"
PRIu16
,

563 
°p
->
«me
, 
	`¡ohs
(
hódî
->
¥Ÿocﬁ_id
));

566 i‡(
hódî
->
¥Ÿocﬁ_vîsi⁄
 !
STP_PROTOCOL_VERSION
) {

567 
	`VLOG_DBG
(
LOG_MODULE
, "%s:Ñe˚ived BPDU wôh u√x≥˘edÖrŸocﬁ vîsi⁄ %"
PRIu8
,

568 
°p
->
«me
, 
hódî
->
¥Ÿocﬁ_vîsi⁄
);

571 
hódî
->
bpdu_ty≥
) {

572 
STP_TYPE_CONFIG
:

573 i‡(
bpdu_size
 < (
°p_c⁄fig_bpdu
)) {

574 
	`VLOG_WARN
(
LOG_MODULE
, "%s:Ñeceived config BPDU with invalid size %zu",

575 
°p
->
«me
, 
bpdu_size
);

578 
	`°p_ª˚ived_c⁄fig_bpdu
(
°p
, 
p
, 
bpdu
);

581 
STP_TYPE_TCN
:

582 i‡(
bpdu_size
 !(
°p_t˙_bpdu
)) {

583 
	`VLOG_WARN
(
LOG_MODULE
, "%s:Ñeceived TCN BPDU with invalid size %zu",

584 
°p
->
«me
, 
bpdu_size
);

587 
	`°p_ª˚ived_t˙_bpdu
(
°p
, 
p
);

591 
	`VLOG_WARN
(
LOG_MODULE
, "%s:Ñe˚ived BPDU o‡u√x≥˘edÅy≥ %"
PRIu8
,

592 
°p
->
«me
, 
hódî
->
bpdu_ty≥
);

595 
	}
}

598 
°p
 *

599 
	$°p_p‹t_gë_°p
(
°p_p‹t
 *
p
)

601  
p
->
°p
;

602 
	}
}

606 
	$°p_p‹t_no
(c⁄° 
°p_p‹t
 *
p
)

608 
°p
 *°∞
p
->stp;

609 
	`as£π
(
p
 >
°p
->
p‹ts
 &&Ö < &°p->p‹ts[
	`ARRAY_SIZE
(stp->ports)]);

610  
p
 - 
°p
->
p‹ts
;

611 
	}
}

614 
°p_°©e


615 
	$°p_p‹t_gë_°©e
(c⁄° 
°p_p‹t
 *
p
)

617  
p
->
°©e
;

618 
	}
}

622 
	$°p_p‹t_dißbÀ
(
°p_p‹t
 *
p
)

624 
°p
 *°∞
p
->stp;

625 i‡(
p
->
°©e
 !
STP_DISABLED
) {

626 
boﬁ
 
roŸ
 = 
	`°p_is_roŸ_bridge
(
°p
);

627 
	`°p_become_desig«ãd_p‹t
(
p
);

628 
	`°p_£t_p‹t_°©e
(
p
, 
STP_DISABLED
);

629 
p
->
t›ﬁogy_ch™ge_ack
 = 
Ál£
;

630 
p
->
c⁄fig_≥ndög
 = 
Ál£
;

631 
	`°p_°›_timî
(&
p
->
mesßge_age_timî
);

632 
	`°p_°›_timî
(&
p
->
f‹w¨d_dñay_timî
);

633 
	`°p_c⁄figuøti⁄_upd©e
(
°p
);

634 
	`°p_p‹t_°©e_£À˘i⁄
(
°p
);

635 i‡(
	`°p_is_roŸ_bridge
(
°p
Ë&& !
roŸ
) {

636 
	`°p_become_roŸ_bridge
(
°p
);

639 
	}
}

643 
	$°p_p‹t_íabÀ
(
°p_p‹t
 *
p
)

645 i‡(
p
->
°©e
 =
STP_DISABLED
) {

646 
	`°p_öôülize_p‹t
(
p
, 
STP_BLOCKING
);

647 
	`°p_p‹t_°©e_£À˘i⁄
(
p
->
°p
);

649 
	}
}

654 
	$°p_p‹t_£t_¥i‹ôy
(
°p_p‹t
 *
p
, 
uöt8_t
 
√w_¥i‹ôy
)

656 
uöt16_t
 
√w_p‹t_id
 = (
p
->
p‹t_id
 & 0xffË| (
√w_¥i‹ôy
 << 8);

657 i‡(
p
->
p‹t_id
 !
√w_p‹t_id
) {

658 
°p
 *°∞
p
->stp;

659 i‡(
	`°p_is_desig«ãd_p‹t
(
p
)) {

660 
p
->
desig«ãd_p‹t
 = 
√w_p‹t_id
;

662 
p
->
p‹t_id
 = 
√w_p‹t_id
;

663 i‡(
°p
->
bridge_id
 =
p
->
desig«ãd_bridge


664 && 
p
->
p‹t_id
 <Ö->
desig«ãd_p‹t
) {

665 
	`°p_become_desig«ãd_p‹t
(
p
);

666 
	`°p_p‹t_°©e_£À˘i⁄
(
°p
);

669 
	}
}

675 
	$°p_p‹t_£t_∑th_co°
(
°p_p‹t
 *
p
, 
uöt16_t
 
∑th_co°
)

677 i‡(
p
->
∑th_co°
 !=Öath_cost) {

678 
°p
 *°∞
p
->stp;

679 
p
->
∑th_co°
 =Öath_cost;

680 
	`°p_c⁄figuøti⁄_upd©e
(
°p
);

681 
	`°p_p‹t_°©e_£À˘i⁄
(
°p
);

683 
	}
}

687 
	$°p_p‹t_£t_•ìd
(
°p_p‹t
 *
p
, 
•ìd
)

689 
	`°p_p‹t_£t_∑th_co°
(
p
, (
•ìd
 >= 10000 ? 2

690 : 
•ìd
 >= 1000 ? 4

691 : 
•ìd
 >= 100 ? 19

692 : 
•ìd
 >= 16 ? 62

693 : 
•ìd
 >= 10 ? 100

694 : 
•ìd
 >= 4 ? 250

696 
	}
}

700 
	$°p_p‹t_íabÀ_ch™ge_dëe˘i⁄
(
°p_p‹t
 *
p
)

702 
p
->
ch™ge_dëe˘i⁄_íabÀd
 = 
åue
;

703 
	}
}

707 
	$°p_p‹t_dißbÀ_ch™ge_dëe˘i⁄
(
°p_p‹t
 *
p
)

709 
p
->
ch™ge_dëe˘i⁄_íabÀd
 = 
Ál£
;

710 
	}
}

713 
	$°p_å™smô_c⁄fig
(
°p_p‹t
 *
p
)

715 
°p
 *°∞
p
->stp;

716 
boﬁ
 
roŸ
 = 
	`°p_is_roŸ_bridge
(
°p
);

717 i‡(!
roŸ
 && !
°p
->
roŸ_p‹t
) {

720 i‡(
p
->
hﬁd_timî
.
a˘ive
) {

721 
p
->
c⁄fig_≥ndög
 = 
åue
;

723 
°p_c⁄fig_bpdu
 
c⁄fig
;

724 
	`mem£t
(&
c⁄fig
, 0,  config);

725 
c⁄fig
.
hódî
.
¥Ÿocﬁ_id
 = 
	`ht⁄s
(
STP_PROTOCOL_ID
);

726 
c⁄fig
.
hódî
.
¥Ÿocﬁ_vîsi⁄
 = 
STP_PROTOCOL_VERSION
;

727 
c⁄fig
.
hódî
.
bpdu_ty≥
 = 
STP_TYPE_CONFIG
;

728 
c⁄fig
.
Êags
 = 0;

729 i‡(
p
->
t›ﬁogy_ch™ge_ack
) {

730 
c⁄fig
.
Êags
 |
	`ht⁄s
(
STP_CONFIG_TOPOLOGY_CHANGE_ACK
);

732 i‡(
°p
->
t›ﬁogy_ch™ge
) {

733 
c⁄fig
.
Êags
 |
	`ht⁄s
(
STP_CONFIG_TOPOLOGY_CHANGE
);

735 
c⁄fig
.
roŸ_id
 = 
	`ht⁄Œ
(
°p
->
desig«ãd_roŸ
);

736 
c⁄fig
.
roŸ_∑th_co°
 = 
	`ht⁄l
(
°p
->root_path_cost);

737 
c⁄fig
.
bridge_id
 = 
	`ht⁄Œ
(
°p
->bridge_id);

738 
c⁄fig
.
p‹t_id
 = 
	`ht⁄s
(
p
->port_id);

739 i‡(
roŸ
) {

740 
c⁄fig
.
mesßge_age
 = 
	`ht⁄s
(0);

742 
c⁄fig
.
mesßge_age
 = 
	`ht⁄s
(
°p
->
roŸ_p‹t
->
mesßge_age_timî
.
vÆue


743 + 
MESSAGE_AGE_INCREMENT
);

745 
c⁄fig
.
max_age
 = 
	`ht⁄s
(
°p
->max_age);

746 
c⁄fig
.
hñlo_time
 = 
	`ht⁄s
(
°p
->hello_time);

747 
c⁄fig
.
f‹w¨d_dñay
 = 
	`ht⁄s
(
°p
->forward_delay);

748 i‡(
	`¡ohs
(
c⁄fig
.
mesßge_age
Ë< 
°p
->
max_age
) {

749 
p
->
t›ﬁogy_ch™ge_ack
 = 
Ál£
;

750 
p
->
c⁄fig_≥ndög
 = 
Ál£
;

751 
	`°p_£nd_bpdu
(
p
, &
c⁄fig
,  config);

752 
	`°p_°¨t_timî
(&
p
->
hﬁd_timî
, 0);

755 
	}
}

757 
boﬁ


758 
	$°p_su≥r£des_p‹t_öfo
(c⁄° 
°p_p‹t
 *
p
,

759 c⁄° 
°p_c⁄fig_bpdu
 *
c⁄fig
)

761 i‡(
	`¡ohŒ
(
c⁄fig
->
roŸ_id
Ë!
p
->
desig«ãd_roŸ
) {

762  
	`¡ohŒ
(
c⁄fig
->
roŸ_id
Ë< 
p
->
desig«ãd_roŸ
;

763 } i‡(
	`¡ohl
(
c⁄fig
->
roŸ_∑th_co°
Ë!
p
->
desig«ãd_co°
) {

764  
	`¡ohl
(
c⁄fig
->
roŸ_∑th_co°
Ë< 
p
->
desig«ãd_co°
;

765 } i‡(
	`¡ohŒ
(
c⁄fig
->
bridge_id
Ë!
p
->
desig«ãd_bridge
) {

766  
	`¡ohŒ
(
c⁄fig
->
bridge_id
Ë< 
p
->
desig«ãd_bridge
;

768  (
	`¡ohŒ
(
c⁄fig
->
bridge_id
Ë!
p
->
°p
->bridge_id

769 || 
	`¡ohs
(
c⁄fig
->
p‹t_id
Ë<
p
->
desig«ãd_p‹t
);

771 
	}
}

774 
	$°p_ªc‹d_c⁄fig_öf‹m©i⁄
(
°p_p‹t
 *
p
,

775 c⁄° 
°p_c⁄fig_bpdu
 *
c⁄fig
)

777 
p
->
desig«ãd_roŸ
 = 
	`¡ohŒ
(
c⁄fig
->
roŸ_id
);

778 
p
->
desig«ãd_co°
 = 
	`¡ohl
(
c⁄fig
->
roŸ_∑th_co°
);

779 
p
->
desig«ãd_bridge
 = 
	`¡ohŒ
(
c⁄fig
->
bridge_id
);

780 
p
->
desig«ãd_p‹t
 = 
	`¡ohs
(
c⁄fig
->
p‹t_id
);

781 
	`°p_°¨t_timî
(&
p
->
mesßge_age_timî
, 
	`¡ohs
(
c⁄fig
->
mesßge_age
));

782 
	}
}

785 
	$°p_ªc‹d_c⁄fig_timeout_vÆues
(
°p
 *stp,

786 c⁄° 
°p_c⁄fig_bpdu
 *
c⁄fig
)

788 
°p
->
max_age
 = 
	`¡ohs
(
c⁄fig
->max_age);

789 
°p
->
hñlo_time
 = 
	`¡ohs
(
c⁄fig
->hello_time);

790 
°p
->
f‹w¨d_dñay
 = 
	`¡ohs
(
c⁄fig
->forward_delay);

791 
°p
->
t›ﬁogy_ch™ge
 = 
c⁄fig
->
Êags
 & 
	`ht⁄s
(
STP_CONFIG_TOPOLOGY_CHANGE
);

792 
	}
}

794 
boﬁ


795 
	$°p_is_desig«ãd_p‹t
(c⁄° 
°p_p‹t
 *
p
)

797  (
p
->
desig«ãd_bridge
 =p->
°p
->
bridge_id


798 && 
p
->
desig«ãd_p‹t
 =p->
p‹t_id
);

799 
	}
}

802 
	$°p_c⁄fig_bpdu_gíî©i⁄
(
°p
 *stp)

804 
°p_p‹t
 *
p
;

806 
	`FOR_EACH_ENABLED_PORT
 (
p
, 
°p
) {

807 i‡(
	`°p_is_desig«ãd_p‹t
(
p
)) {

808 
	`°p_å™smô_c⁄fig
(
p
);

811 
	}
}

814 
	$°p_å™smô_t˙
(
°p
 *stp)

816 
°p_p‹t
 *
p
 = 
°p
->
roŸ_p‹t
;

817 
°p_t˙_bpdu
 
t˙_bpdu
;

818 i‡(!
p
) {

821 
t˙_bpdu
.
hódî
.
¥Ÿocﬁ_id
 = 
	`ht⁄s
(
STP_PROTOCOL_ID
);

822 
t˙_bpdu
.
hódî
.
¥Ÿocﬁ_vîsi⁄
 = 
STP_PROTOCOL_VERSION
;

823 
t˙_bpdu
.
hódî
.
bpdu_ty≥
 = 
STP_TYPE_TCN
;

824 
	`°p_£nd_bpdu
(
p
, &
t˙_bpdu
, Åcn_bpdu);

825 
	}
}

828 
	$°p_c⁄figuøti⁄_upd©e
(
°p
 *stp)

830 
	`°p_roŸ_£À˘i⁄
(
°p
);

831 
	`°p_desig«ãd_p‹t_£À˘i⁄
(
°p
);

832 
	}
}

834 
boﬁ


835 
	$°p_su≥r£des_roŸ
(c⁄° 
°p_p‹t
 *
roŸ
, c⁄° °p_p‹à*
p
)

837 
p_co°
 = 
p
->
desig«ãd_co°
 +Ö->
∑th_co°
;

838 
roŸ_co°
 = 
roŸ
->
desig«ãd_co°
 +ÑoŸ->
∑th_co°
;

840 i‡(
p
->
desig«ãd_roŸ
 !
roŸ
->designated_root) {

841  
p
->
desig«ãd_roŸ
 < 
roŸ
->designated_root;

842 } i‡(
p_co°
 !
roŸ_co°
) {

843  
p_co°
 < 
roŸ_co°
;

844 } i‡(
p
->
desig«ãd_bridge
 !
roŸ
->designated_bridge) {

845  
p
->
desig«ãd_bridge
 < 
roŸ
->designated_bridge;

846 } i‡(
p
->
desig«ãd_p‹t
 !
roŸ
->designated_port) {

847  
p
->
desig«ãd_p‹t
 < 
roŸ
->designated_port;

849  
p
->
p‹t_id
 < 
roŸ
->port_id;

851 
	}
}

854 
	$°p_roŸ_£À˘i⁄
(
°p
 *stp)

856 
°p_p‹t
 *
p
, *
roŸ
;

858 
roŸ
 = 
NULL
;

859 
	`FOR_EACH_ENABLED_PORT
 (
p
, 
°p
) {

860 i‡(
	`°p_is_desig«ãd_p‹t
(
p
)

861 || 
p
->
desig«ãd_roŸ
 >
°p
->
bridge_id
) {

864 i‡(
roŸ
 && !
	`°p_su≥r£des_roŸ
‘oŸ, 
p
)) {

867 
roŸ
 = 
p
;

869 
°p
->
roŸ_p‹t
 = 
roŸ
;

870 i‡(!
roŸ
) {

871 
°p
->
desig«ãd_roŸ
 = sç->
bridge_id
;

872 
°p
->
roŸ_∑th_co°
 = 0;

874 
°p
->
desig«ãd_roŸ
 = 
roŸ
->designated_root;

875 
°p
->
roŸ_∑th_co°
 = 
roŸ
->
desig«ãd_co°
 +ÑoŸ->
∑th_co°
;

877 
	}
}

880 
	$°p_desig«ãd_p‹t_£À˘i⁄
(
°p
 *stp)

882 
°p_p‹t
 *
p
;

884 
	`FOR_EACH_ENABLED_PORT
 (
p
, 
°p
) {

885 i‡(
	`°p_is_desig«ãd_p‹t
(
p
)

886 || 
p
->
desig«ãd_roŸ
 !
°p
->designated_root

887 || 
°p
->
roŸ_∑th_co°
 < 
p
->
desig«ãd_co°


888 || (
°p
->
roŸ_∑th_co°
 =
p
->
desig«ãd_co°


889 && (
°p
->
bridge_id
 < 
p
->
desig«ãd_bridge


890 || (
°p
->
bridge_id
 =
p
->
desig«ãd_bridge


891 && 
p
->
p‹t_id
 <p->
desig«ãd_p‹t
))))

893 
	`°p_become_desig«ãd_p‹t
(
p
);

896 
	}
}

899 
	$°p_become_desig«ãd_p‹t
(
°p_p‹t
 *
p
)

901 
°p
 *°∞
p
->stp;

902 
p
->
desig«ãd_roŸ
 = 
°p
->designated_root;

903 
p
->
desig«ãd_co°
 = 
°p
->
roŸ_∑th_co°
;

904 
p
->
desig«ãd_bridge
 = 
°p
->
bridge_id
;

905 
p
->
desig«ãd_p‹t
 =Ö->
p‹t_id
;

906 
	}
}

909 
	$°p_p‹t_°©e_£À˘i⁄
(
°p
 *stp)

911 
°p_p‹t
 *
p
;

913 
	`FOR_EACH_ENABLED_PORT
 (
p
, 
°p
) {

914 i‡(
p
 =
°p
->
roŸ_p‹t
) {

915 
p
->
c⁄fig_≥ndög
 = 
Ál£
;

916 
p
->
t›ﬁogy_ch™ge_ack
 = 
Ál£
;

917 
	`°p_make_f‹w¨dög
(
p
);

918 } i‡(
	`°p_is_desig«ãd_p‹t
(
p
)) {

919 
	`°p_°›_timî
(&
p
->
mesßge_age_timî
);

920 
	`°p_make_f‹w¨dög
(
p
);

922 
p
->
c⁄fig_≥ndög
 = 
Ál£
;

923 
p
->
t›ﬁogy_ch™ge_ack
 = 
Ál£
;

924 
	`°p_make_blockög
(
p
);

927 
	}
}

930 
	$°p_make_f‹w¨dög
(
°p_p‹t
 *
p
)

932 i‡(
p
->
°©e
 =
STP_BLOCKING
) {

933 
	`°p_£t_p‹t_°©e
(
p
, 
STP_LISTENING
);

934 
	`°p_°¨t_timî
(&
p
->
f‹w¨d_dñay_timî
, 0);

936 
	}
}

939 
	$°p_make_blockög
(
°p_p‹t
 *
p
)

941 i‡(!(
p
->
°©e
 & (
STP_DISABLED
 | 
STP_BLOCKING
))) {

942 i‡(
p
->
°©e
 & (
STP_FORWARDING
 | 
STP_LEARNING
)) {

943 i‡(
p
->
ch™ge_dëe˘i⁄_íabÀd
) {

944 
	`°p_t›ﬁogy_ch™ge_dëe˘i⁄
(
p
->
°p
);

947 
	`°p_£t_p‹t_°©e
(
p
, 
STP_BLOCKING
);

948 
	`°p_°›_timî
(&
p
->
f‹w¨d_dñay_timî
);

950 
	}
}

953 
	$°p_£t_p‹t_°©e
(
°p_p‹t
 *
p
, 
°p_°©e
 
°©e
)

955 i‡(
°©e
 !
p
->°©ê&& !p->
°©e_ch™ged
) {

956 
p
->
°©e_ch™ged
 = 
åue
;

957 i‡(
p
 <Ö->
°p
->
fú°_ch™ged_p‹t
) {

958 
p
->
°p
->
fú°_ch™ged_p‹t
 =Ö;

961 
p
->
°©e
 = state;

962 
	}
}

965 
	$°p_t›ﬁogy_ch™ge_dëe˘i⁄
(
°p
 *stp)

967 i‡(
	`°p_is_roŸ_bridge
(
°p
)) {

968 
°p
->
t›ﬁogy_ch™ge
 = 
åue
;

969 
	`°p_°¨t_timî
(&
°p
->
t›ﬁogy_ch™ge_timî
, 0);

970 } i‡(!
°p
->
t›ﬁogy_ch™ge_dëe˘ed
) {

971 
	`°p_å™smô_t˙
(
°p
);

972 
	`°p_°¨t_timî
(&
°p
->
t˙_timî
, 0);

974 
°p
->
t›ﬁogy_ch™ge_dëe˘ed
 = 
åue
;

975 
	}
}

978 
	$°p_t›ﬁogy_ch™ge_acknowÀdged
(
°p
 *stp)

980 
°p
->
t›ﬁogy_ch™ge_dëe˘ed
 = 
Ál£
;

981 
	`°p_°›_timî
(&
°p
->
t˙_timî
);

982 
	}
}

985 
	$°p_acknowÀdge_t›ﬁogy_ch™ge
(
°p_p‹t
 *
p
)

987 
p
->
t›ﬁogy_ch™ge_ack
 = 
åue
;

988 
	`°p_å™smô_c⁄fig
(
p
);

989 
	}
}

992 
	$°p_ª˚ived_c⁄fig_bpdu
(
°p
 *°p, 
°p_p‹t
 *
p
,

993 c⁄° 
°p_c⁄fig_bpdu
 *
c⁄fig
)

995 i‡(
	`¡ohs
(
c⁄fig
->
mesßge_age
Ë>¡ohs(c⁄fig->
max_age
)) {

996 
	`VLOG_WARN
(
LOG_MODULE
, "%s:Ñeceived config BPDU with messageáge (%u) greater "

998 
°p
->
«me
,

999 
	`¡ohs
(
c⁄fig
->
mesßge_age
),Çtohs(c⁄fig->
max_age
));

1002 i‡(
p
->
°©e
 !
STP_DISABLED
) {

1003 
boﬁ
 
roŸ
 = 
	`°p_is_roŸ_bridge
(
°p
);

1004 i‡(
	`°p_su≥r£des_p‹t_öfo
(
p
, 
c⁄fig
)) {

1005 
	`°p_ªc‹d_c⁄fig_öf‹m©i⁄
(
p
, 
c⁄fig
);

1006 
	`°p_c⁄figuøti⁄_upd©e
(
°p
);

1007 
	`°p_p‹t_°©e_£À˘i⁄
(
°p
);

1008 i‡(!
	`°p_is_roŸ_bridge
(
°p
Ë&& 
roŸ
) {

1009 
	`°p_°›_timî
(&
°p
->
hñlo_timî
);

1010 i‡(
°p
->
t›ﬁogy_ch™ge_dëe˘ed
) {

1011 
	`°p_°›_timî
(&
°p
->
t›ﬁogy_ch™ge_timî
);

1012 
	`°p_å™smô_t˙
(
°p
);

1013 
	`°p_°¨t_timî
(&
°p
->
t˙_timî
, 0);

1016 i‡(
p
 =
°p
->
roŸ_p‹t
) {

1017 
	`°p_ªc‹d_c⁄fig_timeout_vÆues
(
°p
, 
c⁄fig
);

1018 
	`°p_c⁄fig_bpdu_gíî©i⁄
(
°p
);

1019 i‡(
c⁄fig
->
Êags
 & 
	`ht⁄s
(
STP_CONFIG_TOPOLOGY_CHANGE_ACK
)) {

1020 
	`°p_t›ﬁogy_ch™ge_acknowÀdged
(
°p
);

1023 } i‡(
	`°p_is_desig«ãd_p‹t
(
p
)) {

1024 
	`°p_å™smô_c⁄fig
(
p
);

1027 
	}
}

1030 
	$°p_ª˚ived_t˙_bpdu
(
°p
 *°p, 
°p_p‹t
 *
p
)

1032 i‡(
p
->
°©e
 !
STP_DISABLED
) {

1033 i‡(
	`°p_is_desig«ãd_p‹t
(
p
)) {

1034 
	`°p_t›ﬁogy_ch™ge_dëe˘i⁄
(
°p
);

1035 
	`°p_acknowÀdge_t›ﬁogy_ch™ge
(
p
);

1038 
	}
}

1041 
	$°p_hñlo_timî_expúy
(
°p
 *stp)

1043 
	`°p_c⁄fig_bpdu_gíî©i⁄
(
°p
);

1044 
	`°p_°¨t_timî
(&
°p
->
hñlo_timî
, 0);

1045 
	}
}

1048 
	$°p_mesßge_age_timî_expúy
(
°p_p‹t
 *
p
)

1050 
°p
 *°∞
p
->stp;

1051 
boﬁ
 
roŸ
 = 
	`°p_is_roŸ_bridge
(
°p
);

1052 
	`°p_become_desig«ãd_p‹t
(
p
);

1053 
	`°p_c⁄figuøti⁄_upd©e
(
°p
);

1054 
	`°p_p‹t_°©e_£À˘i⁄
(
°p
);

1055 i‡(
	`°p_is_roŸ_bridge
(
°p
Ë&& !
roŸ
) {

1056 
°p
->
max_age
 = sç->
bridge_max_age
;

1057 
°p
->
hñlo_time
 = sç->
bridge_hñlo_time
;

1058 
°p
->
f‹w¨d_dñay
 = sç->
bridge_f‹w¨d_dñay
;

1059 
	`°p_t›ﬁogy_ch™ge_dëe˘i⁄
(
°p
);

1060 
	`°p_°›_timî
(&
°p
->
t˙_timî
);

1061 
	`°p_c⁄fig_bpdu_gíî©i⁄
(
°p
);

1062 
	`°p_°¨t_timî
(&
°p
->
hñlo_timî
, 0);

1064 
	}
}

1066 
boﬁ


1067 
	$°p_is_desig«ãd_f‹_some_p‹t
(c⁄° 
°p
 *stp)

1069 c⁄° 
°p_p‹t
 *
p
;

1071 
	`FOR_EACH_ENABLED_PORT
 (
p
, 
°p
) {

1072 i‡(
p
->
desig«ãd_bridge
 =
°p
->
bridge_id
) {

1073  
åue
;

1076  
Ál£
;

1077 
	}
}

1080 
	$°p_f‹w¨d_dñay_timî_expúy
(
°p_p‹t
 *
p
)

1082 i‡(
p
->
°©e
 =
STP_LISTENING
) {

1083 
	`°p_£t_p‹t_°©e
(
p
, 
STP_LEARNING
);

1084 
	`°p_°¨t_timî
(&
p
->
f‹w¨d_dñay_timî
, 0);

1085 } i‡(
p
->
°©e
 =
STP_LEARNING
) {

1086 
	`°p_£t_p‹t_°©e
(
p
, 
STP_FORWARDING
);

1087 i‡(
	`°p_is_desig«ãd_f‹_some_p‹t
(
p
->
°p
)) {

1088 i‡(
p
->
ch™ge_dëe˘i⁄_íabÀd
) {

1089 
	`°p_t›ﬁogy_ch™ge_dëe˘i⁄
(
p
->
°p
);

1093 
	}
}

1096 
	$°p_t˙_timî_expúy
(
°p
 *stp)

1098 
	`°p_å™smô_t˙
(
°p
);

1099 
	`°p_°¨t_timî
(&
°p
->
t˙_timî
, 0);

1100 
	}
}

1103 
	$°p_t›ﬁogy_ch™ge_timî_expúy
(
°p
 *stp)

1105 
°p
->
t›ﬁogy_ch™ge_dëe˘ed
 = 
Ál£
;

1106 
°p
->
t›ﬁogy_ch™ge
 = 
Ál£
;

1107 
	}
}

1110 
	$°p_hﬁd_timî_expúy
(
°p_p‹t
 *
p
)

1112 i‡(
p
->
c⁄fig_≥ndög
) {

1113 
	`°p_å™smô_c⁄fig
(
p
);

1115 
	}
}

1118 
	$°p_öôülize_p‹t
(
°p_p‹t
 *
p
, 
°p_°©e
 
°©e
)

1120 
	`as£π
(
°©e
 & (
STP_DISABLED
 | 
STP_BLOCKING
));

1121 
	`°p_become_desig«ãd_p‹t
(
p
);

1122 
	`°p_£t_p‹t_°©e
(
p
, 
°©e
);

1123 
p
->
t›ﬁogy_ch™ge_ack
 = 
Ál£
;

1124 
p
->
c⁄fig_≥ndög
 = 
Ál£
;

1125 
p
->
ch™ge_dëe˘i⁄_íabÀd
 = 
åue
;

1126 
	`°p_°›_timî
(&
p
->
mesßge_age_timî
);

1127 
	`°p_°›_timî
(&
p
->
f‹w¨d_dñay_timî
);

1128 
	`°p_°›_timî
(&
p
->
hﬁd_timî
);

1129 
	}
}

1132 
	$°p_become_roŸ_bridge
(
°p
 *stp)

1134 
°p
->
max_age
 = sç->
bridge_max_age
;

1135 
°p
->
hñlo_time
 = sç->
bridge_hñlo_time
;

1136 
°p
->
f‹w¨d_dñay
 = sç->
bridge_f‹w¨d_dñay
;

1137 
	`°p_t›ﬁogy_ch™ge_dëe˘i⁄
(
°p
);

1138 
	`°p_°›_timî
(&
°p
->
t˙_timî
);

1139 
	`°p_c⁄fig_bpdu_gíî©i⁄
(
°p
);

1140 
	`°p_°¨t_timî
(&
°p
->
hñlo_timî
, 0);

1141 
	}
}

1144 
	$°p_°¨t_timî
(
°p_timî
 *
timî
, 
vÆue
)

1146 
timî
->
vÆue
 = value;

1147 
timî
->
a˘ive
 = 
åue
;

1148 
	}
}

1151 
	$°p_°›_timî
(
°p_timî
 *
timî
)

1153 
timî
->
a˘ive
 = 
Ál£
;

1154 
	}
}

1156 
boﬁ


1157 
	$°p_timî_expúed
(
°p_timî
 *
timî
, 
ñ≠£d
, 
timeout
)

1159 i‡(
timî
->
a˘ive
) {

1160 
timî
->
vÆue
 +
ñ≠£d
;

1161 i‡(
timî
->
vÆue
 >
timeout
) {

1162 
timî
->
a˘ive
 = 
Ál£
;

1163  
åue
;

1166  
Ál£
;

1167 
	}
}

1172 
	$ms_to_timî
(
ms
)

1174  
ms
 * 0x100 / 1000;

1175 
	}
}

1180 
	$ms_to_timî_ªmaödî
(
ms
)

1182  
ms
 * 0x100 % 1000;

1183 
	}
}

1188 
	$timî_to_ms
(
timî
)

1190  
timî
 * 1000 / 0x100;

1191 
	}
}

1194 
	$˛amp
(
x
, 
mö
, 
max
)

1196  
x
 < 
mö
 ? mö : x > 
max
 ? max : x;

1197 
	}
}

1200 
	$°p_upd©e_bridge_timîs
(
°p
 *stp)

1202 
ht
, 
ma
, 
fd
;

1204 
ht
 = 
	`˛amp
(
°p
->
rq_hñlo_time
, 1000, 10000);

1205 
ma
 = 
	`˛amp
(
°p
->
rq_max_age
, 
	`MAX
(2 * (
ht
 + 1000), 6000), 40000);

1206 
fd
 = 
	`˛amp
(
°p
->
rq_f‹w¨d_dñay
, 
ma
 / 2 + 1000, 30000);

1208 
°p
->
bridge_hñlo_time
 = 
	`ms_to_timî
(
ht
);

1209 
°p
->
bridge_max_age
 = 
	`ms_to_timî
(
ma
);

1210 
°p
->
bridge_f‹w¨d_dñay
 = 
	`ms_to_timî
(
fd
);

1212 i‡(
	`°p_is_roŸ_bridge
(
°p
)) {

1213 
°p
->
max_age
 = sç->
bridge_max_age
;

1214 
°p
->
hñlo_time
 = sç->
bridge_hñlo_time
;

1215 
°p
->
f‹w¨d_dñay
 = sç->
bridge_f‹w¨d_dñay
;

1217 
	}
}

1220 
	$°p_£nd_bpdu
(
°p_p‹t
 *
p
, c⁄° *
bpdu
, 
size_t
 
bpdu_size
)

1222 
ëh_hódî
 *
ëh
;

1223 
Œc_hódî
 *
Œc
;

1224 
oÂbuf
 *
pkt
;

1227 
pkt
 = 
	`oÂbuf_√w
(
ETH_HEADER_LEN
 + 
LLC_HEADER_LEN
 + 
bpdu_size
);

1228 
pkt
->
l2
 = 
ëh
 = 
	`oÂbuf_put_zîos
(pkt,  *eth);

1229 
Œc
 = 
	`oÂbuf_put_zîos
(
pkt
,  *llc);

1230 
pkt
->
l3
 = 
	`oÂbuf_put
’kt, 
bpdu
, 
bpdu_size
);

1233 
	`mem˝y
(
ëh
->
ëh_d°
, 
°p_ëh_addr
, 
ETH_ADDR_LEN
);

1235 
ëh
->
ëh_ty≥
 = 
	`ht⁄s
(
pkt
->
size
 - 
ETH_HEADER_LEN
);

1238 
Œc
->
Œc_dßp
 = 
STP_LLC_DSAP
;

1239 
Œc
->
Œc_sßp
 = 
STP_LLC_SSAP
;

1240 
Œc
->
Œc_˙é
 = 
STP_LLC_CNTL
;

1242 
p
->
°p
->
	`£nd_bpdu
(
pkt
, 
	`°p_p‹t_no
’),Ö->°p->
aux
);

1243 
	}
}

	@lib/stp.h

34 #i‚de‡
STP_H


35 
	#STP_H
 1

	)

40 
	~<°dboﬁ.h
>

41 
	~<°döt.h
>

42 
	~"compûî.h
"

43 
	~"utû.h
"

45 
	goÂbuf
;

48 c⁄° 
uöt8_t
 
°p_ëh_addr
[6];

51 
	#STP_LLC_SSAP
 0x42

	)

52 
	#STP_LLC_DSAP
 0x42

	)

53 
	#STP_LLC_CNTL
 0x03

	)

56 
	#STP_DEFAULT_BRIDGE_PRIORITY
 32768

	)

57 
	#STP_DEFAULT_PORT_PRIORITY
 128

	)

61 
uöt64_t
 
	t°p_idítifõr
;

64 
	#STP_MAX_PORTS
 255

	)

65 
°p
 *
°p_¸óã
(c⁄° *
«me
, 
°p_idítifõr
 
bridge_id
,

66 (*
£nd_bpdu
)(
oÂbuf
 *
bpdu
, 
p‹t_no
,

67 *
aux
),

68 *
aux
);

69 
	`°p_de°roy
(
°p
 *);

70 
	`°p_tick
(
°p
 *, 
ms
);

71 
	`°p_£t_bridge_id
(
°p
 *, 
°p_idítifõr
 
bridge_id
);

72 
	`°p_£t_bridge_¥i‹ôy
(
°p
 *, 
uöt16_t
 
√w_¥i‹ôy
);

73 
	`°p_£t_hñlo_time
(
°p
 *, 
ms
);

74 
	`°p_£t_max_age
(
°p
 *, 
ms
);

75 
	`°p_£t_f‹w¨d_dñay
(
°p
 *, 
ms
);

78 c⁄° *
	`°p_gë_«me
(c⁄° 
°p
 *);

79 
°p_idítifõr
 
	`°p_gë_bridge_id
(c⁄° 
°p
 *);

80 
°p_idítifõr
 
	`°p_gë_desig«ãd_roŸ
(c⁄° 
°p
 *);

81 
boﬁ
 
	`°p_is_roŸ_bridge
(c⁄° 
°p
 *);

82 
	`°p_gë_roŸ_∑th_co°
(c⁄° 
°p
 *);

83 
	`°p_gë_hñlo_time
(c⁄° 
°p
 *);

84 
	`°p_gë_max_age
(c⁄° 
°p
 *);

85 
	`°p_gë_f‹w¨d_dñay
(c⁄° 
°p
 *);

88 
°p_p‹t
 *
	`°p_gë_p‹t
(
°p
 *, 
p‹t_no
);

89 
°p_p‹t
 *
	`°p_gë_roŸ_p‹t
(
°p
 *);

90 
boﬁ
 
	`°p_gë_ch™ged_p‹t
(
°p
 *, 
°p_p‹t
 **
p‹ç
);

96 
	e°p_°©e
 {

97 
STP_DISABLED
 = 1 << 0,

98 
STP_LISTENING
 = 1 << 1,

99 
STP_LEARNING
 = 1 << 2,

100 
STP_FORWARDING
 = 1 << 3,

101 
STP_BLOCKING
 = 1 << 4

103 c⁄° *
	`°p_°©e_«me
(
°p_°©e
);

104 
boﬁ
 
	`°p_f‹w¨d_ö_°©e
(
°p_°©e
);

105 
boﬁ
 
	`°p_À¨n_ö_°©e
(
°p_°©e
);

107 
	`°p_ª˚ived_bpdu
(
°p_p‹t
 *, c⁄° *
bpdu
, 
size_t
 
bpdu_size
);

109 
°p
 *
	`°p_p‹t_gë_°p
(
°p_p‹t
 *);

110 
	`°p_p‹t_no
(c⁄° 
°p_p‹t
 *);

111 
°p_°©e
 
	`°p_p‹t_gë_°©e
(c⁄° 
°p_p‹t
 *);

112 
	`°p_p‹t_íabÀ
(
°p_p‹t
 *);

113 
	`°p_p‹t_dißbÀ
(
°p_p‹t
 *);

114 
	`°p_p‹t_£t_¥i‹ôy
(
°p_p‹t
 *, 
uöt8_t
 
√w_¥i‹ôy
);

115 
	`°p_p‹t_£t_∑th_co°
(
°p_p‹t
 *, 
uöt16_t
 
∑th_co°
);

116 
	`°p_p‹t_£t_•ìd
(
°p_p‹t
 *, 
•ìd
);

117 
	`°p_p‹t_íabÀ_ch™ge_dëe˘i⁄
(
°p_p‹t
 *);

118 
	`°p_p‹t_dißbÀ_ch™ge_dëe˘i⁄
(
°p_p‹t
 *);

	@lib/svec.c

34 
	~<c⁄fig.h
>

35 
	~"svec.h
"

36 
	~<as£π.h
>

37 
	~<˘y≥.h
>

38 
	~<°dlib.h
>

39 
	~<°rög.h
>

40 
	~"dy«mic-°rög.h
"

41 
	~"utû.h
"

43 
	#LOG_MODULE
 
VLM_svec


	)

44 
	~"vlog.h
"

47 
	$svec_öô
(
svec
 *svec)

49 
svec
->
«mes
 = 
NULL
;

50 
svec
->
n
 = 0;

51 
svec
->
Æloˇãd
 = 0;

52 
	}
}

55 
	$svec_de°roy
(
svec
 *svec)

57 
	`svec_˛ór
(
svec
);

58 
	`‰ì
(
svec
->
«mes
);

59 
	}
}

62 
	$svec_˛ór
(
svec
 *svec)

64 
size_t
 
i
;

66 
i
 = 0; i < 
svec
->
n
; i++) {

67 
	`‰ì
(
svec
->
«mes
[
i
]);

69 
svec
->
n
 = 0;

70 
	}
}

73 
	$svec_add
(
svec
 *svec, c⁄° *
«me
)

75 
	`svec_add_noc›y
(
svec
, 
	`x°rdup
(
«me
));

76 
	}
}

79 
	$svec_ex∑nd
(
svec
 *svec)

81 i‡(
svec
->
n
 >svec->
Æloˇãd
) {

82 
svec
->
«mes
 = 
	`x2ƒóŒoc
(svec->«mes, &svec->
Æloˇãd
,

83  *
svec
->
«mes
);

85 
	}
}

88 
	$svec_add_noc›y
(
svec
 *svec, *
«me
)

90 
	`svec_ex∑nd
(
svec
);

91 
svec
->
«mes
[svec->
n
++] = 
«me
;

92 
	}
}

95 
	$svec_≠≥nd
(
svec
 *svec, c⁄° sve¯*
Ÿhî
)

97 
size_t
 
i
;

98 
i
 = 0; i < 
Ÿhî
->
n
; i++) {

99 
	`svec_add
(
svec
, 
Ÿhî
->
«mes
[
i
]);

101 
	}
}

104 
	$svec_ãrmö©e
(
svec
 *svec)

106 
	`svec_ex∑nd
(
svec
);

107 
svec
->
«mes
[svec->
n
] = 
NULL
;

108 
	}
}

111 
	$com∑ª_°rögs
(c⁄° *
a_
, c⁄° *
b_
)

113 *c⁄° *
a
 = 
a_
;

114 *c⁄° *
b
 = 
b_
;

115  
	`°rcmp
(*
a
, *
b
);

116 
	}
}

119 
	$svec_s‹t
(
svec
 *svec)

121 
	`qs‹t
(
svec
->
«mes
, svec->
n
,  *svec->«mes, 
com∑ª_°rögs
);

122 
	}
}

125 
	$svec_s‹t_unique
(
svec
 *svec)

127 
	`svec_s‹t
(
svec
);

128 
	`svec_unique
(
svec
);

129 
	}
}

132 
	$svec_unique
(
svec
 *svec)

134 
	`as£π
(
	`svec_is_s‹ãd
(
svec
));

135 i‡(
svec
->
n
 > 1) {

138 
svec
 
tmp
;

139 
size_t
 
i
;

141 
	`svec_öô
(&
tmp
);

142 
	`svec_add
(&
tmp
, 
svec
->
«mes
[0]);

143 
i
 = 1; i < 
svec
->
n
; i++) {

144 i‡(
	`°rcmp
(
svec
->
«mes
[
i
 - 1], svec->names[i])) {

145 
	`svec_add
(&
tmp
, 
svec
->
«mes
[
i
]);

148 
	`svec_sw≠
(&
tmp
, 
svec
);

149 
	`svec_de°roy
(&
tmp
);

151 
	}
}

154 
	$svec_diff
(c⁄° 
svec
 *
a
, c⁄° sve¯*
b
,

155 
svec
 *
a_⁄ly
, sve¯*
bŸh
, sve¯*
b_⁄ly
)

157 
size_t
 
i
, 
j
;

159 
	`as£π
(
	`svec_is_s‹ãd
(
a
));

160 
	`as£π
(
	`svec_is_s‹ãd
(
b
));

161 i‡(
a_⁄ly
) {

162 
	`svec_öô
(
a_⁄ly
);

164 i‡(
bŸh
) {

165 
	`svec_öô
(
bŸh
);

167 i‡(
b_⁄ly
) {

168 
	`svec_öô
(
b_⁄ly
);

170 
i
 = 
j
 = 0; i < 
a
->
n
 && j < 
b
->n; ) {

171 
cmp
 = 
	`°rcmp
(
a
->
«mes
[
i
], 
b
->«mes[
j
]);

172 i‡(
cmp
 < 0) {

173 i‡(
a_⁄ly
) {

174 
	`svec_add
(
a_⁄ly
, 
a
->
«mes
[
i
]);

176 
i
++;

177 } i‡(
cmp
 > 0) {

178 i‡(
b_⁄ly
) {

179 
	`svec_add
(
b_⁄ly
, 
b
->
«mes
[
j
]);

181 
j
++;

183 i‡(
bŸh
) {

184 
	`svec_add
(
bŸh
, 
a
->
«mes
[
i
]);

186 
i
++;

187 
j
++;

190 i‡(
a_⁄ly
) {

191 ; 
i
 < 
a
->
n
; i++) {

192 
	`svec_add
(
a_⁄ly
, 
a
->
«mes
[
i
]);

195 i‡(
b_⁄ly
) {

196 ; 
j
 < 
b
->
n
; j++) {

197 
	`svec_add
(
b_⁄ly
, 
b
->
«mes
[
j
]);

200 
	}
}

202 
boﬁ


203 
	$svec_c⁄èös
(c⁄° 
svec
 *svec, c⁄° *
«me
)

205  
	`svec_föd
(
svec
, 
«me
Ë!
SIZE_MAX
;

206 
	}
}

208 
size_t


209 
	$svec_föd
(c⁄° 
svec
 *svec, c⁄° *
«me
)

211 **
p
;

213 
	`as£π
(
	`svec_is_s‹ãd
(
svec
));

214 
p
 = 
	`b£¨ch
(&
«me
, 
svec
->
«mes
, svec->
n
,  *svec->names,

215 
com∑ª_°rögs
);

216  
p
 ?Ö - 
svec
->
«mes
 : 
SIZE_MAX
;

217 
	}
}

219 
boﬁ


220 
	$svec_is_s‹ãd
(c⁄° 
svec
 *svec)

222 
size_t
 
i
;

224 
i
 = 1; i < 
svec
->
n
; i++) {

225 i‡(
	`°rcmp
(
svec
->
«mes
[
i
 - 1], svec->names[i]) > 0) {

226  
Ál£
;

229  
åue
;

230 
	}
}

232 
boﬁ


233 
	$svec_is_unique
(c⁄° 
svec
 *svec)

235  
	`svec_gë_du∂iˇã
(
svec
Ë=
NULL
;

236 
	}
}

239 
	$svec_gë_du∂iˇã
(c⁄° 
svec
 *svec)

241 
	`as£π
(
	`svec_is_s‹ãd
(
svec
));

242 i‡(
svec
->
n
 > 1) {

243 
size_t
 
i
;

244 
i
 = 1; i < 
svec
->
n
; i++) {

245 i‡(!
	`°rcmp
(
svec
->
«mes
[
i
 - 1], svec->names[i])) {

246  
svec
->
«mes
[
i
];

250  
NULL
;

251 
	}
}

254 
	$svec_sw≠
(
svec
 *
a
, sve¯*
b
)

256 
svec
 
tmp
 = *
a
;

257 *
a
 = *
b
;

258 *
b
 = 
tmp
;

259 
	}
}

262 
	$svec_¥öt
(c⁄° 
svec
 *svec, c⁄° *
tôÀ
)

264 
size_t
 
i
;

266 
	`¥ötf
("%s:\n", 
tôÀ
);

267 
i
 = 0; i < 
svec
->
n
; i++) {

268 
	`¥ötf
("\"%s\"\n", 
svec
->
«mes
[
i
]);

270 
	}
}

275 
	$svec_∑r£_w‹ds
(
svec
 *svec, c⁄° *
w‹ds
)

277 
ds
 
w‹d
 = 
DS_EMPTY_INITIALIZER
;

278 c⁄° *
p
, *
q
;

280 
p
 = 
w‹ds
; *∞!'\0';Ö = 
q
) {

281 
quŸe
 = 0;

283 
	`is•a˚
((Ë*
p
)) {

284 
p
++;

286 i‡(*
p
 == '\0') {

290 
	`ds_˛ór
(&
w‹d
);

291 
q
 = 
p
; *q != '\0'; q++) {

292 i‡(*
q
 =
quŸe
) {

293 
quŸe
 = 0;

294 } i‡(*
q
 == '\'' || *q == '"') {

295 
quŸe
 = *
q
;

296 } i‡(*
q
 ='\\' && (!
quŸe
 || quote == '"')) {

297 
q
++;

298 i‡(*
q
 == '\0') {

299 
	`VLOG_WARN
(
LOG_MODULE
, "%s:Énd†öÅøûög back¶ash", 
w‹ds
);

302 
	`ds_put_ch¨
(&
w‹d
, *
q
);

303 } i‡(
	`is•a˚
((Ë*
q
Ë&& !
quŸe
) {

304 
q
++;

307 
	`ds_put_ch¨
(&
w‹d
, *
q
);

310 
	`svec_add
(
svec
, 
	`ds_c°r
(&
w‹d
));

311 i‡(
quŸe
) {

312 
	`VLOG_WARN
(
LOG_MODULE
, "%s: w‹dÉnd†ösidêquŸed såög", 
w‹ds
);

315 
	`ds_de°roy
(&
w‹d
);

316 
	}
}

318 
boﬁ


319 
	$svec_equÆ
(c⁄° 
svec
 *
a
, c⁄° sve¯*
b
)

321 
size_t
 
i
;

323 i‡(
a
->
n
 !
b
->n) {

324  
Ál£
;

326 
i
 = 0; i < 
a
->
n
; i++) {

327 i‡(
	`°rcmp
(
a
->
«mes
[
i
], 
b
->names[i])) {

328  
Ál£
;

331  
åue
;

332 
	}
}

335 
	$svec_joö
(c⁄° 
svec
 *svec, c⁄° *
dñimôî
)

337 
ds
 ds;

338 
size_t
 
i
;

340 
	`ds_öô
(&
ds
);

341 
i
 = 0; i < 
svec
->
n
; i++) {

342 i‡(
i
) {

343 
	`ds_put_c°r
(&
ds
, 
dñimôî
);

345 
	`ds_put_c°r
(&
ds
, 
svec
->
«mes
[
i
]);

347  
	`ds_c°r
(&
ds
);

348 
	}
}

351 
	$svec_back
(c⁄° 
svec
 *svec)

353 
	`as£π
(
svec
->
n
);

354  
svec
->
«mes
[svec->
n
 - 1];

355 
	}
}

358 
	$svec_p›_back
(
svec
 *svec)

360 
	`as£π
(
svec
->
n
);

361 
	`‰ì
(
svec
->
«mes
[--svec->
n
]);

362 
	}
}

	@lib/svec.h

34 #i‚de‡
SVEC_H


35 
	#SVEC_H
 1

	)

37 
	~<°dboﬁ.h
>

38 
	~<°ddef.h
>

40 
	ssvec
 {

41 **
	m«mes
;

42 
size_t
 
	mn
;

43 
size_t
 
	mÆloˇãd
;

46 
	#SVEC_EMPTY_INITIALIZER
 { 
NULL
, 0, 0 }

	)

48 
svec_öô
(
svec
 *);

49 
svec_de°roy
(
svec
 *);

50 
svec_˛ór
(
svec
 *);

51 
svec_add
(
svec
 *, const *);

52 
svec_add_noc›y
(
svec
 *, *);

53 
svec_≠≥nd
(
svec
 *, const svec *);

54 
svec_ãrmö©e
(
svec
 *);

55 
svec_s‹t
(
svec
 *);

56 
svec_s‹t_unique
(
svec
 *);

57 
svec_unique
(
svec
 *);

58 
svec_diff
(c⁄° 
svec
 *
a
, c⁄° sve¯*
b
,

59 
svec
 *
a_⁄ly
, sve¯*
bŸh
, sve¯*
b_⁄ly
);

60 
boﬁ
 
svec_c⁄èös
(c⁄° 
svec
 *, const *);

61 
size_t
 
svec_föd
(c⁄° 
svec
 *, const *);

62 
boﬁ
 
svec_is_s‹ãd
(c⁄° 
svec
 *);

63 
boﬁ
 
svec_is_unique
(c⁄° 
svec
 *);

64 c⁄° *
svec_gë_du∂iˇã
(c⁄° 
svec
 *);

65 
svec_sw≠
(
svec
 *
a
, sve¯*
b
);

66 
svec_¥öt
(c⁄° 
svec
 *svec, c⁄° *
tôÀ
);

67 
svec_∑r£_w‹ds
(
svec
 *svec, c⁄° *
w‹ds
);

68 
boﬁ
 
svec_equÆ
(c⁄° 
svec
 *, const svec *);

69 *
svec_joö
(c⁄° 
svec
 *, c⁄° *
dñimôî
);

70 c⁄° *
svec_back
(c⁄° 
svec
 *);

71 
svec_p›_back
(
svec
 *);

	@lib/tag.c

34 
	~<c⁄fig.h
>

35 
	~"èg.h
"

36 
	~<limôs.h
>

37 
	~"øndom.h
"

38 
	~"ty≥-¥›s.h
"

39 
	~"utû.h
"

41 
	#N_TAG_BITS
 (
CHAR_BIT
 * (
èg_ty≥
))

	)

42 
BUILD_ASSERT_DECL
(
IS_POW2
(
N_TAG_BITS
));

44 
	#LOG2_N_TAG_BITS
 (
N_TAG_BITS
 =32 ? 5 : N_TAG_BITS =64 ? 6 : 0)

	)

45 
BUILD_ASSERT_DECL
(
LOG2_N_TAG_BITS
 > 0);

48 
èg_ty≥


49 
	$èg_¸óã_øndom
()

51 
x
, 
y
;

53 
uöt16_t
 
r
 = 
	`øndom_uöt16
();

54 
x
 = 
r
 & (
N_TAG_BITS
 - 1);

55 
y
 = 
r
 >> (16 - 
LOG2_N_TAG_BITS
);

56 } 
x
 =
y
);

57  (1u << 
x
Ë| (1u << 
y
);

58 
	}
}

65 
èg_ty≥


66 
	$èg_¸óã_dëîmöi°ic
(
uöt32_t
 
£ed
)

68 
x
 = 
£ed
 & (
N_TAG_BITS
 - 1);

69 
y
 = (
£ed
 >> 
LOG2_N_TAG_BITS
) % 31;

70 
y
 +y >
x
;

71  (1u << 
x
Ë| (1u << 
y
);

72 
	}
}

76 
	$èg_£t_öô
(
èg_£t
 *
£t
)

78 
	`mem£t
(
£t
, 0,  *set);

79 
	}
}

83 
	$èg_£t_add
(
èg_£t
 *
£t
, 
èg_ty≥
 
èg
)

85 i‡(
èg
 && (!
	`èg_is_vÆid
—agË|| !
	`èg_£t_öãr£˘s
(
£t
,Åag))) {

90 
èg_ty≥
 *
t
 = &
£t
->
ègs
[£t->
n
++ % 
TAG_SET_SIZE
];

91 *
t
 |
èg
;

92 i‡(*
t
 =
	`TYPE_MAXIMUM
(
èg_ty≥
)) {

93 
£t
->
ègs
[0] = *
t
;

96 
£t
->
tŸÆ
 |
èg
;

98 
	}
}

	@lib/tag.h

34 #i‚de‡
TAG_H


35 
	#TAG_H
 1

	)

37 
	~<as£π.h
>

38 
	~<°dboﬁ.h
>

39 
	~<°döt.h
>

40 
	~"utû.h
"

87 
uöt32_t
 
	tèg_ty≥
;

89 
èg_ty≥
 
èg_¸óã_øndom
();

90 
èg_ty≥
 
èg_¸óã_dëîmöi°ic
(
uöt32_t
 
£ed
);

91 
ölöe
 
boﬁ
 
èg_öãr£˘s
(
èg_ty≥
,Åag_type);

92 
ölöe
 
boﬁ
 
èg_is_vÆid
(
èg_ty≥
);

96 
ölöe
 
boﬁ


97 
	$èg_öãr£˘s
(
èg_ty≥
 
a
,Åag_ty≥ 
b
)

99 
èg_ty≥
 
x
 = 
a
 & 
b
;

100  (
x
 & (x - 1)) != 0;

101 
	}
}

105 
ölöe
 
boﬁ


106 
	$èg_is_vÆid
(
èg_ty≥
 
èg
)

108 
èg_ty≥
 
x
 = 
èg
 & (tag - 1);

109 
èg_ty≥
 
y
 = 
x
 & (x - 1);

110  
x
 && !
y
;

111 
	}
}

118 
	#TAG_SET_SIZE
 4

	)

119 
	sèg_£t
 {

120 
èg_ty≥
 
	mtŸÆ
;

121 
èg_ty≥
 
	mègs
[
TAG_SET_SIZE
];

122 
	mn
;

125 
èg_£t_öô
(
èg_£t
 *);

126 
èg_£t_add
(
èg_£t
 *, 
èg_ty≥
);

127 
ölöe
 
boﬁ
 
èg_£t_is_em±y
(c⁄° 
èg_£t
 *);

128 
ölöe
 
boﬁ
 
èg_£t_öãr£˘s
(c⁄° 
èg_£t
 *, 
èg_ty≥
);

132 
ölöe
 
boﬁ


133 
	$èg_£t_is_em±y
(c⁄° 
èg_£t
 *
£t
)

135  !
£t
->
n
;

136 
	}
}

140 
ölöe
 
boﬁ


141 
	$èg_£t_öãr£˘s
(c⁄° 
èg_£t
 *
£t
, 
èg_ty≥
 
ègs
)

143 
	`BUILD_ASSERT_DECL
(
TAG_SET_SIZE
 == 4);

144  (
	`èg_öãr£˘s
(
£t
->
tŸÆ
, 
ègs
)

145 && (
	`èg_öãr£˘s
(
£t
->
ègs
[0],Åags)

146 || 
	`èg_öãr£˘s
(
£t
->
ègs
[1],Åags)

147 || 
	`èg_öãr£˘s
(
£t
->
ègs
[2],Åags)

148 || 
	`èg_öãr£˘s
(
£t
->
ègs
[3],Åags)));

149 
	}
}

	@lib/timeval.c

34 
	~<c⁄fig.h
>

35 
	~"timevÆ.h
"

36 
	~<as£π.h
>

37 
	~<î∫o.h
>

38 
	~<pﬁl.h
>

39 
	~<sig«l.h
>

40 
	~<°rög.h
>

41 
	~<sys/time.h
>

42 
	~"Áèl-sig«l.h
"

43 
	~"utû.h
"

46 
boﬁ
 
	göôed
;

49 vﬁ©ûê
sig_©omic_t
 
	gtick
;

52 
timevÆ
 
	gnow
;

55 
time_t
 
	gdódlöe
 = 
TIME_MIN
;

57 
sigÆrm_h™dÀr
();

58 
ª‰esh_if_ticked
();

59 
time_t
 
time_add
(time_t,Åime_t);

60 
block_sigÆrm
(
sig£t_t
 *);

61 
unblock_sigÆrm
(c⁄° 
sig£t_t
 *);

65 
	$time_öô
()

67 
siga˘i⁄
 
ß
;

68 
ôimîvÆ
 
ôimî
;

70 i‡(
öôed
) {

74 
öôed
 = 
åue
;

75 
	`gëtimeofday
(&
now
, 
NULL
);

76 
tick
 = 
Ál£
;

79 
	`mem£t
(&
ß
, 0,  sa);

80 
ß
.
ß_h™dÀr
 = 
sigÆrm_h™dÀr
;

81 
	`sigem±y£t
(&
ß
.
ß_mask
);

82 
ß
.
ß_Êags
 = 
SA_RESTART
;

83 i‡(
	`siga˘i⁄
(
SIGALRM
, &
ß
, 
NULL
)) {

84 
	`oÂ_Áèl
(
î∫o
, "sigaction(SIGALRM) failed");

88 
ôimî
.
ô_öãrvÆ
.
tv_£c
 = 0;

89 
ôimî
.
ô_öãrvÆ
.
tv_u£c
 = 
TIME_UPDATE_INTERVAL
 * 1000;

90 
ôimî
.
ô_vÆue
 = itimî.
ô_öãrvÆ
;

91 i‡(
	`£tôimî
(
ITIMER_REAL
, &
ôimî
, 
NULL
)) {

92 
	`oÂ_Áèl
(
î∫o
, "setitimer failed");

94 
	}
}

100 
	$time_ª‰esh
()

102 
	`gëtimeofday
(&
now
, 
NULL
);

103 
tick
 = 
Ál£
;

104 
	}
}

107 
time_t


108 
	$time_now
()

110 
	`ª‰esh_if_ticked
();

111  
now
.
tv_£c
;

112 
	}
}

116 
	$time_m£c
()

118 
	`ª‰esh_if_ticked
();

119  (Ë
now
.
tv_£c
 * 1000 +Çow.
tv_u£c
 / 1000;

120 
	}
}

125 
	$time_Æ¨m
(
£cs
)

127 
sig£t_t
 
ﬁdsigs
;

129 
	`time_öô
();

130 
	`block_sigÆrm
(&
ﬁdsigs
);

131 
dódlöe
 = 
£cs
 ? 
	`time_add
(
	`time_now
(), secsË: 
TIME_MIN
;

132 
	`unblock_sigÆrm
(&
ﬁdsigs
);

133 
	}
}

146 
	$time_pﬁl
(
pﬁlfd
 *
pﬁlfds
, 
n_pﬁlfds
, 
timeout
)

148 
°¨t
;

149 
sig£t_t
 
ﬁdsigs
;

150 
boﬁ
 
blocked
;

151 
ªtvÆ
;

153 
	`time_ª‰esh
();

154 
°¨t
 = 
	`time_m£c
();

155 
blocked
 = 
Ál£
;

157 
time_À·
;

158 i‡(
timeout
 > 0) {

159 
ñ≠£d
 = 
	`time_m£c
(Ë- 
°¨t
;

160 
time_À·
 = 
timeout
 >
ñ≠£d
 ?Åimeout -Élapsed : 0;

162 
time_À·
 = 
timeout
;

165 
ªtvÆ
 = 
	`pﬁl
(
pﬁlfds
, 
n_pﬁlfds
, 
time_À·
);

166 i‡(
ªtvÆ
 < 0) {

167 
ªtvÆ
 = -
î∫o
;

169 i‡(
ªtvÆ
 !-
EINTR
) {

173 i‡(!
blocked
 && 
dódlöe
 =
TIME_MIN
) {

174 
	`block_sigÆrm
(&
ﬁdsigs
);

175 
blocked
 = 
åue
;

177 
	`time_ª‰esh
();

179 i‡(
blocked
) {

180 
	`unblock_sigÆrm
(&
ﬁdsigs
);

182  
ªtvÆ
;

183 
	}
}

186 
time_t


187 
	$time_add
(
time_t
 
a
,Åime_à
b
)

189  (
a
 >= 0

190 ? (
b
 > 
TIME_MAX
 - 
a
 ? TIME_MAX :á + b)

191 : (
b
 < 
TIME_MIN
 - 
a
 ? TIME_MIN :á + b));

192 
	}
}

195 
	$sigÆrm_h™dÀr
(
sig_ƒ
)

197 
tick
 = 
åue
;

198 i‡(
dódlöe
 !
TIME_MIN
 && 
	`time
(0) > deadline) {

199 
	`Áèl_sig«l_h™dÀr
(
sig_ƒ
);

201 
	}
}

204 
	$ª‰esh_if_ticked
()

206 
	`as£π
(
öôed
);

207 i‡(
tick
) {

208 
	`time_ª‰esh
();

210 
	}
}

213 
	$block_sigÆrm
(
sig£t_t
 *
ﬁdsigs
)

215 
sig£t_t
 
sigÆrm
;

216 
	`sigem±y£t
(&
sigÆrm
);

217 
	`sigadd£t
(&
sigÆrm
, 
SIGALRM
);

218 i‡(
	`sig¥ocmask
(
SIG_BLOCK
, &
sigÆrm
, 
ﬁdsigs
)) {

219 
	`oÂ_Áèl
(
î∫o
, "sigprocmask");

221 
	}
}

224 
	$unblock_sigÆrm
(c⁄° 
sig£t_t
 *
ﬁdsigs
)

226 i‡(
	`sig¥ocmask
(
SIG_SETMASK
, 
ﬁdsigs
, 
NULL
)) {

227 
	`oÂ_Áèl
(
î∫o
, "sigprocmask");

229 
	}
}

	@lib/timeval.h

34 #i‚de‡
TIMEVAL_H


35 
	#TIMEVAL_H
 1

	)

37 
	~<time.h
>

38 
	~"ty≥-¥›s.h
"

39 
	~"utû.h
"

41 
	gpﬁlfd
;

44 
BUILD_ASSERT_DECL
(
TYPE_IS_INTEGER
(
time_t
));

48 
BUILD_ASSERT_DECL
(
TYPE_IS_SIGNED
(
time_t
));

50 
	#TIME_MAX
 
	`TYPE_MAXIMUM
(
time_t
)

	)

51 
	#TIME_MIN
 
	`TYPE_MINIMUM
(
time_t
)

	)

57 
	#TIME_UPDATE_INTERVAL
 100

	)

59 
time_öô
();

60 
time_ª‰esh
();

61 
time_t
 
time_now
();

62 
time_m£c
();

63 
time_Æ¨m
(
£cs
);

64 
time_pﬁl
(
pﬁlfd
 *, 
n_pﬁlfds
, 
timeout
);

	@lib/type-props.h

34 #i‚de‡
TYPE_PROPS_H


35 
	#TYPE_PROPS_H
 1

	)

37 
	~<limôs.h
>

39 
	#TYPE_IS_INTEGER
(
TYPE
Ë((TYPEË1.5 =(TYPEË1)

	)

40 
	#TYPE_IS_SIGNED
(
TYPE
Ë((TYPEË0 > (TYPEË-1)

	)

41 
	#TYPE_VALUE_BITS
(
TYPE
Ë((TYPEË* 
CHAR_BIT
 - 
	`TYPE_IS_SIGNED
(TYPE))

	)

42 
	#TYPE_MINIMUM
(
TYPE
Ë(
	`TYPE_IS_SIGNED
(TYPE) \

43 ? ~(
TYPE
)0 << 
	`TYPE_VALUE_BITS
(TYPE) \

44 : 0)

	)

45 
	#TYPE_MAXIMUM
(
TYPE
Ë(
	`TYPE_IS_SIGNED
(TYPE) \

46 ? ~(~(
TYPE
)0 << 
	`TYPE_VALUE_BITS
(TYPE)) \

47 : (
TYPE
)-1)

	)

	@lib/unaligned.h

17 #i‚de‡
UNALIGNED_H


18 
	#UNALIGNED_H
 1

	)

20 
	~<°döt.h
>

21 
	~"byã-‹dî.h
"

24 
ölöe
 
uöt16_t
 
gë_u«lig√d_u16
(const uint16_t *);

25 
ölöe
 
uöt32_t
 
gë_u«lig√d_u32
(const uint32_t *);

26 
ölöe
 
uöt64_t
 
gë_u«lig√d_u64
(const uint64_t *);

27 
ölöe
 
put_u«lig√d_u16
(
uöt16_t
 *, uint16_t);

28 
ölöe
 
put_u«lig√d_u32
(
uöt32_t
 *, uint32_t);

29 
ölöe
 
put_u«lig√d_u64
(
uöt64_t
 *, uint64_t);

33 
ölöe
 
uöt16_t
 
	$gë_u«lig√d_u16
(c⁄° 
uöt16_t
 *
p_
)

35 c⁄° 
uöt8_t
 *
p
 = (c⁄° uöt8_à*Ë
p_
;

36  
	`¡ohs
((
p
[0] << 8) |Ö[1]);

37 
	}
}

39 
ölöe
 
	$put_u«lig√d_u16
(
uöt16_t
 *
p_
, uöt16_à
x_
)

41 
uöt8_t
 *
p
 = (uöt8_à*Ë
p_
;

42 
uöt16_t
 
x
 = 
	`¡ohs
(
x_
);

44 
p
[0] = 
x
 >> 8;

45 
p
[1] = 
x
;

46 
	}
}

48 
ölöe
 
uöt32_t
 
	$gë_u«lig√d_u32
(c⁄° 
uöt32_t
 *
p_
)

50 c⁄° 
uöt8_t
 *
p
 = (c⁄° uöt8_à*Ë
p_
;

51  
	`¡ohl
((
p
[0] << 24) | (p[1] << 16) | (p[2] << 8) |Ö[3]);

52 
	}
}

54 
ölöe
 
	$put_u«lig√d_u32
(
uöt32_t
 *
p_
, uöt32_à
x_
)

56 
uöt8_t
 *
p
 = (uöt8_à*Ë
p_
;

57 
uöt32_t
 
x
 = 
	`¡ohl
(
x_
);

59 
p
[0] = 
x
 >> 24;

60 
p
[1] = 
x
 >> 16;

61 
p
[2] = 
x
 >> 8;

62 
p
[3] = 
x
;

63 
	}
}

65 
ölöe
 
uöt64_t
 
	$gë_u«lig√d_u64
(c⁄° 
uöt64_t
 *
p_
)

67 c⁄° 
uöt8_t
 *
p
 = (c⁄° uöt8_à*Ë
p_
;

68  
	`¡ohŒ
(((
uöt64_t
Ë
p
[0] << 56)

69 | ((
uöt64_t
Ë
p
[1] << 48)

70 | ((
uöt64_t
Ë
p
[2] << 40)

71 | ((
uöt64_t
Ë
p
[3] << 32)

72 | (
p
[4] << 24)

73 | (
p
[5] << 16)

74 | (
p
[6] << 8)

75 | 
p
[7]);

76 
	}
}

78 
ölöe
 
	$put_u«lig√d_u64
(
uöt64_t
 *
p_
, uöt64_à
x_
)

80 
uöt8_t
 *
p
 = (uöt8_à*Ë
p_
;

81 
uöt64_t
 
x
 = 
	`¡ohŒ
(
x_
);

83 
p
[0] = 
x
 >> 56;

84 
p
[1] = 
x
 >> 48;

85 
p
[2] = 
x
 >> 40;

86 
p
[3] = 
x
 >> 32;

87 
p
[4] = 
x
 >> 24;

88 
p
[5] = 
x
 >> 16;

89 
p
[6] = 
x
 >> 8;

90 
p
[7] = 
x
;

91 
	}
}

	@lib/util.c

34 
	~<c⁄fig.h
>

35 
	~"utû.h
"

36 
	~<î∫o.h
>

37 
	~<°d¨g.h
>

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

42 c⁄° *
	g¥ogøm_«me
;

45 
	$out_of_mem‹y
()

47 
	`oÂ_Áèl
(0, "virtual memoryÉxhausted");

48 
	}
}

51 
	$xˇŒoc
(
size_t
 
cou¡
, size_à
size
)

53 *
p
 = 
cou¡
 && 
size
 ? 
	`ˇŒoc
(cou¡, sizeË: 
	`mÆloc
(1);

54 i‡(
p
 =
NULL
) {

55 
	`out_of_mem‹y
();

57  
p
;

58 
	}
}

61 
	$xmÆloc
(
size_t
 
size
)

63 *
p
 = 
	`mÆloc
(
size
 ? size : 1);

64 i‡(
p
 =
NULL
) {

65 
	`out_of_mem‹y
();

67  
p
;

68 
	}
}

71 
	$xªÆloc
(*
p
, 
size_t
 
size
)

73 
p
 = 
	`ªÆloc
’, 
size
 ? size : 1);

74 i‡(
p
 =
NULL
) {

75 
	`out_of_mem‹y
();

77  
p
;

78 
	}
}

81 
	$xmemdup
(c⁄° *
p_
, 
size_t
 
size
)

83 *
p
 = 
	`xmÆloc
(
size
);

84 
	`mem˝y
(
p
, 
p_
, 
size
);

85  
p
;

86 
	}
}

89 
	$xmemdup0
(c⁄° *
p_
, 
size_t
 
Àngth
)

91 *
p
 = 
	`xmÆloc
(
Àngth
 + 1);

92 
	`mem˝y
(
p
, 
p_
, 
Àngth
);

93 
p
[
Àngth
] = '\0';

94  
p
;

95 
	}
}

98 
	$x°rdup
(c⁄° *
s
)

100  
	`xmemdup0
(
s
, 
	`°æí
(s));

101 
	}
}

104 
	$xva•rötf
(c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

106 
va_li°
 
¨gs2
;

107 
size_t
 
√eded
;

108 *
s
;

110 
	`va_c›y
(
¨gs2
, 
¨gs
);

111 
√eded
 = 
	`v¢¥ötf
(
NULL
, 0, 
f‹m©
, 
¨gs
);

113 
s
 = 
	`xmÆloc
(
√eded
 + 1);

115 
	`v¢¥ötf
(
s
, 
√eded
 + 1, 
f‹m©
, 
¨gs2
);

116 
	`va_íd
(
¨gs2
);

118  
s
;

119 
	}
}

122 
	$x2ƒóŒoc
(*
p
, 
size_t
 *
n
, size_à
s
)

124 *
n
 = *n == 0 ? 1 : 2 * *n;

125  
	`xªÆloc
(
p
, *
n
 * 
s
);

126 
	}
}

129 
	$xa•rötf
(c⁄° *
f‹m©
, ...)

131 
va_li°
 
¨gs
;

132 *
s
;

134 
	`va_°¨t
(
¨gs
, 
f‹m©
);

135 
s
 = 
	`xva•rötf
(
f‹m©
, 
¨gs
);

136 
	`va_íd
(
¨gs
);

138  
s
;

139 
	}
}

142 
	$°æ˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
)

144 i‡(
size
 > 0) {

145 
size_t
 
n
 = 
	`°æí
(
§c
);

146 
size_t
 
n_c›y
 = 
	`MIN
(
n
, 
size
 - 1);

147 
	`mem˝y
(
d°
, 
§c
, 
n_c›y
);

148 
d°
[
n_c›y
] = '\0';

150 
	}
}

153 
	$oÂ_Áèl
(
îr_no
, c⁄° *
f‹m©
, ...)

155 
va_li°
 
¨gs
;

157 
	`Ârötf
(
°dîr
, "%s: ", 
¥ogøm_«me
);

158 
	`va_°¨t
(
¨gs
, 
f‹m©
);

159 
	`vÂrötf
(
°dîr
, 
f‹m©
, 
¨gs
);

160 
	`va_íd
(
¨gs
);

161 i‡(
îr_no
 != 0)

162 
	`Ârötf
(
°dîr
, " (%s)", 
	`°ªº‹
(
îr_no
));

163 
	`putc
('\n', 
°dîr
);

165 
	`exô
(
EXIT_FAILURE
);

166 
	}
}

169 
	$oÂ_îr‹
(
îr_no
, c⁄° *
f‹m©
, ...)

171 
ßve_î∫o
 = 
î∫o
;

172 
va_li°
 
¨gs
;

174 
	`Ârötf
(
°dîr
, "%s: ", 
¥ogøm_«me
);

175 
	`va_°¨t
(
¨gs
, 
f‹m©
);

176 
	`vÂrötf
(
°dîr
, 
f‹m©
, 
¨gs
);

177 
	`va_íd
(
¨gs
);

178 i‡(
îr_no
 != 0)

179 
	`Ârötf
(
°dîr
, " (%s)", 
	`°ªº‹
(
îr_no
));

180 
	`putc
('\n', 
°dîr
);

182 
î∫o
 = 
ßve_î∫o
;

183 
	}
}

187 
	$£t_¥ogøm_«me
(c⁄° *
¨gv0
)

189 c⁄° *
¶ash
 = 
	`°ºchr
(
¨gv0
, '/');

190 
¥ogøm_«me
 = 
¶ash
 ? sœsh + 1 : 
¨gv0
;

191 
	}
}

198 
	$oÂ_hex_dump
(
FILE
 *
°ªam
, c⁄° *
buf_
, 
size_t
 
size
,

199 
uöçå_t
 
ofs
, 
boﬁ
 
ascii
)

201 c⁄° 
uöt8_t
 *
buf
 = 
buf_
;

202 c⁄° 
size_t
 
≥r_löe
 = 16;

204 
size
 > 0)

206 
size_t
 
°¨t
, 
íd
, 
n
;

207 
size_t
 
i
;

210 
°¨t
 = 
ofs
 % 
≥r_löe
;

211 
íd
 = 
≥r_löe
;

212 i‡(
íd
 - 
°¨t
 > 
size
)

213 
íd
 = 
°¨t
 + 
size
;

214 
n
 = 
íd
 - 
°¨t
;

217 
	`Ârötf
(
°ªam
, "%08jx ", (
uötmax_t
Ë
	`ROUND_DOWN
(
ofs
, 
≥r_löe
));

218 
i
 = 0; i < 
°¨t
; i++)

219 
	`Ârötf
(
°ªam
, " ");

220 ; 
i
 < 
íd
; i++)

221 
	`Ârötf
(
°ªam
, "%02hhx%c",

222 
buf
[
i
 - 
°¨t
], i =
≥r_löe
 / 2 - 1? '-' : ' ');

223 i‡(
ascii
)

225 ; 
i
 < 
≥r_löe
; i++)

226 
	`Ârötf
(
°ªam
, " ");

227 
	`Ârötf
(
°ªam
, "|");

228 
i
 = 0; i < 
°¨t
; i++)

229 
	`Ârötf
(
°ªam
, " ");

230 ; 
i
 < 
íd
; i++) {

231 
c
 = 
buf
[
i
 - 
°¨t
];

232 
	`putc
(
c
 >32 && c < 127 ? c : '.', 
°ªam
);

234 ; 
i
 < 
≥r_löe
; i++)

235 
	`Ârötf
(
°ªam
, " ");

236 
	`Ârötf
(
°ªam
, "|");

238 
	`Ârötf
(
°ªam
, "\n");

240 
ofs
 +
n
;

241 
buf
 +
n
;

242 
size
 -
n
;

244 
	}
}

246 
boﬁ


247 
	$°r_to_öt
(c⁄° *
s
, 
ba£
, *
i
)

249 
Œ
;

250 
boﬁ
 
ok
 = 
	`°r_to_Œ⁄g
(
s
, 
ba£
, &
Œ
);

251 *
i
 = 
Œ
;

252  
ok
;

253 
	}
}

255 
boﬁ


256 
	$°r_to_l⁄g
(c⁄° *
s
, 
ba£
, *
li
)

258 
Œ
;

259 
boﬁ
 
ok
 = 
	`°r_to_Œ⁄g
(
s
, 
ba£
, &
Œ
);

260 *
li
 = 
Œ
;

261  
ok
;

262 
	}
}

264 
boﬁ


265 
	$°r_to_Œ⁄g
(c⁄° *
s
, 
ba£
, *
x
)

267 
ßve_î∫o
 = 
î∫o
;

268 *
èû
;

269 
î∫o
 = 0;

270 *
x
 = 
	`°πﬁl
(
s
, &
èû
, 
ba£
);

271 i‡(
î∫o
 =
EINVAL
 ||Éºnÿ=
ERANGE
 || 
èû
 =
s
 || *tail != '\0') {

272 
î∫o
 = 
ßve_î∫o
;

273 *
x
 = 0;

274  
Ál£
;

276 
î∫o
 = 
ßve_î∫o
;

277  
åue
;

279 
	}
}

281 
boﬁ


282 
	$°r_to_uöt
(c⁄° *
s
, 
ba£
, *
u
)

284  
	`°r_to_öt
(
s
, 
ba£
, (*Ë
u
);

285 
	}
}

287 
boﬁ


288 
	$°r_to_ul⁄g
(c⁄° *
s
, 
ba£
, *
ul
)

290  
	`°r_to_l⁄g
(
s
, 
ba£
, (*Ë
ul
);

291 
	}
}

293 
boﬁ


294 
	$°r_to_uŒ⁄g
(c⁄° *
s
, 
ba£
, *
uŒ
)

296  
	`°r_to_Œ⁄g
(
s
, 
ba£
, (*Ë
uŒ
);

297 
	}
}

	@lib/util.h

34 #i‚de‡
UTIL_H


35 
	#UTIL_H
 1

	)

37 
	~<°d¨g.h
>

38 
	~<°dboﬁ.h
>

39 
	~<°ddef.h
>

40 
	~<°döt.h
>

41 
	~<°dio.h
>

42 
	~<°rög.h
>

43 
	~"c⁄fig.h
"

44 
	~"compûî.h
"

46 #i‚de‡
va_c›y


47 #ifde‡
__va_c›y


48 
	#va_c›y
 
__va_c›y


	)

50 
	#va_c›y
(
d°
, 
§c
Ë((d°Ë(§c))

	)

54 #i‚de‡
__˝lu•lus


56 
	#BUILD_ASSERT
(
EXPR
) \

57 (°ru˘ { 
buûd_as£π_Áûed
 : (
EXPR
Ë? 1 : -1; })

	)

60 
	#BUILD_ASSERT_DECL
(
EXPR
) \

61 (*
	`buûd_as£π
())[
	`BUILD_ASSERT
(
EXPR
)]

	)

63 
	~<boo°/°©ic_as£π.hµ
>

64 
	#BUILD_ASSERT
 
BOOST_STATIC_ASSERT


	)

65 
	#BUILD_ASSERT_DECL
 
BOOST_STATIC_ASSERT


	)

68 c⁄° *
¥ogøm_«me
;

70 
	#ARRAY_SIZE
(
ARRAY
Ë( ARRAY /  *ARRAY)

	)

71 
	#ROUND_UP
(
X
, 
Y
Ë(((XË+ ((YË- 1)Ë/ (YË* (Y))

	)

72 
	#ROUND_DOWN
(
X
, 
Y
Ë((XË/ (YË* (Y))

	)

73 
	#IS_POW2
(
X
Ë((XË&& !((XË& ((XË- 1)))

	)

75 #i‚de‡
MIN


76 
	#MIN
(
X
, 
Y
Ë((XË< (YË? (XË: (Y))

	)

79 #i‚de‡
MAX


80 
	#MAX
(
X
, 
Y
Ë((XË> (YË? (XË: (Y))

	)

83 
	#NOT_REACHED
(Ë
	`ab‹t
()

	)

84 
	#NOT_IMPLEMENTED
(Ë
	`ab‹t
()

	)

85 
	#NOT_TESTED
(Ë((Ë0Ë

	)

89 
	#CONTAINER_OF
(
POINTER
, 
STRUCT
, 
MEMBER
) \

90 ((
STRUCT
 *Ë((*Ë(
POINTER
Ë- 
	`off£tof
 (STRUCT, 
MEMBER
)))

	)

92 #ifde‡ 
__˝lu•lus


96 
£t_¥ogøm_«me
(const *);

98 
out_of_mem‹y
(Ë
NO_RETURN
;

99 *
xmÆloc
(
size_t
Ë
MALLOC_LIKE
;

100 *
xˇŒoc
(
size_t
, size_tË
MALLOC_LIKE
;

101 *
xªÆloc
(*, 
size_t
);

102 *
xmemdup
(c⁄° *, 
size_t
Ë
MALLOC_LIKE
;

103 *
xmemdup0
(c⁄° *, 
size_t
Ë
MALLOC_LIKE
;

104 *
x°rdup
(c⁄° *Ë
MALLOC_LIKE
;

105 *
xa•rötf
(c⁄° *
f‹m©
, ...Ë
PRINTF_FORMAT
(1, 2Ë
MALLOC_LIKE
;

106 *
xva•rötf
(c⁄° *
f‹m©
, 
va_li°
Ë
PRINTF_FORMAT
(1, 0Ë
MALLOC_LIKE
;

107 *
x2ƒóŒoc
(*
p
, 
size_t
 *
n
, size_à
s
);

109 #i‚de‡
HAVE_STRLCPY


110 
°æ˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
);

113 
oÂ_Áèl
(
îr_no
, c⁄° *
f‹m©
, ...)

114 
PRINTF_FORMAT
(2, 3Ë
NO_RETURN
;

115 
oÂ_îr‹
(
îr_no
, c⁄° *
f‹m©
, ...Ë
PRINTF_FORMAT
(2, 3);

116 
oÂ_hex_dump
(
FILE
 *, c⁄° *, 
size_t
, 
uöçå_t
 
off£t
, 
boﬁ
 
ascii
);

118 
boﬁ
 
°r_to_öt
(c⁄° *, 
ba£
, *);

119 
boﬁ
 
°r_to_l⁄g
(c⁄° *, 
ba£
, *);

120 
boﬁ
 
°r_to_Œ⁄g
(c⁄° *, 
ba£
, *);

121 
boﬁ
 
°r_to_uöt
(c⁄° *, 
ba£
, *);

122 
boﬁ
 
°r_to_ul⁄g
(c⁄° *, 
ba£
, *);

123 
boﬁ
 
°r_to_uŒ⁄g
(c⁄° *, 
ba£
, *);

125 #ifde‡ 
__˝lu•lus


	@lib/vconn-netlink.c

34 
	~<c⁄fig.h
>

35 
	~"vc⁄n.h
"

36 
	~<¨∑/öë.h
>

37 
	~<as£π.h
>

38 
	~<î∫o.h
>

39 
	~<√tdb.h
>

40 
	~<pﬁl.h
>

41 
	~<√töë/ö.h
>

42 
	~<√töë/t˝.h
>

43 
	~<°dlib.h
>

44 
	~<°rög.h
>

45 
	~<uni°d.h
>

46 
	~"dpif.h
"

47 
	~"√éök.h
"

48 
	~"oÂbuf.h
"

49 
	~"›íÊow/›íÊow-√éök.h
"

50 
	~"›íÊow/›íÊow.h
"

51 
	~"pﬁl-lo›.h
"

52 
	~"sockë-utû.h
"

53 
	~"utû.h
"

54 
	~"vc⁄n-¥ovidî.h
"

56 
	~"vlog.h
"

57 
	#THIS_MODULE
 
VLM_VCONN_NETLINK


	)

59 
	s√éök_vc⁄n


61 
vc⁄n
 
	mvc⁄n
;

62 
dpif
 
	mdp
;

63 
	mdp_idx
;

66 
√éök_vc⁄n
 *

67 
	$√éök_vc⁄n_ˇ°
(
vc⁄n
 *vconn)

69 
	`vc⁄n_as£π_˛ass
(
vc⁄n
, &
√éök_vc⁄n_˛ass
);

70  
	`CONTAINER_OF
(
vc⁄n
, 
√éök_vc⁄n
, vconn);

71 
	}
}

74 
	$√éök_›í
(c⁄° *
«me
, *
suffix
, 
vc⁄n
 **
vc⁄≈
)

76 
√éök_vc⁄n
 *
√éök
;

77 
subs¸ibe
;

78 
dp_idx
;

79 
ªtvÆ
;

81 
subs¸ibe
 = 1;

82 i‡(
	`ssˇnf
(
suffix
, "%d:%d", &
dp_idx
, &
subs¸ibe
) < 1) {

83 
	`oÂ_îr‹
(0, "%s: sy¡axÉº‹", 
«me
);

84  
EAFNOSUPPORT
;

87 
√éök
 = 
	`xmÆloc
( *netlink);

88 
	`vc⁄n_öô
(&
√éök
->
vc⁄n
, &
√éök_vc⁄n_˛ass
, 0, 0, 
«me
, 
åue
);

89 
ªtvÆ
 = 
	`dpif_›í
(
subs¸ibe
 ? 
dp_idx
 : -1, &
√éök
->
dp
);

90 
√éök
->
dp_idx
 = dp_idx;

91 i‡(
ªtvÆ
) {

92 
	`‰ì
(
√éök
);

93 *
vc⁄≈
 = 
NULL
;

94  
ªtvÆ
;

96 *
vc⁄≈
 = &
√éök
->
vc⁄n
;

98 
	}
}

101 
	$√éök_˛o£
(
vc⁄n
 *vconn)

103 
√éök_vc⁄n
 *
√éök
 = 
	`√éök_vc⁄n_ˇ°
(
vc⁄n
);

104 
	`dpif_˛o£
(&
√éök
->
dp
);

105 
	`‰ì
(
√éök
);

106 
	}
}

109 
	$√éök_ªcv
(
vc⁄n
 *vc⁄n, 
oÂbuf
 **
buf„Ω
)

111 
√éök_vc⁄n
 *
√éök
 = 
	`√éök_vc⁄n_ˇ°
(
vc⁄n
);

112  
	`dpif_ªcv_›íÊow
(&
√éök
->
dp
,Çëlök->
dp_idx
, 
buf„Ω
, 
Ál£
);

113 
	}
}

116 
	$√éök_£nd
(
vc⁄n
 *vc⁄n, 
oÂbuf
 *
buf„r
)

118 
√éök_vc⁄n
 *
√éök
 = 
	`√éök_vc⁄n_ˇ°
(
vc⁄n
);

119 
ªtvÆ
 = 
	`dpif_£nd_›íÊow
(&
√éök
->
dp
,Çëlök->
dp_idx
, 
buf„r
);

120 i‡(!
ªtvÆ
) {

121 
	`oÂbuf_dñëe
(
buf„r
);

123  
ªtvÆ
;

124 
	}
}

127 
	$√éök_waô
(
vc⁄n
 *vc⁄n, 
vc⁄n_waô_ty≥
 
waô
)

129 
√éök_vc⁄n
 *
√éök
 = 
	`√éök_vc⁄n_ˇ°
(
vc⁄n
);

130 
evíts
 = 0;

131 
waô
) {

132 
WAIT_CONNECT
:

133 
	`NOT_REACHED
();

135 
WAIT_RECV
:

136 
evíts
 = 
POLLIN
;

139 
WAIT_SEND
:

140 
evíts
 = 0;

144 
	`NOT_REACHED
();

146 
	`∆_sock_waô
(
√éök
->
dp
.
sock
, 
evíts
);

147 
	}
}

149 
vc⁄n_˛ass
 
	g√éök_vc⁄n_˛ass
 = {

151 
√éök_›í
,

152 
√éök_˛o£
,

153 
NULL
,

154 
√éök_ªcv
,

155 
√éök_£nd
,

156 
√éök_waô
,

	@lib/vconn-provider.h

34 #i‚de‡
VCONN_PROVIDER_H


35 
	#VCONN_PROVIDER_H
 1

	)

40 
	~<as£π.h
>

41 
	~<°döt.h
>

42 
	~"oÂ°©.h
"

43 
	~"vc⁄n.h
"

50 
	svc⁄n
 {

51 
vc⁄n_˛ass
 *
	m˛ass
;

52 
	m°©e
;

53 
	mîr‹
;

54 
	mmö_vîsi⁄
;

55 
	mvîsi⁄
;

56 
uöt32_t
 
	mù
;

57 *
	m«me
;

58 
boﬁ
 
	mªc⁄√˘abÀ
;

59 
oÂ°©
 
	moÂs_rcvd
;

60 
oÂ°©
 
	moÂs_£¡
;

63 
vc⁄n_öô
(
vc⁄n
 *, 
vc⁄n_˛ass
 *, 
c⁄√˘_°©us
,

64 
uöt32_t
 
ù
, c⁄° *
«me
, 
boﬁ
 
ªc⁄√˘abÀ
);

65 
ölöe
 
	$vc⁄n_as£π_˛ass
(c⁄° 
vc⁄n
 *vconn,

66 c⁄° 
vc⁄n_˛ass
 *
˛ass
)

68 
	`as£π
(
vc⁄n
->
˛ass
 == class);

69 
	}
}

71 
	svc⁄n_˛ass
 {

73 c⁄° *
	m«me
;

88 (*
	m›í
)(c⁄° *
	m«me
, *
	msuffix
, 
vc⁄n
 **
	mvc⁄≈
);

91 (*
	m˛o£
)(
vc⁄n
 *
	mvc⁄n
);

100 (*
	mc⁄√˘
)(
vc⁄n
 *
	mvc⁄n
);

112 (*
	mªcv
)(
vc⁄n
 *
	mvc⁄n
, 
oÂbuf
 **
	mmsgp
);

124 (*
	m£nd
)(
vc⁄n
 *
	mvc⁄n
, 
oÂbuf
 *
	mmsg
);

128 (*
	mwaô
)(
vc⁄n
 *
	mvc⁄n
, 
vc⁄n_waô_ty≥
 
	mty≥
);

134 
	spvc⁄n
 {

135 
pvc⁄n_˛ass
 *
	m˛ass
;

136 *
	m«me
;

139 
pvc⁄n_öô
(
pvc⁄n
 *, 
pvc⁄n_˛ass
 *, c⁄° *
«me
);

140 
ölöe
 
	$pvc⁄n_as£π_˛ass
(c⁄° 
pvc⁄n
 *pvconn,

141 c⁄° 
pvc⁄n_˛ass
 *
˛ass
)

143 
	`as£π
(
pvc⁄n
->
˛ass
 == class);

144 
	}
}

146 
	spvc⁄n_˛ass
 {

148 c⁄° *
	m«me
;

163 (*
	mli°í
)(c⁄° *
	m«me
, *
	msuffix
, 
pvc⁄n
 **
	mpvc⁄≈
);

166 (*
	m˛o£
)(
pvc⁄n
 *
	mpvc⁄n
);

174 (*
	mac˚±
)(
pvc⁄n
 *
	mpvc⁄n
, 
vc⁄n
 **
	m√w_vc⁄≈
);

178 (*
	mwaô
)(
pvc⁄n
 *
	mpvc⁄n
);

182 
vc⁄n_˛ass
 
t˝_vc⁄n_˛ass
;

183 
pvc⁄n_˛ass
 
±˝_pvc⁄n_˛ass
;

184 
vc⁄n_˛ass
 
unix_vc⁄n_˛ass
;

185 
pvc⁄n_˛ass
 
punix_pvc⁄n_˛ass
;

186 #ifde‡
HAVE_OPENSSL


187 
vc⁄n_˛ass
 
s¶_vc⁄n_˛ass
;

188 
pvc⁄n_˛ass
 
ps¶_pvc⁄n_˛ass
;

190 #ifde‡
HAVE_NETLINK


191 
vc⁄n_˛ass
 
√éök_vc⁄n_˛ass
;

	@lib/vconn-ssl.c

34 
	~<c⁄fig.h
>

35 
	~"vc⁄n-s¶.h
"

36 
	~"dh∑øms.h
"

37 
	~<as£π.h
>

38 
	~<˘y≥.h
>

39 
	~<î∫o.h
>

40 
	~<öây≥s.h
>

41 
	~<°rög.h
>

42 
	~<√töë/t˝.h
>

43 
	~<›ís¶/îr.h
>

44 
	~<›ís¶/s¶.h
>

45 
	~<›ís¶/x509v3.h
>

46 
	~<pﬁl.h
>

47 
	~<sys/f˙é.h
>

48 
	~<sys/°©.h
>

49 
	~<uni°d.h
>

50 
	~"dy«mic-°rög.h
"

51 
	~"Àak-checkî.h
"

52 
	~"oÂbuf.h
"

53 
	~"›íÊow/›íÊow.h
"

54 
	~"∑ckës.h
"

55 
	~"pﬁl-lo›.h
"

56 
	~"sockë-utû.h
"

57 
	~"sockë-utû.h
"

58 
	~"utû.h
"

59 
	~"vc⁄n-¥ovidî.h
"

60 
	~"vc⁄n.h
"

62 
	~"vlog.h
"

63 
	#THIS_MODULE
 
VLM_vc⁄n_s¶


	)

67 
	es¶_°©e
 {

68 
	mSTATE_TCP_CONNECTING
,

69 
	mSTATE_SSL_CONNECTING


72 
	e£ssi⁄_ty≥
 {

73 
	mCLIENT
,

74 
	mSERVER


77 
	ss¶_vc⁄n


79 
vc⁄n
 
	mvc⁄n
;

80 
s¶_°©e
 
	m°©e
;

81 
	mc⁄√˘_îr‹
;

82 
£ssi⁄_ty≥
 
	mty≥
;

83 
	mfd
;

84 
SSL
 *
	ms¶
;

85 
oÂbuf
 *
	mrxbuf
;

86 
oÂbuf
 *
	mtxbuf
;

87 
pﬁl_waôî
 *
	mtx_waôî
;

145 
	mrx_w™t
, 
	mtx_w™t
;

149 
SSL_CTX
 *
	g˘x
;

152 
boﬁ
 
	ghas_¥iv©e_key
, 
	ghas_˚πifiˇã
, 
	ghas_ˇ_˚π
;

163 
boﬁ
 
	gboŸ°øp_ˇ_˚π
;

164 *
	gˇ_˚π_fûe
;

168 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(10, 25);

170 
s¶_öô
();

171 
do_s¶_öô
();

172 
boﬁ
 
s¶_w™ts_io
(
s¶_îr‹
);

173 
s¶_˛o£
(
vc⁄n
 *);

174 
s¶_˛ór_txbuf
(
s¶_vc⁄n
 *);

175 
öãΩªt_s¶_îr‹
(c⁄° *
fun˘i⁄
, 
ªt
, 
îr‹
,

176 *
w™t
);

177 
s¶_tx_pﬁl_ˇŒback
(
fd
, 
ªvíts
, *
vc⁄n_
);

178 
DH
 *
tmp_dh_ˇŒback
(
SSL
 *
s¶
, 
is_exp‹t
 
UNUSED
, 
keyÀngth
);

179 
log_ˇ_˚π
(c⁄° *
fûe_«me
, 
X509
 *
˚π
);

182 
	$w™t_to_pﬁl_evíts
(
w™t
)

184 
w™t
) {

185 
SSL_NOTHING
:

186 
	`NOT_REACHED
();

188 
SSL_READING
:

189  
POLLIN
;

191 
SSL_WRITING
:

192  
POLLOUT
;

195 
	`NOT_REACHED
();

197 
	}
}

200 
	$√w_s¶_vc⁄n
(c⁄° *
«me
, 
fd
, 
£ssi⁄_ty≥
 
ty≥
,

201 
s¶_°©e
 
°©e
, c⁄° 
sockaddr_ö
 *
sö
,

202 
vc⁄n
 **
vc⁄≈
)

204 
s¶_vc⁄n
 *
s¶v
;

205 
SSL
 *
s¶
 = 
NULL
;

206 
⁄
 = 1;

207 
ªtvÆ
;

210 i‡(!
has_¥iv©e_key
) {

211 
	`VLOG_ERR
("Private key must be configuredÅo use SSL");

212 
îr‹
;

214 i‡(!
has_˚πifiˇã
) {

215 
	`VLOG_ERR
("Certificate must be configuredÅo use SSL");

216 
îr‹
;

218 i‡(!
has_ˇ_˚π
 && !
boŸ°øp_ˇ_˚π
) {

219 
	`VLOG_ERR
("CA certificate must be configuredÅo use SSL");

220 
îr‹
;

222 i‡(!
	`SSL_CTX_check_¥iv©e_key
(
˘x
)) {

223 
	`VLOG_ERR
("Private key doesÇot match certificateÖublic key: %s",

224 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

225 
îr‹
;

229 
ªtvÆ
 = 
	`£tsock›t
(
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
, &
⁄
,  on);

230 i‡(
ªtvÆ
) {

231 
	`VLOG_ERR
("%s: sësock›t(TCP_NODELAY): %s", 
«me
, 
	`°ªº‹
(
î∫o
));

232 
	`˛o£
(
fd
);

233  
î∫o
;

237 
s¶
 = 
	`SSL_√w
(
˘x
);

238 i‡(
s¶
 =
NULL
) {

239 
	`VLOG_ERR
("SSL_√w: %s", 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

240 
	`˛o£
(
fd
);

241  
ENOPROTOOPT
;

243 i‡(
	`SSL_£t_fd
(
s¶
, 
fd
) == 0) {

244 
	`VLOG_ERR
("SSL_£t_fd: %s", 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

245 
îr‹
;

247 i‡(
boŸ°øp_ˇ_˚π
 && 
ty≥
 =
CLIENT
) {

248 
	`SSL_£t_vîify
(
s¶
, 
SSL_VERIFY_NONE
, 
NULL
);

252 
s¶v
 = 
	`xmÆloc
( *sslv);

253 
	`vc⁄n_öô
(&
s¶v
->
vc⁄n
, &
s¶_vc⁄n_˛ass
, 
EAGAIN
, 
sö
->
sö_addr
.
s_addr
,

254 
«me
, 
åue
);

255 
s¶v
->
°©e
 = state;

256 
s¶v
->
ty≥
 =Åype;

257 
s¶v
->
fd
 = fd;

258 
s¶v
->
s¶
 = ssl;

259 
s¶v
->
rxbuf
 = 
NULL
;

260 
s¶v
->
txbuf
 = 
NULL
;

261 
s¶v
->
tx_waôî
 = 
NULL
;

262 
s¶v
->
rx_w™t
 = s¶v->
tx_w™t
 = 
SSL_NOTHING
;

263 *
vc⁄≈
 = &
s¶v
->
vc⁄n
;

266 
îr‹
:

267 i‡(
s¶
) {

268 
	`SSL_‰ì
(
s¶
);

270 
	`˛o£
(
fd
);

271  
ENOPROTOOPT
;

272 
	}
}

274 
s¶_vc⁄n
 *

275 
	$s¶_vc⁄n_ˇ°
(
vc⁄n
 *vconn)

277 
	`vc⁄n_as£π_˛ass
(
vc⁄n
, &
s¶_vc⁄n_˛ass
);

278  
	`CONTAINER_OF
(
vc⁄n
, 
s¶_vc⁄n
, vconn);

279 
	}
}

282 
	$s¶_›í
(c⁄° *
«me
, *
suffix
, 
vc⁄n
 **
vc⁄≈
)

284 *
ßve_±r
, *
ho°_«me
, *
p‹t_°rög
;

285 
sockaddr_ö
 
sö
;

286 
ªtvÆ
;

287 
fd
;

289 
ªtvÆ
 = 
	`s¶_öô
();

290 i‡(
ªtvÆ
) {

291  
ªtvÆ
;

298 
ho°_«me
 = 
	`°πok_r
(
suffix
, "::", &
ßve_±r
);

299 
p‹t_°rög
 = 
	`°πok_r
(
NULL
, "::", &
ßve_±r
);

300 i‡(!
ho°_«me
) {

301 
	`oÂ_îr‹
(0, "%s: badÖì∏«mêf‹m©", 
«me
);

302  
EAFNOSUPPORT
;

305 
	`mem£t
(&
sö
, 0,  sin);

306 
sö
.
sö_Ámûy
 = 
AF_INET
;

307 i‡(
	`lookup_ù
(
ho°_«me
, &
sö
.
sö_addr
)) {

308  
ENOENT
;

310 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t_°rög
 && *p‹t_°rög ? 
	`©oi
(port_string)

311 : 
OFP_SSL_PORT
);

314 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

315 i‡(
fd
 < 0) {

316 
	`VLOG_ERR
("%s: sockë: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

317  
î∫o
;

319 
ªtvÆ
 = 
	`£t_n⁄blockög
(
fd
);

320 i‡(
ªtvÆ
) {

321 
	`˛o£
(
fd
);

322  
ªtvÆ
;

326 
ªtvÆ
 = 
	`c⁄√˘
(
fd
, (
sockaddr
 *Ë&
sö
,  sin);

327 i‡(
ªtvÆ
 < 0) {

328 i‡(
î∫o
 =
EINPROGRESS
) {

329  
	`√w_s¶_vc⁄n
(
«me
, 
fd
, 
CLIENT
, 
STATE_TCP_CONNECTING
,

330 &
sö
, 
vc⁄≈
);

332 
îr‹
 = 
î∫o
;

333 
	`VLOG_ERR
("%s: c⁄√˘: %s", 
«me
, 
	`°ªº‹
(
îr‹
));

334 
	`˛o£
(
fd
);

335  
îr‹
;

338  
	`√w_s¶_vc⁄n
(
«me
, 
fd
, 
CLIENT
, 
STATE_SSL_CONNECTING
,

339 &
sö
, 
vc⁄≈
);

341 
	}
}

344 
	$do_ˇ_˚π_boŸ°øp
(
vc⁄n
 *vconn)

346 
s¶_vc⁄n
 *
s¶v
 = 
	`s¶_vc⁄n_ˇ°
(
vc⁄n
);

347 
	`STACK_OF
(
X509
Ë*
chaö
;

348 
X509
 *
ˇ_˚π
;

349 
FILE
 *
fûe
;

350 
îr‹
;

351 
fd
;

353 
chaö
 = 
	`SSL_gë_≥î_˚π_chaö
(
s¶v
->
s¶
);

354 i‡(!
chaö
 || !
	`sk_X509_num
(chain)) {

355 
	`VLOG_ERR
("couldÇot bootstrap CA cert:Ço certificateÖresented by "

357  
EPROTO
;

359 
ˇ_˚π
 = 
	`sk_X509_vÆue
(
chaö
, 
	`sk_X509_num
(chain) - 1);

363 
îr‹
 = 
	`X509_check_issued
(
ˇ_˚π
, ca_cert);

364 i‡(
îr‹
) {

365 
	`VLOG_ERR
("couldÇot bootstrap CA cert: obtained certificate is "

367 
	`X509_vîify_˚π_îr‹_°rög
(
îr‹
));

368 i‡(
	`sk_X509_num
(
chaö
) < 2) {

369 
	`VLOG_ERR
("only one certificate wasÑeceived, soÖrobablyÅheÖeer "

372  
EPROTO
;

375 
fd
 = 
	`›í
(
ˇ_˚π_fûe
, 
O_CREAT
 | 
O_EXCL
 | 
O_WRONLY
, 0444);

376 i‡(
fd
 < 0) {

377 
	`VLOG_ERR
("couldÇot bootstrap CA cert: creating %s failed: %s",

378 
ˇ_˚π_fûe
, 
	`°ªº‹
(
î∫o
));

379  
î∫o
;

382 
fûe
 = 
	`fd›í
(
fd
, "w");

383 i‡(!
fûe
) {

384 
îr‹
 = 
î∫o
;

385 
	`VLOG_ERR
("couldÇot bootstrap CA cert: fdopen failed: %s",

386 
	`°ªº‹
(
îr‹
));

387 
	`u∆ök
(
ˇ_˚π_fûe
);

388  
îr‹
;

391 i‡(!
	`PEM_wrôe_X509
(
fûe
, 
ˇ_˚π
)) {

392 
	`VLOG_ERR
("couldÇot bootstrap CA cert: PEM_write_X509Åo %s failed: "

393 "%s", 
ˇ_˚π_fûe
, 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

394 
	`f˛o£
(
fûe
);

395 
	`u∆ök
(
ˇ_˚π_fûe
);

396  
EIO
;

399 i‡(
	`f˛o£
(
fûe
)) {

400 
îr‹
 = 
î∫o
;

401 
	`VLOG_ERR
("couldÇot bootstrap CA cert: writing %s failed: %s",

402 
ˇ_˚π_fûe
, 
	`°ªº‹
(
îr‹
));

403 
	`u∆ök
(
ˇ_˚π_fûe
);

404  
îr‹
;

407 
	`VLOG_INFO
("suc˚ssfuŒy boŸ°øµed CA cîàtÿ%s", 
ˇ_˚π_fûe
);

408 
	`log_ˇ_˚π
(
ˇ_˚π_fûe
, 
ˇ_˚π
);

409 
boŸ°øp_ˇ_˚π
 = 
Ál£
;

410 
has_ˇ_˚π
 = 
åue
;

413 
	`SSL_CTX_add_˛õ¡_CA
(
˘x
, 
ˇ_˚π
);

417 
ˇ_˚π
 = 
	`X509_dup
(ca_cert);

418 i‡(!
ˇ_˚π
) {

419 
	`out_of_mem‹y
();

421 i‡(
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
˘x
, 
ˇ_˚π_fûe
, 
NULL
) != 1) {

422 
	`VLOG_ERR
("SSL_CTX_load_verify_locations: %s",

423 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

424  
EPROTO
;

426 
	`VLOG_INFO
("killing successful connectionÅoÑetry using CA cert");

427  
EPROTO
;

428 
	}
}

431 
	$s¶_c⁄√˘
(
vc⁄n
 *vconn)

433 
s¶_vc⁄n
 *
s¶v
 = 
	`s¶_vc⁄n_ˇ°
(
vc⁄n
);

434 
ªtvÆ
;

436 
s¶v
->
°©e
) {

437 
STATE_TCP_CONNECTING
:

438 
ªtvÆ
 = 
	`check_c⁄√˘i⁄_com∂ëi⁄
(
s¶v
->
fd
);

439 i‡(
ªtvÆ
) {

440  
ªtvÆ
;

442 
s¶v
->
°©e
 = 
STATE_SSL_CONNECTING
;

445 
STATE_SSL_CONNECTING
:

446 
ªtvÆ
 = (
s¶v
->
ty≥
 =
CLIENT


447 ? 
	`SSL_c⁄√˘
(
s¶v
->
s¶
Ë: 
	`SSL_ac˚±
(sslv->ssl));

448 i‡(
ªtvÆ
 != 1) {

449 
îr‹
 = 
	`SSL_gë_îr‹
(
s¶v
->
s¶
, 
ªtvÆ
);

450 i‡(
ªtvÆ
 < 0 && 
	`s¶_w™ts_io
(
îr‹
)) {

451  
EAGAIN
;

453 
unu£d
;

454 
	`öãΩªt_s¶_îr‹
((
s¶v
->
ty≥
 =
CLIENT
 ? "SSL_connect"

455 : "SSL_ac˚±"), 
ªtvÆ
, 
îr‹
, &
unu£d
);

456 
	`shutdown
(
s¶v
->
fd
, 
SHUT_RDWR
);

457  
EPROTO
;

459 } i‡(
boŸ°øp_ˇ_˚π
) {

460  
	`do_ˇ_˚π_boŸ°øp
(
vc⁄n
);

461 } i‡((
	`SSL_gë_vîify_mode
(
s¶v
->
s¶
)

462 & (
SSL_VERIFY_NONE
 | 
SSL_VERIFY_PEER
))

463 !
SSL_VERIFY_PEER
) {

472 
	`VLOG_ERR
("rejecting SSL connection during bootstrapÑace window");

473  
EPROTO
;

479 
	`NOT_REACHED
();

480 
	}
}

483 
	$s¶_˛o£
(
vc⁄n
 *vconn)

485 
s¶_vc⁄n
 *
s¶v
 = 
	`s¶_vc⁄n_ˇ°
(
vc⁄n
);

486 
	`pﬁl_ˇn˚l
(
s¶v
->
tx_waôî
);

487 
	`s¶_˛ór_txbuf
(
s¶v
);

488 
	`oÂbuf_dñëe
(
s¶v
->
rxbuf
);

489 
	`SSL_‰ì
(
s¶v
->
s¶
);

490 
	`˛o£
(
s¶v
->
fd
);

491 
	`‰ì
(
s¶v
);

492 
	}
}

495 
	$öãΩªt_s¶_îr‹
(c⁄° *
fun˘i⁄
, 
ªt
, 
îr‹
,

496 *
w™t
)

498 *
w™t
 = 
SSL_NOTHING
;

500 
îr‹
) {

501 
SSL_ERROR_NONE
:

502 
	`VLOG_ERR_RL
(&
æ
, "%s: u√x≥˘ed SSL_ERROR_NONE", 
fun˘i⁄
);

505 
SSL_ERROR_ZERO_RETURN
:

506 
	`VLOG_ERR_RL
(&
æ
, "%s: u√x≥˘ed SSL_ERROR_ZERO_RETURN", 
fun˘i⁄
);

509 
SSL_ERROR_WANT_READ
:

510 *
w™t
 = 
SSL_READING
;

511  
EAGAIN
;

513 
SSL_ERROR_WANT_WRITE
:

514 *
w™t
 = 
SSL_WRITING
;

515  
EAGAIN
;

517 
SSL_ERROR_WANT_CONNECT
:

518 
	`VLOG_ERR_RL
(&
æ
, "%s: u√x≥˘ed SSL_ERROR_WANT_CONNECT", 
fun˘i⁄
);

521 
SSL_ERROR_WANT_ACCEPT
:

522 
	`VLOG_ERR_RL
(&
æ
, "%s: u√x≥˘ed SSL_ERROR_WANT_ACCEPT", 
fun˘i⁄
);

525 
SSL_ERROR_WANT_X509_LOOKUP
:

526 
	`VLOG_ERR_RL
(&
æ
, "%s: unexpected SSL_ERROR_WANT_X509_LOOKUP",

527 
fun˘i⁄
);

530 
SSL_ERROR_SYSCALL
: {

531 
queued_îr‹
 = 
	`ERR_gë_îr‹
();

532 i‡(
queued_îr‹
 == 0) {

533 i‡(
ªt
 < 0) {

534 
°©us
 = 
î∫o
;

535 
	`VLOG_WARN_RL
(&
æ
, "%s: systemÉrror (%s)",

536 
fun˘i⁄
, 
	`°ªº‹
(
°©us
));

537  
°©us
;

539 
	`VLOG_WARN_RL
(&
æ
, "%s: unexpected SSL connection close",

540 
fun˘i⁄
);

541  
EPROTO
;

544 
	`VLOG_WARN_RL
(&
æ
, "%s: %s",

545 
fun˘i⁄
, 
	`ERR_îr‹_°rög
(
queued_îr‹
, 
NULL
));

550 
SSL_ERROR_SSL
: {

551 
queued_îr‹
 = 
	`ERR_gë_îr‹
();

552 i‡(
queued_îr‹
 != 0) {

553 
	`VLOG_WARN_RL
(&
æ
, "%s: %s",

554 
fun˘i⁄
, 
	`ERR_îr‹_°rög
(
queued_îr‹
, 
NULL
));

556 
	`VLOG_ERR_RL
(&
æ
, "%s: SSL_ERROR_SSL without queuedÉrror",

557 
fun˘i⁄
);

563 
	`VLOG_ERR_RL
(&
æ
, "%s: bad SSLÉº‹ codê%d", 
fun˘i⁄
, 
îr‹
);

566  
EIO
;

567 
	}
}

570 
	$s¶_ªcv
(
vc⁄n
 *vc⁄n, 
oÂbuf
 **
buf„Ω
)

572 
s¶_vc⁄n
 *
s¶v
 = 
	`s¶_vc⁄n_ˇ°
(
vc⁄n
);

573 
oÂbuf
 *
rx
;

574 
size_t
 
w™t_byãs
;

575 
ﬁd_°©e
;

576 
ssize_t
 
ªt
;

578 i‡(
s¶v
->
rxbuf
 =
NULL
) {

579 
s¶v
->
rxbuf
 = 
	`oÂbuf_√w
(1564);

581 
rx
 = 
s¶v
->
rxbuf
;

583 
agaö
:

584 i‡((
oÂ_hódî
Ë> 
rx
->
size
) {

585 
w™t_byãs
 = (
oÂ_hódî
Ë- 
rx
->
size
;

587 
oÂ_hódî
 *
oh
 = 
rx
->
d©a
;

588 
size_t
 
Àngth
 = 
	`¡ohs
(
oh
->length);

589 i‡(
Àngth
 < (
oÂ_hódî
)) {

590 
	`VLOG_ERR_RL
(&
æ
, "receivedÅoo-short ofp_header (%zu bytes)",

591 
Àngth
);

592  
EPROTO
;

594 
w™t_byãs
 = 
Àngth
 - 
rx
->
size
;

595 i‡(!
w™t_byãs
) {

596 *
buf„Ω
 = 
rx
;

597 
s¶v
->
rxbuf
 = 
NULL
;

601 
	`oÂbuf_¥óŒoc_èûroom
(
rx
, 
w™t_byãs
);

604 
	`as£π
(
w™t_byãs
 > 0);

606 
ﬁd_°©e
 = 
	`SSL_gë_°©e
(
s¶v
->
s¶
);

607 
ªt
 = 
	`SSL_ªad
(
s¶v
->
s¶
, 
	`oÂbuf_èû
(
rx
), 
w™t_byãs
);

608 i‡(
ﬁd_°©e
 !
	`SSL_gë_°©e
(
s¶v
->
s¶
)) {

609 
s¶v
->
tx_w™t
 = 
SSL_NOTHING
;

610 i‡(
s¶v
->
tx_waôî
) {

611 
	`pﬁl_ˇn˚l
(
s¶v
->
tx_waôî
);

612 
	`s¶_tx_pﬁl_ˇŒback
(
s¶v
->
fd
, 
POLLIN
, 
vc⁄n
);

615 
s¶v
->
rx_w™t
 = 
SSL_NOTHING
;

617 i‡(
ªt
 > 0) {

618 
rx
->
size
 +
ªt
;

619 i‡(
ªt
 =
w™t_byãs
) {

620 i‡(
rx
->
size
 > (
oÂ_hódî
)) {

621 *
buf„Ω
 = 
rx
;

622 
s¶v
->
rxbuf
 = 
NULL
;

625 
agaö
;

628  
EAGAIN
;

630 
îr‹
 = 
	`SSL_gë_îr‹
(
s¶v
->
s¶
, 
ªt
);

631 i‡(
îr‹
 =
SSL_ERROR_ZERO_RETURN
) {

633 i‡(
rx
->
size
) {

634 
	`VLOG_WARN_RL
(&
æ
, "SSL_read: unexpected connection close");

635  
EPROTO
;

637  
EOF
;

640  
	`öãΩªt_s¶_îr‹
("SSL_ªad", 
ªt
, 
îr‹
, &
s¶v
->
rx_w™t
);

643 
	}
}

646 
	$s¶_˛ór_txbuf
(
s¶_vc⁄n
 *
s¶v
)

648 
	`oÂbuf_dñëe
(
s¶v
->
txbuf
);

649 
s¶v
->
txbuf
 = 
NULL
;

650 
s¶v
->
tx_waôî
 = 
NULL
;

651 
	}
}

654 
	$s¶_ªgi°î_tx_waôî
(
vc⁄n
 *vconn)

656 
s¶_vc⁄n
 *
s¶v
 = 
	`s¶_vc⁄n_ˇ°
(
vc⁄n
);

657 
s¶v
->
tx_waôî
 = 
	`pﬁl_fd_ˇŒback
(s¶v->
fd
,

658 
	`w™t_to_pﬁl_evíts
(
s¶v
->
tx_w™t
),

659 
s¶_tx_pﬁl_ˇŒback
, 
vc⁄n
);

660 
	}
}

663 
	$s¶_do_tx
(
vc⁄n
 *vconn)

665 
s¶_vc⁄n
 *
s¶v
 = 
	`s¶_vc⁄n_ˇ°
(
vc⁄n
);

668 
ﬁd_°©e
 = 
	`SSL_gë_°©e
(
s¶v
->
s¶
);

669 
ªt
 = 
	`SSL_wrôe
(
s¶v
->
s¶
, s¶v->
txbuf
->
d©a
, s¶v->txbuf->
size
);

670 i‡(
ﬁd_°©e
 !
	`SSL_gë_°©e
(
s¶v
->
s¶
)) {

671 
s¶v
->
rx_w™t
 = 
SSL_NOTHING
;

673 
s¶v
->
tx_w™t
 = 
SSL_NOTHING
;

674 i‡(
ªt
 > 0) {

675 
	`oÂbuf_puŒ
(
s¶v
->
txbuf
, 
ªt
);

676 i‡(
s¶v
->
txbuf
->
size
 == 0) {

680 
s¶_îr‹
 = 
	`SSL_gë_îr‹
(
s¶v
->
s¶
, 
ªt
);

681 i‡(
s¶_îr‹
 =
SSL_ERROR_ZERO_RETURN
) {

682 
	`VLOG_WARN_RL
(&
æ
, "SSL_write: connection closed");

683  
EPIPE
;

685  
	`öãΩªt_s¶_îr‹
("SSL_wrôe", 
ªt
, 
s¶_îr‹
,

686 &
s¶v
->
tx_w™t
);

690 
	}
}

693 
	$s¶_tx_pﬁl_ˇŒback
(
fd
 
UNUSED
, 
ªvíts
 UNUSED, *
vc⁄n_
)

695 
vc⁄n
 *vc⁄¿
vc⁄n_
;

696 
s¶_vc⁄n
 *
s¶v
 = 
	`s¶_vc⁄n_ˇ°
(
vc⁄n
);

697 
îr‹
 = 
	`s¶_do_tx
(
vc⁄n
);

698 i‡(
îr‹
 !
EAGAIN
) {

699 
	`s¶_˛ór_txbuf
(
s¶v
);

701 
	`s¶_ªgi°î_tx_waôî
(
vc⁄n
);

703 
	}
}

706 
	$s¶_£nd
(
vc⁄n
 *vc⁄n, 
oÂbuf
 *
buf„r
)

708 
s¶_vc⁄n
 *
s¶v
 = 
	`s¶_vc⁄n_ˇ°
(
vc⁄n
);

710 i‡(
s¶v
->
txbuf
) {

711  
EAGAIN
;

713 
îr‹
;

715 
s¶v
->
txbuf
 = 
buf„r
;

716 
îr‹
 = 
	`s¶_do_tx
(
vc⁄n
);

717 
îr‹
) {

719 
	`s¶_˛ór_txbuf
(
s¶v
);

721 
EAGAIN
:

722 
	`Àak_checkî_˛aim
(
buf„r
);

723 
	`s¶_ªgi°î_tx_waôî
(
vc⁄n
);

726 
s¶v
->
txbuf
 = 
NULL
;

727  
îr‹
;

730 
	}
}

733 
	$s¶_waô
(
vc⁄n
 *vc⁄n, 
vc⁄n_waô_ty≥
 
waô
)

735 
s¶_vc⁄n
 *
s¶v
 = 
	`s¶_vc⁄n_ˇ°
(
vc⁄n
);

737 
waô
) {

738 
WAIT_CONNECT
:

739 i‡(
	`vc⁄n_c⁄√˘
(
vc⁄n
Ë!
EAGAIN
) {

740 
	`pﬁl_immedüã_wake
();

742 
s¶v
->
°©e
) {

743 
STATE_TCP_CONNECTING
:

744 
	`pﬁl_fd_waô
(
s¶v
->
fd
, 
POLLOUT
);

747 
STATE_SSL_CONNECTING
:

750 
	`pﬁl_fd_waô
(
s¶v
->
fd
,

751 
	`w™t_to_pﬁl_evíts
(
	`SSL_w™t
(
s¶v
->
s¶
)));

755 
	`NOT_REACHED
();

760 
WAIT_RECV
:

761 i‡(
s¶v
->
rx_w™t
 !
SSL_NOTHING
) {

762 
	`pﬁl_fd_waô
(
s¶v
->
fd
, 
	`w™t_to_pﬁl_evíts
(s¶v->
rx_w™t
));

764 
	`pﬁl_immedüã_wake
();

768 
WAIT_SEND
:

769 i‡(!
s¶v
->
txbuf
) {

771 
	`pﬁl_immedüã_wake
();

778 
	`NOT_REACHED
();

780 
	}
}

782 
vc⁄n_˛ass
 
	gs¶_vc⁄n_˛ass
 = {

784 
s¶_›í
,

785 
s¶_˛o£
,

786 
s¶_c⁄√˘
,

787 
s¶_ªcv
,

788 
s¶_£nd
,

789 
s¶_waô
,

794 
	sps¶_pvc⁄n


796 
pvc⁄n
 
	mpvc⁄n
;

797 
	mfd
;

800 
pvc⁄n_˛ass
 
	gps¶_pvc⁄n_˛ass
;

802 
ps¶_pvc⁄n
 *

803 
	$ps¶_pvc⁄n_ˇ°
(
pvc⁄n
 *pvconn)

805 
	`pvc⁄n_as£π_˛ass
(
pvc⁄n
, &
ps¶_pvc⁄n_˛ass
);

806  
	`CONTAINER_OF
(
pvc⁄n
, 
ps¶_pvc⁄n
,Övconn);

807 
	}
}

810 
	$ps¶_›í
(c⁄° *
«me
, *
suffix
, 
pvc⁄n
 **
pvc⁄≈
)

812 
sockaddr_ö
 
sö
;

813 
ps¶_pvc⁄n
 *
ps¶
;

814 
ªtvÆ
;

815 
fd
;

816 
yes
 = 1;

818 
ªtvÆ
 = 
	`s¶_öô
();

819 i‡(
ªtvÆ
) {

820  
ªtvÆ
;

824 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

825 i‡(
fd
 < 0) {

826 
îr‹
 = 
î∫o
;

827 
	`VLOG_ERR
("%s: sockë: %s", 
«me
, 
	`°ªº‹
(
îr‹
));

828  
îr‹
;

831 i‡(
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
yes
,  yes) < 0) {

832 
îr‹
 = 
î∫o
;

833 
	`VLOG_ERR
("%s: sësock›t(SO_REUSEADDR): %s", 
«me
, 
	`°ªº‹
(
î∫o
));

834  
îr‹
;

837 
	`mem£t
(&
sö
, 0,  sin);

838 
sö
.
sö_Ámûy
 = 
AF_INET
;

839 
sö
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

840 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
	`©oi
(
suffix
Ë?átoi(suffixË: 
OFP_SSL_PORT
);

841 
ªtvÆ
 = 
	`böd
(
fd
, (
sockaddr
 *Ë&
sö
,  sin);

842 i‡(
ªtvÆ
 < 0) {

843 
îr‹
 = 
î∫o
;

844 
	`VLOG_ERR
("%s: böd: %s", 
«me
, 
	`°ªº‹
(
îr‹
));

845 
	`˛o£
(
fd
);

846  
îr‹
;

849 
ªtvÆ
 = 
	`li°í
(
fd
, 10);

850 i‡(
ªtvÆ
 < 0) {

851 
îr‹
 = 
î∫o
;

852 
	`VLOG_ERR
("%s:Üi°í: %s", 
«me
, 
	`°ªº‹
(
îr‹
));

853 
	`˛o£
(
fd
);

854  
îr‹
;

857 
ªtvÆ
 = 
	`£t_n⁄blockög
(
fd
);

858 i‡(
ªtvÆ
) {

859 
	`˛o£
(
fd
);

860  
ªtvÆ
;

863 
ps¶
 = 
	`xmÆloc
( *pssl);

864 
	`pvc⁄n_öô
(&
ps¶
->
pvc⁄n
, &
ps¶_pvc⁄n_˛ass
, 
«me
);

865 
ps¶
->
fd
 = fd;

866 *
pvc⁄≈
 = &
ps¶
->
pvc⁄n
;

868 
	}
}

871 
	$ps¶_˛o£
(
pvc⁄n
 *pvconn)

873 
ps¶_pvc⁄n
 *
ps¶
 = 
	`ps¶_pvc⁄n_ˇ°
(
pvc⁄n
);

874 
	`˛o£
(
ps¶
->
fd
);

875 
	`‰ì
(
ps¶
);

876 
	}
}

879 
	$ps¶_ac˚±
(
pvc⁄n
 *pvc⁄n, 
vc⁄n
 **
√w_vc⁄≈
)

881 
ps¶_pvc⁄n
 *
ps¶
 = 
	`ps¶_pvc⁄n_ˇ°
(
pvc⁄n
);

882 
sockaddr_ö
 
sö
;

883 
sockÀn_t
 
sö_Àn
 =  
sö
;

884 
«me
[128];

885 
√w_fd
;

886 
îr‹
;

888 
√w_fd
 = 
	`ac˚±
(
ps¶
->
fd
, &
sö
, &
sö_Àn
);

889 i‡(
√w_fd
 < 0) {

890 
îr‹
 = 
î∫o
;

891 i‡(
îr‹
 !
EAGAIN
) {

892 
	`VLOG_DBG_RL
(&
æ
, "ac˚±: %s", 
	`°ªº‹
(
îr‹
));

894  
îr‹
;

897 
îr‹
 = 
	`£t_n⁄blockög
(
√w_fd
);

898 i‡(
îr‹
) {

899 
	`˛o£
(
√w_fd
);

900  
îr‹
;

903 
	`•rötf
(
«me
, "s¶:"
IP_FMT
, 
	`IP_ARGS
(&
sö
.
sö_addr
));

904 i‡(
sö
.
sö_p‹t
 !
	`ht⁄s
(
OFP_SSL_PORT
)) {

905 
	`•rötf
(
	`°rchr
(
«me
, '\0'), ":%"
PRIu16
, 
	`¡ohs
(
sö
.
sö_p‹t
));

907  
	`√w_s¶_vc⁄n
(
«me
, 
√w_fd
, 
SERVER
, 
STATE_SSL_CONNECTING
, &
sö
,

908 
√w_vc⁄≈
);

909 
	}
}

912 
	$ps¶_waô
(
pvc⁄n
 *pvconn)

914 
ps¶_pvc⁄n
 *
ps¶
 = 
	`ps¶_pvc⁄n_ˇ°
(
pvc⁄n
);

915 
	`pﬁl_fd_waô
(
ps¶
->
fd
, 
POLLIN
);

916 
	}
}

918 
pvc⁄n_˛ass
 
	gps¶_pvc⁄n_˛ass
 = {

920 
ps¶_›í
,

921 
ps¶_˛o£
,

922 
ps¶_ac˚±
,

923 
ps¶_waô
,

931 
boﬁ


932 
	$s¶_w™ts_io
(
s¶_îr‹
)

934  (
s¶_îr‹
 =
SSL_ERROR_WANT_WRITE


935 || 
s¶_îr‹
 =
SSL_ERROR_WANT_READ
);

936 
	}
}

939 
	$s¶_öô
()

941 
öô_°©us
 = -1;

942 i‡(
öô_°©us
 < 0) {

943 
öô_°©us
 = 
	`do_s¶_öô
();

944 
	`as£π
(
öô_°©us
 >= 0);

946  
öô_°©us
;

947 
	}
}

950 
	$do_s¶_öô
()

952 
SSL_METHOD
 *
mëhod
;

954 
	`SSL_libøry_öô
();

955 
	`SSL_lﬂd_îr‹_°rögs
();

957 
mëhod
 = 
	`TLSv1_mëhod
();

958 i‡(
mëhod
 =
NULL
) {

959 
	`VLOG_ERR
("TLSv1_mëhod: %s", 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

960  
ENOPROTOOPT
;

963 
˘x
 = 
	`SSL_CTX_√w
(
mëhod
);

964 i‡(
˘x
 =
NULL
) {

965 
	`VLOG_ERR
("SSL_CTX_√w: %s", 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

966  
ENOPROTOOPT
;

968 
	`SSL_CTX_£t_›ti⁄s
(
˘x
, 
SSL_OP_NO_SSLv2
 | 
SSL_OP_NO_SSLv3
);

969 
	`SSL_CTX_£t_tmp_dh_ˇŒback
(
˘x
, 
tmp_dh_ˇŒback
);

970 
	`SSL_CTX_£t_mode
(
˘x
, 
SSL_MODE_ENABLE_PARTIAL_WRITE
);

971 
	`SSL_CTX_£t_mode
(
˘x
, 
SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
);

972 
	`SSL_CTX_£t_vîify
(
˘x
, 
SSL_VERIFY_PEER
 | 
SSL_VERIFY_FAIL_IF_NO_PEER_CERT
,

973 
NULL
);

976 
	}
}

978 
DH
 *

979 
	$tmp_dh_ˇŒback
(
SSL
 *
s¶
 
UNUSED
, 
is_exp‹t
 UNUSED, 
keyÀngth
)

981 
	sdh
 {

982 
keyÀngth
;

983 
DH
 *
dh
;

984 
DH
 *(*
c⁄°ru˘‹
)();

987 
dh
 
dh_èbÀ
[] = {

988 {1024, 
NULL
, 
gë_dh1024
},

989 {2048, 
NULL
, 
gë_dh2048
},

990 {4096, 
NULL
, 
gë_dh4096
},

993 
dh
 *dh;

995 
dh
 = 
dh_èbÀ
; dh < &dh_èbÀ[
	`ARRAY_SIZE
(dh_table)]; dh++) {

996 i‡(
dh
->
keyÀngth
 == keylength) {

997 i‡(!
dh
->dh) {

998 
dh
->dh = dh->
	`c⁄°ru˘‹
();

999 i‡(!
dh
->dh) {

1000 
	`oÂ_Áèl
(
ENOMEM
, "out of memory constructing "

1004  
dh
->dh;

1007 
	`VLOG_ERR_RL
(&
æ
, "no Diffie-HellmanÖarameters for keyÜength %d",

1008 
keyÀngth
);

1009  
NULL
;

1010 
	}
}

1013 
boﬁ


1014 
	$vc⁄n_s¶_is_c⁄figuªd
()

1016  
has_¥iv©e_key
 || 
has_˚πifiˇã
 || 
has_ˇ_˚π
;

1017 
	}
}

1020 
	$vc⁄n_s¶_£t_¥iv©e_key_fûe
(c⁄° *
fûe_«me
)

1022 i‡(
	`s¶_öô
()) {

1025 i‡(
	`SSL_CTX_u£_Priv©eKey_fûe
(
˘x
, 
fûe_«me
, 
SSL_FILETYPE_PEM
) != 1) {

1026 
	`VLOG_ERR
("SSL_use_PrivateKey_file: %s",

1027 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

1030 
has_¥iv©e_key
 = 
åue
;

1031 
	}
}

1034 
	$vc⁄n_s¶_£t_˚πifiˇã_fûe
(c⁄° *
fûe_«me
)

1036 i‡(
	`s¶_öô
()) {

1039 i‡(
	`SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
˘x
, 
fûe_«me
) != 1) {

1040 
	`VLOG_ERR
("SSL_use_certificate_file: %s",

1041 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

1044 
has_˚πifiˇã
 = 
åue
;

1045 
	}
}

1055 
	$ªad_˚π_fûe
(c⁄° *
fûe_«me
, 
X509
 ***
˚πs
, 
size_t
 *
n_˚πs
)

1057 
FILE
 *
fûe
;

1058 
size_t
 
Æloˇãd_˚πs
 = 0;

1060 *
˚πs
 = 
NULL
;

1061 *
n_˚πs
 = 0;

1063 
fûe
 = 
	`f›í
(
fûe_«me
, "r");

1064 i‡(!
fûe
) {

1065 
	`VLOG_ERR
("failedÅo open %s forÑeading: %s",

1066 
fûe_«me
, 
	`°ªº‹
(
î∫o
));

1067  
î∫o
;

1071 
X509
 *
˚πifiˇã
;

1072 
c
;

1075 
˚πifiˇã
 = 
	`PEM_ªad_X509
(
fûe
, 
NULL
, NULL, NULL);

1076 i‡(!
˚πifiˇã
) {

1077 
size_t
 
i
;

1079 
	`VLOG_ERR
("PEM_read_X509 failedÑeading %s: %s",

1080 
fûe_«me
, 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

1081 
i
 = 0; i < *
n_˚πs
; i++) {

1082 
	`X509_‰ì
((*
˚πs
)[
i
]);

1084 
	`‰ì
(*
˚πs
);

1085 *
˚πs
 = 
NULL
;

1086 *
n_˚πs
 = 0;

1087  
EIO
;

1091 i‡(*
n_˚πs
 >
Æloˇãd_˚πs
) {

1092 *
˚πs
 = 
	`x2ƒóŒoc
(*˚πs, &
Æloˇãd_˚πs
,  **certs);

1094 (*
˚πs
)[(*
n_˚πs
)++] = 
˚πifiˇã
;

1098 
c
 = 
	`gëc
(
fûe
);

1099 } 
	`is•a˚
(
c
));

1100 i‡(
c
 =
EOF
) {

1103 
	`ungëc
(
c
, 
fûe
);

1105 
	`f˛o£
(
fûe
);

1107 
	}
}

1115 
	$vc⁄n_s¶_£t_≥î_ˇ_˚π_fûe
(c⁄° *
fûe_«me
)

1117 
X509
 **
˚πs
;

1118 
size_t
 
n_˚πs
;

1119 
size_t
 
i
;

1121 i‡(
	`s¶_öô
()) {

1125 i‡(!
	`ªad_˚π_fûe
(
fûe_«me
, &
˚πs
, &
n_˚πs
)) {

1126 
i
 = 0; i < 
n_˚πs
; i++) {

1127 i‡(
	`SSL_CTX_add_exåa_chaö_˚π
(
˘x
, 
˚πs
[
i
]) != 1) {

1128 
	`VLOG_ERR
("SSL_CTX_add_extra_chain_cert: %s",

1129 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

1132 
	`‰ì
(
˚πs
);

1134 
	}
}

1138 
	$log_ˇ_˚π
(c⁄° *
fûe_«me
, 
X509
 *
˚π
)

1140 
dige°
[
EVP_MAX_MD_SIZE
];

1141 
n_byãs
;

1142 
ds
 
Â
;

1143 *
subje˘
;

1145 
	`ds_öô
(&
Â
);

1146 i‡(!
	`X509_dige°
(
˚π
, 
	`EVP_sha1
(), 
dige°
, &
n_byãs
)) {

1147 
	`ds_put_c°r
(&
Â
, "<out of memory>");

1149 
i
;

1150 
i
 = 0; i < 
n_byãs
; i++) {

1151 i‡(
i
) {

1152 
	`ds_put_ch¨
(&
Â
, ':');

1154 
	`ds_put_f‹m©
(&
Â
, "%02hhx", 
dige°
[
i
]);

1157 
subje˘
 = 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
˚π
), 
NULL
, 0);

1158 
	`VLOG_INFO
("Tru°ög CA cîà‰om %†(%sË(fögî¥öà%s)", 
fûe_«me
,

1159 
subje˘
 ? subje˘ : "<ouào‡mem‹y>", 
	`ds_c°r
(&
Â
));

1160 
	`‰ì
(
subje˘
);

1161 
	`ds_de°roy
(&
Â
);

1162 
	}
}

1170 
	$vc⁄n_s¶_£t_ˇ_˚π_fûe
(c⁄° *
fûe_«me
, 
boﬁ
 
boŸ°øp
)

1172 
X509
 **
˚πs
;

1173 
size_t
 
n_˚πs
;

1174 
°©
 
s
;

1176 i‡(
	`s¶_öô
()) {

1180 i‡(
boŸ°øp
 && 
	`°©
(
fûe_«me
, &
s
Ë&& 
î∫o
 =
ENOENT
) {

1181 
boŸ°øp_ˇ_˚π
 = 
åue
;

1182 
ˇ_˚π_fûe
 = 
	`x°rdup
(
fûe_«me
);

1183 } i‡(!
	`ªad_˚π_fûe
(
fûe_«me
, &
˚πs
, &
n_˚πs
)) {

1184 
size_t
 
i
;

1187 
i
 = 0; i < 
n_˚πs
; i++) {

1189 i‡(
	`SSL_CTX_add_˛õ¡_CA
(
˘x
, 
˚πs
[
i
]) != 1) {

1190 
	`VLOG_ERR
("failedÅoádd client certificate %d from %s: %s",

1191 
i
, 
fûe_«me
,

1192 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

1194 
	`log_ˇ_˚π
(
fûe_«me
, 
˚πs
[
i
]);

1196 
	`X509_‰ì
(
˚πs
[
i
]);

1201 i‡(
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
˘x
, 
fûe_«me
, 
NULL
) != 1) {

1202 
	`VLOG_ERR
("SSL_CTX_load_verify_locations: %s",

1203 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

1207 
has_ˇ_˚π
 = 
åue
;

1209 
	}
}

	@lib/vconn-ssl.h

33 #i‚de‡
VCONN_SSL_H


34 
	#VCONN_SSL_H
 1

	)

36 
	~<°dboﬁ.h
>

38 #ifde‡
HAVE_OPENSSL


39 
boﬁ
 
vc⁄n_s¶_is_c⁄figuªd
();

40 
vc⁄n_s¶_£t_¥iv©e_key_fûe
(c⁄° *
fûe_«me
);

41 
vc⁄n_s¶_£t_˚πifiˇã_fûe
(c⁄° *
fûe_«me
);

42 
vc⁄n_s¶_£t_ˇ_˚π_fûe
(c⁄° *
fûe_«me
, 
boﬁ
 
boŸ°øp
);

43 
vc⁄n_s¶_£t_≥î_ˇ_˚π_fûe
(c⁄° *
fûe_«me
);

45 
	#VCONN_SSL_LONG_OPTIONS
 \

46 {"¥iv©e-key", 
ªquúed_¨gumít
, 0, 'p'}, \

47 {"˚πifiˇã", 
ªquúed_¨gumít
, 0, 'c'}, \

48 {"ˇ-˚π", 
ªquúed_¨gumít
, 0, 'C'},

	)

50 
	#VCONN_SSL_OPTION_HANDLERS
 \

52 
	`vc⁄n_s¶_£t_¥iv©e_key_fûe
(
›èrg
); \

56 
	`vc⁄n_s¶_£t_˚πifiˇã_fûe
(
›èrg
); \

60 
	`vc⁄n_s¶_£t_ˇ_˚π_fûe
(
›èrg
, 
Ál£
); \

61 ;

	)

63 
ölöe
 
boﬁ
 
	$vc⁄n_s¶_is_c⁄figuªd
()

65  
Ál£
;

66 
	}
}

67 
	#VCONN_SSL_LONG_OPTIONS


	)

68 
	#VCONN_SSL_OPTION_HANDLERS


	)

	@lib/vconn-stream.c

34 
	~<c⁄fig.h
>

35 
	~"vc⁄n-°ªam.h
"

36 
	~<as£π.h
>

37 
	~<î∫o.h
>

38 
	~<pﬁl.h
>

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

41 
	~<sys/ty≥s.h
>

42 
	~<uni°d.h
>

43 
	~"Àak-checkî.h
"

44 
	~"oÂbuf.h
"

45 
	~"›íÊow/›íÊow.h
"

46 
	~"pﬁl-lo›.h
"

47 
	~"sockë-utû.h
"

48 
	~"utû.h
"

49 
	~"vc⁄n-¥ovidî.h
"

50 
	~"vc⁄n.h
"

52 
	~"vlog.h
"

53 
	#LOG_MODULE
 
VLM_vc⁄n_°ªam


	)

57 
	s°ªam_vc⁄n


59 
vc⁄n
 
	mvc⁄n
;

60 
	mfd
;

61 
oÂbuf
 *
	mrxbuf
;

62 
oÂbuf
 *
	mtxbuf
;

63 
pﬁl_waôî
 *
	mtx_waôî
;

66 
vc⁄n_˛ass
 
	g°ªam_vc⁄n_˛ass
;

68 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(10, 25);

70 
°ªam_˛ór_txbuf
(
°ªam_vc⁄n
 *);

73 
	$√w_°ªam_vc⁄n
(c⁄° *
«me
, 
fd
, 
c⁄√˘_°©us
,

74 
uöt32_t
 
ù
, 
boﬁ
 
ªc⁄√˘abÀ
, 
vc⁄n
 **
vc⁄≈
)

76 
°ªam_vc⁄n
 *
s
;

78 
s
 = 
	`xmÆloc
( *s);

79 
	`vc⁄n_öô
(&
s
->
vc⁄n
, &
°ªam_vc⁄n_˛ass
, 
c⁄√˘_°©us
, 
ù
, 
«me
,

80 
ªc⁄√˘abÀ
);

81 
s
->
fd
 = fd;

82 
s
->
txbuf
 = 
NULL
;

83 
s
->
tx_waôî
 = 
NULL
;

84 
s
->
rxbuf
 = 
NULL
;

85 *
vc⁄≈
 = &
s
->
vc⁄n
;

87 
	}
}

89 
°ªam_vc⁄n
 *

90 
	$°ªam_vc⁄n_ˇ°
(
vc⁄n
 *vconn)

92 
	`vc⁄n_as£π_˛ass
(
vc⁄n
, &
°ªam_vc⁄n_˛ass
);

93  
	`CONTAINER_OF
(
vc⁄n
, 
°ªam_vc⁄n
, vconn);

94 
	}
}

97 
	$°ªam_˛o£
(
vc⁄n
 *vconn)

99 
°ªam_vc⁄n
 *
s
 = 
	`°ªam_vc⁄n_ˇ°
(
vc⁄n
);

100 
	`pﬁl_ˇn˚l
(
s
->
tx_waôî
);

101 
	`°ªam_˛ór_txbuf
(
s
);

102 
	`oÂbuf_dñëe
(
s
->
rxbuf
);

103 
	`˛o£
(
s
->
fd
);

104 
	`‰ì
(
s
);

105 
	}
}

108 
	$°ªam_c⁄√˘
(
vc⁄n
 *vconn)

110 
°ªam_vc⁄n
 *
s
 = 
	`°ªam_vc⁄n_ˇ°
(
vc⁄n
);

111  
	`check_c⁄√˘i⁄_com∂ëi⁄
(
s
->
fd
);

112 
	}
}

115 
	$°ªam_ªcv
(
vc⁄n
 *vc⁄n, 
oÂbuf
 **
buf„Ω
)

117 
°ªam_vc⁄n
 *
s
 = 
	`°ªam_vc⁄n_ˇ°
(
vc⁄n
);

118 
oÂbuf
 *
rx
;

119 
size_t
 
w™t_byãs
;

120 
ssize_t
 
ªtvÆ
;

122 i‡(
s
->
rxbuf
 =
NULL
) {

123 
s
->
rxbuf
 = 
	`oÂbuf_√w
(1564);

125 
rx
 = 
s
->
rxbuf
;

127 
agaö
:

128 i‡((
oÂ_hódî
Ë> 
rx
->
size
) {

129 
w™t_byãs
 = (
oÂ_hódî
Ë- 
rx
->
size
;

131 
oÂ_hódî
 *
oh
 = 
rx
->
d©a
;

132 
size_t
 
Àngth
 = 
	`¡ohs
(
oh
->length);

133 i‡(
Àngth
 < (
oÂ_hódî
)) {

134 
	`VLOG_ERR_RL
(
LOG_MODULE
, &
æ
, "receivedÅoo-short ofp_header (%zu bytes)",

135 
Àngth
);

136  
EPROTO
;

138 
w™t_byãs
 = 
Àngth
 - 
rx
->
size
;

139 i‡(!
w™t_byãs
) {

140 *
buf„Ω
 = 
rx
;

141 
s
->
rxbuf
 = 
NULL
;

145 
	`oÂbuf_¥óŒoc_èûroom
(
rx
, 
w™t_byãs
);

147 
ªtvÆ
 = 
	`ªad
(
s
->
fd
, 
	`oÂbuf_èû
(
rx
), 
w™t_byãs
);

148 i‡(
ªtvÆ
 > 0) {

149 
rx
->
size
 +
ªtvÆ
;

150 i‡(
ªtvÆ
 =
w™t_byãs
) {

151 i‡(
rx
->
size
 > (
oÂ_hódî
)) {

152 *
buf„Ω
 = 
rx
;

153 
s
->
rxbuf
 = 
NULL
;

156 
agaö
;

159  
EAGAIN
;

160 } i‡(
ªtvÆ
 == 0) {

161 i‡(
rx
->
size
) {

162 
	`VLOG_ERR_RL
(
LOG_MODULE
, &
æ
, "connection dropped mid-packet");

163  
EPROTO
;

165  
EOF
;

168  
î∫o
;

170 
	}
}

173 
	$°ªam_˛ór_txbuf
(
°ªam_vc⁄n
 *
s
)

175 
	`oÂbuf_dñëe
(
s
->
txbuf
);

176 
s
->
txbuf
 = 
NULL
;

177 
s
->
tx_waôî
 = 
NULL
;

178 
	}
}

181 
	$°ªam_do_tx
(
fd
 
UNUSED
, 
ªvíts
 UNUSED, *
vc⁄n_
)

183 
vc⁄n
 *vc⁄¿
vc⁄n_
;

184 
°ªam_vc⁄n
 *
s
 = 
	`°ªam_vc⁄n_ˇ°
(
vc⁄n
);

185 
ssize_t
 
n
 = 
	`wrôe
(
s
->
fd
, s->
txbuf
->
d©a
, s->txbuf->
size
);

186 i‡(
n
 < 0) {

187 i‡(
î∫o
 !
EAGAIN
) {

188 
	`VLOG_ERR_RL
(
LOG_MODULE
, &
æ
, "£nd: %s", 
	`°ªº‹
(
î∫o
));

189 
	`°ªam_˛ór_txbuf
(
s
);

192 } i‡(
n
 > 0) {

193 
	`oÂbuf_puŒ
(
s
->
txbuf
, 
n
);

194 i‡(!
s
->
txbuf
->
size
) {

195 
	`°ªam_˛ór_txbuf
(
s
);

199 
s
->
tx_waôî
 = 
	`pﬁl_fd_ˇŒback
(s->
fd
, 
POLLOUT
, 
°ªam_do_tx
, 
vc⁄n
);

200 
	}
}

203 
	$°ªam_£nd
(
vc⁄n
 *vc⁄n, 
oÂbuf
 *
buf„r
)

205 
°ªam_vc⁄n
 *
s
 = 
	`°ªam_vc⁄n_ˇ°
(
vc⁄n
);

206 
ssize_t
 
ªtvÆ
;

208 i‡(
s
->
txbuf
) {

209  
EAGAIN
;

212 
ªtvÆ
 = 
	`wrôe
(
s
->
fd
, 
buf„r
->
d©a
, buf„r->
size
);

213 i‡(
ªtvÆ
 =
buf„r
->
size
) {

214 
	`oÂbuf_dñëe
(
buf„r
);

216 } i‡(
ªtvÆ
 >0 || 
î∫o
 =
EAGAIN
) {

217 
	`Àak_checkî_˛aim
(
buf„r
);

218 
s
->
txbuf
 = 
buf„r
;

219 i‡(
ªtvÆ
 > 0) {

220 
	`oÂbuf_puŒ
(
buf„r
, 
ªtvÆ
);

222 
s
->
tx_waôî
 = 
	`pﬁl_fd_ˇŒback
(s->
fd
, 
POLLOUT
, 
°ªam_do_tx
, 
vc⁄n
);

225  
î∫o
;

227 
	}
}

230 
	$°ªam_waô
(
vc⁄n
 *vc⁄n, 
vc⁄n_waô_ty≥
 
waô
)

232 
°ªam_vc⁄n
 *
s
 = 
	`°ªam_vc⁄n_ˇ°
(
vc⁄n
);

233 
waô
) {

234 
WAIT_CONNECT
:

235 
	`pﬁl_fd_waô
(
s
->
fd
, 
POLLOUT
);

238 
WAIT_SEND
:

239 i‡(!
s
->
txbuf
) {

240 
	`pﬁl_fd_waô
(
s
->
fd
, 
POLLOUT
);

246 
WAIT_RECV
:

247 
	`pﬁl_fd_waô
(
s
->
fd
, 
POLLIN
);

251 
	`NOT_REACHED
();

253 
	}
}

255 
vc⁄n_˛ass
 
	g°ªam_vc⁄n_˛ass
 = {

257 
NULL
,

258 
°ªam_˛o£
,

259 
°ªam_c⁄√˘
,

260 
°ªam_ªcv
,

261 
°ªam_£nd
,

262 
°ªam_waô
,

267 
	sp°ªam_pvc⁄n


269 
pvc⁄n
 
	mpvc⁄n
;

270 
	mfd
;

271 (*
	mac˚±_cb
)(
	mfd
, c⁄° 
	msockaddr
 *, 
size_t
 
	mß_Àn
,

272 
	mvc⁄n
 **);

275 
pvc⁄n_˛ass
 
	gp°ªam_pvc⁄n_˛ass
;

277 
p°ªam_pvc⁄n
 *

278 
	$p°ªam_pvc⁄n_ˇ°
(
pvc⁄n
 *pvconn)

280 
	`pvc⁄n_as£π_˛ass
(
pvc⁄n
, &
p°ªam_pvc⁄n_˛ass
);

281  
	`CONTAINER_OF
(
pvc⁄n
, 
p°ªam_pvc⁄n
,Övconn);

282 
	}
}

285 
√w_p°ªam_pvc⁄n
(c⁄° *
«me
, 
fd
,

286 (*
ac˚±_cb
)(
fd
, c⁄° 
sockaddr
 *,

287 
size_t
 
ß_Àn
, 
vc⁄n
 **),

288 
pvc⁄n
 **
pvc⁄≈
)

290 
p°ªam_pvc⁄n
 *
ps
;

291 
ªtvÆ
;

293 
ªtvÆ
 = 
	`£t_n⁄blockög
(
fd
);

294 i‡(
ªtvÆ
) {

295 
	`˛o£
(
fd
);

296  
ªtvÆ
;

299 i‡(
	`li°í
(
fd
, 10) < 0) {

300 
îr‹
 = 
î∫o
;

301 
	`VLOG_ERR
(
LOG_MODULE
, "%s:Üi°í: %s", 
«me
, 
	`°ªº‹
(
îr‹
));

302 
	`˛o£
(
fd
);

303  
îr‹
;

306 
ps
 = 
	`xmÆloc
( *ps);

307 
	`pvc⁄n_öô
(&
ps
->
pvc⁄n
, &
p°ªam_pvc⁄n_˛ass
, 
«me
);

308 
ps
->
fd
 = fd;

309 
ps
->
ac˚±_cb
 =áccept_cb;

310 *
pvc⁄≈
 = &
ps
->
pvc⁄n
;

312 
	}
}

315 
	$p°ªam_˛o£
(
pvc⁄n
 *pvconn)

317 
p°ªam_pvc⁄n
 *
ps
 = 
	`p°ªam_pvc⁄n_ˇ°
(
pvc⁄n
);

318 
	`˛o£
(
ps
->
fd
);

319 
	`‰ì
(
ps
);

320 
	}
}

323 
	$p°ªam_ac˚±
(
pvc⁄n
 *pvc⁄n, 
vc⁄n
 **
√w_vc⁄≈
)

325 
p°ªam_pvc⁄n
 *
ps
 = 
	`p°ªam_pvc⁄n_ˇ°
(
pvc⁄n
);

326 
sockaddr_°‹age
 
ss
;

327 
sockÀn_t
 
ss_Àn
 =  
ss
;

328 
√w_fd
;

329 
ªtvÆ
;

331 
√w_fd
 = 
	`ac˚±
(
ps
->
fd
, (
sockaddr
 *Ë&
ss
, &
ss_Àn
);

332 i‡(
√w_fd
 < 0) {

333 
ªtvÆ
 = 
î∫o
;

334 i‡(
ªtvÆ
 !
EAGAIN
) {

335 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "ac˚±: %s", 
	`°ªº‹
(
ªtvÆ
));

337  
ªtvÆ
;

340 
ªtvÆ
 = 
	`£t_n⁄blockög
(
√w_fd
);

341 i‡(
ªtvÆ
) {

342 
	`˛o£
(
√w_fd
);

343  
ªtvÆ
;

346  
ps
->
	`ac˚±_cb
(
√w_fd
, (c⁄° 
sockaddr
 *Ë&
ss
, 
ss_Àn
,

347 
√w_vc⁄≈
);

348 
	}
}

351 
	$p°ªam_waô
(
pvc⁄n
 *pvconn)

353 
p°ªam_pvc⁄n
 *
ps
 = 
	`p°ªam_pvc⁄n_ˇ°
(
pvc⁄n
);

354 
	`pﬁl_fd_waô
(
ps
->
fd
, 
POLLIN
);

355 
	}
}

357 
pvc⁄n_˛ass
 
	gp°ªam_pvc⁄n_˛ass
 = {

359 
NULL
,

360 
p°ªam_˛o£
,

361 
p°ªam_ac˚±
,

362 
p°ªam_waô


	@lib/vconn-stream.h

34 #i‚de‡
VCONN_STREAM_H


35 
	#VCONN_STREAM_H
 1

	)

37 
	~<°dboﬁ.h
>

38 
	~<°ddef.h
>

39 
	~<°döt.h
>

41 
	gvc⁄n
;

42 
	gpvc⁄n
;

43 
	gsockaddr
;

45 
√w_°ªam_vc⁄n
(c⁄° *
«me
, 
fd
, 
c⁄√˘_°©us
,

46 
uöt32_t
 
ù
, 
boﬁ
 
ªc⁄√˘abÀ
, 
vc⁄n
 **
vc⁄≈
);

47 
√w_p°ªam_pvc⁄n
(c⁄° *
«me
, 
fd
,

48 (*
ac˚±_cb
)(
fd
, c⁄° 
sockaddr
 *,

49 
size_t
 
ß_Àn
, 
vc⁄n
 **),

50 
pvc⁄n
 **
pvc⁄≈
);

	@lib/vconn-tcp.c

34 
	~<c⁄fig.h
>

35 
	~"vc⁄n.h
"

36 
	~<î∫o.h
>

37 
	~<öây≥s.h
>

38 
	~<sys/ty≥s.h
>

39 
	~<√töë/ö.h
>

40 
	~<√töë/t˝.h
>

41 
	~<°dlib.h
>

42 
	~<°rög.h
>

43 
	~<uni°d.h
>

44 
	~"∑ckës.h
"

45 
	~"sockë-utû.h
"

46 
	~"utû.h
"

47 
	~"›íÊow/›íÊow.h
"

48 
	~"vc⁄n-¥ovidî.h
"

49 
	~"vc⁄n-°ªam.h
"

51 
	~"vlog.h
"

52 
	#LOG_MODULE
 
VLM_vc⁄n_t˝


	)

57 
	$√w_t˝_vc⁄n
(c⁄° *
«me
, 
fd
, 
c⁄√˘_°©us
,

58 c⁄° 
sockaddr_ö
 *
sö
, 
vc⁄n
 **
vc⁄≈
)

60 
⁄
 = 1;

61 
ªtvÆ
;

63 
ªtvÆ
 = 
	`£tsock›t
(
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
, &
⁄
,  on);

64 i‡(
ªtvÆ
) {

65 
	`VLOG_ERR
(
LOG_MODULE
, "%s: sësock›t(TCP_NODELAY): %s", 
«me
, 
	`°ªº‹
(
î∫o
));

66 
	`˛o£
(
fd
);

67  
î∫o
;

70  
	`√w_°ªam_vc⁄n
(
«me
, 
fd
, 
c⁄√˘_°©us
, 
sö
->
sö_addr
.
s_addr
,

71 
åue
, 
vc⁄≈
);

72 
	}
}

75 
	$t˝_›í
(c⁄° *
«me
, *
suffix
, 
vc⁄n
 **
vc⁄≈
)

77 *
ßve_±r
;

78 c⁄° *
ho°_«me
;

79 c⁄° *
p‹t_°rög
;

80 
sockaddr_ö
 
sö
;

81 
ªtvÆ
;

82 
fd
;

88 
ho°_«me
 = 
	`°πok_r
(
suffix
, "::", &
ßve_±r
);

89 
p‹t_°rög
 = 
	`°πok_r
(
NULL
, "::", &
ßve_±r
);

90 i‡(!
ho°_«me
) {

91 
	`oÂ_îr‹
(0, "%s: badÖì∏«mêf‹m©", 
«me
);

92  
EAFNOSUPPORT
;

95 
	`mem£t
(&
sö
, 0,  sin);

96 
sö
.
sö_Ámûy
 = 
AF_INET
;

97 i‡(
	`lookup_ù
(
ho°_«me
, &
sö
.
sö_addr
)) {

98  
ENOENT
;

100 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t_°rög
 ? 
	`©oi
’‹t_°rögË: 
OFP_TCP_PORT
);

102 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

103 i‡(
fd
 < 0) {

104 
	`VLOG_ERR
(
LOG_MODULE
, "%s: sockë: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

105  
î∫o
;

108 
ªtvÆ
 = 
	`£t_n⁄blockög
(
fd
);

109 i‡(
ªtvÆ
) {

110 
	`˛o£
(
fd
);

111  
ªtvÆ
;

114 
ªtvÆ
 = 
	`c⁄√˘
(
fd
, (
sockaddr
 *Ë&
sö
,  sin);

115 i‡(
ªtvÆ
 < 0) {

116 i‡(
î∫o
 =
EINPROGRESS
) {

117  
	`√w_t˝_vc⁄n
(
«me
, 
fd
, 
EAGAIN
, &
sö
, 
vc⁄≈
);

119 
îr‹
 = 
î∫o
;

120 
	`VLOG_ERR
(
LOG_MODULE
, "%s: c⁄√˘: %s", 
«me
, 
	`°ªº‹
(
îr‹
));

121 
	`˛o£
(
fd
);

122  
îr‹
;

125  
	`√w_t˝_vc⁄n
(
«me
, 
fd
, 0, &
sö
, 
vc⁄≈
);

127 
	}
}

129 
vc⁄n_˛ass
 
	gt˝_vc⁄n_˛ass
 = {

131 
t˝_›í
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NULL
,

141 
±˝_ac˚±
(
fd
, c⁄° 
sockaddr
 *
ß
, 
size_t
 
ß_Àn
,

142 
vc⁄n
 **
vc⁄≈
);

145 
	$±˝_›í
(c⁄° *
«me
, *
suffix
, 
pvc⁄n
 **
pvc⁄≈
)

147 
sockaddr_ö
 
sö
;

148 
ªtvÆ
;

149 
fd
;

150 
yes
 = 1;

152 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

153 i‡(
fd
 < 0) {

154 
	`VLOG_ERR
(
LOG_MODULE
, "%s: sockë: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

155  
î∫o
;

158 i‡(
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
yes
,  yes) < 0) {

159 
	`VLOG_ERR
(
LOG_MODULE
, "%s: sësock›t(SO_REUSEADDR): %s", 
«me
, 
	`°ªº‹
(
î∫o
));

160  
î∫o
;

163 
	`mem£t
(&
sö
, 0,  sin);

164 
sö
.
sö_Ámûy
 = 
AF_INET
;

165 
sö
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

166 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
	`©oi
(
suffix
Ë?átoi(suffixË: 
OFP_TCP_PORT
);

167 
ªtvÆ
 = 
	`böd
(
fd
, (
sockaddr
 *Ë&
sö
,  sin);

168 i‡(
ªtvÆ
 < 0) {

169 
îr‹
 = 
î∫o
;

170 
	`VLOG_ERR
(
LOG_MODULE
, "%s: böd: %s", 
«me
, 
	`°ªº‹
(
îr‹
));

171 
	`˛o£
(
fd
);

172  
îr‹
;

175  
	`√w_p°ªam_pvc⁄n
("±˝", 
fd
, 
±˝_ac˚±
, 
pvc⁄≈
);

176 
	}
}

179 
	$±˝_ac˚±
(
fd
, c⁄° 
sockaddr
 *
ß
, 
size_t
 
ß_Àn
,

180 
vc⁄n
 **
vc⁄≈
)

182 c⁄° 
sockaddr_ö
 *
sö
 = (c⁄° sockaddr_ö *Ë
ß
;

183 
«me
[128];

185 i‡(
ß_Àn
 =(
sockaddr_ö
Ë&& 
sö
->
sö_Ámûy
 =
AF_INET
) {

186 
	`•rötf
(
«me
, "t˝:"
IP_FMT
, 
	`IP_ARGS
(&
sö
->
sö_addr
));

187 i‡(
sö
->
sö_p‹t
 !
	`ht⁄s
(
OFP_TCP_PORT
)) {

188 
	`•rötf
(
	`°rchr
(
«me
, '\0'), ":%"
PRIu16
, 
	`¡ohs
(
sö
->
sö_p‹t
));

191 
	`°r˝y
(
«me
, "tcp");

193  
	`√w_t˝_vc⁄n
(
«me
, 
fd
, 0, 
sö
, 
vc⁄≈
);

194 
	}
}

196 
pvc⁄n_˛ass
 
	g±˝_pvc⁄n_˛ass
 = {

198 
±˝_›í
,

199 
NULL
,

200 
NULL
,

201 
NULL


	@lib/vconn-unix.c

34 
	~<c⁄fig.h
>

35 
	~"vc⁄n.h
"

36 
	~<as£π.h
>

37 
	~<î∫o.h
>

38 
	~<öây≥s.h
>

39 
	~<√tdb.h
>

40 
	~<pﬁl.h
>

41 
	~<sys/ty≥s.h
>

42 
	~<sys/un.h
>

43 
	~<°dlib.h
>

44 
	~<°rög.h
>

45 
	~<uni°d.h
>

46 
	~"oÂbuf.h
"

47 
	~"›íÊow/›íÊow.h
"

48 
	~"∑ckës.h
"

49 
	~"pﬁl-lo›.h
"

50 
	~"sockë-utû.h
"

51 
	~"utû.h
"

52 
	~"vc⁄n-¥ovidî.h
"

53 
	~"vc⁄n-°ªam.h
"

55 
	~"vlog.h
"

56 
	#LOG_MODULE
 
VLM_vc⁄n_unix


	)

61 
	gn_unix_sockës
;

64 
	$unix_›í
(c⁄° *
«me
, *
suffix
, 
vc⁄n
 **
vc⁄≈
)

66 c⁄° *
c⁄√˘_∑th
 = 
suffix
;

67 
böd_∑th
[128];

68 
fd
;

70 
	`•rötf
(
böd_∑th
, "/tmp/vconn-unix.%ld.%d",

71 (Ë
	`gëpid
(), 
n_unix_sockës
++);

72 
fd
 = 
	`make_unix_sockë
(
SOCK_STREAM
, 
åue
, 
Ál£
, 
böd_∑th
, 
c⁄√˘_∑th
);

73 i‡(
fd
 < 0) {

74 
	`VLOG_ERR
(
LOG_MODULE
, "%s: connectionÅo %s failed: %s",

75 
böd_∑th
, 
c⁄√˘_∑th
, 
	`°ªº‹
(-
fd
));

76  -
fd
;

79  
	`√w_°ªam_vc⁄n
(
«me
, 
fd
, 
	`check_c⁄√˘i⁄_com∂ëi⁄
(fd),

80 0, 
åue
, 
vc⁄≈
);

81 
	}
}

83 
vc⁄n_˛ass
 
	gunix_vc⁄n_˛ass
 = {

85 
unix_›í
,

86 
NULL
,

87 
NULL
,

88 
NULL
,

89 
NULL
,

90 
NULL
,

95 
punix_ac˚±
(
fd
, c⁄° 
sockaddr
 *
ß
, 
size_t
 
ß_Àn
,

96 
vc⁄n
 **
vc⁄≈
);

99 
	$punix_›í
(c⁄° *
«me
 
UNUSED
, *
suffix
, 
pvc⁄n
 **
pvc⁄≈
)

101 
fd
;

103 
fd
 = 
	`make_unix_sockë
(
SOCK_STREAM
, 
åue
,Årue, 
suffix
, 
NULL
);

104 i‡(
fd
 < 0) {

105 
	`VLOG_ERR
(
LOG_MODULE
, "%s: bödög faûed: %s", 
suffix
, 
	`°ªº‹
(
î∫o
));

106  
î∫o
;

109  
	`√w_p°ªam_pvc⁄n
("punix", 
fd
, 
punix_ac˚±
, 
pvc⁄≈
);

110 
	}
}

113 
	$punix_ac˚±
(
fd
, c⁄° 
sockaddr
 *
ß
, 
size_t
 
ß_Àn
,

114 
vc⁄n
 **
vc⁄≈
)

116 c⁄° 
sockaddr_un
 *
sun
 = (c⁄° sockaddr_u¿*Ë
ß
;

117 
«me_Àn
 = 
	`gë_unix_«me_Àn
(
ß_Àn
);

118 
«me
[128];

120 i‡(
«me_Àn
 > 0) {

121 
	`¢¥ötf
(
«me
, Çame, "unix:%.*s", 
«me_Àn
, 
sun
->
sun_∑th
);

123 
	`°r˝y
(
«me
, "unix");

125  
	`√w_°ªam_vc⁄n
(
«me
, 
fd
, 0, 0, 
åue
, 
vc⁄≈
);

126 
	}
}

128 
pvc⁄n_˛ass
 
	gpunix_pvc⁄n_˛ass
 = {

130 
punix_›í
,

131 
NULL
,

132 
NULL
,

133 
NULL


	@lib/vconn.c

34 
	~<c⁄fig.h
>

35 
	~"vc⁄n-¥ovidî.h
"

36 
	~<as£π.h
>

37 
	~<î∫o.h
>

38 
	~<öây≥s.h
>

39 
	~<√töë/ö.h
>

40 
	~<pﬁl.h
>

41 
	~<°dlib.h
>

42 
	~<°rög.h
>

43 
	~"dy«mic-°rög.h
"

44 
	~"oÂ.h
"

45 
	~"oÂbuf.h
"

46 
	~"›íÊow/›íÊow.h
"

47 
	~"pﬁl-lo›.h
"

48 
	~"øndom.h
"

49 
	~"utû.h
"

50 
	~"oÊib/oÊ.h
"

51 
	~"oÊib/oÊ-mesßges.h
"

52 
	~"oÊib-exp/oÊ-exp.h
"

54 
	#LOG_MODULE
 
VLM_vc⁄n


	)

55 
	~"vlog.h
"

58 
	evc⁄n_°©e
 {

60 
	mVCS_CONNECTING
,

61 
	mVCS_SEND_HELLO
,

62 
	mVCS_RECV_HELLO
,

63 
	mVCS_CONNECTED
,

66 
	mVCS_SEND_ERROR
,

67 
	mVCS_DISCONNECTED


70 
oÊ_exp_msg
 
	goÊ_exp_msg
 =

71 {.
∑ck
 = 
oÊ_exp_msg_∑ck
,

72 .
	gu≈ack
 = 
oÊ_exp_msg_u≈ack
,

73 .
	g‰ì
 = 
oÊ_exp_msg_‰ì
,

74 .
	gto_°rög
 = 
oÊ_exp_msg_to_°rög
};

76 
oÊ_exp
 
	goÊ_exp
 =

77 {.
a˘
 = 
NULL
,

78 .
	gö°
 = 
NULL
,

79 .
	gm©ch
 = 
NULL
,

80 .
	g°©s
 = 
NULL
,

81 .
	gmsg
 = &
oÊ_exp_msg
};

83 
vc⁄n_˛ass
 *
	gvc⁄n_˛as£s
[] = {

84 &
t˝_vc⁄n_˛ass
,

85 &
unix_vc⁄n_˛ass
,

86 #ifde‡
HAVE_NETLINK


87 &
√éök_vc⁄n_˛ass
,

89 #ifde‡
HAVE_OPENSSL


90 &
s¶_vc⁄n_˛ass
,

94 
pvc⁄n_˛ass
 *
	gpvc⁄n_˛as£s
[] = {

95 &
±˝_pvc⁄n_˛ass
,

96 &
punix_pvc⁄n_˛ass
,

97 #ifde‡
HAVE_OPENSSL


98 &
ps¶_pvc⁄n_˛ass
,

105 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(600, 600);

107 
do_ªcv
(
vc⁄n
 *, 
oÂbuf
 **);

108 
do_£nd
(
vc⁄n
 *, 
oÂbuf
 *);

112 
	$check_vc⁄n_˛as£s
()

114 #i‚de‡
NDEBUG


115 
size_t
 
i
;

117 
i
 = 0; i < 
	`ARRAY_SIZE
(
vc⁄n_˛as£s
); i++) {

118 
vc⁄n_˛ass
 *
˛ass
 = 
vc⁄n_˛as£s
[
i
];

119 
	`as£π
(
˛ass
->
«me
 !
NULL
);

120 
	`as£π
(
˛ass
->
›í
 !
NULL
);

121 i‡(
˛ass
->
˛o£
 || cœss->
ªcv
 || cœss->
£nd
 || cœss->
waô
) {

122 
	`as£π
(
˛ass
->
˛o£
 !
NULL
);

123 
	`as£π
(
˛ass
->
ªcv
 !
NULL
);

124 
	`as£π
(
˛ass
->
£nd
 !
NULL
);

125 
	`as£π
(
˛ass
->
waô
 !
NULL
);

131 
i
 = 0; i < 
	`ARRAY_SIZE
(
pvc⁄n_˛as£s
); i++) {

132 
pvc⁄n_˛ass
 *
˛ass
 = 
pvc⁄n_˛as£s
[
i
];

133 
	`as£π
(
˛ass
->
«me
 !
NULL
);

134 
	`as£π
(
˛ass
->
li°í
 !
NULL
);

135 i‡(
˛ass
->
˛o£
 || cœss->
ac˚±
 || cœss->
waô
) {

136 
	`as£π
(
˛ass
->
˛o£
 !
NULL
);

137 
	`as£π
(
˛ass
->
ac˚±
 !
NULL
);

138 
	`as£π
(
˛ass
->
waô
 !
NULL
);

144 
	}
}

150 
	$vc⁄n_ußge
(
boﬁ
 
a˘ive
, boﬁ 
∑ssive
, boﬁ 
boŸ°øp
 
UNUSED
)

156 
	`¥ötf
("\n");

157 i‡(
a˘ive
) {

158 
	`¥ötf
("Active OpenFlow connection methods:\n");

159 
	`¥ötf
("Åcp:HOST[:PORT] "

160 "PORT (deÁu…: %dË⁄ÑemŸêTCP HOST\n", 
OFP_TCP_PORT
);

161 #ifde‡
HAVE_OPENSSL


162 
	`¥ötf
(" ssl:HOST[:PORT] "

163 "SSL PORT (deÁu…: %dË⁄ÑemŸêHOST\n", 
OFP_SSL_PORT
);

165 
	`¥ötf
(" unix:FILE Unix domain socketÇamed FILE\n");

166 
	`¥ötf
(" fd:N File descriptor N\n");

169 i‡(
∑ssive
) {

170 
	`¥ötf
("Passive OpenFlow connection methods:\n");

171 
	`¥ötf
("Ötcp:[PORT] "

173 
OFP_TCP_PORT
);

174 #ifde‡
HAVE_OPENSSL


175 
	`¥ötf
("Össl:[PORT] "

177 
OFP_SSL_PORT
);

179 
	`¥ötf
("Öunix:FILE "

183 #ifde‡
HAVE_OPENSSL


184 
	`¥ötf
("PKI configuration (requiredÅo use SSL):\n"

188 i‡(
boŸ°øp
) {

189 
	`¥ötf
(" --bootstrap-ca-cert=FILE file withÖeer CA certificate "

193 
	}
}

207 
	$vc⁄n_›í
(c⁄° *
«me
, 
mö_vîsi⁄
, 
vc⁄n
 **
vc⁄≈
)

209 
size_t
 
¥efix_Àn
;

210 
size_t
 
i
;

212 
	`check_vc⁄n_˛as£s
();

214 *
vc⁄≈
 = 
NULL
;

215 
¥efix_Àn
 = 
	`°rc•n
(
«me
, ":");

216 i‡(
¥efix_Àn
 =
	`°æí
(
«me
)) {

217  
EAFNOSUPPORT
;

219 
i
 = 0; i < 
	`ARRAY_SIZE
(
vc⁄n_˛as£s
); i++) {

220 
vc⁄n_˛ass
 *
˛ass
 = 
vc⁄n_˛as£s
[
i
];

221 i‡(
	`°æí
(
˛ass
->
«me
Ë=
¥efix_Àn


222 && !
	`memcmp
(
˛ass
->
«me
,Çame, 
¥efix_Àn
)) {

223 
vc⁄n
 *vconn;

224 *
suffix_c›y
 = 
	`x°rdup
(
«me
 + 
¥efix_Àn
 + 1);

225 
ªtvÆ
 = 
˛ass
->
	`›í
(
«me
, 
suffix_c›y
, &
vc⁄n
);

226 
	`‰ì
(
suffix_c›y
);

227 i‡(!
ªtvÆ
) {

228 
	`as£π
(
vc⁄n
->
°©e
 !
VCS_CONNECTING


229 || 
vc⁄n
->
˛ass
->
c⁄√˘
);

230 
vc⁄n
->
mö_vîsi⁄
 = min_version;

231 *
vc⁄≈
 = 
vc⁄n
;

233  
ªtvÆ
;

236  
EAFNOSUPPORT
;

237 
	}
}

240 
	$vc⁄n_›í_block
(c⁄° *
«me
, 
mö_vîsi⁄
, 
vc⁄n
 **
vc⁄≈
)

242 
vc⁄n
 *vconn;

243 
îr‹
;

245 
îr‹
 = 
	`vc⁄n_›í
(
«me
, 
mö_vîsi⁄
, &
vc⁄n
);

246 
îr‹
 =
EAGAIN
) {

247 
	`vc⁄n_c⁄√˘_waô
(
vc⁄n
);

248 
	`pﬁl_block
();

249 
îr‹
 = 
	`vc⁄n_c⁄√˘
(
vc⁄n
);

250 
	`as£π
(
îr‹
 !
EINPROGRESS
);

252 i‡(
îr‹
) {

253 
	`vc⁄n_˛o£
(
vc⁄n
);

254 *
vc⁄≈
 = 
NULL
;

256 *
vc⁄≈
 = 
vc⁄n
;

258  
îr‹
;

259 
	}
}

263 
	$vc⁄n_˛o£
(
vc⁄n
 *vconn)

265 i‡(
vc⁄n
 !
NULL
) {

266 *
«me
 = 
vc⁄n
->name;

267 (
vc⁄n
->
˛ass
->
˛o£
)(vconn);

268 
	`‰ì
(
«me
);

270 
	}
}

274 
	$vc⁄n_gë_«me
(c⁄° 
vc⁄n
 *vconn)

276  
vc⁄n
->
«me
;

277 
	}
}

281 
uöt32_t


282 
	$vc⁄n_gë_ù
(c⁄° 
vc⁄n
 *vconn)

284  
vc⁄n
->
ù
;

285 
	}
}

294 
boﬁ


295 
	$vc⁄n_is_ªc⁄√˘abÀ
(c⁄° 
vc⁄n
 *vconn)

297  
vc⁄n
->
ªc⁄√˘abÀ
;

298 
	}
}

301 
	$vcs_c⁄√˘ög
(
vc⁄n
 *vconn)

303 
ªtvÆ
 = (
vc⁄n
->
˛ass
->
c⁄√˘
)(vconn);

304 
	`as£π
(
ªtvÆ
 !
EINPROGRESS
);

305 i‡(!
ªtvÆ
) {

306 
vc⁄n
->
°©e
 = 
VCS_SEND_HELLO
;

307 } i‡(
ªtvÆ
 !
EAGAIN
) {

308 
vc⁄n
->
°©e
 = 
VCS_DISCONNECTED
;

309 
vc⁄n
->
îr‹
 = 
ªtvÆ
;

311 
	}
}

314 
	$vcs_£nd_hñlo
(
vc⁄n
 *vconn)

316 
oÂbuf
 *
b
;

317 
ªtvÆ
;

319 
	`make_›íÊow
((
oÂ_hódî
), 
OFPT_HELLO
, &
b
);

320 
ªtvÆ
 = 
	`do_£nd
(
vc⁄n
, 
b
);

321 i‡(!
ªtvÆ
) {

322 ++
vc⁄n
->
oÂs_£¡
.
oÂs_tŸÆ
;

323 ++
vc⁄n
->
oÂs_£¡
.
oÂs_hñlo
;

324 
vc⁄n
->
°©e
 = 
VCS_RECV_HELLO
;

326 
	`oÂbuf_dñëe
(
b
);

327 i‡(
ªtvÆ
 !
EAGAIN
) {

328 
vc⁄n
->
°©e
 = 
VCS_DISCONNECTED
;

329 
vc⁄n
->
îr‹
 = 
ªtvÆ
;

332 
	}
}

335 
	$vcs_ªcv_hñlo
(
vc⁄n
 *vconn)

337 
oÂbuf
 *
b
;

338 
ªtvÆ
;

340 
ªtvÆ
 = 
	`do_ªcv
(
vc⁄n
, &
b
);

341 i‡(!
ªtvÆ
) {

342 
oÂ_hódî
 *
oh
 = 
b
->
d©a
;

344 i‡(
oh
->
ty≥
 =
OFPT_HELLO
) {

345 i‡(
b
->
size
 >  *
oh
) {

346 
ds
 
msg
 = 
DS_EMPTY_INITIALIZER
;

347 
	`ds_put_f‹m©
(&
msg
, "%s:Éxåa-l⁄g hñlo:\n", 
vc⁄n
->
«me
);

348 
	`ds_put_hex_dump
(&
msg
, 
b
->
d©a
, b->
size
, 0, 
åue
);

349 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "%s", 
	`ds_c°r
(&
msg
));

350 
	`ds_de°roy
(&
msg
);

353 
vc⁄n
->
vîsi⁄
 = 
	`MIN
(
OFP_VERSION
, 
oh
->version);

354 i‡(
vc⁄n
->
vîsi⁄
 < vc⁄n->
mö_vîsi⁄
) {

355 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "%s: versionÇegotiation failed: we support "

357 "suµ‹t†nÿœã∏th™ vîsi⁄ 0x%02"
PRIx8
,

358 
vc⁄n
->
«me
, vc⁄n->
mö_vîsi⁄
, 
OFP_VERSION
,

359 
oh
->
vîsi⁄
);

360 
vc⁄n
->
°©e
 = 
VCS_SEND_ERROR
;

362 
	`VLOG_DBG
(
LOG_MODULE
, "%s:Çegotiated OpenFlow version 0x%02x "

364 "≥îÇÿœã∏th™ vîsi⁄ 0x%02"
PRIx8
")",

365 
vc⁄n
->
«me
, vc⁄n->
vîsi⁄
, vc⁄n->
mö_vîsi⁄
,

366 
OFP_VERSION
, 
oh
->
vîsi⁄
);

367 
vc⁄n
->
°©e
 = 
VCS_CONNECTED
;

369 ++
vc⁄n
->
oÂs_rcvd
.
oÂs_tŸÆ
;

370 ++
vc⁄n
->
oÂs_rcvd
.
oÂs_hñlo
;

371 
	`oÂbuf_dñëe
(
b
);

374 
oÊ_msg_hódî
 *
msg
;

375 *
°r
;

377 i‡(!
	`oÊ_msg_u≈ack
(
b
->
d©a
, b->
size
, &
msg
, 
NULL
 , &
oÊ_exp
)) {

378 
°r
 = 
	`oÊ_msg_to_°rög
(
msg
, &
oÊ_exp
);

379 
	`oÊ_msg_‰ì
(
msg
, &
oÊ_exp
);

381 
ds
 
°rög
 = 
DS_EMPTY_INITIALIZER
;

382 
	`ds_put_c°r
(&
°rög
, "\n");

383 
	`ds_put_hex_dump
(&
°rög
, 
b
->
d©a
, 
	`MIN
(b->
size
, 1024), 0, 
Ál£
);

384 
°r
 = 
	`ds_c°r
(&
°rög
);

386 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "%s:Ñeceived message whileÉxpecting hello: %s",

387 
vc⁄n
->
«me
, 
°r
);

389 
	`‰ì
(
°r
);

391 
ªtvÆ
 = 
EPROTO
;

392 
	`oÂbuf_dñëe
(
b
);

396 i‡(
ªtvÆ
 !
EAGAIN
) {

397 
vc⁄n
->
°©e
 = 
VCS_DISCONNECTED
;

398 
vc⁄n
->
îr‹
 = 
ªtvÆ
;

400 
	}
}

403 
	$vcs_£nd_îr‹
(
vc⁄n
 *vconn)

405 
oÂ_îr‹_msg
 *
îr‹
;

406 
oÂbuf
 *
b
;

407 
s
[128];

408 
ªtvÆ
;

410 
	`¢¥ötf
(
s
,  s, "We support versions 0x%02xÅo 0x%02x inclusive but "

411 "you suµ‹ànÿœã∏th™ vîsi⁄ 0x%02"
PRIx8
".",

412 
vc⁄n
->
mö_vîsi⁄
, 
OFP_VERSION
, vc⁄n->
vîsi⁄
);

413 
îr‹
 = 
	`make_›íÊow
( *îr‹, 
OFPT_ERROR
, &
b
);

414 
îr‹
->
ty≥
 = 
	`ht⁄s
(
OFPET_HELLO_FAILED
);

415 
îr‹
->
code
 = 
	`ht⁄s
(
OFPHFC_INCOMPATIBLE
);

416 
	`oÂbuf_put
(
b
, 
s
, 
	`°æí
(s));

417 
	`upd©e_›íÊow_Àngth
(
b
);

418 
ªtvÆ
 = 
	`do_£nd
(
vc⁄n
, 
b
);

419 i‡(
ªtvÆ
) {

420 ++
vc⁄n
->
oÂs_£¡
.
oÂs_tŸÆ
;

421 ++
vc⁄n
->
oÂs_£¡
.
oÂs_îr‹
;

422 ++
vc⁄n
->
oÂs_£¡
.
oÂs_îr‹_ty≥
.
hñlo_Áû
;

423 ++
vc⁄n
->
oÂs_£¡
.
oÂs_îr‹_code
.
hf_öcom∑t
;

424 
	`oÂbuf_dñëe
(
b
);

426 i‡(
ªtvÆ
 !
EAGAIN
) {

427 
vc⁄n
->
°©e
 = 
VCS_DISCONNECTED
;

428 
vc⁄n
->
îr‹
 = 
ªtvÆ
 ?ÑëvÆ : 
EPROTO
;

430 
	}
}

437 
	$vc⁄n_c⁄√˘
(
vc⁄n
 *vconn)

439 
vc⁄n_°©e
 
œ°_°©e
;

441 
	`as£π
(
vc⁄n
->
mö_vîsi⁄
 >= 0);

443 
œ°_°©e
 = 
vc⁄n
->
°©e
;

444 
vc⁄n
->
°©e
) {

445 
VCS_CONNECTING
:

446 
	`vcs_c⁄√˘ög
(
vc⁄n
);

449 
VCS_SEND_HELLO
:

450 
	`vcs_£nd_hñlo
(
vc⁄n
);

453 
VCS_RECV_HELLO
:

454 
	`vcs_ªcv_hñlo
(
vc⁄n
);

457 
VCS_CONNECTED
:

460 
VCS_SEND_ERROR
:

461 
	`vcs_£nd_îr‹
(
vc⁄n
);

464 
VCS_DISCONNECTED
:

465  
vc⁄n
->
îr‹
;

468 
	`NOT_REACHED
();

470 } 
vc⁄n
->
°©e
 !
œ°_°©e
);

472  
EAGAIN
;

473 
	}
}

484 
	$vc⁄n_ªcv
(
vc⁄n
 *vc⁄n, 
oÂbuf
 **
msgp
)

486 
ªtvÆ
 = 
	`vc⁄n_c⁄√˘
(
vc⁄n
);

487 i‡(!
ªtvÆ
) {

488 
ªtvÆ
 = 
	`do_ªcv
(
vc⁄n
, 
msgp
);

490  
ªtvÆ
;

491 
	}
}

494 
	$do_ªcv
(
vc⁄n
 *vc⁄n, 
oÂbuf
 **
msgp
)

496 
ªtvÆ
;

498 
agaö
:

499 
ªtvÆ
 = (
vc⁄n
->
˛ass
->
ªcv
)(vc⁄n, 
msgp
);

500 i‡(!
ªtvÆ
) {

501 
oÂ_hódî
 *
oh
;

504 
oÊ_msg_hódî
 *
msg
;

505 *
°r
;

507 i‡(!
	`oÊ_msg_u≈ack
((*
msgp
)->
d©a
, (*msgp)->
size
, &
msg
, 
NULL
 , &
oÊ_exp
)) {

508 
°r
 = 
	`oÊ_msg_to_°rög
(
msg
, &
oÊ_exp
);

509 
	`oÊ_msg_‰ì
(
msg
, &
oÊ_exp
);

511 
ds
 
°rög
 = 
DS_EMPTY_INITIALIZER
;

512 
	`ds_put_c°r
(&
°rög
, "\n");

513 
	`ds_put_hex_dump
(&
°rög
, (*
msgp
)->
d©a
, 
	`MIN
((*msgp)->
size
, 1024), 0, 
Ál£
);

514 
°r
 = 
	`ds_c°r
(&
°rög
);

516 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "%s:Ñe˚ived: %.400s", 
vc⁄n
->
«me
, 
°r
);

518 
	`‰ì
(
°r
);

521 
oh
 = 
	`oÂbuf_©_as£π
(*
msgp
, 0,  *oh);

523 i‡(
oh
->
vîsi⁄
 !
vc⁄n
->version

524 && 
oh
->
ty≥
 !
OFPT_HELLO


525 && 
oh
->
ty≥
 !
OFPT_ERROR


526 && 
oh
->
ty≥
 !
OFPT_ECHO_REQUEST


527 && 
oh
->
ty≥
 !
OFPT_ECHO_REPLY


528 && 
oh
->
ty≥
 !
OFPT_EXPERIMENTER
)

530 i‡(
vc⁄n
->
vîsi⁄
 < 0) {

531 i‡(
oh
->
ty≥
 =
OFPT_PACKET_IN


532 || 
oh
->
ty≥
 =
OFPT_FLOW_REMOVED


533 || 
oh
->
ty≥
 =
OFPT_PORT_STATUS
) {

542 
	`oÂbuf_dñëe
(*
msgp
);

543 
agaö
;

545 
	`VLOG_ERR_RL
(
LOG_MODULE
, &
æ
, "%s:Ñe˚ived O≥nFlow mesßgêty≥ %"
PRIu8
" "

547 
vc⁄n
->
«me
, 
oh
->
ty≥
);

549 
	`VLOG_ERR_RL
(
LOG_MODULE
, &
æ
, "%s:Ñe˚ived O≥nFlow vîsi⁄ 0x%02"
PRIx8
" "

551 
vc⁄n
->
«me
, 
oh
->
vîsi⁄
, vconn->version);

553 
	`oÂbuf_dñëe
(*
msgp
);

554 
ªtvÆ
 = 
EPROTO
;

557 i‡(
ªtvÆ
) {

558 *
msgp
 = 
NULL
;

560  
ªtvÆ
;

561 
	}
}

575 
	$vc⁄n_£nd
(
vc⁄n
 *vc⁄n, 
oÂbuf
 *
msg
)

577 
ªtvÆ
 = 
	`vc⁄n_c⁄√˘
(
vc⁄n
);

578 i‡(!
ªtvÆ
) {

579 
ªtvÆ
 = 
	`do_£nd
(
vc⁄n
, 
msg
);

581  
ªtvÆ
;

582 
	}
}

585 
	$do_£nd
(
vc⁄n
 *vc⁄n, 
oÂbuf
 *
buf
)

587 
ªtvÆ
;

589 
	`as£π
(
buf
->
size
 >(
oÂ_hódî
));

590 
	`as£π
(((
oÂ_hódî
 *Ë
buf
->
d©a
)->
Àngth
 =
	`ht⁄s
(buf->
size
));

591 i‡(!
	`VLOG_IS_DBG_ENABLED
(
LOG_MODULE
)) {

592 
ªtvÆ
 = (
vc⁄n
->
˛ass
->
£nd
)(vc⁄n, 
buf
);

594 
oÊ_msg_hódî
 *
msg
;

595 *
°r
;

597 i‡(!
	`oÊ_msg_u≈ack
(
buf
->
d©a
, buf->
size
, &
msg
, 
NULL
 , &
oÊ_exp
)) {

598 
°r
 = 
	`oÊ_msg_to_°rög
(
msg
, &
oÊ_exp
);

599 
	`oÊ_msg_‰ì
(
msg
, &
oÊ_exp
);

601 
ds
 
°rög
 = 
DS_EMPTY_INITIALIZER
;

602 
	`ds_put_c°r
(&
°rög
, "\n");

603 
	`ds_put_hex_dump
(&
°rög
, 
buf
->
d©a
, 
	`MIN
(buf->
size
, 1024), 0, 
Ál£
);

604 
°r
 = 
	`ds_c°r
(&
°rög
);

607 
ªtvÆ
 = (
vc⁄n
->
˛ass
->
£nd
)(vc⁄n, 
buf
);

608 i‡(
ªtvÆ
 !
EAGAIN
) {

609 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "%s: sent (%s): %.400s",

610 
vc⁄n
->
«me
, 
	`°ªº‹
(
ªtvÆ
), 
°r
);

613 
	`‰ì
(
°r
);

615  
ªtvÆ
;

616 
	}
}

620 
	$vc⁄n_£nd_block
(
vc⁄n
 *vc⁄n, 
oÂbuf
 *
msg
)

622 
ªtvÆ
;

623 (
ªtvÆ
 = 
	`vc⁄n_£nd
(
vc⁄n
, 
msg
)Ë=
EAGAIN
) {

624 
	`vc⁄n_£nd_waô
(
vc⁄n
);

625 
	`pﬁl_block
();

627  
ªtvÆ
;

628 
	}
}

632 
	$vc⁄n_ªcv_block
(
vc⁄n
 *vc⁄n, 
oÂbuf
 **
msgp
)

634 
ªtvÆ
;

635 (
ªtvÆ
 = 
	`vc⁄n_ªcv
(
vc⁄n
, 
msgp
)Ë=
EAGAIN
) {

636 
	`vc⁄n_ªcv_waô
(
vc⁄n
);

637 
	`pﬁl_block
();

639  
ªtvÆ
;

640 
	}
}

649 
	$vc⁄n_ªcv_xid
(
vc⁄n
 *vc⁄n, 
uöt32_t
 
xid
, 
oÂbuf
 **
ª∂yp
)

652 
uöt32_t
 
ªcv_xid
;

653 
uöt16_t
 
ª∂y_Êag
;

654 
uöt8_t
 
ty≥
;

655 
oÂbuf
 *
ª∂y
;

656 
îr‹
;

658 
îr‹
 = 
	`vc⁄n_ªcv_block
(
vc⁄n
, &
ª∂y
);

659 i‡(
îr‹
) {

660 *
ª∂yp
 = 
NULL
;

661  
îr‹
;

667 
ty≥
 = ((
oÂ_hódî
*Ë
ª∂y
->
d©a
)->type;

668 i‡(
ty≥
 =
OFPT_MULTIPART_REPLY
 ||Åy≥ =
OFPT_MULTIPART_REQUEST
){

669 
ª∂y_Êag
 = ((
oÂ_mu…ù¨t_ª∂y
 *Ë
ª∂y
->
d©a
)->
Êags
;

671 
	`¡ohs
(
ª∂y_Êag
Ë=
OFPMPF_REPLY_MORE
){

672 
îr‹
 = 
	`vc⁄n_ªcv_block
(
vc⁄n
, &
ª∂y
);

673 
ª∂y_Êag
 = ((
oÂ_mu…ù¨t_ª∂y
 *Ë
ª∂y
->
d©a
)->
Êags
;

676 
ªcv_xid
 = ((
oÂ_hódî
 *Ë
ª∂y
->
d©a
)->
xid
;

677 i‡(
xid
 =
ªcv_xid
) {

678 *
ª∂yp
 = 
ª∂y
;

682 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "%s:Ñe˚ivedÑïly wôh xid %08"
PRIx32
" !=Éxpected "

683 "%08"
PRIx32
, 
vc⁄n
->
«me
, 
ªcv_xid
, 
xid
);

684 
	`oÂbuf_dñëe
(
ª∂y
);

686 
	}
}

695 
	$vc⁄n_å™ß˘
(
vc⁄n
 *vc⁄n, 
oÂbuf
 *
ªque°
,

696 
oÂbuf
 **
ª∂yp
)

698 
uöt32_t
 
£nd_xid
 = ((
oÂ_hódî
 *Ë
ªque°
->
d©a
)->
xid
;

699 
îr‹
;

701 *
ª∂yp
 = 
NULL
;

702 
îr‹
 = 
	`vc⁄n_£nd_block
(
vc⁄n
, 
ªque°
);

703 i‡(
îr‹
) {

704 
	`oÂbuf_dñëe
(
ªque°
);

706  
îr‹
 ?Éº‹ : 
	`vc⁄n_ªcv_xid
(
vc⁄n
, 
£nd_xid
, 
ª∂yp
);

707 
	}
}

710 
	$vc⁄n_waô
(
vc⁄n
 *vc⁄n, 
vc⁄n_waô_ty≥
 
waô
)

712 
	`as£π
(
waô
 =
WAIT_CONNECT
 || waô =
WAIT_RECV
 || waô =
WAIT_SEND
);

714 
vc⁄n
->
°©e
) {

715 
VCS_CONNECTING
:

716 
waô
 = 
WAIT_CONNECT
;

719 
VCS_SEND_HELLO
:

720 
VCS_SEND_ERROR
:

721 
waô
 = 
WAIT_SEND
;

724 
VCS_RECV_HELLO
:

725 
waô
 = 
WAIT_RECV
;

728 
VCS_CONNECTED
:

731 
VCS_DISCONNECTED
:

732 
	`pﬁl_immedüã_wake
();

735 (
vc⁄n
->
˛ass
->
waô
)(vconn, wait);

736 
	}
}

739 
	$vc⁄n_c⁄√˘_waô
(
vc⁄n
 *vconn)

741 
	`vc⁄n_waô
(
vc⁄n
, 
WAIT_CONNECT
);

742 
	}
}

745 
	$vc⁄n_ªcv_waô
(
vc⁄n
 *vconn)

747 
	`vc⁄n_waô
(
vc⁄n
, 
WAIT_RECV
);

748 
	}
}

751 
	$vc⁄n_£nd_waô
(
vc⁄n
 *vconn)

753 
	`vc⁄n_waô
(
vc⁄n
, 
WAIT_SEND
);

754 
	}
}

764 
	$pvc⁄n_›í
(c⁄° *
«me
, 
pvc⁄n
 **
pvc⁄≈
)

766 
size_t
 
¥efix_Àn
;

767 
size_t
 
i
;

769 
	`check_vc⁄n_˛as£s
();

771 *
pvc⁄≈
 = 
NULL
;

772 
¥efix_Àn
 = 
	`°rc•n
(
«me
, ":");

773 i‡(
¥efix_Àn
 =
	`°æí
(
«me
)) {

774  
EAFNOSUPPORT
;

776 
i
 = 0; i < 
	`ARRAY_SIZE
(
pvc⁄n_˛as£s
); i++) {

777 
pvc⁄n_˛ass
 *
˛ass
 = 
pvc⁄n_˛as£s
[
i
];

778 i‡(
	`°æí
(
˛ass
->
«me
Ë=
¥efix_Àn


779 && !
	`memcmp
(
˛ass
->
«me
,Çame, 
¥efix_Àn
)) {

780 *
suffix_c›y
 = 
	`x°rdup
(
«me
 + 
¥efix_Àn
 + 1);

781 
ªtvÆ
 = 
˛ass
->
	`li°í
(
«me
, 
suffix_c›y
, 
pvc⁄≈
);

782 
	`‰ì
(
suffix_c›y
);

783 i‡(
ªtvÆ
) {

784 *
pvc⁄≈
 = 
NULL
;

786  
ªtvÆ
;

789  
EAFNOSUPPORT
;

790 
	}
}

794 
	$pvc⁄n_˛o£
(
pvc⁄n
 *pvconn)

796 i‡(
pvc⁄n
 !
NULL
) {

797 *
«me
 = 
pvc⁄n
->name;

798 (
pvc⁄n
->
˛ass
->
˛o£
)(pvconn);

799 
	`‰ì
(
«me
);

801 
	}
}

814 
	$pvc⁄n_ac˚±
(
pvc⁄n
 *pvc⁄n, 
mö_vîsi⁄
, 
vc⁄n
 **
√w_vc⁄n
)

816 
ªtvÆ
 = (
pvc⁄n
->
˛ass
->
ac˚±
)’vc⁄n, 
√w_vc⁄n
);

817 i‡(
ªtvÆ
) {

818 *
√w_vc⁄n
 = 
NULL
;

820 
	`as£π
((*
√w_vc⁄n
)->
°©e
 !
VCS_CONNECTING


821 || (*
√w_vc⁄n
)->
˛ass
->
c⁄√˘
);

822 (*
√w_vc⁄n
)->
mö_vîsi⁄
 = min_version;

824  
ªtvÆ
;

825 
	}
}

828 
	$pvc⁄n_waô
(
pvc⁄n
 *pvconn)

830 (
pvc⁄n
->
˛ass
->
waô
)(pvconn);

831 
	}
}

834 
	$vc⁄n_öô
(
vc⁄n
 *vc⁄n, 
vc⁄n_˛ass
 *
˛ass
, 
c⁄√˘_°©us
,

835 
uöt32_t
 
ù
, c⁄° *
«me
, 
boﬁ
 
ªc⁄√˘abÀ
)

837 
vc⁄n
->
˛ass
 = class;

838 
vc⁄n
->
°©e
 = (
c⁄√˘_°©us
 =
EAGAIN
 ? 
VCS_CONNECTING


839 : !
c⁄√˘_°©us
 ? 
VCS_SEND_HELLO


840 : 
VCS_DISCONNECTED
);

841 
vc⁄n
->
îr‹
 = 
c⁄√˘_°©us
;

842 
vc⁄n
->
vîsi⁄
 = -1;

843 
vc⁄n
->
mö_vîsi⁄
 = -1;

844 
vc⁄n
->
ù
 = ip;

845 
vc⁄n
->
«me
 = 
	`x°rdup
(name);

846 
vc⁄n
->
ªc⁄√˘abÀ
 =Ñeconnectable;

847 
	`mem£t
(&
vc⁄n
->
oÂs_rcvd
, 0, (vconn->ofps_rcvd));

848 
	`mem£t
(&
vc⁄n
->
oÂs_£¡
, 0, (vconn->ofps_sent));

849 
	}
}

852 
	$pvc⁄n_öô
(
pvc⁄n
 *pvc⁄n, 
pvc⁄n_˛ass
 *
˛ass
,

853 c⁄° *
«me
)

855 
pvc⁄n
->
˛ass
 = class;

856 
pvc⁄n
->
«me
 = 
	`x°rdup
(name);

857 
	}
}

	@lib/vconn.h

34 #i‚de‡
VCONN_H


35 
	#VCONN_H
 1

	)

37 
	~<°dboﬁ.h
>

38 
	~<°ddef.h
>

39 
	~<°döt.h
>

41 
	goÂbuf
;

42 
	gÊow
;

43 
	goÂ_hódî
;

44 
	goÂ_mu…ù¨t_ª∂y
;

45 
	gpvc⁄n
;

46 
	gvc⁄n
;

48 
vc⁄n_ußge
(
boﬁ
 
a˘ive
, boﬁ 
∑ssive
, boﬁ 
boŸ°øp
);

51 
vc⁄n_›í
(c⁄° *
«me
, 
mö_vîsi⁄
, 
vc⁄n
 **);

52 
vc⁄n_˛o£
(
vc⁄n
 *);

53 c⁄° *
vc⁄n_gë_«me
(c⁄° 
vc⁄n
 *);

54 
uöt32_t
 
vc⁄n_gë_ù
(c⁄° 
vc⁄n
 *);

55 
boﬁ
 
vc⁄n_is_ªc⁄√˘abÀ
(c⁄° 
vc⁄n
 *);

56 
vc⁄n_c⁄√˘
(
vc⁄n
 *);

57 
vc⁄n_ªcv
(
vc⁄n
 *, 
oÂbuf
 **);

58 
vc⁄n_£nd
(
vc⁄n
 *, 
oÂbuf
 *);

59 
vc⁄n_ªcv_xid
(
vc⁄n
 *, 
uöt32_t
 
xid
, 
oÂbuf
 **);

60 
vc⁄n_å™ß˘
(
vc⁄n
 *, 
oÂbuf
 *, ofpbuf **);

62 
vc⁄n_›í_block
(c⁄° *
«me
, 
mö_vîsi⁄
, 
vc⁄n
 **);

63 
vc⁄n_£nd_block
(
vc⁄n
 *, 
oÂbuf
 *);

64 
vc⁄n_ªcv_block
(
vc⁄n
 *, 
oÂbuf
 **);

66 
	evc⁄n_waô_ty≥
 {

67 
	mWAIT_CONNECT
,

68 
	mWAIT_RECV
,

69 
	mWAIT_SEND


71 
vc⁄n_waô
(
vc⁄n
 *, 
vc⁄n_waô_ty≥
);

72 
vc⁄n_c⁄√˘_waô
(
vc⁄n
 *);

73 
vc⁄n_ªcv_waô
(
vc⁄n
 *);

74 
vc⁄n_£nd_waô
(
vc⁄n
 *);

77 
pvc⁄n_›í
(c⁄° *
«me
, 
pvc⁄n
 **);

78 
pvc⁄n_˛o£
(
pvc⁄n
 *);

79 
pvc⁄n_ac˚±
(
pvc⁄n
 *, 
mö_vîsi⁄
, 
vc⁄n
 **);

80 
pvc⁄n_waô
(
pvc⁄n
 *);

	@lib/vlog-socket.c

34 
	~<c⁄fig.h
>

35 
	~"vlog-sockë.h
"

36 
	~<˘y≥.h
>

37 
	~<î∫o.h
>

38 
	~<sys/un.h
>

39 
	~<f˙é.h
>

40 
	~<pﬁl.h
>

41 
	~<°dlib.h
>

42 
	~<°rög.h
>

43 
	~<sys/sockë.h
>

44 
	~<sys/°©.h
>

45 
	~<sys/ty≥s.h
>

46 
	~<uni°d.h
>

47 
	~"d´m⁄.h
"

48 
	~"Áèl-sig«l.h
"

49 
	~"pﬁl-lo›.h
"

50 
	~"sockë-utû.h
"

51 
	~"timevÆ.h
"

52 
	~"utû.h
"

54 #i‚de‡
SCM_CREDENTIALS


55 
	~<time.h
>

58 
	#LOG_MODULE
 
VLM_vlog_sockë


	)

59 
	~"vlog.h
"

62 
	svlog_£rvî
 {

63 
pﬁl_waôî
 *
	mwaôî
;

64 *
	m∑th
;

65 
	mfd
;

68 
pﬁl_£rvî
(
fd
, 
evíts
, *
£rvî_
);

90 
	$vlog_£rvî_li°í
(c⁄° *
∑th
, 
vlog_£rvî
 **
£rvîp
)

92 
vlog_£rvî
 *
£rvî
 = 
	`xmÆloc
( *server);

94 i‡(
∑th
 &&Öath[0] == '/') {

95 
£rvî
->
∑th
 = 
	`x°rdup
(path);

97 
£rvî
->
∑th
 = 
	`xa•rötf
("/tmp/vlogs.%ld%s",

98 (Ë
	`gëpid
(), 
∑th
 ?Öath : "");

101 
£rvî
->
fd
 = 
	`make_unix_sockë
(
SOCK_DGRAM
, 
åue
,Årue, sîvî->
∑th
, 
NULL
);

102 i‡(
£rvî
->
fd
 < 0) {

103 
fd
 = 
£rvî
->fd;

104 
	`Ârötf
(
°dîr
, "CouldÇot initialize vlog configuration socket: %s\n",

105 
	`°ªº‹
(-
£rvî
->
fd
));

106 
	`‰ì
(
£rvî
->
∑th
);

107 
	`‰ì
(
£rvî
);

108 i‡(
£rvîp
) {

109 *
£rvîp
 = 
NULL
;

111  
fd
;

114 
£rvî
->
waôî
 = 
	`pﬁl_fd_ˇŒback
(£rvî->
fd
, 
POLLIN
, 
pﬁl_£rvî
, server);

116 i‡(
£rvîp
) {

117 *
£rvîp
 = 
£rvî
;

120 
	}
}

124 
	$vlog_£rvî_˛o£
(
vlog_£rvî
 *
£rvî
)

126 i‡(
£rvî
) {

127 
	`pﬁl_ˇn˚l
(
£rvî
->
waôî
);

128 
	`˛o£
(
£rvî
->
fd
);

129 
	`u∆ök
(
£rvî
->
∑th
);

130 
	`Áèl_sig«l_ªmove_fûe_to_u∆ök
(
£rvî
->
∑th
);

131 
	`‰ì
(
£rvî
->
∑th
);

132 
	`‰ì
(
£rvî
);

134 
	}
}

137 
	$ªcv_wôh_¸eds
(c⁄° 
vlog_£rvî
 *
£rvî
,

138 *
cmd_buf
, 
size_t
 
cmd_buf_size
,

139 
sockaddr_un
 *
un
, 
sockÀn_t
 *
un_Àn
)

141 #ifde‡
SCM_CREDENTIALS


143 
¸ed_buf
[
	`CMSG_SPACE
((
u¸ed
))];

144 
ssize_t
 
n
;

145 
iovec
 
iov
;

146 
msghdr
 
msg
;

147 
u¸ed
* 
¸ed
;

148 
cmsghdr
* 
cmsg
;

150 
iov
.
iov_ba£
 = 
cmd_buf
;

151 
iov
.
iov_Àn
 = 
cmd_buf_size
 - 1;

153 
	`mem£t
(&
msg
, 0,  msg);

154 
msg
.
msg_«me
 = 
un
;

155 
msg
.
msg_«mñí
 =  *
un
;

156 
msg
.
msg_iov
 = &
iov
;

157 
msg
.
msg_iovÀn
 = 1;

158 
msg
.
msg_c⁄åﬁ
 = 
¸ed_buf
;

159 
msg
.
msg_c⁄åﬁÀn
 =  
¸ed_buf
;

161 
n
 = 
	`ªcvmsg
(
£rvî
->
fd
, &
msg
, 0);

162 *
un_Àn
 = 
msg
.
msg_«mñí
;

163 i‡(
n
 < 0) {

164  
î∫o
;

166 
cmd_buf
[
n
] = '\0';

170 
¸ed
 = 
NULL
;

171 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msg
); cmsg !
NULL
;

172 
cmsg
 = 
	`CMSG_NXTHDR
(&
msg
, cmsg)) {

173 i‡(
cmsg
->
cmsg_Àvñ
 =
SOL_SOCKET


174 && 
cmsg
->
cmsg_ty≥
 =
SCM_CREDENTIALS
) {

175 
¸ed
 = (
u¸ed
 *Ë
	`CMSG_DATA
(
cmsg
);

176 } i‡(
cmsg
->
cmsg_Àvñ
 =
SOL_SOCKET


177 && 
cmsg
->
cmsg_ty≥
 =
SCM_RIGHTS
) {

180 * 
fds
 = (*Ë
	`CMSG_DATA
(
cmsg
);

181 
size_t
 
n_fds
 = (
cmsg
->
cmsg_Àn
 - 
	`CMSG_LEN
(0)Ë/  *
fds
;

182 
size_t
 
i
;

183 
i
 = 0; i < 
n_fds
; i++) {

184 
	`˛o£
(
fds
[
i
]);

188 i‡(!
¸ed
) {

189 
	`Ârötf
(
°dîr
, "vlog: config messageÜacks credentials\n");

191 } i‡(
¸ed
->
uid
 && cªd->uid !
	`gëuid
()) {

192 
	`Ârötf
(
°dîr
, "vlog: config message uid=%ld isÇot 0 or %ld\n",

193 (Ë
¸ed
->
uid
, (Ë
	`gëuid
());

199 
sockÀn_t
 
Àn
;

200 
ssize_t
 
n
;

201 
°©
 
s
;

202 
time_t
 
ª˚¡
;

205 
Àn
 =  *
un
;

206 
n
 = 
	`ªcv‰om
(
£rvî
->
fd
, 
cmd_buf
, 
cmd_buf_size
 - 1, 0,

207 (
sockaddr
 *Ë
un
, &
Àn
);

208 *
un_Àn
 = 
Àn
;

209 i‡(
n
 < 0) {

210  
î∫o
;

212 
cmd_buf
[
n
] = '\0';

214 
Àn
 -
	`off£tof
(
sockaddr_un
, 
sun_∑th
);

215 
un
->
sun_∑th
[
Àn
] = '\0';

216 i‡(
	`°©
(
un
->
sun_∑th
, &
s
) < 0) {

217 
	`Ârötf
(
°dîr
, "vlog: config message from inaccessible socket: %s\n",

218 
	`°ªº‹
(
î∫o
));

221 i‡(!
	`S_ISSOCK
(
s
.
°_mode
)) {

222 
	`Ârötf
(
°dîr
, "vlog: config messageÇot fromá socket\n");

225 
ª˚¡
 = 
	`time_now
() - 30;

226 i‡(
s
.
°_©ime
 < 
ª˚¡
 || s.
°_˘ime
 <Ñe˚¡ || s.
°_mtime
 <Ñecent) {

227 
	`Ârötf
(
°dîr
, "vlog: config socketÅoo old\n");

230 i‡(
s
.
°_uid
 && s.°_uid !
	`gëuid
()) {

231 
	`Ârötf
(
°dîr
, "vlog: config message uid=%ld isÇot 0 or %ld\n",

232 (Ë
s
.
°_uid
, (Ë
	`gëuid
());

237 
	}
}

241 
	$pﬁl_£rvî
(
fd
 
UNUSED
, 
evíts
 UNUSED, *
£rvî_
)

243 
vlog_£rvî
 *
£rvî
 = 
£rvî_
;

245 
cmd_buf
[512];

246 
sockaddr_un
 
un
;

247 
sockÀn_t
 
un_Àn
;

248 *
ª∂y
;

249 
îr‹
;

251 
îr‹
 = 
	`ªcv_wôh_¸eds
(
£rvî
, 
cmd_buf
,  cmd_buf, &
un
, &
un_Àn
);

252 i‡(
îr‹
 > 0) {

253 i‡(
îr‹
 !
EAGAIN
 &&Éº‹ !
EWOULDBLOCK
) {

254 
	`Ârötf
(
°dîr
, "vlog:Ñeading configuration socket: %s",

255 
	`°ªº‹
(
î∫o
));

258 } i‡(
îr‹
 < 0) {

263 i‡(!
	`°∫cmp
(
cmd_buf
, "set ", 4)) {

264 *
msg
 = 
	`vlog_£t_Àvñs_‰om_°rög
(
cmd_buf
 + 4);

265 
ª∂y
 = 
msg
 ? msg : 
	`x°rdup
("ack");

266 } i‡(!
	`°rcmp
(
cmd_buf
, "list")) {

267 
ª∂y
 = 
	`vlog_gë_Àvñs
();

268 } i‡(!
	`°rcmp
(
cmd_buf
, "reopen")) {

269 
îr‹
 = 
	`vlog_ª›í_log_fûe
();

270 
ª∂y
 = (
îr‹


271 ? 
	`xa•rötf
("couldÇotÑeopenÜog file \"%s\": %s",

272 
	`vlog_gë_log_fûe
(), 
	`°ªº‹
(
îr‹
))

273 : 
	`x°rdup
("ack"));

275 
ª∂y
 = 
	`x°rdup
("nak");

277 
	`£ndto
(
£rvî
->
fd
, 
ª∂y
, 
	`°æí
(reply), 0,

278 (
sockaddr
*Ë&
un
, 
un_Àn
);

279 
	`‰ì
(
ª∂y
);

281 
£rvî
->
waôî
 = 
	`pﬁl_fd_ˇŒback
(£rvî->
fd
, 
POLLIN
, 
pﬁl_£rvî
, server);

282 
	}
}

286 
	svlog_˛õ¡
 {

287 *
	mc⁄√˘_∑th
;

288 *
	mböd_∑th
;

289 
	mfd
;

308 
	$vlog_˛õ¡_c⁄√˘
(c⁄° *
∑th
, 
vlog_˛õ¡
 **
˛õ¡p
)

310 
cou¡î
;

311 
vlog_˛õ¡
 *
˛õ¡
;

312 
°©
 
s
;

313 
îr‹
;

315 
˛õ¡
 = 
	`xmÆloc
( *client);

316 i‡(
∑th
[0] == '/') {

317 
˛õ¡
->
c⁄√˘_∑th
 = 
	`x°rdup
(
∑th
);

318 } i‡(
	`isdigô
((Ë
∑th
[0])) {

319 
˛õ¡
->
c⁄√˘_∑th
 = 
	`xa•rötf
("/tmp/vlogs.%s", 
∑th
);

321 
˛õ¡
->
c⁄√˘_∑th
 = 
	`make_pidfûe_«me
(
∑th
);

323 
˛õ¡
->
böd_∑th
 = 
NULL
;

325 i‡(
	`°©
(
˛õ¡
->
c⁄√˘_∑th
, &
s
)) {

326 
îr‹
 = 
î∫o
;

327 
	`VLOG_WARN
(
LOG_MODULE
, "couldÇot stat \"%s\": %s",

328 
˛õ¡
->
c⁄√˘_∑th
, 
	`°ªº‹
(
îr‹
));

329 
îr‹
;

330 } i‡(
	`S_ISREG
(
s
.
°_mode
)) {

331 
pid_t
 
pid
 = 
	`ªad_pidfûe
(
˛õ¡
->
c⁄√˘_∑th
);

332 i‡(
pid
 < 0) {

333 
îr‹
 = -
pid
;

334 
	`VLOG_WARN
(
LOG_MODULE
, "couldÇotÑeadÖidfile \"%s\": %s",

335 
˛õ¡
->
c⁄√˘_∑th
, 
	`°ªº‹
(
îr‹
));

336 
îr‹
;

338 
	`‰ì
(
˛õ¡
->
c⁄√˘_∑th
);

339 
˛õ¡
->
c⁄√˘_∑th
 = 
	`xa•rötf
("/tmp/vlogs.%ld", (Ë
pid
);

341 
˛õ¡
->
böd_∑th
 = 
	`xa•rötf
("/tmp/vlog.%ld.%d",

342 (Ë
	`gëpid
(), 
cou¡î
++);

343 
˛õ¡
->
fd
 = 
	`make_unix_sockë
(
SOCK_DGRAM
, 
Ál£
, false,

344 
˛õ¡
->
böd_∑th
, clõ¡->
c⁄√˘_∑th
);

345 i‡(
˛õ¡
->
fd
 < 0) {

346 
îr‹
 = -
˛õ¡
->
fd
;

347 
îr‹
;

349 *
˛õ¡p
 = 
˛õ¡
;

352 
îr‹
:

353 
	`‰ì
(
˛õ¡
->
c⁄√˘_∑th
);

354 
	`‰ì
(
˛õ¡
->
böd_∑th
);

355 
	`‰ì
(
˛õ¡
);

356 *
˛õ¡p
 = 
NULL
;

357  
îr‹
;

358 
	}
}

362 
	$vlog_˛õ¡_˛o£
(
vlog_˛õ¡
 *
˛õ¡
)

364 i‡(
˛õ¡
) {

365 
	`u∆ök
(
˛õ¡
->
böd_∑th
);

366 
	`Áèl_sig«l_ªmove_fûe_to_u∆ök
(
˛õ¡
->
böd_∑th
);

367 
	`‰ì
(
˛õ¡
->
böd_∑th
);

368 
	`‰ì
(
˛õ¡
->
c⁄√˘_∑th
);

369 
	`˛o£
(
˛õ¡
->
fd
);

370 
	`‰ì
(
˛õ¡
);

372 
	}
}

377 
	$vlog_˛õ¡_£nd
(
vlog_˛õ¡
 *
˛õ¡
, c⁄° *
ªque°
)

379 #ifde‡
SCM_CREDENTIALS


380 
u¸ed
 
¸ed
;

381 
iovec
 
iov
;

382 
buf
[
	`CMSG_SPACE
( 
¸ed
)];

383 
msghdr
 
msg
;

384 
cmsghdr
* 
cmsg
;

385 
ssize_t
 
nbyãs
;

387 
¸ed
.
pid
 = 
	`gëpid
();

388 
¸ed
.
uid
 = 
	`gëuid
();

389 
¸ed
.
gid
 = 
	`gëgid
();

391 
iov
.
iov_ba£
 = (*Ë
ªque°
;

392 
iov
.
iov_Àn
 = 
	`°æí
(
ªque°
);

394 
	`mem£t
(&
msg
, 0,  msg);

395 
msg
.
msg_iov
 = &
iov
;

396 
msg
.
msg_iovÀn
 = 1;

397 
msg
.
msg_c⁄åﬁ
 = 
buf
;

398 
msg
.
msg_c⁄åﬁÀn
 =  
buf
;

400 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msg
);

401 
cmsg
->
cmsg_Àvñ
 = 
SOL_SOCKET
;

402 
cmsg
->
cmsg_ty≥
 = 
SCM_CREDENTIALS
;

403 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
( 
¸ed
);

404 
	`mem˝y
(
	`CMSG_DATA
(
cmsg
), &
¸ed
,  cred);

405 
msg
.
msg_c⁄åﬁÀn
 = 
cmsg
->
cmsg_Àn
;

407 
nbyãs
 = 
	`£ndmsg
(
˛õ¡
->
fd
, &
msg
, 0);

409 
ssize_t
 
nbyãs
 = 
	`£nd
(
˛õ¡
->
fd
, 
ªque°
, 
	`°æí
(request), 0);

411 i‡(
nbyãs
 > 0) {

412  
nbyãs
 =
	`°æí
(
ªque°
Ë? 0 : 
ENOBUFS
;

414  
î∫o
;

416 
	}
}

423 
	$vlog_˛õ¡_ªcv
(
vlog_˛õ¡
 *
˛õ¡
, **
ª∂y
)

425 
pﬁlfd
 
pfd
;

426 
nfds
;

427 
buf„r
[65536];

428 
ssize_t
 
nbyãs
;

430 *
ª∂y
 = 
NULL
;

432 
pfd
.
fd
 = 
˛õ¡
->fd;

433 
pfd
.
evíts
 = 
POLLIN
;

434 
nfds
 = 
	`time_pﬁl
(&
pfd
, 1, 1000);

435 i‡(
nfds
 == 0) {

436  
ETIMEDOUT
;

437 } i‡(
nfds
 < 0) {

438  -
nfds
;

441 
nbyãs
 = 
	`ªad
(
˛õ¡
->
fd
, 
buf„r
,  buffer - 1);

442 i‡(
nbyãs
 < 0) {

443  
î∫o
;

445 
buf„r
[
nbyãs
] = '\0';

446 *
ª∂y
 = 
	`x°rdup
(
buf„r
);

449 
	}
}

455 
	$vlog_˛õ¡_å™ß˘
(
vlog_˛õ¡
 *
˛õ¡
,

456 c⁄° *
ªque°
, **
ª∂y
)

458 
i
;

461 
i
 = 0; i < 3; ++i) {

462 
îr‹
 = 
	`vlog_˛õ¡_£nd
(
˛õ¡
, 
ªque°
);

463 i‡(
îr‹
) {

464 *
ª∂y
 = 
NULL
;

465  
îr‹
;

467 
îr‹
 = 
	`vlog_˛õ¡_ªcv
(
˛õ¡
, 
ª∂y
);

468 i‡(
îr‹
 !
ETIMEDOUT
) {

469  
îr‹
;

472 *
ª∂y
 = 
NULL
;

473  
ETIMEDOUT
;

474 
	}
}

479 
	$vlog_˛õ¡_èrgë
(c⁄° 
vlog_˛õ¡
 *
˛õ¡
)

481  
˛õ¡
->
c⁄√˘_∑th
;

482 
	}
}

	@lib/vlog-socket.h

34 #i‚de‡
VLOG_SOCKET_H


35 
	#VLOG_SOCKET_H
 1

	)

38 
	gvlog_£rvî
;

39 
vlog_£rvî_li°í
(c⁄° *
∑th
, 
vlog_£rvî
 **);

40 
vlog_£rvî_˛o£
(
vlog_£rvî
 *);

43 
	gvlog_˛õ¡
;

44 
vlog_˛õ¡_c⁄√˘
(c⁄° *
∑th
, 
vlog_˛õ¡
 **);

45 
vlog_˛õ¡_˛o£
(
vlog_˛õ¡
 *);

46 
vlog_˛õ¡_£nd
(
vlog_˛õ¡
 *, c⁄° *
ªque°
);

47 
vlog_˛õ¡_ªcv
(
vlog_˛õ¡
 *, **
ª∂y
);

48 
vlog_˛õ¡_å™ß˘
(
vlog_˛õ¡
 *,

49 c⁄° *
ªque°
, **
ª∂y
);

50 c⁄° *
vlog_˛õ¡_èrgë
(c⁄° 
vlog_˛õ¡
 *);

	@lib/vlog.c

34 
	~<c⁄fig.h
>

35 
	~"vlog.h
"

36 
	~<as£π.h
>

37 
	~<˘y≥.h
>

38 
	~<î∫o.h
>

39 
	~<°d¨g.h
>

40 
	~<°dlib.h
>

41 
	~<°rög.h
>

42 
	~<sys/ty≥s.h
>

43 
	~<sy¶og.h
>

44 
	~<time.h
>

45 
	~<uni°d.h
>

46 
	~"dús.h
"

47 
	~"dy«mic-°rög.h
"

48 
	~"ßt-m©h.h
"

49 
	~"timevÆ.h
"

50 
	~"utû.h
"

52 
	#LOG_MODULE
 
VLM_vlog


	)

55 c⁄° *
	gÀvñ_«mes
[
VLL_N_LEVELS
] = {

56 
	#VLOG_LEVEL
(
NAME
, 
SYSLOG_LEVEL
Ë#NAME,

	)

57 
VLOG_LEVELS


58 #unde‡
VLOG_LEVEL


62 
	gsy¶og_Àvñs
[
VLL_N_LEVELS
] = {

63 
	#VLOG_LEVEL
(
NAME
, 
SYSLOG_LEVEL
ËSYSLOG_LEVEL,

	)

64 
VLOG_LEVELS


65 #unde‡
VLOG_LEVEL


69 c⁄° *
	gmoduÀ_«mes
[
VLM_N_MODULES
] = {

70 
	#VLOG_MODULE
(
NAME
Ë#NAME,

	)

71 
	~"vlog-moduÀs.def
"

72 #unde‡
VLOG_MODULE


76 
	sÁcûôy
 {

77 c⁄° *
	m«me
;

78 *
	m∑âîn
;

79 
boﬁ
 
	mdeÁu…_∑âîn
;

81 
Ácûôy
 
	gÁcûôõs
[
VLF_N_FACILITIES
] = {

82 
	#VLOG_FACILITY
(
NAME
, 
PATTERN
Ë{#NAME, PATTERN, 
åue
},

	)

83 
VLOG_FACILITIES


84 #unde‡
VLOG_FACILITY


88 
	gÀvñs
[
VLM_N_MODULES
][
VLF_N_FACILITIES
];

92 
vlog_Àvñ
 
	gmö_vlog_Àvñs
[
VLM_N_MODULES
];

95 
	gboŸ_time
;

98 *
	glog_fûe_«me
;

99 
FILE
 *
	glog_fûe
;

101 
	$f‹m©_log_mesßge
(
vlog_moduÀ
, 
vlog_Àvñ
,

102 
vlog_Ácûôy
, 
msg_num
,

103 c⁄° *
mesßge
, 
va_li°
, 
ds
 *)

104 
	`PRINTF_FORMAT
(5, 0);

108 
size_t


109 
	$£¨ch_«me_¨øy
(c⁄° *
èrgë
, c⁄° **
«mes
, 
size_t
 
n_«mes
)

111 
size_t
 
i
;

113 
i
 = 0; i < 
n_«mes
; i++) {

114 
	`as£π
(
«mes
[
i
]);

115 i‡(!
	`°rˇ£cmp
(
«mes
[
i
], 
èrgë
)) {

119  
i
;

120 
	}
}

124 
	$vlog_gë_Àvñ_«me
(
vlog_Àvñ
 
Àvñ
)

126 
	`as£π
(
Àvñ
 < 
VLL_N_LEVELS
);

127  
Àvñ_«mes
[
Àvñ
];

128 
	}
}

132 
vlog_Àvñ


133 
	$vlog_gë_Àvñ_vÆ
(c⁄° *
«me
)

135  
	`£¨ch_«me_¨øy
(
«me
, 
Àvñ_«mes
, 
	`ARRAY_SIZE
(level_names));

136 
	}
}

140 
	$vlog_gë_Ácûôy_«me
(
vlog_Ácûôy
 
Ácûôy
)

142 
	`as£π
(
Ácûôy
 < 
VLF_N_FACILITIES
);

143  
Ácûôõs
[
Ácûôy
].
«me
;

144 
	}
}

148 
vlog_Ácûôy


149 
	$vlog_gë_Ácûôy_vÆ
(c⁄° *
«me
)

151 
size_t
 
i
;

153 
i
 = 0; i < 
VLF_N_FACILITIES
; i++) {

154 i‡(!
	`°rˇ£cmp
(
Ácûôõs
[
i
].
«me
,Çame)) {

158  
i
;

159 
	}
}

162 c⁄° *
	$vlog_gë_moduÀ_«me
(
vlog_moduÀ
 
moduÀ
)

164 
	`as£π
(
moduÀ
 < 
VLM_N_MODULES
);

165  
moduÀ_«mes
[
moduÀ
];

166 
	}
}

170 
vlog_moduÀ


171 
	$vlog_gë_moduÀ_vÆ
(c⁄° *
«me
)

173  
	`£¨ch_«me_¨øy
(
«me
, 
moduÀ_«mes
, 
	`ARRAY_SIZE
(module_names));

174 
	}
}

177 
vlog_Àvñ


178 
	$vlog_gë_Àvñ
(
vlog_moduÀ
 
moduÀ
, 
vlog_Ácûôy
 
Ácûôy
)

180 
	`as£π
(
moduÀ
 < 
VLM_N_MODULES
);

181 
	`as£π
(
Ácûôy
 < 
VLF_N_FACILITIES
);

182  
Àvñs
[
moduÀ
][
Ácûôy
];

183 
	}
}

186 
	$upd©e_mö_Àvñ
(
vlog_moduÀ
 
moduÀ
)

188 
vlog_Àvñ
 
mö_Àvñ
 = 
VLL_EMER
;

189 
vlog_Ácûôy
 
Ácûôy
;

191 
Ácûôy
 = 0; facûôy < 
VLF_N_FACILITIES
; facility++) {

192 i‡(
log_fûe
 || 
Ácûôy
 !
VLF_FILE
) {

193 
mö_Àvñ
 = 
	`MAX
(mö_Àvñ, 
Àvñs
[
moduÀ
][
Ácûôy
]);

196 
mö_vlog_Àvñs
[
moduÀ
] = 
mö_Àvñ
;

197 
	}
}

200 
	$£t_Ácûôy_Àvñ
(
vlog_Ácûôy
 
Ácûôy
, 
vlog_moduÀ
 
moduÀ
,

201 
vlog_Àvñ
 
Àvñ
)

203 
	`as£π
(
Ácûôy
 >0 && facûôy < 
VLF_N_FACILITIES
);

204 
	`as£π
(
Àvñ
 < 
VLL_N_LEVELS
);

206 i‡(
moduÀ
 =
VLM_ANY_MODULE
) {

207 
moduÀ
 = 0; moduÀ < 
VLM_N_MODULES
; module++) {

208 
Àvñs
[
moduÀ
][
Ácûôy
] = 
Àvñ
;

209 
	`upd©e_mö_Àvñ
(
moduÀ
);

212 
Àvñs
[
moduÀ
][
Ácûôy
] = 
Àvñ
;

213 
	`upd©e_mö_Àvñ
(
moduÀ
);

215 
	}
}

219 
	$vlog_£t_Àvñs
(
vlog_moduÀ
 
moduÀ
, 
vlog_Ácûôy
 
Ácûôy
,

220 
vlog_Àvñ
 
Àvñ
)

222 
	`as£π
(
Ácûôy
 < 
VLF_N_FACILITIES
 || facûôy =
VLF_ANY_FACILITY
);

223 i‡(
Ácûôy
 =
VLF_ANY_FACILITY
) {

224 
Ácûôy
 = 0; facûôy < 
VLF_N_FACILITIES
; facility++) {

225 
	`£t_Ácûôy_Àvñ
(
Ácûôy
, 
moduÀ
, 
Àvñ
);

228 
	`£t_Ácûôy_Àvñ
(
Ácûôy
, 
moduÀ
, 
Àvñ
);

230 
	}
}

233 
	$do_£t_∑âîn
(
vlog_Ácûôy
 
Ácûôy
, c⁄° *
∑âîn
)

235 
Ácûôy
 *
f
 = &
Ácûôõs
[facility];

236 i‡(!
f
->
deÁu…_∑âîn
) {

237 
	`‰ì
(
f
->
∑âîn
);

239 
f
->
deÁu…_∑âîn
 = 
Ál£
;

241 
f
->
∑âîn
 = 
	`x°rdup
(pattern);

242 
	}
}

246 
	$vlog_£t_∑âîn
(
vlog_Ácûôy
 
Ácûôy
, c⁄° *
∑âîn
)

248 
	`as£π
(
Ácûôy
 < 
VLF_N_FACILITIES
 || facûôy =
VLF_ANY_FACILITY
);

249 i‡(
Ácûôy
 =
VLF_ANY_FACILITY
) {

250 
Ácûôy
 = 0; facûôy < 
VLF_N_FACILITIES
; facility++) {

251 
	`do_£t_∑âîn
(
Ácûôy
, 
∑âîn
);

254 
	`do_£t_∑âîn
(
Ácûôy
, 
∑âîn
);

256 
	}
}

263 
	$vlog_gë_log_fûe
()

265  
log_fûe_«me
;

266 
	}
}

272 
	$vlog_£t_log_fûe
(c⁄° *
fûe_«me
)

274 *
ﬁd_log_fûe_«me
;

275 
vlog_moduÀ
 
moduÀ
;

276 
îr‹
;

279 i‡(
log_fûe
) {

280 
	`VLOG_INFO
(
LOG_MODULE
, "closingÜog file");

281 
	`f˛o£
(
log_fûe
);

282 
log_fûe
 = 
NULL
;

287 
ﬁd_log_fûe_«me
 = 
log_fûe_«me
;

288 
log_fûe_«me
 = (
fûe_«me


289 ? 
	`x°rdup
(
fûe_«me
)

290 : 
	`xa•rötf
("%s/%s.log", 
oÂ_logdú
, 
¥ogøm_«me
));

291 
	`‰ì
(
ﬁd_log_fûe_«me
);

292 
fûe_«me
 = 
NULL
;

296 
log_fûe
 = 
	`f›í
(
log_fûe_«me
, "a");

297 
moduÀ
 = 0; moduÀ < 
VLM_N_MODULES
; module++) {

298 
	`upd©e_mö_Àvñ
(
moduÀ
);

302 i‡(!
log_fûe
) {

303 
	`VLOG_WARN
(
LOG_MODULE
, "failedÅo open %s forÜogging: %s",

304 
log_fûe_«me
, 
	`°ªº‹
(
î∫o
));

305 
îr‹
 = 
î∫o
;

307 
	`VLOG_INFO
(
LOG_MODULE
, "›íedÜog fûê%s", 
log_fûe_«me
);

308 
îr‹
 = 0;

311  
îr‹
;

312 
	}
}

318 
	$vlog_ª›í_log_fûe
()

320  
	`vlog_£t_log_fûe
(
log_fûe_«me
);

321 
	}
}

331 
	$vlog_£t_Àvñs_‰om_°rög
(c⁄° *
s_
)

333 *
ßve_±r
;

334 *
s
 = 
	`x°rdup
(
s_
);

335 *
moduÀ
, *
Ácûôy
;

337 
moduÀ
 = 
	`°πok_r
(
s
, ": \t", &
ßve_±r
); moduÀ !
NULL
;

338 
moduÀ
 = 
	`°πok_r
(
NULL
, ": \t", &
ßve_±r
)) {

339 
vlog_moduÀ
 
e_moduÀ
;

340 
vlog_Ácûôy
 
e_Ácûôy
;

342 
Ácûôy
 = 
	`°πok_r
(
NULL
, ":", &
ßve_±r
);

344 i‡(!
Ácûôy
 || !
	`°rcmp
(facility, "ANY")) {

345 
e_Ácûôy
 = 
VLF_ANY_FACILITY
;

347 
e_Ácûôy
 = 
	`vlog_gë_Ácûôy_vÆ
(
Ácûôy
);

348 i‡(
e_Ácûôy
 >
VLF_N_FACILITIES
) {

349 *
msg
 = 
	`xa•rötf
("unknow¿Ácûôy \"%s\"", 
Ácûôy
);

350 
	`‰ì
(
s
);

351  
msg
;

355 i‡(!
	`°rcmp
(
moduÀ
, "PATTERN")) {

356 
	`vlog_£t_∑âîn
(
e_Ácûôy
, 
ßve_±r
);

359 *
Àvñ
;

360 
vlog_Àvñ
 
e_Àvñ
;

362 i‡(!
	`°rcmp
(
moduÀ
, "ANY")) {

363 
e_moduÀ
 = 
VLM_ANY_MODULE
;

365 
e_moduÀ
 = 
	`vlog_gë_moduÀ_vÆ
(
moduÀ
);

366 i‡(
e_moduÀ
 >
VLM_N_MODULES
) {

367 *
msg
 = 
	`xa•rötf
("unknow¿moduÀ \"%s\"", 
moduÀ
);

368 
	`‰ì
(
s
);

369  
msg
;

373 
Àvñ
 = 
	`°πok_r
(
NULL
, ":", &
ßve_±r
);

374 
e_Àvñ
 = 
Àvñ
 ? 
	`vlog_gë_Àvñ_vÆ
÷evñË: 
VLL_DBG
;

375 i‡(
e_Àvñ
 >
VLL_N_LEVELS
) {

376 *
msg
 = 
	`xa•rötf
("unknow¿Àvñ \"%s\"", 
Àvñ
);

377 
	`‰ì
(
s
);

378  
msg
;

381 
	`vlog_£t_Àvñs
(
e_moduÀ
, 
e_Ácûôy
, 
e_Àvñ
);

384 
	`‰ì
(
s
);

385  
NULL
;

386 
	}
}

391 
	$vlog_£t_vîbosôy
(c⁄° *
¨g
)

393 i‡(
¨g
) {

394 *
msg
 = 
	`vlog_£t_Àvñs_‰om_°rög
(
¨g
);

395 i‡(
msg
) {

396 
	`oÂ_Áèl
(0, "¥o˚ssög \"%s\": %s", 
¨g
, 
msg
);

399 
	`vlog_£t_Àvñs
(
VLM_ANY_MODULE
, 
VLF_ANY_FACILITY
, 
VLL_DBG
);

401 
	}
}

405 
	$vlog_öô
()

407 
time_t
 
now
;

409 
	`›ílog
(
¥ogøm_«me
, 
LOG_NDELAY
, 
LOG_DAEMON
);

410 
	`vlog_£t_Àvñs
(
VLM_ANY_MODULE
, 
VLF_ANY_FACILITY
, 
VLL_INFO
);

412 
boŸ_time
 = 
	`time_m£c
();

413 
now
 = 
	`time_now
();

414 i‡(
now
 < 0) {

415 
tm
Åm;

416 
s
[128];

418 
	`loˇ…ime_r
(&
now
, &
tm
);

419 
	`°r·ime
(
s
,  s, "%a, %d %b %Y %H:%M:%S %z", &
tm
);

420 
	`VLOG_ERR
(
LOG_MODULE
, "cuºíàtimêi†√g©ive: %†(%ld)", 
s
, (Ë
now
);

422 
	}
}

426 
	$vlog_exô
()

428 
	`˛o£log
();

429 
	}
}

433 
	$vlog_gë_Àvñs
()

435 
ds
 
s
 = 
DS_EMPTY_INITIALIZER
;

436 
vlog_moduÀ
 
moduÀ
;

438 
	`ds_put_f‹m©
(&
s
, " console syslog file\n");

439 
	`ds_put_f‹m©
(&
s
, " ------- ------ ------\n");

441 
moduÀ
 = 0; moduÀ < 
VLM_N_MODULES
; module++) {

442 
	`ds_put_f‹m©
(&
s
, "%-16s %4s %4s %4s\n",

443 
	`vlog_gë_moduÀ_«me
(
moduÀ
),

444 
	`vlog_gë_Àvñ_«me
(
	`vlog_gë_Àvñ
(
moduÀ
, 
VLF_CONSOLE
)),

445 
	`vlog_gë_Àvñ_«me
(
	`vlog_gë_Àvñ
(
moduÀ
, 
VLF_SYSLOG
)),

446 
	`vlog_gë_Àvñ_«me
(
	`vlog_gë_Àvñ
(
moduÀ
, 
VLF_FILE
)));

449  
	`ds_c°r
(&
s
);

450 
	}
}

455 
boﬁ


456 
	$vlog_is_íabÀd
(
vlog_moduÀ
 
moduÀ
, 
vlog_Àvñ
 
Àvñ
)

458  
mö_vlog_Àvñs
[
moduÀ
] >
Àvñ
;

459 
	}
}

462 
	$„tch_bø˚s
(c⁄° *
p
, c⁄° *
def
, *
out
, 
size_t
 
out_size
)

464 i‡(*
p
 == '{') {

465 
size_t
 
n
 = 
	`°rc•n
(
p
 + 1, "}");

466 
size_t
 
n_c›y
 = 
	`MIN
(
n
, 
out_size
 - 1);

467 
	`mem˝y
(
out
, 
p
 + 1, 
n_c›y
);

468 
out
[
n_c›y
] = '\0';

469 
p
 +
n
 + 2;

471 
	`°æ˝y
(
out
, 
def
, 
out_size
);

473  
p
;

474 
	}
}

477 
	$f‹m©_log_mesßge
(
vlog_moduÀ
 
moduÀ
, 
vlog_Àvñ
 
Àvñ
,

478 
vlog_Ácûôy
 
Ácûôy
, 
msg_num
,

479 c⁄° *
mesßge
, 
va_li°
 
¨gs_
, 
ds
 *
s
)

481 
tmp
[128];

482 
va_li°
 
¨gs
;

483 c⁄° *
p
;

485 
	`ds_˛ór
(
s
);

486 
p
 = 
Ácûôõs
[
Ácûôy
].
∑âîn
; *p != '\0'; ) {

487 íum { 
LEFT
, 
RIGHT
 } 
ju°ify
 = RIGHT;

488 
∑d
 = '0';

489 
size_t
 
Àngth
, 
fõld
, 
u£d
;

491 i‡(*
p
 != '%') {

492 
	`ds_put_ch¨
(
s
, *
p
++);

496 
p
++;

497 i‡(*
p
 == '-') {

498 
ju°ify
 = 
LEFT
;

499 
p
++;

501 i‡(*
p
 == '0') {

502 
∑d
 = '0';

503 
p
++;

505 
fõld
 = 0;

506 
	`isdigô
(*
p
)) {

507 
fõld
 = (fõld * 10Ë+ (*
p
 - '0');

508 
p
++;

511 
Àngth
 = 
s
->length;

512 *
p
++) {

514 
	`ds_put_c°r
(
s
, 
¥ogøm_«me
);

517 
p
 = 
	`„tch_bø˚s
’, "", 
tmp
, Åmp);

518 
	`ds_put_c°r
(
s
, 
	`vlog_gë_moduÀ_«me
(
moduÀ
));

521 
p
 = 
	`„tch_bø˚s
’, "%Y-%m-%d %H:%M:%S", 
tmp
, Åmp);

522 
	`ds_put_°r·ime
(
s
, 
tmp
, 
NULL
);

525 
	`va_c›y
(
¨gs
, 
¨gs_
);

526 
	`ds_put_f‹m©_vÆi°
(
s
, 
mesßge
, 
¨gs
);

527 
	`va_íd
(
¨gs
);

530 
	`ds_put_f‹m©
(
s
, "%u", 
msg_num
);

533 
	`ds_put_ch¨
(
s
, '\n');

536 
	`ds_put_c°r
(
s
, 
	`vlog_gë_Àvñ_«me
(
Àvñ
));

539 
	`ds_put_f‹m©
(
s
, "%ld", (Ë
	`gëpid
());

542 
	`ds_put_f‹m©
(
s
, "%Œd", 
	`time_m£c
(Ë- 
boŸ_time
);

545 
	`ds_put_ch¨
(
s
, 
p
[-1]);

548 
u£d
 = 
s
->
Àngth
 -Üength;

549 i‡(
u£d
 < 
fõld
) {

550 
size_t
 
n_∑d
 = 
fõld
 - 
u£d
;

551 i‡(
ju°ify
 =
RIGHT
) {

552 
	`ds_put_unöô
(
s
, 
n_∑d
);

553 
	`memmove
(&
s
->
°rög
[
Àngth
 + 
n_∑d
], &s->°rög[Àngth], 
u£d
);

554 
	`mem£t
(&
s
->
°rög
[
Àngth
], 
∑d
, 
n_∑d
);

556 
	`ds_put_ch¨_mu…ùÀ
(
s
, 
∑d
, 
n_∑d
);

560 
	}
}

567 
	$vlog_vÆi°
(
vlog_moduÀ
 
moduÀ
, 
vlog_Àvñ
 
Àvñ
,

568 c⁄° *
mesßge
, 
va_li°
 
¨gs
)

570 
boﬁ
 
log_to_c⁄sﬁe
 = 
Àvñs
[
moduÀ
][
VLF_CONSOLE
] >
Àvñ
;

571 
boﬁ
 
log_to_sy¶og
 = 
Àvñs
[
moduÀ
][
VLF_SYSLOG
] >
Àvñ
;

572 
boﬁ
 
log_to_fûe
 = 
Àvñs
[
moduÀ
][
VLF_FILE
] >
Àvñ
 && 
log_fûe
;

573 i‡(
log_to_c⁄sﬁe
 || 
log_to_sy¶og
 || 
log_to_fûe
) {

574 
ßve_î∫o
 = 
î∫o
;

575 
msg_num
;

576 
ds
 
s
;

578 
	`ds_öô
(&
s
);

579 
	`ds_ª£rve
(&
s
, 1024);

580 
msg_num
++;

582 i‡(
log_to_c⁄sﬁe
) {

583 
	`f‹m©_log_mesßge
(
moduÀ
, 
Àvñ
, 
VLF_CONSOLE
, 
msg_num
,

584 
mesßge
, 
¨gs
, &
s
);

585 
	`ds_put_ch¨
(&
s
, '\n');

586 
	`Âuts
(
	`ds_c°r
(&
s
), 
°dîr
);

589 i‡(
log_to_sy¶og
) {

590 
sy¶og_Àvñ
 = 
sy¶og_Àvñs
[
Àvñ
];

591 *
ßve_±r
 = 
NULL
;

592 *
löe
;

594 
	`f‹m©_log_mesßge
(
moduÀ
, 
Àvñ
, 
VLF_SYSLOG
, 
msg_num
,

595 
mesßge
, 
¨gs
, &
s
);

596 
löe
 = 
	`°πok_r
(
s
.
°rög
, "\n", &
ßve_±r
);Üine;

597 
löe
 = 
	`°πok_r
(
NULL
, "\n", &
ßve_±r
)) {

598 
	`sy¶og
(
sy¶og_Àvñ
, "%s", 
löe
);

602 i‡(
log_to_fûe
) {

603 
	`f‹m©_log_mesßge
(
moduÀ
, 
Àvñ
, 
VLF_FILE
, 
msg_num
,

604 
mesßge
, 
¨gs
, &
s
);

605 
	`ds_put_ch¨
(&
s
, '\n');

606 
	`Âuts
(
	`ds_c°r
(&
s
), 
log_fûe
);

607 
	`fÊush
(
log_fûe
);

610 
	`ds_de°roy
(&
s
);

611 
î∫o
 = 
ßve_î∫o
;

613 
	}
}

616 
	$vlog
(
vlog_moduÀ
 
moduÀ
, 
vlog_Àvñ
 
Àvñ
, c⁄° *
mesßge
, ...)

618 
va_li°
 
¨gs
;

620 
	`va_°¨t
(
¨gs
, 
mesßge
);

621 
	`vlog_vÆi°
(
moduÀ
, 
Àvñ
, 
mesßge
, 
¨gs
);

622 
	`va_íd
(
¨gs
);

623 
	}
}

626 
	$vlog_øã_limô
(
vlog_moduÀ
 
moduÀ
, 
vlog_Àvñ
 
Àvñ
,

627 
vlog_øã_limô
 *
æ
, c⁄° *
mesßge
, ...)

629 
va_li°
 
¨gs
;

631 i‡(!
	`vlog_is_íabÀd
(
moduÀ
, 
Àvñ
)) {

635 i‡(
æ
->
tokís
 < 
VLOG_MSG_TOKENS
) {

636 
time_t
 
now
 = 
	`time_now
();

637 i‡(
æ
->
œ°_fûl
 > 
now
) {

640 
æ
->
tokís
 =Ñl->
bur°
;

641 } i‡(
æ
->
œ°_fûl
 < 
now
) {

642 
add
 = 
	`ßt_mul
(
æ
->
øã
, 
now
 -Ñl->
œ°_fûl
);

643 
tokís
 = 
	`ßt_add
(
æ
->tokís, 
add
);

644 
æ
->
tokís
 = 
	`MIN
—okís,Ñl->
bur°
);

645 
æ
->
œ°_fûl
 = 
now
;

647 i‡(
æ
->
tokís
 < 
VLOG_MSG_TOKENS
) {

648 i‡(!
æ
->
n_dr›≥d
) {

649 
æ
->
fú°_dr›≥d
 = 
now
;

651 
æ
->
n_dr›≥d
++;

655 
æ
->
tokís
 -
VLOG_MSG_TOKENS
;

657 
	`va_°¨t
(
¨gs
, 
mesßge
);

658 
	`vlog_vÆi°
(
moduÀ
, 
Àvñ
, 
mesßge
, 
¨gs
);

659 
	`va_íd
(
¨gs
);

661 i‡(
æ
->
n_dr›≥d
) {

662 
	`vlog
(
moduÀ
, 
Àvñ
,

664 
æ
->
n_dr›≥d
, (Ë(
	`time_now
(Ë-Ñl->
fú°_dr›≥d
));

665 
æ
->
n_dr›≥d
 = 0;

667 
	}
}

670 
	$vlog_ußge
()

672 
	`¥ötf
("\nLogging options:\n"

677 
oÂ_logdú
, 
¥ogøm_«me
);

678 
	}
}

	@lib/vlog.h

34 #i‚de‡
VLOG_H


35 
	#VLOG_H
 1

	)

37 
	~<limôs.h
>

38 
	~<°d¨g.h
>

39 
	~<°dboﬁ.h
>

40 
	~<time.h
>

41 
	~"utû.h
"

44 
	#VLOG_LEVELS
 \

45 
	`VLOG_LEVEL
(
EMER
, 
LOG_ALERT
) \

46 
	`VLOG_LEVEL
(
ERR
, 
LOG_ERR
) \

47 
	`VLOG_LEVEL
(
WARN
, 
LOG_WARNING
) \

48 
	`VLOG_LEVEL
(
INFO
, 
LOG_NOTICE
) \

49 
	`VLOG_LEVEL
(
DBG
, 
LOG_DEBUG
)

	)

50 
	evlog_Àvñ
 {

51 
	#VLOG_LEVEL
(
NAME
, 
SYSLOG_LEVEL
Ë
VLL_
##NAME,

	)

52 
	mVLOG_LEVELS


53 #unde‡
VLOG_LEVEL


54 
	mVLL_N_LEVELS


57 c⁄° *
vlog_gë_Àvñ_«me
(
vlog_Àvñ
);

58 
vlog_Àvñ
 
vlog_gë_Àvñ_vÆ
(c⁄° *
«me
);

61 
	#VLOG_FACILITIES
 \

62 
	`VLOG_FACILITY
(
SYSLOG
, "%05N|%c|%p|%m") \

63 
	`VLOG_FACILITY
(
CONSOLE
, "%d{%b %d %H:%M:%S}|%05N|%c|%p|%m") \

64 
	`VLOG_FACILITY
(
FILE
, "%d{%b %d %H:%M:%S}|%05N|%c|%p|%m")

	)

65 
	evlog_Ácûôy
 {

66 
	#VLOG_FACILITY
(
NAME
, 
PATTERN
Ë
VLF_
##NAME,

	)

67 
	mVLOG_FACILITIES


68 #unde‡
VLOG_FACILITY


69 
	mVLF_N_FACILITIES
,

70 
	mVLF_ANY_FACILITY
 = -1

73 c⁄° *
vlog_gë_Ácûôy_«me
(
vlog_Ácûôy
);

74 
vlog_Ácûôy
 
vlog_gë_Ácûôy_vÆ
(c⁄° *
«me
);

77 
	evlog_moduÀ
 {

78 
	#VLOG_MODULE
(
NAME
Ë
VLM_
##NAME,

	)

79 
	~"vlog-moduÀs.def
"

80 
	mVLM_N_MODULES
,

81 
	mVLM_ANY_MODULE
 = -1

84 c⁄° *
vlog_gë_moduÀ_«me
(
vlog_moduÀ
);

85 
vlog_moduÀ
 
vlog_gë_moduÀ_vÆ
(c⁄° *
«me
);

88 
	svlog_øã_limô
 {

90 
	møã
;

91 
	mbur°
;

94 
	mtokís
;

95 
time_t
 
	mœ°_fûl
;

96 
time_t
 
	mfú°_dr›≥d
;

97 
	mn_dr›≥d
;

103 
	#VLOG_MSG_TOKENS
 60

	)

107 
	#VLOG_RATE_LIMIT_INIT
(
RATE
, 
BURST
) \

109 
RATE
, \

110 (
	`MIN
(
BURST
, 
UINT_MAX
 / 
VLOG_MSG_TOKENS
) \

111 * 
VLOG_MSG_TOKENS
), \

116 }

	)

119 
vlog_Àvñ
 
vlog_gë_Àvñ
(
vlog_moduÀ
, 
vlog_Ácûôy
);

120 
vlog_£t_Àvñs
(
vlog_moduÀ
, 
vlog_Ácûôy
, 
vlog_Àvñ
);

121 *
vlog_£t_Àvñs_‰om_°rög
(const *);

122 *
vlog_gë_Àvñs
();

123 
boﬁ
 
vlog_is_íabÀd
(
vlog_moduÀ
, 
vlog_Àvñ
);

124 
vlog_£t_vîbosôy
(c⁄° *
¨g
);

127 
vlog_£t_∑âîn
(
vlog_Ácûôy
, c⁄° *
∑âîn
);

128 c⁄° *
vlog_gë_log_fûe
();

129 
vlog_£t_log_fûe
(c⁄° *
fûe_«me
);

130 
vlog_ª›í_log_fûe
();

133 
vlog_öô
();

134 
vlog_exô
();

135 
	$vlog
(
vlog_moduÀ
, 
vlog_Àvñ
, c⁄° *
f‹m©
, ...)

136 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 3, 4)));

137 
	$vlog_vÆi°
(
vlog_moduÀ
, 
vlog_Àvñ
, c⁄° *, 
va_li°
)

138 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 3, 0)));

139 
	$vlog_øã_limô
(
vlog_moduÀ
, 
vlog_Àvñ
,

140 
vlog_øã_limô
 *, const *, ...)

141 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 4, 5)));

146 
	#VLOG_EMER
(
MODULE
, ...Ë
	`VLOG
(MODULE, 
VLL_EMER
, 
__VA_ARGS__
)

	)

147 
	#VLOG_ERR
(
MODULE
, ...Ë
	`VLOG
(MODULE, 
VLL_ERR
, 
__VA_ARGS__
)

	)

148 
	#VLOG_WARN
(
MODULE
, ...Ë
	`VLOG
(MODULE, 
VLL_WARN
, 
__VA_ARGS__
)

	)

149 
	#VLOG_INFO
(
MODULE
, ...Ë
	`VLOG
(MODULE, 
VLL_INFO
, 
__VA_ARGS__
)

	)

150 
	#VLOG_DBG
(
MODULE
, ...Ë
	`VLOG
(MODULE, 
VLL_DBG
, 
__VA_ARGS__
)

	)

155 
	#VLOG_IS_EMER_ENABLED
(
MODULE
Ë
åue


	)

156 
	#VLOG_IS_ERR_ENABLED
(
MODULE
Ë
	`vlog_is_íabÀd
(MODULE, 
VLL_EMER
)

	)

157 
	#VLOG_IS_WARN_ENABLED
(
MODULE
Ë
	`vlog_is_íabÀd
(MODULE, 
VLL_WARN
)

	)

158 
	#VLOG_IS_INFO_ENABLED
(
MODULE
Ë
	`vlog_is_íabÀd
(MODULE, 
VLL_INFO
)

	)

159 
	#VLOG_IS_DBG_ENABLED
(
MODULE
Ë
	`vlog_is_íabÀd
(MODULE, 
VLL_DBG
)

	)

164 
	#VLOG_ERR_RL
(
MODULE
, 
RL
, ...Ë
	`VLOG_RL
(MODULE, RL, 
VLL_ERR
, 
__VA_ARGS__
)

	)

165 
	#VLOG_WARN_RL
(
MODULE
, 
RL
, ...Ë
	`VLOG_RL
(MODULE, RL, 
VLL_WARN
, 
__VA_ARGS__
)

	)

166 
	#VLOG_INFO_RL
(
MODULE
, 
RL
, ...Ë
	`VLOG_RL
(MODULE, RL, 
VLL_INFO
, 
__VA_ARGS__
)

	)

167 
	#VLOG_DBG_RL
(
MODULE
, 
RL
, ...Ë
	`VLOG_RL
(MODULE, RL, 
VLL_DBG
, 
__VA_ARGS__
)

	)

170 
	#VLOG_OPTION_ENUMS
 
OPT_LOG_FILE


	)

171 
	#VLOG_LONG_OPTIONS
 \

172 {"vîbo£", 
›ti⁄Æ_¨gumít
, 0, 'v'
	}
}, \

173 {"log-fûe", 
›ti⁄Æ_¨gumít
, 0, 
OPT_LOG_FILE
}

	)

174 
	#VLOG_OPTION_HANDLERS
 \

176 
	`vlog_£t_vîbosôy
(
›èrg
); \

178 
OPT_LOG_FILE
: \

179 
	`vlog_£t_log_fûe
(
›èrg
); \

180 ;

	)

181 
vlog_ußge
();

184 
	#VLOG
(
MODULE
, 
LEVEL
, ...) \

186 i‡(
mö_vlog_Àvñs
[
MODULE
] >
LEVEL
) { \

187 
	`vlog
(
MODULE
, 
LEVEL
, 
__VA_ARGS__
); \

189 } 0)

	)

190 
	#VLOG_RL
(
MODULE
, 
RL
, 
LEVEL
, ...) \

192 i‡(
mö_vlog_Àvñs
[
MODULE
] >
LEVEL
) { \

193 
	`vlog_øã_limô
(
MODULE
, 
LEVEL
, 
RL
, 
__VA_ARGS__
); \

195 } 0)

	)

196 
vlog_Àvñ
 
mö_vlog_Àvñs
[
VLM_N_MODULES
];

	@lib/xtoxll.h

33 #i‚de‡
XTOXLL_H


34 
	#XTOXLL_H
 1

	)

36 
	~<¨∑/öë.h
>

37 
	~<sys/ty≥s.h
>

39 
ölöe
 
uöt64_t


40 
	$ht⁄Œ
(
uöt64_t
 
n
)

42  
	`ht⁄l
(1Ë=1 ? 
n
 : ((
uöt64_t
) htonl(n) << 32) | htonl(n >> 32);

43 
	}
}

45 
ölöe
 
uöt64_t


46 
	$¡ohŒ
(
uöt64_t
 
n
)

48  
	`ht⁄l
(1Ë=1 ? 
n
 : ((
uöt64_t
Ë
	`¡ohl
(n) << 32) |Çtohl(n >> 32);

49 
	}
}

	@nbee_link/nbee_link.cpp

8 
	~<io°ªam
>

9 
	~<m≠
>

10 
	~<°rög.h
>

11 
	~<sys/°©.h
>

12 
	~<î∫o.h
>

13 
	~<nbì.h
>

14 
	~<√töë/ö.h
>

15 
	~<sys/time.h
>

16 
	~<sig«l.h
>

19 
	~"nbì_lök.h
"

20 
	~"oÊib/oxm-m©ch.h
"

21 
	~"oÊib/oÊ-utûs.h
"

22 
	~"lib/hash.h
"

23 
	~"lib/Áèl-sig«l.h
"

25 
	gm≠
<
	guöt16_t
,uöt16_t> 
	gext_hdr_‹dîs
;

27 
nbPackëDecodî
 *
	gDecodî
;

28 
nbPackëDecodîV¨s
* 
	gPackëDecodîV¨s
;

29 
nbNëPDLLökLayî_t
 
	gLökLayîTy≥
;

30 
nbPDMLRódî
 *
	gPDMLRódî
;

31 
	gPackëCou¡î
= 1;

32 
pˇp_pkthdr
 * 
	gpkhdr
;

35 
	#NETPDLFILE
 "cu°om√çdl.xml"

	)

39 
	$sigöt_h™dÀr
(
sig_ƒ
)

42 
	`nbDóŒoˇãPackëDecodî
(
Decodî
);

43 
	`nbCÀ™up
();

45 
	`exô
(0);

46 
	}
}

48 "C" 
	$nblök_öôülize
()

51 
EºBuf
[
ERRBUF_SIZE
 + 1];

52 
NëPDLPrŸoDBFœgs
 = 
nbPROTODB_MINIMAL
;

53 
NëPDLDecodîFœgs
 = 
nbDECODER_GENERATEPDML
;

54 
ShowNëw‹kNames
 = 0;

56 * 
NëPDLFûeName
 = (*Ë
NETPDLDIR
"/"
NETPDLFILE
;

57 
°©
 
√çdl°©
;

59 
siga˘i⁄
 
ß
;

62 
	`mem£t
(&
ß
, 0,  sa);

63 
ß
.
ß_h™dÀr
 = 
sigöt_h™dÀr
;

64 
	`sigem±y£t
(&
ß
.
ß_mask
);

65 
ß
.
ß_Êags
 = 
SA_RESTART
;

66 i‡(
	`siga˘i⁄
(
SIGINT
, &
ß
, 
NULL
)) {

67 
	`oÂ_Áèl
(
î∫o
, "sigterm(SIGINT) failed");

70 
pkhdr
 = 
√w
 
pˇp_pkthdr
;

72 i‡(
	`nbIsInôülized
(Ë=
nbFAILURE
)

74 i‡(
	`°©
(
NETPDLFILE
, &
√çdl°©
Ë> 0 || 
î∫o
 !
ENOENT
)

76 
NëPDLFûeName
 +(
NETPDLDIR
) + 1 - 1;

79 i‡(
	`nbInôülize
(
NëPDLFûeName
, 
NëPDLPrŸoDBFœgs
, 
EºBuf
, (EºBuf)Ë=
nbFAILURE
)

81 
	`¥ötf
("Eº‹ inôülizögÅhêNëBì Libøry; %s\n", 
EºBuf
);

82  
nbFAILURE
;

86 
Decodî

	`nbAŒoˇãPackëDecodî
(
NëPDLDecodîFœgs
, 
EºBuf
, (ErrBuf));

87 i‡(
Decodî
 =
NULL
)

89 
	`¥ötf
("Eº‹ cª©ögÅhêNëPDLP¨£r: %s.\n", 
EºBuf
);

90  
nbFAILURE
;

94 i‡((
PackëDecodîV¨s

Decodî
->
	`GëPackëDecodîV¨s
()Ë=
NULL
)

96 
	`¥ötf
("Error: cannot getán instance ofÅheÇbPacketDecoderVars class.\n");

97  
nbFAILURE
;

102 i‡(
PackëDecodîV¨s
->
	`SëV¨übÀNumbî
((*Ë
NETPDL_VARIABLE_SHOWNETWORKNAMES
, 
ShowNëw‹kNames
)==
nbFAILURE
)

104 
	`¥ötf
("Error: cannot set variables ofÅhe decoderÖroperly.\n");

105  
nbFAILURE
;

108 
PDMLRódî
 = 
Decodî
->
	`GëPDMLRódî
();

112 
	}
}

114 
	$nblök_add_íåy_hm≠
(
oÂbuf
 * 
pktö
, 
hm≠
 * 
pktout
 ,
oÊ_m©ch_év
 * 
pktout_fõld
, 
Size
)

122 
	}
}

124 
	$nblök_check_f‹_íåy_⁄_hm≠
(
hm≠
 * 
pktout
 ,
uöt32_t
 
hódî
, 
oÊ_m©ch_év
 * 
fõld
)

130 
oÊ_m©ch_év
 *
ôî
;

131 
boﬁ
 
d⁄e
=0;

132 
	`HMAP_FOR_EACH
(
ôî
,
oÊ_m©ch_év
, 
hm≠_node
,
pktout
)

134 if(
ôî
->
hódî
 == header)

137 
fõld
 = 
ôî
;

142 
	}
}

147 
	$nblök_exåa˘_exthdr_fõlds
(
oÂbuf
 * 
pktö
, 
oÊ_m©ch
 * 
pktout
, 
uöt16_t
 
ty≥
, 
_nbPDMLFõld
 * 
fõld
, *
de°ö©i⁄_num
)

149 
oÊ_m©ch_év
 *
ôî
;

150 
uöt16_t
 *
ext_hdrs
;

153 i‡(
ty≥
 =
OFPIEH_DEST
){

154 (*
de°ö©i⁄_num
)++;

157 
	`HMAP_FOR_EACH_WITH_HASH
(
ôî
, 
oÊ_m©ch_év
, 
hm≠_node
, 
	`hash_öt
(
OXM_OF_IPV6_EXTHDR
, 0), &
pktout
->
m©ch_fõlds
)

160 
ext_hdrs
 = (
uöt16_t
*Ë
ôî
->
vÆue
;

161 *
ext_hdrs
 = *ext_hdrs;

162 if(!(*
ext_hdrs
 & 
OFPIEH_UNREP
)){

163 i‡(
ty≥
 !
OFPIEH_DEST
 && *
ext_hdrs
 &Åype){

164 *
ext_hdrs
 ^
OFPIEH_UNREP
;

168 if(*
ext_hdrs
 & 
ty≥
 && *
de°ö©i⁄_num
 > 2){

169 *
ext_hdrs
 ^
OFPIEH_UNREP
;

175 if(!(*
ext_hdrs
 & 
OFPIEH_UNSEQ
)){

176 
uöt16_t
 
√xt_ty≥
;

177 *
pEnd
;

178 
uöt16_t
 
√xt_hódî
 = 
	`°πﬁ
(
fõld
->
Fú°Chûd
->
VÆue
, &
pEnd
,16);

180 i‡(
√xt_hódî
 =
IPV6_NO_NEXT_HEADER
)

181 *
ext_hdrs
 ^
OFPIEH_NONEXT
;

185 if(
ty≥
 =
OFPIEH_DEST
){

186 i‡–
√xt_hódî
 =
IPV6_TYPE_HBH


187 || 
√xt_hódî
 =
IPV6_TYPE_FH
 ||Çext_hódî =
IPV6_TYPE_AH
 ||

188 
√xt_hódî
 =
IPV6_TYPE_ESP
 ){

189 *
ext_hdrs
 ^
OFPIEH_DEST
;

190 *
ext_hdrs
 ^
OFPIEH_UNSEQ
;

191 *
ext_hdrs
 = 
	`ht⁄s
(*ext_hdrs);

195 
m≠
<
uöt16_t
,uöt16_t>::
ôî©‹
 
ô
;

196 
ô
 = 
ext_hdr_‹dîs
.
	`föd
(
ty≥
);

197 if(
√xt_hódî
 =
IPV6_TYPE_HBH
)

198 
√xt_ty≥
 = 
HBH
;

199 if(
√xt_hódî
 =
IPV6_TYPE_DOH
){

200 
√xt_ty≥
 = 
DESTINATION
;

202 i‡(
√xt_hódî
 =
IPV6_TYPE_RH
)

203 
√xt_ty≥
 = 
ROUTING
;

204 i‡(
√xt_hódî
 =
IPV6_TYPE_FH
)

205 
√xt_ty≥
 = 
FRAGMENT
;

206 i‡(
√xt_hódî
 =
IPV6_TYPE_AH
)

207 
√xt_ty≥
 = 
AUTHENTICATION
;

208 i‡(
√xt_hódî
 =
IPV6_TYPE_ESP
)

209 
√xt_ty≥
 = 
ESP
;

210 
√xt_ty≥
 = 0xffff;

211 if(!(
ô
->
£c⁄d
 & 
√xt_ty≥
))

213 *
ext_hdrs
 ^
OFPIEH_UNSEQ
;

217 *
ext_hdrs
 ^
ty≥
;

218 *
ext_hdrs
 = *ext_hdrs;

222 
	}
}

225 
	$nblök_exåa˘_¥Ÿo_fõlds
(
oÂbuf
 * 
pktö
, 
_nbPDMLFõld
 * 
fõld
, 
oÊ_m©ch
 * 
pktout
, 
uöt32_t
 
hódî
)

233 i‡(
fõld
->
Mask
 !
NULL
)

235 
uöt8_t
 
i
;

236 
uöt8_t
 *
masked_fõld
;

237 i‡(
hódî
 =
OXM_OF_VLAN_VID
){

238 
uöt16_t
 
m_vÆue
;

239 
	`ssˇnf
(
fõld
->
VÆue
, "%hx", &
m_vÆue
);

240 
m_vÆue
 = (m_vÆuê& 
VLAN_VID_MASK
Ë>> 
VLAN_VID_SHIFT
;

241 
	`oÊ_°ru˘s_m©ch_put16
(
pktout
, 
hódî
, 
m_vÆue
);

243 i‡(
hódî
 =
OXM_OF_VLAN_PCP
){

244 
uöt16_t
 
m_vÆue
;

245 
	`ssˇnf
(
fõld
->
VÆue
, "%hx", &
m_vÆue
);

246 
m_vÆue
 = (m_vÆuê& 
VLAN_PCP_MASK
Ë>> 
VLAN_PCP_SHIFT
;

247 
	`oÊ_°ru˘s_m©ch_put16
(
pktout
, 
hódî
, 
m_vÆue
);

249 if(
hódî
 =
OXM_OF_IP_DSCP
){

250 
uöt8_t
 
m_vÆue
;

251 
	`ssˇnf
(
fõld
->
VÆue
, "%hhx", &
m_vÆue
);

252 
m_vÆue
 = m_vÆuê& 
IP_DSCP_MASK
;

253 
	`oÊ_°ru˘s_m©ch_put8
(
pktout
, 
hódî
, 
m_vÆue
);

255 if(
hódî
 =
OXM_OF_IP_ECN
){

256 
uöt8_t
 
m_vÆue
;

257 
	`ssˇnf
(
fõld
->
VÆue
, "%hhx", &
m_vÆue
);

258 
m_vÆue
 = m_vÆuê& 
OXM_OF_IP_ECN
;

259 
	`oÊ_°ru˘s_m©ch_put8
(
pktout
, 
hódî
, 
m_vÆue
);

261 if(
hódî
 =
OXM_OF_MPLS_LABEL
){

262 
uöt32_t
 
m_vÆue
;

263 
	`ssˇnf
(
fõld
->
VÆue
, "%x", &
m_vÆue
);

264 
m_vÆue
 = (m_vÆuê& 
MPLS_LABEL_MASK
Ë>> 
MPLS_LABEL_SHIFT
;

265 
	`oÊ_°ru˘s_m©ch_put32
(
pktout
, 
hódî
, 
m_vÆue
);

267 i‡(
hódî
 =
OXM_OF_MPLS_TC
){

268 
uöt8_t
 
m_vÆue
;

269 
	`ssˇnf
(
fõld
->
VÆue
, "%hhx", &
m_vÆue
);

270 
m_vÆue
 = (m_vÆuê& 
MPLS_TC_MASK
Ë>> 
MPLS_TC_SHIFT
;

271 
	`oÊ_°ru˘s_m©ch_put32
(
pktout
, 
hódî
, 
m_vÆue
);

273 i‡(
hódî
 =
OXM_OF_MPLS_BOS
){

274 
uöt8_t
 
m_vÆue
;

275 
	`ssˇnf
(
fõld
->
VÆue
, "%hhx", &
m_vÆue
);

276 
m_vÆue
 = (m_vÆuê& 
MPLS_S_MASK
Ë>> 
MPLS_S_SHIFT
;

277 
	`oÊ_°ru˘s_m©ch_put8
(
pktout
, 
hódî
, 
m_vÆue
);

279 i‡(
hódî
 =
OXM_OF_PBB_ISID
){

280 
uöt32_t
 
m_vÆue
;

281 
	`ssˇnf
(
fõld
->
VÆue
, "%x", &
m_vÆue
);

282 
m_vÆue
 = (m_vÆuê& 
PBB_ISID_MASK
);

283 
	`oÊ_°ru˘s_m©ch_put32
(
pktout
, 
hódî
, 
m_vÆue
);

296 
fõld
->
Size
){

298 
uöt8_t
 
m_vÆue
;

299 
	`ssˇnf
(
fõld
->
VÆue
, "%hhx", &
m_vÆue
);

300 
	`oÊ_°ru˘s_m©ch_put8
(
pktout
, 
hódî
, 
m_vÆue
);

304 
uöt16_t
 
m_vÆue
 = *((uöt16_t*)((
uöt8_t
*)
pktö
->
d©a
 + 
fõld
->
Posôi⁄
));

305 
m_vÆue
 = 
	`¡ohs
(m_value);

306 
oÊ_m©ch_év
 *
ôî
;

307 if(
hódî
 =
OXM_OF_ETH_TYPE
){

309 
	`HMAP_FOR_EACH_WITH_HASH
(
ôî
, 
oÊ_m©ch_év
, 
hm≠_node
, 
	`hash_öt
(
OXM_OF_ETH_TYPE
, 0), &
pktout
->
m©ch_fõlds
)

314 if(
m_vÆue
 =
ETH_TYPE_VLAN
 || m_vÆuê=
ETH_TYPE_SVLAN
 ||

315 
m_vÆue
 =
ETH_TYPE_VLAN_QöQ
 || m_vÆuê=
ETH_TYPE_VLAN_PBB_B
){

319 
	`oÊ_°ru˘s_m©ch_put16
(
pktout
, 
hódî
, 
m_vÆue
);

323 
uöt32_t
 
m_vÆue
;

325 i‡(
hódî
 =
OXM_OF_IPV4_DST
 || hódî =
OXM_OF_IPV4_SRC
 ||

326 
hódî
 =
OXM_OF_ARP_SPA
 || hódî =
OXM_OF_ARP_TPA
){

327 
m_vÆue
 = *((
uöt32_t
*)((
uöt8_t
*)
pktö
->
d©a
 + 
fõld
->
Posôi⁄
));

328 
	`oÊ_°ru˘s_m©ch_put32
(
pktout
, 
hódî
, 
m_vÆue
);

331 
m_vÆue
 = 
	`¡ohl
(*((
uöt32_t
*)((
uöt8_t
*)
pktö
->
d©a
 + 
fõld
->
Posôi⁄
)));

332 
	`oÊ_°ru˘s_m©ch_put32
(
pktout
, 
hódî
, 
m_vÆue
);

337 
	`oÊ_°ru˘s_m©ch_put_ëh
(
pktout
, 
hódî
,(
uöt8_t
*)
pktö
->
d©a
 + 
fõld
->
Posôi⁄
);

341 
uöt64_t
 
m_vÆue
 = *((uöt64_t*)((
uöt8_t
*)
pktö
->
d©a
 + 
fõld
->
Posôi⁄
));

342 
m_vÆue
 = 
	`¡oh64
(m_value);

343 
	`oÊ_°ru˘s_m©ch_put64
(
pktout
, 
hódî
, 
m_vÆue
);

347 
	`oÊ_°ru˘s_m©ch_put_ùv6
(
pktout
, 
hódî
,(
uöt8_t
*)
pktö
->
d©a
 + 
fõld
->
Posôi⁄
);

354 
	}
}

357 "C" 
	$nblök_∑ckë_∑r£
(
oÂbuf
 * 
pktö
, 
oÊ_m©ch
 * 
pktout
, 
¥Ÿocﬁs_°d
 * 
pkt_¥Ÿo
)

359 
	`¥Ÿocﬁ_ª£t
(
pkt_¥Ÿo
);

360 
pkhdr
->
ˇ∂í
 = 
pktö
->
size
;

361 
pkhdr
->
Àn
 = 
pktö
->
size
;

363 
_nbPDMLPackë
 * 
cuº_∑ckë
;

365 
ext_hdr_‹dîs
.
	`ö£π
–
∑ú
<
uöt16_t
,uöt16_t>(
OFPIEH_HOP
,
HBH_ALLOWED
));

366 
ext_hdr_‹dîs
.
	`ö£π
–
∑ú
<
uöt16_t
,uöt16_t>(
OFPIEH_DEST
,
DESTINATION_ALLOWED
));

367 
ext_hdr_‹dîs
.
	`ö£π
–
∑ú
<
uöt16_t
,uöt16_t>(
OFPIEH_ROUTER
,
ROUTING_ALLOWED
));

368 
ext_hdr_‹dîs
.
	`ö£π
–
∑ú
<
uöt16_t
,uöt16_t>(
OFPIEH_FRAG
,
FRAG_ALLOWED
));

369 
ext_hdr_‹dîs
.
	`ö£π
–
∑ú
<
uöt16_t
,uöt16_t>(
OFPIEH_AUTH
,
AUTH_ALLOWED
));

370 
ext_hdr_‹dîs
.
	`ö£π
–
∑ú
<
uöt16_t
,uöt16_t>(
OFPIEH_ESP
,
ESP_ALLOWED
));

373 i‡(
Decodî
->
	`DecodePackë
(
LökLayîTy≥
, 
PackëCou¡î
, 
pkhdr
, (c⁄° *Ë(
pktö
->
d©a
)Ë=
nbFAILURE
)

375 
	`¥ötf
("\nEº‹ decodögáÖackë %s\n\n", 
Decodî
->
	`GëLa°Eº‹
());

380 
PDMLRódî
->
	`GëCuºítPackë
(&
cuº_∑ckë
);

382 
_nbPDMLPrŸo
 * 
¥Ÿo
;

383 
_nbPDMLFõld
 * 
fõld
;

385 
de°ö©i⁄_num
 = 0;

386 
¥Ÿo
 = 
cuº_∑ckë
->
Fú°PrŸo
;

387 
boﬁ
 
¥Ÿo_d⁄e
 = 
åue
;

388 
¥Ÿo
!
NULL
)

391 
fõld
 = 
¥Ÿo
->
Fú°Fõld
;

392 
¥Ÿo_d⁄e
 = 
Ál£
;

393 
°rög
 
	`¥Ÿocﬁ_Name
 (
¥Ÿo
->
Name
);

394 
°rög
 
	`fõld_Name
 (
fõld
->
Name
);

398 i‡(
¥Ÿocﬁ_Name
.
	`com∑ª
("ëhî√t"Ë=0 && 
pkt_¥Ÿo
->
ëh
 =
NULL
)

400 
pkt_¥Ÿo
->
ëh
 = (
ëh_hódî
 *Ë–(
uöt8_t
*Ë
pktö
->
d©a
 + 
¥Ÿo
->
Posôi⁄
);

401 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"d°",ÖrŸo->
Fú°Fõld
, &
fõld
);

402 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_ETH_DST
);

403 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"§c",ÖrŸo->
Fú°Fõld
, &
fõld
);

404 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_ETH_SRC
);

405 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"ty≥",ÖrŸo->
Fú°Fõld
, &
fõld
);

406 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_ETH_TYPE
);

409 i‡((
¥Ÿocﬁ_Name
.
	`com∑ª
("vlan") == 0))

411 if(
pkt_¥Ÿo
->
vœn_œ°
 =
NULL
){

412 
pkt_¥Ÿo
->
vœn
 =Ökt_¥Ÿo->
vœn_œ°
 = (
vœn_hódî
 *Ë((
uöt8_t
*Ë
pktö
->
d©a
 + 
¥Ÿo
->
Posôi⁄
);

413 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"¥i",ÖrŸo->
Fú°Fõld
, &
fõld
);

414 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_VLAN_PCP
);

415 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"vœnid",ÖrŸo->
Fú°Fõld
, &
fõld
);

416 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_VLAN_VID
);

417 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"ty≥",ÖrŸo->
Fú°Fõld
, &
fõld
);

418 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_ETH_TYPE
);

421 
pkt_¥Ÿo
->
vœn_œ°
 = (
vœn_hódî
 *Ë((
uöt8_t
*Ë
pktö
->
d©a
 + 
¥Ÿo
->
Posôi⁄
);

422 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"ty≥",ÖrŸo->
Fú°Fõld
, &
fõld
);

423 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_ETH_TYPE
);

427 i‡(
¥Ÿocﬁ_Name
.
	`com∑ª
("m∂s"Ë=0 && 
pkt_¥Ÿo
->
m∂s
 =
NULL
)

429 
pkt_¥Ÿo
->
m∂s
 = (
m∂s_hódî
 *Ë((
uöt8_t
*Ë
pktö
->
d©a
 + 
¥Ÿo
->
Posôi⁄
);

430 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"œbñ",ÖrŸo->
Fú°Fõld
, &
fõld
);

431 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_MPLS_LABEL
);

432 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"cos",ÖrŸo->
Fú°Fõld
, &
fõld
);

433 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_MPLS_TC
);

434 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"bos",ÖrŸo->
Fú°Fõld
, &
fõld
);

435 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_MPLS_BOS
);

437 i‡(
¥Ÿocﬁ_Name
.
	`com∑ª
("¨p"Ë=0 && 
pkt_¥Ÿo
->
¨p
 =
NULL
)

439 
pkt_¥Ÿo
->
¨p
 = (
¨p_ëh_hódî
 *Ë((
uöt8_t
*Ë
pktö
->
d©a
 + 
¥Ÿo
->
Posôi⁄
);

440 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"›",ÖrŸo->
Fú°Fõld
, &
fõld
);

441 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_ARP_OP
);

442 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"sHwAddr",ÖrŸo->
Fú°Fõld
, &
fõld
);

443 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_ARP_SHA
);

444 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"sIPAddr",ÖrŸo->
Fú°Fõld
, &
fõld
);

445 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_ARP_SPA
);

446 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"dHwAddr",ÖrŸo->
Fú°Fõld
, &
fõld
);

447 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_ARP_THA
);

448 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"dIPAddr",ÖrŸo->
Fú°Fõld
, &
fõld
);

449 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_ARP_TPA
);

452 i‡(
¥Ÿocﬁ_Name
.
	`com∑ª
("pbb"Ë=0 && 
pkt_¥Ÿo
->
pbb
 =
NULL
)

454 
pkt_¥Ÿo
->
pbb
 = (
pbb_hódî
 *Ë((
uöt8_t
*Ë
pktö
->
d©a
 + 
¥Ÿo
->
Posôi⁄
);

455 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"isid",ÖrŸo->
Fú°Fõld
, &
fõld
);

456 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_PBB_ISID
);

457 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"ty≥",ÖrŸo->
Fú°Fõld
, &
fõld
);

458 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_ETH_TYPE
);

460 i‡(
¥Ÿocﬁ_Name
.
	`com∑ª
("ù"Ë=0 && 
pkt_¥Ÿo
->
ùv4
 =
NULL
)

462 
pkt_¥Ÿo
->
ùv4
 = (
ù_hódî
 *Ë((
uöt8_t
*Ë
pktö
->
d©a
 + 
¥Ÿo
->
Posôi⁄
);

463 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"ù ds˝",ÖrŸo->
Fú°Fõld
, &
fõld
);

464 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_IP_DSCP
);

465 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"ùÉ˙",ÖrŸo->
Fú°Fõld
, &
fõld
);

466 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_IP_ECN
);

467 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"§c",ÖrŸo->
Fú°Fõld
, &
fõld
);

468 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_IPV4_SRC
);

469 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"d°",ÖrŸo->
Fú°Fõld
, &
fõld
);

470 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_IPV4_DST
);

471 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"√xç",ÖrŸo->
Fú°Fõld
, &
fõld
);

472 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_IP_PROTO
);

474 i‡(
¥Ÿocﬁ_Name
.
	`com∑ª
("ùv6"Ë=0 && 
pkt_¥Ÿo
->
ùv6
 =
NULL
)

476 
_nbPDMLFõld
 * 
ù_¥Ÿo
 = 
NULL
;

477 
pkt_¥Ÿo
->
ùv6
 = (
ùv6_hódî
 *Ë((
uöt8_t
*Ë
pktö
->
d©a
 + 
¥Ÿo
->
Posôi⁄
);

478 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"Êabñ",ÖrŸo->
Fú°Fõld
, &
fõld
);

479 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_IPV6_FLABEL
);

481 
oÊ_m©ch_év
 * 
EH_fõld
;

482 
uöt16_t
 
bô_fõld
 = 
OFPIEH_NONEXT
;

483 
uöt8_t
 
i
;

484 
EH_fõld
 = (
oÊ_m©ch_év
 *Ë
	`mÆloc
((ofl_match_tlv));

485 
EH_fõld
->
vÆue
 = (
uöt8_t
*Ë
	`mÆloc
(
	`OXM_LENGTH
(
OXM_OF_IPV6_EXTHDR
));

486 
EH_fõld
->
hódî
 = 
OXM_OF_IPV6_EXTHDR
;

488 
	`mem£t
(
EH_fõld
->
vÆue
,0x0, (
uöt16_t
));

490 *
pEnd
;

491 
uöt16_t
 
√xt_hódî
 = 
	`°πﬁ
(
fõld
->
VÆue
, &
pEnd
,16);

493 i‡(
√xt_hódî
 =
IPV6_NO_NEXT_HEADER
)

495 
uöt16_t
 *
ext_hdrs
;

497 
ext_hdrs
 = (
uöt16_t
*Ë
EH_fõld
->
vÆue
;

498 *
ext_hdrs
 ^
OFPIEH_NONEXT
;

499 *
ext_hdrs
 = *ext_hdrs;

502 
	`hm≠_ö£π_Á°
(&
pktout
->
m©ch_fõlds
, &
EH_fõld
->
hm≠_node
,

503 
	`hash_öt
(
EH_fõld
->
hódî
, 0));

504 
pktout
->
hódî
.
Àngth
 += 6;

505 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"§c",ÖrŸo->
Fú°Fõld
, &
fõld
);

506 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_IPV6_SRC
);

507 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"d°",ÖrŸo->
Fú°Fõld
, &
fõld
);

508 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_IPV6_DST
);

510 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"√xthdr",ÖrŸo->
Fú°Fõld
, &
ù_¥Ÿo
);

512 i‡(
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"HBH",ÖrŸo->
Fú°Fõld
, &
fõld
Ë=
nbSUCCESS
){

513 
	`nblök_exåa˘_exthdr_fõlds
(
pktö
, 
pktout
, 
OFPIEH_HOP
, 
fõld
, &
de°ö©i⁄_num
);

514 if(!
fõld
->
NextFõld
)

515 
ù_¥Ÿo
 = 
fõld
->
Fú°Chûd
;

517 if(
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"FH",ÖrŸo->
Fú°Fõld
, &
fõld
Ë=
nbSUCCESS
){

518 
	`nblök_exåa˘_exthdr_fõlds
(
pktö
, 
pktout
, 
OFPIEH_FRAG
, 
fõld
, &
de°ö©i⁄_num
);

519 if(!
fõld
->
NextFõld
)

520 
ù_¥Ÿo
 = 
fõld
->
Fú°Chûd
;

522 if(
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"AH",¥Ÿo->
Fú°Fõld
, &
fõld
Ë=
nbSUCCESS
){

523 
	`nblök_exåa˘_exthdr_fõlds
(
pktö
, 
pktout
, 
OFPIEH_AUTH
, 
fõld
, &
de°ö©i⁄_num
);

524 if(!
fõld
->
NextFõld
)

525 
ù_¥Ÿo
 = 
fõld
->
Fú°Chûd
;

527 if(
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"DOH",ÖrŸo->
Fú°Fõld
, &
fõld
Ë=
nbSUCCESS
){

528 
	`nblök_exåa˘_exthdr_fõlds
(
pktö
, 
pktout
, 
OFPIEH_DEST
, 
fõld
, &
de°ö©i⁄_num
);

529 if(!
fõld
->
NextFõld
)

530 
ù_¥Ÿo
 = 
fõld
->
Fú°Chûd
;

532 if(
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"RH",ÖrŸo->
Fú°Fõld
, &
fõld
Ë=
nbSUCCESS
){

533 
	`nblök_exåa˘_exthdr_fõlds
(
pktö
, 
pktout
, 
OFPIEH_ROUTER
, 
fõld
, &
de°ö©i⁄_num
);

534 if(!
fõld
->
NextFõld
)

535 
ù_¥Ÿo
 = 
fõld
->
Fú°Chûd
;

537 if(
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"ESP",ÖrŸo->
Fú°Fõld
, &
fõld
Ë=
nbSUCCESS
){

538 
	`nblök_exåa˘_exthdr_fõlds
(
pktö
, 
pktout
, 
OFPIEH_ESP
, 
fõld
, &
de°ö©i⁄_num
);

539 if(!
fõld
->
NextFõld
)

540 
ù_¥Ÿo
 = 
fõld
->
Fú°Chûd
;

542 i‡(
ù_¥Ÿo
){

543 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
ù_¥Ÿo
, 
pktout
, 
OXM_OF_IP_PROTO
);

546 i‡(
¥Ÿocﬁ_Name
.
	`com∑ª
("t˝"Ë=0 && 
pkt_¥Ÿo
->
t˝
 =
NULL
)

548 
pkt_¥Ÿo
->
t˝
 = (
t˝_hódî
 *Ë((
uöt8_t
*Ë
pktö
->
d©a
 + 
¥Ÿo
->
Posôi⁄
);

549 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"•‹t",ÖrŸo->
Fú°Fõld
, &
fõld
);

550 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_TCP_SRC
);

551 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"dp‹t",ÖrŸo->
Fú°Fõld
, &
fõld
);

552 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_TCP_DST
);

554 i‡(
¥Ÿocﬁ_Name
.
	`com∑ª
("udp"Ë=0 && 
pkt_¥Ÿo
->
udp
 =
NULL
)

556 
pkt_¥Ÿo
->
udp
 = (
udp_hódî
 *Ë((
uöt8_t
*Ë
pktö
->
d©a
 + 
¥Ÿo
->
Posôi⁄
);

557 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"•‹t",ÖrŸo->
Fú°Fõld
, &
fõld
);

558 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_UDP_SRC
);

559 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"dp‹t",ÖrŸo->
Fú°Fõld
, &
fõld
);

560 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_UDP_DST
);

562 i‡(
¥Ÿocﬁ_Name
.
	`com∑ª
("s˘p"Ë=0 && 
pkt_¥Ÿo
->
s˘p
 =
NULL
)

564 
pkt_¥Ÿo
->
s˘p
 = (
s˘p_hódî
 *Ë((
uöt8_t
*Ë
pktö
->
d©a
 + 
¥Ÿo
->
Posôi⁄
);

567 i‡(
¥Ÿocﬁ_Name
.
	`com∑ª
("icmp"Ë=0 && 
pkt_¥Ÿo
->
icmp
 =
NULL
){

568 
pkt_¥Ÿo
->
icmp
 = (
icmp_hódî
 *Ë((
uöt8_t
*Ë
pktö
->
d©a
 + 
¥Ÿo
->
Posôi⁄
);

570 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"ty≥",ÖrŸo->
Fú°Fõld
, &
fõld
);

571 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_ICMPV4_TYPE
);

572 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"code",ÖrŸo->
Fú°Fõld
, &
fõld
);

573 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_ICMPV4_CODE
);

575 i‡(
¥Ÿocﬁ_Name
.
	`com∑ª
("icmp6"Ë=0 && 
pkt_¥Ÿo
->
icmp
 =
NULL
){

576 
pkt_¥Ÿo
->
icmp
 = (
icmp_hódî
 *Ë((
uöt8_t
*Ë
pktö
->
d©a
 + 
¥Ÿo
->
Posôi⁄
);

578 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"ty≥",ÖrŸo->
Fú°Fõld
, &
fõld
);

579 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_ICMPV6_TYPE
);

580 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"code",ÖrŸo->
Fú°Fõld
, &
fõld
);

581 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_ICMPV6_CODE
);

582 i‡(
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"NeighSﬁ",ÖrŸo->
Fú°Fõld
, &
fõld
Ë=
nbSUCCESS
 ||

583 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"NeighAdv",ÖrŸo->
Fú°Fõld
, &
fõld
Ë=
nbSUCCESS
){

584 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"èrgë_addªss",ÖrŸo->
Fú°Fõld
, &
fõld
);

585 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_IPV6_ND_TARGET
);

587 i‡(
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"NDO",ÖrŸo->
Fú°Fõld
, &
fõld
Ë=
nbSUCCESS
){

588 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"§¯lök_œyî_addªss",ÖrŸo->
Fú°Fõld
, &
fõld
);

589 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_IPV6_ND_SLL
);

590 
PDMLRódî
->
	`GëPDMLFõld
(
¥Ÿo
->
Name
, (*Ë"d°Üök_œyî_addªss",ÖrŸo->
Fú°Fõld
, &
fõld
);

591 
	`nblök_exåa˘_¥Ÿo_fõlds
(
pktö
, 
fõld
, 
pktout
, 
OXM_OF_IPV6_ND_TLL
);

594 !
fõld
->
isFõld
)

598 
fõld
 = fõld->
Fú°Chûd
;

600 i‡(
fõld
->
NextFõld
 =
NULL
 && fõld->
P¨ítFõld
 != NULL)

603 
fõld
 = fõld->
P¨ítFõld
;

606 
¥Ÿo
 =ÖrŸo->
NextPrŸo
;

611 
	}
}

	@nbee_link/nbee_link.h

8 #i‚de‡
NBEE_LINK_H_


9 
	#NBEE_LINK_H_


	)

11 
	~<°dio.h
>

12 
	~<öây≥s.h
>

13 
	~<°dlib.h
>

15 
	~"lib/hm≠.h
"

16 
	~"lib/oÂbuf.h
"

17 
	~"lib/∑ckës.h
"

19 
	#ETHADDLEN
 6

	)

20 
	#IPV6ADDLEN
 16

	)

21 
	#ETHTYPELEN
 2

	)

22 
	#ERRBUF_SIZE
 256

	)

25 
	#HBH_ALLOWED
 
DESTINATION
 ^ 
ROUTING
 ^ 
FRAGMENT
 ^ 
AUTHENTICATION
 ^ 
ESP


	)

26 
	#DESTINATION_ALLOWED
 
ROUTING


	)

27 
	#ROUTING_ALLOWED
 
FRAGMENT
 ^ 
AUTHENTICATION
 ^ 
ESP
 ^ 
DESTINATION


	)

28 
	#FRAG_ALLOWED
 
AUTHENTICATION
 ^ 
ESP
 ^ 
DESTINATION


	)

29 
	#AUTH_ALLOWED
 
ESP
 ^ 
DESTINATION


	)

30 
	#ESP_ALLOWED
 
DESTINATION


	)

32 
	#DOH_BEF_RH
 1

	)

33 
	#DOH_AFTER_RH
 2

	)

34 
	#DOH_NO_RH
 3

	)

36 
	spˇp_pkthdr
 {

37 
timevÆ
 
	mts
;

38 
uöt32_t
 
	mˇ∂í
;

39 
uöt32_t
 
	mÀn
;

40 }
	tpˇp_pkthdr_t
;

43 
	sc⁄åﬁ_eh_fõlds
 {

44 
uöt8_t
 
	mcou¡_DOEH
;

45 
uöt32_t
 
	mposôi⁄_EH
[10];

49 #ifde‡
__˝lu•lus


52 
nblök_öôülize
();

54 #ifde‡
__˝lu•lus


57 
nblök_∑ckë_∑r£
(
oÂbuf
 * 
pktö
, 
oÊ_m©ch
 * 
pktout
, 
¥Ÿocﬁs_°d
 * 
pkt_¥Ÿo
);

	@oflib-exp/ofl-exp-bme.c

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<√töë/ö.h
>

35 
	~"›íÊow/›íÊow.h
"

36 
	~"›íÊow/bme-ext.h
"

37 
	~"oÊ-exp-bme.h
"

38 
	~"../oÊib/oÊ-¥öt.h
"

39 
	~"../oÊib/oÊ-log.h
"

41 #i‚de‡
UNUSED


42 
	#UNUSED
 
	`__©åibuã__
((
__unu£d__
))

	)

45 
	#LOG_MODULE
 
oÊ_exp_bme


	)

46 
	$OFL_LOG_INIT
(
LOG_MODULE
)

48 
	#ETH_ADDR_FMT
 \

49 "%02"
PRIx8
":%02"PRIx8":%02"PRIx8":%02"PRIx8":%02"PRIx8":%02"
	)
PRIx8

50 
	#ETH_ADDR_ARGS
(
ó
) \

51 (
ó
)[0], (ó)[1], (ó)[2], (ó)[3], (ó)[4], (ó)[5]

	)

54 
	$oÊ_exp_bme_a˘_∑ck
(
oÊ_a˘i⁄_hódî
 *
§c
,

55 
oÂ_a˘i⁄_hódî
 *
d°
)

57 *
hód
;

58 
oÊ_bme_a˘i⁄_hódî
 * 
oÊ_a˘
 =

59 (
oÊ_bme_a˘i⁄_hódî
*Ë
§c
;

60 
oÂ_a˘i⁄_ex≥rimíãr_hódî
 *
exp
 =

61 (
oÂ_a˘i⁄_ex≥rimíãr_hódî
 *Ë
d°
;

62 
size_t
 
size
 = (
oÂ_a˘i⁄_ex≥rimíãr_hódî
);

63 
exp
->
ty≥
 = 
	`ht⁄s
–
OFPAT_EXPERIMENTER
 );

64 
exp
->
ex≥rimíãr
 = 
	`ht⁄l
–
BME_EXPERIMENTER_ID
 );

65 
hód
 = (*)
exp
 + (
oÂ_a˘i⁄_ex≥rimíãr_hódî
);

67 
oÊ_a˘
->
ty≥
) {

68 
BME_OUTPUT_BY_METADATA
: {

69 
oÂ_bme_a˘i⁄_hódî
 
	toÂ_t
;

70 
oÊ_bme_a˘i⁄_hódî
 
	toÊ_t
;

71 
oÂ_t
 *
da
;

73 
da
 = (
oÂ_t
 *Ë
hód
;

74 
da
->
ty≥
 = 
	`ht⁄s
–
oÊ_a˘
->type );

75 
da
->
Àn
 = 
	`ht⁄s
–(
oÂ_t
) );

77 
size
 +(
oÂ_t
);

80 
BME_SET_FIELD_FROM_METADATA
:

81 
BME_SET_METADATA_FROM_PACKET
: {

82 
oÂ_bme_£t_mëad©a
 
	toÂ_t
;

83 
oÊ_bme_£t_mëad©a
 
	toÊ_t
;

84 
oÂ_t
 *
da
;

85 
oÊ_t
 *
ß
 = (oÊ_à*Ë
oÊ_a˘
;

87 
da
 = (
oÂ_t
 *Ë
hód
;

88 
da
->
ty≥
 = 
	`ht⁄s
–
oÊ_a˘
->type );

89 
da
->
Àn
 = 
	`ht⁄s
–(
oÂ_t
) );

90 
da
->
fõld
 = 
	`ht⁄l
–
ß
->field );

91 
da
->
off£t
 = 
ß
->offset;

93 
size
 +(
oÂ_t
);

96 
BME_RACE_MPLS_LABEL
: {

97 
oÂ_bme_£t_m∂s_œbñ
 
	toÂ_t
;

98 
oÂ_t
 *
da
;

100 
da
 = (
oÂ_t
 *Ë
hód
;

101 
da
->
ty≥
 = 
	`ht⁄s
–
oÊ_a˘
->type );

102 
da
->
Àn
 = 
	`ht⁄s
–(
oÂ_t
) );

104 
size
 +(
oÂ_t
);

107 
BME_SET_MPLS_LABEL_FROM_COUNTER
: {

108 
oÂ_bme_£t_m∂s_œbñ
 
	toÂ_t
;

109 
oÂ_t
 *
da
;

111 
da
 = (
oÂ_t
 *Ë
hód
;

112 
da
->
ty≥
 = 
	`ht⁄s
–
oÊ_a˘
->type );

113 
da
->
Àn
 = 
	`ht⁄s
–(
oÂ_t
) );

115 
size
 +(
oÂ_t
);

118 
BME_XOR_DECODE
:

119 
BME_XOR_ENCODE
: {

120 
oÂ_bme_x‹_∑ckë
 
	toÂ_t
;

121 
oÊ_bme_x‹_∑ckë
 
	toÊ_t
;

122 
oÂ_t
 *
da
;

123 
oÊ_t
 *
ß
 = (oÊ_à*Ë
oÊ_a˘
;

125 
da
 = (
oÂ_t
 *Ë
hód
;

126 
da
->
ty≥
 = 
	`ht⁄s
–
oÊ_a˘
->type );

127 
da
->
Àn
 = 
	`ht⁄s
–(
oÂ_t
) );

128 
da
->
œbñ_a
 = 
	`ht⁄l
–
ß
->label_a );

129 
da
->
œbñ_b
 = 
	`ht⁄l
–
ß
->label_b );

131 
size
 +(
oÂ_t
);

134 
BME_UPDATE_DISTANCE_IN_METADATA
: {

135 
oÂ_bme_upd©e_di°™˚
 
	toÂ_t
;

136 
oÊ_bme_upd©e_di°™˚
 
	toÊ_t
;

137 
oÂ_t
 *
da
;

138 
oÊ_t
 *
ß
 = (oÊ_à*Ë
oÊ_a˘
;

140 
da
 = (
oÂ_t
 *Ë
hód
;

141 
da
->
ty≥
 = 
	`ht⁄s
–
oÊ_a˘
->type );

142 
da
->
Àn
 = 
	`ht⁄s
–(
oÂ_t
) );

143 
da
->
p‹t
 = 
	`ht⁄l
–
ß
->port );

144 
	`mem˝y
(&(
da
->
hw_addr
), &(
ß
->hw_addr), 
OFP_ETH_ALEN
);

146 i‡(
ß
->
p‹t
 & 0xFFFF0000) {

147 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Port will beÅruncatedÅo uint16_t in"

148 " BME_UPDATE_DISTANCE_IN_METADATA (%u)", 
da
->
p‹t
);

151 
size
 +(
oÂ_t
);

154 
BME_SET_METADATA_FROM_COUNTER
: {

155 
oÂ_bme_£t_mëad©a_‰om_cou¡î
 
	toÂ_t
;

156 
oÊ_bme_£t_mëad©a_‰om_cou¡î
 
	toÊ_t
;

157 
oÂ_t
 *
da
;

158 
oÊ_t
 *
ß
 = (oÊ_à*Ë
oÊ_a˘
;

160 
da
 = (
oÂ_t
 *Ë
hód
;

161 
da
->
ty≥
 = 
	`ht⁄s
–
oÊ_a˘
->type );

162 
da
->
Àn
 = 
	`ht⁄s
–(
oÂ_t
) );

163 
da
->
max_num
 = 
	`ht⁄l
–
ß
->max_num );

165 
size
 +(
oÂ_t
);

168 
BME_SERIALIZE
: {

169 
oÂ_bme_£rülize
 
	toÂ_t
;

170 
oÊ_bme_£rülize
 
	toÊ_t
;

171 
oÂ_t
 *
da
;

172 
oÊ_t
 *
ß
 = (oÊ_à*Ë
oÊ_a˘
;

174 
da
 = (
oÂ_t
 *Ë
hód
;

175 
da
->
ty≥
 = 
	`ht⁄s
–
oÊ_a˘
->type );

176 
da
->
Àn
 = 
	`ht⁄s
–(
oÂ_t
) );

177 
da
->
m∂s_œbñ
 = 
	`ht⁄l
–
ß
->mpls_label );

178 
da
->
timeout
 = 
	`ht⁄s
–
ß
->timeout );

180 
size
 +(
oÂ_t
);

184 
	`OFL_LOG_WARN
(
LOG_MODULE
, "pack: unknownáctionÅype (%u).",

185 
oÊ_a˘
->
ty≥
);

191 
exp
->
Àn
 = 
	`ht⁄s
–
size
 );

192  
size
;

193 
	}
}

195 
oÊ_îr


196 
	$oÊ_exp_bme_a˘_u≈ack
(
oÂ_a˘i⁄_hódî
 *
§c
, 
size_t
 *
Àn
,

197 
oÊ_a˘i⁄_hódî
 **
d°
)

199 
oÂ_bme_a˘i⁄_hódî
 *
a˘
;

200 
a˘
 = (
oÂ_bme_a˘i⁄_hódî
 *)

201 ((*Ë
§c
 + (
oÂ_a˘i⁄_ex≥rimíãr_hódî
));

203 *
Àn
 -(
oÂ_a˘i⁄_ex≥rimíãr_hódî
);

205 i‡(*
Àn
 < 
	`¡ohs
(
a˘
->len)) {

206 
	`OFL_LOG_WARN
(
LOG_MODULE
,

209 
	`¡ohs
(
a˘
->
Àn
), *len);

210  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

213 i‡((
	`¡ohs
(
a˘
->
Àn
) % 8) != 0) {

214 
	`OFL_LOG_WARN
(
LOG_MODULE
,

216 "®mu…ùÀ o‡64 bô†(%u).", 
	`¡ohs
(
a˘
->
Àn
));

217  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

220 
	`¡ohs
(
a˘
->
ty≥
)) {

221 
BME_OUTPUT_BY_METADATA
: {

222 
oÂ_bme_a˘i⁄_hódî
 
	toÂ_t
;

223 
oÊ_bme_a˘i⁄_hódî
 
	toÊ_t
;

224 
oÂ_t
 *
ß
;

225 
oÊ_t
 *
da
;

227 i‡(*
Àn
 < (
oÂ_t
)) {

228 
	`OFL_LOG_WARN
(
LOG_MODULE
,

230 "ha†övÆidÜígth (%zu).", *
Àn
);

231  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

234 
ß
 = (
oÂ_t
 *Ë
a˘
;

235 
da
 = (
oÊ_t
 *Ë
	`mÆloc
((ofl_t));

237 
da
->
hódî
.
ty≥
 = 
OFPAT_EXPERIMENTER
;

238 
da
->
ex≥rimíãr_id
 = 
BME_EXPERIMENTER_ID
;

239 
da
->
ty≥
 = 
	`¡ohs
(
a˘
->type);

241 *
Àn
 -(
oÂ_t
);

242 *
d°
 = (
oÊ_a˘i⁄_hódî
 *Ë
da
;

245 
BME_SET_FIELD_FROM_METADATA
:

246 
BME_SET_METADATA_FROM_PACKET
: {

247 
oÂ_bme_£t_mëad©a
 
	toÂ_t
;

248 
oÊ_bme_£t_mëad©a
 
	toÊ_t
;

249 
oÂ_t
 *
ß
;

250 
oÊ_t
 *
da
;

252 i‡(*
Àn
 < (
oÂ_t
)) {

253 c⁄° *
«me
 = 
	`¡ohs
(
a˘
->
ty≥
Ë=
BME_SET_METADATA_FROM_PACKET
?

256 
	`OFL_LOG_WARN
(
LOG_MODULE
,

258 
«me
, *
Àn
);

259  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

262 
ß
 = (
oÂ_t
 *Ë
a˘
;

263 
da
 = (
oÊ_t
 *Ë
	`mÆloc
((ofl_t));

265 
da
->
hódî
.
ty≥
 = 
OFPAT_EXPERIMENTER
;

266 
da
->
ex≥rimíãr_id
 = 
BME_EXPERIMENTER_ID
;

267 
da
->
ty≥
 = 
	`¡ohs
(
a˘
->type);

268 
da
->
fõld
 = 
	`¡ohl
(
ß
->field);

269 
da
->
off£t
 = 
ß
->offset;

271 *
Àn
 -(
oÂ_t
);

272 *
d°
 = (
oÊ_a˘i⁄_hódî
 *Ë
da
;

275 
BME_RACE_MPLS_LABEL
: {

276 
oÂ_bme_£t_m∂s_œbñ
 
	toÂ_t
;

277 
oÊ_bme_£t_m∂s_œbñ
 
	toÊ_t
;

278 
oÂ_t
 *
ß
;

279 
oÊ_t
 *
da
;

281 i‡(*
Àn
 < (
oÂ_t
)) {

282 
	`OFL_LOG_WARN
(
LOG_MODULE
,

284 "ha†övÆidÜígth (%zu).", *
Àn
);

285  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

288 
ß
 = (
oÂ_t
 *Ë
a˘
;

289 
da
 = (
oÊ_t
 *Ë
	`mÆloc
((ofl_t));

291 
da
->
hódî
.
ty≥
 = 
OFPAT_EXPERIMENTER
;

292 
da
->
ex≥rimíãr_id
 = 
BME_EXPERIMENTER_ID
;

293 
da
->
ty≥
 = 
	`¡ohs
(
a˘
->type);

296 *
Àn
 -(
oÂ_t
);

297 *
d°
 = (
oÊ_a˘i⁄_hódî
 *Ë
da
;

300 
BME_SET_MPLS_LABEL_FROM_COUNTER
: {

301 
oÂ_bme_£t_m∂s_œbñ
 
	toÂ_t
;

302 
oÊ_bme_£t_m∂s_œbñ
 
	toÊ_t
;

303 
oÂ_t
 *
ß
;

304 
oÊ_t
 *
da
;

306 i‡(*
Àn
 < (
oÂ_t
)) {

307 
	`OFL_LOG_WARN
(
LOG_MODULE
,

309 "ha†övÆidÜígth (%zu).", *
Àn
);

310  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

313 
ß
 = (
oÂ_t
 *Ë
a˘
;

314 
da
 = (
oÊ_t
 *Ë
	`mÆloc
((ofl_t));

316 
da
->
hódî
.
ty≥
 = 
OFPAT_EXPERIMENTER
;

317 
da
->
ex≥rimíãr_id
 = 
BME_EXPERIMENTER_ID
;

318 
da
->
ty≥
 = 
	`¡ohs
(
a˘
->type);

321 *
Àn
 -(
oÂ_t
);

322 *
d°
 = (
oÊ_a˘i⁄_hódî
 *Ë
da
;

325 
BME_XOR_DECODE
:

326 
BME_XOR_ENCODE
: {

327 
oÂ_bme_x‹_∑ckë
 
	toÂ_t
;

328 
oÊ_bme_x‹_∑ckë
 
	toÊ_t
;

329 
oÂ_t
 *
ß
;

330 
oÊ_t
 *
da
;

332 i‡(*
Àn
 < (
oÂ_t
)) {

333 
	`OFL_LOG_WARN
(
LOG_MODULE
,

335 "ha†övÆidÜígth (%zu).", *
Àn
);

336  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

339 
ß
 = (
oÂ_t
 *Ë
a˘
;

340 
da
 = (
oÊ_t
 *Ë
	`mÆloc
((ofl_t));

342 
da
->
hódî
.
ty≥
 = 
OFPAT_EXPERIMENTER
;

343 
da
->
ex≥rimíãr_id
 = 
BME_EXPERIMENTER_ID
;

344 
da
->
ty≥
 = 
	`¡ohs
(
a˘
->type);

345 
da
->
œbñ_a
 = 
	`¡ohl
(
ß
->label_a);

346 
da
->
œbñ_b
 = 
	`¡ohl
(
ß
->label_b);

348 *
Àn
 -(
oÂ_t
);

349 *
d°
 = (
oÊ_a˘i⁄_hódî
 *Ë
da
;

352 
BME_UPDATE_DISTANCE_IN_METADATA
: {

353 
oÂ_bme_upd©e_di°™˚
 
	toÂ_t
;

354 
oÊ_bme_upd©e_di°™˚
 
	toÊ_t
;

355 
oÂ_t
 *
ß
;

356 
oÊ_t
 *
da
;

358 i‡(*
Àn
 < (
oÂ_t
)) {

359 
	`OFL_LOG_WARN
(
LOG_MODULE
,

361 "ha†övÆidÜígth (%zu).", *
Àn
);

362  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

365 
ß
 = (
oÂ_t
 *Ë
a˘
;

366 
da
 = (
oÊ_t
 *Ë
	`mÆloc
((ofl_t));

368 
da
->
hódî
.
ty≥
 = 
OFPAT_EXPERIMENTER
;

369 
da
->
ex≥rimíãr_id
 = 
BME_EXPERIMENTER_ID
;

370 
da
->
ty≥
 = 
	`¡ohs
(
a˘
->type);

371 
da
->
p‹t
 = 
	`¡ohl
(
ß
->port);

372 
	`mem˝y
(&(
da
->
hw_addr
), &(
ß
->hw_addr), 
OFP_ETH_ALEN
);

374 i‡(
da
->
p‹t
 & 0xFFFF0000) {

375 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Port isÅruncatedÅo uint16_t in"

376 " BME_UPDATE_DISTANCE_IN_METADATA (%u)", 
da
->
p‹t
);

379 *
Àn
 -(
oÂ_t
);

380 *
d°
 = (
oÊ_a˘i⁄_hódî
 *Ë
da
;

383 
BME_SET_METADATA_FROM_COUNTER
: {

384 
oÂ_bme_£t_mëad©a_‰om_cou¡î
 
	toÂ_t
;

385 
oÊ_bme_£t_mëad©a_‰om_cou¡î
 
	toÊ_t
;

386 
oÂ_t
 *
ß
;

387 
oÊ_t
 *
da
;

389 i‡(*
Àn
 < (
oÂ_t
)) {

390 
	`OFL_LOG_WARN
(
LOG_MODULE
,

392 "ha†övÆidÜígth (%zu).", *
Àn
);

393  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

396 
ß
 = (
oÂ_t
 *Ë
a˘
;

397 
da
 = (
oÊ_t
 *Ë
	`mÆloc
((ofl_t));

399 
da
->
hódî
.
ty≥
 = 
OFPAT_EXPERIMENTER
;

400 
da
->
ex≥rimíãr_id
 = 
BME_EXPERIMENTER_ID
;

401 
da
->
ty≥
 = 
	`¡ohs
(
a˘
->type);

402 
da
->
max_num
 = 
	`¡ohl
(
ß
->max_num);

404 *
Àn
 -(
oÂ_t
);

405 *
d°
 = (
oÊ_a˘i⁄_hódî
 *Ë
da
;

408 
BME_SERIALIZE
: {

409 
oÂ_bme_£rülize
 
	toÂ_t
;

410 
oÊ_bme_£rülize
 
	toÊ_t
;

411 
oÂ_t
 *
ß
;

412 
oÊ_t
 *
da
;

414 i‡(*
Àn
 < (
oÂ_t
)) {

415 
	`OFL_LOG_WARN
(
LOG_MODULE
,

417 "ha†övÆidÜígth (%zu).", *
Àn
);

418  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

421 
ß
 = (
oÂ_t
 *Ë
a˘
;

422 
da
 = (
oÊ_t
 *Ë
	`mÆloc
((ofl_t));

424 
da
->
hódî
.
ty≥
 = 
OFPAT_EXPERIMENTER
;

425 
da
->
ex≥rimíãr_id
 = 
BME_EXPERIMENTER_ID
;

426 
da
->
ty≥
 = 
	`¡ohs
(
a˘
->type);

427 
da
->
m∂s_œbñ
 = 
	`¡ohl
(
ß
->mpls_label);

428 
da
->
timeout
 = 
	`¡ohs
(
ß
->timeout);

430 *
Àn
 -(
oÂ_t
);

431 *
d°
 = (
oÊ_a˘i⁄_hódî
 *Ë
da
;

435 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received unknownáctionÅype (%u).",

436 
	`¡ohs
(
§c
->
ty≥
));

437  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_TYPE
);

442 
	}
}

445 
	$oÊ_exp_bme_a˘_‰ì
(
oÊ_a˘i⁄_hódî
 *
a˘
)

447 
oÊ_bme_a˘i⁄_hódî
 * 
bme_a˘
 =

448 (
oÊ_bme_a˘i⁄_hódî
*Ë
a˘
;

450 
bme_a˘
->
ty≥
) {

451 
BME_OUTPUT_BY_METADATA
:

452 
BME_SET_METADATA_FROM_PACKET
:

453 
BME_RACE_MPLS_LABEL
:

454 
BME_SET_MPLS_LABEL_FROM_COUNTER
:

455 
BME_XOR_DECODE
:

456 
BME_XOR_ENCODE
:

457 
BME_UPDATE_DISTANCE_IN_METADATA
:

458 
BME_SET_METADATA_FROM_COUNTER
:

459 
BME_SET_FIELD_FROM_METADATA
:

460 
BME_SERIALIZE
:

463 
	`OFL_LOG_WARN
(
LOG_MODULE
, "free: unknownáctionÅype (%u).",

464 
bme_a˘
->
ty≥
);

465 
	`‰ì
(
a˘
);

470 
	`‰ì
(
a˘
);

472 
	}
}

474 
size_t


475 
	$oÊ_exp_bme_a˘_oÂ_Àn
(
oÊ_a˘i⁄_hódî
 *
a˘
)

477 
oÊ_bme_a˘i⁄_hódî
 * 
bme_a˘
 =

478 (
oÊ_bme_a˘i⁄_hódî
*Ë
a˘
;

479 
size_t
 
size
 = (
oÂ_a˘i⁄_ex≥rimíãr_hódî
);

481 
bme_a˘
->
ty≥
) {

482 
BME_OUTPUT_BY_METADATA
: {

483 
size
 +(
oÂ_bme_a˘i⁄_hódî
);

486 
BME_SET_FIELD_FROM_METADATA
:

487 
BME_SET_METADATA_FROM_PACKET
: {

488 
size
 +(
oÂ_bme_£t_mëad©a
);

491 
BME_RACE_MPLS_LABEL
: {

492 
size
 +(
oÂ_bme_£t_m∂s_œbñ
);

495 
BME_SET_MPLS_LABEL_FROM_COUNTER
: {

496 
size
 +(
oÂ_bme_£t_m∂s_œbñ
);

499 
BME_XOR_DECODE
:

500 
BME_XOR_ENCODE
: {

501 
size
 +(
oÂ_bme_x‹_∑ckë
);

504 
BME_UPDATE_DISTANCE_IN_METADATA
: {

505 
size
 +(
oÂ_bme_upd©e_di°™˚
);

508 
BME_SET_METADATA_FROM_COUNTER
: {

509 
size
 +(
oÂ_bme_£t_mëad©a_‰om_cou¡î
);

512 
BME_SERIALIZE
: {

513 
size
 +(
oÂ_bme_£rülize
);

517 
	`OFL_LOG_WARN
(
LOG_MODULE
, "bme_len: unknownáctionÅype (%u).",

518 
bme_a˘
->
ty≥
);

523  
size
;

524 
	}
}

527 
	$oÊ_exp_bme_a˘_to_°rög
(
oÊ_a˘i⁄_hódî
 *
a˘
)

529 *
°r
;

530 
size_t
 
°r_size
;

531 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

533 
oÊ_bme_a˘i⁄_hódî
 * 
bme_a˘
 =

534 (
oÊ_bme_a˘i⁄_hódî
*Ë
a˘
;

536 
bme_a˘
->
ty≥
) {

537 
BME_OUTPUT_BY_METADATA
: {

538 
	`Ârötf
(
°ªam
, "{BME_out}");

541 
BME_SET_FIELD_FROM_METADATA
:

542 
BME_SET_METADATA_FROM_PACKET
: {

543 
oÊ_bme_£t_mëad©a
 *
ß
 =

544 (
oÊ_bme_£t_mëad©a
 *Ë
bme_a˘
;

545 c⁄° *
«me
 = 
bme_a˘
->
ty≥
 =
BME_SET_METADATA_FROM_PACKET
?

547 
	`Ârötf
(
°ªam
, "_BME_%s{fõld=\"%"
PRIx32
, 
«me
, 
ß
->
fõld
);

548 
	`Ârötf
(
°ªam
, "\", off£t=\"%"
PRIx8
"\"}", 
ß
->
off£t
);

551 
BME_RACE_MPLS_LABEL
: {

552 
	`Ârötf
(
°ªam
, "{BME_mpls_race}");

555 
BME_SET_MPLS_LABEL_FROM_COUNTER
: {

556 
	`Ârötf
(
°ªam
, "{BME_mpls_cntr}");

559 
BME_XOR_DECODE
:

560 
BME_XOR_ENCODE
: {

561 
oÊ_bme_x‹_∑ckë
 *
ß
 = (oÊ_bme_x‹_∑ckë *Ë
bme_a˘
;

562 
	`Ârötf
(
°ªam
, "_BME_xor_%s"

563 "{lbl_succ=\"0x%05"
PRIx32
"\",Übl_fail=\"0x%05"PRIx32"\"}",

564 (
bme_a˘
->
ty≥
 =
BME_XOR_DECODE
? "dec": "enc"),

565 
ß
->
œbñ_a
, sa->
œbñ_b
);

568 
BME_UPDATE_DISTANCE_IN_METADATA
: {

569 
oÊ_bme_upd©e_di°™˚
 *
ß
 =

570 (
oÊ_bme_upd©e_di°™˚
 *Ë
bme_a˘
;

571 
	`Ârötf
(
°ªam
, "_BME_upd©e_d°{addr=\""
ETH_ADDR_FMT
"\",Öort=\"",

572 
	`ETH_ADDR_ARGS
(
ß
->
hw_addr
));

573 
	`oÊ_p‹t_¥öt
(
°ªam
, 
ß
->
p‹t
);

574 
	`Ârötf
(
°ªam
, "\"}");

577 
BME_SET_METADATA_FROM_COUNTER
: {

578 
oÊ_bme_£t_mëad©a_‰om_cou¡î
 *
ß
 =

579 (
oÊ_bme_£t_mëad©a_‰om_cou¡î
 *Ë
bme_a˘
;

580 
	`Ârötf
(
°ªam
, "_BME_£t_mëa_˙å{max_num=\"%"
PRIx32
"\"}",

581 
ß
->
max_num
);

582 
	`Ârötf
(
°ªam
, "\"}");

585 
BME_SERIALIZE
: {

586 
oÊ_bme_£rülize
 *
ß
 = (oÊ_bme_£rülizê*Ë
bme_a˘
;

587 
	`Ârötf
(
°ªam
, "_BME_£rülize{lbl=\"%"
PRIx32
"\",tmout=%u}",

588 
ß
->
m∂s_œbñ
, sa->
timeout
);

589 
	`Ârötf
(
°ªam
, "\"}");

593 
	`OFL_LOG_WARN
(
LOG_MODULE
, "bme_len: unknownáctionÅype (%u).",

594 
bme_a˘
->
ty≥
);

595 
	`Ârötf
(
°ªam
, "_BME{id=\"%"
PRIx32
"\"}", 
bme_a˘
->
ty≥
);

600 
	`f˛o£
(
°ªam
);

601  
°r
;

602 
	}
}

605 
	$oÊ_exp_bme_ö°_∑ck
(
oÊ_ö°ru˘i⁄_hódî
 *
§c
 
UNUSED
,

606 
oÂ_ö°ru˘i⁄
 *
d°
 
UNUSED
)

609 
	}
}

611 
oÊ_îr


612 
	$oÊ_exp_bme_ö°_u≈ack
(
oÂ_ö°ru˘i⁄
 *
§c
 
UNUSED
, 
size_t
 *
Àn
 UNUSED,

613 
oÊ_ö°ru˘i⁄_hódî
 **
d°
 
UNUSED
)

615  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

616 
	}
}

619 
	$oÊ_exp_bme_ö°_‰ì
(
oÊ_ö°ru˘i⁄_hódî
 *
i
 
UNUSED
)

622 
	}
}

624 
size_t


625 
	$oÊ_exp_bme_ö°_oÂ_Àn
(
oÊ_ö°ru˘i⁄_hódî
 *
i
 
UNUSED
)

628 
	}
}

631 
	$oÊ_exp_bme_ö°_to_°rög
(
oÊ_ö°ru˘i⁄_hódî
 *
i
 
UNUSED
)

633  
	`°rdup
("_BME");

634 
	}
}

	@oflib-exp/ofl-exp-bme.h

32 #i‚de‡
OFL_EXP_BME_H


33 
	#OFL_EXP_BME_H
 1

	)

36 
	~"../oÊib/oÊ-°ru˘s.h
"

37 
	~"›íÊow/›íÊow.h
"

39 
	soÊ_bme_a˘i⁄_hódî
 {

40 
oÊ_a˘i⁄_hódî
 
	mhódî
;

41 
uöt32_t
 
	mex≥rimíãr_id
;

42 
uöt32_t
 
	mty≥
;

45 
	soÊ_bme_£t_mëad©a
 {

46 
oÊ_a˘i⁄_hódî
 
	mhódî
;

47 
uöt32_t
 
	mex≥rimíãr_id
;

48 
uöt32_t
 
	mty≥
;

49 
uöt32_t
 
	mfõld
;

50 
uöt8_t
 
	moff£t
;

53 
	soÊ_bme_£t_m∂s_œbñ
 {

54 
oÊ_a˘i⁄_hódî
 
	mhódî
;

55 
uöt32_t
 
	mex≥rimíãr_id
;

56 
uöt32_t
 
	mty≥
;

59 
	soÊ_bme_x‹_∑ckë
 {

60 
oÊ_a˘i⁄_hódî
 
	mhódî
;

61 
uöt32_t
 
	mex≥rimíãr_id
;

62 
uöt32_t
 
	mty≥
;

63 
uöt32_t
 
	mœbñ_a
;

64 
uöt32_t
 
	mœbñ_b
;

67 
	soÊ_bme_upd©e_di°™˚
 {

68 
oÊ_a˘i⁄_hódî
 
	mhódî
;

69 
uöt32_t
 
	mex≥rimíãr_id
;

70 
uöt32_t
 
	mty≥
;

71 
uöt8_t
 
	mhw_addr
[
OFP_ETH_ALEN
];

72 
uöt32_t
 
	mp‹t
;

76 
	soÊ_bme_£t_mëad©a_‰om_cou¡î
 {

77 
oÊ_a˘i⁄_hódî
 
	mhódî
;

78 
uöt32_t
 
	mex≥rimíãr_id
;

79 
uöt32_t
 
	mty≥
;

80 
uöt32_t
 
	mmax_num
;

83 
	soÊ_bme_£rülize
 {

84 
oÊ_a˘i⁄_hódî
 
	mhódî
;

85 
uöt32_t
 
	mex≥rimíãr_id
;

86 
uöt32_t
 
	mty≥
;

87 
uöt32_t
 
	mm∂s_œbñ
;

88 
uöt16_t
 
	mtimeout
;

94 
oÊ_exp_bme_a˘_∑ck
(
oÊ_a˘i⁄_hódî
 *
§c
,

95 
oÂ_a˘i⁄_hódî
 *
d°
);

97 
oÊ_îr


98 
oÊ_exp_bme_a˘_u≈ack
(
oÂ_a˘i⁄_hódî
 *
§c
, 
size_t
 *
Àn
,

99 
oÊ_a˘i⁄_hódî
 **
d°
);

102 
oÊ_exp_bme_a˘_‰ì
(
oÊ_a˘i⁄_hódî
 *
a˘
);

104 
size_t


105 
oÊ_exp_bme_a˘_oÂ_Àn
(
oÊ_a˘i⁄_hódî
 *
a˘
);

108 
oÊ_exp_bme_a˘_to_°rög
(
oÊ_a˘i⁄_hódî
 *
a˘
);

111 
oÊ_exp_bme_ö°_∑ck
(
oÊ_ö°ru˘i⁄_hódî
 *
§c
,

112 
oÂ_ö°ru˘i⁄
 *
d°
);

114 
oÊ_îr


115 
oÊ_exp_bme_ö°_u≈ack
(
oÂ_ö°ru˘i⁄
 *
§c
, 
size_t
 *
Àn
,

116 
oÊ_ö°ru˘i⁄_hódî
 **
d°
);

119 
oÊ_exp_bme_ö°_‰ì
(
oÊ_ö°ru˘i⁄_hódî
 *
i
);

121 
size_t


122 
oÊ_exp_bme_ö°_oÂ_Àn
(
oÊ_ö°ru˘i⁄_hódî
 *
i
);

125 
oÊ_exp_bme_ö°_to_°rög
(
oÊ_ö°ru˘i⁄_hódî
 *
i
);

	@oflib-exp/ofl-exp-nicira.c

32 
	~<°dlib.h
>

33 
	~<°dio.h
>

34 
	~<√töë/ö.h
>

36 
	~"›íÊow/›íÊow.h
"

37 
	~"›íÊow/nicúa-ext.h
"

38 
	~"oÊ-exp-nicúa.h
"

39 
	~"../oÊib/oÊ-¥öt.h
"

40 
	~"../oÊib/oÊ-log.h
"

42 
	#LOG_MODULE
 
oÊ_exp_nx


	)

43 
	$OFL_LOG_INIT
(
LOG_MODULE
)

47 
	$oÊ_exp_nicúa_msg_∑ck
(
oÊ_msg_ex≥rimíãr
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

48 i‡(
msg
->
ex≥rimíãr_id
 =
NX_VENDOR_ID
) {

49 
oÊ_exp_nicúa_msg_hódî
 *
exp
 = (oÊ_exp_nicúa_msg_hódî *)
msg
;

50 
exp
->
ty≥
) {

51 (
NXT_ROLE_REQUEST
):

52 (
NXT_ROLE_REPLY
): {

53 
oÊ_exp_nicúa_msg_rﬁe
 *
rﬁe
 = (oÊ_exp_nicúa_msg_rﬁê*)
exp
;

54 
nx_rﬁe_ªque°
 *
oÂ
;

56 *
buf_Àn
 = (
nx_rﬁe_ªque°
);

57 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

59 
oÂ
 = (
nx_rﬁe_ªque°
 *)(*
buf
);

60 
oÂ
->
nxh
.
víd‹
 = 
	`ht⁄l
(
exp
->
hódî
.
ex≥rimíãr_id
);

61 
oÂ
->
nxh
.
subty≥
 = 
	`ht⁄l
(
exp
->
ty≥
);

62 
oÂ
->
rﬁe
 = 
	`ht⁄l
(role->role);

67 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÖrint unknown Nicira Experimenter message.");

72 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÖrintÇon-Nicira Experimenter message.");

75 
	}
}

77 
oÊ_îr


78 
	$oÊ_exp_nicúa_msg_u≈ack
(
oÂ_hódî
 *
oh
, 
size_t
 *
Àn
, 
oÊ_msg_ex≥rimíãr
 **
msg
) {

79 
nicúa_hódî
 *
exp
;

81 i‡(*
Àn
 < (
nicúa_hódî
)) {

82 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived EXPERIMENTER mesßgêha†övÆidÜígth (%zu).", *
Àn
);

83  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

86 
exp
 = (
nicúa_hódî
 *)
oh
;

88 i‡(
	`¡ohl
(
exp
->
víd‹
Ë=
NX_VENDOR_ID
) {

90 
	`¡ohl
(
exp
->
subty≥
)) {

91 (
NXT_ROLE_REQUEST
):

92 (
NXT_ROLE_REPLY
): {

93 
nx_rﬁe_ªque°
 *
§c
;

94 
oÊ_exp_nicúa_msg_rﬁe
 *
d°
;

96 i‡(*
Àn
 < (
nx_rﬁe_ªque°
)) {

97 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived NXT_ROLE_REPLY mesßgêha†övÆidÜígth (%zu).", *
Àn
);

98  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

100 *
Àn
 -(
nx_rﬁe_ªque°
);

102 
§c
 = (
nx_rﬁe_ªque°
 *)
exp
;

104 
d°
 = (
oÊ_exp_nicúa_msg_rﬁe
 *)
	`mÆloc
((ofl_exp_nicira_msg_role));

105 
d°
->
hódî
.hódî.
ex≥rimíãr_id
 = 
	`¡ohl
(
exp
->
víd‹
);

106 
d°
->
hódî
.
ty≥
 = 
	`¡ohl
(
exp
->
subty≥
);

107 
d°
->
rﬁe
 = 
	`¡ohl
(
§c
->role);

109 (*
msg
Ë(
oÊ_msg_ex≥rimíãr
 *)
d°
;

113 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅo unpack unknown Nicira Experimenter message.");

114  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_EXPERIMENTER
);

118 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅo unpackÇon-Nicira Experimenter message.");

119  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_EXPERIMENTER
);

121 
	`‰ì
(
msg
);

123 
	}
}

126 
	$oÊ_exp_nicúa_msg_‰ì
(
oÊ_msg_ex≥rimíãr
 *
msg
) {

127 i‡(
msg
->
ex≥rimíãr_id
 =
NX_VENDOR_ID
) {

128 
oÊ_exp_nicúa_msg_hódî
 *
exp
 = (oÊ_exp_nicúa_msg_hódî *)
msg
;

129 
exp
->
ty≥
) {

130 (
NXT_ROLE_REQUEST
):

131 (
NXT_ROLE_REPLY
): {

135 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅo free unknown Nicira Experimenter message.");

139 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅo freeÇon-Nicira Experimenter message.");

141 
	`‰ì
(
msg
);

143 
	}
}

146 
	$oÊ_exp_nicúa_msg_to_°rög
(
oÊ_msg_ex≥rimíãr
 *
msg
) {

147 *
°r
;

148 
size_t
 
°r_size
;

149 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

151 i‡(
msg
->
ex≥rimíãr_id
 =
NX_VENDOR_ID
) {

152 
oÊ_exp_nicúa_msg_hódî
 *
exp
 = (oÊ_exp_nicúa_msg_hódî *)
msg
;

153 
exp
->
ty≥
) {

154 (
NXT_ROLE_REQUEST
):

155 (
NXT_ROLE_REPLY
): {

156 
oÊ_exp_nicúa_msg_rﬁe
 *
r
 = (oÊ_exp_nicúa_msg_rﬁê*)
exp
;

157 
	`Ârötf
(
°ªam
, "%s{role=\"%s\"}",

158 
exp
->
ty≥
 =
NXT_ROLE_REQUEST
 ? "rolereq" : "rolerep",

159 
r
->
rﬁe
 =
NX_ROLE_MASTER
 ? "master" :

160 
r
->
rﬁe
 =
NX_ROLE_SLAVE
 ? "slave"

165 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÖrint unknown Nicira Experimenter message.");

166 
	`Ârötf
(
°ªam
, "o„xp{ty≥=\"%u\"}", 
exp
->
ty≥
);

170 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÖrintÇon-Nicira Experimenter message.");

171 
	`Ârötf
(
°ªam
, "exp{exp_id=\"%u\"}", 
msg
->
ex≥rimíãr_id
);

174 
	`f˛o£
(
°ªam
);

175  
°r
;

176 
	}
}

	@oflib-exp/ofl-exp-nicira.h

32 #i‚de‡
OFL_EXP_NICIRA_H


33 
	#OFL_EXP_NICIRA_H
 1

	)

36 
	~"../oÊib/oÊ-°ru˘s.h
"

37 
	~"../oÊib/oÊ-mesßges.h
"

40 
	soÊ_exp_nicúa_msg_hódî
 {

41 
oÊ_msg_ex≥rimíãr
 
	mhódî
;

43 
uöt32_t
 
	mty≥
;

46 
	soÊ_exp_nicúa_msg_rﬁe
 {

47 
oÊ_exp_nicúa_msg_hódî
 
	mhódî
;

49 
uöt32_t
 
	mrﬁe
;

55 
oÊ_exp_nicúa_msg_∑ck
(
oÊ_msg_ex≥rimíãr
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
);

57 
oÊ_îr


58 
oÊ_exp_nicúa_msg_u≈ack
(
oÂ_hódî
 *
oh
, 
size_t
 *
Àn
, 
oÊ_msg_ex≥rimíãr
 **
msg
);

61 
oÊ_exp_nicúa_msg_‰ì
(
oÊ_msg_ex≥rimíãr
 *
msg
);

64 
oÊ_exp_nicúa_msg_to_°rög
(
oÊ_msg_ex≥rimíãr
 *
msg
);

	@oflib-exp/ofl-exp-openflow.c

32 
	~<°dlib.h
>

33 
	~<°dio.h
>

34 
	~<°rög.h
>

35 
	~<√töë/ö.h
>

36 
	~"›íÊow/›íÊow.h
"

37 
	~"›íÊow/›íÊow-ext.h
"

38 
	~"oÊ-exp-›íÊow.h
"

39 
	~"../oÊib/oÊ-log.h
"

40 
	~"../oÊib/oÊ-¥öt.h
"

42 
	#LOG_MODULE
 
oÊ_exp_of


	)

43 
	$OFL_LOG_INIT
(
LOG_MODULE
)

47 
	$oÊ_exp_›íÊow_msg_∑ck
(
oÊ_msg_ex≥rimíãr
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

48 i‡(
msg
->
ex≥rimíãr_id
 =
OPENFLOW_VENDOR_ID
) {

49 
oÊ_exp_›íÊow_msg_hódî
 *
exp
 = (oÊ_exp_›íÊow_msg_hódî *)
msg
;

50 
exp
->
ty≥
) {

51 (
OFP_EXT_QUEUE_MODIFY
):

52 (
OFP_EXT_QUEUE_DELETE
): {

53 
oÊ_exp_›íÊow_msg_queue
 *
q
 = (oÊ_exp_›íÊow_msg_queuê*)
exp
;

54 
›íÊow_queue_comm™d_hódî
 *
oÂ
;

56 *
buf_Àn
 = (
›íÊow_queue_comm™d_hódî
Ë+ 
	`oÊ_°ru˘s_∑ckë_queue_oÂ_Àn
(
q
->
queue
);

57 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

59 
oÂ
 = (
›íÊow_queue_comm™d_hódî
 *)(*
buf
);

60 
oÂ
->
hódî
.
víd‹
 = 
	`ht⁄l
(
exp
->hódî.
ex≥rimíãr_id
);

61 
oÂ
->
hódî
.
subty≥
 = 
	`ht⁄l
(
exp
->
ty≥
);

62 
oÂ
->
p‹t
 = 
	`ht⁄l
(
q
->
p‹t_id
);

64 
	`oÊ_°ru˘s_∑ckë_queue_∑ck
(
q
->
queue
, (
oÂ_∑ckë_queue
 *)
oÂ
->
body
);

67 (
OFP_EXT_SET_DESC
): {

68 
oÊ_exp_›íÊow_msg_£t_dp_desc
 *
s
 = (oÊ_exp_›íÊow_msg_£t_dp_des¯*)
exp
;

69 
›íÊow_ext_£t_dp_desc
 *
oÂ
;

71 *
buf_Àn
 = (
›íÊow_ext_£t_dp_desc
);

72 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

74 
oÂ
 = (
›íÊow_ext_£t_dp_desc
 *)(*
buf
);

75 
oÂ
->
hódî
.
víd‹
 = 
	`ht⁄l
(
exp
->hódî.
ex≥rimíãr_id
);

76 
oÂ
->
hódî
.
subty≥
 = 
	`ht⁄l
(
exp
->
ty≥
);

77 
	`°∫˝y
(
oÂ
->
dp_desc
, 
s
->dp_desc, 
DESC_STR_LEN
);

82 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÖrint unknown Openflow Experimenter message.");

87 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÖrintÇon-Openflow Experimenter message.");

90 
	}
}

92 
oÊ_îr


93 
	$oÊ_exp_›íÊow_msg_u≈ack
(
oÂ_hódî
 *
oh
, 
size_t
 *
Àn
, 
oÊ_msg_ex≥rimíãr
 **
msg
) {

94 
oÂ_exãnsi⁄_hódî
 *
exp
;

96 i‡(*
Àn
 < (
oÂ_exãnsi⁄_hódî
)) {

97 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived EXPERIMENTER mesßgêha†övÆidÜígth (%zu).", *
Àn
);

98  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

101 
exp
 = (
oÂ_exãnsi⁄_hódî
 *)
oh
;

103 i‡(
	`¡ohl
(
exp
->
víd‹
Ë=
OPENFLOW_VENDOR_ID
) {

105 
	`¡ohl
(
exp
->
subty≥
)) {

106 (
OFP_EXT_QUEUE_MODIFY
):

107 (
OFP_EXT_QUEUE_DELETE
): {

108 
›íÊow_queue_comm™d_hódî
 *
§c
;

109 
oÊ_exp_›íÊow_msg_queue
 *
d°
;

110 
oÊ_îr
 
îr‹
;

112 i‡(*
Àn
 < (
›íÊow_queue_comm™d_hódî
)) {

113 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived EXT_QUEUE_MODIFY mesßgêha†övÆidÜígth (%zu).", *
Àn
);

114  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

116 *
Àn
 -(
›íÊow_queue_comm™d_hódî
);

118 
§c
 = (
›íÊow_queue_comm™d_hódî
 *)
exp
;

120 
d°
 = (
oÊ_exp_›íÊow_msg_queue
 *)
	`mÆloc
((ofl_exp_openflow_msg_queue));

121 
d°
->
hódî
.hódî.
ex≥rimíãr_id
 = 
	`¡ohl
(
exp
->
víd‹
);

122 
d°
->
hódî
.
ty≥
 = 
	`¡ohl
(
exp
->
subty≥
);

123 
d°
->
p‹t_id
 = 
	`¡ohl
(
§c
->
p‹t
);

125 
îr‹
 = 
	`oÊ_°ru˘s_∑ckë_queue_u≈ack
((
oÂ_∑ckë_queue
 *)(
§c
->
body
), 
Àn
, &(
d°
->
queue
));

126 i‡(
îr‹
) {

127 
	`‰ì
(
d°
);

128  
îr‹
;

131 (*
msg
Ë(
oÊ_msg_ex≥rimíãr
 *)
d°
;

134 (
OFP_EXT_SET_DESC
): {

135 
›íÊow_ext_£t_dp_desc
 *
§c
;

136 
oÊ_exp_›íÊow_msg_£t_dp_desc
 *
d°
;

138 i‡(*
Àn
 < (
›íÊow_ext_£t_dp_desc
)) {

139 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived EXT_SET_DESC mesßgêha†övÆidÜígth (%zu).", *
Àn
);

140  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

142 *
Àn
 -(
›íÊow_ext_£t_dp_desc
);

144 
§c
 = (
›íÊow_ext_£t_dp_desc
 *)
exp
;

146 
d°
 = (
oÊ_exp_›íÊow_msg_£t_dp_desc
 *)
	`mÆloc
((ofl_exp_openflow_msg_set_dp_desc));

147 
d°
->
hódî
.hódî.
ex≥rimíãr_id
 = 
	`¡ohl
(
exp
->
víd‹
);

148 
d°
->
hódî
.
ty≥
 = 
	`¡ohl
(
exp
->
subty≥
);

150 
d°
->
dp_desc
 = 
	`°r˝y
((*)
	`mÆloc
(
	`°æí
(
§c
->dp_desc)+1), src->dp_desc);

152 (*
msg
Ë(
oÊ_msg_ex≥rimíãr
 *)
d°
;

156 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅo unpack unknown Openflow Experimenter message.");

157  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_EXPERIMENTER
);

161 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅo unpackÇon-Openflow Experimenter message.");

162  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_EXPERIMENTER
);

164 
	`‰ì
(
msg
);

166 
	}
}

169 
	$oÊ_exp_›íÊow_msg_‰ì
(
oÊ_msg_ex≥rimíãr
 *
msg
) {

170 i‡(
msg
->
ex≥rimíãr_id
 =
OPENFLOW_VENDOR_ID
) {

171 
oÊ_exp_›íÊow_msg_hódî
 *
exp
 = (oÊ_exp_›íÊow_msg_hódî *)
msg
;

172 
exp
->
ty≥
) {

173 (
OFP_EXT_QUEUE_MODIFY
):

174 (
OFP_EXT_QUEUE_DELETE
): {

175 
oÊ_exp_›íÊow_msg_queue
 *
q
 = (oÊ_exp_›íÊow_msg_queuê*)
exp
;

176 
	`oÊ_°ru˘s_‰ì_∑ckë_queue
(
q
->
queue
);

179 (
OFP_EXT_SET_DESC
): {

180 
oÊ_exp_›íÊow_msg_£t_dp_desc
 *
s
 = (oÊ_exp_›íÊow_msg_£t_dp_des¯*)
exp
;

181 
	`‰ì
(
s
->
dp_desc
);

185 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅo free unknown Openflow Experimenter message.");

189 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅo freeÇon-Openflow Experimenter message.");

191 
	`‰ì
(
msg
);

193 
	}
}

196 
	$oÊ_exp_›íÊow_msg_to_°rög
(
oÊ_msg_ex≥rimíãr
 *
msg
) {

197 *
°r
;

198 
size_t
 
°r_size
;

199 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

201 i‡(
msg
->
ex≥rimíãr_id
 =
OPENFLOW_VENDOR_ID
) {

202 
oÊ_exp_›íÊow_msg_hódî
 *
exp
 = (oÊ_exp_›íÊow_msg_hódî *)
msg
;

203 
exp
->
ty≥
) {

204 (
OFP_EXT_QUEUE_MODIFY
):

205 (
OFP_EXT_QUEUE_DELETE
): {

206 
oÊ_exp_›íÊow_msg_queue
 *
q
 = (oÊ_exp_›íÊow_msg_queuê*)
exp
;

207 
	`Ârötf
(
°ªam
, "%squeue{p‹t=\"", 
exp
->
ty≥
 =
OFP_EXT_QUEUE_MODIFY
 ? "mod" : "del");

208 
	`oÊ_p‹t_¥öt
(
°ªam
, 
q
->
p‹t_id
);

209 
	`Ârötf
(
°ªam
, "\", queue=");

210 
	`oÊ_°ru˘s_queue_¥öt
(
°ªam
, 
q
->
queue
);

211 
	`Ârötf
(
°ªam
, "}");

214 (
OFP_EXT_SET_DESC
): {

215 
oÊ_exp_›íÊow_msg_£t_dp_desc
 *
s
 = (oÊ_exp_›íÊow_msg_£t_dp_des¯*)
exp
;

216 
	`Ârötf
(
°ªam
, "£tdesc{desc=\"%s\"}", 
s
->
dp_desc
);

220 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÖrint unknown Openflow Experimenter message.");

221 
	`Ârötf
(
°ªam
, "o„xp{ty≥=\"%u\"}", 
exp
->
ty≥
);

225 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÖrintÇon-Openflow Experimenter message.");

226 
	`Ârötf
(
°ªam
, "exp{exp_id=\"%u\"}", 
msg
->
ex≥rimíãr_id
);

229 
	`f˛o£
(
°ªam
);

230  
°r
;

231 
	}
}

	@oflib-exp/ofl-exp-openflow.h

32 #i‚de‡
OFL_EXP_OPENFLOW_H


33 
	#OFL_EXP_OPENFLOW_H
 1

	)

36 
	~"../oÊib/oÊ-°ru˘s.h
"

37 
	~"../oÊib/oÊ-mesßges.h
"

40 
	soÊ_exp_›íÊow_msg_hódî
 {

41 
oÊ_msg_ex≥rimíãr
 
	mhódî
;

43 
uöt32_t
 
	mty≥
;

46 
	soÊ_exp_›íÊow_msg_queue
 {

47 
oÊ_exp_›íÊow_msg_hódî
 
	mhódî
;

49 
uöt32_t
 
	mp‹t_id
;

50 
oÊ_∑ckë_queue
 *
	mqueue
;

54 
	soÊ_exp_›íÊow_msg_£t_dp_desc
 {

55 
oÊ_exp_›íÊow_msg_hódî
 
	mhódî
;

57 *
	mdp_desc
;

63 
oÊ_exp_›íÊow_msg_∑ck
(
oÊ_msg_ex≥rimíãr
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
);

65 
oÊ_îr


66 
oÊ_exp_›íÊow_msg_u≈ack
(
oÂ_hódî
 *
oh
, 
size_t
 *
Àn
, 
oÊ_msg_ex≥rimíãr
 **
msg
);

69 
oÊ_exp_›íÊow_msg_‰ì
(
oÊ_msg_ex≥rimíãr
 *
msg
);

72 
oÊ_exp_›íÊow_msg_to_°rög
(
oÊ_msg_ex≥rimíãr
 *
msg
);

	@oflib-exp/ofl-exp.c

32 
	~<öây≥s.h
>

33 
	~<√töë/ö.h
>

34 
	~<°dlib.h
>

35 
	~<°dio.h
>

36 
	~"oÊ-exp.h
"

37 
	~"oÊ-exp-nicúa.h
"

38 
	~"oÊ-exp-›íÊow.h
"

39 
	~"../oÊib/oÊ-mesßges.h
"

40 
	~"../oÊib/oÊ-log.h
"

41 
	~"›íÊow/›íÊow.h
"

42 
	~"›íÊow/nicúa-ext.h
"

43 
	~"›íÊow/›íÊow-ext.h
"

45 
	#LOG_MODULE
 
oÊ_exp


	)

46 
	$OFL_LOG_INIT
(
LOG_MODULE
)

51 
	$oÊ_exp_msg_∑ck
(
oÊ_msg_ex≥rimíãr
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

52 
msg
->
ex≥rimíãr_id
) {

53 (
OPENFLOW_VENDOR_ID
): {

54  
	`oÊ_exp_›íÊow_msg_∑ck
(
msg
, 
buf
, 
buf_Àn
);

56 (
NX_VENDOR_ID
): {

57  
	`oÊ_exp_nicúa_msg_∑ck
(
msg
, 
buf
, 
buf_Àn
);

60 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryögÅÿ∑ck unknow¿EXPERIMENTER mesßgê(%u).", 
msg
->
ex≥rimíãr_id
);

64 
	}
}

66 
oÊ_îr


67 
	$oÊ_exp_msg_u≈ack
(
oÂ_hódî
 *
oh
, 
size_t
 *
Àn
, 
oÊ_msg_ex≥rimíãr
 **
msg
) {

68 
oÂ_ex≥rimíãr_hódî
 *
exp
;

70 i‡(*
Àn
 < (
oÂ_ex≥rimíãr_hódî
)) {

71 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received EXPERIMENTER message is shorterÅhan ofp_experimenter_header.");

72  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

75 
exp
 = (
oÂ_ex≥rimíãr_hódî
 *)
oh
;

77 
	`ht⁄l
(
exp
->
ex≥rimíãr
)) {

78 (
OPENFLOW_VENDOR_ID
): {

79  
	`oÊ_exp_›íÊow_msg_u≈ack
(
oh
, 
Àn
, 
msg
);

81 (
NX_VENDOR_ID
): {

82  
	`oÊ_exp_nicúa_msg_u≈ack
(
oh
, 
Àn
, 
msg
);

85 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryögÅÿu≈ack unknow¿EXPERIMENTER mesßgê(%u).", 
	`ht⁄l
(
exp
->
ex≥rimíãr
));

86  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_EXPERIMENTER
);

89 
	}
}

92 
	$oÊ_exp_msg_‰ì
(
oÊ_msg_ex≥rimíãr
 *
msg
) {

93 
msg
->
ex≥rimíãr_id
) {

94 (
OPENFLOW_VENDOR_ID
): {

95  
	`oÊ_exp_›íÊow_msg_‰ì
(
msg
);

97 (
NX_VENDOR_ID
): {

98  
	`oÊ_exp_nicúa_msg_‰ì
(
msg
);

101 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryögÅÿ‰ì unknow¿EXPERIMENTER mesßgê(%u).", 
msg
->
ex≥rimíãr_id
);

102 
	`‰ì
(
msg
);

106 
	}
}

109 
	$oÊ_exp_msg_to_°rög
(
oÊ_msg_ex≥rimíãr
 *
msg
) {

110 
msg
->
ex≥rimíãr_id
) {

111 (
OPENFLOW_VENDOR_ID
): {

112  
	`oÊ_exp_›íÊow_msg_to_°rög
(
msg
);

114 (
NX_VENDOR_ID
): {

115  
	`oÊ_exp_nicúa_msg_to_°rög
(
msg
);

118 *
°r
;

119 
size_t
 
°r_size
;

120 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

121 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryögÅÿc⁄vîàtÿ°rög unknow¿EXPERIMENTER mesßgê(%u).", 
msg
->
ex≥rimíãr_id
);

122 
	`Ârötf
(
°ªam
, "exp{id=\"0x%"
PRIx32
"\"}", 
msg
->
ex≥rimíãr_id
);

123 
	`f˛o£
(
°ªam
);

124  
°r
;

127 
	}
}

	@oflib-exp/ofl-exp.h

32 #i‚de‡
OFL_EXP_H


33 
	#OFL_EXP_H
 1

	)

35 
	~"../oÊib/oÊ-mesßges.h
"

36 
	~"›íÊow/›íÊow.h
"

40 
oÊ_exp_msg_∑ck
(
oÊ_msg_ex≥rimíãr
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
);

42 
oÊ_îr


43 
oÊ_exp_msg_u≈ack
(
oÂ_hódî
 *
oh
, 
size_t
 *
Àn
, 
oÊ_msg_ex≥rimíãr
 **
msg
);

46 
oÊ_exp_msg_‰ì
(
oÊ_msg_ex≥rimíãr
 *
msg
);

49 
oÊ_exp_msg_to_°rög
(
oÊ_msg_ex≥rimíãr
 *
msg
);

	@oflib/ofl-actions-pack.c

32 
	~<√töë/ö.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<°dlib.h
>

35 
	~<°rög.h
>

36 
	~"oxm-m©ch.h
"

37 
	~"oÊ.h
"

38 
	~"oÊ-utûs.h
"

39 
	~"oÊ-a˘i⁄s.h
"

40 
	~"oÊ-°ru˘s.h
"

41 
	~"oÊ-mesßges.h
"

42 
	~"oÊ-log.h
"

43 
	~"›íÊow/›íÊow.h
"

45 
	#LOG_MODULE
 
oÊ_a˘_p


	)

46 
	$OFL_LOG_INIT
(
LOG_MODULE
)

49 
size_t


50 
	$oÊ_a˘i⁄s_oÂ_Àn
(
oÊ_a˘i⁄_hódî
 *
a˘i⁄
, 
oÊ_exp
 *
exp
) {

51 
a˘i⁄
->
ty≥
) {

52 
OFPAT_OUTPUT
:

53  (
oÂ_a˘i⁄_ouçut
);

55 
OFPAT_COPY_TTL_OUT
:

56 
OFPAT_COPY_TTL_IN
:

57  (
oÂ_a˘i⁄_hódî
);

58 
OFPAT_SET_MPLS_TTL
:

59  (
oÂ_a˘i⁄_m∂s_âl
);

60 
OFPAT_DEC_MPLS_TTL
:

61  (
oÂ_a˘i⁄_hódî
);

62 
OFPAT_PUSH_VLAN
:

63 
OFPAT_PUSH_PBB
:

64 
OFPAT_PUSH_MPLS
:

65  (
oÂ_a˘i⁄_push
);

66 
OFPAT_POP_VLAN
:

67 
OFPAT_POP_PBB
:

68  (
oÂ_a˘i⁄_hódî
);

69 
OFPAT_POP_MPLS
:

70  (
oÂ_a˘i⁄_p›_m∂s
);

71 
OFPAT_SET_QUEUE
:

72  (
oÂ_a˘i⁄_£t_queue
);

73 
OFPAT_GROUP
:

74  (
oÂ_a˘i⁄_group
);

75 
OFPAT_SET_NW_TTL
:

76  (
oÂ_a˘i⁄_nw_âl
);

77 
OFPAT_DEC_NW_TTL
:

78  (
oÂ_a˘i⁄_hódî
);

79 
OFPAT_SET_FIELD
: {

80 
oÊ_a˘i⁄_£t_fõld
 *
a
 = (oÊ_a˘i⁄_£t_fõld *Ë
a˘i⁄
;

81  (
oÂ_a˘i⁄_£t_fõld
Ë+ 
	`ROUND_UP
(
	`OXM_LENGTH
(
a
->
fõld
->
hódî
),8) ;

83 
OFPAT_EXPERIMENTER
: {

84 i‡(
exp
 =
NULL
 ||Éxp->
a˘
 =NULL ||Éxp->a˘->
oÂ_Àn
 == NULL) {

85 
	`OFL_LOG_WARN
(
LOG_MODULE
, "requestingÉxperimenterÜength, butÇo callback was given.");

88  
exp
->
a˘
->
	`oÂ_Àn
(
a˘i⁄
);

93 
	}
}

95 
size_t


96 
	$oÊ_a˘i⁄s_oÂ_tŸÆ_Àn
(
oÊ_a˘i⁄_hódî
 **
a˘i⁄s
,

97 
size_t
 
a˘i⁄s_num
, 
oÊ_exp
 *
exp
) {

98 
size_t
 
sum
;

99 
	`OFL_UTILS_SUM_ARR_FUN2
(
sum
, 
a˘i⁄s
, 
a˘i⁄s_num
,

100 
oÊ_a˘i⁄s_oÂ_Àn
, 
exp
);

101  
sum
;

102 
	}
}

104 
size_t


105 
	$oÊ_a˘i⁄s_∑ck
(
oÊ_a˘i⁄_hódî
 *
§c
, 
oÂ_a˘i⁄_hódî
 *
d°
, 
uöt8_t
* 
d©a
, 
oÊ_exp
 *
exp
) {

107 
d°
->
ty≥
 = 
	`ht⁄s
(
§c
->type);

108 
	`mem£t
(
d°
->
∑d
, 0x00, 4);

110 
§c
->
ty≥
) {

111 
OFPAT_OUTPUT
: {

112 
oÊ_a˘i⁄_ouçut
 *
ß
 = (oÊ_a˘i⁄_ouçuà*)
§c
;

113 
oÂ_a˘i⁄_ouçut
 *
da
 = (oÂ_a˘i⁄_ouçuà*)
d°
;

115 
da
->
Àn
 = 
	`ht⁄s
((
oÂ_a˘i⁄_ouçut
));

116 
da
->
p‹t
 = 
	`ht⁄l
(
ß
->port);

117 
da
->
max_Àn
 = 
	`ht⁄s
(
ß
->max_len);

118 
	`mem£t
(
da
->
∑d
, 0x00, 6);

119  (
oÂ_a˘i⁄_ouçut
);

122 
OFPAT_COPY_TTL_OUT
:

123 
OFPAT_COPY_TTL_IN
: {

124 
d°
->
Àn
 = 
	`ht⁄s
((
oÂ_a˘i⁄_hódî
));

125  (
oÂ_a˘i⁄_hódî
);

128 
OFPAT_SET_MPLS_TTL
: {

129 
oÊ_a˘i⁄_m∂s_âl
 *
ß
 = (oÊ_a˘i⁄_m∂s_â»*)
§c
;

130 
oÂ_a˘i⁄_m∂s_âl
 *
da
 = (oÂ_a˘i⁄_m∂s_â»*)
d°
;

132 
da
->
Àn
 = 
	`ht⁄s
((
oÂ_a˘i⁄_m∂s_âl
));

133 
da
->
m∂s_âl
 = 
ß
->mpls_ttl;

134 
	`mem£t
(
da
->
∑d
, 0x00, 3);

135  (
oÂ_a˘i⁄_m∂s_âl
);

137 
OFPAT_DEC_MPLS_TTL
: {

138 
d°
->
Àn
 = 
	`ht⁄s
((
oÂ_a˘i⁄_hódî
));

139  (
oÂ_a˘i⁄_hódî
);

141 
OFPAT_PUSH_VLAN
:

142 
OFPAT_PUSH_MPLS
:

143 
OFPAT_PUSH_PBB
:{

144 
oÊ_a˘i⁄_push
 *
ß
 = (oÊ_a˘i⁄_push *)
§c
;

145 
oÂ_a˘i⁄_push
 *
da
 = (oÂ_a˘i⁄_push *)
d°
;

147 
da
->
Àn
 = 
	`ht⁄s
((
oÂ_a˘i⁄_push
));

148 
da
->
ëhîty≥
 = 
	`ht⁄s
(
ß
->ethertype);

149 
	`mem£t
(
da
->
∑d
, 0x00, 2);

150  (
oÂ_a˘i⁄_push
);

152 
OFPAT_POP_VLAN
:

153 
OFPAT_POP_PBB
: {

154 
oÂ_a˘i⁄_hódî
 *
da
 = (oÂ_a˘i⁄_hódî *)
d°
;

156 
da
->
Àn
 = 
	`ht⁄s
((
oÂ_a˘i⁄_hódî
));

157   (
oÂ_a˘i⁄_hódî
);

159 
OFPAT_POP_MPLS
: {

160 
oÊ_a˘i⁄_p›_m∂s
 *
ß
 = (oÊ_a˘i⁄_p›_m∂†*)
§c
;

161 
oÂ_a˘i⁄_p›_m∂s
 *
da
 = (oÂ_a˘i⁄_p›_m∂†*)
d°
;

163 
da
->
Àn
 = 
	`ht⁄s
((
oÂ_a˘i⁄_p›_m∂s
));

164 
da
->
ëhîty≥
 = 
	`ht⁄s
(
ß
->ethertype);

165 
	`mem£t
(
da
->
∑d
, 0x00, 2);

166  (
oÂ_a˘i⁄_p›_m∂s
);

168 
OFPAT_SET_QUEUE
: {

169 
oÊ_a˘i⁄_£t_queue
 *
ß
 = (oÊ_a˘i⁄_£t_queuê*)
§c
;

170 
oÂ_a˘i⁄_£t_queue
 *
da
 = (oÂ_a˘i⁄_£t_queuê*)
d°
;

172 
da
->
Àn
 = 
	`ht⁄s
((
oÂ_a˘i⁄_£t_queue
));

173 
da
->
queue_id
 = 
	`ht⁄l
(
ß
->queue_id);

174  (
oÂ_a˘i⁄_£t_queue
);

176 
OFPAT_GROUP
: {

177 
oÊ_a˘i⁄_group
 *
ß
 = (oÊ_a˘i⁄_grou∞*)
§c
;

178 
oÂ_a˘i⁄_group
 *
da
 = (oÂ_a˘i⁄_grou∞*)
d°
;

180 
da
->
Àn
 = 
	`ht⁄s
((
oÂ_a˘i⁄_group
));

181 
da
->
group_id
 = 
	`ht⁄l
(
ß
->group_id);

182  (
oÂ_a˘i⁄_group
);

184 
OFPAT_SET_NW_TTL
: {

185 
oÊ_a˘i⁄_£t_nw_âl
 *
ß
 = (oÊ_a˘i⁄_£t_nw_â»*)
§c
;

186 
oÂ_a˘i⁄_nw_âl
 *
da
 = (oÂ_a˘i⁄_nw_â»*)
d°
;

188 
da
->
Àn
 = 
	`ht⁄s
((
oÂ_a˘i⁄_nw_âl
));

189 
da
->
nw_âl
 = 
ß
->nw_ttl;

190 
	`mem£t
(
da
->
∑d
, 0x00, 3);

191  (
oÂ_a˘i⁄_nw_âl
);

193 
OFPAT_DEC_NW_TTL
: {

194 
d°
->
Àn
 = 
	`ht⁄s
((
oÂ_a˘i⁄_hódî
));

195  (
oÂ_a˘i⁄_hódî
);

197 
OFPAT_SET_FIELD
: {

198 
oÊ_a˘i⁄_£t_fõld
 *
ß
 = (oÊ_a˘i⁄_£t_fõld *Ë
§c
;

199 
oÂ_a˘i⁄_£t_fõld
 *
da
 = (oÂ_a˘i⁄_£t_fõld *Ë
d°
;

200 
uöt32_t
 
hódî
;

201 
uöt8_t
 
∑ddög_size
;

203 
da
->
Àn
 = 
	`ht⁄s
((
oÂ_a˘i⁄_£t_fõld
Ë+ 
	`ROUND_UP
(
	`OXM_LENGTH
(
ß
->
fõld
->
hódî
),8));

205 
hódî
 = 
	`ht⁄l
(
ß
->
fõld
->header);

206 
	`mem˝y
(&
da
->
fõld
, &
hódî
, 4);

207 
	`OXM_LENGTH
(
ß
->
fõld
->
hódî
)){

211 
	`mem˝y
(
d©a
 + ((
oÂ_a˘i⁄_£t_fõld
)), 
ß
->
fõld
->
vÆue
, 
	`OXM_LENGTH
(ß->fõld->
hódî
));

215 
uöt16_t
 
vÆue
 = 
	`ht⁄s
(*((uöt16_t*Ë
ß
->
fõld
->value));

216 
	`mem˝y
(
d©a
 + ((
oÂ_a˘i⁄_£t_fõld
)),&
vÆue
,
	`OXM_LENGTH
(
ß
->
fõld
->
hódî
));

220 
uöt32_t
 
vÆue
;

221 
uöt8_t
 
fõld
 = 
	`OXM_FIELD
(
ß
->fõld->
hódî
);

222 if–
fõld
 != 11 && field != 12 && field != 22 && field != 23)

223 
vÆue
 = 
	`ht⁄l
(*((
uöt32_t
*Ë
ß
->
fõld
->value));

225 
vÆue
 = *((
uöt32_t
*Ë
ß
->
fõld
->value);

226 
	`mem˝y
(
d©a
 + ((
oÂ_a˘i⁄_£t_fõld
)), &
vÆue
, 
	`OXM_LENGTH
(
ß
->
fõld
->
hódî
));

230 
uöt64_t
 
vÆue
 = 
	`ht⁄s
(*((uöt64_t*Ë
ß
->
fõld
->value));

231 
	`mem˝y
(
d©a
 + ((
oÂ_a˘i⁄_£t_fõld
)),&
vÆue
,
	`OXM_LENGTH
(
ß
->
fõld
->
hódî
));

236 
∑ddög_size
 = 
	`ROUND_UP
(
	`OXM_LENGTH
(
ß
->
fõld
->
hódî
),8) - OXM_LENGTH(sa->field->header);

237 
	`mem£t
(
d©a
 + ((
oÂ_a˘i⁄_£t_fõld
Ë+ 
	`OXM_LENGTH
(
ß
->
fõld
->
hódî
)), 0, 
∑ddög_size
);

238  
	`¡ohs
((
da
->
Àn
));

241 
OFPAT_EXPERIMENTER
: {

242 i‡(
exp
 =
NULL
 ||Éxp->
a˘
 =NULL ||Éxp->a˘->
∑ck
 == NULL) {

243 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÖackÉxperimenter, butÇo callback was given.");

246  
exp
->
a˘
->
	`∑ck
(
§c
, 
d°
);

251 
	}
}

	@oflib/ofl-actions-print.c

32 
	~<°dboﬁ.h
>

33 
	~<°dlib.h
>

34 
	~<°dio.h
>

35 
	~<˘y≥.h
>

36 
	~<öây≥s.h
>

38 
	~"oÊ.h
"

39 
	~"oÊ-¥öt.h
"

40 
	~"oÊ-°ru˘s.h
"

41 
	~"oÊ-a˘i⁄s.h
"

42 
	~"oÊ-∑ckës.h
"

43 
	~"../oÊib/oxm-m©ch.h
"

44 
	~"›íÊow/›íÊow.h
"

47 
	#ETH_ADDR_FMT
 \

48 "%02"
PRIx8
":%02"PRIx8":%02"PRIx8":%02"PRIx8":%02"PRIx8":%02"
	)
PRIx8

49 
	#ETH_ADDR_ARGS
(
ó
) \

50 (
ó
)[0], (ó)[1], (ó)[2], (ó)[3], (ó)[4], (ó)[5]

	)

55 
	$oÊ_a˘i⁄_to_°rög
(
oÊ_a˘i⁄_hódî
 *
a˘
, 
oÊ_exp
 *
exp
) {

56 *
°r
;

57 
size_t
 
°r_size
;

58 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

60 
	`oÊ_a˘i⁄_¥öt
(
°ªam
, 
a˘
, 
exp
);

61 
	`f˛o£
(
°ªam
);

62  
°r
;

63 
	}
}

66 
	$oÊ_a˘i⁄_¥öt
(
FILE
 *
°ªam
, 
oÊ_a˘i⁄_hódî
 *
a˘
, 
oÊ_exp
 *
exp
) {

68 
	`oÊ_a˘i⁄_ty≥_¥öt
(
°ªam
, 
a˘
->
ty≥
);

70 
a˘
->
ty≥
) {

71 
OFPAT_OUTPUT
: {

72 
oÊ_a˘i⁄_ouçut
 *
a
 = (oÊ_a˘i⁄_ouçuà*)
a˘
;

74 
	`Ârötf
(
°ªam
, "{port=\"");

75 
	`oÊ_p‹t_¥öt
(
°ªam
, 
a
->
p‹t
);

76 i‡(
a
->
p‹t
 =
OFPP_CONTROLLER
) {

77 
	`Ârötf
(
°ªam
, "\", mÀn=\"%u\"}", 
a
->
max_Àn
);

79 
	`Ârötf
(
°ªam
, "\"}");

83 
OFPAT_SET_FIELD
:{

84 
size_t
 
size
;

85 
oÊ_a˘i⁄_£t_fõld
 *
a
 = (oÊ_a˘i⁄_£t_fõld *)
a˘
;

86 
	`Ârötf
(
°ªam
, "{field:");

87 
	`oÊ_°ru˘s_oxm_év_¥öt
(
°ªam
, 
a
->
fõld
);

88 
	`Ârötf
(
°ªam
, "}");

91 
OFPAT_COPY_TTL_OUT
:

92 
OFPAT_COPY_TTL_IN
: {

95 
OFPAT_SET_MPLS_TTL
: {

96 
oÊ_a˘i⁄_m∂s_âl
 *
a
 = (oÊ_a˘i⁄_m∂s_â»*)
a˘
;

98 
	`Ârötf
(
°ªam
, "{âl=\"%u\"}", 
a
->
m∂s_âl
);

101 
OFPAT_XOR_ENCODE
: {

102 
	`Ârötf
(
°ªam
, "{xor_encode}");

105 
OFPAT_XOR_DECODE
: {

106 
	`Ârötf
(
°ªam
, "{xor_decode}");

109 
OFPAT_SET_MPLS_LABEL_FROM_COUNTER
: {

110 
	`Ârötf
(
°ªam
, "{set_mpls_label_from_counter}");

114 
OFPAT_SET_PARITY_MPLS_LABEL
: {

115 
	`Ârötf
(
°ªam
, "{parity}");

118 
OFPAT_SET_MPLS_LABEL
: {

119 
oÊ_a˘i⁄_£t_m∂s_œbñ
 *
a
 = (oÊ_a˘i⁄_£t_m∂s_œbñ *)
a˘
;

121 
	`Ârötf
(
°ªam
, "{œbñ=\"%u\"}", 
a
->
m∂s_œbñ
);

125 
OFPAT_DEC_MPLS_TTL
: {

128 
OFPAT_PUSH_VLAN
:

129 
OFPAT_PUSH_MPLS
:

130 
OFPAT_PUSH_PBB
:{

131 
oÊ_a˘i⁄_push
 *
a
 = (oÊ_a˘i⁄_push *)
a˘
;

133 
	`Ârötf
(
°ªam
, "{ëh=\"0x%04"
PRIx16
"\"}", 
a
->
ëhîty≥
);

136 
OFPAT_POP_VLAN
:

137 
OFPAT_POP_PBB
: {

140 
OFPAT_POP_MPLS
: {

141 
oÊ_a˘i⁄_p›_m∂s
 *
a
 = (oÊ_a˘i⁄_p›_m∂†*)
a˘
;

143 
	`Ârötf
(
°ªam
, "{ëh=\"0x%04"
PRIx16
"\"}", 
a
->
ëhîty≥
);

146 
OFPAT_SET_QUEUE
: {

147 
oÊ_a˘i⁄_£t_queue
 *
a
 = (oÊ_a˘i⁄_£t_queuê*)
a˘
;

149 
	`Ârötf
(
°ªam
, "{q=\"");

150 
	`oÊ_queue_¥öt
(
°ªam
, 
a
->
queue_id
);

151 
	`Ârötf
(
°ªam
, "\"}");

154 
OFPAT_GROUP
: {

155 
oÊ_a˘i⁄_group
 *
a
 = (oÊ_a˘i⁄_grou∞*)
a˘
;

157 
	`Ârötf
(
°ªam
, "{id=\"");

158 
	`oÊ_group_¥öt
(
°ªam
, 
a
->
group_id
);

159 
	`Ârötf
(
°ªam
, "\"}");

163 
OFPAT_SET_NW_TTL
: {

164 
oÊ_a˘i⁄_£t_nw_âl
 *
a
 = (oÊ_a˘i⁄_£t_nw_â»*)
a˘
;

166 
	`Ârötf
(
°ªam
, "{âl=\"%u\"}", 
a
->
nw_âl
);

169 
OFPAT_DEC_NW_TTL
: {

172 
OFPAT_EXPERIMENTER
: {

173 i‡(
exp
 =
NULL
 ||Éxp->
a˘
 =NULL ||Éxp->a˘->
to_°rög
 == NULL) {

174 
oÊ_a˘i⁄_ex≥rimíãr
 *
a
 = (oÊ_a˘i⁄_ex≥rimíã∏*)
a˘
;

176 
	`Ârötf
(
°ªam
, "{id=\"0x%"
PRIx32
"\"}", 
a
->
ex≥rimíãr_id
);

178 *
c
 = 
exp
->
a˘
->
	`to_°rög
(act);

179 
	`Ârötf
(
°ªam
, "%s", 
c
);

180 
	`‰ì
 (
c
);

185 
	}
}

	@oflib/ofl-actions-unpack.c

32 
	~<√töë/ö.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<°dlib.h
>

35 
	~<°rög.h
>

36 
	~"oÊ.h
"

37 
	~"oÊ-utûs.h
"

38 
	~"oÊ-a˘i⁄s.h
"

39 
	~"oÊ-°ru˘s.h
"

40 
	~"oÊ-mesßges.h
"

41 
	~"oÊ-¥öt.h
"

42 
	~"oÊ-∑ckës.h
"

43 
	~"oÊ-log.h
"

44 
	~"›íÊow/›íÊow.h
"

45 
	~"oxm-m©ch.h
"

47 
	#LOG_MODULE
 
oÊ_a˘_u


	)

48 
	$OFL_LOG_INIT
(
LOG_MODULE
)

51 
oÊ_îr


52 
	$oÊ_a˘i⁄s_u≈ack
(
oÂ_a˘i⁄_hódî
 *
§c
, 
size_t
 *
Àn
, 
oÊ_a˘i⁄_hódî
 **
d°
, 
oÊ_exp
 *
exp
) {

54 i‡(*
Àn
 < (
oÂ_a˘i⁄_hódî
)) {

55 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ivedá˘i⁄ i†toÿsh‹à(%zu).", *
Àn
);

56  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

59 i‡(*
Àn
 < 
	`¡ohs
(
§c
->len)) {

60 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ivedá˘i⁄ ha†övÆidÜígth (£àtÿ%u, buà⁄ly %zuÑe˚ived).", 
	`¡ohs
(
§c
->
Àn
), *len);

61  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

64 i‡((
	`¡ohs
(
§c
->
Àn
) % 8) != 0) {

65 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ivedá˘i⁄Üígth i†nŸá mu…ùÀ o‡64 bô†(%u).", 
	`¡ohs
(
§c
->
Àn
));

66  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

69 
	`¡ohs
(
§c
->
ty≥
)) {

70 
OFPAT_OUTPUT
: {

71 
oÂ_a˘i⁄_ouçut
 *
ß
;

72 
oÊ_a˘i⁄_ouçut
 *
da
;

74 i‡(*
Àn
 < (
oÂ_a˘i⁄_ouçut
)) {

75 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived OUTPUTá˘i⁄ ha†övÆidÜígth (%zu).", *
Àn
);

76  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

79 
ß
 = (
oÂ_a˘i⁄_ouçut
 *)
§c
;

81 i‡(
	`¡ohl
(
ß
->
p‹t
) == 0 ||

82 (
	`¡ohl
(
ß
->
p‹t
Ë> 
OFPP_MAX
 &&Çtohl(ß->p‹tË< 
OFPP_IN_PORT
) ||

83 
	`¡ohl
(
ß
->
p‹t
Ë=
OFPP_ANY
) {

84 i‡(
	`OFL_LOG_IS_WARN_ENABLED
(
LOG_MODULE
)) {

85 *
ps
 = 
	`oÊ_p‹t_to_°rög
(
	`¡ohl
(
ß
->
p‹t
));

86 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived OUTPUTá˘i⁄ ha†övÆidÖ‹à(%s).", 
ps
);

87 
	`‰ì
(
ps
);

89  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_OUT_PORT
);

92 
da
 = (
oÊ_a˘i⁄_ouçut
 *)
	`mÆloc
((ofl_action_output));

93 
da
->
p‹t
 = 
	`¡ohl
(
ß
->port);

94 
da
->
max_Àn
 = 
	`¡ohs
(
ß
->max_len);

96 *
Àn
 -(
oÂ_a˘i⁄_ouçut
);

97 *
d°
 = (
oÊ_a˘i⁄_hódî
 *)
da
;

100 
OFPAT_COPY_TTL_OUT
: {

102 *
Àn
 -(
oÂ_a˘i⁄_hódî
);

103 *
d°
 = (
oÊ_a˘i⁄_hódî
 *)
	`mÆloc
((ofl_action_header));

107 
OFPAT_COPY_TTL_IN
: {

109 *
Àn
 -(
oÂ_a˘i⁄_hódî
);

110 *
d°
 = (
oÊ_a˘i⁄_hódî
 *)
	`mÆloc
((ofl_action_header));

114 
OFPAT_XOR_ENCODE
: {

115 
oÂ_a˘i⁄_x‹_ícode
 *
ß
;

116 
oÊ_a˘i⁄_x‹_ícode
 *
da
;

118 i‡(*
Àn
 < (
oÂ_a˘i⁄_x‹_ícode
)) {

119 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived OFPAT_XOR_ENCODE:á˘i⁄ ha†övÆidÜígth (%zu).", *
Àn
);

120  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

123 
ß
 = (
oÂ_a˘i⁄_x‹_ícode
 *)
§c
;

125 
da
 = (
oÊ_a˘i⁄_x‹_ícode
 *)
	`mÆloc
((ofl_action_xor_encode));

126 
da
->
œbñ_a
 = 
ß
->label_a;

127 
da
->
œbñ_b
 = 
ß
->label_b;

130 *
Àn
 -(
oÂ_a˘i⁄_x‹_ícode
);

131 *
d°
 = (
oÊ_a˘i⁄_hódî
 *)
da
;

134 
OFPAT_SET_MPLS_LABEL_FROM_COUNTER
: {

135 
oÂ_a˘i⁄_£t_m∂s_œbñ_‰om_cou¡î
 *
ß
;

136 
oÊ_a˘i⁄_£t_m∂s_œbñ_‰om_cou¡î
 *
da
;

138 i‡(*
Àn
 < (
oÂ_a˘i⁄_£t_m∂s_œbñ_‰om_cou¡î
)) {

139 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived OFPAT_SET_MPLS_LABEL_FROM_COUNTER:::á˘i⁄ ha†övÆidÜígth (%zu).", *
Àn
);

140  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

143 
ß
 = (
oÂ_a˘i⁄_£t_m∂s_œbñ_‰om_cou¡î
 *)
§c
;

145 
da
 = (
oÊ_a˘i⁄_£t_m∂s_œbñ_‰om_cou¡î
 *)
	`mÆloc
((ofl_action_set_mpls_label_from_counter));

147 *
Àn
 -(
oÂ_a˘i⁄_£t_m∂s_œbñ_‰om_cou¡î
);

148 *
d°
 = (
oÊ_a˘i⁄_hódî
 *)
da
;

151 
OFPAT_SET_PARITY_MPLS_LABEL
: {

152 
oÂ_a˘i⁄_∑rôy_m∂s_œbñ
 *
ß
;

153 
oÊ_a˘i⁄_£t_∑rôy_m∂s_œbñ
 *
da
;

155 i‡(*
Àn
 < (
oÂ_a˘i⁄_∑rôy_m∂s_œbñ
)) {

156 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived OFPAT_SET_PARITY_MPLS_LABEL::á˘i⁄ ha†övÆidÜígth (%zu).", *
Àn
);

157  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

160 
ß
 = (
oÂ_a˘i⁄_∑rôy_m∂s_œbñ
 *)
§c
;

162 
da
 = (
oÊ_a˘i⁄_£t_∑rôy_m∂s_œbñ
 *)
	`mÆloc
((ofl_action_set_parity_mpls_label));

164 *
Àn
 -(
oÂ_a˘i⁄_∑rôy_m∂s_œbñ
);

165 *
d°
 = (
oÊ_a˘i⁄_hódî
 *)
da
;

168 
OFPAT_SET_MPLS_LABEL
: {

169 
oÂ_a˘i⁄_m∂s_œbñ
 *
ß
;

170 
oÊ_a˘i⁄_£t_m∂s_œbñ
 *
da
;

172 i‡(*
Àn
 < (
oÂ_a˘i⁄_m∂s_œbñ
)) {

173 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived OFPAT_SET_MPLS_LABEL:á˘i⁄ ha†övÆidÜígth (%zu).", *
Àn
);

174  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

177 
ß
 = (
oÂ_a˘i⁄_m∂s_œbñ
 *)
§c
;

179 
da
 = (
oÊ_a˘i⁄_£t_m∂s_œbñ
 *)
	`mÆloc
((ofl_action_set_mpls_label));

180 
da
->
m∂s_œbñ
 = 
ß
->mpls_label;

182 *
Àn
 -(
oÂ_a˘i⁄_m∂s_œbñ
);

183 *
d°
 = (
oÊ_a˘i⁄_hódî
 *)
da
;

186 
OFPAT_SET_MPLS_TTL
: {

187 
oÂ_a˘i⁄_m∂s_âl
 *
ß
;

188 
oÊ_a˘i⁄_m∂s_âl
 *
da
;

190 i‡(*
Àn
 < (
oÂ_a˘i⁄_m∂s_âl
)) {

191 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived SET_MPLS_TTLá˘i⁄ ha†övÆidÜígth (%zu).", *
Àn
);

192  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

195 
ß
 = (
oÂ_a˘i⁄_m∂s_âl
 *)
§c
;

197 
da
 = (
oÊ_a˘i⁄_m∂s_âl
 *)
	`mÆloc
((ofl_action_mpls_ttl));

198 
da
->
m∂s_âl
 = 
ß
->mpls_ttl;

200 *
Àn
 -(
oÂ_a˘i⁄_m∂s_âl
);

201 *
d°
 = (
oÊ_a˘i⁄_hódî
 *)
da
;

205 
OFPAT_DEC_MPLS_TTL
: {

207 *
Àn
 -(
oÂ_a˘i⁄_m∂s_âl
);

208 *
d°
 = (
oÊ_a˘i⁄_hódî
 *)
	`mÆloc
((ofl_action_header));

212 
OFPAT_PUSH_VLAN
:

213 
OFPAT_PUSH_PBB
:

214 
OFPAT_PUSH_MPLS
: {

215 
oÂ_a˘i⁄_push
 *
ß
;

216 
oÊ_a˘i⁄_push
 *
da
;

218 i‡(*
Àn
 < (
oÂ_a˘i⁄_push
)) {

219 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived PUSH_VLAN/MPLS/PBBá˘i⁄ ha†övÆidÜígth (%zu).", *
Àn
);

220  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

223 
ß
 = (
oÂ_a˘i⁄_push
 *)
§c
;

225 i‡(((
	`¡ohs
(
§c
->
ty≥
Ë=
OFPAT_PUSH_VLAN
) &&

226 (
	`¡ohs
(
ß
->
ëhîty≥
Ë!
ETH_TYPE_VLAN
 &&

227 
	`¡ohs
(
ß
->
ëhîty≥
Ë!
ETH_TYPE_VLAN_PBB
)) ||

228 ((
	`¡ohs
(
§c
->
ty≥
Ë=
OFPAT_PUSH_MPLS
) &&

229 (
	`¡ohs
(
ß
->
ëhîty≥
Ë!
ETH_TYPE_MPLS
 &&

230 
	`¡ohs
(
ß
->
ëhîty≥
Ë!
ETH_TYPE_MPLS_MCAST
)) ||

231 ((
	`¡ohs
(
§c
->
ty≥
Ë=
OFPAT_PUSH_PBB
) &&

232 (
	`¡ohs
(
ß
->
ëhîty≥
Ë!
ETH_TYPE_PBB
))) {

233 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived PUSH_VLAN/MPLS/PBB ha†övÆidÉthÅy≥. (%u)", 
	`¡ohs
(
ß
->
ëhîty≥
));

234  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_ARGUMENT
);

237 
da
 = (
oÊ_a˘i⁄_push
 *)
	`mÆloc
((ofl_action_push));

238 
da
->
ëhîty≥
 = 
	`¡ohs
(
ß
->ethertype);

240 *
Àn
 -(
oÂ_a˘i⁄_push
);

241 *
d°
 = (
oÊ_a˘i⁄_hódî
 *)
da
;

245 
OFPAT_POP_VLAN
:

246 
OFPAT_POP_PBB
: {

248 *
Àn
 -(
oÂ_a˘i⁄_hódî
);

249 *
d°
 = (
oÊ_a˘i⁄_hódî
 *)
	`mÆloc
((ofl_action_header));

253 
OFPAT_POP_MPLS
: {

254 
oÂ_a˘i⁄_p›_m∂s
 *
ß
;

255 
oÊ_a˘i⁄_p›_m∂s
 *
da
;

257 i‡(*
Àn
 < (
oÂ_a˘i⁄_p›_m∂s
)) {

258 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived POP_MPLSá˘i⁄ ha†övÆidÜígth (%zu).", *
Àn
);

259  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

262 
ß
 = (
oÂ_a˘i⁄_p›_m∂s
 *)
§c
;

264 
da
 = (
oÊ_a˘i⁄_p›_m∂s
 *)
	`mÆloc
((ofl_action_pop_mpls));

265 
da
->
ëhîty≥
 = 
	`¡ohs
(
ß
->ethertype);

267 *
Àn
 -(
oÂ_a˘i⁄_p›_m∂s
);

268 *
d°
 = (
oÊ_a˘i⁄_hódî
 *)
da
;

272 
OFPAT_SET_QUEUE
: {

273 
oÂ_a˘i⁄_£t_queue
 *
ß
;

274 
oÊ_a˘i⁄_£t_queue
 *
da
;

276 i‡(*
Àn
 < (
oÂ_a˘i⁄_£t_queue
)) {

277 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived SET_QUEUEá˘i⁄ ha†övÆidÜígth (%zu).", *
Àn
);

278  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

281 
ß
 = (
oÂ_a˘i⁄_£t_queue
 *)
§c
;

283 
da
 = (
oÊ_a˘i⁄_£t_queue
 *)
	`mÆloc
((ofl_action_set_queue));

284 
da
->
queue_id
 = 
	`¡ohl
(
ß
->queue_id);

286 *
Àn
 -(
oÂ_a˘i⁄_£t_queue
);

287 *
d°
 = (
oÊ_a˘i⁄_hódî
 *)
da
;

291 
OFPAT_GROUP
: {

292 
oÂ_a˘i⁄_group
 *
ß
;

293 
oÊ_a˘i⁄_group
 *
da
;

295 i‡(*
Àn
 < (
oÂ_a˘i⁄_group
)) {

296 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived GROUPá˘i⁄ ha†övÆidÜígth (%zu).", *
Àn
);

297  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

300 
ß
 = (
oÂ_a˘i⁄_group
 *)
§c
;

302 i‡(
	`¡ohl
(
ß
->
group_id
Ë> 
OFPG_MAX
) {

303 i‡(
	`OFL_LOG_IS_WARN_ENABLED
(
LOG_MODULE
)) {

304 *
gs
 = 
	`oÊ_group_to_°rög
(
	`¡ohl
(
ß
->
group_id
));

305 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived GROUPá˘i⁄ ha†övÆid grou∞id (%s).", 
gs
);

306 
	`‰ì
(
gs
);

308  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_OUT_GROUP
);

311 
da
 = (
oÊ_a˘i⁄_group
 *)
	`mÆloc
((ofl_action_group));

312 
da
->
group_id
 = 
	`¡ohl
(
ß
->group_id);

314 *
Àn
 -(
oÂ_a˘i⁄_group
);

315 *
d°
 = (
oÊ_a˘i⁄_hódî
 *)
da
;

319 
OFPAT_SET_NW_TTL
: {

320 
oÂ_a˘i⁄_nw_âl
 *
ß
;

321 
oÊ_a˘i⁄_£t_nw_âl
 *
da
;

323 i‡(*
Àn
 < (
oÂ_a˘i⁄_nw_âl
)) {

324 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived SET_NW_TTLá˘i⁄ ha†övÆidÜígth (%zu).", *
Àn
);

325  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

328 
ß
 = (
oÂ_a˘i⁄_nw_âl
 *)
§c
;

330 
da
 = (
oÊ_a˘i⁄_£t_nw_âl
 *)
	`mÆloc
((ofl_action_set_nw_ttl));

331 
da
->
nw_âl
 = 
ß
->nw_ttl;

333 *
Àn
 -(
oÂ_a˘i⁄_nw_âl
);

334 *
d°
 = (
oÊ_a˘i⁄_hódî
 *)
da
;

338 
OFPAT_DEC_NW_TTL
: {

340 *
Àn
 -(
oÂ_a˘i⁄_hódî
);

341 *
d°
 = (
oÊ_a˘i⁄_hódî
 *)
	`mÆloc
((ofl_action_header));

345 
OFPAT_SET_FIELD
: {

346 
oÂ_a˘i⁄_£t_fõld
 *
ß
;

347 
oÊ_a˘i⁄_£t_fõld
 *
da
;

348 
uöt8_t
 *
vÆue
;

350 
ß
 = (
oÂ_a˘i⁄_£t_fõld
*Ë
§c
;

351 
da
 = (
oÊ_a˘i⁄_£t_fõld
 *)
	`mÆloc
((ofl_action_set_field));

352 
da
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

354 
	`mem˝y
(&
da
->
fõld
->
hódî
,
ß
->field,4);

355 
da
->
fõld
->
hódî
 = 
	`¡ohl
(da->field->header);

356 
vÆue
 = (
uöt8_t
 *Ë
§c
 +  (
oÂ_a˘i⁄_£t_fõld
);

357 
da
->
fõld
->
vÆue
 = 
	`mÆloc
(
	`OXM_LENGTH
(da->fõld->
hódî
));

359 if(
da
->
fõld
->
hódî
 =
OXM_OF_IN_PORT
 || da->fõld->hódî =
OXM_OF_IN_PHY_PORT


360 || 
da
->
fõld
->
hódî
 =
OXM_OF_METADATA
){

361  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_SET_TYPE
);

363 
	`OXM_LENGTH
(
da
->
fõld
->
hódî
)){

367 
	`mem˝y
(
da
->
fõld
->
vÆue
 , vÆue, 
	`OXM_LENGTH
(da->fõld->
hódî
));

371 
uöt16_t
 
v
 = 
	`¡ohs
(*((uöt16_t*Ë
vÆue
));

372 
	`mem˝y
(
da
->
fõld
->
vÆue
 , &
v
, 
	`OXM_LENGTH
(da->fõld->
hódî
));

376 
uöt32_t
 
v
;

377 
uöt8_t
 
fõld
 = 
	`OXM_FIELD
(
da
->fõld->
hódî
);

378 if–
fõld
 != 11 && field != 12 && field != 22 && field != 23)

379 
v
 = 
	`ht⁄l
(*((
uöt32_t
*Ë
vÆue
));

380 
v
 = *((
uöt32_t
*Ë
vÆue
);

381 
	`mem˝y
(
da
->
fõld
->
vÆue
 , &
v
, 
	`OXM_LENGTH
(da->fõld->
hódî
));

385 
uöt64_t
 
v
 = 
	`ht⁄64
(*((uöt64_t*Ë
vÆue
));

386 
	`mem˝y
(
da
->
fõld
->
vÆue
 , &
v
, 
	`OXM_LENGTH
(da->fõld->
hódî
));

390 *
Àn
 -
	`ROUND_UP
(
	`¡ohs
(
§c
->len),8);

391 *
d°
 = (
oÊ_a˘i⁄_hódî
 *)
da
;

395 
OFPAT_EXPERIMENTER
: {

396 
oÊ_îr
 
îr‹
;

398 i‡(*
Àn
 < (
oÂ_a˘i⁄_ex≥rimíãr_hódî
)) {

399 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived EXPERIMENTERá˘i⁄ ha†övÆidÜígth (%zu).", *
Àn
);

400  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

403 i‡(
exp
 =
NULL
 ||Éxp->
a˘
 =NULL ||Éxp->a˘->
u≈ack
 == NULL) {

404 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received EXPERIMENTERáction, butÇo callback is given.");

405  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_EXPERIMENTER
);

407 
îr‹
 = 
exp
->
a˘
->
	`u≈ack
(
§c
, 
Àn
, 
d°
);

408 i‡(
îr‹
) {

409  
îr‹
;

415 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived unknow¿a˘i⁄Åy≥ (%u).", 
	`¡ohs
(
§c
->
ty≥
));

416  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_TYPE
);

419 (*
d°
)->
ty≥
 = (
oÂ_a˘i⁄_ty≥
)
	`¡ohs
(
§c
->type);

422 
	}
}

	@oflib/ofl-actions.c

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<√töë/ö.h
>

35 
	~"oÊ.h
"

36 
	~"oÊ-a˘i⁄s.h
"

37 
	~"oÊ-log.h
"

39 
	#LOG_MODULE
 
oÊ_a˘


	)

40 
	$OFL_LOG_INIT
(
LOG_MODULE
)

43 
	$oÊ_a˘i⁄s_‰ì
(
oÊ_a˘i⁄_hódî
 *
a˘
, 
oÊ_exp
 *
exp
) {

44 
a˘
->
ty≥
) {

45 
OFPAT_SET_FIELD
:{

46 
oÊ_a˘i⁄_£t_fõld
 *
a
 = (oÊ_a˘i⁄_£t_fõld*Ë
a˘
;

47 
	`‰ì
(
a
->
fõld
->
vÆue
);

48 
	`‰ì
(
a
->
fõld
);

49 
	`‰ì
(
a
);

53 
OFPAT_OUTPUT
:

54 
OFPAT_COPY_TTL_OUT
:

55 
OFPAT_COPY_TTL_IN
:

56 
OFPAT_SET_MPLS_TTL
:

57 
OFPAT_DEC_MPLS_TTL
:

58 
OFPAT_PUSH_VLAN
:

59 
OFPAT_POP_VLAN
:

60 
OFPAT_PUSH_MPLS
:

61 
OFPAT_POP_MPLS
:

62 
OFPAT_PUSH_PBB
:

63 
OFPAT_POP_PBB
:

64 
OFPAT_SET_QUEUE
:

65 
OFPAT_GROUP
:

66 
OFPAT_SET_NW_TTL
:

67 
OFPAT_DEC_NW_TTL
: {

70 
OFPAT_EXPERIMENTER
: {

71 i‡(
exp
 =
NULL
 ||Éxp->
a˘
 =NULL ||Éxp->a˘->
‰ì
 == NULL) {

72 
	`OFL_LOG_WARN
(
LOG_MODULE
, "FreeingÉxperimenteráction, butÇo callback is given.");

75 
exp
->
a˘
->
	`‰ì
(act);

81 
	`‰ì
(
a˘
);

82 
	}
}

84 
oÊ_îr


85 
	$oÊ_utûs_cou¡_oÂ_a˘i⁄s
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
) {

86 
oÂ_a˘i⁄_hódî
 *
a˘
;

87 
uöt8_t
 *
d
;

89 
d
 = (
uöt8_t
 *)
d©a
;

90 *
cou¡
 = 0;

93 
d©a_Àn
 >(
oÂ_a˘i⁄_hódî
) -4 ) {

94 
a˘
 = (
oÂ_a˘i⁄_hódî
 *)
d
;

96 i‡(
d©a_Àn
 < 
	`¡ohs
(
a˘
->
Àn
Ë||Çtohs◊˘->ÀnË< (
oÂ_a˘i⁄_hódî
) - 4) {

97 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived *_ACTIONS in°ru˘i⁄ ha†övÆidÜígth (%"
PRIu32
").", 
	`¡ohs
(
a˘
->
Àn
));

98 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived *_ACTIONS in°ru˘i⁄ ha†övÆidÜígth (%"
PRIu32
").", 
d©a_Àn
);

99 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived *_ACTIONS in°ru˘i⁄ ha†övÆidÜígth (%"
PRIu32
").", (
oÂ_a˘i⁄_hódî
) - 4);

100 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Receivedáction has invalidÜength.");

101  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

103 
d©a_Àn
 -
	`¡ohs
(
a˘
->
Àn
);

104 
d
 +
	`¡ohs
(
a˘
->
Àn
);

105 (*
cou¡
)++;

109 
	}
}

	@oflib/ofl-actions.h

32 #i‚de‡
OFL_ACTIONS_H


33 
	#OFL_ACTIONS_H
 1

	)

35 
	~<sys/ty≥s.h
>

36 
	~<°dio.h
>

38 
	~"oÊ.h
"

39 
	~"oÊ-°ru˘s.h
"

40 
	~"../ö˛ude/›íÊow/›íÊow.h
"

42 
	goÊ_exp
;

50 
	soÊ_a˘i⁄_hódî
 {

51 
oÂ_a˘i⁄_ty≥
 
	mty≥
;

52 
uöt16_t
 
	mÀn
;

56 
	soÊ_a˘i⁄_ouçut
 {

57 
oÊ_a˘i⁄_hódî
 
	mhódî
;

59 
uöt32_t
 
	mp‹t
;

60 
uöt16_t
 
	mmax_Àn
;

63 
	soÊ_a˘i⁄_m∂s_âl
 {

64 
oÊ_a˘i⁄_hódî
 
	mhódî
;

66 
uöt8_t
 
	mm∂s_âl
;

71 
	soÊ_a˘i⁄_£t_m∂s_œbñ
 {

72 
oÊ_a˘i⁄_hódî
 
	mhódî
;

74 
uöt32_t
 
	mm∂s_œbñ
;

76 
	soÊ_a˘i⁄_£t_m∂s_œbñ_‰om_cou¡î
 {

77 
oÊ_a˘i⁄_hódî
 
	mhódî
;

79 
	soÊ_a˘i⁄_x‹_ícode
 {

80 
oÊ_a˘i⁄_hódî
 
	mhódî
;

81 
uöt32_t
 
	mœbñ_a
;

82 
uöt32_t
 
	mœbñ_b
;

84 
	soÊ_a˘i⁄_x‹_decode
 {

85 
oÊ_a˘i⁄_hódî
 
	mhódî
;

86 
uöt32_t
 
	mœbñ_a
;

87 
uöt32_t
 
	mœbñ_b
;

89 
	soÊ_a˘i⁄_£t_∑rôy_m∂s_œbñ
 {

90 
oÊ_a˘i⁄_hódî
 
	mhódî
;

94 
	soÊ_a˘i⁄_push
 {

95 
oÊ_a˘i⁄_hódî
 
	mhódî
;

97 
uöt16_t
 
	mëhîty≥
;

100 
	soÊ_a˘i⁄_p›_m∂s
 {

101 
oÊ_a˘i⁄_hódî
 
	mhódî
;

103 
uöt16_t
 
	mëhîty≥
;

106 
	soÊ_a˘i⁄_£t_queue
 {

107 
oÊ_a˘i⁄_hódî
 
	mhódî
;

109 
uöt32_t
 
	mqueue_id
;

112 
	soÊ_a˘i⁄_group
 {

113 
oÊ_a˘i⁄_hódî
 
	mhódî
;

115 
uöt32_t
 
	mgroup_id
;

118 
	soÊ_a˘i⁄_£t_nw_âl
 {

119 
oÊ_a˘i⁄_hódî
 
	mhódî
;

121 
uöt8_t
 
	mnw_âl
;

124 
	soÊ_a˘i⁄_£t_fõld
 {

125 
oÊ_a˘i⁄_hódî
 
	mhódî
;

126 
oÊ_m©ch_év
 *
	mfõld
;

129 
	soÊ_a˘i⁄_ex≥rimíãr
 {

130 
oÊ_a˘i⁄_hódî
 
	mhódî
;

132 
uöt32_t
 
	mex≥rimíãr_id
;

144 
size_t


145 
oÊ_a˘i⁄s_∑ck
(
oÊ_a˘i⁄_hódî
 *
§c
, 
oÂ_a˘i⁄_hódî
 *
d°
, 
uöt8_t
* 
d©a
, 
oÊ_exp
 *
exp
);

151 
oÊ_îr


152 
oÊ_utûs_cou¡_oÂ_a˘i⁄s
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
);

158 
oÊ_îr


159 
oÊ_a˘i⁄s_u≈ack
(
oÂ_a˘i⁄_hódî
 *
§c
, 
size_t
 *
Àn
, 
oÊ_a˘i⁄_hódî
 **
d°
, 
oÊ_exp
 *
exp
);

170 
oÊ_a˘i⁄s_‰ì
(
oÊ_a˘i⁄_hódî
 *
a˘
, 
oÊ_exp
 *
exp
);

181 
size_t


182 
oÊ_a˘i⁄s_oÂ_tŸÆ_Àn
(
oÊ_a˘i⁄_hódî
 **
a˘i⁄s
, 
size_t
 
a˘i⁄s_num
, 
oÊ_exp
 *
exp
);

187 
size_t


188 
oÊ_a˘i⁄s_oÂ_Àn
(
oÊ_a˘i⁄_hódî
 *
a˘i⁄
, 
oÊ_exp
 *
exp
);

199 
oÊ_a˘i⁄_to_°rög
(
oÊ_a˘i⁄_hódî
 *
a˘
, 
oÊ_exp
 *
exp
);

205 
oÊ_a˘i⁄_¥öt
(
FILE
 *
°ªam
, 
oÊ_a˘i⁄_hódî
 *
a˘
, 
oÊ_exp
 *
exp
);

	@oflib/ofl-log-vlog-cc.h

32 #i‚de‡
OFL_LOG_VLOG_CC_H


33 
	#OFL_LOG_VLOG_CC_H


	)

35 
	~"vlog.hh
"

37 
	#VLOG_NAME
(
NAME
Ë
lg_
##
	)
NAME

39 
	#OFL_LOG_INIT
(
MODULE
) \

40 
vigû
::
Vlog_moduÀ
 
	`VLOG_NAME
(
MODULE
)("MODULE");

	)

42 
	#OFL_LOG_DBG
(
MODULE
, ...) \

43 
	`VLOG_NAME
(
MODULE
).
	`dbg
(
__VA_ARGS__
)

	)

45 
	#OFL_LOG_WARN
(
MODULE
, ...) \

46 
	`VLOG_NAME
(
MODULE
).
	`w¨n
(
__VA_ARGS__
)

	)

48 
	#OFL_LOG_IS_DBG_ENABLED
(
MODULE
) \

49 
	`VLOG_NAME
(
MODULE
).
	`is_dbg_íabÀd
()

	)

51 
	#OFL_LOG_IS_WARN_ENABLED
(
MODULE
) \

52 
	`VLOG_NAME
(
MODULE
).
	`is_w¨n_íabÀd
()

	)

	@oflib/ofl-log-vlog.h

32 #i‚de‡
OFL_LOG_VLOG_H


33 
	#OFL_LOG_VLOG_H


	)

35 
	~"vlog.h
"

37 
	#VLOG_NAME
(
NAME
Ë
VLM_
##
	)
NAME

39 
	#OFL_LOG_INIT
(
MODULE
)

	)

41 
	#OFL_LOG_DBG
(
MODULE
, ...) \

42 
	`VLOG_DBG
(
	`VLOG_NAME
(
MODULE
), 
__VA_ARGS__
)

	)

44 
	#OFL_LOG_WARN
(
MODULE
, ...) \

45 
	`VLOG_WARN
(
	`VLOG_NAME
(
MODULE
), 
__VA_ARGS__
)

	)

47 
	#OFL_LOG_IS_DBG_ENABLED
(
MODULE
) \

48 
	`VLOG_IS_DBG_ENABLED
(
	`VLOG_NAME
(
MODULE
))

	)

50 
	#OFL_LOG_IS_WARN_ENABLED
(
MODULE
) \

51 
	`VLOG_IS_WARN_ENABLED
(
	`VLOG_NAME
(
MODULE
))

	)

	@oflib/ofl-log.h

32 #i‚de‡
OFL_LOG_H


33 
	#OFL_LOG_H


	)

35 #ifde‡
OFL_LOG_VLOG


36 
	~"oÊ-log-vlog.h
"

37 #ñi‡
OFL_LOG_VLOG_CC


38 
	~"oÊ-log-vlog-cc.h
"

	@oflib/ofl-messages-pack.c

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<√töë/ö.h
>

35 
	~"oÊ-a˘i⁄s.h
"

36 
	~"oÊ-mesßges.h
"

37 
	~"oÊ-°ru˘s.h
"

38 
	~"oÊ-log.h
"

39 
	~"oÊ-utûs.h
"

40 
	~"›íÊow/›íÊow.h
"

42 
	#UNUSED
 
	`__©åibuã__
((
__unu£d__
))

	)

44 
	#LOG_MODULE
 
oÊ_msg_p


	)

45 
	$OFL_LOG_INIT
(
LOG_MODULE
)

54 
	$oÊ_msg_∑ck_îr‹
(
oÊ_msg_îr‹
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

55 
oÂ_îr‹_msg
 *
îr
;

57 *
buf_Àn
 = (
oÂ_îr‹_msg
Ë+ 
msg
->
d©a_Àngth
;

58 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

60 
îr
 = (
oÂ_îr‹_msg
 *)(*
buf
);

61 
îr
->
ty≥
 = 
	`ht⁄s
(
msg
->type);

62 
îr
->
code
 = 
	`ht⁄s
(
msg
->code);

63 
	`mem˝y
(
îr
->
d©a
, 
msg
->d©a, msg->
d©a_Àngth
);

65 
	}
}

68 
	$oÊ_msg_∑ck_echo
(
oÊ_msg_echo
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

69 
uöt8_t
 *
d©a
;

71 *
buf_Àn
 = (
oÂ_hódî
Ë+ 
msg
->
d©a_Àngth
;

72 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

74 i‡(
msg
->
d©a_Àngth
 > 0) {

75 
d©a
 = (*
buf
Ë+ (
oÂ_hódî
);

76 
	`mem˝y
(
d©a
, 
msg
->d©a, msg->
d©a_Àngth
);

79 
	}
}

82 
	$oÊ_msg_∑ck_rﬁe_ªque°
(
oÊ_msg_rﬁe_ªque°
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

83 
oÂ_rﬁe_ªque°
 *
ªq
;

85 *
buf_Àn
 = (
oÂ_rﬁe_ªque°
);

86 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

88 
ªq
 = (
oÂ_rﬁe_ªque°
 *)(*
buf
);

89 
ªq
->
rﬁe
 = 
	`ht⁄l
(
msg
->role);

90 
	`mem£t
(
ªq
->
∑d
,0,(req->pad));

91 
ªq
->
gíî©i⁄_id
 = 
	`ht⁄64
(
msg
->generation_id);

94 
	}
}

97 
	$oÊ_msg_∑ck_„©uªs_ª∂y
(
oÊ_msg_„©uªs_ª∂y
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

98 
oÂ_swôch_„©uªs
 *
„©uªs
;

100 *
buf_Àn
 = (
oÂ_swôch_„©uªs
);

101 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

103 
„©uªs
 = (
oÂ_swôch_„©uªs
 *)(*
buf
);

104 
„©uªs
->
d©≠©h_id
 = 
	`ht⁄64
(
msg
->datapath_id);

105 
„©uªs
->
n_buf„rs
 = 
	`ht⁄l
–
msg
->n_buffers);

106 
„©uªs
->
n_èbÀs
 = 
msg
->n_tables;

107 
„©uªs
->
auxûüry_id
 = 
msg
->auxiliary_id;

108 
	`mem£t
(
„©uªs
->
∑d
, 0x00, 2);

109 
„©uªs
->
ˇ∑bûôõs
 = 
	`ht⁄l
–
msg
->capabilities);

110 
„©uªs
->
ª£rved
 = 0x00000000;

113 
	}
}

116 
	$oÊ_msg_∑ck_gë_c⁄fig_ª∂y
(
oÊ_msg_gë_c⁄fig_ª∂y
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

117 
oÂ_swôch_c⁄fig
 *
c⁄fig
;

119 *
buf_Àn
 = (
oÂ_swôch_c⁄fig
);

120 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

122 
c⁄fig
 = (
oÂ_swôch_c⁄fig
 *)(*
buf
);

123 
c⁄fig
->
Êags
 = 
	`ht⁄s
(
msg
->config->flags);

124 
c⁄fig
->
miss_£nd_Àn
 = 
	`ht⁄s
(
msg
->config->miss_send_len);

127 
	}
}

130 
	$oÊ_msg_∑ck_£t_c⁄fig
(
oÊ_msg_£t_c⁄fig
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

131 
oÂ_swôch_c⁄fig
 *
c⁄fig
;

133 *
buf_Àn
 = (
oÂ_swôch_c⁄fig
);

134 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

136 
c⁄fig
 = (
oÂ_swôch_c⁄fig
 *)(*
buf
);

137 
c⁄fig
->
miss_£nd_Àn
 = 
	`ht⁄s
(
msg
->config->miss_send_len);

138 
c⁄fig
->
Êags
 = 
	`ht⁄s
(
msg
->config->flags);

141 
	}
}

144 
	$oÊ_msg_∑ck_∑ckë_ö
(
oÊ_msg_∑ckë_ö
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

145 
oÂ_∑ckë_ö
 *
∑ckë_ö
;

146 
uöt8_t
 *
±r
;

148 *
buf_Àn
 = (
oÂ_∑ckë_ö
Ë+ 
	`ROUND_UP
(
msg
->
m©ch
->
Àngth
 - 4 ,8Ë+ msg->
d©a_Àngth
 + 2;

149 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

150 
∑ckë_ö
 = (
oÂ_∑ckë_ö
 *)(*
buf
);

151 
∑ckë_ö
->
buf„r_id
 = 
	`ht⁄l
(
msg
->buffer_id);

152 
∑ckë_ö
->
tŸÆ_Àn
 = 
	`ht⁄s
(
msg
->total_len);

153 
∑ckë_ö
->
ªas⁄
 = 
msg
->reason;

154 
∑ckë_ö
->
èbÀ_id
 = 
msg
->table_id;

155 
∑ckë_ö
->
cookõ
 = 
	`ht⁄64
(
msg
->cookie);

157 
±r
 = (*
buf
Ë+ ((
oÂ_∑ckë_ö
) - 4);

158 
	`oÊ_°ru˘s_m©ch_∑ck
(
msg
->
m©ch
,&(
∑ckë_ö
->m©ch),
±r
, 
NULL
);

159 
±r
 = (*
buf
Ë+ 
	`ROUND_UP
(((
oÂ_∑ckë_ö
)-4Ë+ 
msg
->
m©ch
->
Àngth
,8);

162 
	`mem£t
(
±r
,0,2);

164 i‡(
msg
->
d©a_Àngth
 > 0) {

165 
	`mem˝y
(
±r
 + 2 , 
msg
->
d©a
, msg->
d©a_Àngth
);

169 
	}
}

172 
	$oÊ_msg_∑ck_Êow_ªmoved
(
oÊ_msg_Êow_ªmoved
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
, 
oÊ_exp
 *
exp
) {

173 
oÂ_Êow_ªmoved
 *
o‰
;

175 
uöt8_t
 *
±r
;

176 *
buf_Àn
 = 
	`ROUND_UP
(((
oÂ_Êow_ªmoved
Ë-4Ë+ 
msg
->
°©s
->
m©ch
->
Àngth
 ,8);

177 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

179 
o‰
 = (
oÂ_Êow_ªmoved
 *)(*
buf
);

180 
o‰
->
cookõ
 = 
	`ht⁄64
(
msg
->
°©s
->cookie);

181 
o‰
->
¥i‹ôy
 = 
	`ht⁄s
(
msg
->
°©s
->priority);

182 
o‰
->
ªas⁄
 = 
msg
->reason;

183 
o‰
->
èbÀ_id
 = 
msg
->
°©s
->table_id;

184 
o‰
->
duøti⁄_£c
 = 
	`ht⁄l
–
msg
->
°©s
->duration_sec);

185 
o‰
->
duøti⁄_n£c
 = 
	`ht⁄l
–
msg
->
°©s
->duration_nsec);

186 
o‰
->
idÀ_timeout
 = 
	`ht⁄s
–
msg
->
°©s
->idle_timeout);

187 
o‰
->
∑ckë_cou¡
 = 
	`ht⁄64
(
msg
->
°©s
->packet_count);

188 
o‰
->
byã_cou¡
 = 
	`ht⁄64
(
msg
->
°©s
->byte_count);

190 
±r
 = (*
buf
Ë+ ((
oÂ_Êow_ªmoved
) - 4);

192 
	`oÊ_°ru˘s_m©ch_∑ck
(
msg
->
°©s
->
m©ch
, &(
o‰
->m©ch),
±r
, 
exp
);

195 
	}
}

198 
	$oÊ_msg_∑ck_p‹t_°©us
(
oÊ_msg_p‹t_°©us
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

199 
oÂ_p‹t_°©us
 *
°©us
;

201 *
buf_Àn
 = (
oÂ_p‹t_°©us
);

202 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

204 
°©us
 = (
oÂ_p‹t_°©us
 *)(*
buf
);

205 
°©us
->
ªas⁄
 = 
msg
->reason;

206 
	`mem£t
(
°©us
->
∑d
, 0x00, 7);

208 
	`oÊ_°ru˘s_p‹t_∑ck
(
msg
->
desc
, &(
°©us
->desc));

211 
	}
}

214 
	$oÊ_msg_∑ck_∑ckë_out
(
oÊ_msg_∑ckë_out
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
, 
oÊ_exp
 *
exp
) {

215 
oÂ_∑ckë_out
 *
∑ckë_out
;

216 
size_t
 
a˘_Àn
;

217 
uöt8_t
 *
±r
;

218 
i
;

220 
a˘_Àn
 = 
	`oÊ_a˘i⁄s_oÂ_tŸÆ_Àn
(
msg
->
a˘i⁄s
, msg->
a˘i⁄s_num
, 
exp
);

222 *
buf_Àn
 = (
oÂ_∑ckë_out
Ë+ 
a˘_Àn
 + 
msg
->
d©a_Àngth
;

223 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

225 
∑ckë_out
 = (
oÂ_∑ckë_out
 *)(*
buf
);

226 
∑ckë_out
->
buf„r_id
 = 
	`ht⁄l
(
msg
->buffer_id);

227 
∑ckë_out
->
ö_p‹t
 = 
	`ht⁄l
(
msg
->in_port);

228 
∑ckë_out
->
a˘i⁄s_Àn
 = 
	`ht⁄s
(
a˘_Àn
);

229 
	`mem£t
(
∑ckë_out
->
∑d
, 0x00, 6);

231 
±r
 = (*
buf
Ë+ (
oÂ_∑ckë_out
);

233 
i
=0; i<
msg
->
a˘i⁄s_num
; i++) {

234 
±r
 +
	`oÊ_a˘i⁄s_∑ck
(
msg
->
a˘i⁄s
[
i
], (
oÂ_a˘i⁄_hódî
 *Ìå,*
buf
, 
exp
);

237 i‡(
msg
->
d©a_Àngth
 > 0) {

238 
	`mem˝y
(
±r
, 
msg
->
d©a
, msg->
d©a_Àngth
);

242 
	}
}

245 
	$oÊ_msg_∑ck_Êow_mod
(
oÊ_msg_Êow_mod
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
, 
oÊ_exp
 *
exp
) {

246 
oÂ_Êow_mod
 *
Êow_mod
;

247 
uöt8_t
 *
±r
;

249 
i
;

251 *
buf_Àn
 = 
	`ROUND_UP
((
oÂ_Êow_mod
)- 4 + 
msg
->
m©ch
->
Àngth
,8) +

252 
	`oÊ_°ru˘s_ö°ru˘i⁄s_oÂ_tŸÆ_Àn
(
msg
->
ö°ru˘i⁄s
, msg->
ö°ru˘i⁄s_num
, 
exp
);

254 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

255 
Êow_mod
 = (
oÂ_Êow_mod
 *)(*
buf
);

256 
Êow_mod
->
cookõ
 = 
	`ht⁄64
(
msg
->cookie);

257 
Êow_mod
->
cookõ_mask
 = 
	`ht⁄64
(
msg
->cookie_mask);

258 
Êow_mod
->
èbÀ_id
 = 
msg
->table_id;

259 
Êow_mod
->
comm™d
 = 
msg
->command;

260 
Êow_mod
->
idÀ_timeout
 = 
	`ht⁄s
–
msg
->idle_timeout);

261 
Êow_mod
->
h¨d_timeout
 = 
	`ht⁄s
–
msg
->hard_timeout);

262 
Êow_mod
->
¥i‹ôy
 = 
	`ht⁄s
–
msg
->priority);

263 
Êow_mod
->
buf„r_id
 = 
	`ht⁄l
–
msg
->buffer_id);

264 
Êow_mod
->
out_p‹t
 = 
	`ht⁄l
–
msg
->out_port);

265 
Êow_mod
->
out_group
 = 
	`ht⁄l
–
msg
->out_group);

266 
Êow_mod
->
Êags
 = 
	`ht⁄s
–
msg
->flags);

267 
	`mem£t
(
Êow_mod
->
∑d
, 0x00, 2);

269 
±r
 = (*
buf
Ë+ (
oÂ_Êow_mod
)- 4;

270 
	`oÊ_°ru˘s_m©ch_∑ck
(
msg
->
m©ch
, &(
Êow_mod
->m©ch), 
±r
, 
exp
);

272 
±r
 = (*
buf
Ë+ 
	`ROUND_UP
((
oÂ_Êow_mod
)- 4 + 
msg
->
m©ch
->
Àngth
,8);

273 
i
=0; i<
msg
->
ö°ru˘i⁄s_num
; i++) {

274 
±r
 +
	`oÊ_°ru˘s_ö°ru˘i⁄s_∑ck
(
msg
->
ö°ru˘i⁄s
[
i
], (
oÂ_ö°ru˘i⁄
 *Ìå, 
exp
);

277 
	}
}

280 
	$oÊ_msg_∑ck_group_mod
(
oÊ_msg_group_mod
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
, 
oÊ_exp
 *
exp
) {

281 
oÂ_group_mod
 *
group_mod
;

282 
uöt8_t
 *
±r
;

283 
i
;

285 *
buf_Àn
 = (
oÂ_group_mod
Ë+ 
	`oÊ_°ru˘s_buckës_oÂ_tŸÆ_Àn
(
msg
->
buckës
, msg->
buckës_num
, 
exp
);;

286 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

288 
group_mod
 = (
oÂ_group_mod
 *)(*
buf
);

289 
group_mod
->
comm™d
 = 
	`ht⁄s
(
msg
->command);

290 
group_mod
->
ty≥
 = 
msg
->type;

291 
group_mod
->
∑d
 = 0x00;

292 
group_mod
->
group_id
 = 
	`ht⁄l
(
msg
->group_id);

294 
±r
 = (*
buf
Ë+ (
oÂ_group_mod
);

296 
i
=0; i<
msg
->
buckës_num
; i++) {

297 
±r
 +
	`oÊ_°ru˘s_buckë_∑ck
(
msg
->
buckës
[
i
], (
oÂ_buckë
 *Ìå, 
exp
);

301 
	}
}

304 
	$oÊ_msg_∑ck_p‹t_mod
(
oÊ_msg_p‹t_mod
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

305 
oÂ_p‹t_mod
 *
p‹t_mod
;

307 *
buf_Àn
 = (
oÂ_p‹t_mod
);

308 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

310 
p‹t_mod
 = (
oÂ_p‹t_mod
 *)(*
buf
);

311 
p‹t_mod
->
p‹t_no
 = 
	`ht⁄l
(
msg
->port_no);

312 
	`mem£t
(
p‹t_mod
->
∑d
, 0x00, 4);

313 
	`mem˝y
(&(
p‹t_mod
->
hw_addr
), &(
msg
->hw_addr), 
OFP_ETH_ALEN
);

314 
	`mem£t
(
p‹t_mod
->
∑d2
, 0x00, 2);

315 
p‹t_mod
->
c⁄fig
 = 
	`ht⁄l
(
msg
->config);

316 
p‹t_mod
->
mask
 = 
	`ht⁄l
(
msg
->mask);

317 
p‹t_mod
->
advîti£
 = 
	`ht⁄l
(
msg
->advertise);

318 
	`mem£t
(
p‹t_mod
->
∑d3
, 0x00, 4);

321 
	}
}

324 
	$oÊ_msg_∑ck_èbÀ_mod
(
oÊ_msg_èbÀ_mod
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

325 
oÂ_èbÀ_mod
 *
èbÀ_mod
;

327 *
buf_Àn
 = (
oÂ_èbÀ_mod
);

328 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

330 
èbÀ_mod
 = (
oÂ_èbÀ_mod
 *)(*
buf
);

331 
èbÀ_mod
->
èbÀ_id
 = 
msg
->table_id;

332 
	`mem£t
(
èbÀ_mod
->
∑d
, 0x00, 3);

333 
èbÀ_mod
->
c⁄fig
 = 
	`ht⁄l
(
msg
->config);

336 
	}
}

339 
	$oÊ_msg_∑ck_mëî_mod
(
oÊ_msg_mëî_mod
 *
msg
, 
uöt8_t
 ** 
buf
, 
size_t
 *
buf_Àn
){

340 
oÂ_mëî_mod
 *
mëî_mod
;

341 
uöt8_t
 *
±r
;

342 
i
;

344 *
buf_Àn
 = (
oÂ_mëî_mod
Ë+ 
	`oÊ_°ru˘s_mëî_b™ds_oÂ_tŸÆ_Àn
(
msg
->
b™ds
, msg->
mëî_b™ds_num
);

345 *
buf
 = 
	`mÆloc
(*
buf_Àn
);

347 
mëî_mod
 = (
oÂ_mëî_mod
*Ë(*
buf
);

348 
mëî_mod
->
comm™d
 = 
	`ht⁄s
(
msg
->command);

349 
mëî_mod
->
Êags
 = 
	`ht⁄s
(
msg
->flags);

350 
mëî_mod
->
mëî_id
 = 
	`¡ohl
(
msg
->meter_id);

352 
±r
 = (*
buf
Ë+ (
oÂ_mëî_mod
);

353 
i
=0; i < 
msg
->
mëî_b™ds_num
; i++) {

354 
±r
 +
	`oÊ_°ru˘s_mëî_b™d_∑ck
(
msg
->
b™ds
[
i
], (
oÂ_mëî_b™d_hódî
 *)Ötr);

357 
	}
}

360 
	$oÊ_msg_∑ck_async_c⁄fig
(
oÊ_msg_async_c⁄fig
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
){

361 
oÂ_async_c⁄fig
 *
ac
;

362 
i
;

363 *
buf_Àn
 = (
oÂ_async_c⁄fig
);

364 *
buf
 = 
	`mÆloc
(*
buf_Àn
);

366 
ac
 = (
oÂ_async_c⁄fig
*)(*
buf
);

367 
i
 = 0; i < 2; i++){

368 
ac
->
∑ckë_ö_mask
[
i
] = 
msg
->
c⁄fig
->packet_in_mask[i];

369 
ac
->
p‹t_°©us_mask
[
i
] = 
msg
->
c⁄fig
->port_status_mask[i];

370 
ac
->
Êow_ªmoved_mask
[
i
] = 
msg
->
c⁄fig
->flow_removed_mask[i];

373 
	}
}

376 
	$oÊ_msg_∑ck_mu…ù¨t_ªque°_Êow
(
oÊ_msg_mu…ù¨t_ªque°_Êow
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
, 
oÊ_exp
 *
exp
) {

378 
oÂ_mu…ù¨t_ªque°
 *
ªq
;

379 
oÂ_Êow_°©s_ªque°
 *
°©s
;

380 
uöt8_t
 *
±r
;

382 *
buf_Àn
 = (
oÂ_mu…ù¨t_ªque°
Ë+ (
oÂ_Êow_°©s_ªque°
Ë+ 
msg
->
m©ch
->
Àngth
;

383 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

385 
ªq
 = (
oÂ_mu…ù¨t_ªque°
 *)(*
buf
);

386 
°©s
 = (
oÂ_Êow_°©s_ªque°
 *)
ªq
->
body
;

387 
°©s
->
èbÀ_id
 = 
msg
->table_id;

388 
	`mem£t
(
°©s
->
∑d
, 0x00, 3);

389 
°©s
->
out_p‹t
 = 
	`ht⁄l
–
msg
->out_port);

390 
°©s
->
out_group
 = 
	`ht⁄l
–
msg
->out_group);

391 
	`mem£t
(
°©s
->
∑d2
, 0x00, 4);

392 
°©s
->
cookõ
 = 
	`ht⁄64
(
msg
->cookie);

393 
°©s
->
cookõ_mask
 = 
	`ht⁄64
(
msg
->cookie_mask);

395 
±r
 = (*
buf
Ë+ (
oÂ_mu…ù¨t_ªque°
Ë+ (
oÂ_Êow_°©s_ªque°
);

396 
	`oÊ_°ru˘s_m©ch_∑ck
(
msg
->
m©ch
, &(
°©s
->m©ch),
±r
, 
exp
);

399 
	}
}

402 
	$oÊ_msg_∑ck_mu…ù¨t_ªque°_p‹t
(
oÊ_msg_mu…ù¨t_ªque°_p‹t
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

403 
oÂ_mu…ù¨t_ªque°
 *
ªq
;

404 
oÂ_p‹t_°©s_ªque°
 *
°©s
;

406 *
buf_Àn
 = (
oÂ_mu…ù¨t_ªque°
Ë+ (
oÂ_p‹t_°©s_ªque°
);

407 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

409 
ªq
 = (
oÂ_mu…ù¨t_ªque°
 *)(*
buf
);

410 
°©s
 = (
oÂ_p‹t_°©s_ªque°
 *)
ªq
->
body
;

411 
°©s
->
p‹t_no
 = 
	`ht⁄l
(
msg
->port_no);

412 
	`mem£t
(
°©s
->
∑d
, 0x00, 4);

415 
	}
}

418 
	$oÊ_msg_∑ck_mu…ù¨t_ªque°_queue
(
oÊ_msg_mu…ù¨t_ªque°_queue
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

419 
oÂ_mu…ù¨t_ªque°
 *
ªq
;

420 
oÂ_queue_°©s_ªque°
 *
°©s
;

422 *
buf_Àn
 = (
oÂ_mu…ù¨t_ªque°
Ë+ (
oÂ_queue_°©s_ªque°
);

423 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

425 
ªq
 = (
oÂ_mu…ù¨t_ªque°
 *)(*
buf
);

426 
°©s
 = (
oÂ_queue_°©s_ªque°
 *)
ªq
->
body
;

427 
°©s
->
p‹t_no
 = 
	`ht⁄l
(
msg
->port_no);

428 
°©s
->
queue_id
 = 
	`ht⁄l
(
msg
->queue_id);

431 
	}
}

434 
	$oÊ_msg_∑ck_mu…ù¨t_ªque°_group
(
oÊ_msg_mu…ù¨t_ªque°_group
 *
msg
 
UNUSED
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

435 
oÂ_mu…ù¨t_ªque°
 *
ªq
;

436 
oÂ_group_°©s_ªque°
 *
°©s
;

438 *
buf_Àn
 = (
oÂ_mu…ù¨t_ªque°
Ë+ (
oÂ_group_°©s_ªque°
);

439 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

441 
ªq
 = (
oÂ_mu…ù¨t_ªque°
 *)(*
buf
);

442 
°©s
 = (
oÂ_group_°©s_ªque°
 *)
ªq
->
body
;

443 
°©s
->
group_id
 = 
	`ht⁄l
(
msg
->group_id);

444 
	`mem£t
(
°©s
->
∑d
, 0x00, 4);

447 
	}
}

450 
	$oÊ_msg_∑ck_mu…ù¨t_ªque°_èbÀ_„©uªs
(
oÊ_msg_mu…ù¨t_ªque°_èbÀ_„©uªs
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
, 
oÊ_exp
 *
exp
) {

451 
oÂ_mu…ù¨t_ªque°
 *
ªq
;

452 
size_t
 
i
, 
„©uªs_Àn
;

453 
uöt8_t
 *
d©a
;

455 
„©uªs_Àn
 = 
	`oÊ_°ru˘s_èbÀ_„©uªs_oÂ_tŸÆ_Àn
(
msg
->
èbÀ_„©uªs
, msg->
èbÀs_num
, 
exp
);

456 *
buf_Àn
 = (
oÂ_mu…ù¨t_ªque°
Ë+ 
„©uªs_Àn
;

457 *
buf
 = (
uöt8_t
*Ë
	`mÆloc
(*
buf_Àn
);

459 
ªq
 = (
oÂ_mu…ù¨t_ªque°
*Ë(*
buf
);

461 i‡(
„©uªs_Àn
){

462 
d©a
 = (
uöt8_t
*Ë
ªq
->
body
;

463 
i
 = 0; i < 
msg
->
èbÀs_num
; i++ ){

464 
d©a
 +
	`oÊ_°ru˘s_èbÀ_„©uªs_∑ck
(
msg
->
èbÀ_„©uªs
[
i
], (
oÂ_èbÀ_„©uªs
*Ëd©a, d©a, 
exp
);

468 
	}
}

471 
	$oÊ_msg_∑ck_mëî_mu…ù¨t_ªque°
(
oÊ_msg_mu…ù¨t_mëî_ªque°
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
){

473 
oÂ_mu…ù¨t_ªque°
 *
ªq
;

474 
oÂ_mëî_mu…ù¨t_ªque°
 *
°©s
;

476 *
buf_Àn
 = (
oÂ_mu…ù¨t_ªque°
Ë+ (
oÂ_mëî_mu…ù¨t_ªque°
);

477 *
buf
 = (
uöt8_t
*Ë
	`mÆloc
(*
buf_Àn
);

479 
ªq
 = (
oÂ_mu…ù¨t_ªque°
*Ë(*
buf
);

480 
°©s
 = (
oÂ_mëî_mu…ù¨t_ªque°
*Ë
ªq
->
body
;

481 
°©s
->
mëî_id
 = 
	`ht⁄l
(
msg
->meter_id);

482 
	`mem£t
(
°©s
->
∑d
, 0x00, 4);

485 
	}
}

488 
	$oÊ_msg_∑ck_mu…ù¨t_ªque°_em±y
(
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
msg
 
UNUSED
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

490 *
buf_Àn
 = (
oÂ_mu…ù¨t_ªque°
);

491 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

494 
	}
}

498 
	$oÊ_msg_∑ck_mu…ù¨t_ªque°
(
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
, 
oÊ_exp
 *
exp
) {

499 
oÂ_mu…ù¨t_ªque°
 *
ªq
;

500 
îr‹
 = 0;

502 
msg
->
ty≥
) {

503 
OFPMP_DESC
: {

504 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ªque°_em±y
(
msg
, 
buf
, 
buf_Àn
);

507 
OFPMP_FLOW
:

508 
OFPMP_AGGREGATE
: {

509 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ªque°_Êow
((
oÊ_msg_mu…ù¨t_ªque°_Êow
 *)
msg
, 
buf
, 
buf_Àn
, 
exp
);

512 
OFPMP_TABLE
: {

513 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ªque°_em±y
(
msg
, 
buf
, 
buf_Àn
);

516 
OFPMP_PORT_STATS
: {

517 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ªque°_p‹t
((
oÊ_msg_mu…ù¨t_ªque°_p‹t
 *)
msg
, 
buf
, 
buf_Àn
);

520 
OFPMP_QUEUE
: {

521 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ªque°_queue
((
oÊ_msg_mu…ù¨t_ªque°_queue
 *)
msg
, 
buf
, 
buf_Àn
);

524 
OFPMP_GROUP
: {

525 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ªque°_group
((
oÊ_msg_mu…ù¨t_ªque°_group
 *)
msg
, 
buf
, 
buf_Àn
);

528 
OFPMP_GROUP_DESC
: {

529 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ªque°_em±y
(
msg
, 
buf
, 
buf_Àn
);

532 
OFPMP_GROUP_FEATURES
: {

533 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ªque°_em±y
(
msg
, 
buf
, 
buf_Àn
);

536 
OFPMP_METER
:

537 
OFPMP_METER_CONFIG
:{

538 
îr‹
 = 
	`oÊ_msg_∑ck_mëî_mu…ù¨t_ªque°
((
oÊ_msg_mu…ù¨t_mëî_ªque°
*)
msg
, 
buf
, 
buf_Àn
);

541 
OFPMP_METER_FEATURES
:{

542 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ªque°_em±y
(
msg
, 
buf
, 
buf_Àn
);

545 
OFPMP_TABLE_FEATURES
:{

546 
	`oÊ_msg_∑ck_mu…ù¨t_ªque°_èbÀ_„©uªs
((
oÊ_msg_mu…ù¨t_ªque°_èbÀ_„©uªs
*)
msg
, 
buf
, 
buf_Àn
,
exp
);

549 
OFPMP_PORT_DESC
:{

550 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ªque°_em±y
(
msg
, 
buf
, 
buf_Àn
);

553 
OFPMP_EXPERIMENTER
: {

554 i‡(
exp
 =
NULL
 ||Éxp->
°©s
 =NULL ||Éxp->°©s->
ªq_∑ck
 == NULL) {

555 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÖackÉxperimenter statÑeq, butÇo callback was given.");

556 
îr‹
 = -1;

558 
îr‹
 = 
exp
->
°©s
->
	`ªq_∑ck
(
msg
, 
buf
, 
buf_Àn
);

563 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÖack unknownÉxperimenter statÑeqÅype.");

564 
îr‹
 = -1;

568 i‡(
îr‹
) {

569  
îr‹
;

572 
ªq
 = (
oÂ_mu…ù¨t_ªque°
 *)(*
buf
);

574 
ªq
->
ty≥
 = 
	`ht⁄s
(
msg
->type);

575 
ªq
->
Êags
 = 
	`ht⁄s
(
msg
->flags);

576 
	`mem£t
(
ªq
->
∑d
, 0x00, 4);

579 
	}
}

583 
	$oÊ_msg_∑ck_mu…ù¨t_ª∂y_desc
(
oÊ_msg_ª∂y_desc
 *
msg
 
UNUSED
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

584 
oÂ_mu…ù¨t_ª∂y
 *
ªq
;

585 
oÂ_desc
 *
°©s
;

587 *
buf_Àn
 = (
oÂ_mu…ù¨t_ª∂y
Ë+ (
oÂ_desc
);

588 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

590 
ªq
 = (
oÂ_mu…ù¨t_ª∂y
 *)(*
buf
);

591 
°©s
 = (
oÂ_desc
 *)
ªq
->
body
;

592 
	`mem£t
(
°©s
->
m‰_desc
, 0, 
DESC_STR_LEN
);

593 
	`mem£t
(
°©s
->
hw_desc
, 0, 
DESC_STR_LEN
);

594 
	`mem£t
(
°©s
->
sw_desc
, 0, 
DESC_STR_LEN
);

595 
	`mem£t
(
°©s
->
£rül_num
, 0, 
SERIAL_NUM_LEN
);

596 
	`mem£t
(
°©s
->
dp_desc
, 0, 
DESC_STR_LEN
);

597 
	`mem˝y
(
°©s
->
m‰_desc
, 
msg
->m‰_desc, 
DESC_STR_LEN
);

598 
	`mem˝y
(
°©s
->
hw_desc
, 
msg
->hw_desc, 
DESC_STR_LEN
);

599 
	`mem˝y
(
°©s
->
sw_desc
, 
msg
->sw_desc, 
DESC_STR_LEN
);

600 
	`mem˝y
(
°©s
->
£rül_num
, 
msg
->£rül_num, 
SERIAL_NUM_LEN
);

601 
	`mem˝y
(
°©s
->
dp_desc
, 
msg
->dp_desc, 
DESC_STR_LEN
);

604 
	}
}

607 
	$oÊ_msg_∑ck_mu…ù¨t_ª∂y_Êow
(
oÊ_msg_mu…ù¨t_ª∂y_Êow
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
, 
oÊ_exp
 *
exp
) {

608 
oÂ_mu…ù¨t_ª∂y
 *
ª•
;

609 
size_t
 
i
;

610 
uöt8_t
 * 
d©a
;

612 *
buf_Àn
 = (
oÂ_mu…ù¨t_ª∂y
Ë+ 
	`oÊ_°ru˘s_Êow_°©s_oÂ_tŸÆ_Àn
(
msg
->
°©s
, msg->
°©s_num
, 
exp
);

613 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

614 
ª•
 = (
oÂ_mu…ù¨t_ª∂y
 *)(*
buf
);

615 
d©a
 = (
uöt8_t
*Ë
ª•
->
body
;

616 
i
=0; i<
msg
->
°©s_num
; i++) {

617 
d©a
 +
	`oÊ_°ru˘s_Êow_°©s_∑ck
(
msg
->
°©s
[
i
], d©a, 
exp
);

620 
	}
}

623 
	$oÊ_msg_∑ck_mu…ù¨t_ª∂y_aggªg©e
(
oÊ_msg_mu…ù¨t_ª∂y_aggªg©e
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

624 
oÂ_mu…ù¨t_ª∂y
 *
ª•
;

625 
oÂ_aggªg©e_°©s_ª∂y
 *
°©s
;

627 *
buf_Àn
 = (
oÂ_mu…ù¨t_ª∂y
Ë+ (
oÂ_aggªg©e_°©s_ª∂y
);

628 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

630 
ª•
 = (
oÂ_mu…ù¨t_ª∂y
 *)(*
buf
);

631 
°©s
 = (
oÂ_aggªg©e_°©s_ª∂y
 *)
ª•
->
body
;

632 
°©s
->
∑ckë_cou¡
 = 
	`ht⁄64
(
msg
->packet_count);

633 
°©s
->
byã_cou¡
 = 
	`ht⁄64
(
msg
->byte_count);

634 
°©s
->
Êow_cou¡
 = 
	`ht⁄l
–
msg
->flow_count);

635 
	`mem£t
(
°©s
->
∑d
, 0x00, 4);

638 
	}
}

641 
	$oÊ_msg_∑ck_mu…ù¨t_ª∂y_èbÀ
(
oÊ_msg_mu…ù¨t_ª∂y_èbÀ
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

642 
oÂ_mu…ù¨t_ª∂y
 *
ª•
;

643 
size_t
 
i
;

644 
uöt8_t
 *
d©a
;

646 *
buf_Àn
 = (
oÂ_mu…ù¨t_ª∂y
Ë+ 
msg
->
°©s_num
 * (
oÂ_èbÀ_°©s
);

647 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

649 
ª•
 = (
oÂ_mu…ù¨t_ª∂y
 *)(*
buf
);

650 
d©a
 = (
uöt8_t
 *)
ª•
->
body
;

652 
i
=0; i<
msg
->
°©s_num
; i++) {

653 
d©a
 +
	`oÊ_°ru˘s_èbÀ_°©s_∑ck
(
msg
->
°©s
[
i
], (
oÂ_èbÀ_°©s
 *)data);

656 
	}
}

659 
	$oÊ_msg_∑ck_mu…ù¨t_ª∂y_p‹t
(
oÊ_msg_mu…ù¨t_ª∂y_p‹t
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

660 
oÂ_mu…ù¨t_ª∂y
 *
ª•
;

661 
size_t
 
i
;

662 
uöt8_t
 *
d©a
;

664 *
buf_Àn
 = (
oÂ_mu…ù¨t_ª∂y
Ë+ 
msg
->
°©s_num
 * (
oÂ_p‹t_°©s
);

665 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

667 
ª•
 = (
oÂ_mu…ù¨t_ª∂y
 *)(*
buf
);

668 
d©a
 = (
uöt8_t
 *)
ª•
->
body
;

670 
i
=0; i<
msg
->
°©s_num
; i++) {

671 
d©a
 +
	`oÊ_°ru˘s_p‹t_°©s_∑ck
(
msg
->
°©s
[
i
], (
oÂ_p‹t_°©s
 *)data);

674 
	}
}

678 
	$oÊ_msg_∑ck_mu…ù¨t_ª∂y_queue
(
oÊ_msg_mu…ù¨t_ª∂y_queue
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

679 
oÂ_mu…ù¨t_ª∂y
 *
ª•
;

680 
size_t
 
i
;

681 
uöt8_t
 *
d©a
;

683 *
buf_Àn
 = (
oÂ_mu…ù¨t_ª∂y
Ë+ 
msg
->
°©s_num
 * (
oÂ_queue_°©s
);

684 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

686 
ª•
 = (
oÂ_mu…ù¨t_ª∂y
 *)(*
buf
);

687 
d©a
 = (
uöt8_t
 *)
ª•
->
body
;

689 
i
=0; i<
msg
->
°©s_num
; i++) {

690 
d©a
 +
	`oÊ_°ru˘s_queue_°©s_∑ck
(
msg
->
°©s
[
i
], (
oÂ_queue_°©s
 *)data);

693 
	}
}

696 
	$oÊ_msg_∑ck_mu…ù¨t_ª∂y_group
(
oÊ_msg_mu…ù¨t_ª∂y_group
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

697 
oÂ_mu…ù¨t_ª∂y
 *
ª•
;

698 
size_t
 
i
;

699 
uöt8_t
 *
d©a
;

701 *
buf_Àn
 = (
oÂ_mu…ù¨t_ª∂y
Ë+ 
	`oÊ_°ru˘s_group_°©s_oÂ_tŸÆ_Àn
(
msg
->
°©s
, msg->
°©s_num
);

702 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

704 
ª•
 = (
oÂ_mu…ù¨t_ª∂y
 *)(*
buf
);

705 
d©a
 = (
uöt8_t
 *)
ª•
->
body
;

707 
i
=0; i<
msg
->
°©s_num
; i++) {

708 
d©a
 +
	`oÊ_°ru˘s_group_°©s_∑ck
(
msg
->
°©s
[
i
], (
oÂ_group_°©s
 *)data);

711 
	}
}

714 
	$oÊ_msg_∑ck_mu…ù¨t_ª∂y_group_desc
(
oÊ_msg_mu…ù¨t_ª∂y_group_desc
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
, 
oÊ_exp
 *
exp
) {

715 
oÂ_mu…ù¨t_ª∂y
 *
ª•
;

716 
uöt8_t
 *
d©a
;

717 
size_t
 
i
;

719 *
buf_Àn
 = (
oÂ_mu…ù¨t_ª∂y
Ë+ 
	`oÊ_°ru˘s_group_desc_°©s_oÂ_tŸÆ_Àn
(
msg
->
°©s
, msg->
°©s_num
, 
exp
);

720 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

722 
ª•
 = (
oÂ_mu…ù¨t_ª∂y
 *)(*
buf
);

723 
d©a
 = (
uöt8_t
 *)
ª•
->
body
;

725 
i
=0; i<
msg
->
°©s_num
; i++) {

726 
d©a
 +
	`oÊ_°ru˘s_group_desc_°©s_∑ck
(
msg
->
°©s
[
i
], (
oÂ_group_desc_°©s
 *)d©a, 
exp
);

730 
	}
}

733 
	$oÊ_msg_∑ck_mu…ù¨t_ª∂y_group_„©uªs
(
oÊ_msg_mu…ù¨t_ª∂y_group_„©uªs
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

734 
oÂ_mu…ù¨t_ª∂y
 *
ª•
;

735 
oÂ_group_„©uªs_°©s
 *
°©s
;

736 
i
;

737 *
buf_Àn
 = (
oÂ_mu…ù¨t_ª∂y
Ë+ (
oÂ_group_„©uªs_°©s
);

738 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

740 
ª•
 = (
oÂ_mu…ù¨t_ª∂y
 *)(*
buf
);

741 
°©s
 = (
oÂ_group_„©uªs_°©s
 *)
ª•
->
body
;

742 
°©s
->
ty≥s
 = 
	`ht⁄l
(
msg
->types);

743 
°©s
->
ˇ∑bûôõs
 = 
	`ht⁄l
(
msg
->capabilities);

744 
i
 = 0; i < 4; i++){

745 
°©s
->
max_groups
[
i
] = 
	`ht⁄l
(
msg
->max_groups[i]);

746 
°©s
->
a˘i⁄s
[
i
] = 
	`ht⁄l
(
msg
->actions[i]);

750 
	}
}

753 
	$oÊ_msg_∑ck_mu…ù¨t_ª∂y_èbÀ_„©uªs
(
oÊ_msg_mu…ù¨t_ª∂y_èbÀ_„©uªs
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
, 
oÊ_exp
 *
exp
) {

754 
oÂ_mu…ù¨t_ª∂y
 *
ª•
;

755 
size_t
 
i
, 
„©uªs_Àn
;

756 
uöt8_t
 *
d©a
;

758 
„©uªs_Àn
 = 
	`oÊ_°ru˘s_èbÀ_„©uªs_oÂ_tŸÆ_Àn
(
msg
->
èbÀ_„©uªs
, msg->
èbÀs_num
, 
exp
);

759 *
buf_Àn
 = (
oÂ_mu…ù¨t_ª∂y
Ë+ 
„©uªs_Àn
;

760 *
buf
 = (
uöt8_t
*Ë
	`mÆloc
(*
buf_Àn
);

762 
ª•
 = (
oÂ_mu…ù¨t_ª∂y
*Ë(*
buf
);

763 i‡(
„©uªs_Àn
){

764 
d©a
 = (
uöt8_t
*Ë
ª•
->
body
;

765 
i
 = 0; i < 
msg
->
èbÀs_num
; i++ ){

766 
d©a
 +
	`oÊ_°ru˘s_èbÀ_„©uªs_∑ck
(
msg
->
èbÀ_„©uªs
[
i
], (
oÂ_èbÀ_„©uªs
*Ëd©a, d©a, 
exp
);

770 
	}
}

773 
	$oÊ_msg_∑ck_mu…ù¨t_ª∂y_mëî_°©s
(
oÊ_msg_mu…ù¨t_ª∂y_mëî
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

774 
oÂ_mu…ù¨t_ª∂y
 *
ª•
;

775 
size_t
 
i
;

776 
uöt8_t
 *
d©a
;

778 *
buf_Àn
 = (
oÂ_mu…ù¨t_ª∂y
Ë+ 
	`oÊ_°ru˘s_mëî_°©s_oÂ_tŸÆ_Àn
(
msg
->
°©s
, msg->
°©s_num
);

779 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

781 
ª•
 = (
oÂ_mu…ù¨t_ª∂y
 *)(*
buf
);

782 
d©a
 = (
uöt8_t
 *)
ª•
->
body
;

784 
i
=0; i<
msg
->
°©s_num
; i++) {

785 
d©a
 +
	`oÊ_°ru˘s_mëî_°©s_∑ck
(
msg
->
°©s
[
i
], (
oÂ_mëî_°©s
 *)data);

788 
	}
}

791 
	$oÊ_msg_∑ck_mu…ù¨t_ª∂y_mëî_c⁄f
(
oÊ_msg_mu…ù¨t_ª∂y_mëî_c⁄f
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

792 
oÂ_mu…ù¨t_ª∂y
 *
ª•
;

793 
size_t
 
i
;

794 
uöt8_t
 *
d©a
;

796 *
buf_Àn
 = (
oÂ_mu…ù¨t_ª∂y
Ë+ 
	`oÊ_°ru˘s_mëî_c⁄f_oÂ_tŸÆ_Àn
(
msg
->
°©s
, msg->
°©s_num
);

797 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

799 
ª•
 = (
oÂ_mu…ù¨t_ª∂y
 *)(*
buf
);

800 
d©a
 = (
uöt8_t
 *)
ª•
->
body
;

802 
i
=0; i<
msg
->
°©s_num
; i++) {

803 
d©a
 +
	`oÊ_°ru˘s_mëî_c⁄f_∑ck
(
msg
->
°©s
[
i
], (
oÂ_mëî_c⁄fig
 *)data, data);

807 
	}
}

811 
	$oÊ_msg_∑ck_mu…ù¨t_ª∂y_p‹t_°©us_desc
(
oÊ_msg_mu…ù¨t_ª∂y_p‹t_desc
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

812 
oÂ_mu…ù¨t_ª∂y
 * 
ª•
;

813 
uöt8_t
 *
d©a
;

814 
size_t
 
i
;

815 *
buf_Àn
 = (
oÂ_mu…ù¨t_ª∂y
Ë+ 
msg
->
°©s_num
 * (
oÂ_p‹t
);

816 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

818 
ª•
 = (
oÂ_mu…ù¨t_ª∂y
 *)(*
buf
);

819 
d©a
 = (
uöt8_t
 *)
ª•
->
body
;

821 
i
 = 0; i < 
msg
->
°©s_num
; i++){

822 
d©a
 +
	`oÊ_°ru˘s_p‹t_∑ck
(
msg
->
°©s
[
i
], (
oÂ_p‹t
 *)data);

826 
	}
}

829 
	$oÊ_msg_∑ck_mu…ù¨t_ª∂y_mëî_„©uªs
(
oÊ_msg_mu…ù¨t_ª∂y_mëî_„©uªs
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

830 
oÂ_mu…ù¨t_ª∂y
 *
ª•
;

831 
oÂ_mëî_„©uªs
 *
„©
;

833 *
buf_Àn
 = (
oÂ_mu…ù¨t_ª∂y
Ë+ (
oÂ_mëî_„©uªs
);

834 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

835 
ª•
 = (
oÂ_mu…ù¨t_ª∂y
 *)(*
buf
);

836 
„©
 = (
oÂ_mëî_„©uªs
 *)
ª•
->
body
;

837 
„©
->
max_mëî
 = 
	`ht⁄l
(
msg
->
„©uªs
->max_meter);

838 
„©
->
b™d_ty≥s
 = 
	`ht⁄l
(
msg
->
„©uªs
->band_types);

839 
„©
->
ˇ∑bûôõs
 = 
	`ht⁄l
(
msg
->
„©uªs
->capabilities);

840 
„©
->
max_b™ds
 = 
msg
->
„©uªs
->max_bands;

841 
„©
->
max_cﬁ‹
 = 
msg
->
„©uªs
->max_color;

842 
	`mem£t
(
„©
->
∑d
, 0x0, 2);

844 
	}
}

848 
	$oÊ_msg_∑ck_mu…ù¨t_ª∂y
(
oÊ_msg_mu…ù¨t_ª∂y_hódî
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
, 
oÊ_exp
 *
exp
) {

849 
oÂ_mu…ù¨t_ª∂y
 *
ª•
;

850 
îr‹
;

852 
msg
->
ty≥
) {

853 
OFPMP_DESC
: {

854 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ª∂y_desc
((
oÊ_msg_ª∂y_desc
 *)
msg
, 
buf
, 
buf_Àn
);

857 
OFPMP_FLOW
: {

858 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ª∂y_Êow
((
oÊ_msg_mu…ù¨t_ª∂y_Êow
 *)
msg
, 
buf
, 
buf_Àn
, 
exp
);

861 
OFPMP_AGGREGATE
: {

862 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ª∂y_aggªg©e
((
oÊ_msg_mu…ù¨t_ª∂y_aggªg©e
 *)
msg
, 
buf
, 
buf_Àn
);

865 
OFPMP_TABLE
: {

866 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ª∂y_èbÀ
((
oÊ_msg_mu…ù¨t_ª∂y_èbÀ
 *)
msg
, 
buf
, 
buf_Àn
);

869 
OFPMP_TABLE_FEATURES
: {

870 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ª∂y_èbÀ_„©uªs
((
oÊ_msg_mu…ù¨t_ª∂y_èbÀ_„©uªs
*)
msg
, 
buf
, 
buf_Àn
, 
exp
);

873 
OFPMP_PORT_STATS
: {

874 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ª∂y_p‹t
((
oÊ_msg_mu…ù¨t_ª∂y_p‹t
 *)
msg
, 
buf
, 
buf_Àn
);

877 
OFPMP_QUEUE
: {

878 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ª∂y_queue
((
oÊ_msg_mu…ù¨t_ª∂y_queue
 *)
msg
, 
buf
, 
buf_Àn
);

881 
OFPMP_GROUP
: {

882 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ª∂y_group
((
oÊ_msg_mu…ù¨t_ª∂y_group
 *)
msg
, 
buf
, 
buf_Àn
);

885 
OFPMP_GROUP_DESC
: {

886 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ª∂y_group_desc
((
oÊ_msg_mu…ù¨t_ª∂y_group_desc
 *)
msg
, 
buf
, 
buf_Àn
, 
exp
);

889 
OFPMP_GROUP_FEATURES
:{

890 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ª∂y_group_„©uªs
((
oÊ_msg_mu…ù¨t_ª∂y_group_„©uªs
 *Ë
msg
, 
buf
, 
buf_Àn
);

893 
OFPMP_METER
:{

894 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ª∂y_mëî_°©s
((
oÊ_msg_mu…ù¨t_ª∂y_mëî
*)
msg
, 
buf
, 
buf_Àn
);

897 
OFPMP_METER_CONFIG
:{

898 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ª∂y_mëî_c⁄f
((
oÊ_msg_mu…ù¨t_ª∂y_mëî_c⁄f
*)
msg
, 
buf
, 
buf_Àn
);

901 
OFPMP_METER_FEATURES
:{

902 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ª∂y_mëî_„©uªs
((
oÊ_msg_mu…ù¨t_ª∂y_mëî_„©uªs
*)
msg
, 
buf
, 
buf_Àn
);

905 
OFPMP_PORT_DESC
:{

906 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ª∂y_p‹t_°©us_desc
((
oÊ_msg_mu…ù¨t_ª∂y_p‹t_desc
*)
msg
, 
buf
, 
buf_Àn
);

909 
OFPMP_EXPERIMENTER
: {

910 i‡(
exp
 =
NULL
 ||Éxp->
°©s
 =NULL ||Éxp->°©s->
ª∂y_∑ck
 == NULL) {

911 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÖackÉxperimenter statÑesp, butÇo callback was given.");

912 
îr‹
 = -1;

914 
îr‹
 = 
exp
->
°©s
->
	`ª∂y_∑ck
(
msg
, 
buf
, 
buf_Àn
);

919 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÖack unknown statÑespÅype.");

920 
îr‹
 = -1;

924 i‡(
îr‹
) {

925  
îr‹
;

927 
ª•
 = (
oÂ_mu…ù¨t_ª∂y
 *)(*
buf
);

928 
ª•
->
ty≥
 = 
	`ht⁄s
(
msg
->type);

929 
ª•
->
Êags
 = 
	`ht⁄s
(
msg
->flags);

930 
	`mem£t
(
ª•
->
∑d
, 0x00, 4);

933 
	}
}

936 
	$oÊ_msg_∑ck_queue_gë_c⁄fig_ªque°
(
oÊ_msg_queue_gë_c⁄fig_ªque°
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

937 
oÂ_queue_gë_c⁄fig_ªque°
 *
ªq
;

939 *
buf_Àn
 = (
oÂ_queue_gë_c⁄fig_ªque°
);

940 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

942 
ªq
 = (
oÂ_queue_gë_c⁄fig_ªque°
 *)(*
buf
);

943 
ªq
->
p‹t
 = 
	`ht⁄l
(
msg
->port);

944 
	`mem£t
(
ªq
->
∑d
, 0x00, 4);

947 
	}
}

950 
	$oÊ_msg_∑ck_queue_gë_c⁄fig_ª∂y
(
oÊ_msg_queue_gë_c⁄fig_ª∂y
 *
msg
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

951 
oÂ_queue_gë_c⁄fig_ª∂y
 *
ª•
;

952 
uöt8_t
 *
d©a
;

953 
size_t
 
i
;

955 *
buf_Àn
 = (
oÂ_queue_gë_c⁄fig_ª∂y
Ë+ 
	`oÊ_°ru˘s_∑ckë_queue_oÂ_tŸÆ_Àn
(
msg
->
queues
, msg->
queues_num
);

956 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

958 
ª•
 = (
oÂ_queue_gë_c⁄fig_ª∂y
 *)(*
buf
);

959 
ª•
->
p‹t
 = 
	`ht⁄l
(
msg
->port);

960 
	`mem£t
(
ª•
->
∑d
, 0x00, 4);

962 
d©a
 = (
uöt8_t
 *)
ª•
->
queues
;

964 
i
=0; i<
msg
->
queues_num
; i++) {

965 
d©a
 +
	`oÊ_°ru˘s_∑ckë_queue_∑ck
(
msg
->
queues
[
i
], (
oÂ_∑ckë_queue
 *)data);

969 
	}
}

972 
	$oÊ_msg_∑ck_em±y
(
oÊ_msg_hódî
 *
msg
 
UNUSED
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
) {

974 *
buf_Àn
 = (
oÂ_hódî
);

975 *
buf
 = (
uöt8_t
 *)
	`mÆloc
(*
buf_Àn
);

977 
	}
}

981 
	$oÊ_msg_∑ck
(
oÊ_msg_hódî
 *
msg
, 
uöt32_t
 
xid
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
, 
oÊ_exp
 *
exp
) {

982 
oÂ_hódî
 *
oh
;

983 
îr‹
 = 0;

984 
msg
->
ty≥
) {

986 
OFPT_HELLO
: {

987 
îr‹
 = 
	`oÊ_msg_∑ck_em±y
(
msg
, 
buf
, 
buf_Àn
);

990 
OFPT_ERROR
: {

991 
îr‹
 = 
	`oÊ_msg_∑ck_îr‹
((
oÊ_msg_îr‹
 *)
msg
, 
buf
, 
buf_Àn
);

994 
OFPT_ECHO_REQUEST
:

995 
OFPT_ECHO_REPLY
: {

996 
îr‹
 = 
	`oÊ_msg_∑ck_echo
((
oÊ_msg_echo
 *)
msg
, 
buf
, 
buf_Àn
);

999 
OFPT_EXPERIMENTER
: {

1000 i‡(
exp
 =
NULL
 ||Éxp->
msg
 =NULL ||Éxp->msg->
∑ck
 == NULL) {

1001 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÖackÉxperimenter msg, butÇo callback was given.");

1002 
îr‹
 = -1;

1004 
îr‹
 = 
exp
->
msg
->
	`∑ck
((
oÊ_msg_ex≥rimíãr
 *)msg, 
buf
, 
buf_Àn
);

1009 
OFPT_FEATURES_REQUEST
: {

1010 
îr‹
 = 
	`oÊ_msg_∑ck_em±y
(
msg
, 
buf
, 
buf_Àn
);

1013 
OFPT_FEATURES_REPLY
: {

1014 
îr‹
 = 
	`oÊ_msg_∑ck_„©uªs_ª∂y
((
oÊ_msg_„©uªs_ª∂y
 *)
msg
, 
buf
, 
buf_Àn
);

1017 
OFPT_GET_CONFIG_REQUEST
: {

1018 
îr‹
 = 
	`oÊ_msg_∑ck_em±y
(
msg
, 
buf
, 
buf_Àn
);

1021 
OFPT_GET_CONFIG_REPLY
: {

1022 
îr‹
 = 
	`oÊ_msg_∑ck_gë_c⁄fig_ª∂y
((
oÊ_msg_gë_c⁄fig_ª∂y
 *)
msg
, 
buf
, 
buf_Àn
);

1025 
OFPT_SET_CONFIG
: {

1026 
îr‹
 = 
	`oÊ_msg_∑ck_£t_c⁄fig
((
oÊ_msg_£t_c⁄fig
 *)
msg
, 
buf
, 
buf_Àn
);

1031 
OFPT_PACKET_IN
: {

1032 
îr‹
 = 
	`oÊ_msg_∑ck_∑ckë_ö
((
oÊ_msg_∑ckë_ö
 *)
msg
, 
buf
, 
buf_Àn
);

1035 
OFPT_FLOW_REMOVED
: {

1036 
îr‹
 = 
	`oÊ_msg_∑ck_Êow_ªmoved
((
oÊ_msg_Êow_ªmoved
 *)
msg
, 
buf
, 
buf_Àn
, 
exp
);

1039 
OFPT_PORT_STATUS
: {

1040 
îr‹
 = 
	`oÊ_msg_∑ck_p‹t_°©us
((
oÊ_msg_p‹t_°©us
 *)
msg
, 
buf
, 
buf_Àn
);

1044 
OFPT_GET_ASYNC_REQUEST
:{

1045 
îr‹
 = 
	`oÊ_msg_∑ck_em±y
(
msg
, 
buf
, 
buf_Àn
);

1048 
OFPT_GET_ASYNC_REPLY
:

1049 
OFPT_SET_ASYNC
:{

1050 
îr‹
 = 
	`oÊ_msg_∑ck_async_c⁄fig
((
oÊ_msg_async_c⁄fig
 *)
msg
, 
buf
, 
buf_Àn
);

1053 
OFPT_PACKET_OUT
: {

1054 
îr‹
 = 
	`oÊ_msg_∑ck_∑ckë_out
((
oÊ_msg_∑ckë_out
 *)
msg
, 
buf
, 
buf_Àn
, 
exp
);

1057 
OFPT_FLOW_MOD
: {

1058 
îr‹
 = 
	`oÊ_msg_∑ck_Êow_mod
((
oÊ_msg_Êow_mod
 *)
msg
, 
buf
, 
buf_Àn
, 
exp
);

1061 
OFPT_GROUP_MOD
: {

1062 
îr‹
 = 
	`oÊ_msg_∑ck_group_mod
((
oÊ_msg_group_mod
 *)
msg
, 
buf
, 
buf_Àn
, 
exp
);

1065 
OFPT_PORT_MOD
: {

1066 
îr‹
 = 
	`oÊ_msg_∑ck_p‹t_mod
((
oÊ_msg_p‹t_mod
 *)
msg
, 
buf
, 
buf_Àn
);

1069 
OFPT_TABLE_MOD
: {

1070 
îr‹
 = 
	`oÊ_msg_∑ck_èbÀ_mod
((
oÊ_msg_èbÀ_mod
 *)
msg
, 
buf
, 
buf_Àn
);

1073 
OFPT_METER_MOD
:{

1074 
îr‹
 = 
	`oÊ_msg_∑ck_mëî_mod
((
oÊ_msg_mëî_mod
 *)
msg
, 
buf
, 
buf_Àn
);

1079 
OFPT_MULTIPART_REQUEST
: {

1080 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ªque°
((
oÊ_msg_mu…ù¨t_ªque°_hódî
 *)
msg
, 
buf
, 
buf_Àn
, 
exp
);

1083 
OFPT_MULTIPART_REPLY
: {

1084 
îr‹
 = 
	`oÊ_msg_∑ck_mu…ù¨t_ª∂y
((
oÊ_msg_mu…ù¨t_ª∂y_hódî
 *)
msg
, 
buf
, 
buf_Àn
, 
exp
);

1089 
OFPT_BARRIER_REQUEST
: {

1090 
îr‹
 = 
	`oÊ_msg_∑ck_em±y
(
msg
, 
buf
, 
buf_Àn
);

1093 
OFPT_BARRIER_REPLY
: {

1094 
îr‹
 = 
	`oÊ_msg_∑ck_em±y
(
msg
, 
buf
, 
buf_Àn
);

1099 
OFPT_QUEUE_GET_CONFIG_REQUEST
: {

1100 
îr‹
 = 
	`oÊ_msg_∑ck_queue_gë_c⁄fig_ªque°
((
oÊ_msg_queue_gë_c⁄fig_ªque°
 *)
msg
, 
buf
, 
buf_Àn
);

1103 
OFPT_QUEUE_GET_CONFIG_REPLY
: {

1104 
îr‹
 = 
	`oÊ_msg_∑ck_queue_gë_c⁄fig_ª∂y
((
oÊ_msg_queue_gë_c⁄fig_ª∂y
 *)
msg
, 
buf
, 
buf_Àn
);

1107 
OFPT_ROLE_REQUEST
:

1108 
OFPT_ROLE_REPLY
:

1109 
îr‹
 = 
	`oÊ_msg_∑ck_rﬁe_ªque°
((
oÊ_msg_rﬁe_ªque°
*)
msg
, 
buf
, 
buf_Àn
);

1112 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÖack unknown messageÅype.");

1113 
îr‹
 = -1;

1117 i‡(
îr‹
) {

1118  
îr‹
;

1122 
oh
 = (
oÂ_hódî
 *)(*
buf
);

1123 
oh
->
vîsi⁄
 = 
OFP_VERSION
;

1124 
oh
->
ty≥
 = 
msg
->type;

1125 
oh
->
Àngth
 = 
	`ht⁄s
(*
buf_Àn
);

1126 
oh
->
xid
 = 
	`ht⁄l
(xid);

1129 
	}
}

	@oflib/ofl-messages-print.c

32 
	~<°dboﬁ.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<°dio.h
>

36 
	~<˘y≥.h
>

37 
	~<öây≥s.h
>

39 
	~"oÊ.h
"

40 
	~"oÊ-a˘i⁄s.h
"

41 
	~"oÊ-mesßges.h
"

42 
	~"oÊ-°ru˘s.h
"

43 
	~"oÊ-¥öt.h
"

44 
	~"oÊ-log.h
"

45 
	~"../ö˛ude/›íÊow/›íÊow.h
"

49 
	#ETH_ADDR_FMT
 \

50 "%02"
PRIx8
":%02"PRIx8":%02"PRIx8":%02"PRIx8":%02"PRIx8":%02"
	)
PRIx8

51 
	#ETH_ADDR_ARGS
(
ó
) \

52 (
ó
)[0], (ó)[1], (ó)[2], (ó)[3], (ó)[4], (ó)[5]

	)

55 
	#LOG_MODULE
 
oÊ_msg_d


	)

56 
	$OFL_LOG_INIT
(
LOG_MODULE
)

61 
	$oÊ_msg_¥öt_îr‹
(
oÊ_msg_îr‹
 *
msg
, 
FILE
 *
°ªam
) {

62 
	`Ârötf
(
°ªam
, "{type=\"");

63 
	`oÊ_îr‹_ty≥_¥öt
(
°ªam
, 
msg
->
ty≥
);

64 
	`Ârötf
(
°ªam
, "\", code=\"");

65 
	`oÊ_îr‹_code_¥öt
(
°ªam
, 
msg
->
ty≥
, msg->
code
);

66 
	`Ârötf
(
°ªam
, "\", dÀn=\"%zu\"}", 
msg
->
d©a_Àngth
);

67 
	}
}

70 
	$oÊ_msg_¥öt_echo
(
oÊ_msg_echo
 *
msg
, 
FILE
 *
°ªam
) {

71 
	`Ârötf
(
°ªam
, "{dÀn=\"%zu\"}", 
msg
->
d©a_Àngth
);

72 
	}
}

75 
	$oÊ_msg_¥öt_ex≥rimíãr
(
oÊ_msg_ex≥rimíãr
 *
msg
, 
FILE
 *
°ªam
) {

76 
	`Ârötf
(
°ªam
, "{id=\"0x%"
PRIx32
"\"}", 
msg
->
ex≥rimíãr_id
);

77 
	}
}

80 
	$oÊ_msg_¥öt_„©uªs_ª∂y
(
oÊ_msg_„©uªs_ª∂y
 *
msg
, 
FILE
 *
°ªam
) {

82 
	`Ârötf
(
°ªam
, "{dpid=\"0x%016"
PRIx64
"\", buffs=\"%u\",Åabs=\"%u\", "

83 "aux_id=\"%u\", c≠s=\"0x%"
PRIx32
"\"",

84 
msg
->
d©≠©h_id
, msg->
n_buf„rs
, msg->
n_èbÀs
,

85 
msg
->
auxûüry_id
, msg->
ˇ∑bûôõs
);

87 
	`Ârötf
(
°ªam
, "]}");

88 
	}
}

91 
	$oÊ_msg_¥öt_gë_c⁄fig_ª∂y
(
oÊ_msg_gë_c⁄fig_ª∂y
 *
msg
, 
FILE
 *
°ªam
) {

92 
	`Ârötf
(
°ªam
, "{conf=");

93 
	`oÊ_°ru˘s_c⁄fig_¥öt
(
°ªam
, 
msg
->
c⁄fig
);

94 
	`Ârötf
(
°ªam
, "}");

95 
	}
}

99 
	$oÊ_msg_¥öt_£t_c⁄fig
(
oÊ_msg_£t_c⁄fig
 *
msg
, 
FILE
 *
°ªam
) {

100 
	`Ârötf
(
°ªam
, "{conf=");

101 
	`oÊ_°ru˘s_c⁄fig_¥öt
(
°ªam
, 
msg
->
c⁄fig
);

102 
	`Ârötf
(
°ªam
, "}");

103 
	}
}

106 
	$oÊ_msg_¥öt_∑ckë_ö
(
oÊ_msg_∑ckë_ö
 *
msg
, 
FILE
 *
°ªam
) {

107 
	`Ârötf
(
°ªam
, "{buffer=\"");

108 
	`oÊ_buf„r_¥öt
(
°ªam
, 
msg
->
buf„r_id
);

109 
	`Ârötf
(
°ªam
, "\",ÅÀn=\"%u\",Ñós=\"", 
msg
->
tŸÆ_Àn
);

110 
	`oÊ_∑ckë_ö_ªas⁄_¥öt
(
°ªam
, 
msg
->
ªas⁄
);

111 
	`Ârötf
(
°ªam
, "\",Åable=\"");

112 
	`oÊ_èbÀ_¥öt
(
°ªam
, 
msg
->
èbÀ_id
);

113 
	`Ârötf
(
°ªam
, "\", dÀn=\"%zu\"}", 
msg
->
d©a_Àngth
);

114 
	}
}

118 
	$oÊ_msg_¥öt_Êow_ªmoved
(
oÊ_msg_Êow_ªmoved
 *
msg
, 
FILE
 *
°ªam
, 
oÊ_exp
 *
exp
) {

119 
	`Ârötf
(
°ªam
, "{reas=\"");

120 
	`oÊ_Êow_ªmoved_ªas⁄_¥öt
(
°ªam
, 
msg
->
ªas⁄
);

121 
	`Ârötf
(
°ªam
, "\", stats=");

122 
	`oÊ_°ru˘s_Êow_°©s_¥öt
(
°ªam
, 
msg
->
°©s
, 
exp
);

123 
	`Ârötf
(
°ªam
, "}");

124 
	}
}

127 
	$oÊ_msg_¥öt_p‹t_°©us
(
oÊ_msg_p‹t_°©us
 *
msg
, 
FILE
 *
°ªam
) {

129 
	`Ârötf
(
°ªam
, "{reas=");

130 
	`oÊ_p‹t_°©us_ªas⁄_¥öt
(
°ªam
, 
msg
->
ªas⁄
);

131 
	`Ârötf
(
°ªam
, ", desc=");

132 
	`oÊ_°ru˘s_p‹t_¥öt
(
°ªam
, 
msg
->
desc
);

133 
	`Ârötf
(
°ªam
, "}");

134 
	}
}

137 
	$oÊ_msg_¥öt_∑ckë_out
(
oÊ_msg_∑ckë_out
 *
msg
, 
FILE
 *
°ªam
, 
oÊ_exp
 *
exp
) {

138 
size_t
 
i
;

139 
	`Ârötf
(
°ªam
, "{buffer=\"");

140 
	`oÊ_buf„r_¥öt
(
°ªam
, 
msg
->
buf„r_id
);

141 
	`Ârötf
(
°ªam
, "\",Öort=\"");

142 
	`oÊ_p‹t_¥öt
(
°ªam
, 
msg
->
ö_p‹t
);

143 
	`Ârötf
(
°ªam
, "\",áctions=[");

145 
i
=0; i<
msg
->
a˘i⁄s_num
; i++) {

146 
	`oÊ_a˘i⁄_¥öt
(
°ªam
, 
msg
->
a˘i⁄s
[
i
], 
exp
);

147 i‡(
i
 < 
msg
->
a˘i⁄s_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); }

150 
	`Ârötf
(
°ªam
, "]}");

151 
	}
}

154 
	$oÊ_msg_¥öt_Êow_mod
(
oÊ_msg_Êow_mod
 *
msg
, 
FILE
 *
°ªam
, 
oÊ_exp
 *
exp
) {

155 
size_t
 
i
;

157 
	`Ârötf
(
°ªam
, "{table=\"");

158 
	`oÊ_èbÀ_¥öt
(
°ªam
, 
msg
->
èbÀ_id
);

159 
	`Ârötf
(
°ªam
, "\", cmd=\"");

160 
	`oÊ_Êow_mod_comm™d_¥öt
(
°ªam
, 
msg
->
comm™d
);

161 
	`Ârötf
(
°ªam
, "\", cookõ=\"0x%"
PRIx64
"\", mask=\"0x%"PRIx64"\", "

163 
msg
->
cookõ
, msg->
cookõ_mask
,

164 
msg
->
idÀ_timeout
, msg->
h¨d_timeout
, msg->
¥i‹ôy
);

165 
	`oÊ_buf„r_¥öt
(
°ªam
, 
msg
->
buf„r_id
);

166 
	`Ârötf
(
°ªam
, "\",Öort=\"");

167 
	`oÊ_p‹t_¥öt
(
°ªam
, 
msg
->
out_p‹t
);

168 
	`Ârötf
(
°ªam
, "\", group=\"");

169 
	`oÊ_group_¥öt
(
°ªam
, 
msg
->
out_group
);

170 
	`Ârötf
(
°ªam
, "\", fœgs=\"0x%"
PRIx16
"\", m©ch=",
msg
->
Êags
);

171 
	`oÊ_°ru˘s_m©ch_¥öt
(
°ªam
, 
msg
->
m©ch
, 
exp
);

172 
	`Ârötf
(
°ªam
, ", insts=[");

173 
i
=0; i<
msg
->
ö°ru˘i⁄s_num
; i++) {

174 
	`oÊ_°ru˘s_ö°ru˘i⁄_¥öt
(
°ªam
, 
msg
->
ö°ru˘i⁄s
[
i
], 
exp
);

175 i‡(
i
 < 
msg
->
ö°ru˘i⁄s_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); }

177 
	`Ârötf
(
°ªam
, "]}");

178 
	}
}

181 
	$oÊ_msg_¥öt_group_mod
(
oÊ_msg_group_mod
 *
msg
, 
FILE
 *
°ªam
, 
oÊ_exp
 *
exp
) {

182 
size_t
 
i
;

184 
	`Ârötf
(
°ªam
,"{group=\"");

185 
	`oÊ_group_¥öt
(
°ªam
, 
msg
->
group_id
);

186 
	`Ârötf
(
°ªam
,"\", cmd=\"");

187 
	`oÊ_group_mod_comm™d_¥öt
(
°ªam
, 
msg
->
comm™d
);

188 
	`Ârötf
(
°ªam
, "\",Åype=\"");

189 
	`oÊ_group_ty≥_¥öt
(
°ªam
, 
msg
->
ty≥
);

190 
	`Ârötf
(
°ªam
,"\", buckets=[");

192 
i
=0; i<
msg
->
buckës_num
; i++) {

193 
	`oÊ_°ru˘s_buckë_¥öt
(
°ªam
, 
msg
->
buckës
[
i
], 
exp
);

195 i‡(
i
 < 
msg
->
buckës_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); }

198 
	`Ârötf
(
°ªam
, "]}");

199 
	}
}

202 
	$oÊ_msg_¥öt_mëî_mod
(
oÊ_msg_mëî_mod
 *
msg
, 
FILE
 *
°ªam
) {

203 
size_t
 
i
;

205 
	`Ârötf
(
°ªam
,"{cmd=\"");

206 
	`oÊ_mëî_mod_comm™d_¥öt
(
°ªam
, 
msg
->
comm™d
);

207 
	`Ârötf
(
°ªam
, "\", fœgs=\"0x%"
PRIx16
"\"",
msg
->
Êags
);

208 
	`Ârötf
(
°ªam
, "\", mëî_id=\"%"
PRIx32
"\"",
msg
->
mëî_id
);

209 
	`Ârötf
(
°ªam
,"\", bands=[");

211 
i
=0; i<
msg
->
mëî_b™ds_num
; i++) {

212 
	`oÊ_°ru˘s_mëî_b™d_¥öt
(
°ªam
, 
msg
->
b™ds
[
i
]);

214 i‡(
i
 < 
msg
->
mëî_b™ds_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); }

217 
	`Ârötf
(
°ªam
, "]}");

218 
	}
}

221 
	$oÊ_msg_¥öt_mëî_°©s_ªque°
(
oÊ_msg_mu…ù¨t_mëî_ªque°
 *
msg
, 
FILE
 *
°ªam
){

223 
	`Ârötf
(
°ªam
, "{mëî_id%x", 
msg
->
mëî_id
);

224 
	`Ârötf
(
°ªam
, "\"");

225 
	}
}

228 
	$oÊ_msg_¥öt_p‹t_mod
(
oÊ_msg_p‹t_mod
 *
msg
, 
FILE
 *
°ªam
) {

230 
	`Ârötf
(
°ªam
, "{port=\"");

231 
	`oÊ_p‹t_¥öt
(
°ªam
, 
msg
->
p‹t_no
);

232 
	`Ârötf
(
°ªam
, "\", hwaddr=\""
ETH_ADDR_FMT
"\", c⁄fig=\"0x%08"
PRIx32
"\", "

233 "mask=\"0x%"
PRIx32
"\",ádv=\"0x%"PRIx32"\"}",

234 
	`ETH_ADDR_ARGS
(
msg
->
hw_addr
), msg->
c⁄fig
, msg->
mask
, msg->
advîti£
);

235 
	}
}

238 
	$oÊ_msg_¥öt_èbÀ_mod
(
oÊ_msg_èbÀ_mod
 *
msg
, 
FILE
 *
°ªam
) {

239 
	`Ârötf
(
°ªam
, "{id=\"");

240 
	`oÊ_èbÀ_¥öt
(
°ªam
, 
msg
->
èbÀ_id
);

241 
	`Ârötf
(
°ªam
, "\", c⁄fig=\"0x%08"
PRIx32
"\"}", 
msg
->
c⁄fig
);

242 
	}
}

245 
	$oÊ_msg_¥öt_°©s_ªque°_Êow
(
oÊ_msg_mu…ù¨t_ªque°_Êow
 *
msg
, 
FILE
 *
°ªam
, 
oÊ_exp
 *
exp
) {

246 
	`Ârötf
(
°ªam
, ",Åable=\"");

247 
	`oÊ_èbÀ_¥öt
(
°ªam
, 
msg
->
èbÀ_id
);

248 
	`Ârötf
(
°ªam
, "\", oport=\"");

249 
	`oÊ_p‹t_¥öt
(
°ªam
, 
msg
->
out_p‹t
);

250 
	`Ârötf
(
°ªam
, "\", ogrp=\"");

251 
	`oÊ_group_¥öt
(
°ªam
, 
msg
->
out_group
);

252 
	`Ârötf
(
°ªam
, "\", cookõ=0x%"
PRIx64
"\", mask=0x%"PRIx64"\", match=",

253 
msg
->
cookõ
, msg->
cookõ_mask
);

254 
	`oÊ_°ru˘s_m©ch_¥öt
(
°ªam
, 
msg
->
m©ch
, 
exp
);

255 
	}
}

258 
	$oÊ_msg_¥öt_°©s_ªque°_p‹t
(
oÊ_msg_mu…ù¨t_ªque°_p‹t
 *
msg
, 
FILE
 *
°ªam
) {

259 
	`Ârötf
(
°ªam
, ",Öort=\"");

260 
	`oÊ_p‹t_¥öt
(
°ªam
, 
msg
->
p‹t_no
);

261 
	`Ârötf
(
°ªam
, "\"");

262 
	}
}

265 
	$oÊ_msg_¥öt_°©s_ªque°_queue
(
oÊ_msg_mu…ù¨t_ªque°_queue
 *
msg
, 
FILE
 *
°ªam
) {

266 
	`Ârötf
(
°ªam
, ",Öort=\"");

267 
	`oÊ_p‹t_¥öt
(
°ªam
, 
msg
->
p‹t_no
);

268 
	`Ârötf
(
°ªam
, "\", q=\"");

269 
	`oÊ_queue_¥öt
(
°ªam
, 
msg
->
queue_id
);

270 
	`Ârötf
(
°ªam
, "\"");

271 
	}
}

274 
	$oÊ_msg_¥öt_°©s_ªque°_group
(
oÊ_msg_mu…ù¨t_ªque°_group
 *
msg
, 
FILE
 *
°ªam
) {

275 
	`Ârötf
(
°ªam
, ", group=\"");

276 
	`oÊ_group_¥öt
(
°ªam
, 
msg
->
group_id
);

277 
	`Ârötf
(
°ªam
, "\"");

278 
	}
}

281 
	$oÊ_msg_¥öt_èbÀ_„©uªs_ªque°
(
oÊ_msg_mu…ù¨t_ªque°_èbÀ_„©uªs
* 
msg
, 
FILE
 *
°ªam
){

283 
size_t
 
i
;

284 i‡(
msg
->
èbÀ_„©uªs
 =
NULL
){

288 
	`Ârötf
(
°ªam
, ",Åable_features=\"");

289 
i
 = 0; i < 
msg
->
èbÀs_num
; i++)

290 
	`oÊ_°ru˘s_èbÀ_„©uªs_¥öt
(
°ªam
, 
msg
->
èbÀ_„©uªs
[
i
]);

291 
	`Ârötf
(
°ªam
, "\"");

293 
	}
}

296 
	$oÊ_msg_¥öt_°©s_ªque°_ex≥rimíãr
(
oÊ_msg_mu…ù¨t_ªque°_ex≥rimíãr
 *
msg
, 
FILE
 *
°ªam
) {

297 
	`Ârötf
(
°ªam
, ",Éxp_id=\"");

298 
	`oÊ_group_¥öt
(
°ªam
, 
msg
->
ex≥rimíãr_id
);

299 
	`Ârötf
(
°ªam
, "\"");

300 
	}
}

303 
	$oÊ_msg_¥öt_mu…ù¨t_ªque°
(
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
msg
, 
FILE
 *
°ªam
, 
oÊ_exp
 *
exp
) {

304 i‡(
msg
->
ty≥
 =
OFPMP_EXPERIMENTER
) {

305 i‡(
exp
 !
NULL
 &&Éxp->
°©s
 !NULL &&Éxp->°©s->
ªq_to_°rög
 != NULL) {

306 *
c
 = 
exp
->
°©s
->
	`ªq_to_°rög
(
msg
);

307 
	`Âuts
(
c
, 
°ªam
);

308 
	`‰ì
(
c
);

311 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÖrint EXPERIMENTER statsÑequest, butÇo callback was given.");

315 
	`Ârötf
(
°ªam
, "{type=\"");

316 
	`oÊ_°©s_ty≥_¥öt
(
°ªam
, 
msg
->
ty≥
);

317 
	`Ârötf
(
°ªam
, "\", fœgs=\"0x%"
PRIx32
"\"", 
msg
->
Êags
);

319 
msg
->
ty≥
) {

320 
OFPMP_DESC
: {

323 
OFPMP_FLOW
:

324 
OFPMP_AGGREGATE
: {

325 
	`oÊ_msg_¥öt_°©s_ªque°_Êow
((
oÊ_msg_mu…ù¨t_ªque°_Êow
 *)
msg
, 
°ªam
, 
exp
);

328 
OFPMP_TABLE
: {

331 
OFPMP_TABLE_FEATURES
: {

332 
	`oÊ_msg_¥öt_èbÀ_„©uªs_ªque°
((
oÊ_msg_mu…ù¨t_ªque°_èbÀ_„©uªs
*)
msg
, 
°ªam
);

335 
OFPMP_PORT_STATS
: {

336 
	`oÊ_msg_¥öt_°©s_ªque°_p‹t
((
oÊ_msg_mu…ù¨t_ªque°_p‹t
 *)
msg
, 
°ªam
);

339 
OFPMP_QUEUE
: {

340 
	`oÊ_msg_¥öt_°©s_ªque°_queue
((
oÊ_msg_mu…ù¨t_ªque°_queue
 *)
msg
, 
°ªam
);

343 
OFPMP_GROUP
: {

344 
	`oÊ_msg_¥öt_°©s_ªque°_group
((
oÊ_msg_mu…ù¨t_ªque°_group
 *)
msg
, 
°ªam
);

347 
OFPMP_GROUP_DESC
: {

350 
OFPMP_GROUP_FEATURES
:{

353 
OFPMP_METER
:

354 
OFPMP_METER_CONFIG
:{

355 
	`oÊ_msg_¥öt_mëî_°©s_ªque°
((
oÊ_msg_mu…ù¨t_mëî_ªque°
*)
msg
, 
°ªam
);

358 
OFPMP_METER_FEATURES
:{

361 
OFPMP_PORT_DESC
:{

364 
OFPMP_EXPERIMENTER
: {

365 
	`oÊ_msg_¥öt_°©s_ªque°_ex≥rimíãr
((
oÊ_msg_mu…ù¨t_ªque°_ex≥rimíãr
 *)
msg
, 
°ªam
);

368 
	`Ârötf
(
°ªam
, "}");

369 
	}
}

372 
	$oÊ_msg_¥öt_°©s_ª∂y_desc
(
oÊ_msg_ª∂y_desc
 *
msg
, 
FILE
 *
°ªam
) {

373 
	`Ârötf
(
°ªam
, ", mfr=\"%s\", hw=\"%s\", sw=\"%s\", sn=\"%s\", dp=\"%s\"",

374 
msg
->
m‰_desc
, msg->
hw_desc
, msg->
sw_desc
, msg->
£rül_num
, msg->
dp_desc
);

375 
	}
}

378 
	$oÊ_msg_¥öt_°©s_ª∂y_Êow
(
oÊ_msg_mu…ù¨t_ª∂y_Êow
 *
msg
, 
FILE
 *
°ªam
, 
oÊ_exp
 *
exp
) {

379 
size_t
 
i
;

381 
	`Ârötf
(
°ªam
, ", stats=[");

383 
i
=0; i<
msg
->
°©s_num
; i++) {

384 
	`oÊ_°ru˘s_Êow_°©s_¥öt
(
°ªam
, 
msg
->
°©s
[
i
], 
exp
);

385 i‡(
i
 < 
msg
->
°©s_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); };

388 
	`Ârötf
(
°ªam
, "]");

389 
	}
}

392 
	$oÊ_msg_¥öt_°©s_ª∂y_aggªg©e
(
oÊ_msg_mu…ù¨t_ª∂y_aggªg©e
 *
msg
, 
FILE
 *
°ªam
) {

393 
	`Ârötf
(
°ªam
, ",Ökt_˙t=\"%"
PRIu64
"\", byte_cnt=\"%"PRIu64"\", flow_cnt=\"%u\"",

394 
msg
->
∑ckë_cou¡
, msg->
byã_cou¡
, msg->
Êow_cou¡
);

395 
	}
}

398 
	$oÊ_msg_¥öt_°©s_ª∂y_èbÀ
(
oÊ_msg_mu…ù¨t_ª∂y_èbÀ
 *
msg
, 
FILE
 *
°ªam
) {

399 
size_t
 
i
;

401 
	`Ârötf
(
°ªam
, ", stats=[");

403 
i
=0; i<
msg
->
°©s_num
; i++) {

404 
	`oÊ_°ru˘s_èbÀ_°©s_¥öt
(
°ªam
, 
msg
->
°©s
[
i
]);

405 i‡(
i
 < 
msg
->
°©s_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); };

408 
	`Ârötf
(
°ªam
, "]");

409 
	}
}

412 
	$oÊ_msg_¥öt_°©s_ª∂y_p‹t
(
oÊ_msg_mu…ù¨t_ª∂y_p‹t
 *
msg
, 
FILE
 *
°ªam
) {

413 
size_t
 
i
;

415 
	`Ârötf
(
°ªam
, ", stats=[");

417 
i
=0; i<
msg
->
°©s_num
; i++) {

418 
	`oÊ_°ru˘s_p‹t_°©s_¥öt
(
°ªam
, 
msg
->
°©s
[
i
]);

419 i‡(
i
 < 
msg
->
°©s_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); };

422 
	`Ârötf
(
°ªam
, "]");

423 
	}
}

426 
	$oÊ_msg_¥öt_°©s_ª∂y_queue
(
oÊ_msg_mu…ù¨t_ª∂y_queue
 *
msg
, 
FILE
 *
°ªam
) {

427 
size_t
 
i
;

429 
	`Ârötf
(
°ªam
, ", stats=[");

431 
i
=0; i<
msg
->
°©s_num
; i++) {

432 
	`oÊ_°ru˘s_queue_°©s_¥öt
(
°ªam
, 
msg
->
°©s
[
i
]);

433 i‡(
i
 < 
msg
->
°©s_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); };

436 
	`Ârötf
(
°ªam
, "]");

437 
	}
}

440 
	$oÊ_msg_¥öt_°©s_ª∂y_group
(
oÊ_msg_mu…ù¨t_ª∂y_group
 *
msg
, 
FILE
 *
°ªam
) {

441 
size_t
 
i
;

443 
	`Ârötf
(
°ªam
, ", stats=[");

445 
i
=0; i<
msg
->
°©s_num
; i++) {

446 
	`oÊ_°ru˘s_group_°©s_¥öt
(
°ªam
, 
msg
->
°©s
[
i
]);

447 i‡(
i
 < 
msg
->
°©s_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); };

450 
	`Ârötf
(
°ªam
, "]");

451 
	}
}

454 
	$oÊ_msg_¥öt_°©s_ª∂y_mëî
(
oÊ_msg_mu…ù¨t_ª∂y_mëî
 *
msg
, 
FILE
 *
°ªam
) {

455 
size_t
 
i
;

457 
	`Ârötf
(
°ªam
, ", stats=[");

459 
i
=0; i<
msg
->
°©s_num
; i++) {

460 
	`oÊ_°ru˘s_mëî_°©s_¥öt
(
°ªam
, 
msg
->
°©s
[
i
]);

461 i‡(
i
 < 
msg
->
°©s_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); };

464 
	`Ârötf
(
°ªam
, "]");

465 
	}
}

468 
	$oÊ_msg_¥öt_°©s_ª∂y_mëî_c⁄f
(
oÊ_msg_mu…ù¨t_ª∂y_mëî_c⁄f
 *
msg
, 
FILE
 *
°ªam
) {

469 
size_t
 
i
;

471 
	`Ârötf
(
°ªam
, ", stats=[");

473 
i
=0; i<
msg
->
°©s_num
; i++) {

474 
	`oÊ_°ru˘s_mëî_c⁄fig_¥öt
(
°ªam
, 
msg
->
°©s
[
i
]);

475 i‡(
i
 < 
msg
->
°©s_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); };

478 
	`Ârötf
(
°ªam
, "]");

479 
	}
}

482 
	$oÊ_msg_¥öt_ª∂y_mëî_„©uªs
(
oÊ_msg_mu…ù¨t_ª∂y_mëî_„©uªs
 *
msg
, 
FILE
 *
°ªam
) {

484 
	`oÊ_°ru˘s_mëî_„©uªs_¥öt
(
°ªam
, 
msg
->
„©uªs
);

486 
	}
}

488 
	$oÊ_msg_¥öt_°©s_ª∂y_group_desc
(
oÊ_msg_mu…ù¨t_ª∂y_group_desc
 *
msg
, 
FILE
 *
°ªam
, 
oÊ_exp
 *
exp
) {

489 
size_t
 
i
;

491 
	`Ârötf
(
°ªam
, ", stats=[");

493 
i
=0; i<
msg
->
°©s_num
; i++) {

494 
	`oÊ_°ru˘s_group_desc_°©s_¥öt
(
°ªam
, 
msg
->
°©s
[
i
], 
exp
);

495 i‡(
i
 < 
msg
->
°©s_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); };

498 
	`Ârötf
(
°ªam
, "]");

499 
	}
}

501 
	$oÊ_msg_¥öt_°©s_ª∂y_group_„©uªs
(
oÊ_msg_mu…ù¨t_ª∂y_group_„©uªs
 *
msg
, 
FILE
 *
°ªam
){

502 
size_t
 
i
;

503 
oÂ_a˘i⁄_ty≥
 
j
;

505 
	`Ârötf
(
°ªam
, ",Åypes=\"%d\", capabilities=\"%d [",

506 
msg
->
ty≥s
, msg->
ˇ∑bûôõs
);

508 
i
 = 0; i < 4; i++){

509 
	`oÊ_group_ty≥_¥öt
(
°ªam
, 
i
);

510 
	`Ârötf
(
°ªam
, ": max_groups=%d,á˘i⁄s", 
msg
->
max_groups
[
i
]);

511 if(
msg
->
a˘i⁄s
[
i
] & 1){

512 
	`oÊ_a˘i⁄_ty≥_¥öt
(
°ªam
, 
OFPAT_OUTPUT
);

513 
	`Ârötf
(
°ªam
, "/");

516 if(
msg
->
a˘i⁄s
[
i
] & 
OFPAT_COPY_TTL_OUT
){

517 
	`oÊ_a˘i⁄_ty≥_¥öt
(
°ªam
, 
OFPAT_COPY_TTL_OUT
);

518 
	`Ârötf
(
°ªam
, "/");

521 if(
msg
->
a˘i⁄s
[
i
] & 
OFPAT_COPY_TTL_IN
){

522 
	`oÊ_a˘i⁄_ty≥_¥öt
(
°ªam
, 
OFPAT_COPY_TTL_IN
);

523 
	`Ârötf
(
°ªam
, "/");

525 
j
 = 
OFPAT_SET_MPLS_TTL
; j < 
OFPAT_POP_PBB
; j++){

526 i‡(
msg
->
a˘i⁄s
[
i
] & 
j
){

527 
	`oÊ_a˘i⁄_ty≥_¥öt
(
°ªam
, 
j
);

528 
	`Ârötf
(
°ªam
, "/");

531 i‡(
i
 < 3)

532 
	`Ârötf
(
°ªam
, ", ");

534 
	}
}

537 
	$oÊ_msg_¥öt_°©s_ª∂y_ex≥rimíãr
(
oÊ_msg_mu…ù¨t_ª∂y_ex≥rimíãr
 *
msg
, 
FILE
 *
°ªam
) {

538 
	`Ârötf
(
°ªam
, ",Éxp_id=\"");

539 
	`oÊ_group_¥öt
(
°ªam
, 
msg
->
ex≥rimíãr_id
);

540 
	`Ârötf
(
°ªam
, "\"");

541 
	}
}

544 
	$oÊ_msg_¥öt_èbÀ_„©uªs_ª∂y
(
oÊ_msg_mu…ù¨t_ª∂y_èbÀ_„©uªs
* 
msg
, 
FILE
 *
°ªam
){

546 
size_t
 
i
;

547 i‡(
msg
->
èbÀ_„©uªs
 =
NULL
){

551 
	`Ârötf
(
°ªam
, ",Åable_features=\"");

552 
i
 = 0; i < 
msg
->
èbÀs_num
; i++)

553 
	`oÊ_°ru˘s_èbÀ_„©uªs_¥öt
(
°ªam
, 
msg
->
èbÀ_„©uªs
[
i
]);

554 
	`Ârötf
(
°ªam
, "\"");

556 
	}
}

559 
	$oÊ_msg_¥öt_p‹t_desc_ª∂y
(
oÊ_msg_mu…ù¨t_ª∂y_p‹t_desc
 *
msg
, 
FILE
 *
°ªam
) {

560 
size_t
 
i
;

562 
i
 = 0; i < 
msg
->
°©s_num
; i++){

563 
	`oÊ_°ru˘s_p‹t_¥öt
(
°ªam
, 
msg
->
°©s
[
i
]);

564 i‡(
i
 < 
msg
->
°©s_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); };

566 
	`Ârötf
(
°ªam
, "}");

567 
	}
}

570 
	$oÊ_msg_¥öt_mu…ù¨t_ª∂y
(
oÊ_msg_mu…ù¨t_ª∂y_hódî
 *
msg
, 
FILE
 *
°ªam
, 
oÊ_exp
 *
exp
) {

571 i‡(
msg
->
ty≥
 =
OFPMP_EXPERIMENTER
) {

572 i‡(
exp
 !
NULL
 &&Éxp->
°©s
 !NULL &&Éxp->°©s->
ª∂y_to_°rög
 != NULL) {

573 *
c
 = 
exp
->
°©s
->
	`ª∂y_to_°rög
(
msg
);

574 
	`Âuts
(
c
, 
°ªam
);

575 
	`‰ì
(
c
);

578 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÖrint EXPERIMENTER statsÑeply, butÇo callback was given.");

582 
	`Ârötf
(
°ªam
, "{type=\"");

583 
	`oÊ_°©s_ty≥_¥öt
(
°ªam
, 
msg
->
ty≥
);

584 
	`Ârötf
(
°ªam
, "\", fœgs=\"0x%"
PRIx32
"\"", 
msg
->
Êags
);

586 
msg
->
ty≥
) {

587 (
OFPMP_DESC
): {

588 
	`oÊ_msg_¥öt_°©s_ª∂y_desc
((
oÊ_msg_ª∂y_desc
 *)
msg
, 
°ªam
);

591 (
OFPMP_FLOW
): {

592 
	`oÊ_msg_¥öt_°©s_ª∂y_Êow
((
oÊ_msg_mu…ù¨t_ª∂y_Êow
 *)
msg
, 
°ªam
, 
exp
);

595 
OFPMP_AGGREGATE
: {

596 
	`oÊ_msg_¥öt_°©s_ª∂y_aggªg©e
((
oÊ_msg_mu…ù¨t_ª∂y_aggªg©e
 *)
msg
, 
°ªam
);

599 (
OFPMP_TABLE
): {

600 
	`oÊ_msg_¥öt_°©s_ª∂y_èbÀ
((
oÊ_msg_mu…ù¨t_ª∂y_èbÀ
 *)
msg
, 
°ªam
);

603 (
OFPMP_TABLE_FEATURES
):{

604 
	`oÊ_msg_¥öt_èbÀ_„©uªs_ª∂y
((
oÊ_msg_mu…ù¨t_ª∂y_èbÀ_„©uªs
*)
msg
, 
°ªam
);

607 
OFPMP_PORT_STATS
: {

608 
	`oÊ_msg_¥öt_°©s_ª∂y_p‹t
((
oÊ_msg_mu…ù¨t_ª∂y_p‹t
 *)
msg
, 
°ªam
);

611 
OFPMP_QUEUE
: {

612 
	`oÊ_msg_¥öt_°©s_ª∂y_queue
((
oÊ_msg_mu…ù¨t_ª∂y_queue
 *)
msg
, 
°ªam
);

615 (
OFPMP_GROUP
): {

616 
	`oÊ_msg_¥öt_°©s_ª∂y_group
((
oÊ_msg_mu…ù¨t_ª∂y_group
 *)
msg
, 
°ªam
);

619 
OFPMP_GROUP_DESC
: {

620 
	`oÊ_msg_¥öt_°©s_ª∂y_group_desc
((
oÊ_msg_mu…ù¨t_ª∂y_group_desc
 *)
msg
, 
°ªam
, 
exp
);

623 
OFPMP_GROUP_FEATURES
:{

624 
	`oÊ_msg_¥öt_°©s_ª∂y_group_„©uªs
((
oÊ_msg_mu…ù¨t_ª∂y_group_„©uªs
 *)
msg
, 
°ªam
);

627 
OFPMP_METER
:{

628 
	`oÊ_msg_¥öt_°©s_ª∂y_mëî
((
oÊ_msg_mu…ù¨t_ª∂y_mëî
*)
msg
, 
°ªam
);

631 
OFPMP_METER_CONFIG
:{

632 
	`oÊ_msg_¥öt_°©s_ª∂y_mëî_c⁄f
((
oÊ_msg_mu…ù¨t_ª∂y_mëî_c⁄f
*)
msg
, 
°ªam
);

635 
OFPMP_METER_FEATURES
:{

636 
	`oÊ_msg_¥öt_ª∂y_mëî_„©uªs
((
oÊ_msg_mu…ù¨t_ª∂y_mëî_„©uªs
*)
msg
, 
°ªam
);

639 
OFPMP_PORT_DESC
:{

640 
	`oÊ_msg_¥öt_p‹t_desc_ª∂y
((
oÊ_msg_mu…ù¨t_ª∂y_p‹t_desc
*)
msg
, 
°ªam
);

643 
OFPMP_EXPERIMENTER
: {

644 
	`oÊ_msg_¥öt_°©s_ª∂y_ex≥rimíãr
((
oÊ_msg_mu…ù¨t_ª∂y_ex≥rimíãr
 *)
msg
, 
°ªam
);

649 
	`Ârötf
(
°ªam
, "}");

650 
	}
}

653 
	$oÊ_msg_¥öt_queue_gë_c⁄fig_ªque°
(
oÊ_msg_queue_gë_c⁄fig_ªque°
 *
msg
, 
FILE
 *
°ªam
) {

654 
	`Ârötf
(
°ªam
, "{port=\"");

655 
	`oÊ_p‹t_¥öt
(
°ªam
, 
msg
->
p‹t
);

656 
	`Ârötf
(
°ªam
, "\"}");

657 
	}
}

660 
	$oÊ_msg_¥öt_queue_gë_c⁄fig_ª∂y
(
oÊ_msg_queue_gë_c⁄fig_ª∂y
 *
msg
, 
FILE
 *
°ªam
) {

661 
size_t
 
i
;

663 
	`Ârötf
(
°ªam
, "{port=\"");

664 
	`oÊ_p‹t_¥öt
(
°ªam
, 
msg
->
p‹t
);

665 
	`Ârötf
(
°ªam
, "\" queues=[");

667 
i
=0; i<
msg
->
queues_num
; i++) {

668 
	`oÊ_°ru˘s_queue_¥öt
(
°ªam
, 
msg
->
queues
[
i
]);

669 i‡(
i
 < 
msg
->
queues_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); }

672 
	`Ârötf
(
°ªam
, "]}");

673 
	}
}

676 
	$oÊ_msg_¥öt_rﬁe_msg
(
oÊ_msg_rﬁe_ªque°
 *
msg
, 
FILE
 *
°ªam
){

678 
	`Ârötf
(
°ªam
, "{rﬁe%d, gíî©i⁄_id%Œd}", 
msg
->
rﬁe
, msg->
gíî©i⁄_id
);

680 
	}
}

683 
	$oÊ_msg_¥öt_async
(
oÊ_msg_async_c⁄fig
* 
msg
, 
FILE
 *
°ªam
){

685 
	`Ârötf
(
°ªam
, "{");

686 
	`oÊ_°ru˘s_async_c⁄fig_¥öt
(
°ªam
, 
msg
->
c⁄fig
);

687 
	`Ârötf
(
°ªam
, "}");

689 
	}
}

692 
	$oÊ_msg_to_°rög
(
oÊ_msg_hódî
 *
msg
, 
oÊ_exp
 *
exp
) {

693 *
°r
;

694 
size_t
 
°r_size
;

695 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

697 
	`oÊ_msg_¥öt
(
°ªam
, 
msg
, 
exp
);

698 
	`f˛o£
(
°ªam
);

699  
°r
;

700 
	}
}

703 
	$oÊ_msg_¥öt
(
FILE
 *
°ªam
, 
oÊ_msg_hódî
 *
msg
, 
oÊ_exp
 *
exp
) {

704 
	`oÊ_mesßge_ty≥_¥öt
(
°ªam
, 
msg
->
ty≥
);

706 
msg
->
ty≥
) {

707 
OFPT_HELLO
: { ; }

708 
OFPT_ERROR
: { 
	`oÊ_msg_¥öt_îr‹
((
oÊ_msg_îr‹
 *)
msg
, 
°ªam
); ; }

709 
OFPT_ECHO_REQUEST
:

710 
OFPT_ECHO_REPLY
: { 
	`oÊ_msg_¥öt_echo
((
oÊ_msg_echo
 *)
msg
, 
°ªam
); ; }

711 
OFPT_EXPERIMENTER
: {

712 i‡(
exp
 =
NULL
 ||Éxp->
msg
 =NULL ||Éxp->msg->
to_°rög
 == NULL) {

713 
	`oÊ_msg_¥öt_ex≥rimíãr
((
oÊ_msg_ex≥rimíãr
 *)
msg
, 
°ªam
);

715 *
c
 = 
exp
->
msg
->
	`to_°rög
((
oÊ_msg_ex≥rimíãr
 *)msg);

716 
	`Ârötf
(
°ªam
, "%s", 
c
);

717 
	`‰ì
(
c
);

723 
OFPT_FEATURES_REQUEST
: { ; }

724 
OFPT_FEATURES_REPLY
: { 
	`oÊ_msg_¥öt_„©uªs_ª∂y
((
oÊ_msg_„©uªs_ª∂y
 *)
msg
, 
°ªam
); ; }

725 
OFPT_GET_CONFIG_REQUEST
: { ; }

726 
OFPT_GET_CONFIG_REPLY
: { 
	`oÊ_msg_¥öt_gë_c⁄fig_ª∂y
((
oÊ_msg_gë_c⁄fig_ª∂y
 *)
msg
, 
°ªam
); ; }

727 
OFPT_SET_CONFIG
: { 
	`oÊ_msg_¥öt_£t_c⁄fig
((
oÊ_msg_£t_c⁄fig
 *)
msg
, 
°ªam
); ; }

730 
OFPT_PACKET_IN
: { 
	`oÊ_msg_¥öt_∑ckë_ö
((
oÊ_msg_∑ckë_ö
 *)
msg
, 
°ªam
); ; }

731 
OFPT_FLOW_REMOVED
: { 
	`oÊ_msg_¥öt_Êow_ªmoved
((
oÊ_msg_Êow_ªmoved
 *)
msg
, 
°ªam
, 
exp
); ; }

732 
OFPT_PORT_STATUS
: { 
	`oÊ_msg_¥öt_p‹t_°©us
((
oÊ_msg_p‹t_°©us
 *)
msg
, 
°ªam
); ; }

735 
OFPT_PACKET_OUT
: { 
	`oÊ_msg_¥öt_∑ckë_out
((
oÊ_msg_∑ckë_out
 *)
msg
, 
°ªam
, 
exp
); ; }

736 
OFPT_FLOW_MOD
: { 
	`oÊ_msg_¥öt_Êow_mod
((
oÊ_msg_Êow_mod
 *)
msg
, 
°ªam
, 
exp
); ; }

737 
OFPT_GROUP_MOD
: { 
	`oÊ_msg_¥öt_group_mod
((
oÊ_msg_group_mod
 *)
msg
, 
°ªam
, 
exp
); ; }

738 
OFPT_PORT_MOD
: { 
	`oÊ_msg_¥öt_p‹t_mod
((
oÊ_msg_p‹t_mod
 *)
msg
, 
°ªam
); ; }

739 
OFPT_TABLE_MOD
: { 
	`oÊ_msg_¥öt_èbÀ_mod
((
oÊ_msg_èbÀ_mod
 *)
msg
, 
°ªam
); ; }

742 
OFPT_MULTIPART_REQUEST
: { 
	`oÊ_msg_¥öt_mu…ù¨t_ªque°
((
oÊ_msg_mu…ù¨t_ªque°_hódî
 *)
msg
, 
°ªam
, 
exp
); ; }

743 
OFPT_MULTIPART_REPLY
: { 
	`oÊ_msg_¥öt_mu…ù¨t_ª∂y
((
oÊ_msg_mu…ù¨t_ª∂y_hódî
 *)
msg
, 
°ªam
, 
exp
); ; }

746 
OFPT_BARRIER_REQUEST
: { ; }

747 
OFPT_BARRIER_REPLY
: { ; }

750 
OFPT_ROLE_REQUEST
:

751 
OFPT_ROLE_REPLY
:{

752 
	`oÊ_msg_¥öt_rﬁe_msg
((
oÊ_msg_rﬁe_ªque°
*)
msg
, 
°ªam
);

755 
OFPT_QUEUE_GET_CONFIG_REQUEST
: { 
	`oÊ_msg_¥öt_queue_gë_c⁄fig_ªque°
((
oÊ_msg_queue_gë_c⁄fig_ªque°
 *)
msg
, 
°ªam
); ; }

756 
OFPT_QUEUE_GET_CONFIG_REPLY
: { 
	`oÊ_msg_¥öt_queue_gë_c⁄fig_ª∂y
((
oÊ_msg_queue_gë_c⁄fig_ª∂y
 *)
msg
, 
°ªam
); ; }

759 
OFPT_GET_ASYNC_REQUEST
:{;}

760 
OFPT_GET_ASYNC_REPLY
:

761 
OFPT_SET_ASYNC
:{
	`oÊ_msg_¥öt_async
((
oÊ_msg_async_c⁄fig
*)
msg
, 
°ªam
); ;}

763 
OFPT_METER_MOD
: {
	`oÊ_msg_¥öt_mëî_mod
((
oÊ_msg_mëî_mod
*)
msg
, 
°ªam
); ;}

766 
	}
}

	@oflib/ofl-messages-unpack.c

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<√töë/ö.h
>

34 
	~<ídün.h
>

35 
	~"oÊ-a˘i⁄s.h
"

36 
	~"oÊ-mesßges.h
"

37 
	~"oÊ-°ru˘s.h
"

38 
	~"oÊ-utûs.h
"

39 
	~"oÊ-¥öt.h
"

40 
	~"oÊ-log.h
"

41 
	~"›íÊow/›íÊow.h
"

43 
	#UNUSED
 
	`__©åibuã__
((
__unu£d__
))

	)

45 
	#LOG_MODULE
 
oÊ_msg_u


	)

46 
	$OFL_LOG_INIT
(
LOG_MODULE
)

53 
oÊ_îr


54 
	$oÊ_msg_u≈ack_îr‹
(
oÂ_hódî
 *
§c
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

55 
oÂ_îr‹_msg
 *
£
;

56 
oÊ_msg_îr‹
 *
de
;

58 i‡(*
Àn
 < (
oÂ_îr‹_msg
)) {

59 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived ERROR mesßgêövÆidÜígth (%zu).", *
Àn
);

60  
OFL_ERROR
;

62 *
Àn
 -(
oÂ_îr‹_msg
);

64 
£
 = (
oÂ_îr‹_msg
 *)
§c
;

66 
de
 = (
oÊ_msg_îr‹
 *)
	`mÆloc
((ofl_msg_error));

68 
de
->
ty≥
 = (
oÂ_îr‹_ty≥
)
	`¡ohs
(
£
->type);

69 
de
->
code
 = 
	`¡ohs
(
£
->code);

70 
de
->
d©a_Àngth
 = *
Àn
;

71 
de
->
d©a
 = *
Àn
 > 0 ? (
uöt8_t
 *)
	`mem˝y
(
	`mÆloc
(*Àn), 
£
->d©a, *ÀnË: 
NULL
;

72 *
Àn
 = 0;

74 (*
msg
Ë(
oÊ_msg_hódî
 *)
de
;

76 
	}
}

79 
oÊ_îr


80 
	$oÊ_msg_u≈ack_echo
(
oÂ_hódî
 *
§c
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

81 
oÊ_msg_echo
 *
e
 = (oÊ_msg_echÿ*)
	`mÆloc
((ofl_msg_echo));

82 
uöt8_t
 *
d©a
;

85 *
Àn
 -(
oÂ_hódî
);

87 
d©a
 = (
uöt8_t
 *)
§c
 + (
oÂ_hódî
);

88 
e
->
d©a_Àngth
 = *
Àn
;

89 
e
->
d©a
 = *
Àn
 > 0 ? (
uöt8_t
 *)
	`mem˝y
(
	`mÆloc
(*Àn), d©a, *ÀnË: 
NULL
;

90 *
Àn
 = 0;

92 *
msg
 = (
oÊ_msg_hódî
 *)
e
;

94 
	}
}

96 
oÊ_îr


97 
	$oÊ_msg_u≈ack_rﬁe_ªque°
(
oÂ_hódî
 *
§c
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

98 
oÂ_rﬁe_ªque°
 *
§l
;

99 
oÊ_msg_rﬁe_ªque°
 *
dæ
;

101 i‡(*
Àn
 < (
oÂ_rﬁe_ªque°
)){

102 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived ROLE mesßgêha†övÆidÜígth (%zu).", *
Àn
);

103  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

105 *
Àn
 -(
oÂ_rﬁe_ªque°
);

107 
§l
 = (
oÂ_rﬁe_ªque°
 *Ë
§c
;

108 
dæ
 = (
oÊ_msg_rﬁe_ªque°
 *Ë
	`mÆloc
((ofl_msg_role_request));

110 
dæ
->
rﬁe
 = 
	`¡ohl
(
§l
->role);

111 
dæ
->
gíî©i⁄_id
 = 
	`¡oh64
(
§l
->generation_id);

113 *
msg
 = (
oÊ_msg_hódî
 *)
dæ
;

115 
	}
}

117 
oÊ_îr


118 
	$oÊ_msg_u≈ack_„©uªs_ª∂y
(
oÂ_hódî
 *
§c
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

119 
oÂ_swôch_„©uªs
 *
§
;

120 
oÊ_msg_„©uªs_ª∂y
 *
dr
;

122 i‡(*
Àn
 < (
oÂ_swôch_„©uªs
)) {

123 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived FEATURES_REPLY mesßgêha†övÆidÜígth (%zu).", *
Àn
);

126 *
Àn
 -(
oÂ_swôch_„©uªs
);

128 
§
 = (
oÂ_swôch_„©uªs
 *)
§c
;

129 
dr
 = (
oÊ_msg_„©uªs_ª∂y
 *)
	`mÆloc
((ofl_msg_features_reply));

131 
dr
->
d©≠©h_id
 = 
	`¡oh64
(
§
->datapath_id);

132 
dr
->
n_buf„rs
 = 
	`¡ohl
–
§
->n_buffers);

133 
dr
->
n_èbÀs
 = 
§
->n_tables;

134 
dr
->
auxûüry_id
 = 
§
->auxiliary_id;

135 
dr
->
ˇ∑bûôõs
 = 
	`¡ohl
–
§
->capabilities);

137 *
msg
 = (
oÊ_msg_hódî
 *)
dr
;

139 
	}
}

142 
oÊ_îr


143 
	$oÊ_msg_u≈ack_gë_c⁄fig_ª∂y
(
oÂ_hódî
 *
§c
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

144 
oÂ_swôch_c⁄fig
 *
§
;

145 
oÊ_msg_gë_c⁄fig_ª∂y
 *
dr
;

147 i‡(*
Àn
 < (
oÂ_swôch_c⁄fig
)) {

148 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived GET_CONFIG_REPLY mesßgêha†övÆidÜígth (%zu).", *
Àn
);

149  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

151 *
Àn
 -(
oÂ_swôch_c⁄fig
);

153 
§
 = (
oÂ_swôch_c⁄fig
 *)
§c
;

154 
dr
 = (
oÊ_msg_gë_c⁄fig_ª∂y
 *)
	`mÆloc
((ofl_msg_get_config_reply));

156 
dr
->
c⁄fig
 = (
oÊ_c⁄fig
 *)
	`mÆloc
((ofl_config));

157 
dr
->
c⁄fig
->
miss_£nd_Àn
 = 
	`¡ohs
(
§
->miss_send_len);

158 
dr
->
c⁄fig
->
Êags
 = 
	`¡ohs
(
§
->flags);

160 *
msg
 = (
oÊ_msg_hódî
 *)
dr
;

162 
	}
}

164 
oÊ_îr


165 
	$oÊ_msg_u≈ack_£t_c⁄fig
(
oÂ_hódî
 *
§c
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

166 
oÂ_swôch_c⁄fig
 *
§
;

167 
oÊ_msg_£t_c⁄fig
 *
dr
;

169 i‡(*
Àn
 < (
oÂ_swôch_c⁄fig
)) {

170 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived SET_CONFIG mesßgêha†övÆidÜígth (%zu).", *
Àn
);

171  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

173 *
Àn
 -(
oÂ_swôch_c⁄fig
);

175 
§
 = (
oÂ_swôch_c⁄fig
 *)
§c
;

176 
dr
 = (
oÊ_msg_£t_c⁄fig
 *)
	`mÆloc
((ofl_msg_set_config));

178 
dr
->
c⁄fig
 = (
oÊ_c⁄fig
 *)
	`mÆloc
((ofl_config));

180 
dr
->
c⁄fig
->
miss_£nd_Àn
 = 
	`¡ohs
(
§
->miss_send_len);

181 
dr
->
c⁄fig
->
Êags
 = 
	`¡ohs
(
§
->flags);

183 *
msg
 = (
oÊ_msg_hódî
 *)
dr
;

185 
	}
}

187 
oÊ_îr


188 
	$oÊ_msg_u≈ack_async_c⁄fig
(
oÂ_hódî
 *
§c
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
){

189 
oÂ_async_c⁄fig
 *
ßc
;

190 
oÊ_msg_async_c⁄fig
 *
dac
;

191 
i
;

193 i‡(*
Àn
 < (
oÂ_async_c⁄fig
)) {

194 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived ASYNC CONFIG mesßgêha†övÆidÜígth (%zu).", *
Àn
);

195  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

198 *
Àn
 -(
oÂ_async_c⁄fig
);

200 
ßc
 = (
oÂ_async_c⁄fig
*)
§c
;

201 
dac
 = (
oÊ_msg_async_c⁄fig
*)
	`mÆloc
((ofl_msg_async_config));

202 
dac
->
c⁄fig
 = (
oÊ_async_c⁄fig
*Ë
	`mÆloc
((ofl_async_config));

203 
i
 = 0; i < 2; i++){

204 
dac
->
c⁄fig
->
∑ckë_ö_mask
[
i
] = 
ßc
->packet_in_mask[i];

205 
dac
->
c⁄fig
->
p‹t_°©us_mask
[
i
] = 
ßc
->port_status_mask[i];

206 
dac
->
c⁄fig
->
Êow_ªmoved_mask
[
i
] = 
ßc
->flow_removed_mask[i];

209 *
msg
 = (
oÊ_msg_hódî
*)
dac
;

211 
	}
}

213 
oÊ_îr


214 
	$oÊ_msg_u≈ack_∑ckë_ö
(
oÂ_hódî
 *
§c
, 
uöt8_t
* 
buf
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

215 
oÂ_∑ckë_ö
 *
•
;

216 
oÊ_msg_∑ckë_ö
 *
dp
;

217 
uöt8_t
 *
±r
;

219 i‡(*
Àn
 < (
oÂ_∑ckë_ö
)) {

220 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived PACKET_IN mesßgêha†övÆidÜígth (%zu).", *
Àn
);

221  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

224 
•
 = (
oÂ_∑ckë_ö
 *)
§c
;

238 i‡(
•
->
èbÀ_id
 =
PIPELINE_TABLES
) {

239 i‡(
	`OFL_LOG_IS_WARN_ENABLED
(
LOG_MODULE
)) {

240 *
ts
 = 
	`oÊ_èbÀ_to_°rög
(
•
->
èbÀ_id
);

241 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived PACKET_IN ha†övÆidÅabÀ_id (%s).", 
ts
);

242 
	`‰ì
(
ts
);

244  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_TABLE_ID
);

246 *
Àn
 -(
oÂ_∑ckë_ö
Ë- (
oÂ_m©ch
);

247 
dp
 = (
oÊ_msg_∑ckë_ö
 *)
	`mÆloc
((ofl_msg_packet_in));

248 
dp
->
buf„r_id
 = 
	`¡ohl
(
•
->buffer_id);

249 
dp
->
tŸÆ_Àn
 = 
	`¡ohs
(
•
->total_len);

250 
dp
->
ªas⁄
 = (
oÂ_∑ckë_ö_ªas⁄
)
•
->reason;

251 
dp
->
èbÀ_id
 = 
•
->table_id;

252 
dp
->
cookõ
 = 
	`¡oh64
(
•
->cookie);

254 
±r
 = 
buf
 + ((
oÂ_∑ckë_ö
)-4);

255 
	`oÊ_°ru˘s_m©ch_u≈ack
(&(
•
->
m©ch
),
±r
, 
Àn
 ,&(
dp
->m©ch),
NULL
);

257 
±r
 = 
buf
 + 
	`ROUND_UP
((
oÂ_∑ckë_ö
)-4 + 
dp
->
m©ch
->
Àngth
,8) + 2;

259 *
Àn
 -= 2;

260 
dp
->
d©a_Àngth
 = *
Àn
;

261 
dp
->
d©a
 = *
Àn
 > 0 ? (
uöt8_t
 *)
	`mem˝y
(
	`mÆloc
(*Àn), 
±r
, *ÀnË: 
NULL
;

262 *
Àn
 = 0;

264 *
msg
 = (
oÊ_msg_hódî
 *)
dp
;

266 
	}
}

268 
oÊ_îr


269 
	$oÊ_msg_u≈ack_Êow_ªmoved
(
oÂ_hódî
 *
§c
,
uöt8_t
 *
buf
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
, 
oÊ_exp
 *
exp
) {

270 
oÂ_Êow_ªmoved
 *
§
;

271 
oÊ_msg_Êow_ªmoved
 *
dr
;

272 
oÊ_îr
 
îr‹
;

273 
m©ch_pos
;

275 i‡(*
Àn
 < ((
oÂ_Êow_ªmoved
Ë- (
oÂ_m©ch
))) {

276 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived FLOW_REMOVED mesßgêha†övÆidÜígth (%zu).", *
Àn
);

277  
OFL_ERROR
;

280 
§
 = (
oÂ_Êow_ªmoved
 *)
§c
 ;

282 i‡(
§
->
èbÀ_id
 >
PIPELINE_TABLES
) {

283 i‡(
	`OFL_LOG_IS_WARN_ENABLED
(
LOG_MODULE
)) {

284 *
ts
 = 
	`oÊ_èbÀ_to_°rög
(
§
->
èbÀ_id
);

285 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived FLOW_REMOVED mesßgêha†övÆidÅabÀ_id (%s).", 
ts
);

286 
	`‰ì
(
ts
);

288  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_TABLE_ID
);

290 *
Àn
 -(
oÂ_Êow_ªmoved
Ë- (
oÂ_m©ch
) ;

292 
dr
 = (
oÊ_msg_Êow_ªmoved
 *)
	`mÆloc
((ofl_msg_flow_removed));

293 
dr
->
ªas⁄
 = (
oÂ_Êow_ªmoved_ªas⁄
)
§
->reason;

295 
dr
->
°©s
 = (
oÊ_Êow_°©s
 *)
	`mÆloc
((ofl_flow_stats));

296 
dr
->
°©s
->
èbÀ_id
 = 
§
->table_id;

297 
dr
->
°©s
->
duøti⁄_£c
 = 
	`¡ohl
–
§
->duration_sec);

298 
dr
->
°©s
->
duøti⁄_n£c
 = 
	`¡ohl
–
§
->duration_nsec);

299 
dr
->
°©s
->
¥i‹ôy
 = 
	`¡ohs
(
§
->priority);

300 
dr
->
°©s
->
idÀ_timeout
 = 
	`¡ohs
–
§
->idle_timeout);

301 
dr
->
°©s
->
h¨d_timeout
 = 0;

302 
dr
->
°©s
->
cookõ
 = 
	`¡oh64
(
§
->cookie);

303 
dr
->
°©s
->
∑ckë_cou¡
 = 
	`¡oh64
(
§
->packet_count);

304 
dr
->
°©s
->
byã_cou¡
 = 
	`¡oh64
(
§
->byte_count);

305 
dr
->
°©s
->
ö°ru˘i⁄s_num
 = 0;

306 
dr
->
°©s
->
ö°ru˘i⁄s
 = 
NULL
;

308 
m©ch_pos
 = (
oÂ_Êow_ªmoved
) - 4;

310 
îr‹
 = 
	`oÊ_°ru˘s_m©ch_u≈ack
(&(
§
->
m©ch
),
buf
 + 
m©ch_pos
, 
Àn
, &(
dr
->
°©s
->m©ch), 
exp
);

311 i‡(
îr‹
) {

312 
	`‰ì
(
dr
->
°©s
);

313 
	`‰ì
(
dr
);

314  
îr‹
;

316 *
msg
 = (
oÊ_msg_hódî
 *)
dr
;

318 
	}
}

320 
oÊ_îr


321 
	$oÊ_msg_u≈ack_p‹t_°©us
(
oÂ_hódî
 *
§c
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

322 
oÂ_p‹t_°©us
 *
ss
;

323 
oÊ_msg_p‹t_°©us
 *
ds
;

324 
oÊ_îr
 
îr‹
;

326 i‡(*
Àn
 < (
oÂ_p‹t_°©us
)) {

327 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived PORT_STATUS mesßgêha†övÆidÜígth (%zu).", *
Àn
);

328  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

330 *
Àn
 -((
oÂ_p‹t_°©us
Ë- (
oÂ_p‹t
));

332 
ss
 = (
oÂ_p‹t_°©us
 *)
§c
;

333 
ds
 = (
oÊ_msg_p‹t_°©us
 *)
	`mÆloc
((ofl_msg_port_status));

335 
ds
->
ªas⁄
 = (
oÂ_p‹t_ªas⁄
Ë
ss
->reason;

337 
îr‹
 = 
	`oÊ_°ru˘s_p‹t_u≈ack
(&(
ss
->
desc
), 
Àn
, &(
ds
->desc));

338 i‡(
îr‹
) {

339 
	`‰ì
(
ds
);

340  
îr‹
;

343 *
msg
 = (
oÊ_msg_hódî
 *)
ds
;

345 
	}
}

347 
oÊ_îr


348 
	$oÊ_msg_u≈ack_∑ckë_out
(
oÂ_hódî
 *
§c
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
, 
oÊ_exp
 *
exp
) {

349 
oÂ_∑ckë_out
 *
•
;

350 
oÊ_msg_∑ckë_out
 *
dp
;

351 
oÂ_a˘i⁄_hódî
 *
a˘
;

352 
uöt8_t
 *
d©a
;

353 
oÊ_îr
 
îr‹
;

354 
size_t
 
i
, 
a˘i⁄s_num
;

356 i‡(*
Àn
 < (
oÂ_∑ckë_out
)) {

357 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived PACKET_OUT mesßgêha†övÆidÜígth (%zu).", *
Àn
);

358  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

361 
•
 = (
oÂ_∑ckë_out
 *)
§c
;

373 i‡(
	`¡ohl
(
•
->
buf„r_id
) != 0xffffffff &&

374 *
Àn
 !(
oÂ_∑ckë_out
Ë+ 
	`¡ohs
(
•
->
a˘i⁄s_Àn
)) {

375 i‡(
	`OFL_LOG_IS_WARN_ENABLED
(
LOG_MODULE
)) {

376 *
bs
 = 
	`oÊ_buf„r_to_°rög
(
	`¡ohl
(
•
->
buf„r_id
));

377 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived PACKET_OUT mesßgêwôh d©®™d buf„r_id (%s).", 
bs
);

378 
	`‰ì
(
bs
);

380  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

382 *
Àn
 -(
oÂ_∑ckë_out
);

384 
dp
 = (
oÊ_msg_∑ckë_out
 *)
	`mÆloc
((ofl_msg_packet_out));

386 
dp
->
buf„r_id
 = 
	`¡ohl
(
•
->buffer_id);

387 
dp
->
ö_p‹t
 = 
	`¡ohl
(
•
->in_port);

388 i‡(*
Àn
 < 
	`¡ohs
(
•
->
a˘i⁄s_Àn
)) {

389 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived PACKET_OUT mesßgêha†övÆidá˘i⁄Üígth (%zu).", *
Àn
);

390 
	`‰ì
(
dp
);

391  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

394 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_a˘i⁄s
(&(
•
->
a˘i⁄s
), 
	`¡ohs
(•->
a˘i⁄s_Àn
), &
a˘i⁄s_num
);

395 i‡(
îr‹
) {

396 
	`‰ì
(
dp
);

397  
îr‹
;

399 
dp
->
a˘i⁄s_num
 =áctions_num;

400 
dp
->
a˘i⁄s
 = (
oÊ_a˘i⁄_hódî
 **)
	`mÆloc
(dp->
a˘i⁄s_num
 * (
oÂ_a˘i⁄_hódî
 *));

403 
a˘
 = 
•
->
a˘i⁄s
;

404 
i
 = 0; i < 
dp
->
a˘i⁄s_num
; i++) {

405 
îr‹
 = 
	`oÊ_a˘i⁄s_u≈ack
(
a˘
, 
Àn
, &(
dp
->
a˘i⁄s
[
i
]), 
exp
);

406 i‡(
îr‹
) {

407 
	`OFL_UTILS_FREE_ARR_FUN2
(
dp
->
a˘i⁄s
, 
i
,

408 
oÊ_a˘i⁄s_‰ì
, 
exp
);

409 
	`‰ì
(
dp
);

411 
a˘
 = (
oÂ_a˘i⁄_hódî
 *)((
uöt8_t
 *Ô˘ + 
	`¡ohs
◊˘->
Àn
));

414 
d©a
 = ((
uöt8_t
 *)
•
->
a˘i⁄s
Ë+ 
	`¡ohs
(•->
a˘i⁄s_Àn
);

415 
dp
->
d©a_Àngth
 = *
Àn
;

416 
dp
->
d©a
 = *
Àn
 > 0 ? (
uöt8_t
 *)
	`mem˝y
(
	`mÆloc
(*Àn), d©a, *ÀnË: 
NULL
;

417 *
Àn
 = 0;

419 *
msg
 = (
oÊ_msg_hódî
 *)
dp
;

422 
	}
}

425 
oÊ_îr


426 
	$oÊ_msg_u≈ack_Êow_mod
(
oÂ_hódî
 *
§c
,
uöt8_t
* 
buf
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
, 
oÊ_exp
 *
exp
) {

427 
oÂ_Êow_mod
 *
sm
;

428 
oÊ_msg_Êow_mod
 *
dm
;

429 
oÂ_ö°ru˘i⁄
 *
ö°
;

430 
oÊ_îr
 
îr‹
;

431 
size_t
 
i
;

432 
m©ch_pos
;

435 i‡(*
Àn
 < ((
oÂ_Êow_mod
Ë- (
oÂ_m©ch
))) {

436 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived FLOW_MOD mesßgêha†övÆidÜígth (%zu).", *
Àn
);

437  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

440 *
Àn
 -((
oÂ_Êow_mod
Ë- (
oÂ_m©ch
));

442 
sm
 = (
oÂ_Êow_mod
 *)
§c
;

443 
dm
 = (
oÊ_msg_Êow_mod
 *)
	`mÆloc
((ofl_msg_flow_mod));

445 i‡(
sm
->
èbÀ_id
 >
PIPELINE_TABLES
 && ((sm->
comm™d
 !
OFPFC_DELETE


446 || 
sm
->
comm™d
 !
OFPFC_DELETE_STRICT
Ë&& sm->
èbÀ_id
 !
OFPTT_ALL
)) {

447 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived FLOW_MOD mesßgêha†övÆidÅabÀ id (%zu).", 
sm
->
èbÀ_id
 );

448  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_TABLE_ID
);

451 
dm
->
cookõ
 = 
	`¡oh64
(
sm
->cookie);

454 
dm
->
cookõ_mask
 = 
	`¡oh64
(
sm
->cookie_mask);

455 
dm
->
èbÀ_id
 = 
sm
->table_id;

456 
dm
->
comm™d
 = (
oÂ_Êow_mod_comm™d
)
sm
->command;

457 
dm
->
idÀ_timeout
 = 
	`¡ohs
–
sm
->idle_timeout);

458 
dm
->
h¨d_timeout
 = 
	`¡ohs
–
sm
->hard_timeout);

459 
dm
->
¥i‹ôy
 = 
	`¡ohs
–
sm
->priority);

460 
dm
->
buf„r_id
 = 
	`¡ohl
–
sm
->buffer_id);

461 
dm
->
out_p‹t
 = 
	`¡ohl
–
sm
->out_port);

462 
dm
->
out_group
 = 
	`¡ohl
–
sm
->out_group);

463 
dm
->
Êags
 = 
	`¡ohs
–
sm
->flags);

465 
m©ch_pos
 = (
oÂ_Êow_mod
) - 4;

467 
îr‹
 = 
	`oÊ_°ru˘s_m©ch_u≈ack
(&(
sm
->
m©ch
), 
buf
 + 
m©ch_pos
, 
Àn
, &(
dm
->m©ch), 
exp
);

468 i‡(
îr‹
) {

469 
	`‰ì
(
dm
);

470  
îr‹
;

477 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_ö°ru˘i⁄s
((
oÂ_ö°ru˘i⁄
 *)(
buf
 + 
	`ROUND_UP
(
m©ch_pos
 + 
dm
->
m©ch
->
Àngth
,8)), *
Àn
, &dm->
ö°ru˘i⁄s_num
);

480 i‡(
îr‹
) {

481 
	`oÊ_°ru˘s_‰ì_m©ch
(
dm
->
m©ch
, 
exp
);

482 
	`‰ì
(
dm
);

483  
îr‹
;

486 
dm
->
ö°ru˘i⁄s
 = (
oÊ_ö°ru˘i⁄_hódî
 **)
	`mÆloc
(dm->
ö°ru˘i⁄s_num
 * (ofl_instruction_header *));

487 
ö°
 = (
oÂ_ö°ru˘i⁄
 *Ë(
buf
 + 
	`ROUND_UP
(
m©ch_pos
 + 
dm
->
m©ch
->
Àngth
,8));

494 
i
 = 0; i < 
dm
->
ö°ru˘i⁄s_num
; i++) {

495 
îr‹
 = 
	`oÊ_°ru˘s_ö°ru˘i⁄s_u≈ack
(
ö°
, 
Àn
, &(
dm
->
ö°ru˘i⁄s
[
i
]), 
exp
);

496 i‡(
îr‹
) {

497 
	`OFL_UTILS_FREE_ARR_FUN2
(
dm
->
ö°ru˘i⁄s
, 
i
,

498 
oÊ_°ru˘s_‰ì_ö°ru˘i⁄
, 
exp
);

499 
	`oÊ_°ru˘s_‰ì_m©ch
(
dm
->
m©ch
, 
exp
);

500 
	`‰ì
(
dm
);

501  
îr‹
;

503 
ö°
 = (
oÂ_ö°ru˘i⁄
 *)((
uöt8_t
 *)ö° + 
	`¡ohs
(ö°->
Àn
));

505 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

507 
	}
}

509 
oÊ_îr


510 
	$oÊ_msg_u≈ack_group_mod
(
oÂ_hódî
 *
§c
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
, 
oÊ_exp
 *
exp
) {

511 
oÂ_group_mod
 *
sm
;

512 
oÊ_msg_group_mod
 *
dm
;

513 
oÂ_buckë
 *
buckë
;

514 
oÊ_îr
 
îr‹
;

515 
size_t
 
i
;

517 i‡(*
Àn
 < (
oÂ_group_mod
)) {

518 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived GROUP_MOD mesßgêha†övÆidÜígth (%zu).", *
Àn
);

519  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

521 *
Àn
 -(
oÂ_group_mod
);

523 
sm
 = (
oÂ_group_mod
 *)
§c
;

525 i‡(
	`¡ohs
(
sm
->
comm™d
Ë> 
OFPGC_DELETE
) {

526 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived GROUP_MOD mesßgêwôh invÆid comm™d (%u).", 
	`¡ohs
(
sm
->
comm™d
));

527  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPGMFC_BAD_COMMAND
);

530 i‡(
	`¡ohs
(
sm
->
ty≥
Ë> 
OFPGT_FF
 &&Çtohs(sm->type) < 128 ) {

531 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived GROUP_MOD mesßgêwôh invÆidÅy≥ (%u).", 
	`¡ohs
(
sm
->
ty≥
));

532  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPGMFC_BAD_TYPE
);

535 i‡(
	`¡ohl
(
sm
->
group_id
Ë> 
OFPG_MAX
 &&

536 !(
	`¡ohs
(
sm
->
comm™d
Ë=
OFPGC_DELETE
 && 
	`¡ohl
(sm->
group_id
Ë=
OFPG_ALL
)) {

537 i‡(
	`OFL_LOG_IS_WARN_ENABLED
(
LOG_MODULE
)) {

538 *
gs
 = 
	`oÊ_group_to_°rög
(
	`¡ohl
(
sm
->
group_id
));

539 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived GROUP_MOD mesßgêwôh invÆid grou∞id (%s).", 
gs
);

540 
	`‰ì
(
gs
);

542  
	`oÊ_îr‹
(
OFPET_GROUP_MOD_FAILED
, 
OFPGMFC_INVALID_GROUP
);

545 
dm
 = (
oÊ_msg_group_mod
 *)
	`mÆloc
((ofl_msg_group_mod));

547 
dm
->
comm™d
 = (
oÂ_group_mod_comm™d
)
	`¡ohs
(
sm
->command);

548 
dm
->
ty≥
 = 
sm
->type;

549 
dm
->
group_id
 = 
	`¡ohl
(
sm
->group_id);

551 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_buckës
(&(
sm
->
buckës
), *
Àn
, &
dm
->
buckës_num
);

552 i‡(
îr‹
) {

553 
	`‰ì
(
dm
);

554  
îr‹
;

557 i‡(
dm
->
comm™d
 =
OFPGC_DELETE
 && dm->
buckës_num
 > 0) {

558 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived DELETE grou∞comm™d wôh buckë†(%zu).", 
dm
->
buckës_num
);

559 
	`‰ì
(
dm
);

560  
	`oÊ_îr‹
(
OFPET_GROUP_MOD_FAILED
, 
OFPGMFC_INVALID_GROUP
);

563 i‡(
dm
->
ty≥
 =
OFPGT_INDIRECT
 && dm->
buckës_num
 != 1) {

564 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived INDIRECT grou∞d€¢'àhavêexa˘ly o√ buckë (%zu).", 
dm
->
buckës_num
);

565 
	`‰ì
(
dm
);

566  
	`oÊ_îr‹
(
OFPET_GROUP_MOD_FAILED
, 
OFPGMFC_INVALID_GROUP
);

569 
dm
->
buckës
 = (
oÊ_buckë
 **)
	`mÆloc
(dm->
buckës_num
 * (ofl_bucket *));

571 
buckë
 = 
sm
->
buckës
;

572 
i
 = 0; i < 
dm
->
buckës_num
; i++) {

573 
îr‹
 = 
	`oÊ_°ru˘s_buckë_u≈ack
(
buckë
, 
Àn
, 
dm
->
ty≥
, &(dm->
buckës
[
i
]), 
exp
);

574 i‡(
îr‹
) {

575 
	`OFL_UTILS_FREE_ARR_FUN2
(
dm
->
buckës
, 
i
,

576 
oÊ_°ru˘s_‰ì_buckë
, 
exp
);

577 
	`‰ì
(
dm
);

578  
îr‹
;

580 
buckë
 = (
oÂ_buckë
 *)((
uöt8_t
 *)buckë + 
	`¡ohs
(buckë->
Àn
));

583 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

585 
	}
}

587 
oÊ_îr


588 
	$oÊ_msg_u≈ack_mëî_mod
(
oÂ_hódî
 *
§c
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

589 
oÂ_mëî_mod
 *
sm
;

590 
oÊ_msg_mëî_mod
 *
dm
;

591 
oÂ_mëî_b™d_hódî
 *
b™d
;

592 
oÊ_îr
 
îr‹
;

593 
size_t
 
i
;

594 i‡(*
Àn
 < (
oÂ_mëî_mod
)) {

595 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived METER_MOD mesßgêha†övÆidÜígth (%zu).", *
Àn
);

596  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

598 *
Àn
 -(
oÂ_mëî_mod
);

600 
sm
 = (
oÂ_mëî_mod
 *)
§c
;

602 i‡(
	`¡ohs
(
sm
->
comm™d
Ë> 
OFPMC_DELETE
) {

603 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived METER_MOD mesßgêwôh invÆid comm™d (%u).", 
	`¡ohs
(
sm
->
comm™d
));

604  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPMMFC_BAD_COMMAND
);

607 i‡((
	`¡ohs
(
sm
->
Êags
) >> 3) > 1 ) {

608 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived METER_MOD mesßgêwôh invÆid fœgs(%u).", 
	`¡ohs
(
sm
->
Êags
));

609  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPMMFC_BAD_FLAGS
);

612 i‡(
	`¡ohl
(
sm
->
mëî_id
Ë> 
OFPM_MAX
 &&

613 !(
	`¡ohs
(
sm
->
comm™d
Ë=
OFPMC_DELETE
 && 
	`¡ohl
(sm->
mëî_id
Ë=
OFPM_ALL
)) {

615  
	`oÊ_îr‹
(
OFPET_METER_MOD_FAILED
, 
OFPMMFC_INVALID_METER
);

618 
dm
 = (
oÊ_msg_mëî_mod
 *)
	`mÆloc
((ofl_msg_meter_mod));

620 
dm
->
comm™d
 = 
	`¡ohs
(
sm
->command);

621 
dm
->
Êags
 = 
	`¡ohs
(
sm
->flags);

622 
dm
->
mëî_id
 = 
	`¡ohl
(
sm
->meter_id);

624 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_mëî_b™ds
(&(
sm
->
b™ds
), *
Àn
, &
dm
->
mëî_b™ds_num
);

625 i‡(
îr‹
) {

626 
	`‰ì
(
dm
);

627  
îr‹
;

630 
dm
->
b™ds
 = (
oÊ_mëî_b™d_hódî
 **)
	`mÆloc
(dm->
mëî_b™ds_num
 * (ofl_meter_band_header *));

632 
b™d
 = 
sm
->
b™ds
;

633 
i
 = 0; i < 
dm
->
mëî_b™ds_num
; i++) {

634 
îr‹
 = 
	`oÊ_°ru˘s_mëî_b™d_u≈ack
(
b™d
, 
Àn
, &(
dm
->
b™ds
[
i
]));

635 i‡(
îr‹
) {

636 
	`OFL_UTILS_FREE_ARR_FUN
(
dm
->
b™ds
, 
i
,

637 
oÊ_°ru˘s_‰ì_mëî_b™ds
);

638 
	`‰ì
(
dm
);

639  
îr‹
;

641 
b™d
 = (
oÂ_mëî_b™d_hódî
 *)((
uöt8_t
 *)b™d + 
	`¡ohs
(b™d->
Àn
));

644 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

646 
	}
}

648 
oÊ_îr


649 
	$oÊ_msg_u≈ack_p‹t_mod
(
oÂ_hódî
 *
§c
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

650 
oÂ_p‹t_mod
 *
sm
;

651 
oÊ_msg_p‹t_mod
 *
dm
;

653 i‡(*
Àn
 < (
oÂ_p‹t_mod
)) {

654 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived PORT_MOD ha†övÆidÜígth (%zu).", *
Àn
);

655  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

658 
sm
 = (
oÂ_p‹t_mod
 *)
§c
;

668 *
Àn
 -(
oÂ_p‹t_mod
);

670 
dm
 = (
oÊ_msg_p‹t_mod
 *)
	`mÆloc
((ofl_msg_port_mod));

672 
dm
->
p‹t_no
 = 
	`¡ohl
(
sm
->port_no);

673 
	`mem˝y
(
dm
->
hw_addr
, 
sm
->hw_addr, 
OFP_ETH_ALEN
);

674 
dm
->
c⁄fig
 = 
	`¡ohl
(
sm
->config);

675 
dm
->
mask
 = 
	`¡ohl
(
sm
->mask);

676 
dm
->
advîti£
 = 
	`¡ohl
(
sm
->advertise);

678 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

680 
	}
}

682 
oÊ_îr


683 
	$oÊ_msg_u≈ack_èbÀ_mod
(
oÂ_hódî
 *
§c
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

684 
oÂ_èbÀ_mod
 *
sm
;

685 
oÊ_msg_èbÀ_mod
 *
dm
;

687 i‡(*
Àn
 < (
oÂ_èbÀ_mod
)) {

688 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived TABLE_MOD mesßgêha†övÆidÜígth (%zu).", *
Àn
);

689  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

691 *
Àn
 -(
oÂ_èbÀ_mod
);

693 
sm
 = (
oÂ_èbÀ_mod
 *)
§c
;

694 
dm
 = (
oÊ_msg_èbÀ_mod
 *)
	`mÆloc
((ofl_msg_table_mod));

695 i‡(
sm
->
èbÀ_id
 >
PIPELINE_TABLES
) {

696 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived TABLE_MOD mesßgêha†övÆidÅabÀ id (%zu).", 
sm
->
èbÀ_id
 );

697  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_TABLE_ID
);

700 
dm
->
èbÀ_id
 = 
sm
->table_id;

701 
dm
->
c⁄fig
 = 
	`¡ohl
(
sm
->config);

703 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

705 
	}
}

707 
oÊ_îr


708 
	$oÊ_msg_u≈ack_mu…ù¨t_ªque°_Êow
(
oÂ_mu…ù¨t_ªque°
 *
os
, 
uöt8_t
* 
buf
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
, 
oÊ_exp
 *
exp
) {

709 
oÂ_Êow_°©s_ªque°
 *
sm
;

710 
oÊ_msg_mu…ù¨t_ªque°_Êow
 *
dm
;

711 
oÊ_îr
 
îr‹
 = 0;

712 
m©ch_pos
;

716 i‡(*
Àn
 < ((
oÂ_Êow_°©s_ªque°
Ë- (
oÂ_m©ch
))) {

717 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived FLOW sèt†ªque° ha†övÆidÜígth (%zu).", *
Àn
);

718  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

720 *
Àn
 -((
oÂ_Êow_°©s_ªque°
Ë- (
oÂ_m©ch
));

722 
sm
 = (
oÂ_Êow_°©s_ªque°
 *)
os
->
body
;

723 
dm
 = (
oÊ_msg_mu…ù¨t_ªque°_Êow
 *Ë
	`mÆloc
((ofl_msg_multipart_request_flow));

725 i‡(
sm
->
èbÀ_id
 !
OFPTT_ALL
 && sm->èbÀ_id >
PIPELINE_TABLES
) {

726 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived MULTIPART REQUEST FLOW mesßgêha†övÆidÅabÀ id (%zu).", 
sm
->
èbÀ_id
 );

727  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_TABLE_ID
);

730 
dm
->
èbÀ_id
 = 
sm
->table_id;

731 
dm
->
out_p‹t
 = 
	`¡ohl
(
sm
->out_port);

732 
dm
->
out_group
 = 
	`¡ohl
(
sm
->out_group);

733 
dm
->
cookõ
 = 
	`¡oh64
(
sm
->cookie);

734 
dm
->
cookõ_mask
 = 
	`¡oh64
(
sm
->cookie_mask);

736 
m©ch_pos
 = (
oÂ_mu…ù¨t_ªque°
Ë+ (
oÂ_Êow_°©s_ªque°
) - 4;

737 
îr‹
 = 
	`oÊ_°ru˘s_m©ch_u≈ack
(&(
sm
->
m©ch
),
buf
 + 
m©ch_pos
, 
Àn
, &(
dm
->m©ch), 
exp
);

738 i‡(
îr‹
) {

739 
	`‰ì
(
dm
);

740  
îr‹
;

743 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

745 
	}
}

747 
oÊ_îr


748 
	$oÊ_msg_u≈ack_mu…ù¨t_ªque°_p‹t
(
oÂ_mu…ù¨t_ªque°
 *
os
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

749 
oÂ_p‹t_°©s_ªque°
 *
sm
;

750 
oÊ_msg_mu…ù¨t_ªque°_p‹t
 *
dm
;

754 i‡(*
Àn
 < (
oÂ_p‹t_°©s_ªque°
)) {

755 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived PORT sèt†ªque° ha†övÆidÜígth (%zu).", *
Àn
);

756  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

759 
sm
 = (
oÂ_p‹t_°©s_ªque°
 *)
os
->
body
;

761 i‡(
	`¡ohl
(
sm
->
p‹t_no
) == 0 ||

762 (
	`¡ohl
(
sm
->
p‹t_no
Ë> 
OFPP_MAX
 &&Çtohl(sm->p‹t_noË!
OFPP_ANY
)) {

763 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived PORT sèt†ªque° ha†övÆidÖ‹à(%u).", 
	`¡ohl
(
sm
->
p‹t_no
));

764  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

767 *
Àn
 -(
oÂ_p‹t_°©s_ªque°
);

769 
dm
 = (
oÊ_msg_mu…ù¨t_ªque°_p‹t
 *Ë
	`mÆloc
((ofl_msg_multipart_request_port));

771 
dm
->
p‹t_no
 = 
	`¡ohl
(
sm
->port_no);

773 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

775 
	}
}

777 
oÊ_îr


778 
	$oÊ_msg_u≈ack_mu…ù¨t_ªque°_em±y
(
oÂ_mu…ù¨t_ªque°
 *
os
 
UNUSED
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

780 
Àn
 -(
oÂ_mu…ù¨t_ªque°
);

782 *
msg
 = (
oÊ_msg_hódî
 *)
	`mÆloc
((
oÊ_msg_mu…ù¨t_ªque°_hódî
));

784 
	}
}

786 
oÊ_îr


787 
	$oÊ_msg_u≈ack_mu…ù¨t_ªque°_èbÀ_„©uªs
(
oÂ_mu…ù¨t_ªque°
 *
os
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
, 
oÊ_exp
 *
exp
){

788 
oÊ_msg_mu…ù¨t_ªque°_èbÀ_„©uªs
 *
dm
;

789 
oÊ_îr
 
îr‹
;

790 
uöt8_t
 *
„©uªs
;

791 
size_t
 
i
;

793 
dm
 = (
oÊ_msg_mu…ù¨t_ªque°_èbÀ_„©uªs
*Ë
	`mÆloc
((ofl_msg_multipart_request_table_features));

794 i‡(!(*
Àn
)){

795 
dm
->
èbÀs_num
 = 0;

796 
dm
->
èbÀ_„©uªs
 = 
NULL
;

797 *
msg
 = (
oÊ_msg_hódî
*Ë
dm
;

801 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_èbÀ_„©uªs
((
uöt8_t
*Ë
os
->
body
, *
Àn
, &
dm
->
èbÀs_num
);

802 i‡(
îr‹
) {

803 
	`‰ì
(
dm
);

804  
îr‹
;

806 
dm
->
èbÀ_„©uªs
 = (
oÊ_èbÀ_„©uªs
 **Ë
	`mÆloc
((oÊ_èbÀ_„©uª†*Ë* dm->
èbÀs_num
);

807 
„©uªs
 = (
uöt8_t
* ) 
os
->
body
;

809 
i
 = 0; i < 
dm
->
èbÀs_num
; i++){

810 
îr‹
 = 
	`oÊ_°ru˘s_èbÀ_„©uªs_u≈ack
((
oÂ_èbÀ_„©uªs
*Ë
„©uªs
, 
Àn
, &
dm
->
èbÀ_„©uªs
[
i
] , 
exp
);

811 
„©uªs
 +
	`¡ohs
(((
oÂ_èbÀ_„©uªs
*Ë„©uªs)->
Àngth
);

813 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

815 
	}
}

817 
oÊ_îr


818 
	$oÊ_msg_u≈ack_mu…ù¨t_ªque°_queue
(
oÂ_mu…ù¨t_ªque°
 *
os
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

819 
oÂ_queue_°©s_ªque°
 *
sm
;

820 
oÊ_msg_mu…ù¨t_ªque°_queue
 *
dm
;

824 i‡(*
Àn
 < (
oÂ_queue_°©s_ªque°
)) {

825 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived QUEUE sèt†ªque° ha†övÆidÜígth (%zu).", *
Àn
);

826  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

829 
sm
 = (
oÂ_queue_°©s_ªque°
 *)
os
->
body
;

831 i‡(
	`¡ohl
(
sm
->
p‹t_no
) == 0 ||

832 (
	`¡ohl
(
sm
->
p‹t_no
Ë> 
OFPP_MAX
 &&Çtohl(sm->p‹t_noË!
OFPP_ANY
)) {

833 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived QUEUE sèt†ªque° ha†övÆidÖ‹à(%u).", 
	`¡ohl
(
sm
->
p‹t_no
));

834  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

836 *
Àn
 -(
oÂ_queue_°©s_ªque°
);

838 
dm
 = (
oÊ_msg_mu…ù¨t_ªque°_queue
 *Ë
	`mÆloc
((ofl_msg_multipart_request_queue));

840 
dm
->
p‹t_no
 = 
	`¡ohl
(
sm
->port_no);

841 
dm
->
queue_id
 = 
	`¡ohl
(
sm
->queue_id);

843 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

845 
	}
}

847 
oÊ_îr


848 
	$oÊ_msg_u≈ack_mu…ù¨t_ªque°_group
(
oÂ_mu…ù¨t_ªque°
 *
os
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

849 
oÂ_group_°©s_ªque°
 *
sm
;

850 
oÊ_msg_mu…ù¨t_ªque°_group
 *
dm
;

854 i‡(*
Àn
 < (
oÂ_group_°©s_ªque°
)) {

855 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived GROUP sèt†ªque° ha†övÆidÜígth (%zu).", *
Àn
);

856  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

858 *
Àn
 -(
oÂ_group_°©s_ªque°
);

860 
sm
 = (
oÂ_group_°©s_ªque°
 *)
os
->
body
;

861 
dm
 = (
oÊ_msg_mu…ù¨t_ªque°_group
 *Ë
	`mÆloc
((ofl_msg_multipart_request_group));

863 
dm
->
group_id
 = 
	`¡ohl
(
sm
->group_id);

865 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

867 
	}
}

869 
oÊ_îr


870 
	$oÊ_msg_u≈ack_mëî_mu…ù¨t_ªque°
(
oÂ_mu…ù¨t_ªque°
 *
os
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

871 
oÂ_mëî_mu…ù¨t_ªque°
 *
sm
;

872 
oÊ_msg_mu…ù¨t_mëî_ªque°
 *
dm
;

876 i‡(*
Àn
 < (
oÂ_mëî_mu…ù¨t_ªque°
)) {

877 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived METER mu…ù¨àªque° ha†övÆidÜígth (%zu).", *
Àn
);

878  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

880 *
Àn
 -(
oÂ_mëî_mu…ù¨t_ªque°
);

882 
sm
 = (
oÂ_mëî_mu…ù¨t_ªque°
 *)
os
->
body
;

883 
dm
 = (
oÊ_msg_mu…ù¨t_mëî_ªque°
 *Ë
	`mÆloc
((ofl_msg_multipart_meter_request));

885 
dm
->
mëî_id
 = 
	`¡ohl
(
sm
->meter_id);

887 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

889 
	}
}

891 
oÊ_îr


892 
	$oÊ_msg_u≈ack_mu…ù¨t_ªque°
(
oÂ_hódî
 *
§c
,
uöt8_t
 *
buf
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
, 
oÊ_exp
 *
exp
) {

893 
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
oÊs
;

894 
oÂ_mu…ù¨t_ªque°
 *
os
;

895 
îr‹
;

897 i‡(*
Àn
 < (
oÂ_mu…ù¨t_ªque°
)) {

898 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived STATS_REQUEST mesßgêha†övÆidÜígth (%zu).", *
Àn
);

899  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

901 *
Àn
 -(
oÂ_mu…ù¨t_ªque°
);

903 
os
 = (
oÂ_mu…ù¨t_ªque°
 *)
§c
;

905 
	`¡ohs
(
os
->
ty≥
)) {

906 
OFPMP_DESC
: {

907 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ªque°_em±y
(
os
, 
Àn
, 
msg
);

910 
OFPMP_FLOW
:

911 
OFPMP_AGGREGATE
: {

912 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ªque°_Êow
(
os
,
buf
, 
Àn
, 
msg
, 
exp
);

915 
OFPMP_TABLE
: {

916 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ªque°_em±y
(
os
, 
Àn
, 
msg
);

919 
OFPMP_TABLE_FEATURES
:{

920 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ªque°_èbÀ_„©uªs
(
os
, 
Àn
, 
msg
, 
exp
);

923 
OFPMP_PORT_STATS
: {

924 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ªque°_p‹t
(
os
, 
Àn
, 
msg
);

927 
OFPMP_QUEUE
: {

928 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ªque°_queue
(
os
, 
Àn
, 
msg
);

931 
OFPMP_GROUP
: {

932 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ªque°_group
(
os
, 
Àn
, 
msg
);

935 
OFPMP_GROUP_DESC
: {

936 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ªque°_em±y
(
os
, 
Àn
, 
msg
);

939 
OFPMP_GROUP_FEATURES
:{

940 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ªque°_em±y
(
os
, 
Àn
, 
msg
);

943 
OFPMP_METER
:

944 
OFPMP_METER_CONFIG
:{

945 
îr‹
 = 
	`oÊ_msg_u≈ack_mëî_mu…ù¨t_ªque°
(
os
, 
Àn
, 
msg
);

948 
OFPMP_METER_FEATURES
:{

949 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ªque°_em±y
(
os
, 
Àn
, 
msg
);

952 
OFPMP_PORT_DESC
: {

953 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ªque°_em±y
(
os
, 
Àn
, 
msg
);

956 
OFPMP_EXPERIMENTER
: {

957 i‡(
exp
 =
NULL
 ||Éxp->
°©s
 =NULL ||Éxp->°©s->
ª∂y_u≈ack
 == NULL) {

958 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received EXPERIMENTER statsÑequest, butÇo callback was given.");

959 
îr‹
 = 
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_MULTIPART
);

961 
îr‹
 = 
exp
->
°©s
->
	`ªq_u≈ack
(
os
, 
Àn
, (
oÊ_msg_mu…ù¨t_ªque°_hódî
 **)
msg
);

966 
îr‹
 = 
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_MULTIPART
);

970 i‡(
îr‹
) {

971  
îr‹
;

974 
oÊs
 = (
oÊ_msg_mu…ù¨t_ªque°_hódî
 *)(*
msg
);

975 
oÊs
->
ty≥
 = (
oÂ_mu…ù¨t_ty≥s
)
	`¡ohs
(
os
->type);

976 
oÊs
->
Êags
 = 
	`¡ohs
(
os
->flags);

979 
	}
}

981 
oÊ_îr


982 
	$oÊ_msg_u≈ack_ª∂y_desc
(
oÂ_mu…ù¨t_ª∂y
 *
os
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

983 
oÂ_desc
 *
sm
;

984 
oÊ_msg_ª∂y_desc
 *
dm
;

986 i‡(*
Àn
 < (
oÂ_desc
)) {

987 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived DESC sèt†ª∂y ha†övÆidÜígth (%zu).", *
Àn
);

988  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

990 *
Àn
 -(
oÂ_desc
);

992 
sm
 = (
oÂ_desc
 *)
os
->
body
;

993 
dm
 = (
oÊ_msg_ª∂y_desc
 *Ë
	`mÆloc
((ofl_msg_reply_desc));

995 
dm
->
m‰_desc
 = (*)
	`°r˝y
((*)
	`mÆloc
(
	`°æí
(
sm
->mfr_desc) + 1), sm->mfr_desc);

996 
dm
->
hw_desc
 = (*)
	`°r˝y
((*)
	`mÆloc
(
	`°æí
(
sm
->hw_desc) + 1), sm->hw_desc);

997 
dm
->
sw_desc
 = (*)
	`°r˝y
((*)
	`mÆloc
(
	`°æí
(
sm
->sw_desc) + 1), sm->sw_desc);

998 
dm
->
£rül_num
 = (*)
	`°r˝y
((*)
	`mÆloc
(
	`°æí
(
sm
->serial_num) + 1), sm->serial_num);

999 
dm
->
dp_desc
 = (*)
	`°r˝y
((*)
	`mÆloc
(
	`°æí
(
sm
->dp_desc) + 1), sm->dp_desc);

1001 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

1003 
	}
}

1006 
oÊ_îr


1007 
	$oÊ_msg_u≈ack_mu…ù¨t_ª∂y_Êow
(
oÂ_mu…ù¨t_ª∂y
 *
os
, 
uöt8_t
 *
buf
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
, 
oÊ_exp
 *
exp
) {

1008 
oÂ_Êow_°©s
 *
°©
;

1009 
oÊ_msg_mu…ù¨t_ª∂y_Êow
 *
dm
;

1010 
oÊ_îr
 
îr‹
;

1011 
size_t
 
i
, 
öi_Àn
;

1012 
uöt8_t
 *
±r
;

1015 
°©
 = (
oÂ_Êow_°©s
 *)
os
->
body
;

1016 
dm
 = (
oÊ_msg_mu…ù¨t_ª∂y_Êow
 *)
	`mÆloc
((ofl_msg_multipart_reply_flow));

1018 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_Êow_°©s
(
°©
, *
Àn
, &
dm
->
°©s_num
);

1019 i‡(
îr‹
) {

1020 
	`‰ì
(
dm
);

1021  
îr‹
;

1023 
dm
->
°©s
 = (
oÊ_Êow_°©s
 **)
	`mÆloc
(dm->
°©s_num
 * (ofl_flow_stats *));

1025 
öi_Àn
 = *
Àn
;

1026 
±r
 = 
buf
 + (
oÂ_mu…ù¨t_ª∂y
);

1027 
i
 = 0; i < 
dm
->
°©s_num
; i++) {

1028 
îr‹
 = 
	`oÊ_°ru˘s_Êow_°©s_u≈ack
(
°©
, 
±r
, 
Àn
, &(
dm
->
°©s
[
i
]), 
exp
);

1029 
±r
 +
öi_Àn
 - *
Àn
;

1030 
öi_Àn
 = *
Àn
;

1031 i‡(
îr‹
) {

1032 
	`OFL_UTILS_FREE_ARR_FUN2
(
dm
->
°©s
, 
i
,

1033 
oÊ_°ru˘s_‰ì_Êow_°©s
, 
exp
);

1034 
	`‰ì
 (
dm
);

1035  
îr‹
;

1037 
°©
 = (
oÂ_Êow_°©s
 *)((
uöt8_t
 *)°© + 
	`¡ohs
(°©->
Àngth
));

1040 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

1042 
	}
}

1044 
oÊ_îr


1045 
	$oÊ_msg_u≈ack_mu…ù¨t_ª∂y_aggªg©e
(
oÂ_mu…ù¨t_ª∂y
 *
os
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

1046 
oÂ_aggªg©e_°©s_ª∂y
 *
sm
;

1047 
oÊ_msg_mu…ù¨t_ª∂y_aggªg©e
 *
dm
;

1051 i‡(*
Àn
 < (
oÂ_aggªg©e_°©s_ª∂y
)) {

1052 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived AGGREGATE sèt†ª∂y ha†övÆidÜígth (%zu).", *
Àn
);

1053  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

1055 *
Àn
 -(
oÂ_aggªg©e_°©s_ª∂y
);

1057 
sm
 = (
oÂ_aggªg©e_°©s_ª∂y
 *)
os
->
body
;

1058 
dm
 = (
oÊ_msg_mu…ù¨t_ª∂y_aggªg©e
 *Ë
	`mÆloc
((ofl_msg_multipart_reply_aggregate));

1060 
dm
->
∑ckë_cou¡
 = 
	`¡oh64
(
sm
->packet_count);

1061 
dm
->
byã_cou¡
 = 
	`¡oh64
(
sm
->byte_count);

1062 
dm
->
Êow_cou¡
 = 
	`¡ohl
–
sm
->flow_count);

1064 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

1066 
	}
}

1068 
oÊ_îr


1069 
	$oÊ_msg_u≈ack_mu…ù¨t_ª∂y_èbÀ
(
oÂ_mu…ù¨t_ª∂y
 *
os
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

1070 
oÂ_èbÀ_°©s
 *
°©
;

1071 
oÊ_msg_mu…ù¨t_ª∂y_èbÀ
 *
dm
;

1072 
oÊ_îr
 
îr‹
;

1073 
size_t
 
i
;

1077 
°©
 = (
oÂ_èbÀ_°©s
 *)
os
->
body
;

1078 
dm
 = (
oÊ_msg_mu…ù¨t_ª∂y_èbÀ
 *Ë
	`mÆloc
((ofl_msg_multipart_reply_table));

1080 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_èbÀ_°©s
(
°©
, *
Àn
, &
dm
->
°©s_num
);

1081 i‡(
îr‹
) {

1082 
	`‰ì
(
dm
);

1083  
îr‹
;

1085 
dm
->
°©s
 = (
oÊ_èbÀ_°©s
 **)
	`mÆloc
(dm->
°©s_num
 * (ofl_table_stats *));

1087 
i
 = 0; i < 
dm
->
°©s_num
; i++) {

1088 
îr‹
 = 
	`oÊ_°ru˘s_èbÀ_°©s_u≈ack
(
°©
, 
Àn
, &(
dm
->
°©s
[
i
]));

1089 i‡(
îr‹
) {

1090 
	`OFL_UTILS_FREE_ARR
(
dm
->
°©s
, 
i
);

1091 
	`‰ì
(
dm
);

1092  
îr‹
;

1094 
°©
 = (
oÂ_èbÀ_°©s
 *)((
uöt8_t
 *)stat + (ofp_table_stats));

1097 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

1099 
	}
}

1101 
oÊ_îr


1102 
	$oÊ_msg_u≈ack_mu…ù¨t_ª∂y_p‹t
(
oÂ_mu…ù¨t_ª∂y
 *
os
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

1103 
oÂ_p‹t_°©s
 *
°©
 = (oÂ_p‹t_°©†*)
os
->
body
;

1104 
oÊ_msg_mu…ù¨t_ª∂y_p‹t
 *
dm
 = (oÊ_msg_mu…ù¨t_ª∂y_p‹à*Ë
	`mÆloc
((ofl_msg_multipart_reply_port));

1105 
oÊ_îr
 
îr‹
;

1106 
size_t
 
i
;

1110 
°©
 = (
oÂ_p‹t_°©s
 *)
os
->
body
;

1111 
dm
 = (
oÊ_msg_mu…ù¨t_ª∂y_p‹t
 *Ë
	`mÆloc
((ofl_msg_multipart_reply_port));

1113 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_p‹t_°©s
(
°©
, *
Àn
, &
dm
->
°©s_num
);

1114 i‡(
îr‹
) {

1115 
	`‰ì
(
dm
);

1116  
îr‹
;

1119 
dm
->
°©s
 = (
oÊ_p‹t_°©s
 **)
	`mÆloc
(dm->
°©s_num
 * (ofl_port_stats *));

1121 
i
 = 0; i < 
dm
->
°©s_num
; i++) {

1122 
îr‹
 = 
	`oÊ_°ru˘s_p‹t_°©s_u≈ack
(
°©
, 
Àn
, &(
dm
->
°©s
[
i
]));

1123 i‡(
îr‹
) {

1124 
	`OFL_UTILS_FREE_ARR
(
dm
->
°©s
, 
i
);

1125 
	`‰ì
(
dm
);

1126  
îr‹
;

1128 
°©
 = (
oÂ_p‹t_°©s
 *)((
uöt8_t
 *)stat + (ofp_port_stats));

1131 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

1133 
	}
}

1135 
oÊ_îr


1136 
	$oÊ_msg_u≈ack_mu…ù¨t_ª∂y_queue
(
oÂ_mu…ù¨t_ª∂y
 *
os
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

1137 
oÂ_queue_°©s
 *
°©
 = (oÂ_queue_°©†*)
os
->
body
;

1138 
oÊ_msg_mu…ù¨t_ª∂y_queue
 *
dm
 = (oÊ_msg_mu…ù¨t_ª∂y_queuê*Ë
	`mÆloc
((ofl_msg_multipart_reply_queue));

1139 
oÊ_îr
 
îr‹
;

1140 
size_t
 
i
;

1144 
°©
 = (
oÂ_queue_°©s
 *)
os
->
body
;

1145 
dm
 = (
oÊ_msg_mu…ù¨t_ª∂y_queue
 *Ë
	`mÆloc
((ofl_msg_multipart_reply_queue));

1147 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_queue_°©s
(
°©
, *
Àn
, &
dm
->
°©s_num
);

1148 i‡(
îr‹
) {

1149 
	`‰ì
(
dm
);

1150  
îr‹
;

1152 
dm
->
°©s
 = (
oÊ_queue_°©s
 **)
	`mÆloc
(dm->
°©s_num
 * (ofl_queue_stats *));

1153 
i
 = 0; i < 
dm
->
°©s_num
; i++) {

1154 
îr‹
 = 
	`oÊ_°ru˘s_queue_°©s_u≈ack
(
°©
, 
Àn
, &(
dm
->
°©s
[
i
]));

1155 i‡(
îr‹
) {

1156 
	`OFL_UTILS_FREE_ARR
(
dm
->
°©s
, 
i
);

1157 
	`‰ì
(
dm
);

1158  
îr‹
;

1160 
°©
 = (
oÂ_queue_°©s
 *)((
uöt8_t
 *)stat + (ofp_queue_stats));

1163 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

1165 
	}
}

1167 
oÊ_îr


1168 
	$oÊ_msg_u≈ack_mu…ù¨t_ª∂y_group
(
oÂ_mu…ù¨t_ª∂y
 *
os
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

1169 
oÂ_group_°©s
 *
°©
;

1170 
oÊ_msg_mu…ù¨t_ª∂y_group
 *
dm
;

1171 
oÊ_îr
 
îr‹
;

1172 
size_t
 
i
;

1176 
°©
 = (
oÂ_group_°©s
 *)
os
->
body
;

1177 
dm
 = (
oÊ_msg_mu…ù¨t_ª∂y_group
 *Ë
	`mÆloc
((ofl_msg_multipart_reply_group));

1179 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_group_°©s
(
°©
, *
Àn
, &
dm
->
°©s_num
);

1180 i‡(
îr‹
) {

1181 
	`‰ì
(
dm
);

1182  
îr‹
;

1184 
dm
->
°©s
 = (
oÊ_group_°©s
 **)
	`mÆloc
(dm->
°©s_num
 * (ofl_group_stats *));

1186 
i
 = 0; i < 
dm
->
°©s_num
; i++) {

1187 
îr‹
 = 
	`oÊ_°ru˘s_group_°©s_u≈ack
(
°©
, 
Àn
, &(
dm
->
°©s
[
i
]));

1188 i‡(
îr‹
) {

1189 
	`OFL_UTILS_FREE_ARR_FUN
(
dm
->
°©s
, 
i
,

1190 
oÊ_°ru˘s_‰ì_group_°©s
);

1191 
	`‰ì
 (
dm
);

1192  
îr‹
;

1194 
°©
 = (
oÂ_group_°©s
 *)((
uöt8_t
 *)°© + 
	`¡ohs
(°©->
Àngth
));

1197 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

1199 
	}
}

1201 
oÊ_îr


1202 
	$oÊ_msg_u≈ack_mu…ù¨t_ª∂y_group_desc
(
oÂ_mu…ù¨t_ª∂y
 *
os
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
, 
oÊ_exp
 *
exp
) {

1203 
oÂ_group_desc_°©s
 *
°©
;

1204 
oÊ_msg_mu…ù¨t_ª∂y_group_desc
 *
dm
;

1205 
oÊ_îr
 
îr‹
;

1206 
size_t
 
i
;

1210 
°©
 = (
oÂ_group_desc_°©s
 *)
os
->
body
;

1211 
dm
 = (
oÊ_msg_mu…ù¨t_ª∂y_group_desc
 *Ë
	`mÆloc
((ofl_msg_multipart_reply_group_desc));

1213 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_group_desc_°©s
(
°©
, *
Àn
, &
dm
->
°©s_num
);

1214 i‡(
îr‹
) {

1215 
	`‰ì
(
dm
);

1216  
îr‹
;

1218 
dm
->
°©s
 = (
oÊ_group_desc_°©s
 **)
	`mÆloc
(dm->
°©s_num
 * (ofl_group_desc_stats *));

1220 
i
 = 0; i < 
dm
->
°©s_num
; i++) {

1221 
îr‹
 = 
	`oÊ_°ru˘s_group_desc_°©s_u≈ack
(
°©
, 
Àn
, &(
dm
->
°©s
[
i
]), 
exp
);

1222 i‡(
îr‹
) {

1223 
	`OFL_UTILS_FREE_ARR_FUN2
(
dm
->
°©s
, 
i
,

1224 
oÊ_°ru˘s_‰ì_group_desc_°©s
, 
exp
);

1225 
	`‰ì
 (
dm
);

1226  
îr‹
;

1228 
°©
 = (
oÂ_group_desc_°©s
 *)((
uöt8_t
 *)°© + 
	`¡ohs
(°©->
Àngth
));

1231 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

1233 
	}
}

1235 
oÊ_îr


1236 
	$oÊ_msg_u≈ack_mu…ù¨t_ª∂y_group_„©uªs
(
oÂ_mu…ù¨t_ª∂y
 *
os
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

1237 
oÂ_group_„©uªs_°©s
 *
sm
;

1238 
oÊ_msg_mu…ù¨t_ª∂y_group_„©uªs
 *
dm
;

1239 
i
;

1240 i‡(*
Àn
 < (
oÂ_group_„©uªs_°©s
)) {

1241 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived OFPMP_GROUP_FEATURES sèt†ª∂y ha†övÆidÜígth (%zu).", *
Àn
);

1242  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

1244 *
Àn
 -(
oÂ_group_„©uªs_°©s
);

1246 
sm
 = (
oÂ_group_„©uªs_°©s
 *)
os
->
body
;

1247 
dm
 = (
oÊ_msg_mu…ù¨t_ª∂y_group_„©uªs
 *Ë
	`mÆloc
((ofl_msg_multipart_reply_group_features));

1249 
dm
->
ty≥s
 = 
	`¡ohl
(
sm
->types);

1250 
dm
->
ˇ∑bûôõs
 = 
	`¡ohl
(
sm
->capabilities);

1251 
i
 = 0; i < 4; i++){

1252 
dm
->
max_groups
[
i
] = 
	`¡ohl
(
sm
->max_groups[i]);

1253 
dm
->
a˘i⁄s
[
i
] = 
	`¡ohl
(
sm
->actions[i]);

1256 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

1258 
	}
}

1260 
oÊ_îr


1261 
	$oÊ_msg_u≈ack_mu…ù¨t_ª∂y_èbÀ_„©uªs
(
oÂ_mu…ù¨t_ª∂y
 *
§c
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
, 
oÊ_exp
 *
exp
){

1262 
oÊ_msg_mu…ù¨t_ª∂y_èbÀ_„©uªs
 *
dm
;

1263 
i
;

1264 
oÊ_îr
 
îr‹
;

1265 
uöt8_t
 *
„©uªs
;

1267 
dm
 = (
oÊ_msg_mu…ù¨t_ª∂y_èbÀ_„©uªs
*Ë
	`mÆloc
((ofl_msg_multipart_reply_table_features) );

1269 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_èbÀ_„©uªs
((
uöt8_t
*Ë
§c
->
body
, *
Àn
, &
dm
->
èbÀs_num
);

1270 i‡(
îr‹
) {

1271 
	`‰ì
(
dm
);

1272  
îr‹
;

1274 
dm
->
èbÀ_„©uªs
 = (
oÊ_èbÀ_„©uªs
 **Ë
	`mÆloc
((oÊ_èbÀ_„©uª†*Ë* dm->
èbÀs_num
);

1275 
„©uªs
 = (
uöt8_t
* ) 
§c
->
body
;

1277 
i
 = 0; i < 
dm
->
èbÀs_num
; i++){

1278 
îr‹
 = 
	`oÊ_°ru˘s_èbÀ_„©uªs_u≈ack
((
oÂ_èbÀ_„©uªs
*Ë
„©uªs
, 
Àn
, &
dm
->
èbÀ_„©uªs
[
i
] , 
exp
);

1279 
„©uªs
 +
	`¡ohs
(((
oÂ_èbÀ_„©uªs
*Ë„©uªs)->
Àngth
);

1281 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

1283 
	}
}

1285 
oÊ_îr


1286 
	$oÊ_msg_u≈ack_mu…ù¨t_ª∂y_mëî_°©s
(
oÂ_mu…ù¨t_ª∂y
 *
os
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

1287 
oÂ_mëî_°©s
 *
°©
;

1288 
oÊ_msg_mu…ù¨t_ª∂y_mëî
 *
dm
;

1289 
oÊ_îr
 
îr‹
;

1290 
size_t
 
i
;

1294 
°©
 = (
oÂ_mëî_°©s
 *)
os
->
body
;

1295 
dm
 = (
oÊ_msg_mu…ù¨t_ª∂y_mëî
 *Ë
	`mÆloc
((ofl_msg_multipart_reply_meter));

1297 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_mëî_°©s
(
°©
, *
Àn
, &
dm
->
°©s_num
);

1298 i‡(
îr‹
) {

1299 
	`‰ì
(
dm
);

1300  
îr‹
;

1302 
dm
->
°©s
 = (
oÊ_mëî_°©s
 **)
	`mÆloc
(dm->
°©s_num
 * (ofl_meter_stats *));

1304 
i
 = 0; i < 
dm
->
°©s_num
; i++) {

1305 
îr‹
 = 
	`oÊ_°ru˘s_mëî_°©s_u≈ack
(
°©
, 
Àn
, &(
dm
->
°©s
[
i
]));

1306 i‡(
îr‹
) {

1307 
	`OFL_UTILS_FREE_ARR_FUN
(
dm
->
°©s
, 
i
,

1308 
oÊ_°ru˘s_‰ì_mëî_°©s
);

1309 
	`‰ì
 (
dm
);

1310  
îr‹
;

1312 
°©
 = (
oÂ_mëî_°©s
 *)((
uöt8_t
 *)°© + 
	`¡ohs
(°©->
Àn
));

1315 *
msg
 = (
oÊ_msg_hódî
 *)
dm
;

1317 
	}
}

1319 
oÊ_îr


1320 
	$oÊ_msg_u≈ack_mu…ù¨t_ª∂y_mëî_c⁄fig
(
oÂ_mu…ù¨t_ª∂y
 *
os
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
){

1321 
oÂ_mëî_c⁄fig
 *
c⁄f
;

1322 
oÊ_msg_mu…ù¨t_ª∂y_mëî_c⁄f
 *
dm
;

1323 
oÊ_îr
 
îr‹
;

1324 
size_t
 
i
;

1326 
c⁄f
 = (
oÂ_mëî_c⁄fig
*Ë
os
->
body
;

1327 
dm
 = (
oÊ_msg_mu…ù¨t_ª∂y_mëî_c⁄f
 *Ë
	`mÆloc
((ofl_msg_multipart_reply_meter_conf));

1329 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_mëî_c⁄fig
(
c⁄f
, *
Àn
, &
dm
->
°©s_num
);

1330 i‡(
îr‹
) {

1331 
	`‰ì
(
dm
);

1332  
îr‹
;

1335 
dm
->
°©s
 = (
oÊ_mëî_c⁄fig
 **)
	`mÆloc
(dm->
°©s_num
 * (ofl_meter_config *));

1337 
i
 = 0; i < 
dm
->
°©s_num
; i++) {

1338 
îr‹
 = 
	`oÊ_°ru˘s_mëî_c⁄fig_u≈ack
(
c⁄f
, 
Àn
, &(
dm
->
°©s
[
i
]));

1339 i‡(
îr‹
) {

1340 
	`OFL_UTILS_FREE_ARR_FUN
(
dm
->
°©s
, 
i
,

1341 
oÊ_°ru˘s_‰ì_mëî_c⁄fig
);

1342 
	`‰ì
 (
dm
);

1343  
îr‹
;

1345 
c⁄f
 = (
oÂ_mëî_c⁄fig
 *)((
uöt8_t
 *)c⁄‡+ 
	`¡ohs
(c⁄f->
Àngth
));

1349 *
msg
 = (
oÊ_msg_hódî
*Ë
dm
;

1351 
	}
}

1353 
oÊ_îr


1354 
	$oÊ_msg_u≈ack_mu…ù¨t_ª∂y_p‹t_desc
(
oÂ_mu…ù¨t_ª∂y
 *
§c
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

1355 
oÂ_p‹t
 *
p‹t
;

1356 
oÊ_msg_mu…ù¨t_ª∂y_p‹t_desc
 *
pd
;

1357 
oÊ_îr
 
îr‹
;

1358 
size_t
 
i
;

1359 
p‹t
 = (
oÂ_p‹t
* )
§c
->
body
;

1360 
pd
 = (
oÊ_msg_mu…ù¨t_ª∂y_p‹t_desc
*Ë
	`mÆloc
((ofl_msg_multipart_reply_port_desc));

1362 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_p‹ts
(
p‹t
, *
Àn
, &
pd
->
°©s_num
);

1363 i‡(
îr‹
) {

1364 
	`‰ì
(
pd
);

1365  
îr‹
;

1368 
pd
->
°©s
 = (
oÊ_p‹t
**Ë
	`mÆloc
’d->
°©s_num
 * (ofl_port));

1369 
i
 = 0; i < 
pd
->
°©s_num
; i++){

1370 
îr‹
 = 
	`oÊ_°ru˘s_p‹t_u≈ack
(
p‹t
, 
Àn
, &
pd
->
°©s
[
i
]);

1371 i‡(
îr‹
) {

1372 
	`OFL_UTILS_FREE_ARR_FUN
(
pd
->
°©s
, 
i
,

1373 
oÊ_°ru˘s_‰ì_p‹t
);

1374 
	`‰ì
 (
pd
);

1375  
îr‹
;

1377 
p‹t
 = (
oÂ_p‹t
 *)((
uöt8_t
 *)port + (ofp_port));

1379 *
msg
 = (
oÊ_msg_hódî
 *)
pd
;

1381 
	}
}

1383 
oÊ_îr


1384 
	$oÊ_msg_u≈ack_mu…ù¨t_ª∂y_mëî_„©uªs
(
oÂ_mu…ù¨t_ª∂y
 *
os
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

1385 
oÂ_mëî_„©uªs
 *
§c
;

1386 
oÊ_msg_mu…ù¨t_ª∂y_mëî_„©uªs
 *
d°
;

1388 if(*
Àn
 < (
oÂ_mëî_„©uªs
)){

1389 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived MULTIPART REPLY mesßgêha†övÆidÜígth (%zu).", *
Àn
);

1390  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

1393 *
Àn
 -(
oÂ_mëî_„©uªs
);

1394 
§c
 = (
oÂ_mëî_„©uªs
*Ë
os
->
body
;

1395 
d°
 = (
oÊ_msg_mu…ù¨t_ª∂y_mëî_„©uªs
*Ë
	`mÆloc
((ofl_msg_multipart_reply_meter_features));

1396 
d°
->
„©uªs
 = (
oÊ_mëî_„©uªs
*Ë
	`mÆloc
((ofl_meter_features));

1398 
d°
->
„©uªs
->
max_mëî
 = 
	`¡ohl
(
§c
->max_meter);

1399 
d°
->
„©uªs
->
b™d_ty≥s
 = 
	`¡ohl
(
§c
->band_types);

1400 
d°
->
„©uªs
->
ˇ∑bûôõs
 = 
	`¡ohl
(
§c
->capabilities);

1401 
d°
->
„©uªs
->
max_b™ds
 = 
§c
->max_bands;

1402 
d°
->
„©uªs
->
max_cﬁ‹
 = 
§c
->max_color;

1404 *
msg
 = (
oÊ_msg_hódî
*Ë
d°
;

1406 
	}
}

1408 
oÊ_îr


1409 
	$oÊ_msg_u≈ack_mu…ù¨t_ª∂y
(
oÂ_hódî
 *
§c
, 
uöt8_t
 *
buf
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
, 
oÊ_exp
 *
exp
) {

1410 
oÊ_msg_mu…ù¨t_ª∂y_hódî
 *
oÊs
;

1411 
oÂ_mu…ù¨t_ª∂y
 *
os
;

1412 
îr‹
;

1414 i‡(*
Àn
 < (
oÂ_mu…ù¨t_ª∂y
)) {

1415 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived MULTIPART REPLY mesßgêha†övÆidÜígth (%zu).", *
Àn
);

1416  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

1418 *
Àn
 -(
oÂ_mu…ù¨t_ª∂y
);

1419 
os
 = (
oÂ_mu…ù¨t_ª∂y
 *)
§c
;

1420 
	`¡ohs
(
os
->
ty≥
)) {

1421 
OFPMP_DESC
: {

1422 
îr‹
 = 
	`oÊ_msg_u≈ack_ª∂y_desc
(
os
, 
Àn
, 
msg
);

1425 
OFPMP_FLOW
: {

1426 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ª∂y_Êow
(
os
,
buf
, 
Àn
, 
msg
, 
exp
);

1429 
OFPMP_AGGREGATE
: {

1430 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ª∂y_aggªg©e
(
os
, 
Àn
, 
msg
);

1433 
OFPMP_TABLE
: {

1434 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ª∂y_èbÀ
(
os
, 
Àn
, 
msg
);

1437 
OFPMP_TABLE_FEATURES
: {

1438 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ª∂y_èbÀ_„©uªs
(
os
, 
Àn
, 
msg
, 
exp
);

1441 
OFPMP_PORT_STATS
: {

1442 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ª∂y_p‹t
(
os
, 
Àn
, 
msg
);

1445 
OFPMP_QUEUE
: {

1446 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ª∂y_queue
(
os
, 
Àn
, 
msg
);

1449 
OFPMP_GROUP
: {

1450 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ª∂y_group
(
os
, 
Àn
, 
msg
);

1453 
OFPMP_GROUP_DESC
: {

1454 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ª∂y_group_desc
(
os
, 
Àn
, 
msg
, 
exp
);

1457 
OFPMP_GROUP_FEATURES
:{

1458 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ª∂y_group_„©uªs
(
os
, 
Àn
, 
msg
);

1461 
OFPMP_METER
:{

1462 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ª∂y_mëî_°©s
(
os
, 
Àn
, 
msg
);

1465 
OFPMP_METER_CONFIG
:{

1466 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ª∂y_mëî_c⁄fig
(
os
, 
Àn
, 
msg
);

1469 
OFPMP_METER_FEATURES
:{

1470 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ª∂y_mëî_„©uªs
(
os
, 
Àn
, 
msg
);

1473 
OFPMP_PORT_DESC
:{

1474 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ª∂y_p‹t_desc
(
os
, 
Àn
, 
msg
);

1477 
OFPMP_EXPERIMENTER
: {

1478 i‡(
exp
 =
NULL
 ||Éxp->
°©s
 =NULL ||Éxp->°©s->
ª∂y_u≈ack
 == NULL) {

1479 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received EXPERIMENTER statsÑeply, butÇo callback was given.");

1480 
îr‹
 = 
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_MULTIPART
);

1482 
îr‹
 = 
exp
->
°©s
->
	`ª∂y_u≈ack
(
os
, 
Àn
, (
oÊ_msg_mu…ù¨t_ª∂y_hódî
 **)
msg
);

1487 
îr‹
 = 
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_MULTIPART
);

1491 i‡(
îr‹
) {

1492  
îr‹
;

1495 
oÊs
 = (
oÊ_msg_mu…ù¨t_ª∂y_hódî
 *)(*
msg
);

1496 
oÊs
->
ty≥
 = (
oÂ_mu…ù¨t_ty≥s
)
	`¡ohs
(
os
->type);

1497 
oÊs
->
Êags
 = 
	`¡ohs
(
os
->flags);

1500 
	}
}

1502 
oÊ_îr


1503 
	$oÊ_msg_u≈ack_queue_gë_c⁄fig_ªque°
(
oÂ_hódî
 *
§c
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

1504 
oÂ_queue_gë_c⁄fig_ªque°
 *
§
;

1505 
oÊ_msg_queue_gë_c⁄fig_ªque°
 *
dr
;

1507 i‡(*
Àn
 < (
oÂ_group_desc_°©s
)) {

1508 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived GET_CONFIG_REQUEST mesßgêha†övÆidÜígth (%zu).", *
Àn
);

1509  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

1512 
§
 = (
oÂ_queue_gë_c⁄fig_ªque°
 *)
§c
;

1514 i‡(
	`¡ohl
(
§
->
p‹t
Ë=0 ||Çtohl(§->p‹tË> 
OFPP_ANY
) {

1515 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived GET_CONFIG_REQUEST mesßgêha†övÆidÖ‹à(%u).", 
	`¡ohl
(
§
->
p‹t
));

1516  
	`oÊ_îr‹
(
OFPET_QUEUE_OP_FAILED
, 
OFPQOFC_BAD_PORT
);

1518 *
Àn
 -(
oÂ_queue_gë_c⁄fig_ªque°
);

1520 
dr
 = (
oÊ_msg_queue_gë_c⁄fig_ªque°
 *)
	`mÆloc
((ofl_msg_queue_get_config_request));

1522 
dr
->
p‹t
 = 
	`¡ohl
(
§
->port);

1524 *
msg
 = (
oÊ_msg_hódî
 *)
dr
;

1526 
	}
}

1528 
oÊ_îr


1529 
	$oÊ_msg_u≈ack_queue_gë_c⁄fig_ª∂y
(
oÂ_hódî
 *
§c
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

1530 
oÂ_queue_gë_c⁄fig_ª∂y
 *
§
;

1531 
oÊ_msg_queue_gë_c⁄fig_ª∂y
 *
dr
;

1532 
oÂ_∑ckë_queue
 *
queue
;

1533 
oÊ_îr
 
îr‹
;

1534 
size_t
 
i
;

1536 i‡(*
Àn
 < (
oÂ_queue_gë_c⁄fig_ª∂y
)) {

1537 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived GET_CONFIG_REPLY ha†övÆidÜígth (%zu).", *
Àn
);

1538  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

1540 *
Àn
 -(
oÂ_queue_gë_c⁄fig_ª∂y
);

1542 
§
 = (
oÂ_queue_gë_c⁄fig_ª∂y
 *)
§c
;

1543 
dr
 = (
oÊ_msg_queue_gë_c⁄fig_ª∂y
 *)
	`mÆloc
((ofl_msg_queue_get_config_reply));

1545 
dr
->
p‹t
 = 
	`¡ohl
(
§
->port);

1547 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_∑ckë_queues
(&(
§
->
queues
), *
Àn
, &
dr
->
queues_num
);

1548 i‡(
îr‹
) {

1549 
	`‰ì
(
dr
);

1550  
îr‹
;

1552 
dr
->
queues
 = (
oÊ_∑ckë_queue
 **)
	`mÆloc
(dr->
queues_num
 * (ofl_packet_queue *));

1554 
queue
 = 
§
->
queues
;

1555 
i
 = 0; i < 
dr
->
queues_num
; i++) {

1556 
îr‹
 = 
	`oÊ_°ru˘s_∑ckë_queue_u≈ack
(
queue
, 
Àn
, &(
dr
->
queues
[
i
]));

1557 i‡(
îr‹
) {

1558 
	`OFL_UTILS_FREE_ARR_FUN
(
dr
->
queues
, 
i
,

1559 
oÊ_°ru˘s_‰ì_∑ckë_queue
);

1560 
	`‰ì
 (
dr
);

1561  
îr‹
;

1563 
queue
 = (
oÂ_∑ckë_queue
 *)((
uöt8_t
 *)queuê+ 
	`¡ohs
(queue->
Àn
));

1566 *
msg
 = (
oÊ_msg_hódî
 *)
dr
;

1568 
	}
}

1571 
oÊ_îr


1572 
	$oÊ_msg_u≈ack_em±y
(
oÂ_hódî
 *
§c
 
UNUSED
, 
size_t
 *
Àn
, 
oÊ_msg_hódî
 **
msg
) {

1574 *
Àn
 -(
oÂ_hódî
);

1576 *
msg
 = (
oÊ_msg_hódî
 *)
	`mÆloc
((ofl_msg_header));

1578 
	}
}

1581 
oÊ_îr


1582 
	$oÊ_msg_u≈ack
(
uöt8_t
 *
buf
, 
size_t
 
buf_Àn
, 
oÊ_msg_hódî
 **
msg
, 
uöt32_t
 *
xid
, 
oÊ_exp
 *
exp
) {

1583 
oÂ_hódî
 *
oh
;

1584 
size_t
 
Àn
 = 
buf_Àn
;

1585 
oÊ_îr
 
îr‹
 = 0;

1586 i‡(
Àn
 < (
oÂ_hódî
)) {

1587 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received message is shorterÅhan ofp_header.");

1588 i‡(
xid
 !
NULL
) {

1589 *
xid
 = 0x00000000;

1591  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

1594 
oh
 = (
oÂ_hódî
 *)
buf
;

1596 i‡(
oh
->
vîsi⁄
 !
OFP_VERSION
) {

1597 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received message has wrong version.");

1598  
	`oÊ_îr‹
(
OFPET_HELLO_FAILED
, 
OFPHFC_INCOMPATIBLE
);

1601 i‡(
xid
 !
NULL
) {

1602 *
xid
 = 
	`¡ohl
(
oh
->xid);

1605 i‡(
Àn
 !
	`¡ohs
(
oh
->
Àngth
)) {

1606 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received messageÜength doesÇot matchÅheÜength field.");

1607  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

1611 
oh
->
ty≥
) {

1612 
OFPT_HELLO
:

1613 
îr‹
 = 
	`oÊ_msg_u≈ack_em±y
(
oh
, &
Àn
, 
msg
);

1615 
OFPT_ERROR
:

1616 
îr‹
 = 
	`oÊ_msg_u≈ack_îr‹
(
oh
, &
Àn
, 
msg
);

1618 
OFPT_ECHO_REQUEST
:

1619 
OFPT_ECHO_REPLY
:

1620 
îr‹
 = 
	`oÊ_msg_u≈ack_echo
(
oh
, &
Àn
, 
msg
);

1622 
OFPT_EXPERIMENTER
:

1623 i‡(
exp
 =
NULL
 ||Éxp->
msg
 =NULL ||Éxp->msg->
u≈ack
 == NULL) {

1624 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received EXPERIMENTER message, butÇo callback was given.");

1625 
îr‹
 = 
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_EXPERIMENTER
);

1627 
îr‹
 = 
exp
->
msg
->
	`u≈ack
(
oh
, &
Àn
, (
oÊ_msg_ex≥rimíãr
 **)msg);

1632 
OFPT_FEATURES_REQUEST
:

1633 
îr‹
 = 
	`oÊ_msg_u≈ack_em±y
(
oh
, &
Àn
, 
msg
);

1635 
OFPT_FEATURES_REPLY
:

1636 
îr‹
 = 
	`oÊ_msg_u≈ack_„©uªs_ª∂y
(
oh
, &
Àn
, 
msg
);

1638 
OFPT_GET_CONFIG_REQUEST
:

1639 
îr‹
 = 
	`oÊ_msg_u≈ack_em±y
(
oh
, &
Àn
, 
msg
);

1641 
OFPT_GET_CONFIG_REPLY
:

1642 
îr‹
 = 
	`oÊ_msg_u≈ack_gë_c⁄fig_ª∂y
(
oh
, &
Àn
, 
msg
);

1644 
OFPT_SET_CONFIG
:

1645 
îr‹
 = 
	`oÊ_msg_u≈ack_£t_c⁄fig
(
oh
, &
Àn
, 
msg
);

1649 
OFPT_PACKET_IN
:

1650 
îr‹
 = 
	`oÊ_msg_u≈ack_∑ckë_ö
(
oh
,
buf
, &
Àn
, 
msg
);

1652 
OFPT_FLOW_REMOVED
:

1653 
îr‹
 = 
	`oÊ_msg_u≈ack_Êow_ªmoved
(
oh
,
buf
, &
Àn
, 
msg
, 
exp
);

1655 
OFPT_PORT_STATUS
:

1656 
îr‹
 = 
	`oÊ_msg_u≈ack_p‹t_°©us
(
oh
, &
Àn
, 
msg
);

1660 
OFPT_GET_ASYNC_REQUEST
:

1661 
îr‹
 = 
	`oÊ_msg_u≈ack_em±y
(
oh
, &
Àn
, 
msg
);

1663 
OFPT_GET_ASYNC_REPLY
:

1664 
OFPT_SET_ASYNC
:{

1665 
îr‹
 = 
	`oÊ_msg_u≈ack_async_c⁄fig
(
oh
, &
Àn
, 
msg
);

1668 
OFPT_PACKET_OUT
:

1669 
îr‹
 = 
	`oÊ_msg_u≈ack_∑ckë_out
(
oh
, &
Àn
, 
msg
, 
exp
);

1671 
OFPT_FLOW_MOD
:

1672 
îr‹
 = 
	`oÊ_msg_u≈ack_Êow_mod
(
oh
,
buf
, &
Àn
, 
msg
, 
exp
);

1674 
OFPT_GROUP_MOD
:

1675 
îr‹
 = 
	`oÊ_msg_u≈ack_group_mod
(
oh
, &
Àn
, 
msg
, 
exp
);

1677 
OFPT_PORT_MOD
:

1678 
îr‹
 = 
	`oÊ_msg_u≈ack_p‹t_mod
(
oh
, &
Àn
, 
msg
);

1680 
OFPT_TABLE_MOD
:

1681 
îr‹
 = 
	`oÊ_msg_u≈ack_èbÀ_mod
(
oh
, &
Àn
, 
msg
);

1685 
OFPT_MULTIPART_REQUEST
:

1686 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ªque°
(
oh
,
buf
, &
Àn
, 
msg
, 
exp
);

1688 
OFPT_MULTIPART_REPLY
:

1689 
îr‹
 = 
	`oÊ_msg_u≈ack_mu…ù¨t_ª∂y
(
oh
,
buf
, &
Àn
, 
msg
, 
exp
);

1693 
OFPT_BARRIER_REQUEST
:

1694 
OFPT_BARRIER_REPLY
:

1695 
îr‹
 = 
	`oÊ_msg_u≈ack_em±y
(
oh
, &
Àn
, 
msg
);

1699 
OFPT_ROLE_REQUEST
:

1700 
OFPT_ROLE_REPLY
:

1701 
îr‹
 = 
	`oÊ_msg_u≈ack_rﬁe_ªque°
(
oh
, &
Àn
, 
msg
);

1705 
OFPT_QUEUE_GET_CONFIG_REQUEST
:

1706 
îr‹
 = 
	`oÊ_msg_u≈ack_queue_gë_c⁄fig_ªque°
(
oh
, &
Àn
, 
msg
);

1708 
OFPT_QUEUE_GET_CONFIG_REPLY
:

1709 
îr‹
 = 
	`oÊ_msg_u≈ack_queue_gë_c⁄fig_ª∂y
(
oh
, &
Àn
, 
msg
);

1711 
OFPT_METER_MOD
:

1712 
îr‹
 = 
	`oÊ_msg_u≈ack_mëî_mod
(
oh
, &
Àn
, 
msg
);

1715 
îr‹
 = 
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPGMFC_BAD_TYPE
);

1719 i‡(
îr‹
) {

1720 i‡(
	`OFL_LOG_IS_DBG_ENABLED
(
LOG_MODULE
)) {

1721 *
°r
 = 
	`oÊ_hex_to_°rög
(
buf
, 
buf_Àn
 < 1024 ? buf_len : 1024);

1723 
	`OFL_LOG_DBG
(
LOG_MODULE
, "Eº‹ h≠≥√dá·îÖro˚ssög %zu byã†o‡∑ckë.", 
	`¡ohs
(
oh
->
Àngth
Ë- 
Àn
);

1724 
	`OFL_LOG_DBG
(
LOG_MODULE
, "\n%s\n", 
°r
);

1725 
	`‰ì
(
°r
);

1727  
îr‹
;

1733 i‡(
Àn
 != 0) {

1734 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived mesßgê£emedÅÿbêvÆid, buàô c⁄èöed unu£d d©®(%zu).", 
Àn
);

1735 i‡(
	`OFL_LOG_IS_DBG_ENABLED
(
LOG_MODULE
)) {

1736 *
°r
 = 
	`oÊ_hex_to_°rög
(
buf
, 
buf_Àn
 < 1024 ? buf_len : 1024);

1738 
	`OFL_LOG_DBG
(
LOG_MODULE
, "Eº‹ h≠≥√dá·îÖro˚ssög %zu byã†o‡∑ckë.", 
	`¡ohs
(
oh
->
Àngth
Ë- 
Àn
);

1739 
	`OFL_LOG_DBG
(
LOG_MODULE
, "\n%s\n", 
°r
);

1740 
	`‰ì
(
°r
);

1744 (*
msg
)->
ty≥
 = (
oÂ_ty≥
)
oh
->type;

1747 
	}
}

	@oflib/ofl-messages.c

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<°dboﬁ.h
>

35 
	~<√töë/ö.h
>

36 
	~"oÊ.h
"

37 
	~"oÊ-a˘i⁄s.h
"

38 
	~"oÊ-mesßges.h
"

39 
	~"oÊ-°ru˘s.h
"

40 
	~"oÊ-utûs.h
"

41 
	~"oÊ-log.h
"

44 
	#LOG_MODULE
 
oÊ_msg


	)

45 
	$OFL_LOG_INIT
(
LOG_MODULE
)

50 
	$oÊ_msg_‰ì_îr‹
(
oÊ_msg_îr‹
 *
msg
) {

51 
	`‰ì
(
msg
->
d©a
);

52 
	`‰ì
(
msg
);

55 
	}
}

58 
	$oÊ_msg_‰ì_mu…ù¨t_ªque°
(
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
msg
, 
oÊ_exp
 *
exp
) {

59 
msg
->
ty≥
) {

60 
OFPMP_DESC
: {

63 
OFPMP_FLOW
:

64 
OFPMP_AGGREGATE
: {

65 
	`oÊ_°ru˘s_‰ì_m©ch
(((
oÊ_msg_mu…ù¨t_ªque°_Êow
 *)
msg
)->
m©ch
, 
exp
);

68 
OFPMP_TABLE
:

69 
OFPMP_PORT_STATS
 :

70 
OFPMP_QUEUE
:

71 
OFPMP_GROUP
:

72 
OFPMP_GROUP_DESC
:

73 
OFPMP_GROUP_FEATURES
:

74 
OFPMP_METER
:

75 
OFPMP_METER_CONFIG
:

76 
OFPMP_METER_FEATURES
:

78 
OFPMP_TABLE_FEATURES
:{

79 
oÊ_msg_mu…ù¨t_ªque°_èbÀ_„©uªs
 *
m
 = (oÊ_msg_mu…ù¨t_ªque°_èbÀ_„©uª†*)
msg
;

80 
	`OFL_UTILS_FREE_ARR_FUN2
(
m
->
èbÀ_„©uªs
, m->
èbÀs_num
,

81 
oÊ_°ru˘s_‰ì_èbÀ_„©uªs
, 
exp
);

84 
OFPMP_PORT_DESC
:

86 
OFPMP_EXPERIMENTER
: {

87 i‡(
exp
 =
NULL
 ||Éxp->
°©s
 =NULL ||Éxp->°©s->
ªq_‰ì
 == NULL) {

88 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅo free EXPERIMENTER statsÑequest, butÇo callback was given.");

91 
exp
->
°©s
->
	`ªq_‰ì
(
msg
);

97 
	`‰ì
(
msg
);

99 
	}
}

106 
	$oÊ_msg_‰ì_mu…ù¨t_ª∂y
(
oÊ_msg_mu…ù¨t_ª∂y_hódî
 *
msg
, 
oÊ_exp
 *
exp
) {

107 
msg
->
ty≥
) {

108 
OFPMP_DESC
: {

109 
oÊ_msg_ª∂y_desc
 *
°©
 = (oÊ_msg_ª∂y_des¯*Ë
msg
;

110 
	`‰ì
(
°©
->
m‰_desc
);

111 
	`‰ì
(
°©
->
hw_desc
);

112 
	`‰ì
(
°©
->
sw_desc
);

113 
	`‰ì
(
°©
->
£rül_num
);

114 
	`‰ì
(
°©
->
dp_desc
);

117 
OFPMP_FLOW
: {

118 
oÊ_msg_mu…ù¨t_ª∂y_Êow
 *
°©
 = (oÊ_msg_mu…ù¨t_ª∂y_Êow *)
msg
;

119 
	`OFL_UTILS_FREE_ARR_FUN2
(
°©
->
°©s
, sèt->
°©s_num
,

120 
oÊ_°ru˘s_‰ì_Êow_°©s
, 
exp
);

122 
OFPMP_AGGREGATE
: {

125 
OFPMP_TABLE
: {

126 
oÊ_msg_mu…ù¨t_ª∂y_èbÀ
 *
°©
 = (oÊ_msg_mu…ù¨t_ª∂y_èbÀ *)
msg
;

127 
	`OFL_UTILS_FREE_ARR_FUN
(
°©
->
°©s
, sèt->
°©s_num
,

128 
oÊ_°ru˘s_‰ì_èbÀ_°©s
);

131 
OFPMP_PORT_STATS
: {

132 
oÊ_msg_mu…ù¨t_ª∂y_p‹t
 *
°©
 = (oÊ_msg_mu…ù¨t_ª∂y_p‹à*)
msg
;

133 
	`OFL_UTILS_FREE_ARR
(
°©
->
°©s
, sèt->
°©s_num
);

136 
OFPMP_QUEUE
: {

137 
oÊ_msg_mu…ù¨t_ª∂y_queue
 *
°©
 = (oÊ_msg_mu…ù¨t_ª∂y_queuê*)
msg
;

138 
	`OFL_UTILS_FREE_ARR
(
°©
->
°©s
, sèt->
°©s_num
);

141 
OFPMP_GROUP
: {

142 
oÊ_msg_mu…ù¨t_ª∂y_group
 *
°©
 = (oÊ_msg_mu…ù¨t_ª∂y_grou∞*)
msg
;

143 
	`OFL_UTILS_FREE_ARR_FUN
(
°©
->
°©s
, sèt->
°©s_num
,

144 
oÊ_°ru˘s_‰ì_group_°©s
);

147 
OFPMP_METER
:{

148 
oÊ_msg_mu…ù¨t_ª∂y_mëî
 *
°©
 = (oÊ_msg_mu…ù¨t_ª∂y_mëî*)
msg
;

149 
	`OFL_UTILS_FREE_ARR_FUN
(
°©
->
°©s
, sèt->
°©s_num
,

150 
oÊ_°ru˘s_‰ì_mëî_°©s
);

153 
OFPMP_METER_CONFIG
:{

154 
oÊ_msg_mu…ù¨t_ª∂y_mëî_c⁄f
 *
c⁄f
 = (oÊ_msg_mu…ù¨t_ª∂y_mëî_c⁄‡*)
msg
;

155 
	`OFL_UTILS_FREE_ARR_FUN
(
c⁄f
->
°©s
, c⁄f->
°©s_num
,

156 
oÊ_°ru˘s_‰ì_mëî_c⁄fig
);

159 
OFPMP_METER_FEATURES
:{

160 
oÊ_msg_mu…ù¨t_ª∂y_mëî_„©uªs
 *
„©
 = (oÊ_msg_mu…ù¨t_ª∂y_mëî_„©uª†*)
msg
;

161 
	`‰ì
(
„©
->
„©uªs
);

164 
OFPMP_GROUP_DESC
: {

165 
oÊ_msg_mu…ù¨t_ª∂y_group_desc
 *
°©
 = (oÊ_msg_mu…ù¨t_ª∂y_group_des¯*)
msg
;

166 
	`OFL_UTILS_FREE_ARR_FUN2
(
°©
->
°©s
, sèt->
°©s_num
,

167 
oÊ_°ru˘s_‰ì_group_desc_°©s
, 
exp
);

170 
OFPMP_PORT_DESC
:{

171 
oÊ_msg_mu…ù¨t_ª∂y_p‹t_desc
 *
°©
 = (oÊ_msg_mu…ù¨t_ª∂y_p‹t_des¯*)
msg
;

172 
	`OFL_UTILS_FREE_ARR_FUN
(
°©
->
°©s
, sèt->
°©s_num
,

173 
oÊ_°ru˘s_‰ì_p‹t
);

176 
OFPMP_TABLE_FEATURES
:{

177 
oÊ_msg_mu…ù¨t_ª∂y_èbÀ_„©uªs
 *
m
 = (oÊ_msg_mu…ù¨t_ª∂y_èbÀ_„©uª†*)
msg
;

178 
	`OFL_UTILS_FREE_ARR_FUN2
(
m
->
èbÀ_„©uªs
, m->
èbÀs_num
,

179 
oÊ_°ru˘s_‰ì_èbÀ_„©uªs
, 
exp
);

182 
OFPMP_EXPERIMENTER
: {

183 i‡(
exp
 =
NULL
 ||Éxp->
°©s
 ||Éxp->°©s->
ª∂y_‰ì
 == NULL) {

184 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅo free EXPERIMENTER statsÑeply, butÇo callback was given.");

187 
exp
->
°©s
->
	`ª∂y_‰ì
(
msg
);

190 
OFPMP_GROUP_FEATURES
:{

198 
	`‰ì
(
msg
);

200 
	}
}

203 
	$oÊ_msg_‰ì
(
oÊ_msg_hódî
 *
msg
, 
oÊ_exp
 *
exp
) {

205 
msg
->
ty≥
) {

206 
OFPT_HELLO
: {

209 
OFPT_ERROR
: {

210  
	`oÊ_msg_‰ì_îr‹
((
oÊ_msg_îr‹
 *)
msg
);

212 
OFPT_ECHO_REQUEST
:

213 
OFPT_ECHO_REPLY
: {

214 
	`‰ì
(((
oÊ_msg_echo
 *)
msg
)->
d©a
);

217 
OFPT_EXPERIMENTER
: {

218 i‡(
exp
 =
NULL
 ||Éxp->
msg
 =NULL ||Éxp->msg->
‰ì
 == NULL) {

219 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅo free EXPERIMENTER message, butÇo callback was given");

222 
exp
->
msg
->
	`‰ì
((
oÊ_msg_ex≥rimíãr
 *)msg);

225 
OFPT_FEATURES_REQUEST
: {

228 
OFPT_FEATURES_REPLY
: {

231 
OFPT_GET_CONFIG_REQUEST
: {

234 
OFPT_GET_CONFIG_REPLY
: {

235 
	`‰ì
(((
oÊ_msg_gë_c⁄fig_ª∂y
 *)
msg
)->
c⁄fig
);

238 
OFPT_SET_CONFIG
: {

239 
	`‰ì
(((
oÊ_msg_£t_c⁄fig
 *)
msg
)->
c⁄fig
);

242 
OFPT_PACKET_IN
: {

243 
	`oÊ_°ru˘s_‰ì_m©ch
(((
oÊ_msg_∑ckë_ö
 *)
msg
)->
m©ch
,
NULL
);

244 
	`‰ì
(((
oÊ_msg_∑ckë_ö
 *)
msg
)->
d©a
);

247 
OFPT_FLOW_REMOVED
: {

248  
	`oÊ_msg_‰ì_Êow_ªmoved
((
oÊ_msg_Êow_ªmoved
 *)
msg
, 
åue
, 
exp
);

251 
OFPT_PORT_STATUS
: {

252 
	`‰ì
(((
oÊ_msg_p‹t_°©us
 *)
msg
)->
desc
);

255 
OFPT_PACKET_OUT
: {

256  
	`oÊ_msg_‰ì_∑ckë_out
((
oÊ_msg_∑ckë_out
 *)
msg
, 
åue
, 
exp
);

258 
OFPT_FLOW_MOD
: {

259  
	`oÊ_msg_‰ì_Êow_mod
((
oÊ_msg_Êow_mod
 *)
msg
, 
åue
,Årue, 
exp
);

261 
OFPT_GROUP_MOD
: {

262  
	`oÊ_msg_‰ì_group_mod
((
oÊ_msg_group_mod
 *)
msg
, 
åue
, 
exp
);

264 
OFPT_PORT_MOD
:

265 
OFPT_TABLE_MOD
: {

268 
OFPT_MULTIPART_REQUEST
: {

269  
	`oÊ_msg_‰ì_mu…ù¨t_ªque°
((
oÊ_msg_mu…ù¨t_ªque°_hódî
 *)
msg
, 
exp
);

271 
OFPT_MULTIPART_REPLY
: {

272  
	`oÊ_msg_‰ì_mu…ù¨t_ª∂y
((
oÊ_msg_mu…ù¨t_ª∂y_hódî
 *)
msg
, 
exp
);

274 
OFPT_BARRIER_REQUEST
:

275 
OFPT_BARRIER_REPLY
:

276 
OFPT_QUEUE_GET_CONFIG_REQUEST
: {

279 
OFPT_ROLE_REPLY
:

280 
OFPT_ROLE_REQUEST
:{

283 
OFPT_GET_ASYNC_REPLY
:

284 
OFPT_SET_ASYNC
:

285 
OFPT_GET_ASYNC_REQUEST
:{

288 
OFPT_METER_MOD
:{

289  
	`oÊ_msg_‰ì_mëî_mod
((
oÊ_msg_mëî_mod
*)
msg
, 
åue
);

291 
OFPT_QUEUE_GET_CONFIG_REPLY
: {

292 
oÊ_msg_queue_gë_c⁄fig_ª∂y
 *
mod
 =

293 (
oÊ_msg_queue_gë_c⁄fig_ª∂y
 *)
msg
;

294 
	`OFL_UTILS_FREE_ARR_FUN
(
mod
->
queues
, mod->
queues_num
,

295 
oÊ_°ru˘s_‰ì_∑ckë_queue
);

300 
	`‰ì
(
msg
);

302 
	}
}

305 
	$oÊ_msg_‰ì_mëî_mod
(
oÊ_msg_mëî_mod
 * 
msg
, 
boﬁ
 
wôh_b™ds
){

306 i‡(
wôh_b™ds
) {

307 
	`OFL_UTILS_FREE_ARR_FUN
(
msg
->
b™ds
, msg->
mëî_b™ds_num
,

308 
oÊ_°ru˘s_‰ì_mëî_b™ds
);

310 
	`‰ì
(
msg
);

312 
	}
}

315 
	$oÊ_msg_‰ì_∑ckë_out
(
oÊ_msg_∑ckë_out
 *
msg
, 
boﬁ
 
wôh_d©a
, 
oÊ_exp
 *
exp
) {

316 i‡(
wôh_d©a
) {

317 
	`‰ì
(
msg
->
d©a
);

319 
	`OFL_UTILS_FREE_ARR_FUN2
(
msg
->
a˘i⁄s
, msg->
a˘i⁄s_num
,

320 
oÊ_a˘i⁄s_‰ì
, 
exp
);

322 
	`‰ì
(
msg
);

324 
	}
}

327 
	$oÊ_msg_‰ì_group_mod
(
oÊ_msg_group_mod
 *
msg
, 
boﬁ
 
wôh_buckës
, 
oÊ_exp
 *
exp
) {

328 i‡(
wôh_buckës
) {

329 
	`OFL_UTILS_FREE_ARR_FUN2
(
msg
->
buckës
, msg->
buckës_num
,

330 
oÊ_°ru˘s_‰ì_buckë
, 
exp
);

333 
	`‰ì
(
msg
);

335 
	}
}

338 
	$oÊ_msg_‰ì_Êow_mod
(
oÊ_msg_Êow_mod
 *
msg
, 
boﬁ
 
wôh_m©ch
, boﬁ 
wôh_ö°ru˘i⁄s
, 
oÊ_exp
 *
exp
) {

339 i‡(
wôh_m©ch
) {

340 
	`oÊ_°ru˘s_‰ì_m©ch
(
msg
->
m©ch
, 
exp
);

342 i‡(
wôh_ö°ru˘i⁄s
) {

343 
	`OFL_UTILS_FREE_ARR_FUN2
(
msg
->
ö°ru˘i⁄s
, msg->
ö°ru˘i⁄s_num
,

344 
oÊ_°ru˘s_‰ì_ö°ru˘i⁄
, 
exp
);

347 
	`‰ì
(
msg
);

349 
	}
}

353 
	$oÊ_msg_‰ì_Êow_ªmoved
(
oÊ_msg_Êow_ªmoved
 *
msg
, 
boﬁ
 
wôh_°©s
, 
oÊ_exp
 *
exp
) {

354 i‡(
wôh_°©s
) {

355 
	`oÊ_°ru˘s_‰ì_Êow_°©s
(
msg
->
°©s
, 
exp
);

357 
	`‰ì
(
msg
);

359 
	}
}

363 
boﬁ


364 
	$oÊ_msg_mîge_mu…ù¨t_ª∂y_Êow
(
oÊ_msg_mu…ù¨t_ª∂y_Êow
 *
‹ig
, oÊ_msg_mu…ù¨t_ª∂y_Êow *
mîge
) {

365 
uöt32_t
 
√w_°©s_num
;

366 
size_t
 
i
, 
j
;

368 
√w_°©s_num
 = 
‹ig
->
°©s_num
 + 
mîge
->stats_num;

370 
‹ig
->
°©s
 = (
oÊ_Êow_°©s
 ** )
	`ªÆloc
(‹ig->°©s, 
√w_°©s_num
 * (ofl_flow_stats *));

372 
i
=0; i < 
mîge
->
°©s_num
; i++) {

373 
j
 = 
‹ig
->
°©s_num
 + 
i
;

374 
‹ig
->
°©s
[
j
] = (
oÊ_Êow_°©s
 *)
	`mÆloc
((ofl_flow_stats));

375 
	`mem˝y
(
‹ig
->
°©s
[
j
], 
mîge
->°©s[
i
], (
oÊ_Êow_°©s
));

378 
‹ig
->
°©s_num
 = 
√w_°©s_num
;

380  ((
mîge
->
hódî
.
Êags
 & 
OFPMPF_REPLY_MORE
) == 0);

381 
	}
}

383 
boﬁ


384 
	$oÊ_msg_mîge_mu…ù¨t_ª∂y_èbÀ
(
oÊ_msg_mu…ù¨t_ª∂y_èbÀ
 *
‹ig
, oÊ_msg_mu…ù¨t_ª∂y_èbÀ *
mîge
) {

385 
uöt32_t
 
√w_°©s_num
;

386 
size_t
 
i
, 
j
;

388 
√w_°©s_num
 = 
‹ig
->
°©s_num
 + 
mîge
->stats_num;

390 
‹ig
->
°©s
 = (
oÊ_èbÀ_°©s
 **)
	`ªÆloc
(‹ig->°©s, 
√w_°©s_num
 * (ofl_table_stats *));

392 
i
=0; i < 
mîge
->
°©s_num
; i++) {

393 
j
 = 
‹ig
->
°©s_num
 + 
i
;

394 
‹ig
->
°©s
[
j
] = (
oÊ_èbÀ_°©s
 *)
	`mÆloc
((ofl_table_stats));

395 
	`mem˝y
(
‹ig
->
°©s
[
j
], 
mîge
->°©s[
i
], (
oÊ_èbÀ_°©s
));

398 
‹ig
->
°©s_num
 = 
√w_°©s_num
;

400  ((
mîge
->
hódî
.
Êags
 & 
OFPMPF_REPLY_MORE
) == 0);

401 
	}
}

403 
boﬁ


404 
	$oÊ_msg_mîge_mu…ù¨t_ª∂y_p‹t
(
oÊ_msg_mu…ù¨t_ª∂y_p‹t
 *
‹ig
, oÊ_msg_mu…ù¨t_ª∂y_p‹à*
mîge
) {

405 
uöt32_t
 
√w_°©s_num
;

406 
size_t
 
i
, 
j
;

408 
√w_°©s_num
 = 
‹ig
->
°©s_num
 + 
mîge
->stats_num;

410 
‹ig
->
°©s
 = (
oÊ_p‹t_°©s
 **)
	`ªÆloc
(‹ig->°©s, 
√w_°©s_num
 * (ofl_port_stats *));

412 
i
=0; i < 
mîge
->
°©s_num
; i++) {

413 
j
 = 
‹ig
->
°©s_num
 + 
i
;

414 
‹ig
->
°©s
[
j
] = (
oÊ_p‹t_°©s
 *)
	`mÆloc
((ofl_port_stats));

415 
	`mem˝y
(
‹ig
->
°©s
[
j
], 
mîge
->°©s[
i
], (
oÊ_p‹t_°©s
));

418 
‹ig
->
°©s_num
 = 
√w_°©s_num
;

420  ((
mîge
->
hódî
.
Êags
 & 
OFPMPF_REPLY_MORE
) == 0);

421 
	}
}

423 
boﬁ


424 
	$oÊ_msg_mîge_mu…ù¨t_ª∂y_queue
(
oÊ_msg_mu…ù¨t_ª∂y_queue
 *
‹ig
, oÊ_msg_mu…ù¨t_ª∂y_queuê*
mîge
) {

425 
uöt32_t
 
√w_°©s_num
;

426 
size_t
 
i
, 
j
;

428 
√w_°©s_num
 = 
‹ig
->
°©s_num
 + 
mîge
->stats_num;

430 
‹ig
->
°©s
 = (
oÊ_queue_°©s
 **)
	`ªÆloc
(‹ig->°©s, 
√w_°©s_num
 * (ofl_queue_stats *));

432 
i
=0; i < 
mîge
->
°©s_num
; i++) {

433 
j
 = 
‹ig
->
°©s_num
 + 
i
;

434 
‹ig
->
°©s
[
j
] = (
oÊ_queue_°©s
 *)
	`mÆloc
((ofl_queue_stats));

435 
	`mem˝y
(
‹ig
->
°©s
[
j
], 
mîge
->°©s[
i
], (
oÊ_queue_°©s
));

438 
‹ig
->
°©s_num
 = 
√w_°©s_num
;

440  ((
mîge
->
hódî
.
Êags
 & 
OFPMPF_REPLY_MORE
) == 0);

441 
	}
}

	@oflib/ofl-messages.h

32 #i‚de‡
OFL_MESSAGES_H


33 
	#OFL_MESSAGES_H
 1

	)

35 
	~<sys/ty≥s.h
>

36 
	~<°dboﬁ.h
>

37 
	~<°dio.h
>

39 
	~"../ö˛ude/›íÊow/›íÊow.h
"

40 
	~"oÊ.h
"

41 
	~"oÊ-°ru˘s.h
"

42 
	~"oÊ-a˘i⁄s.h
"

51 
	soÊ_msg_hódî
 {

52 
oÂ_ty≥
 
	mty≥
;

62 
	soÊ_msg_îr‹
 {

63 
oÊ_msg_hódî
 
	mhódî
;

65 
oÂ_îr‹_ty≥
 
	mty≥
;

66 
uöt16_t
 
	mcode
;

67 
size_t
 
	md©a_Àngth
;

68 
uöt8_t
 *
	md©a
;

74 
	soÊ_msg_echo
 {

75 
oÊ_msg_hódî
 
	mhódî
;

77 
size_t
 
	md©a_Àngth
;

78 
uöt8_t
 *
	md©a
;

87 
	soÊ_msg_ex≥rimíãr
 {

88 
oÊ_msg_hódî
 
	mhódî
;

90 
uöt32_t
 
	mex≥rimíãr_id
;

95 
	soÊ_msg_„©uªs_ª∂y
 {

96 
oÊ_msg_hódî
 
	mhódî
;

98 
uöt64_t
 
	md©≠©h_id
;

101 
uöt32_t
 
	mn_buf„rs
;

102 
uöt8_t
 
	mn_èbÀs
;

104 
uöt8_t
 
	mauxûüry_id
;

105 
uöt32_t
 
	mˇ∑bûôõs
;

106 
uöt32_t
 
	mª£rved
;

109 
	soÊ_msg_gë_c⁄fig_ª∂y
 {

110 
oÊ_msg_hódî
 
	mhódî
;

112 
oÊ_c⁄fig
 *
	mc⁄fig
;

115 
	soÊ_msg_£t_c⁄fig
 {

116 
oÊ_msg_hódî
 
	mhódî
;

118 
oÊ_c⁄fig
 *
	mc⁄fig
;

122 
	soÊ_msg_rﬁe_ªque°
 {

123 
oÊ_msg_hódî
 
	mhódî
;

124 
uöt32_t
 
	mrﬁe
;

125 
uöt64_t
 
	mgíî©i⁄_id
;

134 
	soÊ_msg_∑ckë_ö
 {

135 
oÊ_msg_hódî
 
	mhódî
;

137 
uöt32_t
 
	mbuf„r_id
;

138 
uöt16_t
 
	mtŸÆ_Àn
;

139 
oÂ_∑ckë_ö_ªas⁄
 
	mªas⁄
;

140 
uöt8_t
 
	mèbÀ_id
;

141 
uöt64_t
 
	mcookõ
;

142 
oÊ_m©ch_hódî
 *
	mm©ch
;

143 
size_t
 
	md©a_Àngth
;

144 
uöt8_t
 *
	md©a
;

147 
	soÊ_msg_Êow_ªmoved
 {

148 
oÊ_msg_hódî
 
	mhódî
;

150 
oÊ_Êow_°©s
 *
	m°©s
;

151 
oÂ_Êow_ªmoved_ªas⁄
 
	mªas⁄
;

154 
	soÊ_msg_p‹t_°©us
 {

155 
oÊ_msg_hódî
 
	mhódî
;

157 
oÂ_p‹t_ªas⁄
 
	mªas⁄
;

158 
oÊ_p‹t
 *
	mdesc
;

166 
	soÊ_msg_async_c⁄fig
 {

167 
oÊ_msg_hódî
 
	mhódî
;

168 
oÊ_async_c⁄fig
 *
	mc⁄fig
;

171 
	soÊ_msg_∑ckë_out
 {

172 
oÊ_msg_hódî
 
	mhódî
;

174 
uöt32_t
 
	mbuf„r_id
;

176 
uöt32_t
 
	mö_p‹t
;

178 
uöt32_t
 
	ma˘i⁄s_num
;

179 
oÊ_a˘i⁄_hódî
 **
	ma˘i⁄s
;

181 
size_t
 
	md©a_Àngth
;

182 
uöt8_t
 *
	md©a
;

186 
	soÊ_msg_Êow_mod
 {

187 
oÊ_msg_hódî
 
	mhódî
;

189 
uöt64_t
 
	mcookõ
;

190 
uöt64_t
 
	mcookõ_mask
;

194 
uöt8_t
 
	mèbÀ_id
;

195 
oÂ_Êow_mod_comm™d
 
	mcomm™d
;

196 
uöt16_t
 
	midÀ_timeout
;

197 
uöt16_t
 
	mh¨d_timeout
;

198 
uöt16_t
 
	m¥i‹ôy
;

199 
uöt32_t
 
	mbuf„r_id
;

201 
uöt32_t
 
	mout_p‹t
;

205 
uöt32_t
 
	mout_group
;

209 
uöt16_t
 
	mÊags
;

210 
oÊ_m©ch_hódî
 *
	mm©ch
;

211 
size_t
 
	mö°ru˘i⁄s_num
;

212 
oÊ_ö°ru˘i⁄_hódî
 **
	mö°ru˘i⁄s
;

217 
	soÊ_msg_group_mod
 {

218 
oÊ_msg_hódî
 
	mhódî
;

220 
oÂ_group_mod_comm™d
 
	mcomm™d
;

221 
uöt8_t
 
	mty≥
;

222 
uöt32_t
 
	mgroup_id
;

223 
size_t
 
	mbuckës_num
;

224 
oÊ_buckë
 **
	mbuckës
;

229 
	soÊ_msg_p‹t_mod
 {

230 
oÊ_msg_hódî
 
	mhódî
;

232 
uöt32_t
 
	mp‹t_no
;

233 
uöt8_t
 
	mhw_addr
[
OFP_ETH_ALEN
];

238 
uöt32_t
 
	mc⁄fig
;

239 
uöt32_t
 
	mmask
;

240 
uöt32_t
 
	madvîti£
;

244 
	soÊ_msg_èbÀ_mod
 {

245 
oÊ_msg_hódî
 
	mhódî
;

247 
uöt8_t
 
	mèbÀ_id
;

248 
uöt32_t
 
	mc⁄fig
;

252 
	soÊ_msg_mëî_mod
 {

253 
oÊ_msg_hódî
 
	mhódî
;

254 
uöt16_t
 
	mcomm™d
;

255 
uöt16_t
 
	mÊags
;

256 
uöt32_t
 
	mmëî_id
;

257 
size_t
 
	mmëî_b™ds_num
;

258 
oÊ_mëî_b™d_hódî
 **
	mb™ds
;

268 
	soÊ_msg_mu…ù¨t_ªque°_hódî
 {

269 
oÊ_msg_hódî
 
	mhódî
;

271 
oÂ_mu…ù¨t_ty≥s
 
	mty≥
;

272 
uöt16_t
 
	mÊags
;

275 
	soÊ_msg_mu…ù¨t_ªque°_Êow
 {

276 
oÊ_msg_mu…ù¨t_ªque°_hódî
 
	mhódî
;

278 
uöt8_t
 
	mèbÀ_id
;

281 
uöt32_t
 
	mout_p‹t
;

284 
uöt32_t
 
	mout_group
;

287 
uöt64_t
 
	mcookõ
;

289 
uöt64_t
 
	mcookõ_mask
;

292 
oÊ_m©ch_hódî
 *
	mm©ch
;

295 
	soÊ_msg_mu…ù¨t_ªque°_p‹t
 {

296 
oÊ_msg_mu…ù¨t_ªque°_hódî
 
	mhódî
;

297 
uöt32_t
 
	mp‹t_no
;

303 
	soÊ_msg_mu…ù¨t_ªque°_queue
 {

304 
oÊ_msg_mu…ù¨t_ªque°_hódî
 
	mhódî
;

305 
uöt32_t
 
	mp‹t_no
;

306 
uöt32_t
 
	mqueue_id
;

309 
	soÊ_msg_mu…ù¨t_ªque°_group
 {

310 
oÊ_msg_mu…ù¨t_ªque°_hódî
 
	mhódî
;

311 
uöt32_t
 
	mgroup_id
;

314 
	soÊ_msg_mu…ù¨t_ªque°_èbÀ_„©uªs
{

315 
oÊ_msg_mu…ù¨t_ªque°_hódî
 
	mhódî
;

316 
size_t
 
	mèbÀs_num
;

317 
oÊ_èbÀ_„©uªs
 **
	mèbÀ_„©uªs
;

320 
	soÊ_msg_mu…ù¨t_mëî_ªque°
 {

321 
oÊ_msg_mu…ù¨t_ªque°_hódî
 
	mhódî
;

323 
uöt32_t
 
	mmëî_id
;

326 
	soÊ_msg_mu…ù¨t_ªque°_ex≥rimíãr
 {

327 
oÊ_msg_mu…ù¨t_ªque°_hódî
 
	mhódî
;

329 
uöt32_t
 
	mex≥rimíãr_id
;

332 
	soÊ_msg_mu…ù¨t_ª∂y_hódî
 {

333 
oÊ_msg_hódî
 
	mhódî
;

335 
oÂ_mu…ù¨t_ty≥s
 
	mty≥
;

336 
uöt16_t
 
	mÊags
;

339 
	soÊ_msg_ª∂y_desc
 {

340 
oÊ_msg_mu…ù¨t_ª∂y_hódî
 
	mhódî
;

342 *
	mm‰_desc
;

343 *
	mhw_desc
;

344 *
	msw_desc
;

345 *
	m£rül_num
;

346 *
	mdp_desc
;

350 
	soÊ_msg_mu…ù¨t_ª∂y_Êow
 {

351 
oÊ_msg_mu…ù¨t_ª∂y_hódî
 
	mhódî
;

353 
size_t
 
	m°©s_num
;

354 
oÊ_Êow_°©s
 **
	m°©s
;

357 
	soÊ_msg_mu…ù¨t_ª∂y_aggªg©e
 {

358 
oÊ_msg_mu…ù¨t_ª∂y_hódî
 
	mhódî
;

360 
uöt64_t
 
	m∑ckë_cou¡
;

361 
uöt64_t
 
	mbyã_cou¡
;

362 
uöt32_t
 
	mÊow_cou¡
;

365 
	soÊ_msg_mu…ù¨t_ª∂y_èbÀ
 {

366 
oÊ_msg_mu…ù¨t_ª∂y_hódî
 
	mhódî
;

368 
size_t
 
	m°©s_num
;

369 
oÊ_èbÀ_°©s
 **
	m°©s
;

372 
	soÊ_msg_mu…ù¨t_ª∂y_èbÀ_„©uªs
 {

373 
oÊ_msg_mu…ù¨t_ª∂y_hódî
 
	mhódî
;

374 
size_t
 
	mèbÀs_num
;

375 
oÊ_èbÀ_„©uªs
 ** 
	mèbÀ_„©uªs
;

379 
	soÊ_msg_mu…ù¨t_ª∂y_p‹t
 {

380 
oÊ_msg_mu…ù¨t_ª∂y_hódî
 
	mhódî
;

382 
size_t
 
	m°©s_num
;

383 
oÊ_p‹t_°©s
 **
	m°©s
;

386 
	soÊ_msg_mu…ù¨t_ª∂y_queue
 {

387 
oÊ_msg_mu…ù¨t_ª∂y_hódî
 
	mhódî
;

389 
size_t
 
	m°©s_num
;

390 
oÊ_queue_°©s
 **
	m°©s
;

393 
	soÊ_msg_mu…ù¨t_ª∂y_group
 {

394 
oÊ_msg_mu…ù¨t_ª∂y_hódî
 
	mhódî
;

396 
size_t
 
	m°©s_num
;

397 
oÊ_group_°©s
 **
	m°©s
;

400 
	soÊ_msg_mu…ù¨t_ª∂y_group_desc
 {

401 
oÊ_msg_mu…ù¨t_ª∂y_hódî
 
	mhódî
;

403 
size_t
 
	m°©s_num
;

404 
oÊ_group_desc_°©s
 **
	m°©s
;

407 
	soÊ_msg_mu…ù¨t_ª∂y_group_„©uªs
 {

408 
oÊ_msg_mu…ù¨t_ª∂y_hódî
 
	mhódî
;

410 
uöt32_t
 
	mty≥s
;

411 
uöt32_t
 
	mˇ∑bûôõs
;

412 
uöt32_t
 
	mmax_groups
[4];

413 
uöt32_t
 
	ma˘i⁄s
[4];

416 
	soÊ_msg_mu…ù¨t_ª∂y_mëî
 {

417 
oÊ_msg_mu…ù¨t_ª∂y_hódî
 
	mhódî
;

419 
size_t
 
	m°©s_num
;

420 
oÊ_mëî_°©s
 **
	m°©s
;

423 
	soÊ_msg_mu…ù¨t_ª∂y_mëî_„©uªs
 {

424 
oÊ_msg_mu…ù¨t_ª∂y_hódî
 
	mhódî
;

426 
oÊ_mëî_„©uªs
 *
	m„©uªs
;

429 
	soÊ_msg_mu…ù¨t_ª∂y_mëî_c⁄f
 {

430 
oÊ_msg_mu…ù¨t_ª∂y_hódî
 
	mhódî
;

432 
size_t
 
	m°©s_num
;

433 
oÊ_mëî_c⁄fig
 **
	m°©s
;

436 
	soÊ_msg_mu…ù¨t_ª∂y_p‹t_desc
 {

437 
oÊ_msg_mu…ù¨t_ª∂y_hódî
 
	mhódî
;

439 
size_t
 
	m°©s_num
;

440 
oÊ_p‹t
 **
	m°©s
;

443 
	soÊ_msg_mu…ù¨t_ª∂y_ex≥rimíãr
 {

444 
oÊ_msg_mu…ù¨t_ª∂y_hódî
 
	mhódî
;

446 
uöt32_t
 
	mex≥rimíãr_id
;

448 
size_t
 
	md©a_Àngth
;

449 
uöt8_t
 *
	md©a
;

456 
	soÊ_msg_queue_gë_c⁄fig_ªque°
 {

457 
oÊ_msg_hódî
 
	mhódî
;

459 
uöt32_t
 
	mp‹t
;

467 
	soÊ_msg_queue_gë_c⁄fig_ª∂y
 {

468 
oÊ_msg_hódî
 
	mhódî
;

469 
uöt32_t
 
	mp‹t
;

471 
size_t
 
	mqueues_num
;

472 
oÊ_∑ckë_queue
 **
	mqueues
;

486 
oÊ_msg_∑ck
(
oÊ_msg_hódî
 *
msg
, 
uöt32_t
 
xid
, 
uöt8_t
 **
buf
, 
size_t
 *
buf_Àn
, 
oÊ_exp
 *
exp
);

492 
oÊ_îr


493 
oÊ_msg_u≈ack
(
uöt8_t
 *
buf
, 
size_t
 
buf_Àn
,

494 
oÊ_msg_hódî
 **
msg
, 
uöt32_t
 *
xid
, 
oÊ_exp
 *
exp
);

506 
oÊ_msg_‰ì
(
oÊ_msg_hódî
 *
msg
, 
oÊ_exp
 *
exp
);

510 
oÊ_msg_‰ì_mëî_mod
(
oÊ_msg_mëî_mod
 * 
msg
, 
boﬁ
 
wôh_b™ds
);

516 
oÊ_msg_‰ì_∑ckë_out
(
oÊ_msg_∑ckë_out
 *
msg
, 
boﬁ
 
wôh_d©a
, 
oÊ_exp
 *
exp
);

522 
oÊ_msg_‰ì_group_mod
(
oÊ_msg_group_mod
 *
msg
, 
boﬁ
 
wôh_buckës
, 
oÊ_exp
 *
exp
);

530 
oÊ_msg_‰ì_Êow_mod
(
oÊ_msg_Êow_mod
 *
msg
, 
boﬁ
 
wôh_m©ch
, boﬁ 
wôh_ö°ru˘i⁄s
, 
oÊ_exp
 *
exp
);

536 
oÊ_msg_‰ì_Êow_ªmoved
(
oÊ_msg_Êow_ªmoved
 *
msg
, 
boﬁ
 
wôh_°©s
, 
oÊ_exp
 *
exp
);

544 
boﬁ


545 
oÊ_msg_mîge_mu…ù¨t_ªque°_èbÀ_„©uªs
(
oÊ_msg_mu…ù¨t_ªque°_èbÀ_„©uªs
 *
‹ig
, oÊ_msg_mu…ù¨t_ªque°_èbÀ_„©uª†*
mîge
);

549 
boﬁ


550 
oÊ_msg_mîge_mu…ù¨t_ª∂y_Êow
(
oÊ_msg_mu…ù¨t_ª∂y_Êow
 *
‹ig
,

551 
oÊ_msg_mu…ù¨t_ª∂y_Êow
 *
mîge
);

555 
boﬁ


556 
oÊ_msg_mîge_mu…ù¨t_ª∂y_èbÀ
(
oÊ_msg_mu…ù¨t_ª∂y_èbÀ
 *
‹ig
,

557 
oÊ_msg_mu…ù¨t_ª∂y_èbÀ
 *
mîge
);

561 
boﬁ


562 
oÊ_msg_mîge_mu…ù¨t_ª∂y_p‹t
(
oÊ_msg_mu…ù¨t_ª∂y_p‹t
 *
‹ig
,

563 
oÊ_msg_mu…ù¨t_ª∂y_p‹t
 *
mîge
);

567 
boﬁ


568 
oÊ_msg_mîge_mu…ù¨t_ª∂y_queue
(
oÊ_msg_mu…ù¨t_ª∂y_queue
 *
‹ig
,

569 
oÊ_msg_mu…ù¨t_ª∂y_queue
 *
mîge
);

580 
oÊ_msg_to_°rög
(
oÊ_msg_hódî
 *
msg
, 
oÊ_exp
 *
exp
);

586 
oÊ_msg_¥öt
(
FILE
 *
°ªam
, 
oÊ_msg_hódî
 *
msg
, 
oÊ_exp
 *
exp
);

	@oflib/ofl-packets.h

31 #i‚de‡
OFL_PACKETS_H


32 
	#OFL_PACKETS_H


	)

34 
	#ETH_TYPE_II_START
 0x0600

	)

35 
	#ETH_TYPE_IP
 0x0800

	)

36 
	#ETH_TYPE_ARP
 0x0806

	)

37 
	#ETH_TYPE_VLAN
 0x8100

	)

38 
	#ETH_TYPE_VLAN_PBB
 0x88a8

	)

39 
	#ETH_TYPE_PBB
 0x88e7

	)

40 
	#ETH_TYPE_MPLS
 0x8847

	)

41 
	#ETH_TYPE_MPLS_MCAST
 0x8848

	)

43 
	#ETH_ADDR_LEN
 6

	)

44 
	#IPv6_ADDR_LEN
 16

	)

47 
	#VLAN_VID_MASK
 0x0fff

	)

48 
	#VLAN_VID_SHIFT
 0

	)

49 
	#VLAN_PCP_MASK
 0xe000

	)

50 
	#VLAN_PCP_SHIFT
 13

	)

51 
	#VLAN_PCP_BITMASK
 0x0007

	)

53 
	#VLAN_VID_MAX
 4095

	)

54 
	#VLAN_PCP_MAX
 7

	)

58 
	#MPLS_TTL_MASK
 0x000000ff

	)

59 
	#MPLS_TTL_SHIFT
 0

	)

60 
	#MPLS_S_MASK
 0x00000100

	)

61 
	#MPLS_S_SHIFT
 8

	)

62 
	#MPLS_TC_MASK
 0x00000e00

	)

63 
	#MPLS_TC_SHIFT
 9

	)

64 
	#MPLS_LABEL_MASK
 0xfffff000

	)

65 
	#MPLS_LABEL_SHIFT
 12

	)

67 
	#MPLS_LABEL_MAX
 1048575

	)

68 
	#MPLS_TC_MAX
 7

	)

72 
	#IP_ECN_MASK
 0x03

	)

73 
	#IP_DSCP_MASK
 0xfc

	)

	@oflib/ofl-print.c

31 
	~<°dboﬁ.h
>

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<°dio.h
>

35 
	~<˘y≥.h
>

36 
	~<öây≥s.h
>

38 
	~"oÊ.h
"

39 
	~"oÊ-¥öt.h
"

40 
	~"oxm-m©ch.h
"

41 
	~"›íÊow/›íÊow.h
"

45 
	$oÊ_p‹t_to_°rög
(
uöt32_t
 
p‹t
) {

46 *
°r
;

47 
size_t
 
°r_size
;

48 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

50 
	`oÊ_p‹t_¥öt
(
°ªam
, 
p‹t
);

51 
	`f˛o£
(
°ªam
);

52  
°r
;

53 
	}
}

56 
	$oÊ_p‹t_¥öt
(
FILE
 *
°ªam
, 
uöt32_t
 
p‹t
) {

57 
p‹t
) {

58 (
OFPP_IN_PORT
): { 
	`Ârötf
(
°ªam
, "in_port"); ; }

59 (
OFPP_TABLE
): { 
	`Ârötf
(
°ªam
, "table"); ; }

60 (
OFPP_NORMAL
): { 
	`Ârötf
(
°ªam
, "normal"); ; }

61 (
OFPP_FLOOD
): { 
	`Ârötf
(
°ªam
, "flood"); ; }

62 (
OFPP_ALL
): { 
	`Ârötf
(
°ªam
, "all"); ; }

63 (
OFPP_CONTROLLER
): { 
	`Ârötf
(
°ªam
, "ctrl"); ; }

64 (
OFPP_LOCAL
): { 
	`Ârötf
(
°ªam
, "local"); ; }

65 (
OFPP_ANY
): { 
	`Ârötf
(
°ªam
, "any"); ; }

66 : { 
	`Ârötf
(
°ªam
, "%u", 
p‹t
); ; }

68 
	}
}

71 
	$oÊ_ùv6_ext_hdr_to_°rög
(
uöt16_t
 
ext_hdr
){

72 *
°r
;

73 
size_t
 
°r_size
;

74 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

76 
	`oÊ_ùv6_ext_hdr_¥öt
(
°ªam
, 
ext_hdr
);

77 
	`f˛o£
(
°ªam
);

78  
°r
;

79 
	}
}

82 
	$oÊ_ùv6_ext_hdr_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
ext_hdr
) {

84 i‡(
ext_hdr
 !0Ë
	`Ârötf
(
°ªam
, "|");

85 i‡(
ext_hdr
 & 
OFPIEH_NONEXT
Ë{ 
	`Ârötf
(
°ªam
, "no_next|"); }

86 i‡(
ext_hdr
 & 
OFPIEH_ESP
Ë{ 
	`Ârötf
(
°ªam
, "esp|"); }

87 i‡(
ext_hdr
 & 
OFPIEH_AUTH
Ë{ 
	`Ârötf
(
°ªam
, "auth|"); }

88 i‡(
ext_hdr
 & 
OFPIEH_DEST
Ë{ 
	`Ârötf
(
°ªam
, "dest|"); }

89 i‡(
ext_hdr
 & 
OFPIEH_FRAG
Ë{ 
	`Ârötf
(
°ªam
, "frag|"); }

90 i‡(
ext_hdr
 & 
OFPIEH_ROUTER
){ 
	`Ârötf
(
°ªam
, "router|"); }

91 i‡(
ext_hdr
 & 
OFPIEH_HOP
Ë{ 
	`Ârötf
(
°ªam
, "hop|"); }

92 i‡(
ext_hdr
 & 
OFPIEH_UNREP
Ë{ 
	`Ârötf
(
°ªam
, "unreq|"); }

93 i‡(
ext_hdr
 & 
OFPIEH_UNSEQ
Ë{ 
	`Ârötf
(
°ªam
, "unseq|"); }

94 
	}
}

97 
	$oÊ_queue_to_°rög
(
uöt32_t
 
queue
) {

98 *
°r
;

99 
size_t
 
°r_size
;

100 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

102 
	`oÊ_queue_¥öt
(
°ªam
, 
queue
);

103 
	`f˛o£
(
°ªam
);

104  
°r
;

105 
	}
}

108 
	$oÊ_queue_¥öt
(
FILE
 *
°ªam
, 
uöt32_t
 
queue
) {

109 
queue
) {

110 (
OFPQ_ALL
): { 
	`Ârötf
(
°ªam
, "all"); ; }

111 : { 
	`Ârötf
(
°ªam
, "%u", 
queue
); ; }

113 
	}
}

117 
	$oÊ_group_to_°rög
(
uöt32_t
 
group
) {

118 *
°r
;

119 
size_t
 
°r_size
;

120 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

122 
	`oÊ_group_¥öt
(
°ªam
, 
group
);

123 
	`f˛o£
(
°ªam
);

124  
°r
;

125 
	}
}

128 
	$oÊ_group_¥öt
(
FILE
 *
°ªam
, 
uöt32_t
 
group
) {

129 
group
) {

130 (
OFPG_ALL
): { 
	`Ârötf
(
°ªam
, "all"); ; }

131 (
OFPG_ANY
): { 
	`Ârötf
(
°ªam
, "any"); ; }

132 : { 
	`Ârötf
(
°ªam
, "%u", 
group
); ; }

134 
	}
}

139 
	$oÊ_èbÀ_to_°rög
(
uöt8_t
 
èbÀ
) {

140 *
°r
;

141 
size_t
 
°r_size
;

142 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

144 
	`oÊ_èbÀ_¥öt
(
°ªam
, 
èbÀ
);

145 
	`f˛o£
(
°ªam
);

146  
°r
;

147 
	}
}

150 
	$oÊ_èbÀ_¥öt
(
FILE
 *
°ªam
, 
uöt8_t
 
èbÀ
) {

151 
èbÀ
) {

152 (0xff): { 
	`Ârötf
(
°ªam
, "all"); ; }

153 : { 
	`Ârötf
(
°ªam
, "%u", 
èbÀ
); ; }

155 
	}
}

160 
	$oÊ_vœn_vid_to_°rög
(
uöt32_t
 
vid
) {

161 *
°r
;

162 
size_t
 
°r_size
;

163 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

165 
	`oÊ_vœn_vid_¥öt
(
°ªam
, 
vid
);

166 
	`f˛o£
(
°ªam
);

167  
°r
;

168 
	}
}

171 
	$oÊ_vœn_vid_¥öt
(
FILE
 *
°ªam
, 
uöt32_t
 
vid
) {

172 
vid
) {

173 (
OFPVID_PRESENT
): { 
	`Ârötf
(
°ªam
, "any"); ; }

174 (
OFPVID_NONE
): { 
	`Ârötf
(
°ªam
, "none"); ; }

175 : { 
	`Ârötf
(
°ªam
, "%u", 
vid
); ; }

177 
	}
}

182 
	$oÊ_a˘i⁄_ty≥_to_°rög
(
uöt16_t
 
ty≥
) {

183 *
°r
;

184 
size_t
 
°r_size
;

185 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

187 
	`oÊ_a˘i⁄_ty≥_¥öt
(
°ªam
, 
ty≥
);

188 
	`f˛o£
(
°ªam
);

189  
°r
;

190 
	}
}

193 
	$oÊ_a˘i⁄_ty≥_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
ty≥
) {

194 
ty≥
) {

195 
OFPAT_OUTPUT
: { 
	`Ârötf
(
°ªam
, "out"); ; }

196 
OFPAT_SET_FIELD
: { 
	`Ârötf
(
°ªam
, "set_field"); ; }

197 
OFPAT_COPY_TTL_OUT
: { 
	`Ârötf
(
°ªam
, "ttl_out"); ; }

198 
OFPAT_COPY_TTL_IN
: { 
	`Ârötf
(
°ªam
, "ttl_in"); ; }

199 
OFPAT_SET_MPLS_TTL
: { 
	`Ârötf
(
°ªam
, "mpls_ttl"); ; }

200 
OFPAT_SET_MPLS_LABEL
: { 
	`Ârötf
(
°ªam
, "mpls_set"); ; }

201 
OFPAT_SET_PARITY_MPLS_LABEL
: { 
	`Ârötf
(
°ªam
, "mpls_parity_set"); ; }

202 
OFPAT_SET_MPLS_LABEL_FROM_COUNTER
: { 
	`Ârötf
(
°ªam
, "mpls_set_from_counter"); ; }

203 
OFPAT_XOR_ENCODE
: { 
	`Ârötf
(
°ªam
, "xor_encode"); ; }

204 
OFPAT_DEC_MPLS_TTL
: { 
	`Ârötf
(
°ªam
, "mpls_dec"); ; }

205 
OFPAT_PUSH_VLAN
: { 
	`Ârötf
(
°ªam
, "vlan_psh"); ; }

206 
OFPAT_POP_VLAN
: { 
	`Ârötf
(
°ªam
, "vlan_pop"); ; }

207 
OFPAT_PUSH_MPLS
: { 
	`Ârötf
(
°ªam
, "mpls_psh"); ; }

208 
OFPAT_POP_MPLS
: { 
	`Ârötf
(
°ªam
, "mpls_pop"); ; }

209 
OFPAT_SET_QUEUE
: { 
	`Ârötf
(
°ªam
, "queue"); ; }

210 
OFPAT_GROUP
: { 
	`Ârötf
(
°ªam
, "group"); ; }

211 
OFPAT_PUSH_PBB
: { 
	`Ârötf
(
°ªam
, "pbb_psh"); ; }

212 
OFPAT_POP_PBB
: { 
	`Ârötf
(
°ªam
, "pbb_pop"); ; }

213 
OFPAT_SET_NW_TTL
: { 
	`Ârötf
(
°ªam
, "nw_ttl"); ; }

214 
OFPAT_DEC_NW_TTL
: { 
	`Ârötf
(
°ªam
, "nw_dec"); ; }

215 
OFPAT_EXPERIMENTER
: { 
	`Ârötf
(
°ªam
, "exp"); ; }

216 : { 
	`Ârötf
(
°ªam
, "?(%u)", 
ty≥
); ; }

218 
	}
}

221 
	$oÊ_oxm_ty≥_to_°rög
(
uöt16_t
 
ty≥
) {

222 *
°r
;

223 
size_t
 
°r_size
;

224 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

226 
	`oÊ_oxm_ty≥_¥öt
(
°ªam
, 
ty≥
);

227 
	`f˛o£
(
°ªam
);

228  
°r
;

229 
	}
}

232 
	$oÊ_oxm_ty≥_¥öt
(
FILE
 *
°ªam
, 
uöt32_t
 
ty≥
){

233 
ty≥
){

234 
OXM_OF_IN_PORT
: {
	`Ârötf
(
°ªam
, "in_port"); ; }

235 
OXM_OF_IN_PHY_PORT
: {
	`Ârötf
(
°ªam
, "in_phy_port"); ; }

236 
OXM_OF_METADATA
: {
	`Ârötf
(
°ªam
, "metadata"); ; }

237 
OXM_OF_ETH_DST
: {
	`Ârötf
(
°ªam
, "eth_dst"); ; }

238 
OXM_OF_ETH_SRC
: {
	`Ârötf
(
°ªam
, "eth_src"); ; }

239 
OXM_OF_ETH_TYPE
: {
	`Ârötf
(
°ªam
, "eth_type"); ; }

240 
OXM_OF_VLAN_VID
: {
	`Ârötf
(
°ªam
, "vlan_vid"); ; }

241 
OXM_OF_VLAN_PCP
: {
	`Ârötf
(
°ªam
, "vlan_pcp"); ; }

242 
OXM_OF_IP_DSCP
: {
	`Ârötf
(
°ªam
, "ip_dscp"); ; }

243 
OXM_OF_IP_ECN
: {
	`Ârötf
(
°ªam
, "ip_ecn"); ; }

244 
OXM_OF_IP_PROTO
: {
	`Ârötf
(
°ªam
, "ip_proto"); ; }

245 
OXM_OF_IPV4_SRC
: {
	`Ârötf
(
°ªam
, "ipv4_src"); ; }

246 
OXM_OF_IPV4_DST
: {
	`Ârötf
(
°ªam
, "ipv4_dst"); ; }

247 
OXM_OF_TCP_SRC
: {
	`Ârötf
(
°ªam
, "tcp_src"); ; }

248 
OXM_OF_TCP_DST
: {
	`Ârötf
(
°ªam
, "tcp_dst"); ; }

249 
OXM_OF_UDP_SRC
: {
	`Ârötf
(
°ªam
, "udp_src"); ; }

250 
OXM_OF_UDP_DST
: {
	`Ârötf
(
°ªam
, "udp_dst"); ; }

251 
OXM_OF_SCTP_SRC
: {
	`Ârötf
(
°ªam
, "sctp_src"); ; }

252 
OXM_OF_SCTP_DST
: {
	`Ârötf
(
°ªam
, "udp_dst"); ; }

253 
OXM_OF_ICMPV4_CODE
: {
	`Ârötf
(
°ªam
, "icmpv4_code"); ; }

254 
OXM_OF_ICMPV4_TYPE
: {
	`Ârötf
(
°ªam
, "icmpv4_type"); ; }

255 
OXM_OF_ARP_OP
: {
	`Ârötf
(
°ªam
, "arp_op"); ; }

256 
OXM_OF_ARP_SPA
: {
	`Ârötf
(
°ªam
, "arp_spa"); ; }

257 
OXM_OF_ARP_TPA
: {
	`Ârötf
(
°ªam
, "arp_tpa"); ; }

258 
OXM_OF_ARP_SHA
: {
	`Ârötf
(
°ªam
, "arp_sha"); ; }

259 
OXM_OF_ARP_THA
: {
	`Ârötf
(
°ªam
, "arp_tha"); ; }

260 
OXM_OF_IPV6_SRC
: {
	`Ârötf
(
°ªam
, "ipv6_src"); ; }

261 
OXM_OF_IPV6_DST
: {
	`Ârötf
(
°ªam
, "ipv6_dst"); ; }

262 
OXM_OF_IPV6_FLABEL
: {
	`Ârötf
(
°ªam
, "ipv6_flabel"); ; }

263 
OXM_OF_ICMPV6_TYPE
: {
	`Ârötf
(
°ªam
, "icmpv6_type"); ; }

264 
OXM_OF_ICMPV6_CODE
: {
	`Ârötf
(
°ªam
, "icmpv6_code"); ; }

265 
OXM_OF_IPV6_ND_TARGET
: {
	`Ârötf
(
°ªam
, "ipv6_nd_target"); ; }

266 
OXM_OF_IPV6_ND_SLL
: {
	`Ârötf
(
°ªam
, "ipv6_nd_sll"); ; }

267 
OXM_OF_IPV6_ND_TLL
: {
	`Ârötf
(
°ªam
, "ipv6_nd_tll"); ; }

268 
OXM_OF_MPLS_LABEL
: {
	`Ârötf
(
°ªam
, "mpls_label"); ; }

269 
OXM_OF_MPLS_TC
: {
	`Ârötf
(
°ªam
, "mpls_tc"); ; }

270 
OXM_OF_MPLS_BOS
: {
	`Ârötf
(
°ªam
, "mpls_bos"); ; }

271 
OXM_OF_PBB_ISID
: {
	`Ârötf
(
°ªam
, "pbb_isid"); ; }

272 
OXM_OF_TUNNEL_ID
: {
	`Ârötf
(
°ªam
, "tunnel_id"); ; }

273 
OXM_OF_IPV6_EXTHDR
: {
	`Ârötf
(
°ªam
, "ipv6_exthdr"); ; }

274 : { 
	`Ârötf
(
°ªam
, "?(%d)", 
ty≥
); ; }

278 
	}
}

282 
	$oÊ_ö°ru˘i⁄_ty≥_to_°rög
(
uöt16_t
 
ty≥
) {

283 *
°r
;

284 
size_t
 
°r_size
;

285 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

287 
	`oÊ_ö°ru˘i⁄_ty≥_¥öt
(
°ªam
, 
ty≥
);

288 
	`f˛o£
(
°ªam
);

289  
°r
;

290 
	}
}

293 
	$oÊ_ö°ru˘i⁄_ty≥_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
ty≥
) {

294 
ty≥
) {

295 
OFPIT_GOTO_TABLE
: { 
	`Ârötf
(
°ªam
, "goto"); ; }

296 
OFPIT_WRITE_METADATA
: { 
	`Ârötf
(
°ªam
, "meta"); ; }

297 
OFPIT_WRITE_ACTIONS
: { 
	`Ârötf
(
°ªam
, "write"); ; }

298 
OFPIT_APPLY_ACTIONS
: { 
	`Ârötf
(
°ªam
, "apply"); ; }

299 
OFPIT_CLEAR_ACTIONS
: { 
	`Ârötf
(
°ªam
, "clear"); ; }

300 
OFPIT_METER
: { 
	`Ârötf
(
°ªam
, "meter"); ; }

301 
OFPIT_EXPERIMENTER
: { 
	`Ârötf
(
°ªam
, "exp"); ; }

302 : { 
	`Ârötf
(
°ªam
, "?(%u)", 
ty≥
); ; }

304 
	}
}

308 
	$oÊ_queue_¥›_ty≥_to_°rög
(
uöt16_t
 
ty≥
) {

309 *
°r
;

310 
size_t
 
°r_size
;

311 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

313 
	`oÊ_queue_¥›_ty≥_¥öt
(
°ªam
, 
ty≥
);

314 
	`f˛o£
(
°ªam
);

315  
°r
;

316 
	}
}

319 
	$oÊ_queue_¥›_ty≥_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
ty≥
) {

320 
ty≥
) {

321 (
OFPQT_MIN_RATE
): { 
	`Ârötf
(
°ªam
, "minrate"); ; }

322 : { 
	`Ârötf
(
°ªam
, "?(%u)", 
ty≥
); ; }

324 
	}
}

329 
	$oÊ_îr‹_ty≥_to_°rög
(
uöt16_t
 
ty≥
) {

330 *
°r
;

331 
size_t
 
°r_size
;

332 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

334 
	`oÊ_îr‹_ty≥_¥öt
(
°ªam
, 
ty≥
);

335 
	`f˛o£
(
°ªam
);

336  
°r
;

337 
	}
}

340 
	$oÊ_îr‹_ty≥_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
ty≥
) {

341 
ty≥
) {

342 (
OFPET_HELLO_FAILED
): { 
	`Ârötf
(
°ªam
, "HELLO_FAILED"); ; }

343 (
OFPET_BAD_REQUEST
): { 
	`Ârötf
(
°ªam
, "BAD_REQUEST"); ; }

344 (
OFPET_BAD_ACTION
): { 
	`Ârötf
(
°ªam
, "BAD_ACTION"); ; }

345 (
OFPET_BAD_INSTRUCTION
): { 
	`Ârötf
(
°ªam
, "BAD_INSTRUCTION"); ; }

346 (
OFPET_BAD_MATCH
): { 
	`Ârötf
(
°ªam
, "BAD_MATCH"); ; }

347 (
OFPET_FLOW_MOD_FAILED
): { 
	`Ârötf
(
°ªam
, "FLOW_MOD_FAILED"); ; }

348 (
OFPET_GROUP_MOD_FAILED
): { 
	`Ârötf
(
°ªam
, "GROUP_MOD_FAILED"); ; }

349 (
OFPET_PORT_MOD_FAILED
): { 
	`Ârötf
(
°ªam
, "PORT_MOD_FAILED"); ; }

350 (
OFPET_TABLE_MOD_FAILED
): { 
	`Ârötf
(
°ªam
, "TABLE_MOD_FAILED"); ; }

351 (
OFPET_METER_MOD_FAILED
): { 
	`Ârötf
(
°ªam
, "METER_MOD_FAILED"); ; }

352 (
OFPET_QUEUE_OP_FAILED
): { 
	`Ârötf
(
°ªam
, "QUEUE_OP_FAILED"); ; }

353 (
OFPET_SWITCH_CONFIG_FAILED
): { 
	`Ârötf
(
°ªam
, "SWITCH_CONFIG_FAILED"); ; }

354 : { 
	`Ârötf
(
°ªam
, "?(%u)", 
ty≥
); ; }

356 
	}
}

361 
	$oÊ_îr‹_code_to_°rög
(
uöt16_t
 
ty≥
, uöt16_à
code
) {

362 *
°r
;

363 
size_t
 
°r_size
;

364 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

366 
	`oÊ_îr‹_code_¥öt
(
°ªam
, 
ty≥
, 
code
);

367 
	`f˛o£
(
°ªam
);

368  
°r
;

369 
	}
}

372 
	$oÊ_îr‹_code_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
ty≥
, uöt16_à
code
) {

373 
ty≥
) {

374 (
OFPET_HELLO_FAILED
): {

375 
code
) {

376 (
OFPHFC_INCOMPATIBLE
Ë: { 
	`Ârötf
(
°ªam
, "INCOMPATIBLE"); ; }

377 (
OFPHFC_EPERM
Ë: { 
	`Ârötf
(
°ªam
, "EPERM"); ; }

381 (
OFPET_BAD_REQUEST
): {

382 
code
) {

383 (
OFPBRC_BAD_VERSION
Ë: { 
	`Ârötf
(
°ªam
, "BAD_VERSION"); ; }

384 (
OFPBRC_BAD_TYPE
Ë: { 
	`Ârötf
(
°ªam
, "BAD_TYPE"); ; }

385 (
OFPBRC_BAD_MULTIPART
Ë: { 
	`Ârötf
(
°ªam
, "OFPBRC_BAD_MULTIPART"); ; }

386 (
OFPBRC_BAD_EXPERIMENTER
Ë: { 
	`Ârötf
(
°ªam
, "BAD_EXPERIMENTER"); ; }

387 (
OFPBRC_EPERM
Ë: { 
	`Ârötf
(
°ªam
, "EPERM"); ; }

388 (
OFPBRC_BAD_LEN
Ë: { 
	`Ârötf
(
°ªam
, "BAD_LEN"); ; }

389 (
OFPBRC_BUFFER_EMPTY
Ë: { 
	`Ârötf
(
°ªam
, "BUFFER_EMPTY"); ; }

390 (
OFPBRC_BUFFER_UNKNOWN
Ë: { 
	`Ârötf
(
°ªam
, "BUFFER_UNKNOWN"); ; }

391 (
OFPBRC_BAD_TABLE_ID
Ë: { 
	`Ârötf
(
°ªam
, "BAD_TABLE_ID"); ; }

395 (
OFPET_BAD_ACTION
): {

396 
code
) {

397 (
OFPBAC_BAD_TYPE
Ë: { 
	`Ârötf
(
°ªam
, "BAD_TYPE"); ; }

398 (
OFPBAC_BAD_LEN
Ë: { 
	`Ârötf
(
°ªam
, "BAD_LEN"); ; }

399 (
OFPBAC_BAD_EXPERIMENTER
Ë: { 
	`Ârötf
(
°ªam
, "BAD_EXPERIMENTER"); ; }

400 (
OFPBAC_BAD_OUT_PORT
Ë: { 
	`Ârötf
(
°ªam
, "BAD_OUT_PORT"); ; }

401 (
OFPBAC_BAD_ARGUMENT
Ë: { 
	`Ârötf
(
°ªam
, "BAD_ARGUMENT"); ; }

402 (
OFPBAC_EPERM
Ë: { 
	`Ârötf
(
°ªam
, "EPERM"); ; }

403 (
OFPBAC_TOO_MANY
Ë: { 
	`Ârötf
(
°ªam
, "TOO_MANY"); ; }

404 (
OFPBAC_BAD_QUEUE
Ë: { 
	`Ârötf
(
°ªam
, "BAD_QUEUE"); ; }

405 (
OFPBAC_BAD_OUT_GROUP
Ë: { 
	`Ârötf
(
°ªam
, "BAD_OUT_GROUP"); ; }

406 (
OFPBAC_UNSUPPORTED_ORDER
Ë: { 
	`Ârötf
(
°ªam
, "UNSUPPORTED_ORDER"); ; }

407 (
OFPBAC_BAD_TAG
Ë: { 
	`Ârötf
(
°ªam
, "BAD_TAG"); ; }

408 (
OFPBAC_MATCH_INCONSISTENT
): { 
	`Ârötf
(
°ªam
, "MATCH_INCONSISTENT"); ;}

409 (
OFPBAC_BAD_SET_TYPE
): { 
	`Ârötf
(
°ªam
, "BAD_SET_TYPE"); ;}

410 (
OFPBAC_BAD_SET_LEN
): { 
	`Ârötf
(
°ªam
, "BAD_SET_LEN"); ;}

411 (
OFPBAC_BAD_SET_ARGUMENT
): { 
	`Ârötf
(
°ªam
, "BAD_SET_ARGUMENT"); ;}

415 (
OFPET_BAD_INSTRUCTION
): {

416 
code
) {

417 (
OFPBIC_UNKNOWN_INST
Ë: { 
	`Ârötf
(
°ªam
, "UNKNOWN_INST"); ; }

418 (
OFPBIC_BAD_TABLE_ID
Ë: { 
	`Ârötf
(
°ªam
, "BAD_TABLE_ID"); ; }

419 (
OFPBIC_UNSUP_METADATA
Ë: { 
	`Ârötf
(
°ªam
, "UNSUP_METADATA"); ; }

420 (
OFPBIC_UNSUP_METADATA_MASK
Ë: { 
	`Ârötf
(
°ªam
, "UNSUP_METADATA_MASK"); ; }

424 (
OFPET_BAD_MATCH
): {

425 
code
) {

426 (
OFPBMC_BAD_TYPE
Ë: { 
	`Ârötf
(
°ªam
, "BAD_TYPE"); ; }

427 (
OFPBMC_BAD_LEN
Ë: { 
	`Ârötf
(
°ªam
, "BAD_LEN"); ; }

428 (
OFPBMC_BAD_TAG
Ë: { 
	`Ârötf
(
°ªam
, "BAD_TAG"); ; }

429 (
OFPBMC_BAD_DL_ADDR_MASK
Ë: { 
	`Ârötf
(
°ªam
, "BAD_DL_ADDR_MASK"); ; }

430 (
OFPBMC_BAD_NW_ADDR_MASK
Ë: { 
	`Ârötf
(
°ªam
, "BAD_NW_ADDR_MASK"); ; }

431 (
OFPBMC_BAD_WILDCARDS
Ë: { 
	`Ârötf
(
°ªam
, "BAD_WILDCARDS"); ; }

432 (
OFPBMC_BAD_FIELD
Ë: { 
	`Ârötf
(
°ªam
, "BAD_FIELD"); ; }

433 (
OFPBMC_BAD_VALUE
Ë: { 
	`Ârötf
(
°ªam
, "BAD_VALUE"); ; }

434 (
OFPBMC_BAD_MASK
Ë: { 
	`Ârötf
(
°ªam
, "BAD_MASK"); ; }

435 (
OFPBMC_BAD_PREREQ
Ë: { 
	`Ârötf
(
°ªam
, "BAD_PREREQ"); ; }

436 (
OFPBMC_DUP_FIELD
Ë: { 
	`Ârötf
(
°ªam
, "DUP_FIELD"); ; }

437 (
OFPBMC_EPERM
Ë: { 
	`Ârötf
(
°ªam
, "PERMISSION ERROR"); ; }

441 (
OFPET_FLOW_MOD_FAILED
): {

442 
code
) {

443 (
OFPFMFC_UNKNOWN
Ë: { 
	`Ârötf
(
°ªam
, "UNKNOWN"); ; }

444 (
OFPFMFC_TABLE_FULL
Ë: { 
	`Ârötf
(
°ªam
, "TABLE_FULL"); ; }

445 (
OFPFMFC_BAD_TABLE_ID
Ë: { 
	`Ârötf
(
°ªam
, "BAD_TABLE_ID"); ; }

446 (
OFPFMFC_OVERLAP
Ë: { 
	`Ârötf
(
°ªam
, "OVERLAP"); ; }

447 (
OFPFMFC_EPERM
Ë: { 
	`Ârötf
(
°ªam
, "EPERM"); ; }

448 (
OFPFMFC_BAD_TIMEOUT
Ë: { 
	`Ârötf
(
°ªam
, "BAD_TIMEOUT"); ; }

449 (
OFPFMFC_BAD_COMMAND
Ë: { 
	`Ârötf
(
°ªam
, "BAD_COMMAND"); ; }

453 (
OFPET_GROUP_MOD_FAILED
): {

454 
code
) {

455 (
OFPGMFC_GROUP_EXISTS
Ë: { 
	`Ârötf
(
°ªam
, "GROUP_EXISTS"); ; }

456 (
OFPGMFC_INVALID_GROUP
Ë: { 
	`Ârötf
(
°ªam
, "INVALID_GROUP"); ; }

457 (
OFPGMFC_OUT_OF_BUCKETS
Ë: { 
	`Ârötf
(
°ªam
, "OUT_OF_BUCKETS"); ; }

458 (
OFPGMFC_CHAINING_UNSUPPORTED
Ë: { 
	`Ârötf
(
°ªam
, "CHAINING_UNSUPPORTED"); ; }

459 (
OFPGMFC_WATCH_UNSUPPORTED
Ë: { 
	`Ârötf
(
°ªam
, "UNSUPPORTED"); ; }

460 (
OFPGMFC_LOOP
Ë: { 
	`Ârötf
(
°ªam
, "LOOP"); ; }

461 (
OFPGMFC_UNKNOWN_GROUP
Ë: { 
	`Ârötf
(
°ªam
, "UNKNOWN_GROUP"); ; }

465 (
OFPET_PORT_MOD_FAILED
): {

466 
code
) {

467 (
OFPPMFC_BAD_PORT
Ë: { 
	`Ârötf
(
°ªam
, "BAD_PORT"); ; }

468 (
OFPPMFC_BAD_HW_ADDR
Ë: { 
	`Ârötf
(
°ªam
, "BAD_HW_ADDR"); ; }

469 (
OFPPMFC_BAD_CONFIG
Ë: { 
	`Ârötf
(
°ªam
, "BAD_CONFIG"); ; }

470 (
OFPPMFC_BAD_ADVERTISE
Ë: { 
	`Ârötf
(
°ªam
, "BAD_ADVERTISE"); ; }

474 (
OFPET_TABLE_MOD_FAILED
): {

475 
code
) {

476 (
OFPTMFC_BAD_TABLE
Ë: { 
	`Ârötf
(
°ªam
, "BAD_TABLE"); ; }

477 (
OFPTMFC_BAD_CONFIG
Ë: { 
	`Ârötf
(
°ªam
, "BAD_CONFIG"); ; }

481 (
OFPET_METER_MOD_FAILED
): {

482 
code
) {

483 (
OFPMMFC_METER_EXISTS
Ë: { 
	`Ârötf
(
°ªam
, "METER_EXISTS"); ; }

484 (
OFPMMFC_INVALID_METER
Ë: { 
	`Ârötf
(
°ªam
, "INVALID_METER"); ; }

485 (
OFPMMFC_UNKNOWN_METER
Ë: { 
	`Ârötf
(
°ªam
, "UNKNOWN_METER"); ; }

486 (
OFPMMFC_BAD_COMMAND
Ë: { 
	`Ârötf
(
°ªam
, "BAD_COMMAND"); ; }

487 (
OFPMMFC_BAD_FLAGS
Ë: { 
	`Ârötf
(
°ªam
, "BAD_FLAGS"); ; }

488 (
OFPMMFC_BAD_RATE
Ë: { 
	`Ârötf
(
°ªam
, "BAD_RATE"); ; }

489 (
OFPMMFC_BAD_BURST
Ë: { 
	`Ârötf
(
°ªam
, "BAD_BURST"); ; }

490 (
OFPMMFC_BAD_BAND
Ë: { 
	`Ârötf
(
°ªam
, "BAD_BAND"); ; }

491 (
OFPMMFC_BAD_BAND_VALUE
Ë: { 
	`Ârötf
(
°ªam
, "BAD_BAND_VALUE"); ; }

492 (
OFPMMFC_OUT_OF_METERS
Ë: { 
	`Ârötf
(
°ªam
, "OUT_OF_METERS"); ; }

493 (
OFPMMFC_OUT_OF_BANDS
Ë: { 
	`Ârötf
(
°ªam
, "OUT_OF_BANDS"); ; }

497 (
OFPET_QUEUE_OP_FAILED
): {

498 
code
) {

499 (
OFPQOFC_BAD_PORT
Ë: { 
	`Ârötf
(
°ªam
, "BAD_PORT"); ; }

500 (
OFPQOFC_BAD_QUEUE
Ë: { 
	`Ârötf
(
°ªam
, "BAD_QUEUE"); ; }

501 (
OFPQOFC_EPERM
Ë: { 
	`Ârötf
(
°ªam
, "EPERM"); ; }

505 (
OFPET_SWITCH_CONFIG_FAILED
): {

506 
code
) {

507 (
OFPSCFC_BAD_FLAGS
Ë: { 
	`Ârötf
(
°ªam
, "BAD_FLAGS"); ; }

508 (
OFPSCFC_BAD_LEN
Ë: { 
	`Ârötf
(
°ªam
, "BAD_LEN"); ; }

513 
	`Ârötf
(
°ªam
, "?(%u)", 
code
);

514 
	}
}

519 
	$oÊ_mesßge_ty≥_to_°rög
(
uöt16_t
 
ty≥
) {

520 *
°r
;

521 
size_t
 
°r_size
;

522 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

524 
	`oÊ_mesßge_ty≥_¥öt
(
°ªam
, 
ty≥
);

525 
	`f˛o£
(
°ªam
);

526  
°r
;

527 
	}
}

530 
	$oÊ_mesßge_ty≥_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
ty≥
) {

531 
ty≥
) {

532 
OFPT_HELLO
: { 
	`Ârötf
(
°ªam
, "hello"); ; }

533 
OFPT_ERROR
: { 
	`Ârötf
(
°ªam
, "error"); ; }

534 
OFPT_ECHO_REQUEST
: { 
	`Ârötf
(
°ªam
, "echo_req"); ; }

535 
OFPT_ECHO_REPLY
: { 
	`Ârötf
(
°ªam
, "echo_repl"); ; }

536 
OFPT_EXPERIMENTER
: { 
	`Ârötf
(
°ªam
, "exp"); ; }

537 
OFPT_FEATURES_REQUEST
: { 
	`Ârötf
(
°ªam
, "feat_req"); ; }

538 
OFPT_FEATURES_REPLY
: { 
	`Ârötf
(
°ªam
, "feat_repl"); ; }

539 
OFPT_GET_CONFIG_REQUEST
: { 
	`Ârötf
(
°ªam
, "conf_req"); ; }

540 
OFPT_GET_CONFIG_REPLY
: { 
	`Ârötf
(
°ªam
, "conf_repl"); ; }

541 
OFPT_SET_CONFIG
: { 
	`Ârötf
(
°ªam
, "set_conf"); ; }

542 
OFPT_PACKET_IN
: { 
	`Ârötf
(
°ªam
, "pkt_in"); ; }

543 
OFPT_FLOW_REMOVED
: { 
	`Ârötf
(
°ªam
, "flow_rem"); ; }

544 
OFPT_PORT_STATUS
: { 
	`Ârötf
(
°ªam
, "port_stat"); ; }

545 
OFPT_PACKET_OUT
: { 
	`Ârötf
(
°ªam
, "pkt_out"); ; }

546 
OFPT_FLOW_MOD
: { 
	`Ârötf
(
°ªam
, "flow_mod"); ; }

547 
OFPT_GROUP_MOD
: { 
	`Ârötf
(
°ªam
, "grp_mod"); ; }

548 
OFPT_PORT_MOD
: { 
	`Ârötf
(
°ªam
, "port_mod"); ; }

549 
OFPT_TABLE_MOD
: { 
	`Ârötf
(
°ªam
, "tab_mod"); ; }

550 
OFPT_MULTIPART_REQUEST
: { 
	`Ârötf
(
°ªam
, "stat_req"); ; }

551 
OFPT_MULTIPART_REPLY
: { 
	`Ârötf
(
°ªam
, "stat_repl"); ; }

552 
OFPT_BARRIER_REQUEST
: { 
	`Ârötf
(
°ªam
, "barr_req"); ; }

553 
OFPT_BARRIER_REPLY
: { 
	`Ârötf
(
°ªam
, "barr_repl"); ; }

554 
OFPT_QUEUE_GET_CONFIG_REQUEST
: { 
	`Ârötf
(
°ªam
, "q_cnf_req"); ; }

555 
OFPT_QUEUE_GET_CONFIG_REPLY
: { 
	`Ârötf
(
°ªam
, "q_cnf_repl"); ; }

556 
OFPT_GET_ASYNC_REQUEST
: { 
	`Ârötf
(
°ªam
, "get_async_req"); ;}

557 
OFPT_GET_ASYNC_REPLY
: { 
	`Ârötf
(
°ªam
, "get_async_rep"); ;}

558 
OFPT_SET_ASYNC
: { 
	`Ârötf
(
°ªam
, "set_async"); ;}

559 
OFPT_METER_MOD
: { 
	`Ârötf
(
°ªam
, "meter_mod"); ;}

560 
OFPT_ROLE_REQUEST
: { 
	`Ârötf
(
°ªam
, "role_request"); ;}

561 
OFPT_ROLE_REPLY
: { 
	`Ârötf
(
°ªam
, "role_reply"); ;}

562 : { 
	`Ârötf
(
°ªam
, "?(%u)", 
ty≥
); ; }

564 
	}
}

569 
	$oÊ_buf„r_to_°rög
(
uöt32_t
 
buf„r
) {

570 *
°r
;

571 
size_t
 
°r_size
;

572 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

574 
	`oÊ_buf„r_¥öt
(
°ªam
, 
buf„r
);

575 
	`f˛o£
(
°ªam
);

576  
°r
;

577 
	}
}

580 
	$oÊ_buf„r_¥öt
(
FILE
 *
°ªam
, 
uöt32_t
 
buf„r
) {

581 
buf„r
) {

582 (0xffffffff): { 
	`Ârötf
(
°ªam
, "none"); ; }

583 : { 
	`Ârötf
(
°ªam
, "%u", 
buf„r
); ; }

585 
	}
}

590 
	$oÊ_∑ckë_ö_ªas⁄_to_°rög
(
uöt8_t
 
ªas⁄
) {

591 *
°r
;

592 
size_t
 
°r_size
;

593 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

595 
	`oÊ_∑ckë_ö_ªas⁄_¥öt
(
°ªam
, 
ªas⁄
);

596 
	`f˛o£
(
°ªam
);

597  
°r
;

598 
	}
}

601 
	$oÊ_∑ckë_ö_ªas⁄_¥öt
(
FILE
 *
°ªam
, 
uöt8_t
 
ªas⁄
) {

602 
ªas⁄
) {

603 (
OFPR_NO_MATCH
): { 
	`Ârötf
(
°ªam
, "no_match"); ; }

604 (
OFPR_ACTION
): { 
	`Ârötf
(
°ªam
, "action"); ; }

605 : { 
	`Ârötf
(
°ªam
, "?(%u)", 
ªas⁄
); ; }

607 
	}
}

612 
	$oÊ_Êow_ªmoved_ªas⁄_to_°rög
(
uöt8_t
 
ªas⁄
) {

613 *
°r
;

614 
size_t
 
°r_size
;

615 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

617 
	`oÊ_Êow_ªmoved_ªas⁄_¥öt
(
°ªam
, 
ªas⁄
);

618 
	`f˛o£
(
°ªam
);

619  
°r
;

620 
	}
}

623 
	$oÊ_Êow_ªmoved_ªas⁄_¥öt
(
FILE
 *
°ªam
, 
uöt8_t
 
ªas⁄
) {

624 
ªas⁄
) {

625 (
OFPRR_IDLE_TIMEOUT
): { 
	`Ârötf
(
°ªam
, "idle"); ; }

626 (
OFPRR_HARD_TIMEOUT
): { 
	`Ârötf
(
°ªam
, "hard"); ; }

627 (
OFPRR_DELETE
): { 
	`Ârötf
(
°ªam
, "del"); ; }

628 (
OFPRR_GROUP_DELETE
): { 
	`Ârötf
(
°ªam
, "group"); ; }

629 (
OFPRR_METER_DELETE
): { 
	`Ârötf
(
°ªam
, "meter"); ; }

630 : { 
	`Ârötf
(
°ªam
, "?(%u)", 
ªas⁄
); ; }

632 
	}
}

637 
	$oÊ_p‹t_°©us_ªas⁄_to_°rög
(
uöt8_t
 
ªas⁄
) {

638 *
°r
;

639 
size_t
 
°r_size
;

640 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

642 
	`oÊ_p‹t_°©us_ªas⁄_¥öt
(
°ªam
, 
ªas⁄
);

643 
	`f˛o£
(
°ªam
);

644  
°r
;

645 
	}
}

648 
	$oÊ_p‹t_°©us_ªas⁄_¥öt
(
FILE
 *
°ªam
, 
uöt8_t
 
ªas⁄
) {

649 
ªas⁄
) {

650 (
OFPPR_ADD
): { 
	`Ârötf
(
°ªam
, "add"); ; }

651 (
OFPPR_DELETE
): { 
	`Ârötf
(
°ªam
, "del"); ; }

652 (
OFPPR_MODIFY
): { 
	`Ârötf
(
°ªam
, "mod"); ; }

653 : { 
	`Ârötf
(
°ªam
, "?(%u)", 
ªas⁄
); ; }

655 
	}
}

660 
	$oÊ_Êow_mod_comm™d_to_°rög
(
uöt8_t
 
comm™d
) {

661 *
°r
;

662 
size_t
 
°r_size
;

663 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

665 
	`oÊ_Êow_mod_comm™d_¥öt
(
°ªam
, 
comm™d
);

666 
	`f˛o£
(
°ªam
);

667  
°r
;

668 
	}
}

671 
	$oÊ_Êow_mod_comm™d_¥öt
(
FILE
 *
°ªam
, 
uöt8_t
 
comm™d
) {

672 
comm™d
) {

673 (
OFPFC_ADD
): { 
	`Ârötf
(
°ªam
, "add"); ; }

674 (
OFPFC_MODIFY
): { 
	`Ârötf
(
°ªam
, "mod"); ; }

675 (
OFPFC_MODIFY_STRICT
): { 
	`Ârötf
(
°ªam
, "mods"); ; }

676 (
OFPFC_DELETE
): { 
	`Ârötf
(
°ªam
, "del"); ; }

677 (
OFPFC_DELETE_STRICT
): { 
	`Ârötf
(
°ªam
, "dels"); ; }

678 : { 
	`Ârötf
(
°ªam
, "?(%u)", 
comm™d
); ; }

680 
	}
}

685 
	$oÊ_group_mod_comm™d_to_°rög
(
uöt16_t
 
comm™d
) {

686 *
°r
;

687 
size_t
 
°r_size
;

688 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

690 
	`oÊ_group_mod_comm™d_¥öt
(
°ªam
, 
comm™d
);

691 
	`f˛o£
(
°ªam
);

692  
°r
;

693 
	}
}

696 
	$oÊ_group_mod_comm™d_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
comm™d
) {

697 
comm™d
) {

698 (
OFPGC_ADD
): { 
	`Ârötf
(
°ªam
, "add"); ; }

699 (
OFPGC_MODIFY
): { 
	`Ârötf
(
°ªam
, "mod"); ; }

700 (
OFPGC_DELETE
): { 
	`Ârötf
(
°ªam
, "del"); ; }

701 : { 
	`Ârötf
(
°ªam
, "?(%u)", 
comm™d
); ; }

703 
	}
}

706 
	$oÊ_mëî_mod_comm™d_to_°rög
(
uöt16_t
 
comm™d
) {

707 *
°r
;

708 
size_t
 
°r_size
;

709 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

711 
	`oÊ_mëî_mod_comm™d_¥öt
(
°ªam
, 
comm™d
);

712 
	`f˛o£
(
°ªam
);

713  
°r
;

714 
	}
}

717 
	$oÊ_mëî_mod_comm™d_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
comm™d
){

718 
comm™d
){

719 (
OFPMC_ADD
): { 
	`Ârötf
(
°ªam
, "add"); ; }

720 (
OFPMC_MODIFY
): { 
	`Ârötf
(
°ªam
, "mod"); ; }

721 (
OFPMC_DELETE
): { 
	`Ârötf
(
°ªam
, "del"); ; }

722 : { 
	`Ârötf
(
°ªam
, "?(%u)", 
comm™d
); ;}

724 
	}
}

727 
	$oÊ_mëî_b™d_ty≥_to_°rög
(
uöt16_t
 
ty≥
) {

728 *
°r
;

729 
size_t
 
°r_size
;

730 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

732 
	`oÊ_mëî_b™d_ty≥_¥öt
(
°ªam
, 
ty≥
);

733 
	`f˛o£
(
°ªam
);

734  
°r
;

735 
	}
}

738 
	$oÊ_mëî_b™d_ty≥_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
ty≥
) {

739 
ty≥
) {

740 
OFPMBT_DROP
: { 
	`Ârötf
(
°ªam
, "drop"); ; }

741 
OFPMBT_DSCP_REMARK
: { 
	`Ârötf
(
°ªam
, "dscp_remark"); ; }

742 
OFPMBT_EXPERIMENTER
: { 
	`Ârötf
(
°ªam
, "exp"); ; }

743 : { 
	`Ârötf
(
°ªam
, "?(%u)", 
ty≥
); ; }

745 
	}
}

749 
	$oÊ_group_ty≥_to_°rög
(
uöt8_t
 
ty≥
) {

750 *
°r
;

751 
size_t
 
°r_size
;

752 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

754 
	`oÊ_group_ty≥_¥öt
(
°ªam
, 
ty≥
);

755 
	`f˛o£
(
°ªam
);

756  
°r
;

757 
	}
}

760 
	$oÊ_group_ty≥_¥öt
(
FILE
 *
°ªam
, 
uöt8_t
 
ty≥
) {

761 
ty≥
) {

762 (
OFPGT_ALL
): { 
	`Ârötf
(
°ªam
, "all"); ; }

763 (
OFPGT_SELECT
): { 
	`Ârötf
(
°ªam
, "sel"); ; }

764 (
OFPGT_INDIRECT
): { 
	`Ârötf
(
°ªam
, "ind"); ; }

765 (
OFPGT_FF
): { 
	`Ârötf
(
°ªam
, "ff"); ; }

766 : { 
	`Ârötf
(
°ªam
, "?(%u)", 
ty≥
); ; }

768 
	}
}

771 
	$oÊ_°©s_ty≥_to_°rög
(
uöt16_t
 
ty≥
) {

772 *
°r
;

773 
size_t
 
°r_size
;

774 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

775 
	`oÊ_°©s_ty≥_¥öt
(
°ªam
, 
ty≥
);

776 
	`f˛o£
(
°ªam
);

777  
°r
;

778 
	}
}

781 
	$oÊ_°©s_ty≥_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
ty≥
) {

782 
ty≥
) {

783 (
OFPMP_DESC
): { 
	`Ârötf
(
°ªam
, "desc"); ; }

784 (
OFPMP_FLOW
): { 
	`Ârötf
(
°ªam
, "flow"); ; }

785 (
OFPMP_AGGREGATE
): { 
	`Ârötf
(
°ªam
, "aggr"); ; }

786 (
OFPMP_TABLE
): { 
	`Ârötf
(
°ªam
, "table"); ; }

787 (
OFPMP_TABLE_FEATURES
):{ 
	`Ârötf
(
°ªam
, "table-features"); ; }

788 (
OFPMP_PORT_STATS
): { 
	`Ârötf
(
°ªam
, "port"); ; }

789 (
OFPMP_QUEUE
): { 
	`Ârötf
(
°ªam
, "queue"); ; }

790 (
OFPMP_GROUP
): { 
	`Ârötf
(
°ªam
, "grp"); ; }

791 (
OFPMP_GROUP_FEATURES
):{ 
	`Ârötf
(
°ªam
, "grp_features"); ; }

792 (
OFPMP_GROUP_DESC
): { 
	`Ârötf
(
°ªam
, "gdesc"); ; }

793 (
OFPMP_METER
): { 
	`Ârötf
(
°ªam
, "mstats"); ; }

794 (
OFPMP_METER_CONFIG
): { 
	`Ârötf
(
°ªam
, "mconf"); ; }

795 (
OFPMP_METER_FEATURES
):{ 
	`Ârötf
(
°ªam
, "mfeat"); ; }

796 (
OFPMP_PORT_DESC
): { 
	`Ârötf
(
°ªam
, "port-desc"); ; }

797 (
OFPMP_EXPERIMENTER
): { 
	`Ârötf
(
°ªam
, "exp"); ; }

798 : { 
	`Ârötf
(
°ªam
, "?(%u)", 
ty≥
); ; }

800 
	}
}

803 
	$oÊ_¥›îtõs_ty≥_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
ty≥
){

804 
ty≥
){

805 (
OFPTFPT_INSTRUCTIONS
): { 
	`Ârötf
(
°ªam
, "instructions"); ; }

806 (
OFPTFPT_INSTRUCTIONS_MISS
): { 
	`Ârötf
(
°ªam
, "instructions_miss"); ; }

807 (
OFPTFPT_NEXT_TABLES
): { 
	`Ârötf
(
°ªam
, "next_tables"); ; }

808 (
OFPTFPT_NEXT_TABLES_MISS
): { 
	`Ârötf
(
°ªam
, "next_tables_miss"); ; }

809 (
OFPTFPT_WRITE_ACTIONS
): { 
	`Ârötf
(
°ªam
, "write_actions"); ; }

810 (
OFPTFPT_WRITE_ACTIONS_MISS
): { 
	`Ârötf
(
°ªam
, "write_actions_miss"); ; }

811 (
OFPTFPT_APPLY_ACTIONS
): { 
	`Ârötf
(
°ªam
, "apply_actions"); ; }

812 (
OFPTFPT_APPLY_ACTIONS_MISS
): { 
	`Ârötf
(
°ªam
, "apply_actions_miss"); ; }

813 (
OFPTFPT_MATCH
): { 
	`Ârötf
(
°ªam
, "oxms"); ; }

814 (
OFPTFPT_WILDCARDS
): { 
	`Ârötf
(
°ªam
, "wildcards"); ; }

815 (
OFPTFPT_WRITE_SETFIELD
): { 
	`Ârötf
(
°ªam
, "write_setfield"); ; }

816 (
OFPTFPT_WRITE_SETFIELD_MISS
):{ 
	`Ârötf
(
°ªam
, "write_setfield_miss"); ; }

817 (
OFPTFPT_APPLY_SETFIELD
): { 
	`Ârötf
(
°ªam
, "apply_setfield"); ; }

818 (
OFPTFPT_APPLY_SETFIELD_MISS
):{ 
	`Ârötf
(
°ªam
, "apply_setfield_miss"); ; }

819 (
OFPTFPT_EXPERIMENTER
): { 
	`Ârötf
(
°ªam
, "experimenter"); ; }

820 (
OFPTFPT_EXPERIMENTER_MISS
): { 
	`Ârötf
(
°ªam
, "experimenter_miss"); ; }

821 : { 
	`Ârötf
(
°ªam
, "?(%u)", 
ty≥
); ; }

823 
	}
}

827 
	$oÊ_async_∑ckë_ö
(
FILE
 *
°ªam
, 
uöt32_t
 
∑ckë_ö_mask
){

828 
boﬁ
 
e
 = 
Ál£
;

830 
	`Ârötf
(
°ªam
, "packet_in(" );

831 if(
∑ckë_ö_mask
 & (1 << 0)){

832 
	`Ârötf
(
°ªam
, "no_match");

833 
e
 = 
åue
;

835 if(
∑ckë_ö_mask
 & ((1 << 1))){

836 if(
e
)

837 
	`Ârötf
(
°ªam
,", ");

838 
	`Ârötf
(
°ªam
, "action");

839 
e
 = 
åue
;

841 if(
∑ckë_ö_mask
 & ((1 << 2))){

842 if(
e
)

843 
	`Ârötf
(
°ªam
,", ");

844 
	`Ârötf
(
°ªam
, "invalid_ttl");

845 
e
 = 
åue
;

847 i‡(!
e
)

848 
	`Ârötf
(
°ªam
, "none");

849 
	`Ârötf
(
°ªam
, ")" );

850 
	}
}

853 
	$oÊ_async_p‹t_°©us
(
FILE
 *
°ªam
, 
uöt32_t
 
p‹t_°©us_mask
){

854 
boﬁ
 
e
 = 
Ál£
;

856 
	`Ârötf
(
°ªam
, "port_status(" );

857 if(
p‹t_°©us_mask
& (1 << 0)){

858 
	`Ârötf
(
°ªam
, "add");

859 
e
 = 
åue
;

861 if(
p‹t_°©us_mask
 & ((1 << 1))){

862 if(
e
)

863 
	`Ârötf
(
°ªam
,", ");

864 
	`Ârötf
(
°ªam
, "delete");

865 
e
 = 
åue
;

867 if(
p‹t_°©us_mask
 & ((1 << 2))){

868 if(
e
)

869 
	`Ârötf
(
°ªam
,", ");

870 
	`Ârötf
(
°ªam
, "modify");

871 
e
 = 
åue
;

873 i‡(!
e
)

874 
	`Ârötf
(
°ªam
, "none");

875 
	`Ârötf
(
°ªam
, ")" );

876 
	}
}

879 
	$oÊ_async_Êow_ªmoved
(
FILE
 *
°ªam
, 
uöt32_t
 
Êow_ªm_mask
){

880 
boﬁ
 
e
 = 
Ál£
;

882 
	`Ârötf
(
°ªam
, "flow_removed(" );

883 if(
Êow_ªm_mask
 & (1 << 0)){

884 
	`Ârötf
(
°ªam
, "idle_timeout");

885 
e
 = 
åue
;

887 if(
Êow_ªm_mask
 & ((1 << 1))){

888 if(
e
)

889 
	`Ârötf
(
°ªam
,", ");

890 
	`Ârötf
(
°ªam
, "hard_timeout");

891 
e
 = 
åue
;

893 if(
Êow_ªm_mask
 & ((1 << 2))){

894 if(
e
)

895 
	`Ârötf
(
°ªam
,", ");

896 
	`Ârötf
(
°ªam
, "delete");

897 
e
 = 
åue
;

899 if(
Êow_ªm_mask
 & ((1 << 3))){

900 if(
e
)

901 
	`Ârötf
(
°ªam
,", ");

902 
	`Ârötf
(
°ªam
, "group delete");

903 
e
 = 
åue
;

905 if(
Êow_ªm_mask
 & ((1 << 4))){

906 if(
e
)

907 
	`Ârötf
(
°ªam
,", ");

908 
	`Ârötf
(
°ªam
, "meter delete");

909 
e
 = 
åue
;

911 i‡(!
e
)

912 
	`Ârötf
(
°ªam
, "none");

914 
	`Ârötf
(
°ªam
, ")" );

915 
	}
}

918 
	$oÊ_hex_to_°rög
(
uöt8_t
 *
buf
, 
size_t
 
buf_size
) {

919 *
°r
;

920 
size_t
 
°r_size
;

921 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

922 
	`oÊ_hex_¥öt
(
°ªam
, 
buf
, 
buf_size
);

923 
	`f˛o£
(
°ªam
);

924  
°r
;

925 
	}
}

928 
	$oÊ_hex_¥öt
(
FILE
 *
°ªam
, 
uöt8_t
 *
buf
, 
size_t
 
buf_size
) {

929 
size_t
 
i
;

930 
size_t
 
löes
 = 0;

932 
i
=0; i < 
buf_size
; i++) {

933 i‡(
i
 % 16 == 0) {

934 i‡(
löes
 > 0) {

935 
	`Ârötf
(
°ªam
, "\n");

937 
löes
++;

938 
	`Ârötf
(
°ªam
, "%04zu %02"
PRIx8
"", 
i
, 
buf
[i]);

939 } i‡–
i
 % 8 == 0) {

940 
	`Ârötf
(
°ªam
, " %02"
PRIx8
"", 
buf
[
i
]);

942 
	`Ârötf
(
°ªam
, " %02"
PRIx8
"", 
buf
[
i
]);

945 
	}
}

	@oflib/ofl-print.h

32 #i‚de‡
OFL_PRINT_H


33 
	#OFL_PRINT_H
 1

	)

35 
	~<sys/ty≥s.h
>

36 
	~<öây≥s.h
>

37 
	~<°dio.h
>

39 
	~"oÊ.h
"

40 
	~"oÊ-¥öt.h
"

48 
oÊ_p‹t_to_°rög
(
uöt32_t
 
p‹t
);

51 
oÊ_p‹t_¥öt
(
FILE
 *
°ªam
, 
uöt32_t
 
p‹t
);

54 
oÊ_ùv6_ext_hdr_to_°rög
(
uöt16_t
 
ext_hdr
);

57 
oÊ_ùv6_ext_hdr_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
ext_hdr
);

60 
oÊ_queue_to_°rög
(
uöt32_t
 
queue
);

63 
oÊ_queue_¥öt
(
FILE
 *
°ªam
, 
uöt32_t
 
queue
);

66 
oÊ_group_to_°rög
(
uöt32_t
 
group
);

69 
oÊ_group_¥öt
(
FILE
 *
°ªam
, 
uöt32_t
 
group
);

72 
oÊ_èbÀ_to_°rög
(
uöt8_t
 
èbÀ
);

75 
oÊ_èbÀ_¥öt
(
FILE
 *
°ªam
, 
uöt8_t
 
èbÀ
);

78 
oÊ_vœn_vid_to_°rög
(
uöt32_t
 
vid
);

81 
oÊ_vœn_vid_¥öt
(
FILE
 *
°ªam
, 
uöt32_t
 
vid
);

84 
oÊ_a˘i⁄_ty≥_to_°rög
(
uöt16_t
 
ty≥
);

87 
oÊ_a˘i⁄_ty≥_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
ty≥
);

90 
oÊ_oxm_ty≥_to_°rög
(
uöt16_t
 
ty≥
);

93 
oÊ_oxm_ty≥_¥öt
(
FILE
 *
°ªam
, 
uöt32_t
 
ty≥
);

96 
oÊ_ö°ru˘i⁄_ty≥_to_°rög
(
uöt16_t
 
ty≥
);

99 
oÊ_ö°ru˘i⁄_ty≥_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
ty≥
);

102 
oÊ_queue_¥›_ty≥_to_°rög
(
uöt16_t
 
ty≥
);

105 
oÊ_queue_¥›_ty≥_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
ty≥
);

108 
oÊ_îr‹_ty≥_to_°rög
(
uöt16_t
 
ty≥
);

111 
oÊ_îr‹_ty≥_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
ty≥
);

114 
oÊ_îr‹_code_to_°rög
(
uöt16_t
 
ty≥
, uöt16_à
code
);

117 
oÊ_îr‹_code_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
ty≥
, uöt16_à
code
);

120 
oÊ_mesßge_ty≥_to_°rög
(
uöt16_t
 
ty≥
);

123 
oÊ_mesßge_ty≥_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
ty≥
);

126 
oÊ_buf„r_to_°rög
(
uöt32_t
 
buf„r
);

129 
oÊ_buf„r_¥öt
(
FILE
 *
°ªam
, 
uöt32_t
 
buf„r
);

132 
oÊ_∑ckë_ö_ªas⁄_to_°rög
(
uöt8_t
 
ªas⁄
);

135 
oÊ_∑ckë_ö_ªas⁄_¥öt
(
FILE
 *
°ªam
, 
uöt8_t
 
ªas⁄
);

138 
oÊ_Êow_ªmoved_ªas⁄_to_°rög
(
uöt8_t
 
ªas⁄
);

141 
oÊ_Êow_ªmoved_ªas⁄_¥öt
(
FILE
 *
°ªam
, 
uöt8_t
 
ªas⁄
);

144 
oÊ_p‹t_°©us_ªas⁄_to_°rög
(
uöt8_t
 
ªas⁄
);

147 
oÊ_p‹t_°©us_ªas⁄_¥öt
(
FILE
 *
°ªam
, 
uöt8_t
 
ªas⁄
);

150 
oÊ_Êow_mod_comm™d_to_°rög
(
uöt8_t
 
comm™d
);

153 
oÊ_Êow_mod_comm™d_¥öt
(
FILE
 *
°ªam
, 
uöt8_t
 
comm™d
);

156 
oÊ_group_mod_comm™d_to_°rög
(
uöt16_t
 
comm™d
);

159 
oÊ_group_mod_comm™d_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
comm™d
);

162 
oÊ_mëî_mod_comm™d_to_°rög
(
uöt16_t
 
comm™d
);

165 
oÊ_mëî_mod_comm™d_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
comm™d
);

168 
oÊ_mëî_b™d_ty≥_to_°rög
(
uöt16_t
 
ty≥
);

171 
oÊ_mëî_b™d_ty≥_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
ty≥
);

174 
oÊ_group_ty≥_to_°rög
(
uöt8_t
 
ty≥
);

177 
oÊ_group_ty≥_¥öt
(
FILE
 *
°ªam
, 
uöt8_t
 
ty≥
);

180 
oÊ_°©s_ty≥_to_°rög
(
uöt16_t
 
ty≥
);

183 
oÊ_°©s_ty≥_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
ty≥
);

186 
oÊ_¥›îtõs_ty≥_¥öt
(
FILE
 *
°ªam
, 
uöt16_t
 
ty≥
);

189 
oÊ_async_∑ckë_ö
(
FILE
 *
°ªam
, 
uöt32_t
 
∑ckë_ö_mask
);

192 
oÊ_async_p‹t_°©us
(
FILE
 *
°ªam
, 
uöt32_t
 
p‹t_°©us_mask
);

195 
oÊ_async_Êow_ªmoved
(
FILE
 *
°ªam
, 
uöt32_t
 
Êow_ªm_mask
);

198 
oÊ_hex_to_°rög
(
uöt8_t
 *
buf
, 
size_t
 
buf_size
);

201 
oÊ_hex_¥öt
(
FILE
 *
°ªam
, 
uöt8_t
 *
buf
, 
size_t
 
buf_size
);

	@oflib/ofl-structs-match.c

31 
	~"oÊ-°ru˘s.h
"

32 
	~"lib/hash.h
"

33 
	~"oxm-m©ch.h
"

36 
	$oÊ_°ru˘s_m©ch_öô
(
oÊ_m©ch
 *
m©ch
){

38 
m©ch
->
hódî
.
ty≥
 = 
OFPMT_OXM
;

39 
m©ch
->
hódî
.
Àngth
 = 0;

40 
m©ch
->
m©ch_fõlds
 = (
hm≠
Ë
	`HMAP_INITIALIZER
(&match->match_fields);

41 
	}
}

45 
	$oÊ_°ru˘s_m©ch_put8
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, 
uöt8_t
 
vÆue
){

46 
oÊ_m©ch_év
 *
m
 = 
	`mÆloc
( (ofl_match_tlv));

47 
Àn
 = (
uöt8_t
);

49 
m
->
hódî
 = header;

50 
m
->
vÆue
 = 
	`mÆloc
(
Àn
);

51 
	`mem˝y
(
m
->
vÆue
, &vÆue, 
Àn
);

52 
	`hm≠_ö£π
(&
m©ch
->
m©ch_fõlds
,&
m
->
hm≠_node
,
	`hash_öt
(
hódî
, 0));

53 
m©ch
->
hódî
.
Àngth
 +
Àn
 + 4;

54 
	}
}

57 
	$oÊ_°ru˘s_m©ch_put8m
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, 
uöt8_t
 
vÆue
, uöt8_à
mask
){

58 
oÊ_m©ch_év
 *
m
 = 
	`mÆloc
( (ofl_match_tlv));

59 
Àn
 = (
uöt8_t
);

61 
m
->
hódî
 = header;

62 
m
->
vÆue
 = 
	`mÆloc
(
Àn
*2);

63 
	`mem˝y
(
m
->
vÆue
, &vÆue, 
Àn
);

64 
	`mem˝y
(
m
->
vÆue
 + 
Àn
, &
mask
,Üen);

65 
	`hm≠_ö£π
(&
m©ch
->
m©ch_fõlds
,&
m
->
hm≠_node
,
	`hash_öt
(
hódî
, 0));

66 
m©ch
->
hódî
.
Àngth
 +
Àn
*2 + 4;

67 
	}
}

70 
	$oÊ_°ru˘s_m©ch_put16
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, 
uöt16_t
 
vÆue
){

71 
oÊ_m©ch_év
 *
m
 = 
	`mÆloc
( (ofl_match_tlv));

72 
Àn
 = (
uöt16_t
);

74 
m
->
hódî
 = header;

75 
m
->
vÆue
 = 
	`mÆloc
(
Àn
);

76 
	`mem˝y
(
m
->
vÆue
, &vÆue, 
Àn
);

77 
	`hm≠_ö£π
(&
m©ch
->
m©ch_fõlds
,&
m
->
hm≠_node
,
	`hash_öt
(
hódî
, 0));

78 
m©ch
->
hódî
.
Àngth
 +
Àn
 + 4;

79 
	}
}

83 
	$oÊ_°ru˘s_m©ch_put16m
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, 
uöt16_t
 
vÆue
, uöt16_à
mask
){

84 
oÊ_m©ch_év
 *
m
 = 
	`mÆloc
( (ofl_match_tlv));

85 
Àn
 = (
uöt16_t
);

87 
m
->
hódî
 = header;

88 
m
->
vÆue
 = 
	`mÆloc
(
Àn
*2);

89 
	`mem˝y
(
m
->
vÆue
, &vÆue, 
Àn
);

90 
	`mem˝y
(
m
->
vÆue
 + 
Àn
, &
mask
,Üen);

91 
	`hm≠_ö£π
(&
m©ch
->
m©ch_fõlds
,&
m
->
hm≠_node
,
	`hash_öt
(
hódî
, 0));

92 
m©ch
->
hódî
.
Àngth
 +
Àn
*2 + 4;

93 
	}
}

96 
	$oÊ_°ru˘s_m©ch_put32
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, uöt32_à
vÆue
){

97 
oÊ_m©ch_év
 *
m
 = 
	`xmÆloc
( (ofl_match_tlv));

99 
Àn
 = (
uöt32_t
);

101 
m
->
hódî
 = header;

102 
m
->
vÆue
 = 
	`mÆloc
(
Àn
);

103 
	`mem˝y
(
m
->
vÆue
, &vÆue, 
Àn
);

104 
	`hm≠_ö£π
(&
m©ch
->
m©ch_fõlds
,&
m
->
hm≠_node
,
	`hash_öt
(
hódî
, 0));

105 
m©ch
->
hódî
.
Àngth
 +
Àn
 + 4;

107 
	}
}

110 
	$oÊ_°ru˘s_m©ch_put32m
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, uöt32_à
vÆue
, uöt32_à
mask
){

111 
oÊ_m©ch_év
 *
m
 = 
	`mÆloc
( (ofl_match_tlv));

112 
Àn
 = (
uöt32_t
);

114 
m
->
hódî
 = header;

115 
m
->
vÆue
 = 
	`mÆloc
(
Àn
*2);

116 
	`mem˝y
(
m
->
vÆue
, &vÆue, 
Àn
);

117 
	`mem˝y
(
m
->
vÆue
 + 
Àn
, &
mask
,Üen);

118 
	`hm≠_ö£π
(&
m©ch
->
m©ch_fõlds
,&
m
->
hm≠_node
,
	`hash_öt
(
hódî
, 0));

119 
m©ch
->
hódî
.
Àngth
 +
Àn
*2 + 4;

121 
	}
}

124 
	$oÊ_°ru˘s_m©ch_put64
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, 
uöt64_t
 
vÆue
){

125 
oÊ_m©ch_év
 *
m
 = 
	`mÆloc
( (ofl_match_tlv));

126 
Àn
 = (
uöt64_t
);

128 
m
->
hódî
 = header;

129 
m
->
vÆue
 = 
	`mÆloc
(
Àn
);

130 
	`mem˝y
(
m
->
vÆue
, &vÆue, 
Àn
);

131 
	`hm≠_ö£π
(&
m©ch
->
m©ch_fõlds
,&
m
->
hm≠_node
,
	`hash_öt
(
hódî
, 0));

132 
m©ch
->
hódî
.
Àngth
 +
Àn
 + 4;

134 
	}
}

137 
	$oÊ_°ru˘s_m©ch_put64m
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, 
uöt64_t
 
vÆue
, uöt64_à
mask
){

138 
oÊ_m©ch_év
 *
m
 = 
	`mÆloc
( (ofl_match_tlv));

139 
Àn
 = (
uöt64_t
);

141 
m
->
hódî
 = header;

142 
m
->
vÆue
 = 
	`mÆloc
(
Àn
*2);

143 
	`mem˝y
(
m
->
vÆue
, &vÆue, 
Àn
);

144 
	`mem˝y
(
m
->
vÆue
 + 
Àn
, &
mask
,Üen);

145 
	`hm≠_ö£π
(&
m©ch
->
m©ch_fõlds
,&
m
->
hm≠_node
,
	`hash_öt
(
hódî
, 0));

146 
m©ch
->
hódî
.
Àngth
 +
Àn
*2 + 4;

148 
	}
}

151 
	$oÊ_°ru˘s_m©ch_put_ëh
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, 
uöt8_t
 
vÆue
[
ETH_ADDR_LEN
]){

152 
oÊ_m©ch_év
 *
m
 = 
	`mÆloc
( (ofl_match_tlv));

153 
Àn
 = 
ETH_ADDR_LEN
;

155 
m
->
hódî
 = header;

156 
m
->
vÆue
 = 
	`mÆloc
(
Àn
);

157 
	`mem˝y
(
m
->
vÆue
, vÆue, 
Àn
);

158 
	`hm≠_ö£π
(&
m©ch
->
m©ch_fõlds
,&
m
->
hm≠_node
,
	`hash_öt
(
hódî
, 0));

159 
m©ch
->
hódî
.
Àngth
 +
Àn
 + 4;

161 
	}
}

164 
	$oÊ_°ru˘s_m©ch_put_ëh_m
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, 
uöt8_t
 
vÆue
[
ETH_ADDR_LEN
], uöt8_à
mask
[ETH_ADDR_LEN]){

165 
oÊ_m©ch_év
 *
m
 = 
	`mÆloc
( (ofl_match_tlv));

166 
Àn
 = 
ETH_ADDR_LEN
;

168 
m
->
hódî
 = header;

169 
m
->
vÆue
 = 
	`mÆloc
(
Àn
*2);

170 
	`mem˝y
(
m
->
vÆue
, vÆue, 
Àn
);

171 
	`mem˝y
(
m
->
vÆue
 + 
Àn
, 
mask
,Üen);

172 
	`hm≠_ö£π
(&
m©ch
->
m©ch_fõlds
,&
m
->
hm≠_node
,
	`hash_öt
(
hódî
, 0));

173 
m©ch
->
hódî
.
Àngth
 +
Àn
*2 + 4;

175 
	}
}

178 
	$oÊ_°ru˘s_m©ch_put_ùv6
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, 
uöt8_t
 
vÆue
[
IPv6_ADDR_LEN
]){

180 
oÊ_m©ch_év
 *
m
 = 
	`mÆloc
( (ofl_match_tlv));

181 
Àn
 = 
IPv6_ADDR_LEN
;

183 
m
->
hódî
 = header;

184 
m
->
vÆue
 = 
	`mÆloc
(
Àn
);

185 
	`mem˝y
(
m
->
vÆue
, vÆue, 
Àn
);

186 
	`hm≠_ö£π
(&
m©ch
->
m©ch_fõlds
,&
m
->
hm≠_node
,
	`hash_öt
(
hódî
, 0));

187 
m©ch
->
hódî
.
Àngth
 +
Àn
 + 4;

189 
	}
}

192 
	$oÊ_°ru˘s_m©ch_put_ùv6m
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, 
uöt8_t
 
vÆue
[
IPv6_ADDR_LEN
], uöt8_à
mask
[IPv6_ADDR_LEN]){

193 
oÊ_m©ch_év
 *
m
 = 
	`mÆloc
( (ofl_match_tlv));

194 
Àn
 = 
IPv6_ADDR_LEN
;

196 
m
->
hódî
 = header;

197 
m
->
vÆue
 = 
	`mÆloc
(
Àn
*2);

198 
	`mem˝y
(
m
->
vÆue
, vÆue, 
Àn
);

199 
	`mem˝y
(
m
->
vÆue
 + 
Àn
, 
mask
,Üen);

200 
	`hm≠_ö£π
(&
m©ch
->
m©ch_fõlds
,&
m
->
hm≠_node
,
	`hash_öt
(
hódî
, 0));

201 
m©ch
->
hódî
.
Àngth
 +
Àn
*2 + 4;

203 
	}
}

	@oflib/ofl-structs-pack.c

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<√töë/ö.h
>

36 
	~"ö˛ude/›íÊow/›íÊow.h
"

37 
	~"oxm-m©ch.h
"

38 
	~"oÊ.h
"

39 
	~"oÊ-a˘i⁄s.h
"

40 
	~"oÊ-°ru˘s.h
"

41 
	~"oÊ-utûs.h
"

42 
	~"oÊ-log.h
"

43 
	~"oÊ-∑ckës.h
"

46 
	#LOG_MODULE
 
oÊ_°r_p


	)

47 
	$OFL_LOG_INIT
(
LOG_MODULE
)

50 
size_t


51 
	$oÊ_°ru˘s_ö°ru˘i⁄s_oÂ_Àn
(
oÊ_ö°ru˘i⁄_hódî
 *
ö°ru˘i⁄
, 
oÊ_exp
 *
exp
) {

52 
ö°ru˘i⁄
->
ty≥
) {

53 
OFPIT_GOTO_TABLE
: {

54  (
oÂ_ö°ru˘i⁄_gŸo_èbÀ
);

56 
OFPIT_WRITE_METADATA
: {

57  (
oÂ_ö°ru˘i⁄_wrôe_mëad©a
);

59 
OFPIT_WRITE_ACTIONS
:

60 
OFPIT_APPLY_ACTIONS
: {

61 
oÊ_ö°ru˘i⁄_a˘i⁄s
 *
i
 = (oÊ_ö°ru˘i⁄_a˘i⁄†*)
ö°ru˘i⁄
;

63  (
oÂ_ö°ru˘i⁄_a˘i⁄s
)

64 + 
	`oÊ_a˘i⁄s_oÂ_tŸÆ_Àn
(
i
->
a˘i⁄s
, i->
a˘i⁄s_num
, 
exp
);

66 
OFPIT_CLEAR_ACTIONS
: {

67  (
oÂ_ö°ru˘i⁄_a˘i⁄s
);

69 
OFPIT_METER
:{

70  (
oÂ_ö°ru˘i⁄_mëî
);

72 
OFPIT_EXPERIMENTER
: {

73 i‡(
exp
 =
NULL
 ||Éxp->
ö°
 =NULL ||Éxp->ö°->
oÂ_Àn
 == NULL) {

74 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÜenÉxperimenter instruction, butÇo callback was given.");

77  
exp
->
ö°
->
	`oÂ_Àn
(
ö°ru˘i⁄
);

80 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÜen unknown instructionÅype.");

83 
	}
}

85 
size_t


86 
	$oÊ_°ru˘s_ö°ru˘i⁄s_oÂ_tŸÆ_Àn
(
oÊ_ö°ru˘i⁄_hódî
 **
ö°ru˘i⁄s
, 
size_t
 
ö°ru˘i⁄s_num
, 
oÊ_exp
 *
exp
) {

87 
size_t
 
sum
;

88 
	`OFL_UTILS_SUM_ARR_FUN2
(
sum
, 
ö°ru˘i⁄s
, 
ö°ru˘i⁄s_num
,

89 
oÊ_°ru˘s_ö°ru˘i⁄s_oÂ_Àn
, 
exp
);

90  
sum
;

91 
	}
}

93 
size_t


94 
	$oÊ_°ru˘s_ö°ru˘i⁄s_∑ck
(
oÊ_ö°ru˘i⁄_hódî
 *
§c
, 
oÂ_ö°ru˘i⁄
 *
d°
, 
oÊ_exp
 *
exp
) {

96 
d°
->
ty≥
 = 
	`ht⁄s
(
§c
->type);

97 
	`mem£t
(
d°
->
∑d
, 0x00, 4);

99 
§c
->
ty≥
) {

100 
OFPIT_GOTO_TABLE
: {

101 
oÊ_ö°ru˘i⁄_gŸo_èbÀ
 *
si
 = (oÊ_ö°ru˘i⁄_gŸo_èbÀ *)
§c
;

102 
oÂ_ö°ru˘i⁄_gŸo_èbÀ
 *
di
 = (oÂ_ö°ru˘i⁄_gŸo_èbÀ *)
d°
;

104 
di
->
Àn
 = 
	`ht⁄s
((
oÂ_ö°ru˘i⁄_gŸo_èbÀ
));

105 
di
->
èbÀ_id
 = 
si
->table_id;

106 
	`mem£t
(
di
->
∑d
, 0x00, 3);

108  (
oÂ_ö°ru˘i⁄_gŸo_èbÀ
);

110 
OFPIT_WRITE_METADATA
: {

111 
oÊ_ö°ru˘i⁄_wrôe_mëad©a
 *
si
 = (oÊ_ö°ru˘i⁄_wrôe_mëad©®*)
§c
;

112 
oÂ_ö°ru˘i⁄_wrôe_mëad©a
 *
di
 = (oÂ_ö°ru˘i⁄_wrôe_mëad©®*)
d°
;

114 
di
->
Àn
 = 
	`ht⁄s
((
oÂ_ö°ru˘i⁄_wrôe_mëad©a
));

115 
	`mem£t
(
di
->
∑d
, 0x00, 4);

116 
di
->
mëad©a
 = 
	`ht⁄64
(
si
->metadata);

117 
di
->
mëad©a_mask
 = 
	`ht⁄64
(
si
->metadata_mask);

119  (
oÂ_ö°ru˘i⁄_wrôe_mëad©a
);

121 
OFPIT_WRITE_ACTIONS
:

122 
OFPIT_APPLY_ACTIONS
: {

123 
size_t
 
tŸÆ_Àn
, 
Àn
;

124 
uöt8_t
 *
d©a
;

125 
size_t
 
i
;

127 
oÊ_ö°ru˘i⁄_a˘i⁄s
 *
si
 = (oÊ_ö°ru˘i⁄_a˘i⁄†*)
§c
;

128 
oÂ_ö°ru˘i⁄_a˘i⁄s
 *
di
 = (oÂ_ö°ru˘i⁄_a˘i⁄†*)
d°
;

130 
tŸÆ_Àn
 = (
oÂ_ö°ru˘i⁄_a˘i⁄s
Ë+ 
	`oÊ_a˘i⁄s_oÂ_tŸÆ_Àn
(
si
->
a˘i⁄s
, si->
a˘i⁄s_num
, 
exp
);

132 
di
->
Àn
 = 
	`ht⁄s
(
tŸÆ_Àn
);

133 
	`mem£t
(
di
->
∑d
, 0x00, 4);

134 
d©a
 = (
uöt8_t
 *)
d°
 + (
oÂ_ö°ru˘i⁄_a˘i⁄s
);

136 
i
=0; i<
si
->
a˘i⁄s_num
; i++) {

137 
Àn
 = 
	`oÊ_a˘i⁄s_∑ck
(
si
->
a˘i⁄s
[
i
], (
oÂ_a˘i⁄_hódî
 *)
d©a
, d©a, 
exp
);

138 
d©a
 +
Àn
;

140  
tŸÆ_Àn
;

142 
OFPIT_CLEAR_ACTIONS
: {

143 
size_t
 
tŸÆ_Àn
;

145 
oÂ_ö°ru˘i⁄_a˘i⁄s
 *
di
 = (oÂ_ö°ru˘i⁄_a˘i⁄†*)
d°
;

147 
tŸÆ_Àn
 = (
oÂ_ö°ru˘i⁄_a˘i⁄s
);

149 
di
->
Àn
 = 
	`ht⁄s
(
tŸÆ_Àn
);

150 
	`mem£t
(
di
->
∑d
, 0x00, 4);

152  
tŸÆ_Àn
;

154 
OFPIT_METER
: {

155 
oÊ_ö°ru˘i⁄_mëî
 *
si
 = (oÊ_ö°ru˘i⁄_mëî *Ë
§c
;

156 
oÂ_ö°ru˘i⁄_mëî
 *
di
 = (oÂ_ö°ru˘i⁄_mëî *Ë
d°
;

158 
di
->
Àn
 = 
	`ht⁄s
((
oÂ_ö°ru˘i⁄_mëî
));

159 
di
->
mëî_id
 = 
	`ht⁄l
(
si
->meter_id);

161  (
oÂ_ö°ru˘i⁄_mëî
);

163 
OFPIT_EXPERIMENTER
: {

164 i‡(
exp
 =
NULL
 ||Éxp->
ö°
 =NULL ||Éxp->ö°->
∑ck
 == NULL) {

165 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÖackÉxperimenter instruction, butÇo callback was given.");

168  
exp
->
ö°
->
	`∑ck
((
oÊ_ö°ru˘i⁄_hódî
 *)
§c
, 
d°
);

171 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÖack unknown instructionÅype.");

174 
	}
}

176 
size_t


177 
	$oÊ_°ru˘s_mëî_b™d_oÂ_Àn
(
oÊ_mëî_b™d_hódî
 *
mëî_b™d
) {

178 
mëî_b™d
->
ty≥
) {

179 
OFPMBT_DROP
:

180  (
oÂ_mëî_b™d_dr›
);

181 
OFPMBT_DSCP_REMARK
:

182  (
oÂ_mëî_b™d_ds˝_ªm¨k
);

183 
OFPMBT_EXPERIMENTER
:

184  (
oÂ_mëî_b™d_ex≥rimíãr
);

186 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÜen unknown meterÅype.");

189 
	}
}

191 
size_t


192 
	$oÊ_°ru˘s_mëî_b™ds_oÂ_tŸÆ_Àn
(
oÊ_mëî_b™d_hódî
 **
mëî_b™ds
, 
size_t
 
mëî_b™ds_num
) {

193 
size_t
 
sum
;

194 
	`OFL_UTILS_SUM_ARR_FUN
(
sum
, 
mëî_b™ds
, 
mëî_b™ds_num
,

195 
oÊ_°ru˘s_mëî_b™d_oÂ_Àn
);

196  
sum
;

197 
	}
}

199 
size_t


200 
	$oÊ_°ru˘s_mëî_b™d_∑ck
(
oÊ_mëî_b™d_hódî
 *
§c
, 
oÂ_mëî_b™d_hódî
 *
d°
){

202 
d°
->
ty≥
 = 
	`ht⁄s
(
§c
->type);

203 
d°
->
øã
 = 
	`ht⁄l
(
§c
->rate);

204 
d°
->
bur°_size
 = 
	`ht⁄l
(
§c
->burst_size);

205 
§c
->
ty≥
) {

206 
OFPMBT_DROP
:{

207 
oÂ_mëî_b™d_dr›
 *
di
 = (oÂ_mëî_b™d_dr› *)
d°
;

208 
di
->
Àn
 = 
	`ht⁄s
((
oÂ_mëî_b™d_dr›
));

209 
	`mem£t
(
di
->
∑d
, 0x0, 4);

210  (
oÂ_mëî_b™d_dr›
);

212 
OFPMBT_DSCP_REMARK
:{

213 
oÊ_mëî_b™d_ds˝_ªm¨k
 *
si
 = (oÊ_mëî_b™d_ds˝_ªm¨k*)
§c
;

214 
oÂ_mëî_b™d_ds˝_ªm¨k
 *
di
 = (oÂ_mëî_b™d_ds˝_ªm¨k *)
d°
;

215 
di
->
Àn
 = 
	`ht⁄s
((
oÂ_mëî_b™d_ds˝_ªm¨k
));

216 
di
->
¥ec_Àvñ
 = 
si
->prec_level;

217 
	`mem£t
(
di
->
∑d
,0x0,3);

218  (
oÂ_mëî_b™d_ds˝_ªm¨k
);

220 
OFPMBT_EXPERIMENTER
:{

221 
oÊ_mëî_b™d_ex≥rimíãr
 *
si
 = (oÊ_mëî_b™d_ex≥rimíãr*)
§c
;

222 
oÂ_mëî_b™d_ex≥rimíãr
 *
di
 = (oÂ_mëî_b™d_ex≥rimíã∏*)
d°
;

223 
di
->
Àn
 = 
	`ht⁄s
((
oÂ_mëî_b™d_ex≥rimíãr
));

224 
di
->
ex≥rimíãr
 = 
	`ht⁄l
(
si
->experimenter);

225  (
oÂ_mëî_b™d_ex≥rimíãr
);

228 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÖack unknown meter band.");

231 
	}
}

233 
size_t


234 
	$oÊ_°ru˘s_èbÀ_„©uªs_¥›îtõs_oÂ_Àn
(
oÊ_èbÀ_„©uª_¥›_hódî
 *
¥›
, 
oÊ_exp
 *
exp
){

236 
¥›
->
ty≥
){

237 
OFPTFPT_INSTRUCTIONS
:

238 
OFPTFPT_INSTRUCTIONS_MISS
:{

239 
oÊ_èbÀ_„©uª_¥›_ö°ru˘i⁄s
 *
ö°_¥›
 = (oÊ_èbÀ_„©uª_¥›_ö°ru˘i⁄s*Ë
¥›
;

240 
Àn
 = 0;

241 
i
;

242 
i
 = 0; i < 
ö°_¥›
->
ids_num
; i++){

243 i‡(
ö°_¥›
->
ö°ru˘i⁄_ids
[
i
].
ty≥
 =
OFPIT_EXPERIMENTER
) {

244 i‡(
exp
 =
NULL
 ||Éxp->
ö°
 =NULL ||Éxp->ö°->
u≈ack
 == NULL) {

245 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received EXPERIMENTER instruction, butÇo callback was given.");

246  
	`oÊ_îr‹
(
OFPET_BAD_INSTRUCTION
, 
OFPBIC_UNSUP_INST
);

248 
Àn
 +(
oÂ_ö°ru˘i⁄
Ë+ 
exp
->
ö°
->
	`oÂ_Àn
(&
ö°_¥›
->
ö°ru˘i⁄_ids
[
i
]);

251 
Àn
 +(
oÂ_ö°ru˘i⁄
) - 4;

255  (
oÂ_èbÀ_„©uª_¥›_ö°ru˘i⁄s
Ë+ 
Àn
 ;

257 
OFPTFPT_NEXT_TABLES
:

258 
OFPTFPT_NEXT_TABLES_MISS
:{

259 
oÊ_èbÀ_„©uª_¥›_√xt_èbÀs
 * 
èbÀ_¥›
 = (oÊ_èbÀ_„©uª_¥›_√xt_èbÀ†*Ë
¥›
;

260  (
oÂ_èbÀ_„©uª_¥›_√xt_èbÀs
Ë+ (
èbÀ_¥›
->
èbÀ_num
 * (
uöt8_t
));

263 
OFPTFPT_WRITE_ACTIONS
:

264 
OFPTFPT_WRITE_ACTIONS_MISS
:

265 
OFPTFPT_APPLY_ACTIONS
:

266 
OFPTFPT_APPLY_ACTIONS_MISS
:{

267 
oÊ_èbÀ_„©uª_¥›_a˘i⁄s
 *
a˘_¥›
 = (oÊ_èbÀ_„©uª_¥›_a˘i⁄s*Ë
¥›
;

268 
Àn
 = 0;

269 
i
;

270 
i
 = 0; i < 
a˘_¥›
->
a˘i⁄s_num
; i++){

271 i‡(
a˘_¥›
->
a˘i⁄_ids
[
i
].
ty≥
 =
OFPAT_EXPERIMENTER
)

272 
Àn
 += 8;

274 
Àn
 += 4;

276  (
oÂ_èbÀ_„©uª_¥›_a˘i⁄s
Ë+ 
Àn
;

278 
OFPTFPT_MATCH
:

279 
OFPTFPT_WILDCARDS
:

280 
OFPTFPT_WRITE_SETFIELD
:

281 
OFPTFPT_WRITE_SETFIELD_MISS
:

282 
OFPTFPT_APPLY_SETFIELD
:

283 
OFPTFPT_APPLY_SETFIELD_MISS
:{

284 
oÊ_èbÀ_„©uª_¥›_oxm
 * 
oxm_¥›
 = (oÊ_èbÀ_„©uª_¥›_oxm *Ë
¥›
;

285  (
oÂ_èbÀ_„©uª_¥›_oxm
Ë+ (
oxm_¥›
->
oxm_num
 * (
uöt32_t
));

287 
OFPTFPT_EXPERIMENTER
:

288 
OFPTFPT_EXPERIMENTER_MISS
:{

294 
	}
}

296 
size_t


297 
	$oÊ_°ru˘s_èbÀ_„©uªs_¥›îtõs_oÂ_tŸÆ_Àn
(
oÊ_èbÀ_„©uª_¥›_hódî
 **
¥›s
, 
size_t
 
„©uªs_num
, 
oÊ_exp
 *
exp
){

298 
i
;

299 
size_t
 
sum
 = 0;

300 
size_t
 
sum_check
;

301 
i
 = 0; i < 
„©uªs_num
; i++){

303 
sum
 +
	`ROUND_UP
(
¥›s
[
i
]->
Àngth
, 8);

306 
sum_check
 = 
	`oÊ_°ru˘s_èbÀ_„©uªs_¥›îtõs_oÂ_Àn
(
¥›s
[
i
], 
exp
);

307 if(
¥›s
[
i
]->
Àngth
 !
sum_check
)

308 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TabÀ fótuªÖr›îty %X ha†u√x≥˘edÜígth, %u !%zu.", 
¥›s
[
i
]->
ty≥
,Ör›s[i]->
Àngth
, 
sum_check
);

311  
sum
;

312 
	}
}

314 
size_t
 
	$oÊ_°ru˘s_èbÀ_„©uªs_oÂ_tŸÆ_Àn
(
oÊ_èbÀ_„©uªs
 **
„©
, 
size_t
 
èbÀs_num
, 
oÊ_exp
 * 
exp
){

316 
i
, 
tŸÆ_Àn
;

317 
tŸÆ_Àn
 = 0;

318 
i
 = 0; i < 
èbÀs_num
; i++){

319 
tŸÆ_Àn
 +(
oÂ_èbÀ_„©uªs
Ë+ 
	`oÊ_°ru˘s_èbÀ_„©uªs_¥›îtõs_oÂ_tŸÆ_Àn
(
„©
[
i
]->
¥›îtõs
, fót[i]->
¥›îtõs_num
, 
exp
);

321  
tŸÆ_Àn
;

322 
	}
}

324 
size_t


325 
	$oÊ_°ru˘s_èbÀ_¥›îtõs_∑ck
(
oÊ_èbÀ_„©uª_¥›_hódî
 * 
§c
, 
oÂ_èbÀ_„©uª_¥›_hódî
 *
d°
, 
uöt8_t
 *
d©a
, 
oÊ_exp
 *
exp
){

327 
d°
->
ty≥
 = 
	`ht⁄s
(
§c
->type);

328 
§c
->
ty≥
){

329 
OFPTFPT_INSTRUCTIONS
:

330 
OFPTFPT_INSTRUCTIONS_MISS
:{

331 
i
;

332 
oÊ_èbÀ_„©uª_¥›_ö°ru˘i⁄s
 *
•
 = (oÊ_èbÀ_„©uª_¥›_ö°ru˘i⁄s*Ë
§c
;

333 
oÂ_èbÀ_„©uª_¥›_ö°ru˘i⁄s
 *
dp
 = (oÂ_èbÀ_„©uª_¥›_ö°ru˘i⁄s*Ë
d°
;

334 
uöt8_t
 *
±r
;

336 
dp
->
Àngth
 = 
	`ht⁄s
(
•
->
hódî
.length);

337 
±r
 = (
uöt8_t
*Ë
d©a
 + ((
oÂ_èbÀ_„©uª_¥›_hódî
));

338 
i
 = 0; i < 
•
->
ids_num
; i++){

339 if(
•
->
ö°ru˘i⁄_ids
[
i
].
ty≥
 =
OFPIT_EXPERIMENTER
){

340 
oÂ_ö°ru˘i⁄
 
ö°
;

342 
ö°
.
ty≥
 = 
•
->
ö°ru˘i⁄_ids
[
i
].type;

343 i‡(
exp
 =
NULL
 ||Éxp->
ö°
 =NULL ||Éxp->ö°->
u≈ack
 == NULL) {

344 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received EXPERIMENTER instruction, butÇo callback was given.");

345  
	`oÊ_îr‹
(
OFPET_BAD_INSTRUCTION
, 
OFPBIC_UNSUP_INST
);

347 
ö°
.
Àn
 = 
	`ROUND_UP
((
oÂ_ö°ru˘i⁄
Ë+ 
exp
->ö°->
	`oÂ_Àn
(&
•
->
ö°ru˘i⁄_ids
[
i
]),8);

348 
	`mem˝y
(
±r
, &
ö°
, (
oÂ_ö°ru˘i⁄
) - 4);

349 
±r
 +(
oÂ_ö°ru˘i⁄
) - 4;

352 
oÂ_ö°ru˘i⁄
 
ö°
;

353 
ö°
.
ty≥
 = 
	`ht⁄s
(
•
->
ö°ru˘i⁄_ids
[
i
].type);

354 
ö°
.
Àn
 = 
	`ht⁄s
((
oÂ_ö°ru˘i⁄
) - 4);

355 
	`mem˝y
(
±r
, &
ö°
, (
oÂ_ö°ru˘i⁄
) - 4);

356 
±r
 +(
oÂ_ö°ru˘i⁄
) - 4;

359 
	`mem£t
(
±r
, 0x0, 
	`ROUND_UP
(
•
->
hódî
.
Àngth
,8) - sp->header.length);

360  
	`ROUND_UP
(
	`¡ohs
(
dp
->
Àngth
),8);

362 
OFPTFPT_NEXT_TABLES
:

363 
OFPTFPT_NEXT_TABLES_MISS
:{

364 
i
;

365 
uöt8_t
 *
±r
;

366 
oÊ_èbÀ_„©uª_¥›_√xt_èbÀs
 *
•
 = (oÊ_èbÀ_„©uª_¥›_√xt_èbÀs*Ë
§c
;

367 
oÂ_èbÀ_„©uª_¥›_√xt_èbÀs
 *
dp
 = (oÂ_èbÀ_„©uª_¥›_√xt_èbÀs*Ë
d°
;

369 
dp
->
Àngth
 = 
	`ht⁄s
(
•
->
hódî
.length);

370 
±r
 = 
d©a
 + ((
oÂ_èbÀ_„©uª_¥›_hódî
));

371 
i
 = 0; i < 
•
->
èbÀ_num
; i++){

372 
	`mem˝y
(
±r
, &
•
->
√xt_èbÀ_ids
[
i
], (
uöt8_t
));

373 
±r
 +(
uöt8_t
);

375 
	`mem£t
(
±r
, 0x0, 
	`ROUND_UP
(
•
->
hódî
.
Àngth
,8)-sp->header.length);

376  
	`ROUND_UP
(
	`¡ohs
(
dp
->
Àngth
),8);

378 
OFPTFPT_WRITE_ACTIONS
:

379 
OFPTFPT_WRITE_ACTIONS_MISS
:

380 
OFPTFPT_APPLY_ACTIONS
:

381 
OFPTFPT_APPLY_ACTIONS_MISS
:{

382 
i
;

383 
uöt8_t
 *
±r
;

385 
oÊ_èbÀ_„©uª_¥›_a˘i⁄s
 *
•
 = (oÊ_èbÀ_„©uª_¥›_a˘i⁄s*Ë
§c
;

386 
oÂ_èbÀ_„©uª_¥›_a˘i⁄s
 *
dp
 = (oÂ_èbÀ_„©uª_¥›_a˘i⁄s*Ë
d°
;

388 
dp
->
Àngth
 = 
	`ht⁄s
(
•
->
hódî
.length);

389 
±r
 = 
d©a
 + ((
oÂ_èbÀ_„©uª_¥›_hódî
));

390 
i
 = 0; i < 
•
->
a˘i⁄s_num
; i++){

391 if(
•
->
a˘i⁄_ids
[
i
].
ty≥
 =
OFPAT_EXPERIMENTER
){

392 
	`mem˝y
(
±r
, &
•
->
a˘i⁄_ids
[
i
], (
oÂ_a˘i⁄_hódî
));

393 
±r
 +(
oÂ_a˘i⁄_hódî
);

396 
oÂ_a˘i⁄_hódî
 
a˘i⁄
;

397 
a˘i⁄
.
ty≥
 = 
	`ht⁄s
(
•
->
a˘i⁄_ids
[
i
].type);

398 
a˘i⁄
.
Àn
 = 
	`ht⁄s
(
•
->
a˘i⁄_ids
[
i
].len);

399 
	`mem˝y
(
±r
, &
a˘i⁄
, (
oÂ_a˘i⁄_hódî
) -4);

400 
±r
 +(
oÂ_a˘i⁄_hódî
) -4;

403 
	`mem£t
(
±r
, 0x0, 
	`ROUND_UP
(
•
->
hódî
.
Àngth
,8)- sp->header.length);

404  
	`ROUND_UP
(
	`¡ohs
(
dp
->
Àngth
),8);

406 
OFPTFPT_MATCH
:

407 
OFPTFPT_WILDCARDS
:

408 
OFPTFPT_WRITE_SETFIELD
:

409 
OFPTFPT_WRITE_SETFIELD_MISS
:

410 
OFPTFPT_APPLY_SETFIELD
:

411 
OFPTFPT_APPLY_SETFIELD_MISS
:{

412 
i
;

413 
oÊ_èbÀ_„©uª_¥›_oxm
 *
•
 = (oÊ_èbÀ_„©uª_¥›_oxm*Ë
§c
;

414 
oÂ_èbÀ_„©uª_¥›_oxm
 *
dp
 = (oÂ_èbÀ_„©uª_¥›_oxm*Ë
d°
;

416 
dp
->
Àngth
 = 
	`ht⁄s
(
•
->
hódî
.length);

417 
d©a
 +(
oÂ_èbÀ_„©uª_¥›_hódî
);

418 
i
 = 0; i < 
•
->
oxm_num
; i++){

419 
uöt32_t
 
hódî
 = 
	`ht⁄l
(
•
->
oxm_ids
[
i
]);

420 
	`mem˝y
(
d©a
, &
hódî
, (
uöt32_t
));

421 
d©a
 +(
uöt32_t
);

423 
	`mem£t
(
d©a
, 0x0, 
	`ROUND_UP
(
•
->
hódî
.
Àngth
,8)- sp->header.length);

424  
	`ROUND_UP
(
	`¡ohs
(
dp
->
Àngth
),8);

426 
OFPTFPT_EXPERIMENTER
:

427 
OFPTFPT_EXPERIMENTER_MISS
:{

433 
	}
}

435 
size_t


436 
	$oÊ_°ru˘s_èbÀ_„©uªs_∑ck
(
oÊ_èbÀ_„©uªs
 *
§c
, 
oÂ_èbÀ_„©uªs
 *
d°
, 
uöt8_t
 *
d©a
, 
oÊ_exp
 *
exp
){

437 
size_t
 
tŸÆ_Àn
;

438 
uöt8_t
 *
±r
;

439 
i
;

442 
tŸÆ_Àn
 = (
oÂ_èbÀ_„©uªs
Ë+ 
	`oÊ_°ru˘s_èbÀ_„©uªs_¥›îtõs_oÂ_tŸÆ_Àn
(
§c
->
¥›îtõs
,§c->
¥›îtõs_num
,
exp
);

443 
d°
->
èbÀ_id
 = 
§c
->table_id;

444 
	`mem£t
(
d°
->
∑d
, 0x0,5);

445 
	`°∫˝y
(
d°
->
«me
,
§c
->«me, 
OFP_MAX_TABLE_NAME_LEN
);

446 
d°
->
mëad©a_m©ch
 = 
	`ht⁄64
(
§c
->metadata_match);

447 
d°
->
mëad©a_wrôe
 = 
	`ht⁄64
(
§c
->metadata_write);

448 
d°
->
c⁄fig
 = 
	`ht⁄l
(
§c
->config);

449 
d°
->
max_íåõs
 = 
	`ht⁄l
(
§c
->max_entries);

451 
±r
 = (
uöt8_t
*Ë(
d©a
 + (
oÂ_èbÀ_„©uªs
));

452 
i
 = 0; i < 
§c
->
¥›îtõs_num
; i++){

453 
±r
 +
	`oÊ_°ru˘s_èbÀ_¥›îtõs_∑ck
(
§c
->
¥›îtõs
[
i
], (
oÂ_èbÀ_„©uª_¥›_hódî
*Ë±r,Öå, 
exp
);

455 
d°
->
Àngth
 = 
	`ht⁄s
(
tŸÆ_Àn
);

456  
tŸÆ_Àn
;

457 
	}
}

459 
size_t


460 
	$oÊ_°ru˘s_buckës_oÂ_Àn
(
oÊ_buckë
 *
buckë
, 
oÊ_exp
 *
exp
) {

461 
size_t
 
tŸÆ_Àn
, 
ªm
;

463 
tŸÆ_Àn
 = (
oÂ_buckë
Ë+ 
	`oÊ_a˘i⁄s_oÂ_tŸÆ_Àn
(
buckë
->
a˘i⁄s
, buckë->
a˘i⁄s_num
, 
exp
);

465 
ªm
 = 
tŸÆ_Àn
 % 8;

466  
tŸÆ_Àn
 + (
ªm
 == 0 ? 0 : (8 -Ñem));

467 
	}
}

469 
size_t


470 
	$oÊ_°ru˘s_buckës_oÂ_tŸÆ_Àn
(
oÊ_buckë
 **
buckës
, 
size_t
 
buckës_num
, 
oÊ_exp
 *
exp
) {

471 
size_t
 
sum
;

472 
	`OFL_UTILS_SUM_ARR_FUN2
(
sum
, 
buckës
, 
buckës_num
,

473 
oÊ_°ru˘s_buckës_oÂ_Àn
, 
exp
);

474  
sum
;

475 
	}
}

477 
size_t


478 
	$oÊ_°ru˘s_buckë_∑ck
(
oÊ_buckë
 *
§c
, 
oÂ_buckë
 *
d°
, 
oÊ_exp
 *
exp
) {

479 
size_t
 
tŸÆ_Àn
, 
ªm
, 
Æign
, 
Àn
;

480 
uöt8_t
 *
d©a
;

481 
size_t
 
i
;

483 
tŸÆ_Àn
 = (
oÂ_buckë
Ë+ 
	`oÊ_a˘i⁄s_oÂ_tŸÆ_Àn
(
§c
->
a˘i⁄s
, src->
a˘i⁄s_num
, 
exp
);

485 
ªm
 = 
tŸÆ_Àn
 % 8;

486 
Æign
 = 
ªm
 == 0 ? 0 : (8-rem);

487 
tŸÆ_Àn
 +
Æign
;

489 
d°
->
Àn
 = 
	`ht⁄s
(
tŸÆ_Àn
);

490 
d°
->
weight
 = 
	`ht⁄s
(
§c
->weight);

491 
d°
->
w©ch_p‹t
 = 
	`ht⁄l
(
§c
->watch_port);

492 
d°
->
w©ch_group
 = 
	`ht⁄l
(
§c
->watch_group);

493 
	`mem£t
(
d°
->
∑d
, 0x00, 4);

495 
d©a
 = (
uöt8_t
 *)
d°
 + (
oÂ_buckë
);

497 
i
=0; i<
§c
->
a˘i⁄s_num
; i++) {

498 
Àn
 = 
	`oÊ_a˘i⁄s_∑ck
(
§c
->
a˘i⁄s
[
i
], (
oÂ_a˘i⁄_hódî
 *)
d©a
, d©a, 
exp
);

499 
d©a
 +
Àn
;

502 
	`mem£t
(
d©a
, 0x00, 
Æign
);

504  
tŸÆ_Àn
;

505 
	}
}

508 
size_t


509 
	$oÊ_°ru˘s_Êow_°©s_oÂ_Àn
(
oÊ_Êow_°©s
 *
°©s
, 
oÊ_exp
 *
exp
) {

511  
	`ROUND_UP
(((
oÂ_Êow_°©s
Ë- 4Ë+ 
°©s
->
m©ch
->
Àngth
,8) +

512 
	`oÊ_°ru˘s_ö°ru˘i⁄s_oÂ_tŸÆ_Àn
(
°©s
->
ö°ru˘i⁄s
, sèts->
ö°ru˘i⁄s_num
, 
exp
);

513 
	}
}

515 
size_t


516 
	$oÊ_°ru˘s_Êow_°©s_oÂ_tŸÆ_Àn
(
oÊ_Êow_°©s
 ** 
°©s
, 
size_t
 
°©s_num
, 
oÊ_exp
 *
exp
) {

517 
size_t
 
sum
;

518 
	`OFL_UTILS_SUM_ARR_FUN2
(
sum
, 
°©s
, 
°©s_num
,

519 
oÊ_°ru˘s_Êow_°©s_oÂ_Àn
, 
exp
);

520  
sum
;

521 
	}
}

525 
size_t


526 
	$oÊ_°ru˘s_Êow_°©s_∑ck
(
oÊ_Êow_°©s
 *
§c
, 
uöt8_t
 *
d°
, 
oÊ_exp
 *
exp
) {

528 
oÂ_Êow_°©s
 *
Êow_°©s
;

529 
size_t
 
tŸÆ_Àn
;

530 
uöt8_t
 *
d©a
;

531 
size_t
 
i
;

533 
tŸÆ_Àn
 = 
	`ROUND_UP
((
oÂ_Êow_°©s
Ë-4 + 
§c
->
m©ch
->
Àngth
,8) +

534 
	`oÊ_°ru˘s_ö°ru˘i⁄s_oÂ_tŸÆ_Àn
(
§c
->
ö°ru˘i⁄s
, src->
ö°ru˘i⁄s_num
, 
exp
);

536 
Êow_°©s
 = (
oÂ_Êow_°©s
*Ë
d°
;

538 
Êow_°©s
->
Àngth
 = 
	`ht⁄s
(
tŸÆ_Àn
);

539 
Êow_°©s
->
èbÀ_id
 = 
§c
->table_id;

540 
Êow_°©s
->
∑d
 = 0x00;

541 
Êow_°©s
->
duøti⁄_£c
 = 
	`ht⁄l
(
§c
->duration_sec);

542 
Êow_°©s
->
duøti⁄_n£c
 = 
	`ht⁄l
(
§c
->duration_nsec);

543 
Êow_°©s
->
¥i‹ôy
 = 
	`ht⁄s
(
§c
->priority);

544 
Êow_°©s
->
idÀ_timeout
 = 
	`ht⁄s
(
§c
->idle_timeout);

545 
Êow_°©s
->
h¨d_timeout
 = 
	`ht⁄s
(
§c
->hard_timeout);

546 
	`mem£t
(
Êow_°©s
->
∑d2
, 0x00, 6);

547 
Êow_°©s
->
cookõ
 = 
	`ht⁄64
(
§c
->cookie);

548 
Êow_°©s
->
∑ckë_cou¡
 = 
	`ht⁄64
(
§c
->packet_count);

549 
Êow_°©s
->
byã_cou¡
 = 
	`ht⁄64
(
§c
->byte_count);

550 
d©a
 = (
d°
Ë+ (
oÂ_Êow_°©s
) - 4;

553 
	`oÊ_°ru˘s_m©ch_∑ck
(
§c
->
m©ch
, &(
Êow_°©s
->m©ch), 
d©a
, 
exp
);

554 
d©a
 = (
d°
Ë+ 
	`ROUND_UP
((
oÂ_Êow_°©s
Ë-4 + 
§c
->
m©ch
->
Àngth
, 8);

556 
i
=0; i < 
§c
->
ö°ru˘i⁄s_num
; i++) {

557 
d©a
 +
	`oÊ_°ru˘s_ö°ru˘i⁄s_∑ck
(
§c
->
ö°ru˘i⁄s
[
i
], (
oÂ_ö°ru˘i⁄
 *Ëd©a, 
exp
);

559  
tŸÆ_Àn
;

560 
	}
}

562 
size_t


563 
	$oÊ_°ru˘s_group_°©s_oÂ_Àn
(
oÊ_group_°©s
 *
°©s
) {

564  (
oÂ_group_°©s
) +

565 (
oÂ_buckë_cou¡î
Ë* 
°©s
->
cou¡îs_num
;

566 
	}
}

568 
size_t


569 
	$oÊ_°ru˘s_group_°©s_oÂ_tŸÆ_Àn
(
oÊ_group_°©s
 ** 
°©s
, 
size_t
 
°©s_num
) {

570 
size_t
 
sum
;

571 
	`OFL_UTILS_SUM_ARR_FUN
(
sum
, 
°©s
, 
°©s_num
,

572 
oÊ_°ru˘s_group_°©s_oÂ_Àn
);

573  
sum
;

574 
	}
}

576 
size_t


577 
	$oÊ_°ru˘s_group_°©s_∑ck
(
oÊ_group_°©s
 *
§c
, 
oÂ_group_°©s
 *
d°
) {

578 
size_t
 
tŸÆ_Àn
, 
Àn
;

579 
uöt8_t
 *
d©a
;

580 
size_t
 
i
;

582 
tŸÆ_Àn
 = (
oÂ_group_°©s
) +

583 (
oÂ_buckë_cou¡î
Ë* 
§c
->
cou¡îs_num
;

585 
d°
->
Àngth
 = 
	`ht⁄s
–
tŸÆ_Àn
);

586 
	`mem£t
(
d°
->
∑d
, 0x00, 2);

587 
d°
->
group_id
 = 
	`ht⁄l
–
§c
->group_id);

588 
d°
->
ªf_cou¡
 = 
	`ht⁄l
–
§c
->ref_count);

589 
	`mem£t
(
d°
->
∑d2
, 0x00, 4);

590 
d°
->
∑ckë_cou¡
 = 
	`ht⁄64
(
§c
->packet_count);

591 
d°
->
byã_cou¡
 = 
	`ht⁄64
(
§c
->byte_count);

592 
d°
->
duøti⁄_£c
 = 
	`ht⁄l
(
§c
->duration_sec);

593 
d°
->
duøti⁄_n£c
 = 
	`ht⁄l
(
§c
->duration_nsec);

595 
d©a
 = (
uöt8_t
 *)
d°
->
buckë_°©s
;

597 
i
=0; i<
§c
->
cou¡îs_num
; i++) {

598 
Àn
 = 
	`oÊ_°ru˘s_buckë_cou¡î_∑ck
(
§c
->
cou¡îs
[
i
], (
oÂ_buckë_cou¡î
 *)
d©a
);

599 
d©a
 +
Àn
;

602  
tŸÆ_Àn
;

603 
	}
}

605 
size_t


606 
	$oÊ_°ru˘s_mëî_°©s_oÂ_Àn
(
oÊ_mëî_°©s
 *
°©s
){

607  (
oÂ_mëî_°©s
) +

608 (
oÂ_mëî_b™d_°©s
Ë* 
°©s
->
mëî_b™ds_num
;

609 
	}
}

611 
size_t


612 
	$oÊ_°ru˘s_∑ck_b™d_°©s
(
oÊ_mëî_b™d_°©s
 *
§c
, 
oÂ_mëî_b™d_°©s
 *
d°
){

614 
d°
->
∑ckë_b™d_cou¡
 = 
	`ht⁄64
(
§c
->packet_band_count);

615 
d°
->
byã_b™d_cou¡
 = 
	`ht⁄64
(
§c
->byte_band_count);

617  (
oÂ_mëî_b™d_°©s
);

618 
	}
}

620 
size_t


621 
	$oÊ_°ru˘s_mëî_°©s_oÂ_tŸÆ_Àn
(
oÊ_mëî_°©s
 **
°©s
, 
size_t
 
°©s_num
){

622 
size_t
 
sum
;

623 
	`OFL_UTILS_SUM_ARR_FUN
(
sum
, 
°©s
, 
°©s_num
,

624 
oÊ_°ru˘s_mëî_°©s_oÂ_Àn
);

625  
sum
;

626 
	}
}

628 
size_t


629 
	$oÊ_°ru˘s_mëî_°©s_∑ck
(
oÊ_mëî_°©s
 *
§c
, 
oÂ_mëî_°©s
 *
d°
){

630 
size_t
 
tŸÆ_Àn
;

631 
size_t
 
i
;

633 
tŸÆ_Àn
 = (
oÂ_mëî_°©s
) +

634 (
oÂ_mëî_b™d_°©s
Ë* 
§c
->
mëî_b™ds_num
;

636 
d°
->
mëî_id
 = 
	`ht⁄l
(
§c
->meter_id);

637 
d°
->
Àn
 = 
	`ht⁄s
–
tŸÆ_Àn
);

638 
	`mem£t
(
d°
->
∑d
, 0x00, 6);

639 
d°
->
Êow_cou¡
 = 
	`ht⁄l
(
§c
->flow_count);

640 
d°
->
∑ckë_ö_cou¡
 = 
	`ht⁄64
–
§c
->packet_in_count);

641 
d°
->
byã_ö_cou¡
 = 
	`ht⁄64
(
§c
->byte_in_count);

642 
d°
->
duøti⁄_£c
 = 
	`ht⁄l
(
§c
->duration_sec);

643 
d°
->
duøti⁄_n£c
 = 
	`ht⁄l
(
§c
->duration_nsec);

645 
i
 = 0; i < 
§c
->
mëî_b™ds_num
; i++){

646 
	`oÊ_°ru˘s_∑ck_b™d_°©s
(
§c
->
b™d_°©s
[
i
], &
d°
->band_stats[i]);

648  
tŸÆ_Àn
;

651 
	}
}

653 
size_t


654 
	$oÊ_°ru˘s_mëî_c⁄f_oÂ_Àn
(
oÊ_mëî_c⁄fig
 * 
mëî_c⁄f
){

655  (
oÂ_mëî_c⁄fig
) +

656 
	`oÊ_°ru˘s_mëî_b™ds_oÂ_tŸÆ_Àn
(
mëî_c⁄f
->
b™ds
, mëî_c⁄f->
mëî_b™ds_num
);

657 
	}
}

659 
size_t


660 
	$oÊ_°ru˘s_mëî_c⁄f_oÂ_tŸÆ_Àn
(
oÊ_mëî_c⁄fig
 **
mëî_c⁄f
, 
size_t
 
°©s_num
){

661 
size_t
 
sum
;

662 
	`OFL_UTILS_SUM_ARR_FUN
(
sum
, 
mëî_c⁄f
, 
°©s_num
,

663 
oÊ_°ru˘s_mëî_c⁄f_oÂ_Àn
);

664  
sum
;

665 
	}
}

667 
size_t


668 
	$oÊ_°ru˘s_mëî_c⁄f_∑ck
(
oÊ_mëî_c⁄fig
 *
§c
, 
oÂ_mëî_c⁄fig
 *
d°
, 
uöt8_t
* 
d©a
){

669 
size_t
 
tŸÆ_Àn
, 
Àn
;

670 
i
;

672 
tŸÆ_Àn
 = (
oÂ_mëî_c⁄fig
) +

673 
	`oÊ_°ru˘s_mëî_b™ds_oÂ_tŸÆ_Àn
(
§c
->
b™ds
, src->
mëî_b™ds_num
);

675 
d°
->
Àngth
 = 
	`¡ohs
(
tŸÆ_Àn
);

676 
d°
->
Êags
 = 
	`¡ohs
(
§c
->flags);

677 
d°
->
mëî_id
 = 
	`¡ohl
(
§c
->meter_id);

679 
d©a
 = (
uöt8_t
 *)
d°
->
b™ds
;

681 
i
=0; i<
§c
->
mëî_b™ds_num
; i++) {

682 
Àn
 = 
	`oÊ_°ru˘s_mëî_b™d_∑ck
(
§c
->
b™ds
[
i
], (
oÂ_mëî_b™d_hódî
 *)
d©a
);

683 
d©a
 +
Àn
;

685  
tŸÆ_Àn
;

686 
	}
}

688 
size_t


689 
	$oÊ_°ru˘s_group_desc_°©s_oÂ_Àn
(
oÊ_group_desc_°©s
 *
°©s
, 
oÊ_exp
 *
exp
) {

690  (
oÂ_group_desc_°©s
) +

691 
	`oÊ_°ru˘s_buckës_oÂ_tŸÆ_Àn
(
°©s
->
buckës
, sèts->
buckës_num
, 
exp
);

692 
	}
}

694 
size_t


695 
	$oÊ_°ru˘s_group_desc_°©s_oÂ_tŸÆ_Àn
(
oÊ_group_desc_°©s
 ** 
°©s
, 
size_t
 
°©s_num
, 
oÊ_exp
 *
exp
) {

696 
size_t
 
sum
;

697 
	`OFL_UTILS_SUM_ARR_FUN2
(
sum
, 
°©s
, 
°©s_num
,

698 
oÊ_°ru˘s_group_desc_°©s_oÂ_Àn
, 
exp
);

699  
sum
;

700 
	}
}

702 
size_t


703 
	$oÊ_°ru˘s_group_desc_°©s_∑ck
(
oÊ_group_desc_°©s
 *
§c
, 
oÂ_group_desc_°©s
 *
d°
, 
oÊ_exp
 *
exp
) {

704 
size_t
 
tŸÆ_Àn
, 
Àn
;

705 
uöt8_t
 *
d©a
;

706 
size_t
 
i
;

708 
tŸÆ_Àn
 = (
oÂ_group_desc_°©s
) +

709 
	`oÊ_°ru˘s_buckës_oÂ_tŸÆ_Àn
(
§c
->
buckës
, src->
buckës_num
, 
exp
);

711 
d°
->
Àngth
 = 
	`ht⁄s
–
tŸÆ_Àn
);

712 
d°
->
ty≥
 = 
§c
->type;

713 
d°
->
∑d
 = 0x00;

714 
d°
->
group_id
 = 
	`ht⁄l
–
§c
->group_id);

716 
d©a
 = (
uöt8_t
 *)
d°
->
buckës
;

718 
i
=0; i<
§c
->
buckës_num
; i++) {

719 
Àn
 = 
	`oÊ_°ru˘s_buckë_∑ck
(
§c
->
buckës
[
i
], (
oÂ_buckë
 *)
d©a
, 
exp
);

720 
d©a
 +
Àn
;

723  
tŸÆ_Àn
;

724 
	}
}

727 
size_t


728 
	$oÊ_°ru˘s_queue_¥›_oÂ_tŸÆ_Àn
(
oÊ_queue_¥›_hódî
 ** 
¥›s
,

729 
size_t
 
¥›s_num
) {

730 
size_t
 
sum
;

731 
	`OFL_UTILS_SUM_ARR_FUN
(
sum
, 
¥›s
, 
¥›s_num
,

732 
oÊ_°ru˘s_queue_¥›_oÂ_Àn
);

733  
sum
;

734 
	}
}

736 
size_t


737 
	$oÊ_°ru˘s_queue_¥›_oÂ_Àn
(
oÊ_queue_¥›_hódî
 *
¥›
) {

738 
¥›
->
ty≥
) {

740 
OFPQT_MIN_RATE
: {

741  (
oÂ_queue_¥›_mö_øã
);

743 
OFPQT_MAX_RATE
:{

744  (
oÂ_queue_¥›_max_øã
);

746 
OFPQT_EXPERIMENTER
:{

747  (
oÂ_queue_¥›_ex≥rimíãr
);

751 
	}
}

753 
size_t


754 
	$oÊ_°ru˘s_queue_¥›_∑ck
(
oÊ_queue_¥›_hódî
 *
§c
,

755 
oÂ_queue_¥›_hódî
 *
d°
) {

756 
d°
->
¥›îty
 = 
	`ht⁄s
(
§c
->
ty≥
);

757 
	`mem£t
(
d°
->
∑d
, 0x00, 4);

759 
§c
->
ty≥
) {

761 
OFPQT_MIN_RATE
: {

762 
oÊ_queue_¥›_mö_øã
 *
•
 = (oÊ_queue_¥›_mö_øã *)
§c
;

763 
oÂ_queue_¥›_mö_øã
 *
dp
 = (oÂ_queue_¥›_mö_øã *)
d°
;

765 
dp
->
¥›_hódî
.
Àn
 = 
	`ht⁄s
((
oÂ_queue_¥›_mö_øã
));

766 
dp
->
øã
 = 
	`ht⁄s
(
•
->rate);

767 
	`mem£t
(
dp
->
∑d
, 0x00, 6);

769  (
oÂ_queue_¥›_mö_øã
);

771 
OFPQT_MAX_RATE
:{

772 
oÊ_queue_¥›_max_øã
 *
•
 = (oÊ_queue_¥›_max_øã *)
§c
;

773 
oÂ_queue_¥›_max_øã
 *
dp
 = (oÂ_queue_¥›_max_øã *)
d°
;

774 
dp
->
¥›_hódî
.
Àn
 = 
	`ht⁄s
((
oÂ_queue_¥›_max_øã
));

775 
dp
->
øã
 = 
	`ht⁄s
(
•
->rate);

776 
	`mem£t
(
dp
->
∑d
, 0x00, 6);

778  (
oÂ_queue_¥›_max_øã
);

780 
OFPQT_EXPERIMENTER
:{

782 
oÂ_queue_¥›_ex≥rimíãr
 *
dp
 = (oÂ_queue_¥›_ex≥rimíãr*)
d°
;

783 
dp
->
¥›_hódî
.
Àn
 = 
	`ht⁄s
((
oÂ_queue_¥›_ex≥rimíãr
));

784 
	`mem£t
(
dp
->
∑d
, 0x00, 4);

787  (
oÂ_queue_¥›_ex≥rimíãr
);

794 
	}
}

796 
size_t


797 
	$oÊ_°ru˘s_∑ckë_queue_oÂ_tŸÆ_Àn
(
oÊ_∑ckë_queue
 ** 
queues
,

798 
size_t
 
queues_num
) {

799 
size_t
 
sum
;

800 
	`OFL_UTILS_SUM_ARR_FUN
(
sum
, 
queues
, 
queues_num
,

801 
oÊ_°ru˘s_∑ckë_queue_oÂ_Àn
);

802  
sum
;

803 
	}
}

805 
size_t


806 
	$oÊ_°ru˘s_∑ckë_queue_oÂ_Àn
(
oÊ_∑ckë_queue
 *
queue
) {

807  (
oÂ_∑ckë_queue
) +

808 
	`oÊ_°ru˘s_queue_¥›_oÂ_tŸÆ_Àn
(
queue
->
¥›îtõs
,

809 
queue
->
¥›îtõs_num
);

810 
	}
}

812 
size_t


813 
	$oÊ_°ru˘s_∑ckë_queue_∑ck
(
oÊ_∑ckë_queue
 *
§c
, 
oÂ_∑ckë_queue
 *
d°
) {

814 
size_t
 
tŸÆ_Àn
, 
Àn
;

815 
uöt8_t
 *
d©a
;

816 
size_t
 
i
;

818 
tŸÆ_Àn
 = (
oÂ_∑ckë_queue
) +

819 
	`oÊ_°ru˘s_queue_¥›_oÂ_tŸÆ_Àn
(
§c
->
¥›îtõs
,

820 
§c
->
¥›îtõs_num
);

822 
d°
->
Àn
 = 
	`ht⁄s
(
tŸÆ_Àn
);

823 
	`mem£t
(
d°
->
∑d
, 0x00, 2);

824 
d°
->
queue_id
 = 
	`ht⁄l
(
§c
->queue_id);

826 
d©a
 = (
uöt8_t
 *)
d°
 + (
oÂ_∑ckë_queue
);

828 
i
=0; i<
§c
->
¥›îtõs_num
; i++) {

829 
Àn
 = 
	`oÊ_°ru˘s_queue_¥›_∑ck
(
§c
->
¥›îtõs
[
i
],

830 (
oÂ_queue_¥›_hódî
 *)
d©a
);

831 
d©a
 +
Àn
;

834  
tŸÆ_Àn
;

835 
	}
}

838 
size_t


839 
	$oÊ_°ru˘s_p‹t_∑ck
(
oÊ_p‹t
 *
§c
, 
oÂ_p‹t
 *
d°
) {

840 
d°
->
p‹t_no
 = 
	`ht⁄l
(
§c
->port_no);

841 
	`mem£t
(
d°
->
∑d
, 0x00, 4);

842 
	`mem˝y
(
d°
->
hw_addr
, 
§c
->hw_addr, 
ETH_ADDR_LEN
);

843 
	`mem£t
(
d°
->
∑d2
, 0x00, 2);

844 
	`°∫˝y
(
d°
->
«me
, 
§c
->«me, 
OFP_MAX_PORT_NAME_LEN
);

845 
d°
->
c⁄fig
 = 
	`ht⁄l
(
§c
->config);

846 
d°
->
°©e
 = 
	`ht⁄l
(
§c
->state);

847 
d°
->
cuº
 = 
	`ht⁄l
(
§c
->curr);

848 
d°
->
advîti£d
 = 
	`ht⁄l
(
§c
->advertised);

849 
d°
->
suµ‹ãd
 = 
	`ht⁄l
(
§c
->supported);

850 
d°
->
≥î
 = 
	`ht⁄l
(
§c
->peer);

851 
d°
->
cuº_•ìd
 = 
	`ht⁄l
(
§c
->curr_speed);

852 
d°
->
max_•ìd
 = 
	`ht⁄l
(
§c
->max_speed);

854  (
oÂ_p‹t
);

855 
	}
}

857 
size_t


858 
	$oÊ_°ru˘s_èbÀ_°©s_∑ck
(
oÊ_èbÀ_°©s
 *
§c
, 
oÂ_èbÀ_°©s
 *
d°
) {

859 
d°
->
èbÀ_id
 = 
§c
->table_id;

860 
	`mem£t
(
d°
->
∑d
, 0x00, 3);

861 
d°
->
a˘ive_cou¡
 = 
	`ht⁄l
–
§c
->active_count);

862 
d°
->
lookup_cou¡
 = 
	`ht⁄64
(
§c
->lookup_count);

863 
d°
->
m©ched_cou¡
 = 
	`ht⁄64
(
§c
->matched_count);

865  (
oÂ_èbÀ_°©s
);

866 
	}
}

868 
size_t


869 
	$oÊ_°ru˘s_p‹t_°©s_∑ck
(
oÊ_p‹t_°©s
 *
§c
, 
oÂ_p‹t_°©s
 *
d°
) {

870 
d°
->
p‹t_no
 = 
	`ht⁄l
–
§c
->port_no);

871 
	`mem£t
(
d°
->
∑d
, 0x00, 4);

872 
d°
->
rx_∑ckës
 = 
	`ht⁄64
(
§c
->rx_packets);

873 
d°
->
tx_∑ckës
 = 
	`ht⁄64
(
§c
->tx_packets);

874 
d°
->
rx_byãs
 = 
	`ht⁄64
(
§c
->rx_bytes);

875 
d°
->
tx_byãs
 = 
	`ht⁄64
(
§c
->tx_bytes);

876 
d°
->
rx_dr›≥d
 = 
	`ht⁄64
(
§c
->rx_dropped);

877 
d°
->
tx_dr›≥d
 = 
	`ht⁄64
(
§c
->tx_dropped);

878 
d°
->
rx_îr‹s
 = 
	`ht⁄64
(
§c
->rx_errors);

879 
d°
->
tx_îr‹s
 = 
	`ht⁄64
(
§c
->tx_errors);

880 
d°
->
rx_‰ame_îr
 = 
	`ht⁄64
(
§c
->rx_frame_err);

881 
d°
->
rx_ovî_îr
 = 
	`ht⁄64
(
§c
->rx_over_err);

882 
d°
->
rx_¸c_îr
 = 
	`ht⁄64
(
§c
->rx_crc_err);

883 
d°
->
cﬁlisi⁄s
 = 
	`ht⁄64
(
§c
->collisions);

884 
d°
->
duøti⁄_£c
 = 
	`ht⁄l
(
§c
->duration_sec);

885 
d°
->
duøti⁄_n£c
 = 
	`ht⁄l
(
§c
->duration_nsec);

887  (
oÂ_p‹t_°©s
);

888 
	}
}

890 
size_t


891 
	$oÊ_°ru˘s_queue_°©s_∑ck
(
oÊ_queue_°©s
 *
§c
, 
oÂ_queue_°©s
 *
d°
) {

892 
d°
->
p‹t_no
 = 
	`ht⁄l
(
§c
->port_no);

893 
d°
->
queue_id
 = 
	`ht⁄l
(
§c
->queue_id);

894 
d°
->
tx_byãs
 = 
	`ht⁄64
(
§c
->tx_bytes);

895 
d°
->
tx_∑ckës
 = 
	`ht⁄64
(
§c
->tx_packets);

896 
d°
->
tx_îr‹s
 = 
	`ht⁄64
(
§c
->tx_errors);

897 
d°
->
duøti⁄_£c
 = 
	`¡ohl
(
§c
->duration_sec);

898 
d°
->
duøti⁄_n£c
 = 
	`¡ohl
(
§c
->duration_nsec);

900  (
oÂ_queue_°©s
);

901 
	}
}

903 
size_t


904 
	$oÊ_°ru˘s_buckë_cou¡î_∑ck
(
oÊ_buckë_cou¡î
 *
§c
, 
oÂ_buckë_cou¡î
 *
d°
) {

905 
d°
->
∑ckë_cou¡
 = 
	`ht⁄64
(
§c
->packet_count);

906 
d°
->
byã_cou¡
 = 
	`ht⁄64
(
§c
->byte_count);

908  (
oÂ_buckë_cou¡î
);

909 
	}
}

912 
size_t


913 
	$oÊ_°ru˘s_m©ch_oÂ_Àn
(
oÊ_m©ch_hódî
 *
m©ch
, 
oÊ_exp
 *
exp
) {

914 
m©ch
->
ty≥
) {

915 (
OFPMT_STANDARD
): {

916  ((
oÂ_m©ch
));

919 i‡(
exp
 =
NULL
 ||Éxp->
m©ch
 =NULL ||Éxp->m©ch->
oÂ_Àn
 == NULL) {

920 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÜenÉxperimenter match, butÇo callback was given.");

923  
exp
->
m©ch
->
	`oÂ_Àn
(match);

926 
	}
}

928 
size_t


929 
	$oÊ_°ru˘s_m©ch_∑ck
(
oÊ_m©ch_hódî
 *
§c
, 
oÂ_m©ch
 *
d°
, 
uöt8_t
* 
oxm_fõlds
, 
oÊ_exp
 *
exp
) {

930 
§c
->
ty≥
) {

931 (
OFPMT_OXM
): {

932 
oÊ_m©ch
 *
m
 = (oÊ_m©ch *)
§c
;

933 
oÂbuf
 *
b
 = 
	`oÂbuf_√w
(0);

934 
oxm_Àn
;

935 
d°
->
ty≥
 = 
	`ht⁄s
(
m
->
hódî
.type);

936 
oxm_fõlds
 = (
uöt8_t
*Ë&
d°
->oxm_fields;

937 
d°
->
Àngth
 = 
	`ht⁄s
((
oÂ_m©ch
) - 4);

938 i‡(
§c
->
Àngth
){

939 
oxm_Àn
 = 
	`oxm_put_m©ch
(
b
, 
m
);

940 
	`mem˝y
(
oxm_fõlds
, (
uöt8_t
*Ë
	`oÂbuf_puŒ
(
b
,
oxm_Àn
), oxm_len);

941 
d°
->
Àngth
 = 
	`ht⁄s
(
oxm_Àn
 + (((
oÂ_m©ch
 )-4)));

942 
	`oÂbuf_dñëe
(
b
);

943  
	`¡ohs
(
d°
->
Àngth
);

983 i‡(
exp
 =
NULL
 ||Éxp->
m©ch
 =NULL ||Éxp->m©ch->
∑ck
 == NULL) {

984 
	`OFL_LOG_WARN
(
LOG_MODULE
, "SëtögÜókÜoggög fûêsizêlimôÅÿ%"
PRIdMAX
" byãs", 
§c
->
ty≥
);

985 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅoÖackÉxperimenter match, butÇo callback was given.");

988  
exp
->
m©ch
->
	`∑ck
(
§c
, 
d°
);

991 
	}
}

	@oflib/ofl-structs-print.c

32 
	~<¨∑/öë.h
>

33 
	~<°dboﬁ.h
>

34 
	~<°dlib.h
>

35 
	~<°rög.h
>

36 
	~<°dio.h
>

37 
	~<˘y≥.h
>

38 
	~<öây≥s.h
>

39 
	~<√töë/ö.h
>

40 
	~"oxm-m©ch.h
"

41 
	~"›íÊow/›íÊow.h
"

43 
	~"oÊ.h
"

44 
	~"oÊ-a˘i⁄s.h
"

45 
	~"oÊ-°ru˘s.h
"

46 
	~"oÊ-¥öt.h
"

47 
	~"oÊ-∑ckës.h
"

50 
	#ETH_ADDR_FMT
 \

51 "%02"
PRIx8
":%02"PRIx8":%02"PRIx8":%02"PRIx8":%02"PRIx8":%02"
	)
PRIx8

52 
	#ETH_ADDR_ARGS
(
ó
) \

53 (
ó
)[0], (ó)[1], (ó)[2], (ó)[3], (ó)[4], (ó)[5]

	)

55 
	#IP_FMT
 "%"
PRIu8
".%"PRIu8".%"PRIu8".%"
	)
PRIu8

58 
	$oÊ_°ru˘s_p‹t_to_°rög
(
oÊ_p‹t
 *
p‹t
) {

59 *
°r
;

60 
size_t
 
°r_size
;

61 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

62 
	`oÊ_°ru˘s_p‹t_¥öt
(
°ªam
, 
p‹t
);

63 
	`f˛o£
(
°ªam
);

64  
°r
;

65 
	}
}

68 
	$oÊ_°ru˘s_p‹t_¥öt
(
FILE
 *
°ªam
, 
oÊ_p‹t
 *
p‹t
) {

69 
	`Ârötf
(
°ªam
, "{no=\"");

70 
	`oÊ_p‹t_¥öt
(
°ªam
, 
p‹t
->
p‹t_no
);

71 
	`Ârötf
(
°ªam
, "\", hw_addr=\""
ETH_ADDR_FMT
"\",Çame=\"%s\", "

72 "c⁄fig=\"0x%"
PRIx32
"\", state=\"0x%"PRIx32"\", curr=\"0x%"PRIx32"\", "

73 "adv=\"0x%"
PRIx32
"\", supp=\"0x%"PRIx32"\",Öeer=\"0x%"PRIx32"\", "

75 
	`ETH_ADDR_ARGS
(
p‹t
->
hw_addr
),Ö‹t->
«me
,

76 
p‹t
->
c⁄fig
,Ö‹t->
°©e
,Ö‹t->
cuº
,

77 
p‹t
->
advîti£d
,Ö‹t->
suµ‹ãd
,Ö‹t->
≥î
,

78 
p‹t
->
cuº_•ìd
,Ö‹t->
max_•ìd
);

79 
	}
}

82 
	$oÊ_°ru˘s_ö°ru˘i⁄_to_°rög
(
oÊ_ö°ru˘i⁄_hódî
 *
ö°
, 
oÊ_exp
 *
exp
) {

83 *
°r
;

84 
size_t
 
°r_size
;

85 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

86 
	`oÊ_°ru˘s_ö°ru˘i⁄_¥öt
(
°ªam
, 
ö°
, 
exp
);

87 
	`f˛o£
(
°ªam
);

88  
°r
;

89 
	}
}

92 
	$oÊ_°ru˘s_ö°ru˘i⁄_¥öt
(
FILE
 *
°ªam
, 
oÊ_ö°ru˘i⁄_hódî
 *
ö°
, 
oÊ_exp
 *
exp
) {

93 
	`oÊ_ö°ru˘i⁄_ty≥_¥öt
(
°ªam
, 
ö°
->
ty≥
);

95 
ö°
->
ty≥
) {

96 (
OFPIT_GOTO_TABLE
): {

97 
oÊ_ö°ru˘i⁄_gŸo_èbÀ
 *
i
 = (oÊ_ö°ru˘i⁄_gŸo_èbÀ*)
ö°
;

99 
	`Ârötf
(
°ªam
, "{èbÀ=\"%u\"}", 
i
->
èbÀ_id
);

103 (
OFPIT_WRITE_METADATA
): {

104 
oÊ_ö°ru˘i⁄_wrôe_mëad©a
 *
i
 = (oÊ_ö°ru˘i⁄_wrôe_mëad©®*)
ö°
;

106 
	`Ârötf
(
°ªam
, "{mëa=\"0x%"
PRIx64
"\", mask=\"0x%"PRIx64"\"}",

107 
i
->
mëad©a
, i->
mëad©a_mask
);

111 (
OFPIT_WRITE_ACTIONS
):

112 (
OFPIT_APPLY_ACTIONS
): {

113 
oÊ_ö°ru˘i⁄_a˘i⁄s
 *
i
 = (oÊ_ö°ru˘i⁄_a˘i⁄†*)
ö°
;

114 
size_t
 
j
;

116 
	`Ârötf
(
°ªam
, "{acts=[");

117 
j
=0; j<
i
->
a˘i⁄s_num
; j++) {

118 
	`oÊ_a˘i⁄_¥öt
(
°ªam
, 
i
->
a˘i⁄s
[
j
], 
exp
);

119 i‡(
j
 < 
i
->
a˘i⁄s_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); }

121 
	`Ârötf
(
°ªam
, "]}");

125 (
OFPIT_CLEAR_ACTIONS
): {

128 (
OFPIT_METER
):{

129 
oÊ_ö°ru˘i⁄_mëî
 *
i
 = (oÊ_ö°ru˘i⁄_mëî *)
ö°
;

130 
	`Ârötf
(
°ªam
, "{mëî=\"%u\"}", 
i
->
mëî_id
);

133 (
OFPIT_EXPERIMENTER
): {

134 i‡(
exp
 =
NULL
 ||Éxp->
ö°
 =NULL ||Éxp->ö°->
to_°rög
 == NULL) {

135 
oÊ_ö°ru˘i⁄_ex≥rimíãr
 *
i
 = (oÊ_ö°ru˘i⁄_ex≥rimíã∏*)
ö°
;

137 
	`Ârötf
(
°ªam
, "{id=\"0x%"
PRIx32
"\"}", 
i
->
ex≥rimíãr_id
);

139 *
c
 = 
exp
->
ö°
->
	`to_°rög
(inst);

140 
	`Ârötf
(
°ªam
, "%s", 
c
);

141 
	`‰ì
 (
c
);

147 
	}
}

150 
	$oÊ_°ru˘s_m©ch_to_°rög
(
oÊ_m©ch_hódî
 *
m©ch
, 
oÊ_exp
 *
exp
) {

151 *
°r
;

152 
size_t
 
°r_size
;

153 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

154 
	`oÊ_°ru˘s_m©ch_¥öt
(
°ªam
, 
m©ch
, 
exp
);

155 
	`f˛o£
(
°ªam
);

156  
°r
;

157 
	}
}

160 
	$oÊ_°ru˘s_m©ch_¥öt
(
FILE
 *
°ªam
, 
oÊ_m©ch_hódî
 *
m©ch
, 
oÊ_exp
 *
exp
) {

162 
m©ch
->
ty≥
) {

163 (
OFPMT_OXM
): {

164 
oÊ_m©ch
 *
m
 = (oÊ_m©ch*Ë
m©ch
;

165 
	`oÊ_°ru˘s_oxm_m©ch_¥öt
(
°ªam
, 
m
);

169 i‡(
exp
 =
NULL
 ||Éxp->
m©ch
 =NULL ||Éxp->m©ch->
to_°rög
 == NULL) {

170 
	`Ârötf
(
°ªam
, "?(%u)", 
m©ch
->
ty≥
);

172 *
c
 = 
exp
->
m©ch
->
	`to_°rög
(match);

173 
	`Ârötf
(
°ªam
, "%s", 
c
);

174 
	`‰ì
(
c
);

178 
	}
}

182 
	$oÊ_°ru˘s_oxm_m©ch_to_°rög
(
oÊ_m©ch
 *
m
) {

183 *
°r
;

184 
size_t
 
°r_size
;

185 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

187 
	`oÊ_°ru˘s_oxm_m©ch_¥öt
(
°ªam
, 
m
);

188 
	`f˛o£
(
°ªam
);

189  
°r
;

190 
	}
}

194 
	$oÊ_°ru˘s_oxm_m©ch_¥öt
(
FILE
 *
°ªam
, c⁄° 
oÊ_m©ch
 *
omt
) {

195 
oÊ_m©ch_év
 *
f
;

196 
i
;

197 
size_t
 
size
;

199 if(
omt
->
hódî
.
Àngth
 > 4)

200 
size
 = 
	`hm≠_cou¡
(&
omt
->
m©ch_fõlds
);

201 
size
 = 0;

203 
	`Ârötf
(
°ªam
, "oxm{");

204 i‡(
size
) {

206 
i
 = 0; i<
NUM_OXM_FIELDS
; i++) {

207 
f
 = 
	`oxm_m©ch_lookup
(
Æl_fõlds
[
i
].
hódî
, 
omt
);

208 i‡(
f
 !
NULL
) {

210 
	`oÊ_°ru˘s_oxm_év_¥öt
(
°ªam
, 
f
);

211 i‡(--
size
 > 0Ë
	`Ârötf
(
°ªam
, ", ");

216 
	`Ârötf
(
°ªam
, "all match");

218 
	`Ârötf
(
°ªam
, "}");

219 
	}
}

223 
	$oÊ_°ru˘s_oxm_év_to_°rög
(
oÊ_m©ch_év
 *
f
) {

224 *
°r
;

225 
size_t
 
°r_size
;

226 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

228 
	`oÊ_°ru˘s_oxm_év_¥öt
(
°ªam
, 
f
);

229 
	`f˛o£
(
°ªam
);

230  
°r
;

231 
	}
}

235 
	$oÊ_°ru˘s_oxm_év_¥öt
(
FILE
 *
°ªam
, 
oÊ_m©ch_év
 *
f
)

237 
uöt8_t
 
fõld
 = 
	`OXM_FIELD
(
f
->
hódî
);

239 
fõld
) {

241 
OFPXMT_OFB_IN_PORT
:

242 
	`Ârötf
(
°ªam
, "ö_p‹t=\"%d\"", *((
uöt32_t
*Ë
f
->
vÆue
));

244 
OFPXMT_OFB_IN_PHY_PORT
:

245 
	`Ârötf
(
°ªam
, "ö_phy_p‹t=\"%d\"", *((
uöt32_t
*Ë
f
->
vÆue
));

247 
OFPXMT_OFB_VLAN_VID
: {

248 
uöt16_t
 
v
 = *((uöt16_à*Ë
f
->
vÆue
);

249 i‡(
v
 =
OFPVID_NONE
)

250 
	`Ârötf
(
°ªam
, "vlan_vid=Çone");

251 i‡(
v
 =
OFPVID_PRESENT
 && 
	`OXM_HASMASK
(
f
->
hódî
))

252 
	`Ârötf
(
°ªam
, "vlan_vid=ány");

254 
	`Ârötf
(
°ªam
, "vœn_vid=\"%d\"",
v
 & 
VLAN_VID_MASK
);

257 
OFPXMT_OFB_VLAN_PCP
:

258 
	`Ârötf
(
°ªam
, "vœn_p˝=\"%d\"", *
f
->
vÆue
 & 0x7);

260 
OFPXMT_OFB_ETH_TYPE
:

261 
	`Ârötf
(
°ªam
, "ëh_ty≥=\"0x%x\"", *((
uöt16_t
 *Ë
f
->
vÆue
));

263 
OFPXMT_OFB_TCP_SRC
:

264 
	`Ârötf
(
°ªam
, "t˝_§c=\"%d\"", *((
uöt16_t
*Ë
f
->
vÆue
));

266 
OFPXMT_OFB_TCP_DST
:

267 
	`Ârötf
(
°ªam
, "t˝_d°=\"%d\"", *((
uöt16_t
*Ë
f
->
vÆue
));

269 
OFPXMT_OFB_UDP_SRC
:

270 
	`Ârötf
(
°ªam
, "udp_§c=\"%d\"", *((
uöt16_t
*Ë
f
->
vÆue
));

272 
OFPXMT_OFB_UDP_DST
:

273 
	`Ârötf
(
°ªam
, "udp_d°=\"%d\"", *((
uöt16_t
*Ë
f
->
vÆue
));

275 
OFPXMT_OFB_SCTP_SRC
:

276 
	`Ârötf
(
°ªam
, "s˘p_§c=\"%d\"", *((
uöt16_t
*Ë
f
->
vÆue
));

278 
OFPXMT_OFB_SCTP_DST
:

279 
	`Ârötf
(
°ªam
, "s˘p_d°=\"%d\"", *((
uöt16_t
*Ë
f
->
vÆue
));

281 
OFPXMT_OFB_ETH_SRC
:

282 
	`Ârötf
(
°ªam
, "ëh_§c=\""
ETH_ADDR_FMT
"\"", 
	`ETH_ADDR_ARGS
(
f
->
vÆue
));

283 i‡(
	`OXM_HASMASK
(
f
->
hódî
)) {

284 
	`Ârötf
(
°ªam
, ",Éth_§c_mask=\""
ETH_ADDR_FMT
"\"", 
	`ETH_ADDR_ARGS
(
f
->
vÆue
 + 6));

287 
OFPXMT_OFB_ETH_DST
:

288 
	`Ârötf
(
°ªam
, "ëh_d°=\""
ETH_ADDR_FMT
"\"", 
	`ETH_ADDR_ARGS
(
f
->
vÆue
));

289 i‡(
	`OXM_HASMASK
(
f
->
hódî
)) {

290 
	`Ârötf
(
°ªam
, ",Éth_d°_mask=\""
ETH_ADDR_FMT
"\"", 
	`ETH_ADDR_ARGS
(
f
->
vÆue
 + 6));

293 
OFPXMT_OFB_IPV4_DST
:

294 
	`Ârötf
(
°ªam
, "ùv4_d°=\""
IP_FMT
"\"", 
	`IP_ARGS
(
f
->
vÆue
));

295 i‡(
	`OXM_HASMASK
(
f
->
hódî
)) {

296 
	`Ârötf
(
°ªam
, ", ipv4_d°_mask=\""
IP_FMT
"\"", 
	`IP_ARGS
(
f
->
vÆue
 + 4));

299 
OFPXMT_OFB_IPV4_SRC
:

300 
	`Ârötf
(
°ªam
, "ùv4_§c=\""
IP_FMT
"\"", 
	`IP_ARGS
(
f
->
vÆue
));

301 i‡(
	`OXM_HASMASK
(
f
->
hódî
)) {

302 
	`Ârötf
(
°ªam
, ", ipv4_§c_mask=\""
IP_FMT
"\"", 
	`IP_ARGS
(
f
->
vÆue
 + 4));

305 
OFPXMT_OFB_IP_PROTO
:

306 
	`Ârötf
(
°ªam
, "ù_¥Ÿo=\"%d\"", *
f
->
vÆue
);

308 
OFPXMT_OFB_IP_DSCP
:

309 
	`Ârötf
(
°ªam
, "ù_ds˝=\"%d\"", *
f
->
vÆue
 & 0x3f);

311 
OFPXMT_OFB_IP_ECN
:

312 
	`Ârötf
(
°ªam
, "ù_e˙=\"%d\"", *
f
->
vÆue
 & 0x3);

314 
OFPXMT_OFB_ICMPV4_TYPE
:

315 
	`Ârötf
(
°ªam
, "icmpv4_ty≥\"%d\"", *
f
->
vÆue
);

317 
OFPXMT_OFB_ICMPV4_CODE
:

318 
	`Ârötf
(
°ªam
, "icmpv4_code=\"%d\"", *
f
->
vÆue
);

320 
OFPXMT_OFB_ARP_SHA
:

321 
	`Ârötf
(
°ªam
, "¨p_sha=\""
ETH_ADDR_FMT
"\"", 
	`ETH_ADDR_ARGS
(
f
->
vÆue
));

322 i‡(
	`OXM_HASMASK
(
f
->
hódî
)) {

323 
	`Ârötf
(
°ªam
, ",áΩ_sha_mask=\""
ETH_ADDR_FMT
"\"", 
	`ETH_ADDR_ARGS
(
f
->
vÆue
 + 6));

326 
OFPXMT_OFB_ARP_THA
:

327 
	`Ârötf
(
°ªam
, "¨p_tha=\""
ETH_ADDR_FMT
"\"", 
	`ETH_ADDR_ARGS
(
f
->
vÆue
));

328 i‡(
	`OXM_HASMASK
(
f
->
hódî
)) {

329 
	`Ârötf
(
°ªam
, ",áΩ_tha_mask=\""
ETH_ADDR_FMT
"\"", 
	`ETH_ADDR_ARGS
(
f
->
vÆue
 + 6));

332 
OFPXMT_OFB_ARP_SPA
:

333 
	`Ârötf
(
°ªam
, "¨p_•a=\""
IP_FMT
"\"", 
	`IP_ARGS
(
f
->
vÆue
));

334 i‡(
	`OXM_HASMASK
(
f
->
hódî
)) {

335 
	`Ârötf
(
°ªam
, ",áΩ_sha_mask=\""
IP_FMT
"\"", 
	`IP_ARGS
(
f
->
vÆue
 + 4));

338 
OFPXMT_OFB_ARP_TPA
:

339 
	`Ârötf
(
°ªam
, "¨p_ça=\""
IP_FMT
"\"", 
	`IP_ARGS
(
f
->
vÆue
));

340 i‡(
	`OXM_HASMASK
(
f
->
hódî
)) {

341 
	`Ârötf
(
°ªam
, ",áΩ_ça_mask=\""
IP_FMT
"\"", 
	`IP_ARGS
(
f
->
vÆue
 + 4));

344 
OFPXMT_OFB_ARP_OP
:

345 
	`Ârötf
(
°ªam
, "¨p_›=\"0x%x\"", *((
uöt16_t
*Ë
f
->
vÆue
));

347 
OFPXMT_OFB_IPV6_SRC
: {

348 
addr_°r
[
INET6_ADDRSTRLEN
];

349 
	`öë_¡›
(
AF_INET6
, 
f
->
vÆue
, 
addr_°r
, 
INET6_ADDRSTRLEN
);

350 
	`Ârötf
(
°ªam
, "nw_§c_ùv6=\"%s\"", 
addr_°r
);

351 i‡(
	`OXM_HASMASK
(
f
->
hódî
)) {

352 
	`öë_¡›
(
AF_INET6
, 
f
->
vÆue
 + 16, 
addr_°r
, 
INET6_ADDRSTRLEN
);

353 
	`Ârötf
(
°ªam
, ",Çw_§c_ùv6_mask=\"%s\"", 
addr_°r
);

357 
OFPXMT_OFB_IPV6_DST
: {

358 
addr_°r
[
INET6_ADDRSTRLEN
];

359 
	`öë_¡›
(
AF_INET6
, 
f
->
vÆue
, 
addr_°r
, 
INET6_ADDRSTRLEN
);

360 
	`Ârötf
(
°ªam
, "nw_d°_ùv6=\"%s\"", 
addr_°r
);

361 i‡(
	`OXM_HASMASK
(
f
->
hódî
)) {

362 
	`öë_¡›
(
AF_INET6
, 
f
->
vÆue
 + 16, 
addr_°r
, 
INET6_ADDRSTRLEN
);

363 
	`Ârötf
(
°ªam
, ",Çw_d°_ùv6_mask=\"%s\"", 
addr_°r
);

367 
OFPXMT_OFB_IPV6_ND_TARGET
: {

368 
addr_°r
[
INET6_ADDRSTRLEN
];

369 
	`öë_¡›
(
AF_INET6
, 
f
->
vÆue
, 
addr_°r
, 
INET6_ADDRSTRLEN
);

370 
	`Ârötf
(
°ªam
, "ùv6_nd_èrgë=\"%s\"", 
addr_°r
);

373 
OFPXMT_OFB_IPV6_ND_SLL
:

374 
	`Ârötf
(
°ªam
, "ùv6_nd_¶l=\""
ETH_ADDR_FMT
"\"", 
	`ETH_ADDR_ARGS
(
f
->
vÆue
));

376 
OFPXMT_OFB_IPV6_ND_TLL
:

377 
	`Ârötf
(
°ªam
, "ùv6_nd_él=\""
ETH_ADDR_FMT
"\"", 
	`ETH_ADDR_ARGS
(
f
->
vÆue
));

379 
OFPXMT_OFB_IPV6_FLABEL
:

380 
	`Ârötf
(
°ªam
, "ùv6_Êow_œbñ=\"%d\"", *((
uöt32_t
*Ë
f
->
vÆue
) & 0x000fffff);

381 i‡(
	`OXM_HASMASK
(
f
->
hódî
)) {

382 
	`Ârötf
(
°ªam
, ", ipv6_Êow_œbñ_mask=\"%d\"", *((
uöt32_t
*Ë(
f
->
vÆue
+4)));

385 
OFPXMT_OFB_ICMPV6_TYPE
:

386 
	`Ârötf
(
°ªam
, "icmpv6_ty≥=\"%d\"", *
f
->
vÆue
);

388 
OFPXMT_OFB_ICMPV6_CODE
:

389 
	`Ârötf
(
°ªam
, "icmpv6_code=\"%d\"", *
f
->
vÆue
);

391 
OFPXMT_OFB_MPLS_LABEL
:

392 
	`Ârötf
(
°ªam
, "m∂s_œbñ=\"%d\"",((
uöt32_t
Ë*
f
->
vÆue
) & 0x000fffff);

394 
OFPXMT_OFB_MPLS_TC
:

395 
	`Ârötf
(
°ªam
, "m∂s_tc=\"%d\"", *
f
->
vÆue
 & 0x3);

397 
OFPXMT_OFB_MPLS_BOS
:

398 
	`Ârötf
(
°ªam
, "m∂s_bos=\"%d\"", *
f
->
vÆue
 & 0xfe);

400 
OFPXMT_OFB_METADATA
:

401 
	`Ârötf
(
°ªam
, "mëad©a=\"0x%Œx\"", *((
uöt64_t
*Ë
f
->
vÆue
));

402 i‡(
	`OXM_HASMASK
(
f
->
hódî
)) {

403 
	`Ârötf
(
°ªam
, ", mëad©a_mask=\"0x%Œx\"", *((
uöt64_t
*)(
f
->
vÆue
+8)));

406 
OFPXMT_OFB_PBB_ISID
 :

407 
	`Ârötf
(
°ªam
, "pbb_isid=\"%d\"", *((
uöt32_t
*Ë
f
->
vÆue
));

408 i‡(
	`OXM_HASMASK
(
f
->
hódî
)) {

409 
	`Ârötf
(
°ªam
, ",Öbb_isid_mask=\"%d\"", *((
uöt32_t
*)(
f
->
vÆue
+4)));

412 
OFPXMT_OFB_TUNNEL_ID
:

413 
	`Ârötf
(
°ªam
, "tu¬ñ_id=\"%Œd\"", *((
uöt64_t
*Ë
f
->
vÆue
));

414 i‡(
	`OXM_HASMASK
(
f
->
hódî
)) {

415 
	`Ârötf
(
°ªam
, ",Åu¬ñ_id_mask=\"%Œd\"", *((
uöt64_t
*)(
f
->
vÆue
+8)));

418 
OFPXMT_OFB_IPV6_EXTHDR
:

419 
	`Ârötf
(
°ªam
, "ext_hdr=\"");

420 
	`oÊ_ùv6_ext_hdr_¥öt
(
°ªam
, *((
uöt16_t
*Ë
f
->
vÆue
));

421 
	`Ârötf
(
°ªam
, "\"");

422 i‡(
	`OXM_HASMASK
(
f
->
hódî
)) {

423 
	`Ârötf
(
°ªam
, ",Éxt_hdr_mask=\"0x%x\"", *((
uöt16_t
*)(
f
->
vÆue
+4)));

427 
	`Ârötf
(
°ªam
, "unknow¿ty≥ %d", 
fõld
);

429 
	}
}

433 
	$oÊ_°ru˘s_c⁄fig_to_°rög
(
oÊ_c⁄fig
 *
c
) {

434 *
°r
;

435 
size_t
 
°r_size
;

436 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

437 
	`oÊ_°ru˘s_c⁄fig_¥öt
(
°ªam
, 
c
);

438 
	`f˛o£
(
°ªam
);

439  
°r
;

440 
	}
}

443 
	$oÊ_°ru˘s_c⁄fig_¥öt
(
FILE
 *
°ªam
, 
oÊ_c⁄fig
 *
c
) {

444 
	`Ârötf
(
°ªam
, "{Êags=\"0x%"
PRIx16
"\", mlen=\"%u\"}",

445 
c
->
Êags
, c->
miss_£nd_Àn
);

446 
	}
}

449 
	$oÊ_°ru˘s_buckë_to_°rög
(
oÊ_buckë
 *
b
, 
oÊ_exp
 *
exp
) {

450 *
°r
;

451 
size_t
 
°r_size
;

452 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

453 
	`oÊ_°ru˘s_buckë_¥öt
(
°ªam
, 
b
, 
exp
);

454 
	`f˛o£
(
°ªam
);

455  
°r
;

456 
	}
}

459 
	$oÊ_°ru˘s_buckë_¥öt
(
FILE
 *
°ªam
, 
oÊ_buckë
 *
b
, 
oÊ_exp
 *
exp
) {

460 
size_t
 
i
;

462 
	`Ârötf
(
°ªam
, "{w=\"%u\", w¥t=\"", 
b
->
weight
);

463 
	`oÊ_p‹t_¥öt
(
°ªam
, 
b
->
w©ch_p‹t
);

464 
	`Ârötf
(
°ªam
, "\", wgrp=\"");

465 
	`oÊ_group_¥öt
(
°ªam
, 
b
->
w©ch_group
);

466 
	`Ârötf
(
°ªam
, "\",ácts=[");

468 
i
=0; i<
b
->
a˘i⁄s_num
; i++) {

469 
	`oÊ_a˘i⁄_¥öt
(
°ªam
, 
b
->
a˘i⁄s
[
i
], 
exp
);

470 i‡(
i
 < 
b
->
a˘i⁄s_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); }

473 
	`Ârötf
(
°ªam
, "]}");

474 
	}
}

477 
	$oÊ_°ru˘s_queue_to_°rög
(
oÊ_∑ckë_queue
 *
q
) {

478 *
°r
;

479 
size_t
 
°r_size
;

480 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

481 
	`oÊ_°ru˘s_queue_¥öt
(
°ªam
, 
q
);

482 
	`f˛o£
(
°ªam
);

483  
°r
;

484 
	}
}

487 
	$oÊ_°ru˘s_queue_¥öt
(
FILE
 *
°ªam
, 
oÊ_∑ckë_queue
 *
q
) {

488 
size_t
 
i
;

490 
	`Ârötf
(
°ªam
, "{q=\"");

491 
	`oÊ_queue_¥öt
(
°ªam
, 
q
->
queue_id
);

492 
	`Ârötf
(
°ªam
, "\",Örops=[");

494 
i
=0; i<
q
->
¥›îtõs_num
; i++) {

495 
	`oÊ_°ru˘s_queue_¥›_¥öt
(
°ªam
, 
q
->
¥›îtõs
[
i
]);

496 i‡(
i
 < 
q
->
¥›îtõs_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); }

499 
	`Ârötf
(
°ªam
, "]}");

500 
	}
}

503 
	$oÊ_°ru˘s_queue_¥›_to_°rög
(
oÊ_queue_¥›_hódî
 *
p
) {

504 *
°r
;

505 
size_t
 
°r_size
;

506 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

507 
	`oÊ_°ru˘s_queue_¥›_¥öt
(
°ªam
, 
p
);

508 
	`f˛o£
(
°ªam
);

509  
°r
;

510 
	}
}

513 
	$oÊ_°ru˘s_queue_¥›_¥öt
(
FILE
 *
°ªam
, 
oÊ_queue_¥›_hódî
 *
p
) {

514 
	`oÊ_queue_¥›_ty≥_¥öt
(
°ªam
, 
p
->
ty≥
);

516 
p
->
ty≥
) {

517 (
OFPQT_MIN_RATE
): {

518 
oÊ_queue_¥›_mö_øã
 *
pm
 = (oÊ_queue_¥›_mö_øã *)
p
;

520 
	`Ârötf
(
°ªam
, "{øã=\"%u\"}", 
pm
->
øã
);

526 
	}
}

529 
	$oÊ_°ru˘s_Êow_°©s_to_°rög
(
oÊ_Êow_°©s
 *
s
, 
oÊ_exp
 *
exp
) {

530 *
°r
;

531 
size_t
 
°r_size
;

532 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

533 
	`oÊ_°ru˘s_Êow_°©s_¥öt
(
°ªam
, 
s
, 
exp
);

534 
	`f˛o£
(
°ªam
);

535  
°r
;

536 
	}
}

539 
	$oÊ_°ru˘s_Êow_°©s_¥öt
(
FILE
 *
°ªam
, 
oÊ_Êow_°©s
 *
s
, 
oÊ_exp
 *
exp
) {

540 
size_t
 
i
;

542 
	`Ârötf
(
°ªam
, "{table=\"");

543 
	`oÊ_èbÀ_¥öt
(
°ªam
, 
s
->
èbÀ_id
);

544 
	`Ârötf
(
°ªam
, "\", match=\"");

545 
	`oÊ_°ru˘s_m©ch_¥öt
(
°ªam
, 
s
->
m©ch
, 
exp
);

546 
	`Ârötf
(
°ªam
, "\", dur_s=\"%u\", dur_ns=\"%u\",Örio=\"%u\", "

547 "idÀ_to=\"%u\", h¨d_to=\"%u\", cookõ=\"0x%"
PRIx64
"\", "

548 "pkt_˙t=\"%"
PRIu64
"\", byte_cnt=\"%"PRIu64"\", insts=[",

549 
s
->
duøti⁄_£c
, s->
duøti⁄_n£c
, s->
¥i‹ôy
,

550 
s
->
idÀ_timeout
, s->
h¨d_timeout
, s->
cookõ
,

551 
s
->
∑ckë_cou¡
, s->
byã_cou¡
);

553 
i
=0; i<
s
->
ö°ru˘i⁄s_num
; i++) {

554 
	`oÊ_°ru˘s_ö°ru˘i⁄_¥öt
(
°ªam
, 
s
->
ö°ru˘i⁄s
[
i
], 
exp
);

555 i‡(
i
 < 
s
->
ö°ru˘i⁄s_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); };

558 
	`Ârötf
(
°ªam
, "]}");

559 
	}
}

562 
	$oÊ_°ru˘s_buckë_cou¡î_to_°rög
(
oÊ_buckë_cou¡î
 *
s
) {

563 *
°r
;

564 
size_t
 
°r_size
;

565 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

566 
	`oÊ_°ru˘s_buckë_cou¡î_¥öt
(
°ªam
, 
s
);

567 
	`f˛o£
(
°ªam
);

568  
°r
;

569 
	}
}

572 
	$oÊ_°ru˘s_buckë_cou¡î_¥öt
(
FILE
 *
°ªam
, 
oÊ_buckë_cou¡î
 *
c
) {

573 
	`Ârötf
(
°ªam
, "{pkt_˙t=\"%"
PRIu64
"\", byte_cnt=\"%"PRIu64"\"}",

574 
c
->
∑ckë_cou¡
, c->
byã_cou¡
);

575 
	}
}

578 
	$oÊ_°ru˘s_group_°©s_to_°rög
(
oÊ_group_°©s
 *
s
) {

579 *
°r
;

580 
size_t
 
°r_size
;

581 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

582 
	`oÊ_°ru˘s_group_°©s_¥öt
(
°ªam
, 
s
);

583 
	`f˛o£
(
°ªam
);

584  
°r
;

585 
	}
}

588 
	$oÊ_°ru˘s_group_°©s_¥öt
(
FILE
 *
°ªam
, 
oÊ_group_°©s
 *
s
) {

589 
size_t
 
i
;

591 
	`Ârötf
(
°ªam
, "{group=\"");

592 
	`oÊ_group_¥öt
(
°ªam
, 
s
->
group_id
);

593 
	`Ârötf
(
°ªam
, "\",Ñef_˙t=\"%u\",Ökt_˙t=\"%"
PRIu64
"\", byte_cnt=\"%"PRIu64"\", cntrs=[",

594 
s
->
ªf_cou¡
, s->
∑ckë_cou¡
, s->
byã_cou¡
);

596 
i
=0; i<
s
->
cou¡îs_num
; i++) {

597 
	`oÊ_°ru˘s_buckë_cou¡î_¥öt
(
°ªam
, 
s
->
cou¡îs
[
i
]);

598 i‡(
i
 < 
s
->
cou¡îs_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); };

601 
	`Ârötf
(
°ªam
, "]}");

602 
	}
}

605 
	$oÊ_°ru˘s_mëî_b™d_to_°rög
(
oÊ_mëî_b™d_hódî
* 
s
){

606 *
°r
;

607 
size_t
 
°r_size
;

608 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

609 
	`oÊ_°ru˘s_mëî_b™d_¥öt
(
°ªam
, 
s
);

610 
	`f˛o£
(
°ªam
);

611  
°r
;

614 
	}
}

617 
	$oÊ_°ru˘s_mëî_b™d_¥öt
(
FILE
 *
°ªam
, 
oÊ_mëî_b™d_hódî
* 
s
){

618 
	`Ârötf
(
°ªam
, "{type = ");

619 
	`oÊ_mëî_b™d_ty≥_¥öt
(
°ªam
, 
s
->
ty≥
);

620 
s
->
ty≥
){

621 (
OFPMBT_DROP
):{

622 
oÊ_mëî_b™d_dr›
 *
d
 = (oÊ_mëî_b™d_dr›*)
s
;

623 
	`Ârötf
(
°ªam
, ",Ñ©e=\"%"
PRIu32
"\", burst_size=\"%"PRIu32"\"}",

624 
d
->
øã
, d->
bur°_size
);

627 (
OFPMBT_DSCP_REMARK
):{

628 
oÊ_mëî_b™d_ds˝_ªm¨k
 *
d
 = (oÊ_mëî_b™d_ds˝_ªm¨k*)
s
;

629 
	`Ârötf
(
°ªam
, ",Ñ©e=\"%"
PRIu32
"\", burst_size=\"%"PRIu32"\",Örec_level=\"%u\"}",

630 
d
->
øã
, d->
bur°_size
, d->
¥ec_Àvñ
);

633 (
OFPMBT_EXPERIMENTER
):{

634 
oÊ_mëî_b™d_ex≥rimíãr
 *
d
 = (oÊ_mëî_b™d_ex≥rimíãr*)
s
;

635 
	`Ârötf
(
°ªam
, ",Ñ©e=\"%"
PRIu32
"\", burst_size=\"%"PRIu32"\",Éxp_id=\"%"PRIu32"\"}",

636 
d
->
øã
, d->
bur°_size
, d->
ex≥rimíãr
);

640 
	}
}

643 
	$oÊ_°ru˘s_mëî_b™d_°©s_to_°rög
(
oÊ_mëî_b™d_°©s
* 
s
){

644 *
°r
;

645 
size_t
 
°r_size
;

646 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

647 
	`oÊ_°ru˘s_mëî_b™d_°©s_¥öt
(
°ªam
, 
s
);

648 
	`f˛o£
(
°ªam
);

649  
°r
;

650 
	}
}

653 
	$oÊ_°ru˘s_mëî_b™d_°©s_¥öt
(
FILE
 *
°ªam
, 
oÊ_mëî_b™d_°©s
* 
s
){

654 
	`Ârötf
(
°ªam
, "{pkt_b™d_˙t=\"%"
PRIu64
"\", byte_band_cnt=\"%"PRIu64"\"}",

655 
s
->
∑ckë_b™d_cou¡
, s->
byã_b™d_cou¡
);

656 
	}
}

659 
	$oÊ_°ru˘s_mëî_°©s_to_°rög
(
oÊ_mëî_°©s
* 
s
){

660 *
°r
;

661 
size_t
 
°r_size
;

662 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

663 
	`oÊ_°ru˘s_mëî_°©s_¥öt
(
°ªam
, 
s
);

664 
	`f˛o£
(
°ªam
);

665  
°r
;

666 
	}
}

669 
	$oÊ_°ru˘s_mëî_°©s_¥öt
(
FILE
 *
°ªam
, 
oÊ_mëî_°©s
* 
s
){

670 
size_t
 
i
;

672 
	`Ârötf
(
°ªam
, "{mëî%x\"", 
s
->
mëî_id
);

673 
	`Ârötf
(
°ªam
, "\", flow_˙t=\"%u\",Ökt_ö_˙t=\"%"
PRIu64
"\", byte_in_cnt=\"%"PRIu64"\""

674 ", duøti⁄_£c=\"%"
PRIu32
"\", duration_nsec=\"%"PRIu32"\", bands=[",

675 
s
->
Êow_cou¡
, s->
∑ckë_ö_cou¡
, s->
byã_ö_cou¡
,

676 
s
->
duøti⁄_£c
, s->
duøti⁄_n£c
);

678 
i
=0; i<
s
->
mëî_b™ds_num
; i++) {

679 
	`oÊ_°ru˘s_mëî_b™d_°©s_¥öt
(
°ªam
, 
s
->
b™d_°©s
[
i
]);

680 i‡(
i
 < 
s
->
mëî_b™ds_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); };

683 
	`Ârötf
(
°ªam
, "]}");

684 
	}
}

687 
	$oÊ_°ru˘s_mëî_c⁄fig_to_°rög
(
oÊ_mëî_c⁄fig
* 
s
){

688 *
°r
;

689 
size_t
 
°r_size
;

690 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

691 
	`oÊ_°ru˘s_mëî_c⁄fig_¥öt
(
°ªam
, 
s
);

692 
	`f˛o£
(
°ªam
);

693  
°r
;

694 
	}
}

697 
	$oÊ_°ru˘s_mëî_c⁄fig_¥öt
(
FILE
 *
°ªam
, 
oÊ_mëî_c⁄fig
* 
s
){

698 
size_t
 
i
;

700 
	`Ârötf
(
°ªam
, "{mëî%x\"", 
s
->
mëî_id
);

701 
	`Ârötf
(
°ªam
, "\", fœgs=\"%"
PRIx16
"\", bands=[",

702 
s
->
Êags
);

704 
i
=0; i<
s
->
mëî_b™ds_num
; i++) {

705 
	`oÊ_°ru˘s_mëî_b™d_¥öt
(
°ªam
, 
s
->
b™ds
[
i
]);

706 i‡(
i
 < 
s
->
mëî_b™ds_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); };

709 
	`Ârötf
(
°ªam
, "]}");

711 
	}
}

714 
	$oÊ_°ru˘s_mëî_„©uªs_to_°rög
(
oÊ_mëî_„©uªs
* 
s
){

715 *
°r
;

716 
size_t
 
°r_size
;

717 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

718 
	`oÊ_°ru˘s_mëî_„©uªs_¥öt
(
°ªam
, 
s
);

719 
	`f˛o£
(
°ªam
);

720  
°r
;

721 
	}
}

724 
	$oÊ_°ru˘s_mëî_„©uªs_¥öt
(
FILE
 *
°ªam
, 
oÊ_mëî_„©uªs
* 
s
){

726 
	`Ârötf
(
°ªam
, "{max_mëî=\"%"
PRIu32
"\", b™d_ty≥s=\"%"
PRIx32
"\","

727 "ˇ∑bûôõ†=\"%"
PRIx32
"\", max_bands = %u , max_color = %u",

728 
s
->
max_mëî
, s->
b™d_ty≥s
, s->
ˇ∑bûôõs
, s->
max_b™ds
, s->
max_cﬁ‹
);

729 
	`Ârötf
(
°ªam
, "}");

731 
	}
}

734 
	$oÊ_°ru˘s_èbÀ_°©s_to_°rög
(
oÊ_èbÀ_°©s
 *
s
) {

735 *
°r
;

736 
size_t
 
°r_size
;

737 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

739 
	`oÊ_°ru˘s_èbÀ_°©s_¥öt
(
°ªam
, 
s
);

741 
	`f˛o£
(
°ªam
);

742  
°r
;

743 
	}
}

746 
	$oÊ_°ru˘s_èbÀ_°©s_¥öt
(
FILE
 *
°ªam
, 
oÊ_èbÀ_°©s
 *
s
) {

747 
	`Ârötf
(
°ªam
, "{table=\"");

748 
	`oÊ_èbÀ_¥öt
(
°ªam
, 
s
->
èbÀ_id
);

749 
	`Ârötf
(
°ªam
, "\",áctive=\"%u\", "

750 "lookup=\"%"
PRIu64
"\", match=\"%"PRIu64"\"",

751 
s
->
a˘ive_cou¡
,

752 
s
->
lookup_cou¡
, s->
m©ched_cou¡
);

753 
	}
}

756 
	$oÊ_°ru˘s_èbÀ_¥›îtõs_to_°rög
(
oÊ_èbÀ_„©uª_¥›_hódî
 *
s
){

757 *
°r
;

758 
size_t
 
°r_size
;

759 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

760 
	`oÊ_°ru˘s_èbÀ_¥›îtõs_¥öt
(
°ªam
, 
s
);

761 
	`f˛o£
(
°ªam
);

762  
°r
;

763 
	}
}

766 
	$oÊ_°ru˘s_èbÀ_¥›îtõs_¥öt
(
FILE
 * 
°ªam
, 
oÊ_èbÀ_„©uª_¥›_hódî
* 
s
){

767 
i
;

768 
	`Ârötf
(
°ªam
, "{property=\"");

769 
	`oÊ_¥›îtõs_ty≥_¥öt
(
°ªam
, 
s
->
ty≥
);

770 
s
->
ty≥
){

771 
OFPTFPT_INSTRUCTIONS
:

772 
OFPTFPT_INSTRUCTIONS_MISS
:{

773 
oÊ_èbÀ_„©uª_¥›_ö°ru˘i⁄s
 *
ö°s
 = (oÊ_èbÀ_„©uª_¥›_ö°ru˘i⁄s*Ë
s
;

774 
	`Ârötf
(
°ªam
, "[");

775 if(
ö°s
->
ids_num
) {

776 
i
 = 0; i < 
ö°s
->
ids_num
 -1; i++){

777 
	`oÊ_ö°ru˘i⁄_ty≥_¥öt
(
°ªam
, 
ö°s
->
ö°ru˘i⁄_ids
[
i
].
ty≥
);

778 
	`Ârötf
(
°ªam
, ", ");

780 
	`oÊ_ö°ru˘i⁄_ty≥_¥öt
(
°ªam
, 
ö°s
->
ö°ru˘i⁄_ids
[ö°s->
ids_num
-1].
ty≥
);

782 
	`Ârötf
(
°ªam
, "]");

785 
OFPTFPT_NEXT_TABLES
:

786 
OFPTFPT_NEXT_TABLES_MISS
:{

787 
oÊ_èbÀ_„©uª_¥›_√xt_èbÀs
 *
tbls
 = (oÊ_èbÀ_„©uª_¥›_√xt_èbÀs*Ë
s
;

788 
	`Ârötf
(
°ªam
, "[");

789 if(
tbls
->
èbÀ_num
) {

790 
i
 = 0; i < 
tbls
->
èbÀ_num
 -1; i++){

791 
	`Ârötf
(
°ªam
, "%d, ", 
tbls
->
√xt_èbÀ_ids
[
i
]);

793 
	`Ârötf
(
°ªam
, "%d]", 
tbls
->
√xt_èbÀ_ids
[tbls->
èbÀ_num
 -1]);

797 
OFPTFPT_APPLY_ACTIONS
:

798 
OFPTFPT_APPLY_ACTIONS_MISS
:

799 
OFPTFPT_WRITE_ACTIONS
:

800 
OFPTFPT_WRITE_ACTIONS_MISS
:{

801 
oÊ_èbÀ_„©uª_¥›_a˘i⁄s
 *
a˘s
 = (oÊ_èbÀ_„©uª_¥›_a˘i⁄s*Ë
s
;

802 
	`Ârötf
(
°ªam
, "[");

803 if(
a˘s
->
a˘i⁄s_num
) {

804 
i
 = 0; i < 
a˘s
->
a˘i⁄s_num
 -1; i++){

805 
	`oÊ_a˘i⁄_ty≥_¥öt
(
°ªam
, 
a˘s
->
a˘i⁄_ids
[
i
].
ty≥
);

806 
	`Ârötf
(
°ªam
, ", ");

808 
	`oÊ_a˘i⁄_ty≥_¥öt
(
°ªam
, 
a˘s
->
a˘i⁄_ids
[a˘s->
a˘i⁄s_num
-1].
ty≥
);

810 
	`Ârötf
(
°ªam
, "]");

813 
OFPTFPT_MATCH
:

814 
OFPTFPT_WILDCARDS
:

815 
OFPTFPT_APPLY_SETFIELD
:

816 
OFPTFPT_APPLY_SETFIELD_MISS
:

817 
OFPTFPT_WRITE_SETFIELD
:

818 
OFPTFPT_WRITE_SETFIELD_MISS
:{

819 
oÊ_èbÀ_„©uª_¥›_oxm
 *
oxms
 = (oÊ_èbÀ_„©uª_¥›_oxm*Ë
s
;

820 
	`Ârötf
(
°ªam
, "[");

821 if(
oxms
->
oxm_num
) {

822 
i
 = 0; i < 
oxms
->
oxm_num
 -1; i++){

823 
	`oÊ_oxm_ty≥_¥öt
(
°ªam
, 
oxms
->
oxm_ids
[
i
]);

824 
	`Ârötf
(
°ªam
, ", " );

826 
	`oÊ_oxm_ty≥_¥öt
(
°ªam
, 
oxms
->
oxm_ids
[oxms->
oxm_num
 -1]);

828 
	`Ârötf
(
°ªam
, "]");

834 
	`Ârötf
(
°ªam
, "\"} ");

835 
	}
}

838 
	$oÊ_°ru˘s_èbÀ_„©uªs_to_°rög
(
oÊ_èbÀ_„©uªs
 *
s
){

839 *
°r
;

840 
size_t
 
°r_size
;

841 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

842 
	`oÊ_°ru˘s_èbÀ_„©uªs_¥öt
(
°ªam
, 
s
);

843 
	`f˛o£
(
°ªam
);

844  
°r
;

845 
	}
}

848 
	$oÊ_°ru˘s_èbÀ_„©uªs_¥öt
(
FILE
 *
°ªam
, 
oÊ_èbÀ_„©uªs
 *
s
){

849 
i
;

850 
	`Ârötf
(
°ªam
, "{table=\"");

851 
	`oÊ_èbÀ_¥öt
(
°ªam
, 
s
->
èbÀ_id
);

852 
	`Ârötf
(
°ªam
, "\",Çame=\"%s\", "

853 "mëad©a_m©ch=\"%"
PRIx64
"\", mëad©a_wrôe=\"%"PRIx64"\", c⁄fig=\"%"
PRIu32
"\","

854 "max_íåõs=\"%"
PRIu32
"\"",

855 
s
->
«me
, s->
mëad©a_m©ch
, s->
mëad©a_wrôe
, s->
c⁄fig
, s->
max_íåõs
);

856 
i
 =0; i < 
s
->
¥›îtõs_num
; i++){

857 
	`oÊ_°ru˘s_èbÀ_¥›îtõs_¥öt
(
°ªam
, 
s
->
¥›îtõs
[
i
]);

859 
	}
}

862 
	$oÊ_°ru˘s_p‹t_°©s_to_°rög
(
oÊ_p‹t_°©s
 *
s
) {

863 *
°r
;

864 
size_t
 
°r_size
;

865 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

866 
	`oÊ_°ru˘s_p‹t_°©s_¥öt
(
°ªam
, 
s
);

867 
	`f˛o£
(
°ªam
);

868  
°r
;

869 
	}
}

872 
	$oÊ_°ru˘s_p‹t_°©s_¥öt
(
FILE
 *
°ªam
, 
oÊ_p‹t_°©s
 *
s
) {

874 
	`Ârötf
(
°ªam
, "{port=\"");

875 
	`oÊ_p‹t_¥öt
(
°ªam
, 
s
->
p‹t_no
);

876 
	`Ârötf
(
°ªam
, "\",Ñx_pkt=\"%"
PRIu64
"\",Åx_pkt=\"%"PRIu64"\", "

877 "rx_byãs=\"%"
PRIu64
"\",Åx_bytes=\"%"PRIu64"\", "

878 "rx_dr›s=\"%"
PRIu64
"\",Åx_drops=\"%"PRIu64"\", "

879 "rx_îrs=\"%"
PRIu64
"\",Åx_errs=\"%"PRIu64"\", "

880 "rx_‰m=\"%"
PRIu64
"\",Ñx_over=\"%"PRIu64"\", "

881 "rx_¸c=\"%"
PRIu64
"\", coll=\"%"PRIu64"\"}",

882 
s
->
rx_∑ckës
, s->
tx_∑ckës
,

883 
s
->
rx_byãs
, s->
tx_byãs
,

884 
s
->
rx_dr›≥d
, s->
tx_dr›≥d
,

885 
s
->
rx_îr‹s
, s->
tx_îr‹s
,

886 
s
->
rx_‰ame_îr
, s->
rx_ovî_îr
,

887 
s
->
rx_¸c_îr
, s->
cﬁlisi⁄s
);

888 
	}
};

891 
	$oÊ_°ru˘s_queue_°©s_to_°rög
(
oÊ_queue_°©s
 *
s
) {

892 *
°r
;

893 
size_t
 
°r_size
;

894 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

895 
	`oÊ_°ru˘s_queue_°©s_¥öt
(
°ªam
, 
s
);

896 
	`f˛o£
(
°ªam
);

897  
°r
;

898 
	}
}

901 
	$oÊ_°ru˘s_queue_°©s_¥öt
(
FILE
 *
°ªam
, 
oÊ_queue_°©s
 *
s
) {

903 
	`Ârötf
(
°ªam
, "{port=\"");

904 
	`oÊ_p‹t_¥öt
(
°ªam
, 
s
->
p‹t_no
);

905 
	`Ârötf
(
°ªam
, "\", q=\"");

906 
	`oÊ_queue_¥öt
(
°ªam
, 
s
->
queue_id
);

907 
	`Ârötf
(
°ªam
, "\",Åx_byãs=\"%"
PRIu64
"\", "

908 "tx_pkt=\"%"
PRIu64
"\",Åx_err=\"%"PRIu64"\"}",

909 
s
->
tx_byãs
, s->
tx_∑ckës
, s->
tx_îr‹s
);

910 
	}
};

913 
	$oÊ_°ru˘s_group_desc_°©s_to_°rög
(
oÊ_group_desc_°©s
 *
s
, 
oÊ_exp
 *
exp
) {

914 *
°r
;

915 
size_t
 
°r_size
;

916 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

917 
	`oÊ_°ru˘s_group_desc_°©s_¥öt
(
°ªam
, 
s
, 
exp
);

918 
	`f˛o£
(
°ªam
);

919  
°r
;

920 
	}
}

923 
	$oÊ_°ru˘s_group_desc_°©s_¥öt
(
FILE
 *
°ªam
, 
oÊ_group_desc_°©s
 *
s
, 
oÊ_exp
 *
exp
) {

924 
size_t
 
i
;

926 
	`Ârötf
(
°ªam
, "{type=\"");

927 
	`oÊ_group_ty≥_¥öt
(
°ªam
, 
s
->
ty≥
);

928 
	`Ârötf
(
°ªam
, "\", group=\"");

929 
	`oÊ_group_¥öt
(
°ªam
, 
s
->
group_id
);

930 
	`Ârötf
(
°ªam
, "\", buckets=[");

932 
i
=0; i<
s
->
buckës_num
; i++) {

933 
	`oÊ_°ru˘s_buckë_¥öt
(
°ªam
, 
s
->
buckës
[
i
], 
exp
);

934 i‡(
i
 < 
s
->
buckës_num
 - 1Ë{ 
	`Ârötf
(
°ªam
, ", "); };

937 
	`Ârötf
(
°ªam
, "]}");

938 
	}
}

941 
	$oÊ_°ru˘s_async_c⁄fig_to_°rög
(
oÊ_async_c⁄fig
 *
s
) {

942 *
°r
;

943 
size_t
 
°r_size
;

944 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

945 
	`oÊ_°ru˘s_async_c⁄fig_¥öt
(
°ªam
, 
s
);

946 
	`f˛o£
(
°ªam
);

947  
°r
;

948 
	}
}

952 
	$oÊ_°ru˘s_async_c⁄fig_¥öt
(
FILE
 * 
°ªam
, 
oÊ_async_c⁄fig
 *
s
){

953 
	`Ârötf
(
°ªam
, "{equal=[");

954 
	`oÊ_async_∑ckë_ö
(
°ªam
, 
s
->
∑ckë_ö_mask
[0]);

955 
	`oÊ_async_p‹t_°©us
(
°ªam
, 
s
->
p‹t_°©us_mask
[0]);

956 
	`oÊ_async_Êow_ªmoved
(
°ªam
, 
s
->
Êow_ªmoved_mask
[0]);

957 
	`Ârötf
(
°ªam
, "], ");

958 
	`Ârötf
(
°ªam
, "slave=[");

959 
	`oÊ_async_∑ckë_ö
(
°ªam
, 
s
->
∑ckë_ö_mask
[1]);

960 
	`oÊ_async_p‹t_°©us
(
°ªam
, 
s
->
p‹t_°©us_mask
[1]);

961 
	`oÊ_async_Êow_ªmoved
(
°ªam
, 
s
->
Êow_ªmoved_mask
[1]);

962 
	`Ârötf
(
°ªam
, "]}");

963 
	}
}

	@oflib/ofl-structs-unpack.c

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<√töë/ö.h
>

35 
	~"oÊ.h
"

36 
	~"oÊ-¥öt.h
"

37 
	~"oÊ-a˘i⁄s.h
"

38 
	~"oÊ-°ru˘s.h
"

39 
	~"oÊ-utûs.h
"

40 
	~"oÊ-∑ckës.h
"

41 
	~"oÊ-log.h
"

42 
	~"oxm-m©ch.h
"

43 
	~"›íÊow/›íÊow.h
"

45 
	#LOG_MODULE
 
oÊ_°r_u


	)

46 
	$OFL_LOG_INIT
(
LOG_MODULE
)

48 
oÊ_îr


49 
	$oÊ_°ru˘s_ö°ru˘i⁄s_u≈ack
(
oÂ_ö°ru˘i⁄
 *
§c
, 
size_t
 *
Àn
, 
oÊ_ö°ru˘i⁄_hódî
 **
d°
, 
oÊ_exp
 *
exp
) {

50 
size_t
 
ûí
;

51 
oÊ_ö°ru˘i⁄_hódî
 *
ö°
 = 
NULL
;

53 i‡(*
Àn
 < (
oÂ_ö°ru˘i⁄
)) {

54 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived in°ru˘i⁄ i†toÿsh‹à(%zu).", *
Àn
);

55  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

58 i‡(*
Àn
 < 
	`¡ohs
(
§c
->len)) {

59 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived in°ru˘i⁄ ha†övÆidÜígth (£àtÿ%u, buà⁄ly %zuÑe˚ived).", 
	`¡ohs
(
§c
->
Àn
), *len);

60  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

62 
ûí
 = 
	`¡ohs
(
§c
->
Àn
);

65 
	`¡ohs
(
§c
->
ty≥
)) {

66 
OFPIT_GOTO_TABLE
: {

67 
oÂ_ö°ru˘i⁄_gŸo_èbÀ
 *
si
;

68 
oÊ_ö°ru˘i⁄_gŸo_èbÀ
 *
di
;

70 i‡(
ûí
 < (
oÂ_ö°ru˘i⁄_gŸo_èbÀ
)) {

71 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived GOTO_TABLE in°ru˘i⁄ ha†övÆidÜígth (%zu).", *
Àn
);

72  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBRC_BAD_LEN
);

75 
si
 = (
oÂ_ö°ru˘i⁄_gŸo_èbÀ
 *)
§c
;

77 i‡(
si
->
èbÀ_id
 >
PIPELINE_TABLES
) {

78 i‡(
	`OFL_LOG_IS_WARN_ENABLED
(
LOG_MODULE
)) {

79 *
ts
 = 
	`oÊ_èbÀ_to_°rög
(
si
->
èbÀ_id
);

80 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived GOTO_TABLE in°ru˘i⁄ ha†övÆidÅabÀ_id (%s).", 
ts
);

81 
	`‰ì
(
ts
);

83  
	`oÊ_îr‹
(
OFPET_BAD_INSTRUCTION
, 
OFPBIC_BAD_TABLE_ID
);

86 
di
 = (
oÊ_ö°ru˘i⁄_gŸo_èbÀ
 *)
	`mÆloc
((ofl_instruction_goto_table));

88 
di
->
èbÀ_id
 = 
si
->table_id;

90 
ö°
 = (
oÊ_ö°ru˘i⁄_hódî
 *)
di
;

91 
ûí
 -(
oÂ_ö°ru˘i⁄_gŸo_èbÀ
);

95 
OFPIT_WRITE_METADATA
: {

96 
oÂ_ö°ru˘i⁄_wrôe_mëad©a
 *
si
;

97 
oÊ_ö°ru˘i⁄_wrôe_mëad©a
 *
di
;

99 i‡(
ûí
 < (
oÂ_ö°ru˘i⁄_wrôe_mëad©a
)) {

100 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived WRITE_METADATA in°ru˘i⁄ ha†övÆidÜígth (%zu).", *
Àn
);

101  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBRC_BAD_LEN
);

104 
si
 = (
oÂ_ö°ru˘i⁄_wrôe_mëad©a
 *)
§c
;

105 
di
 = (
oÊ_ö°ru˘i⁄_wrôe_mëad©a
 *)
	`mÆloc
((ofl_instruction_write_metadata));

107 
di
->
mëad©a
 = 
	`¡oh64
(
si
->metadata);

108 
di
->
mëad©a_mask
 = 
	`¡oh64
(
si
->metadata_mask);

110 
ö°
 = (
oÊ_ö°ru˘i⁄_hódî
 *)
di
;

111 
ûí
 -(
oÂ_ö°ru˘i⁄_wrôe_mëad©a
);

114 
OFPIT_WRITE_ACTIONS
:

115 
OFPIT_APPLY_ACTIONS
: {

116 
oÂ_ö°ru˘i⁄_a˘i⁄s
 *
si
;

117 
oÊ_ö°ru˘i⁄_a˘i⁄s
 *
di
;

118 
oÂ_a˘i⁄_hódî
 *
a˘
;

119 
oÊ_îr
 
îr‹
;

120 
size_t
 
i
;

122 i‡(
ûí
 < (
oÂ_ö°ru˘i⁄_a˘i⁄s
)) {

123 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived *_ACTIONS in°ru˘i⁄ ha†övÆidÜígth (%zu).", *
Àn
);

124  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

126 
ûí
 -(
oÂ_ö°ru˘i⁄_a˘i⁄s
);

128 
si
 = (
oÂ_ö°ru˘i⁄_a˘i⁄s
 *)
§c
;

133 
di
 = (
oÊ_ö°ru˘i⁄_a˘i⁄s
 *)
	`mÆloc
((ofl_instruction_actions));

136 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_a˘i⁄s
((
uöt8_t
 *)
si
->
a˘i⁄s
, 
ûí
, &
di
->
a˘i⁄s_num
);

137 i‡(
îr‹
) {

138 
	`‰ì
(
di
);

139  
îr‹
;

141 
di
->
a˘i⁄s
 = (
oÊ_a˘i⁄_hódî
 **)
	`mÆloc
(di->
a˘i⁄s_num
 * (ofl_action_header *));

143 
a˘
 = 
si
->
a˘i⁄s
;

144 
i
 = 0; i < 
di
->
a˘i⁄s_num
; i++) {

145 
îr‹
 = 
	`oÊ_a˘i⁄s_u≈ack
(
a˘
, &
ûí
, &(
di
->
a˘i⁄s
[
i
]), 
exp
);

146 i‡(
îr‹
) {

147 *
Àn
 = *À¿- 
	`¡ohs
(
§c
->ÀnË+ 
ûí
;

148 
	`OFL_UTILS_FREE_ARR_FUN2
(
di
->
a˘i⁄s
, 
i
,

149 
oÊ_a˘i⁄s_‰ì
, 
exp
);

150 
	`‰ì
(
di
);

151  
îr‹
;

153 
a˘
 = (
oÂ_a˘i⁄_hódî
 *)((
uöt8_t
 *Ô˘ + 
	`¡ohs
◊˘->
Àn
));

156 
ö°
 = (
oÊ_ö°ru˘i⁄_hódî
 *)
di
;

159 
OFPIT_CLEAR_ACTIONS
: {

160 i‡(
ûí
 < (
oÂ_ö°ru˘i⁄_a˘i⁄s
)) {

161 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived CLEAR_ACTIONS in°ru˘i⁄ ha†övÆidÜígth (%zu).", *
Àn
);

162  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

165 
ö°
 = (
oÊ_ö°ru˘i⁄_hódî
 *)
	`mÆloc
((ofl_instruction_header));

166 
ö°
->
ty≥
 = (
oÂ_ö°ru˘i⁄_ty≥
)
	`¡ohs
(
§c
->type);

168 
ûí
 -(
oÂ_ö°ru˘i⁄_a˘i⁄s
);

171 
OFPIT_METER
: {

172 
oÂ_ö°ru˘i⁄_mëî
 *
si
;

173 
oÊ_ö°ru˘i⁄_mëî
 *
di
;

175 i‡(
ûí
 < (
oÂ_ö°ru˘i⁄_mëî
)) {

176 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived METER in°ru˘i⁄ ha†övÆidÜígth (%zu).", *
Àn
);

177  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBRC_BAD_LEN
);

179 
si
 = (
oÂ_ö°ru˘i⁄_mëî
*)
§c
;

180 
di
 = (
oÊ_ö°ru˘i⁄_mëî
 *)
	`mÆloc
((ofl_instruction_meter));

182 
di
->
mëî_id
 = 
	`¡ohl
(
si
->meter_id);

184 
ö°
 = (
oÊ_ö°ru˘i⁄_hódî
 *)
di
;

185 
ûí
 -(
oÂ_ö°ru˘i⁄_mëî
);

188 
OFPIT_EXPERIMENTER
: {

189 
oÊ_îr
 
îr‹
;

191 i‡(
exp
 =
NULL
 ||Éxp->
ö°
 =NULL ||Éxp->ö°->
u≈ack
 == NULL) {

192 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received EXPERIMENTER instruction, butÇo callback was given.");

193  
	`oÊ_îr‹
(
OFPET_BAD_INSTRUCTION
, 
OFPBIC_UNSUP_INST
);

195 
îr‹
 = 
exp
->
ö°
->
	`u≈ack
(
§c
, &
ûí
, &inst);

196 i‡(
îr‹
) {

197  
îr‹
;

204 
ö°
->
ty≥
 = (
oÂ_ö°ru˘i⁄_ty≥
)
	`¡ohs
(
§c
->type);

206 i‡(
ûí
 != 0) {

207 *
Àn
 = *À¿- 
	`¡ohs
(
§c
->ÀnË+ 
ûí
;

208 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Thêª˚ived in°ru˘i⁄ c⁄èöedÉxå®byã†(%zu).", 
ûí
);

209 
	`oÊ_°ru˘s_‰ì_ö°ru˘i⁄
(
ö°
, 
exp
);

210  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

213 *
Àn
 -
	`¡ohs
(
§c
->len);

214 (*
d°
Ë
ö°
;

217 
	}
}

219 
oÊ_îr


220 
	$oÊ_°ru˘s_èbÀ_¥›îtõs_u≈ack
(
oÂ_èbÀ_„©uª_¥›_hódî
 * 
§c
, 
size_t
 *
Àn
, 
oÊ_èbÀ_„©uª_¥›_hódî
 **
d°
, 
oÊ_exp
 *
exp
){

221 
size_t
 
∂í
;

222 
oÊ_îr
 
îr‹
;

223 
oÊ_èbÀ_„©uª_¥›_hódî
 * 
¥›
 = 
NULL
;

225 i‡(*
Àn
 < (
oÂ_èbÀ_„©uª_¥›_hódî
)){

226 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived fótuª i†toÿsh‹à(%zu).", *
Àn
);

227  
	`oÊ_îr‹
(
OFPET_TABLE_FEATURES_FAILED
, 
OFPTFFC_BAD_LEN
);

230 i‡(*
Àn
 < 
	`¡ohs
(
§c
->
Àngth
)) {

231 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ivedÅabÀÖr›îty ha†övÆidÜígth (£àtÿ%u, buà⁄ly %zuÑe˚ived).", 
	`¡ohs
(
§c
->
Àngth
), *
Àn
);

232  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

234 
∂í
 = 
	`¡ohs
(
§c
->
Àngth
);

236 
	`¡ohs
(
§c
->
ty≥
)){

237 
OFPTFPT_INSTRUCTIONS
:

238 
OFPTFPT_INSTRUCTIONS_MISS
:{

239 
oÂ_èbÀ_„©uª_¥›_ö°ru˘i⁄s
 *
•
 = (oÂ_èbÀ_„©uª_¥›_ö°ru˘i⁄s*Ë
§c
;

240 
oÊ_èbÀ_„©uª_¥›_ö°ru˘i⁄s
 *
dp
;

241 
size_t
 
ûí
,
i
;

242 
uöt8_t
 *
±r
;

244 i‡(
∂í
 < (
oÂ_èbÀ_„©uª_¥›_ö°ru˘i⁄s
)) {

245 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived INSTRUCTION fótuª ha†övÆidÜígth (%zu).", *
Àn
);

246  
	`oÊ_îr‹
(
OFPET_TABLE_FEATURES_FAILED
, 
OFPTFFC_BAD_LEN
);

249 
dp
 = (
oÊ_èbÀ_„©uª_¥›_ö°ru˘i⁄s
*Ë
	`mÆloc
((ofl_table_feature_prop_instructions));

250 
ûí
 = 
∂í
 - (
oÂ_èbÀ_„©uª_¥›_ö°ru˘i⁄s
);

251 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_ö°ru˘i⁄s
((
uöt8_t
*Ë
•
->
ö°ru˘i⁄_ids
, 
ûí
, &
dp
->
ids_num
);

252 if(
îr‹
){

253 
	`‰ì
(
dp
);

254  
îr‹
;

256 
dp
->
ö°ru˘i⁄_ids
 = (
oÊ_ö°ru˘i⁄_hódî
*Ë
	`mÆloc
((oÊ_ö°ru˘i⁄_hódîË* dp->
ids_num
);

258 
±r
 = (
uöt8_t
*Ë
•
->
ö°ru˘i⁄_ids
;

259 
i
 = 0; i < 
dp
->
ids_num
; i++){

260 
dp
->
ö°ru˘i⁄_ids
[
i
].
ty≥
 = 
	`¡ohs
(((
oÂ_ö°ru˘i⁄
*Ë
±r
)->type);

261 
±r
 +
	`¡ohs
(((
oÂ_ö°ru˘i⁄
*Ë±r)->
Àn
);

263 
∂í
 -
	`¡ohs
(
•
->
Àngth
);

264 
¥›
 = (
oÊ_èbÀ_„©uª_¥›_hódî
*Ë
dp
;

267 
OFPTFPT_NEXT_TABLES
:

268 
OFPTFPT_NEXT_TABLES_MISS
:{

269 
oÂ_èbÀ_„©uª_¥›_√xt_èbÀs
 *
•
 = (oÂ_èbÀ_„©uª_¥›_√xt_èbÀs*Ë
§c
;

270 
oÊ_èbÀ_„©uª_¥›_√xt_èbÀs
 *
dp
;

272 i‡(
∂í
 < (
oÂ_èbÀ_„©uª_¥›_√xt_èbÀs
)) {

273 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived NEXT TABLE fótuª ha†övÆidÜígth (%zu).", *
Àn
);

274  
	`oÊ_îr‹
(
OFPET_TABLE_FEATURES_FAILED
, 
OFPTFFC_BAD_LEN
);

276 
dp
 = (
oÊ_èbÀ_„©uª_¥›_√xt_èbÀs
*Ë
	`mÆloc
((ofl_table_feature_prop_next_tables));

278 
dp
->
èbÀ_num
 = 
	`¡ohs
(
•
->
Àngth
Ë- (
oÂ_èbÀ_„©uª_¥›_√xt_èbÀs
);

279 
dp
->
√xt_èbÀ_ids
 = (
uöt8_t
*Ë
	`mÆloc
((uöt8_tË* dp->
èbÀ_num
);

280 
	`mem˝y
(
dp
->
√xt_èbÀ_ids
, 
•
->√xt_èbÀ_ids, dp->
èbÀ_num
);

282 
∂í
 -
	`¡ohs
(
•
->
Àngth
);

283 
¥›
 = (
oÊ_èbÀ_„©uª_¥›_hódî
*Ë
dp
;

286 
OFPTFPT_WRITE_ACTIONS
:

287 
OFPTFPT_WRITE_ACTIONS_MISS
:

288 
OFPTFPT_APPLY_ACTIONS
:

289 
OFPTFPT_APPLY_ACTIONS_MISS
:{

290 
oÂ_èbÀ_„©uª_¥›_a˘i⁄s
 *
•
 = (oÂ_èbÀ_„©uª_¥›_a˘i⁄s*Ë
§c
;

291 
oÊ_èbÀ_„©uª_¥›_a˘i⁄s
 *
dp
;

292 
size_t
 
Æí
, 
i
;

293 
uöt8_t
 *
±r
;

295 i‡(
∂í
 < (
oÂ_èbÀ_„©uª_¥›_a˘i⁄s
)) {

296 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived ACTION fótuª ha†övÆidÜígth (%zu).", *
Àn
);

297  
	`oÊ_îr‹
(
OFPET_TABLE_FEATURES_FAILED
, 
OFPTFFC_BAD_LEN
);

299 
Æí
 = 
∂í
 - (
oÂ_èbÀ_„©uª_¥›_a˘i⁄s
);

300 
dp
 = (
oÊ_èbÀ_„©uª_¥›_a˘i⁄s
*Ë
	`mÆloc
((ofl_table_feature_prop_actions));

301 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_a˘i⁄s
((
uöt8_t
*)
•
->
a˘i⁄_ids
, 
Æí
, &
dp
->
a˘i⁄s_num
);

302 if(
îr‹
){

303 
	`‰ì
(
dp
);

304  
îr‹
;

307 
dp
->
a˘i⁄_ids
 = (
oÊ_a˘i⁄_hódî
*Ë
	`mÆloc
((oÊ_a˘i⁄_hódîË* dp->
a˘i⁄s_num
);

309 
±r
 = (
uöt8_t
*Ë
•
->
a˘i⁄_ids
;

310 
i
 = 0; i < 
dp
->
a˘i⁄s_num
; i++){

311 
dp
->
a˘i⁄_ids
[
i
].
ty≥
 = 
	`¡ohs
(((
oÂ_a˘i⁄_hódî
*Ë
±r
)->type);

312 
dp
->
a˘i⁄_ids
[
i
].
Àn
 = 
	`¡ohs
(((
oÂ_a˘i⁄_hódî
*Ë
±r
)->len);

313 
±r
 +
	`¡ohs
(((
oÂ_a˘i⁄_hódî
*Ë±r)->
Àn
);

315 
∂í
 -
	`¡ohs
(
•
->
Àngth
);

316 
¥›
 = (
oÊ_èbÀ_„©uª_¥›_hódî
*Ë
dp
;

319 
OFPTFPT_MATCH
:

320 
OFPTFPT_WILDCARDS
:

321 
OFPTFPT_WRITE_SETFIELD
:

322 
OFPTFPT_WRITE_SETFIELD_MISS
:

323 
OFPTFPT_APPLY_SETFIELD
:

324 
OFPTFPT_APPLY_SETFIELD_MISS
:{

325 
oÂ_èbÀ_„©uª_¥›_oxm
 *
•
 = (oÂ_èbÀ_„©uª_¥›_oxm*Ë
§c
;

326 
oÊ_èbÀ_„©uª_¥›_oxm
 *
dp
;

327 
size_t
 
i
;

329 i‡(
∂í
 < (
oÂ_èbÀ_„©uª_¥›_oxm
)) {

330 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived MATCH fótuª ha†övÆidÜígth (%zu).", *
Àn
);

331  
	`oÊ_îr‹
(
OFPET_TABLE_FEATURES_FAILED
, 
OFPTFFC_BAD_LEN
);

334 
dp
 = (
oÊ_èbÀ_„©uª_¥›_oxm
*Ë
	`mÆloc
((ofl_table_feature_prop_oxm));

336 
dp
->
oxm_num
 = (
	`¡ohs
(
•
->
Àngth
Ë- (
oÂ_èbÀ_„©uª_¥›_oxm
))/(
uöt32_t
);

337 
dp
->
oxm_ids
 = (
uöt32_t
*Ë
	`mÆloc
((uöt32_tË* dp->
oxm_num
);

338 
i
 = 0; i < 
dp
->
oxm_num
; i++ ){

339 
dp
->
oxm_ids
[
i
] = 
	`¡ohl
(
•
->oxm_ids[i]);

341 
∂í
 -
	`¡ohs
(
•
->
Àngth
);

342 
¥›
 = (
oÊ_èbÀ_„©uª_¥›_hódî
*Ë
dp
;

348 
¥›
->
ty≥
 = (
oÂ_èbÀ_„©uª_¥›_ty≥
Ë
	`¡ohs
(
§c
->type);

350 
¥›
->
Àngth
 = 
	`¡ohs
(
§c
->length);

352 i‡(
∂í
 != 0){

353 *
Àn
 = *À¿- 
	`¡ohs
(
§c
->
Àngth
Ë+ 
∂í
;

354 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Thêª˚ivedÖr›îty c⁄èöedÉxå®byã†(%zu).", 
∂í
);

356  
	`oÊ_îr‹
(
OFPET_TABLE_FEATURES_FAILED
, 
OFPTFFC_BAD_LEN
);

358 *
Àn
 -
	`¡ohs
(
§c
->
Àngth
);

359 (*
d°
Ë
¥›
;

361 
	}
}

364 
oÊ_îr


365 
	$oÊ_°ru˘s_èbÀ_„©uªs_u≈ack
(
oÂ_èbÀ_„©uªs
 *
§c
,
size_t
 *
Àn
, 
oÊ_èbÀ_„©uªs
 **
d°
, 
oÊ_exp
 *
exp
){

366 
oÊ_èbÀ_„©uªs
 *
„©
;

367 
uöt8_t
 *
¥›
;

368 
oÊ_îr
 
îr‹
;

369 
size_t
 
∂í
, 
i
;

371 if(*
Àn
 < (
oÂ_èbÀ_„©uªs
)){

372 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ivedÅabÀ fótuª i†toÿsh‹à(%zu).", *
Àn
);

373  
	`oÊ_îr‹
(
OFPET_TABLE_FEATURES_FAILED
, 
OFPTFFC_BAD_LEN
);

376 if(*
Àn
 < 
	`¡ohs
(
§c
->
Àngth
)){

377 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ivedÅabÀ_„©uª ha†övÆidÜígth (£àtÿ%u, buà⁄ly %zuÑe˚ived).", 
	`¡ohs
(
§c
->
Àngth
), *
Àn
);

378  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

381 
„©
 = (
oÊ_èbÀ_„©uªs
*Ë
	`mÆloc
((ofl_table_features));

383 
„©
->
Àngth
 = 
	`¡ohs
(
§c
->length);

384 
„©
->
èbÀ_id
 = 
§c
->table_id;

385 
„©
->
«me
 = 
	`mÆloc
(
OFP_MAX_TABLE_NAME_LEN
);

386 
	`°∫˝y
(
„©
->
«me
, 
§c
->«me, 
OFP_MAX_TABLE_NAME_LEN
);

387 
„©
->
mëad©a_m©ch
 = 
	`¡oh64
(
§c
->metadata_match);

388 
„©
->
mëad©a_wrôe
 = 
	`¡oh64
(
§c
->metadata_write);

389 
„©
->
c⁄fig
 = 
	`¡ohl
(
§c
->config);

390 
„©
->
max_íåõs
 = 
	`¡ohl
(
§c
->max_entries);

392 
∂í
 = 
	`¡ohs
(
§c
->
Àngth
Ë- (
oÂ_èbÀ_„©uªs
);

393 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_èbÀ_„©uªs_¥›îtõs
((
uöt8_t
*Ë
§c
->
¥›îtõs
, 
∂í
, &
„©
->
¥›îtõs_num
);

394 i‡(
îr‹
) {

395 
	`‰ì
(
„©
);

396  
îr‹
;

398 
„©
->
¥›îtõs
 = (
oÊ_èbÀ_„©uª_¥›_hódî
**Ë
	`mÆloc
((oÊ_èbÀ_„©uª_¥›_hódî *Ë* fót->
¥›îtõs_num
);

400 
¥›
 = (
uöt8_t
*Ë
§c
->
¥›îtõs
;

401 
i
 = 0; i < 
„©
->
¥›îtõs_num
; i++){

402 
îr‹
 = 
	`oÊ_°ru˘s_èbÀ_¥›îtõs_u≈ack
((
oÂ_èbÀ_„©uª_¥›_hódî
*Ë
¥›
, &
∂í
, &
„©
->
¥›îtõs
[
i
], 
exp
);

403 i‡(
îr‹
) {

404 *
Àn
 = *À¿- 
	`¡ohs
(
§c
->
Àngth
Ë+ 
∂í
;

407 
	`‰ì
(
„©
);

408  
îr‹
;

410 
¥›
 +
	`ROUND_UP
(
	`¡ohs
(((
oÂ_èbÀ_„©uª_¥›_hódî
*Ë¥›)->
Àngth
),8);

413 *
Àn
 -
	`¡ohs
(
§c
->
Àngth
);

415 *
d°
 = 
„©
;

417 
	}
}

419 
oÊ_îr


420 
	$oÊ_°ru˘s_buckë_u≈ack
(
oÂ_buckë
 *
§c
, 
size_t
 *
Àn
, 
uöt8_t
 
gty≥
, 
oÊ_buckë
 **
d°
, 
oÊ_exp
 *
exp
) {

421 
oÊ_buckë
 *
b
;

422 
oÂ_a˘i⁄_hódî
 *
a˘
;

423 
size_t
 
bÀn
;

424 
oÊ_îr
 
îr‹
;

425 
size_t
 
i
;

427 i‡(*
Àn
 < (
oÂ_buckë
)) {

428 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived buckë i†toÿsh‹à(%zu).", *
Àn
);

429  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

432 i‡(*
Àn
 < 
	`¡ohs
(
§c
->len)) {

433 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived buckë ha†övÆidÜígth (£àtÿ%u, buà⁄ly %zuÑe˚ived).", 
	`¡ohs
(
§c
->
Àn
), *len);

434  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

437 
bÀn
 = 
	`¡ohs
(
§c
->
Àn
Ë- (
oÂ_buckë
);

439 i‡(
gty≥
 =
OFPGT_SELECT
 && 
	`¡ohs
(
§c
->
weight
) == 0) {

440 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received bucket hasÇo weight for SELECT group.");

441  
	`oÊ_îr‹
(
OFPET_GROUP_MOD_FAILED
, 
OFPGMFC_INVALID_GROUP
);

444 i‡(
gty≥
 !
OFPGT_SELECT
 && 
	`¡ohs
(
§c
->
weight
) > 0) {

445 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received bucket has weight forÇon-SELECT group.");

446  
	`oÊ_îr‹
(
OFPET_GROUP_MOD_FAILED
, 
OFPGMFC_INVALID_GROUP
);

449 
b
 = (
oÊ_buckë
 *)
	`mÆloc
((ofl_bucket));

451 
b
->
weight
 = 
	`¡ohs
(
§c
->weight);

452 
b
->
w©ch_p‹t
 = 
	`¡ohl
(
§c
->watch_port);

453 
b
->
w©ch_group
 = 
	`¡ohl
(
§c
->watch_group);

455 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_a˘i⁄s
((
uöt8_t
 *)
§c
->
a˘i⁄s
, 
bÀn
, &
b
->
a˘i⁄s_num
);

456 i‡(
îr‹
) {

457 
	`‰ì
(
b
);

458  
îr‹
;

460 
b
->
a˘i⁄s
 = (
oÊ_a˘i⁄_hódî
 **)
	`mÆloc
(b->
a˘i⁄s_num
 * (ofl_action_header *));

462 
a˘
 = 
§c
->
a˘i⁄s
;

463 
i
 = 0; i < 
b
->
a˘i⁄s_num
; i++) {

464 
îr‹
 = 
	`oÊ_a˘i⁄s_u≈ack
(
a˘
, &
bÀn
, &(
b
->
a˘i⁄s
[
i
]), 
exp
);

465 i‡(
îr‹
) {

466 *
Àn
 = *À¿- 
	`¡ohs
(
§c
->ÀnË+ 
bÀn
;

467 
	`OFL_UTILS_FREE_ARR_FUN2
(
b
->
a˘i⁄s
, 
i
,

468 
oÊ_a˘i⁄s_‰ì
, 
exp
);

469 
	`‰ì
(
b
);

470  
îr‹
;

472 
a˘
 = (
oÂ_a˘i⁄_hódî
 *)((
uöt8_t
 *Ô˘ + 
	`¡ohs
◊˘->
Àn
));

475 i‡(
bÀn
 >= 8) {

476 *
Àn
 = *À¿- 
	`¡ohs
(
§c
->ÀnË+ 
bÀn
;

477 
	`oÊ_°ru˘s_‰ì_buckë
(
b
, 
exp
);

478 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived buckë ha†m‹êth™ 64 bôÖaddög (%zu).", 
bÀn
);

479  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

481 *
Àn
 -
	`¡ohs
(
§c
->len);

483 *
d°
 = 
b
;

485 
	}
}

488 
oÊ_îr


489 
	$oÊ_°ru˘s_Êow_°©s_u≈ack
(
oÂ_Êow_°©s
 *
§c
, 
uöt8_t
 *
buf
, 
size_t
 *
Àn
, 
oÊ_Êow_°©s
 **
d°
, 
oÊ_exp
 *
exp
) {

490 
oÊ_Êow_°©s
 *
s
;

491 
oÂ_ö°ru˘i⁄
 *
ö°
;

492 
oÊ_îr
 
îr‹
;

493 
size_t
 
¶í
;

494 
size_t
 
i
;

495 
m©ch_pos
;

496 i‡(*
Àn
 < ( ((
oÂ_Êow_°©s
Ë- (
oÂ_m©ch
)Ë+ 
	`ROUND_UP
(
	`¡ohs
(
§c
->
m©ch
.
Àngth
),8))) {

497 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived flow sèt†ha†övÆidÜígth (%zu).", *
Àn
);

498  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

501 i‡(*
Àn
 < 
	`¡ohs
(
§c
->
Àngth
)) {

502 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived flow sèt†ª∂y ha†övÆidÜígth (£àtÿ%u, buà⁄ly %zuÑe˚ived).", 
	`¡ohs
(
§c
->
Àngth
), *
Àn
);

503  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

506 i‡(
§c
->
èbÀ_id
 >
PIPELINE_TABLES
) {

507 i‡(
	`OFL_LOG_IS_WARN_ENABLED
(
LOG_MODULE
)) {

508 *
ts
 = 
	`oÊ_èbÀ_to_°rög
(
§c
->
èbÀ_id
);

509 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived flow sèt†ha†övÆidÅabÀ_id (%s).", 
ts
);

510 
	`‰ì
(
ts
);

512  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_TABLE_ID
);

515 
¶í
 = 
	`¡ohs
(
§c
->
Àngth
Ë- ((
oÂ_Êow_°©s
Ë- (
oÂ_m©ch
));

517 
s
 = (
oÊ_Êow_°©s
 *)
	`mÆloc
((ofl_flow_stats));

518 
s
->
èbÀ_id
 = 
§c
->table_id;

519 
s
->
duøti⁄_£c
 = 
	`¡ohl
–
§c
->duration_sec);

520 
s
->
duøti⁄_n£c
 = 
	`¡ohl
–
§c
->duration_nsec);

521 
s
->
¥i‹ôy
 = 
	`¡ohs
–
§c
->priority);

522 
s
->
idÀ_timeout
 = 
	`¡ohs
–
§c
->idle_timeout);

523 
s
->
h¨d_timeout
 = 
	`¡ohs
–
§c
->hard_timeout);

524 
s
->
cookõ
 = 
	`¡oh64
(
§c
->cookie);

525 
s
->
∑ckë_cou¡
 = 
	`¡oh64
(
§c
->packet_count);

526 
s
->
byã_cou¡
 = 
	`¡oh64
(
§c
->byte_count);

528 
m©ch_pos
 = (
oÂ_Êow_°©s
) - 4;

531 
îr‹
 = 
	`oÊ_°ru˘s_m©ch_u≈ack
(&(
§c
->
m©ch
),
buf
 + 
m©ch_pos
 , &
¶í
, &(
s
->m©ch), 
exp
);

532 i‡(
îr‹
) {

533 
	`‰ì
(
s
);

534  
îr‹
;

536 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_ö°ru˘i⁄s
((
oÂ_ö°ru˘i⁄
 *Ë(
buf
 + 
	`ROUND_UP
(
m©ch_pos
 + 
s
->
m©ch
->
Àngth
,8)),

537 
¶í
, &
s
->
ö°ru˘i⁄s_num
);

539 i‡(
îr‹
) {

540 
	`oÊ_°ru˘s_‰ì_m©ch
(
s
->
m©ch
, 
exp
);

541 
	`‰ì
(
s
);

542  
îr‹
;

544 
s
->
ö°ru˘i⁄s
 = (
oÊ_ö°ru˘i⁄_hódî
 **)
	`mÆloc
(s->
ö°ru˘i⁄s_num
 * (ofl_instruction_header *));

546 
ö°
 = (
oÂ_ö°ru˘i⁄
 *Ë(
buf
 + 
	`ROUND_UP
(
m©ch_pos
 + 
s
->
m©ch
->
Àngth
,8));

547 
i
 = 0; i < 
s
->
ö°ru˘i⁄s_num
; i++) {

548 
îr‹
 = 
	`oÊ_°ru˘s_ö°ru˘i⁄s_u≈ack
(
ö°
, &
¶í
, &(
s
->
ö°ru˘i⁄s
[
i
]), 
exp
);

549 i‡(
îr‹
) {

550 
	`OFL_UTILS_FREE_ARR_FUN2
(
s
->
ö°ru˘i⁄s
, 
i
,

551 
oÊ_°ru˘s_‰ì_ö°ru˘i⁄
, 
exp
);

552 
	`‰ì
(
s
);

553  
îr‹
;

555 
ö°
 = (
oÂ_ö°ru˘i⁄
 *)((
uöt8_t
 *)ö° + 
	`¡ohs
(ö°->
Àn
));

558 i‡(
¶í
 != 0) {

559 *
Àn
 = *À¿- 
	`¡ohs
(
§c
->
Àngth
Ë+ 
¶í
;

560 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Thêª˚ived flow sèt†c⁄èöedÉxå®byã†(%zu).", 
¶í
);

561 
	`oÊ_°ru˘s_‰ì_Êow_°©s
(
s
, 
exp
);

562  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

564 *
Àn
 -
	`¡ohs
(
§c
->
Àngth
);

565 *
d°
 = 
s
;

567 
	}
}

570 
oÊ_îr


571 
	$oÊ_°ru˘s_group_°©s_u≈ack
(
oÂ_group_°©s
 *
§c
, 
size_t
 *
Àn
, 
oÊ_group_°©s
 **
d°
) {

572 
oÊ_group_°©s
 *
s
;

573 
oÂ_buckë_cou¡î
 *
c
;

574 
oÊ_îr
 
îr‹
;

575 
size_t
 
¶í
;

576 
size_t
 
i
;

578 i‡(*
Àn
 < (
oÂ_group_°©s
)) {

579 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived grou∞des¯°©†ª∂y i†toÿsh‹à(%zu).", *
Àn
);

580  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

583 i‡(*
Àn
 < 
	`¡ohs
(
§c
->
Àngth
)) {

584 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived grou∞°©†ª∂y ha†övÆidÜígth (£àtÿ%u, buà⁄ly %zuÑe˚ived).", 
	`¡ohs
(
§c
->
Àngth
), *
Àn
);

585  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

588 i‡(
	`¡ohl
(
§c
->
group_id
Ë> 
OFPG_MAX
) {

589 i‡(
	`OFL_LOG_IS_WARN_ENABLED
(
LOG_MODULE
)) {

590 *
gs
 = 
	`oÊ_group_to_°rög
(
	`¡ohl
(
§c
->
group_id
));

591 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived grou∞°©†ha†övÆid group_id (%s).", 
gs
);

592 
	`‰ì
(
gs
);

594  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBRC_BAD_LEN
);

596 
¶í
 = 
	`¡ohs
(
§c
->
Àngth
Ë- (
oÂ_group_°©s
);

598 
s
 = (
oÊ_group_°©s
 *)
	`mÆloc
((ofl_group_stats));

599 
s
->
group_id
 = 
	`¡ohl
(
§c
->group_id);

600 
s
->
ªf_cou¡
 = 
	`¡ohl
(
§c
->ref_count);

601 
s
->
∑ckë_cou¡
 = 
	`¡oh64
(
§c
->packet_count);

602 
s
->
byã_cou¡
 = 
	`¡oh64
(
§c
->byte_count);

603 
s
->
duøti⁄_£c
 = 
	`ht⁄l
(
§c
->duration_sec);

604 
s
->
duøti⁄_n£c
 = 
	`ht⁄l
(
§c
->duration_nsec);

606 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_buckë_cou¡îs
(
§c
->
buckë_°©s
, 
¶í
, &
s
->
cou¡îs_num
);

607 i‡(
îr‹
) {

608 
	`‰ì
(
s
);

609  
îr‹
;

611 
s
->
cou¡îs
 = (
oÊ_buckë_cou¡î
 **)
	`mÆloc
(s->
cou¡îs_num
 * (ofl_bucket_counter *));

613 
c
 = 
§c
->
buckë_°©s
;

614 
i
 = 0; i < 
s
->
cou¡îs_num
; i++) {

615 
îr‹
 = 
	`oÊ_°ru˘s_buckë_cou¡î_u≈ack
(
c
, &
¶í
, &(
s
->
cou¡îs
[
i
]));

616 i‡(
îr‹
) {

617 
	`OFL_UTILS_FREE_ARR
(
s
->
cou¡îs
, 
i
);

618 
	`‰ì
(
s
);

619  
îr‹
;

621 
c
 = (
oÂ_buckë_cou¡î
 *)((
uöt8_t
 *)c + (ofp_bucket_counter));

624 i‡(
¶í
 != 0) {

625 *
Àn
 = *À¿- 
	`¡ohs
(
§c
->
Àngth
Ë+ 
¶í
;

626 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Thêª˚ived grou∞°©†c⁄èöedÉxå®byã†(%zu).", 
¶í
);

627 
	`oÊ_°ru˘s_‰ì_group_°©s
(
s
);

628  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

631 *
Àn
 -
	`¡ohs
(
§c
->
Àngth
);

632 *
d°
 = 
s
;

634 
	}
}

636 
oÊ_îr


637 
	$oÊ_°ru˘s_mëî_b™d_°©s_u≈ack
(
oÂ_mëî_b™d_°©s
 *
§c
, 
size_t
 *
Àn
, 
oÊ_mëî_b™d_°©s
 **
d°
){

638 
oÊ_mëî_b™d_°©s
 *
p
;

640 i‡(*
Àn
 < (
oÂ_mëî_b™d_°©s
)) {

641 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived mëî b™d sèt†ha†övÆidÜígth (%zu).", *
Àn
);

642  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

644 *
Àn
 -(
oÂ_mëî_b™d_°©s
);

646 
p
 = (
oÊ_mëî_b™d_°©s
 *)
	`mÆloc
((ofl_meter_band_stats));

647 
p
->
∑ckë_b™d_cou¡
 = 
	`¡oh64
(
§c
->packet_band_count);

648 
p
->
byã_b™d_cou¡
 = 
	`¡oh64
(
§c
->byte_band_count);

650 *
d°
 = 
p
;

653 
	}
}

655 
oÊ_îr


656 
	$oÊ_°ru˘s_mëî_°©s_u≈ack
(
oÂ_mëî_°©s
 *
§c
, 
size_t
 *
Àn
, 
oÊ_mëî_°©s
 **
d°
) {

657 
oÊ_mëî_°©s
 *
s
;

658 
oÂ_mëî_b™d_°©s
 *
c
;

659 
oÊ_îr
 
îr‹
;

660 
size_t
 
¶í
;

661 
size_t
 
i
;

663 i‡(*
Àn
 < (
oÂ_mëî_°©s
)) {

664 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived mëî sèt†ª∂y i†toÿsh‹à(%zu).", *
Àn
);

665  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

668 i‡(*
Àn
 < 
	`¡ohs
(
§c
->len)) {

669 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived mëî sèt†ª∂y ha†övÆidÜígth (£àtÿ%u, buà⁄ly %zuÑe˚ived).", 
	`¡ohs
(
§c
->
Àn
), *len);

670  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

673 
¶í
 = 
	`¡ohs
(
§c
->
Àn
Ë- (
oÂ_mëî_°©s
);

675 
s
 = (
oÊ_mëî_°©s
 *Ë
	`mÆloc
((ofl_meter_stats));

676 
s
->
mëî_id
 = 
	`¡ohl
(
§c
->meter_id);

677 
s
->
Àn
 = 
	`¡ohs
(
§c
->len);

679 
s
->
Êow_cou¡
 = 
	`¡ohl
(
§c
->flow_count);

680 
s
->
∑ckë_ö_cou¡
 = 
	`¡oh64
(
§c
->packet_in_count);

681 
s
->
byã_ö_cou¡
 = 
	`¡oh64
(
§c
->byte_in_count);

682 
s
->
duøti⁄_£c
 = 
	`ht⁄l
(
§c
->duration_sec);

683 
s
->
duøti⁄_n£c
 = 
	`ht⁄l
(
§c
->duration_nsec);

685 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_mëî_b™d_°©s
(
§c
->
b™d_°©s
, 
¶í
, &
s
->
mëî_b™ds_num
);

686 i‡(
îr‹
) {

687 
	`‰ì
(
s
);

688  
îr‹
;

690 
s
->
b™d_°©s
 = (
oÊ_mëî_b™d_°©s
 **)
	`mÆloc
(s->
mëî_b™ds_num
 * (ofl_meter_band_stats *));

692 
c
 = 
§c
->
b™d_°©s
;

693 
i
 = 0; i < 
s
->
mëî_b™ds_num
; i++) {

694 
îr‹
 = 
	`oÊ_°ru˘s_mëî_b™d_°©s_u≈ack
(
c
, &
¶í
, &(
s
->
b™d_°©s
[
i
]));

695 i‡(
îr‹
) {

696 
	`OFL_UTILS_FREE_ARR
(
s
->
b™d_°©s
, 
i
);

697 
	`‰ì
(
s
);

698  
îr‹
;

700 
c
 = (
oÂ_mëî_b™d_°©s
 *)((
uöt8_t
 *)c + (ofp_meter_band_stats));

703 i‡(
¶í
 != 0) {

704 *
Àn
 = *À¿- 
	`¡ohs
(
§c
->ÀnË+ 
¶í
;

705 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Thêª˚ived mëî sèt†c⁄èöedÉxå®byã†(%zu).", 
¶í
);

706 
	`oÊ_°ru˘s_‰ì_mëî_°©s
(
s
);

707  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

709 *
Àn
 -
	`¡ohs
(
§c
->len);

710 *
d°
 = 
s
;

712 
	}
}

714 
oÊ_îr


715 
	$oÊ_°ru˘s_mëî_c⁄fig_u≈ack
(
oÂ_mëî_c⁄fig
 *
§c
, 
size_t
 *
Àn
, 
oÊ_mëî_c⁄fig
 **
d°
) {

716 
oÊ_mëî_c⁄fig
 *
s
;

717 
oÂ_mëî_b™d_hódî
 *
b
;

718 
oÊ_îr
 
îr‹
;

719 
size_t
 
¶í
;

720 
size_t
 
i
;

722 i‡(*
Àn
 < (
oÂ_mëî_c⁄fig
)) {

723 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived mëî c⁄figÑïly i†toÿsh‹à(%zu).", *
Àn
);

724  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

727 i‡(*
Àn
 < 
	`¡ohs
(
§c
->
Àngth
)) {

728 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived mëî c⁄figÑïly ha†övÆidÜígth (£àtÿ%u, buà⁄ly %zuÑe˚ived).", 
	`¡ohs
(
§c
->
Àngth
), *
Àn
);

729  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

732 
¶í
 = 
	`¡ohs
(
§c
->
Àngth
Ë- (
oÂ_mëî_c⁄fig
);

734 
s
 = (
oÊ_mëî_c⁄fig
 *Ë
	`mÆloc
((ofl_meter_config));

735 
s
->
mëî_id
 = 
	`¡ohl
(
§c
->meter_id);

736 
s
->
Àngth
 = 
	`¡ohs
(
§c
->length);

738 
s
->
Êags
 = 
	`¡ohs
(
§c
->flags);

740 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_mëî_b™ds
(
§c
->
b™ds
, 
¶í
, &
s
->
mëî_b™ds_num
);

741 i‡(
îr‹
) {

742 
	`‰ì
(
s
);

743  
îr‹
;

745 
s
->
b™ds
 = (
oÊ_mëî_b™d_hódî
 **)
	`mÆloc
(s->
mëî_b™ds_num
 * (ofl_meter_band_header *));

747 
b

§c
->
b™ds
;

748 
i
 = 0; i < 
s
->
mëî_b™ds_num
; i++) {

749 
îr‹
 = 
	`oÊ_°ru˘s_mëî_b™d_u≈ack
(
b
, &
¶í
, &(
s
->
b™ds
[
i
]));

750 i‡(
îr‹
) {

751 
	`OFL_UTILS_FREE_ARR
(
s
->
b™ds
, 
i
);

752 
	`‰ì
(
s
);

753  
îr‹
;

755 
b
 = (
oÂ_mëî_b™d_hódî
 *)((
uöt8_t
 *)b + 
	`¡ohs
(b->
Àn
));

758 i‡(
¶í
 != 0) {

759 *
Àn
 = *À¿- 
	`¡ohs
(
§c
->
Àngth
Ë+ 
¶í
;

760 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Thêª˚ived mëî c⁄fig c⁄èöedÉxå®byã†(%zu).", 
¶í
);

762  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

764 *
Àn
 -
	`¡ohs
(
§c
->
Àngth
);

765 *
d°
 = 
s
;

767 
	}
}

769 
oÊ_îr


770 
	$oÊ_°ru˘s_queue_¥›_u≈ack
(
oÂ_queue_¥›_hódî
 *
§c
, 
size_t
 *
Àn
, 
oÊ_queue_¥›_hódî
 **
d°
) {

772 i‡(*
Àn
 < (
oÂ_a˘i⁄_hódî
)) {

773 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived queuê¥›îty i†toÿsh‹à(%zu).", *
Àn
);

774  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

777 i‡(*
Àn
 < 
	`¡ohs
(
§c
->len)) {

778 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived queuê¥›îty ha†övÆidÜígth (£àtÿ%u, buà⁄ly %zuÑe˚ived).", 
	`¡ohs
(
§c
->
Àn
), *len);

779  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

782 
	`¡ohs
(
§c
->
¥›îty
)) {

783 
OFPQT_MIN_RATE
: {

784 
oÂ_queue_¥›_mö_øã
 *
•
 = (oÂ_queue_¥›_mö_øã *)
§c
;

785 
oÊ_queue_¥›_mö_øã
 *
dp
 = (oÊ_queue_¥›_mö_øã *)
	`mÆloc
((ofl_queue_prop_min_rate));

787 i‡(*
Àn
 < (
oÂ_queue_¥›_mö_øã
)) {

788 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived MIN_RATE queuê¥›îty ha†övÆidÜígth (%zu).", *
Àn
);

789  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBRC_BAD_LEN
);

791 *
Àn
 -(
oÂ_queue_¥›_mö_øã
);

793 
dp
->
øã
 = 
	`¡ohs
(
•
->rate);

795 *
d°
 = (
oÊ_queue_¥›_hódî
 *)
dp
;

798 
OFPQT_MAX_RATE
:{

799 
oÂ_queue_¥›_max_øã
 *
•
 = (oÂ_queue_¥›_max_øã *)
§c
;

800 
oÊ_queue_¥›_max_øã
 *
dp
 = (oÊ_queue_¥›_max_øã *)
	`mÆloc
((ofl_queue_prop_max_rate));

802 i‡(*
Àn
 < (
oÂ_queue_¥›_max_øã
)) {

803 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived MAX_RATE queuê¥›îty ha†övÆidÜígth (%zu).", *
Àn
);

804  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBRC_BAD_LEN
);

806 *
Àn
 -(
oÂ_queue_¥›_max_øã
);

807 
dp
->
øã
 = 
	`¡ohs
(
•
->rate);

809 *
d°
 = (
oÊ_queue_¥›_hódî
 *)
dp
;

813 
OFPQT_EXPERIMENTER
:{

814 
oÂ_queue_¥›_ex≥rimíãr
 *
•
 = (oÂ_queue_¥›_ex≥rimíã∏*)
§c
;

815 
oÊ_queue_¥›_ex≥rimíãr
 *
dp
 = (oÊ_queue_¥›_ex≥rimíã∏*)
	`mÆloc
((ofl_queue_prop_experimenter));

817 i‡(*
Àn
 < (
oÂ_queue_¥›_ex≥rimíãr
)) {

818 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived EXPERIMENTER queuê¥›îty ha†övÆidÜígth (%zu).", *
Àn
);

819  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBRC_BAD_LEN
);

821 *
Àn
 -(
oÂ_queue_¥›_ex≥rimíãr
);

822 
dp
->
d©a
 = 
•
->data;

824 *
d°
 = (
oÊ_queue_¥›_hódî
 *)
dp
;

829 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received unknown queueÖropÅype.");

830  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBRC_BAD_LEN
);

834 (*
d°
)->
ty≥
 = (
oÂ_queue_¥›îtõs
)
	`¡ohs
(
§c
->
¥›îty
);

836 
	}
}

839 
oÊ_îr


840 
	$oÊ_°ru˘s_∑ckë_queue_u≈ack
(
oÂ_∑ckë_queue
 *
§c
, 
size_t
 *
Àn
, 
oÊ_∑ckë_queue
 **
d°
) {

841 
oÊ_∑ckë_queue
 *
q
;

842 
oÂ_queue_¥›_hódî
 *
¥›
;

843 
oÊ_îr
 
îr‹
;

844 
size_t
 
i
;

846 i‡(*
Àn
 < 
	`¡ohs
(
§c
->len)) {

847 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ivedÖackë queuêha†övÆidÜígth (%zu).", *
Àn
);

848  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBRC_BAD_LEN
);

850 *
Àn
 -(
oÂ_∑ckë_queue
);

852 
q
 = (
oÊ_∑ckë_queue
 *)
	`mÆloc
((ofl_packet_queue));

853 
q
->
queue_id
 = 
	`¡ohl
(
§c
->queue_id);

855 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_queue_¥›s
((
uöt8_t
 *)
§c
->
¥›îtõs
, *
Àn
, &
q
->
¥›îtõs_num
);

856 i‡(
îr‹
) {

857 
	`‰ì
(
q
);

858  
îr‹
;

860 
q
->
¥›îtõs
 = (
oÊ_queue_¥›_hódî
 **)
	`mÆloc
(q->
¥›îtõs_num
 * (ofl_queue_prop_header *));

862 
¥›
 = 
§c
->
¥›îtõs
;

863 
i
 = 0; i < 
q
->
¥›îtõs_num
; i++) {

864 
	`oÊ_°ru˘s_queue_¥›_u≈ack
(
¥›
, 
Àn
, &(
q
->
¥›îtõs
[
i
]));

865 
¥›
 = (
oÂ_queue_¥›_hódî
 *)((
uöt8_t
 *Ìr› + 
	`¡ohs
’r›->
Àn
));

868 *
d°
 = 
q
;

870 
	}
}

873 
oÊ_îr


874 
	$oÊ_°ru˘s_p‹t_u≈ack
(
oÂ_p‹t
 *
§c
, 
size_t
 *
Àn
, 
oÊ_p‹t
 **
d°
) {

875 
oÊ_p‹t
 *
p
;

877 i‡(*
Àn
 < (
oÂ_p‹t
)) {

878 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ivedÖ‹àha†övÆidÜígth (%zu).", *
Àn
);

879  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBRC_BAD_LEN
);

882 i‡(
	`¡ohl
(
§c
->
p‹t_no
) == 0 ||

883 (
	`¡ohl
(
§c
->
p‹t_no
Ë> 
OFPP_MAX
 &&Çtohl(§c->p‹t_noË!
OFPP_LOCAL
)) {

884 i‡(
	`OFL_LOG_IS_WARN_ENABLED
(
LOG_MODULE
)) {

885 *
ps
 = 
	`oÊ_p‹t_to_°rög
(
	`¡ohl
(
§c
->
p‹t_no
));

886 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ivedÖ‹àha†övÆidÖ‹t_id (%s).", 
ps
);

887 
	`‰ì
(
ps
);

889  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBRC_BAD_LEN
);

891 *
Àn
 -(
oÂ_p‹t
);

892 
p
 = (
oÊ_p‹t
 *)
	`mÆloc
((ofl_port));

894 
p
->
p‹t_no
 = 
	`¡ohl
(
§c
->port_no);

895 
	`mem˝y
(
p
->
hw_addr
, 
§c
->hw_addr, 
ETH_ADDR_LEN
);

896 
p
->
«me
 = 
	`°r˝y
((*)
	`mÆloc
(
	`°æí
(
§c
->name) + 1), src->name);

897 
p
->
c⁄fig
 = 
	`¡ohl
(
§c
->config);

898 
p
->
°©e
 = 
	`¡ohl
(
§c
->state);

899 
p
->
cuº
 = 
	`¡ohl
(
§c
->curr);

900 
p
->
advîti£d
 = 
	`¡ohl
(
§c
->advertised);

901 
p
->
suµ‹ãd
 = 
	`¡ohl
(
§c
->supported);

902 
p
->
≥î
 = 
	`¡ohl
(
§c
->peer);

903 
p
->
cuº_•ìd
 = 
	`¡ohl
(
§c
->curr_speed);

904 
p
->
max_•ìd
 = 
	`¡ohl
(
§c
->max_speed);

906 *
d°
 = 
p
;

908 
	}
}

912 
oÊ_îr


913 
	$oÊ_°ru˘s_èbÀ_°©s_u≈ack
(
oÂ_èbÀ_°©s
 *
§c
, 
size_t
 *
Àn
, 
oÊ_èbÀ_°©s
 **
d°
) {

914 
oÊ_èbÀ_°©s
 *
p
;

916 i‡(*
Àn
 < (
oÂ_èbÀ_°©s
)) {

917 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ivedÅabÀ sèt†ha†övÆidÜígth (%zu).", *
Àn
);

918  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBRC_BAD_LEN
);

921 i‡(
§c
->
èbÀ_id
 == 0xff) {

922 i‡(
	`OFL_LOG_IS_WARN_ENABLED
(
LOG_MODULE
)) {

923 *
ts
 = 
	`oÊ_èbÀ_to_°rög
(
§c
->
èbÀ_id
);

924 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ivedÅabÀ sèt†ha†övÆidÅabÀ_id (%s).", 
ts
);

925 
	`‰ì
(
ts
);

927  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBRC_BAD_LEN
);

929 *
Àn
 -(
oÂ_èbÀ_°©s
);

931 
p
 = (
oÊ_èbÀ_°©s
 *)
	`mÆloc
((ofl_table_stats));

932 
p
->
èbÀ_id
 = 
§c
->table_id;

933 
p
->
a˘ive_cou¡
 = 
	`¡ohl
(
§c
->active_count);

934 
p
->
lookup_cou¡
 = 
	`¡oh64
(
§c
->lookup_count);

935 
p
->
m©ched_cou¡
 = 
	`¡oh64
(
§c
->matched_count);

937 *
d°
 = 
p
;

939 
	}
}

941 
oÊ_îr


942 
	$oÊ_°ru˘s_p‹t_°©s_u≈ack
(
oÂ_p‹t_°©s
 *
§c
, 
size_t
 *
Àn
, 
oÊ_p‹t_°©s
 **
d°
) {

943 
oÊ_p‹t_°©s
 *
p
;

945 i‡(*
Àn
 < (
oÂ_p‹t_°©s
)) {

946 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ivedÖ‹à°©†ha†övÆidÜígth (%zu).", *
Àn
);

947  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBRC_BAD_LEN
);

949 i‡(
	`¡ohl
(
§c
->
p‹t_no
) == 0 ||

950 (
	`¡ohl
(
§c
->
p‹t_no
Ë> 
OFPP_MAX
 &&Çtohl(§c->p‹t_noË!
OFPP_LOCAL
)) {

951 i‡(
	`OFL_LOG_IS_WARN_ENABLED
(
LOG_MODULE
)) {

952 *
ps
 = 
	`oÊ_p‹t_to_°rög
(
	`¡ohl
(
§c
->
p‹t_no
));

953 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ivedÖ‹à°©†ha†övÆidÖ‹t_id (%s).", 
ps
);

954 
	`‰ì
(
ps
);

956  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBRC_BAD_LEN
);

958 *
Àn
 -(
oÂ_p‹t_°©s
);

960 
p
 = (
oÊ_p‹t_°©s
 *)
	`mÆloc
((ofl_port_stats));

962 
p
->
p‹t_no
 = 
	`¡ohl
(
§c
->port_no);

963 
p
->
rx_∑ckës
 = 
	`¡oh64
(
§c
->rx_packets);

964 
p
->
tx_∑ckës
 = 
	`¡oh64
(
§c
->tx_packets);

965 
p
->
rx_byãs
 = 
	`¡oh64
(
§c
->rx_bytes);

966 
p
->
tx_byãs
 = 
	`¡oh64
(
§c
->tx_bytes);

967 
p
->
rx_dr›≥d
 = 
	`¡oh64
(
§c
->rx_dropped);

968 
p
->
tx_dr›≥d
 = 
	`¡oh64
(
§c
->tx_dropped);

969 
p
->
rx_îr‹s
 = 
	`¡oh64
(
§c
->rx_errors);

970 
p
->
tx_îr‹s
 = 
	`¡oh64
(
§c
->tx_errors);

971 
p
->
rx_‰ame_îr
 = 
	`¡oh64
(
§c
->rx_frame_err);

972 
p
->
rx_ovî_îr
 = 
	`¡oh64
(
§c
->rx_over_err);

973 
p
->
rx_¸c_îr
 = 
	`¡oh64
(
§c
->rx_crc_err);

974 
p
->
cﬁlisi⁄s
 = 
	`¡oh64
(
§c
->collisions);

975 
p
->
duøti⁄_£c
 = 
	`¡ohl
(
§c
->duration_sec);

976 
p
->
duøti⁄_n£c
 = 
	`¡ohl
(
§c
->duration_nsec);

977 *
d°
 = 
p
;

979 
	}
}

981 
oÊ_îr


982 
	$oÊ_°ru˘s_queue_°©s_u≈ack
(
oÂ_queue_°©s
 *
§c
, 
size_t
 *
Àn
, 
oÊ_queue_°©s
 **
d°
) {

983 
oÊ_queue_°©s
 *
p
;

985 i‡(*
Àn
 < (
oÂ_queue_°©s
)) {

986 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived queuê°©†ha†övÆidÜígth (%zu).", *
Àn
);

987  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

990 i‡(
	`¡ohl
(
§c
->
p‹t_no
Ë=0 ||Çtohl(§c->p‹t_noË> 
OFPP_MAX
) {

991 i‡(
	`OFL_LOG_IS_WARN_ENABLED
(
LOG_MODULE
)) {

992 *
ps
 = 
	`oÊ_p‹t_to_°rög
(
	`¡ohl
(
§c
->
p‹t_no
));

993 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived queuê°©†ha†övÆidÖ‹t_id (%s).", 
ps
);

994 
	`‰ì
(
ps
);

996  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBRC_BAD_LEN
);

998 *
Àn
 -(
oÂ_queue_°©s
);

1000 
p
 = (
oÊ_queue_°©s
 *)
	`mÆloc
((ofl_queue_stats));

1002 
p
->
p‹t_no
 = 
	`¡ohl
(
§c
->port_no);

1003 
p
->
queue_id
 = 
	`¡ohl
(
§c
->queue_id);

1004 
p
->
tx_byãs
 = 
	`¡oh64
(
§c
->tx_bytes);

1005 
p
->
tx_∑ckës
 = 
	`¡oh64
(
§c
->tx_packets);

1006 
p
->
tx_îr‹s
 = 
	`¡oh64
(
§c
->tx_errors);

1007 
p
->
duøti⁄_£c
 = 
	`¡ohl
(
§c
->duration_sec);

1008 
p
->
duøti⁄_n£c
 = 
	`¡ohl
(
§c
->duration_nsec);

1009 *
d°
 = 
p
;

1011 
	}
}

1013 
oÊ_îr


1014 
	$oÊ_°ru˘s_group_desc_°©s_u≈ack
(
oÂ_group_desc_°©s
 *
§c
, 
size_t
 *
Àn
, 
oÊ_group_desc_°©s
 **
d°
, 
oÊ_exp
 *
exp
) {

1015 
oÊ_group_desc_°©s
 *
dm
;

1016 
oÂ_buckë
 *
buckë
;

1017 
oÊ_îr
 
îr‹
;

1018 
size_t
 
dÀn
;

1019 
size_t
 
i
;

1021 i‡(*
Àn
 < (
oÂ_group_desc_°©s
)) {

1022 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived grou∞des¯°©†ª∂y i†toÿsh‹à(%zu).", *
Àn
);

1023  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

1026 i‡(*
Àn
 < 
	`¡ohs
(
§c
->
Àngth
)) {

1027 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived grou∞des¯°©†ª∂y ha†övÆidÜígth (£àtÿ%u, buà⁄ly %zuÑe˚ived).", 
	`¡ohs
(
§c
->
Àngth
), *
Àn
);

1028  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

1031 i‡(
	`¡ohl
(
§c
->
group_id
Ë> 
OFPG_MAX
) {

1032 i‡(
	`OFL_LOG_IS_WARN_ENABLED
(
LOG_MODULE
)) {

1033 *
gs
 = 
	`oÊ_group_to_°rög
(
	`¡ohl
(
§c
->
group_id
));

1034 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived grou∞des¯°©†ha†övÆid group_id (%s).", 
gs
);

1035 
	`‰ì
(
gs
);

1037  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

1039 
dÀn
 = 
	`¡ohs
(
§c
->
Àngth
Ë- (
oÂ_group_desc_°©s
);

1041 
dm
 = (
oÊ_group_desc_°©s
 *)
	`mÆloc
((ofl_group_desc_stats));

1043 
dm
->
ty≥
 = 
§c
->type;

1044 
dm
->
group_id
 = 
	`¡ohl
(
§c
->group_id);

1046 
îr‹
 = 
	`oÊ_utûs_cou¡_oÂ_buckës
(
§c
->
buckës
, 
dÀn
, &
dm
->
buckës_num
);

1047 i‡(
îr‹
) {

1048 
	`‰ì
(
dm
);

1049  
îr‹
;

1051 
dm
->
buckës
 = (
oÊ_buckë
 **)
	`mÆloc
(dm->
buckës_num
 * (ofl_bucket *));

1053 
buckë
 = 
§c
->
buckës
;

1054 
i
 = 0; i < 
dm
->
buckës_num
; i++) {

1055 
îr‹
 = 
	`oÊ_°ru˘s_buckë_u≈ack
(
buckë
, &
dÀn
, 
dm
->
ty≥
, &(dm->
buckës
[
i
]), 
exp
);

1056 i‡(
îr‹
) {

1057 
	`OFL_UTILS_FREE_ARR_FUN2
(
dm
->
buckës
, 
i
,

1058 
oÊ_°ru˘s_‰ì_buckë
, 
exp
);

1059 
	`‰ì
 (
dm
);

1060  
îr‹
;

1062 
buckë
 = (
oÂ_buckë
 *)((
uöt8_t
 *)buckë + 
	`¡ohs
(buckë->
Àn
));

1065 i‡(
dÀn
 != 0) {

1066 *
Àn
 = *À¿- 
	`¡ohs
(
§c
->
Àngth
Ë+ 
dÀn
;

1067 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Thêª˚ived grou∞des¯°©†c⁄èöedÉxå®byã†(%zu).", 
dÀn
);

1068 
	`oÊ_°ru˘s_‰ì_group_desc_°©s
(
dm
, 
exp
);

1069  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

1072 *
Àn
 -
	`¡ohs
(
§c
->
Àngth
);

1073 *
d°
 = 
dm
;

1075 
	}
}

1077 
oÊ_îr


1078 
	$oÊ_°ru˘s_buckë_cou¡î_u≈ack
(
oÂ_buckë_cou¡î
 *
§c
, 
size_t
 *
Àn
, 
oÊ_buckë_cou¡î
 **
d°
) {

1079 
oÊ_buckë_cou¡î
 *
p
;

1081 i‡(*
Àn
 < (
oÂ_buckë_cou¡î
)) {

1082 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived buckë cou¡î ha†övÆidÜígth (%zu).", *
Àn
);

1083  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

1085 *
Àn
 -(
oÂ_buckë_cou¡î
);

1087 
p
 = (
oÊ_buckë_cou¡î
 *)
	`mÆloc
((ofl_bucket_counter));

1088 
p
->
∑ckë_cou¡
 = 
	`¡oh64
(
§c
->packet_count);

1089 
p
->
byã_cou¡
 = 
	`¡oh64
(
§c
->byte_count);

1091 *
d°
 = 
p
;

1093 
	}
}

1095 
oÊ_îr


1096 
	$oÊ_°ru˘s_mëî_b™d_u≈ack
(
oÂ_mëî_b™d_hódî
 *
§c
, 
size_t
 *
Àn
, 
oÊ_mëî_b™d_hódî
 **
d°
){

1097 
oÊ_mëî_b™d_hódî
 *
mb
;

1099 if(*
Àn
 < (
oÂ_mëî_b™d_hódî
)){

1100 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived mëî b™d i†toÿsh‹à(%zu).", *
Àn
);

1101  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

1103 
	`¡ohs
(
§c
->
ty≥
)){

1104 
OFPMBT_DROP
:{

1105 
oÊ_mëî_b™d_dr›
 *
b
 = (oÊ_mëî_b™d_dr› *)
	`mÆloc
((ofl_meter_band_drop));

1106 
b
->
ty≥
 = 
	`¡ohs
(
§c
->type);

1107 
b
->
øã
 = 
	`¡ohl
(
§c
->rate);

1108 
b
->
bur°_size
 = 
	`¡ohl
(
§c
->burst_size);

1109 
mb
 = (
oÊ_mëî_b™d_hódî
 *)
b
;

1110 *
d°
 = 
mb
;

1113 
OFPMBT_DSCP_REMARK
:{

1114 
oÊ_mëî_b™d_ds˝_ªm¨k
 *
b
 = (oÊ_mëî_b™d_ds˝_ªm¨k *)
	`mÆloc
((ofl_meter_band_dscp_remark));

1115 
oÂ_mëî_b™d_ds˝_ªm¨k
 *
s
 = (oÂ_mëî_b™d_ds˝_ªm¨k*)
§c
;

1116 
b
->
ty≥
 = 
	`¡ohs
(
s
->type);

1117 
b
->
øã
 = 
	`¡ohl
(
s
->rate);

1118 
b
->
bur°_size
 = 
	`¡ohl
(
s
->burst_size);

1119 
b
->
¥ec_Àvñ
 = 
s
->prec_level;

1120 
mb
 = (
oÊ_mëî_b™d_hódî
 *)
b
;

1121 *
d°
 = 
mb
;

1124 
OFPMBT_EXPERIMENTER
:{

1125 
oÊ_mëî_b™d_ex≥rimíãr
 *
b
 = (oÊ_mëî_b™d_ex≥rimíã∏*)
	`mÆloc
((ofl_meter_band_experimenter));

1126 
oÂ_mëî_b™d_ex≥rimíãr
 *
s
 = (oÂ_mëî_b™d_ex≥rimíãr*Ë
§c
;

1127 
b
->
ty≥
 = 
	`¡ohs
(
s
->type);

1128 
b
->
øã
 = 
	`¡ohl
(
s
->rate);

1129 
b
->
bur°_size
 = 
	`¡ohl
(
s
->burst_size);

1130 
b
->
ex≥rimíãr
 = 
	`¡ohl
(
s
->experimenter);

1131 
mb
 = (
oÊ_mëî_b™d_hódî
 *)
b
;

1132 *
d°
 = 
mb
;

1136 *
Àn
 -
	`¡ohs
(
§c
->len);

1138 
	}
}

1142 
oÊ_îr


1143 
	$oÊ_°ru˘s_oxm_m©ch_u≈ack
(
oÂ_m©ch
* 
§c
, 
uöt8_t
* 
buf
, 
size_t
 *
Àn
, 
oÊ_m©ch
 **
d°
){

1145 
îr‹
 = 0;

1146 
oÂbuf
 *
b
 = 
	`oÂbuf_√w
(0);

1147 
oÊ_m©ch
 *
m
 = (oÊ_m©ch *Ë
	`mÆloc
((ofl_match));

1149 *
Àn
 -
	`ROUND_UP
(
	`¡ohs
(
§c
->
Àngth
),8);

1150 if(
	`¡ohs
(
§c
->
Àngth
Ë> (
oÂ_m©ch
)){

1152 
	`oÂbuf_put
(
b
, 
buf
, 
	`¡ohs
(
§c
->
Àngth
Ë- ((
oÂ_m©ch
) -4));

1155 
îr‹
 = 
	`oxm_puŒ_m©ch
(
b
, 
m
, 
	`¡ohs
(
§c
->
Àngth
Ë- ((
oÂ_m©ch
) -4));

1157 
m
->
hódî
.
Àngth
 = 
	`¡ohs
(
§c
->length) - 4;

1162 
m
->
hódî
.
Àngth
 = 0;

1163 
m
->
hódî
.
ty≥
 = 
	`¡ohs
(
§c
->type);

1164 
m
->
m©ch_fõlds
 = (
hm≠
Ë
	`HMAP_INITIALIZER
(&m->match_fields);

1166 
	`oÂbuf_dñëe
(
b
);

1167 *
d°
 = 
m
;

1168  
îr‹
;

1169 
	}
}

1267 
oÊ_îr


1268 
	$oÊ_°ru˘s_m©ch_u≈ack
(
oÂ_m©ch
 *
§c
,
uöt8_t
 * 
buf
, 
size_t
 *
Àn
, 
oÊ_m©ch_hódî
 **
d°
, 
oÊ_exp
 *
exp
) {

1270 
	`¡ohs
(
§c
->
ty≥
)) {

1271 (
OFPMT_OXM
): {

1273  
	`oÊ_°ru˘s_oxm_m©ch_u≈ack
(
§c
, 
buf
, 
Àn
, (
oÊ_m©ch
**Ë
d°
 );

1283 i‡(
exp
 =
NULL
 ||Éxp->
m©ch
 =NULL ||Éxp->m©ch->
u≈ack
 == NULL) {

1284 
	`OFL_LOG_WARN
(
LOG_MODULE
, "I have been called!");

1285 
	`OFL_LOG_WARN
(
LOG_MODULE
, "I have been called!");

1286 
	`OFL_LOG_WARN
(
LOG_MODULE
, "I have been called!");

1287 
	`OFL_LOG_WARN
(
LOG_MODULE
, "SëtögÜókÜoggög fûêsizêlimôÅÿ%"
PRIdMAX
" byãs", 
§c
->
ty≥
);

1288 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received match isÉxperimental, butÇo callback was given.");

1289  
	`oÊ_îr‹
(
OFPET_BAD_MATCH
, 
OFPBMC_BAD_TYPE
);

1291  
exp
->
m©ch
->
	`u≈ack
(
§c
, 
Àn
, 
d°
);

1294 
	}
}

	@oflib/ofl-structs.c

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<√töë/ö.h
>

35 
	~"oÊ.h
"

36 
	~"oÊ-°ru˘s.h
"

37 
	~"oÊ-a˘i⁄s.h
"

38 
	~"oÊ-utûs.h
"

39 
	~"oÊ-log.h
"

40 
	~"hm≠.h
"

41 
	~"›íÊow/›íÊow.h
"

43 
	#UNUSED
 
	`__©åibuã__
((
__unu£d__
))

	)

45 
	#LOG_MODULE
 
oÊ_°r


	)

46 
	$OFL_LOG_INIT
(
LOG_MODULE
)

48 
oÊ_îr


49 
	$oÊ_utûs_cou¡_oÂ_èbÀ_„©uªs_¥›îtõs
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
){

51 
oÂ_èbÀ_„©uª_¥›_hódî
 *
¥›
;

52 
uöt8_t
 *
d
;

54 
d
 = (
uöt8_t
*Ë
d©a
;

55 *
cou¡
 = 0;

56 
d©a_Àn
 >(
oÂ_èbÀ_„©uª_¥›_hódî
)){

57 
¥›
 = (
oÂ_èbÀ_„©uª_¥›_hódî
 *Ë
d
;

58 i‡(
d©a_Àn
 < 
	`¡ohs
(
¥›
->
Àngth
Ë||Çtohs’r›->ÀngthË< (
oÂ_èbÀ_„©uª_¥›_hódî
) ){

59 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ivedÖr›îty ha†övÆidÜígth (¥›->Àngth=%d, d©a_Àn=%d).", 
	`¡ohs
(
¥›
->
Àngth
), (Ë
d©a_Àn
);

60  
	`oÊ_îr‹
(
OFPET_TABLE_FEATURES_FAILED
, 
OFPTFFC_BAD_LEN
);

62 
d©a_Àn
 -
	`ROUND_UP
(
	`¡ohs
(
¥›
->
Àngth
), 8);

63 
d
 +
	`ROUND_UP
(
	`¡ohs
(
¥›
->
Àngth
), 8);

64 (*
cou¡
)++;

67 
	}
}

69 
oÊ_îr


70 
	$oÊ_utûs_cou¡_oÂ_èbÀ_„©uªs
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
){

71 
oÂ_èbÀ_„©uªs
 *
„©uª
;

72 
uöt8_t
 *
d
;

74 
d
 = (
uöt8_t
*Ë
d©a
;

75 *
cou¡
 = 0;

76 
d©a_Àn
 >(
oÂ_èbÀ_„©uªs
)){

77 
„©uª
 = (
oÂ_èbÀ_„©uªs
 *Ë
d
;

78 i‡(
d©a_Àn
 < 
	`¡ohs
(
„©uª
->
Àngth
Ë||Çtohs(„©uª->ÀngthË< (
oÂ_èbÀ_„©uªs
) ){

79 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Re˚ived fótuª ha†övÆidÜígth („©->Àngth=%d, d©a_Àn=%d).", 
	`¡ohs
(
„©uª
->
Àngth
), (Ë
d©a_Àn
);

80  
	`oÊ_îr‹
(
OFPET_TABLE_FEATURES_FAILED
, 
OFPTFFC_BAD_LEN
);

82 
d©a_Àn
 -
	`¡ohs
(
„©uª
->
Àngth
);

83 
d
 +
	`¡ohs
(
„©uª
->
Àngth
);

84 (*
cou¡
)++;

87 
	}
}

91 
oÊ_îr


92 
	$oÊ_utûs_cou¡_oÂ_ö°ru˘i⁄s
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
) {

93 
oÂ_ö°ru˘i⁄
 *
ö°
;

94 
uöt8_t
 *
d
;

96 
d
 = (
uöt8_t
 *)
d©a
;

97 *
cou¡
 = 0;

99 
d©a_Àn
 >(
oÂ_ö°ru˘i⁄
)- 4) {

100 
ö°
 = (
oÂ_ö°ru˘i⁄
 *)
d
;

101 i‡(
d©a_Àn
 < 
	`¡ohs
(
ö°
->
Àn
Ë||Çtohs(ö°->ÀnË< (
oÂ_ö°ru˘i⁄
) - 4) {

102 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Eº‹ h≠≥n†hîê1 (%u).", 
d©a_Àn
);

103 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Eº‹ h≠≥n†hîê2 (%u).", 
	`¡ohs
(
ö°
->
Àn
));

104 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Eº‹ h≠≥n†hîê3 (%u).", 
ö°
->
Àn
);

105 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Eº‹ h≠≥n†hîê4 (%u).", 
	`¡ohs
(
ö°
->
ty≥
));

106 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Eº‹ h≠≥n†hîê5 (%u).", (
oÂ_ö°ru˘i⁄
) - 4);

107 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received instruction has invalidÜength.");

108  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

111 
d©a_Àn
 -
	`¡ohs
(
ö°
->
Àn
);

112 
d
 +
	`¡ohs
(
ö°
->
Àn
);

113 (*
cou¡
)++;

118 
	}
}

121 
oÊ_îr


122 
	$oÊ_utûs_cou¡_oÂ_buckës
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
) {

123 
oÂ_buckë
 *
buckë
;

124 
uöt8_t
 *
d
;

126 
d
 = (
uöt8_t
 *)
d©a
;

127 *
cou¡
 = 0;

129 
d©a_Àn
 >(
oÂ_buckë
)) {

130 
buckë
 = (
oÂ_buckë
 *)
d
;

132 i‡(
d©a_Àn
 < 
	`¡ohs
(
buckë
->
Àn
Ë||Çtohs(buckë->ÀnË< (
oÂ_buckë
)) {

133 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received bucket has invalidÜength.");

134  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

136 
d©a_Àn
 -
	`¡ohs
(
buckë
->
Àn
);

137 
d
 +
	`¡ohs
(
buckë
->
Àn
);

138 (*
cou¡
)++;

142 
	}
}

145 
oÊ_îr


146 
	$oÊ_utûs_cou¡_oÂ_mëî_b™ds
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
) {

147 
oÂ_mëî_b™d_hódî
 *
mb
;

148 
uöt8_t
 *
d
;

150 
d
 = (
uöt8_t
 *)
d©a
;

151 *
cou¡
 = 0;

153 
d©a_Àn
 >(
oÂ_mëî_b™d_hódî
)) {

154 
mb
 = (
oÂ_mëî_b™d_hódî
 *)
d
;

156 i‡(
d©a_Àn
 < 
	`¡ohs
(
mb
->
Àn
Ë||Çtohs(mb->ÀnË< (
oÂ_mëî_b™d_hódî
)) {

157 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received meter band has invalidÜength.");

158  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

160 
d©a_Àn
 -
	`¡ohs
(
mb
->
Àn
);

161 
d
 +
	`¡ohs
(
mb
->
Àn
);

162 (*
cou¡
)++;

166 
	}
}

168 
oÊ_îr


169 
	$oÊ_utûs_cou¡_oÂ_p‹ts
(*
d©a
 
UNUSED
, 
size_t
 
d©a_Àn
, size_à*
cou¡
) {

170 *
cou¡
 = 
d©a_Àn
 / (
oÂ_p‹t
);

172 
	}
}

175 
oÊ_îr


176 
	$oÊ_utûs_cou¡_oÂ_∑ckë_queues
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
) {

177 
oÂ_∑ckë_queue
 *
queue
;

178 
uöt8_t
 *
d
;

180 
d
 = (
uöt8_t
 *)
d©a
;

181 *
cou¡
 = 0;

183 
d©a_Àn
 >(
oÂ_∑ckë_queue
)) {

184 
queue
 = (
oÂ_∑ckë_queue
 *)
d
;

186 i‡(
d©a_Àn
 < 
	`¡ohs
(
queue
->
Àn
Ë||Çtohs(queue->ÀnË< (
oÂ_∑ckë_queue
)) {

187 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received queue has invalidÜength.");

188  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

190 
d©a_Àn
 -
	`¡ohs
(
queue
->
Àn
);

191 
d
 +
	`¡ohs
(
queue
->
Àn
);

192 (*
cou¡
)++;

197 
	}
}

199 
oÊ_îr


200 
	$oÊ_utûs_cou¡_oÂ_Êow_°©s
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
) {

201 
oÂ_Êow_°©s
 *
°©
;

202 
uöt8_t
 *
d
;

204 
d
 = (
uöt8_t
 *)
d©a
;

205 *
cou¡
 = 0;

206 
d©a_Àn
 >(
oÂ_Êow_°©s
)) {

207 
°©
 = (
oÂ_Êow_°©s
 *)
d
;

208 i‡(
d©a_Àn
 < 
	`¡ohs
(
°©
->
Àngth
Ë||Çtohs(°©->ÀngthË< (
oÂ_Êow_°©s
)) {

209 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received flow stat has invalidÜength.");

210  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

212 
d©a_Àn
 -
	`¡ohs
(
°©
->
Àngth
);

213 
d
 +
	`¡ohs
(
°©
->
Àngth
);

214 (*
cou¡
)++;

218 
	}
}

220 
oÊ_îr


221 
	$oÊ_utûs_cou¡_oÂ_group_°©s
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
) {

222 
oÂ_group_°©s
 *
°©
;

223 
uöt8_t
 *
d
;

225 
d
 = (
uöt8_t
 *)
d©a
;

226 *
cou¡
 = 0;

228 
d©a_Àn
 >(
oÂ_group_°©s
)) {

229 
°©
 = (
oÂ_group_°©s
 *)
d
;

231 i‡(
d©a_Àn
 < 
	`¡ohs
(
°©
->
Àngth
Ë||Çtohs(°©->ÀngthË< (
oÂ_group_°©s
)) {

232 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received group stat has invalidÜength.");

233  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

235 
d©a_Àn
 -
	`¡ohs
(
°©
->
Àngth
);

236 
d
 +
	`¡ohs
(
°©
->
Àngth
);

237 (*
cou¡
)++;

241 
	}
}

244 
oÊ_îr


245 
	$oÊ_utûs_cou¡_oÂ_èbÀ_°©s
(*
d©a
 
UNUSED
, 
size_t
 
d©a_Àn
, size_à*
cou¡
) {

246 *
cou¡
 = 
d©a_Àn
 / (
oÂ_èbÀ_°©s
);

249 
	}
}

251 
oÊ_îr


252 
	$oÊ_utûs_cou¡_oÂ_buckë_cou¡îs
(*
d©a
 
UNUSED
, 
size_t
 
d©a_Àn
, size_à*
cou¡
) {

253 *
cou¡
 = 
d©a_Àn
 / (
oÂ_buckë_cou¡î
);

255 
	}
}

257 
oÊ_îr


258 
	$oÊ_utûs_cou¡_oÂ_p‹t_°©s
(*
d©a
 
UNUSED
, 
size_t
 
d©a_Àn
, size_à*
cou¡
) {

259 *
cou¡
 = 
d©a_Àn
 / (
oÂ_p‹t_°©s
);

261 
	}
}

263 
oÊ_îr


264 
	$oÊ_utûs_cou¡_oÂ_queue_°©s
(*
d©a
 
UNUSED
, 
size_t
 
d©a_Àn
, size_à*
cou¡
) {

265 *
cou¡
 = 
d©a_Àn
 / (
oÂ_queue_°©s
);

267 
	}
}

269 
oÊ_îr


270 
	$oÊ_utûs_cou¡_oÂ_group_desc_°©s
(*
d©a
 
UNUSED
, 
size_t
 
d©a_Àn
, size_à*
cou¡
) {

271 
oÂ_group_desc_°©s
 *
°©
;

272 
uöt8_t
 *
d
;

274 
d
 = (
uöt8_t
 *)
d©a
;

275 *
cou¡
 = 0;

277 
d©a_Àn
 >(
oÂ_group_desc_°©s
)) {

278 
°©
 = (
oÂ_group_desc_°©s
 *)
d
;

280 i‡(
d©a_Àn
 < 
	`¡ohs
(
°©
->
Àngth
Ë||Çtohs(°©->ÀngthË< (
oÂ_group_desc_°©s
)) {

281 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received group desc stat has invalidÜength.");

282  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

284 
d©a_Àn
 -
	`¡ohs
(
°©
->
Àngth
);

285 
d
 +
	`¡ohs
(
°©
->
Àngth
);

286 (*
cou¡
)++;

290 
	}
}

292 
oÊ_îr


293 
	$oÊ_utûs_cou¡_oÂ_queue_¥›s
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
) {

294 
oÂ_queue_¥›_hódî
 *
¥›
;

295 
uöt8_t
 *
d
;

297 
d
 = (
uöt8_t
 *)
d©a
;

298 (*
cou¡
) = 0;

300 
d©a_Àn
 >(
oÂ_queue_¥›_hódî
)) {

301 
¥›
 = (
oÂ_queue_¥›_hódî
 *)
d
;

303 i‡(
d©a_Àn
 < 
	`¡ohs
(
¥›
->
Àn
Ë||Çtohs’r›->ÀnË< (
oÂ_queue_¥›_hódî
)) {

304 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received queueÖrop has invalidÜength.");

305  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

307 
d©a_Àn
 -
	`¡ohs
(
¥›
->
Àn
);

308 
d
 +
	`¡ohs
(
¥›
->
Àn
);

309 (*
cou¡
)++;

313 
	}
}

315 
oÊ_îr


316 
	$oÊ_utûs_cou¡_oÂ_mëî_°©s
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
){

317 
oÂ_mëî_°©s
 *
°©s
;

318 
uöt8_t
 *
d
;

320 
d
 = (
uöt8_t
 *)
d©a
;

321 (*
cou¡
) = 0;

323 
d©a_Àn
 >(
oÂ_mëî_°©s
)) {

324 
°©s
 = (
oÂ_mëî_°©s
 *)
d
;

326 i‡(
d©a_Àn
 < 
	`¡ohs
(
°©s
->
Àn
Ë||Çtohs(°©s->ÀnË< (
oÂ_mëî_°©s
)) {

327 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received meter stat has invalidÜength.");

328  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

330 
d©a_Àn
 -
	`¡ohs
(
°©s
->
Àn
);

331 
d
 +
	`¡ohs
(
°©s
->
Àn
);

332 (*
cou¡
)++;

335 
	}
}

337 
oÊ_îr


338 
	$oÊ_utûs_cou¡_oÂ_mëî_b™d_°©s
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
){

339 
uöt8_t
 *
d
;

341 
d
 = (
uöt8_t
 *)
d©a
;

342 (*
cou¡
) = 0;

344 
d©a_Àn
 >(
oÂ_mëî_b™d_°©s
)) {

346 i‡(
d©a_Àn
 < (
oÂ_mëî_b™d_°©s
)) {

347 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received band meter stat has invalidÜength.");

348  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

350 
d©a_Àn
 -(
oÂ_mëî_b™d_°©s
);

351 
d
 +(
oÂ_mëî_b™d_°©s
);

352 (*
cou¡
)++;

355 
	}
}

357 
oÊ_îr


358 
	$oÊ_utûs_cou¡_oÂ_mëî_c⁄fig
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
){

359 
oÂ_mëî_c⁄fig
 *
c⁄fig
;

360 
uöt8_t
 *
d
;

362 
d
 = (
uöt8_t
 *)
d©a
;

363 (*
cou¡
) = 0;

365 
d©a_Àn
 >(
oÂ_mëî_c⁄fig
)) {

366 
c⁄fig
 = (
oÂ_mëî_c⁄fig
 *)
d
;

367 i‡(
d©a_Àn
 < 
	`¡ohs
(
c⁄fig
->
Àngth
Ë||Çtohs(c⁄fig->ÀngthË< (
oÂ_mëî_c⁄fig
)) {

368 
	`OFL_LOG_WARN
(
LOG_MODULE
, "Received meter stat has invalidÜength.");

369  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

371 
d©a_Àn
 -
	`¡ohs
(
c⁄fig
->
Àngth
);

372 
d
 +
	`¡ohs
(
c⁄fig
->
Àngth
);

373 (*
cou¡
)++;

376 
	}
}

379 
	$oÊ_°ru˘s_‰ì_∑ckë_queue
(
oÊ_∑ckë_queue
 *
queue
) {

380 
	`OFL_UTILS_FREE_ARR
(
queue
->
¥›îtõs
, queue->
¥›îtõs_num
);

381 
	`‰ì
(
queue
);

382 
	}
}

385 
	$oÊ_°ru˘s_‰ì_ö°ru˘i⁄
(
oÊ_ö°ru˘i⁄_hódî
 *
ö°
, 
oÊ_exp
 *
exp
) {

386 
ö°
->
ty≥
) {

387 
OFPIT_GOTO_TABLE
:

388 
OFPIT_WRITE_METADATA
:

389 
OFPIT_METER
:

391 
OFPIT_WRITE_ACTIONS
:

392 
OFPIT_APPLY_ACTIONS
: {

393 
oÊ_ö°ru˘i⁄_a˘i⁄s
 *
ü
 = (oÊ_ö°ru˘i⁄_a˘i⁄†*)
ö°
;

394 
	`OFL_UTILS_FREE_ARR_FUN2
(
ü
->
a˘i⁄s
, ia->
a˘i⁄s_num
,

395 
oÊ_a˘i⁄s_‰ì
, 
exp
);

398 
OFPIT_CLEAR_ACTIONS
: {

401 
OFPIT_EXPERIMENTER
: {

402 i‡(
exp
 =
NULL
 ||Éxp->
ö°
 =NULL ||Éxp->ö°->
‰ì
 == NULL) {

403 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅo freeÉxperimented instruction, butÇo callback was given.");

405 
exp
->
ö°
->
	`‰ì
(inst);

410 
	`‰ì
(
ö°
);

411 
	}
}

413 
	$oÊ_°ru˘s_‰ì_mëî_b™ds
(
oÊ_mëî_b™d_hódî
 *
mëî_b™d
){

414 
	`‰ì
(
mëî_b™d
);

415 
	}
}

418 
	$oÊ_°ru˘s_‰ì_mëî_b™d_°©s
(
oÊ_mëî_b™d_°©s
* 
s
){

419 
	`‰ì
(
s
);

420 
	}
}

423 
	$oÊ_°ru˘s_‰ì_mëî_°©s
(
oÊ_mëî_°©s
 *
°©s
){

424 
	`OFL_UTILS_FREE_ARR_FUN
(
°©s
->
b™d_°©s
, sèts->
mëî_b™ds_num
,

425 
oÊ_°ru˘s_‰ì_mëî_b™d_°©s
);

426 
	`‰ì
(
°©s
);

427 
	}
}

430 
	$oÊ_°ru˘s_‰ì_mëî_c⁄fig
(
oÊ_mëî_c⁄fig
 *
c⁄f
){

431 
	`OFL_UTILS_FREE_ARR_FUN
(
c⁄f
->
b™ds
, c⁄f->
mëî_b™ds_num
,

432 
oÊ_°ru˘s_‰ì_mëî_b™ds
);

433 
	`‰ì
(
c⁄f
);

434 
	}
}

437 
	$oÊ_°ru˘s_‰ì_èbÀ_°©s
(
oÊ_èbÀ_°©s
 *
°©s
) {

438 
	`‰ì
(
°©s
);

439 
	}
}

442 
	$oÊ_°ru˘s_‰ì_buckë
(
oÊ_buckë
 *
buckë
, 
oÊ_exp
 *
exp
) {

443 
	`OFL_UTILS_FREE_ARR_FUN2
(
buckë
->
a˘i⁄s
, buckë->
a˘i⁄s_num
,

444 
oÊ_a˘i⁄s_‰ì
, 
exp
);

445 
	`‰ì
(
buckë
);

446 
	}
}

450 
	$oÊ_°ru˘s_‰ì_Êow_°©s
(
oÊ_Êow_°©s
 *
°©s
, 
oÊ_exp
 *
exp
) {

451 
	`OFL_UTILS_FREE_ARR_FUN2
(
°©s
->
ö°ru˘i⁄s
, sèts->
ö°ru˘i⁄s_num
,

452 
oÊ_°ru˘s_‰ì_ö°ru˘i⁄
, 
exp
);

453 
	`oÊ_°ru˘s_‰ì_m©ch
(
°©s
->
m©ch
, 
exp
);

454 
	`‰ì
(
°©s
);

455 
	}
}

458 
	$oÊ_°ru˘s_‰ì_p‹t
(
oÊ_p‹t
 *
p‹t
) {

459 
	`‰ì
(
p‹t
->
«me
);

460 
	`‰ì
(
p‹t
);

461 
	}
}

464 
	$oÊ_°ru˘s_‰ì_group_°©s
(
oÊ_group_°©s
 *
°©s
) {

465 
	`OFL_UTILS_FREE_ARR
(
°©s
->
cou¡îs
, sèts->
cou¡îs_num
);

466 
	`‰ì
(
°©s
);

467 
	}
}

470 
	$oÊ_°ru˘s_‰ì_group_desc_°©s
(
oÊ_group_desc_°©s
 *
°©s
, 
oÊ_exp
 *
exp
) {

471 
	`OFL_UTILS_FREE_ARR_FUN2
(
°©s
->
buckës
, sèts->
buckës_num
,

472 
oÊ_°ru˘s_‰ì_buckë
, 
exp
);

473 
	`‰ì
(
°©s
);

474 
	}
}

477 
	$oÊ_°ru˘s_‰ì_èbÀ_„©uªs
(
oÊ_èbÀ_„©uªs
* 
„©uªs
, 
oÊ_exp
 *
exp
){

478 
	`OFL_UTILS_FREE_ARR_FUN2
(
„©uªs
->
¥›îtõs
, fótuªs->
¥›îtõs_num
,

479 
oÊ_°ru˘s_‰ì_èbÀ_¥›îtõs
, 
exp
);

480 
	`‰ì
(
„©uªs
->
«me
);

481 
	`‰ì
(
„©uªs
);

482 
	}
}

485 
	$oÊ_°ru˘s_‰ì_èbÀ_¥›îtõs
(
oÊ_èbÀ_„©uª_¥›_hódî
 *
¥›
, 
oÊ_exp
 *
exp
 
UNUSED
){

486 
¥›
->
ty≥
){

487 (
OFPTFPT_INSTRUCTIONS
):

488 (
OFPTFPT_INSTRUCTIONS_MISS
):{

489 
oÊ_èbÀ_„©uª_¥›_ö°ru˘i⁄s
 *
ö°
 = (oÊ_èbÀ_„©uª_¥›_ö°ru˘i⁄†*)
¥›
;

490 
	`‰ì
(
ö°
->
ö°ru˘i⁄_ids
);

493 (
OFPTFPT_NEXT_TABLES_MISS
):

494 (
OFPTFPT_NEXT_TABLES
):{

495 
oÊ_èbÀ_„©uª_¥›_√xt_èbÀs
 *
èbÀs
 = (oÊ_èbÀ_„©uª_¥›_√xt_èbÀ†*)
¥›
 ;

496 
	`‰ì
(
èbÀs
->
√xt_èbÀ_ids
);

499 (
OFPTFPT_WRITE_ACTIONS
):

500 (
OFPTFPT_WRITE_ACTIONS_MISS
):

501 (
OFPTFPT_APPLY_ACTIONS
):

502 (
OFPTFPT_APPLY_ACTIONS_MISS
):{

503 
oÊ_èbÀ_„©uª_¥›_a˘i⁄s
 *
a˘
 = (oÊ_èbÀ_„©uª_¥›_a˘i⁄†*)
¥›
;

504 
	`‰ì
(
a˘
->
a˘i⁄_ids
);

507 (
OFPTFPT_APPLY_SETFIELD
):

508 (
OFPTFPT_APPLY_SETFIELD_MISS
):

509 (
OFPTFPT_WRITE_SETFIELD
):

510 (
OFPTFPT_WRITE_SETFIELD_MISS
):

511 (
OFPTFPT_WILDCARDS
):

512 (
OFPTFPT_MATCH
):{

513 
oÊ_èbÀ_„©uª_¥›_oxm
 *
oxm
 = (oÊ_èbÀ_„©uª_¥›_oxm *)
¥›
;

514 
	`‰ì
(
oxm
->
oxm_ids
);

518 
	`‰ì
(
¥›
);

519 
	}
}

522 
	$oÊ_°ru˘s_‰ì_m©ch
(
oÊ_m©ch_hódî
 *
m©ch
, 
oÊ_exp
 *
exp
) {

523 
m©ch
->
ty≥
) {

524 (
OFPMT_OXM
): {

525 i‡(
m©ch
->
Àngth
 > (
oÂ_m©ch
)){

526 
oÊ_m©ch
 *
m
 = (oÊ_m©ch*Ë
m©ch
;

527 
oÊ_m©ch_év
 *
év
, *
√xt
;

528 
	`HMAP_FOR_EACH_SAFE
(
év
, 
√xt
, 
oÊ_m©ch_év
, 
hm≠_node
, &
m
->
m©ch_fõlds
){

529 
	`‰ì
(
év
->
vÆue
);

530 
	`‰ì
(
év
);

532 
	`hm≠_de°roy
(&
m
->
m©ch_fõlds
);

533 
	`‰ì
(
m
);

535 
	`‰ì
(
m©ch
);

540 i‡(
exp
 =
NULL
 ||Éxp->
m©ch
 =NULL ||Éxp->m©ch->
‰ì
 == NULL) {

541 
	`OFL_LOG_WARN
(
LOG_MODULE
, "TryingÅo freeÉxperimented instruction, butÇo callback was given.");

542 
	`‰ì
(
m©ch
);

544 
exp
->
m©ch
->
	`‰ì
(match);

548 
	}
}

	@oflib/ofl-structs.h

32 #i‚de‡
OFL_STRUCTS_H


33 
	#OFL_STRUCTS_H
 1

	)

35 
	~<sys/ty≥s.h
>

36 
	~<°dio.h
>

38 
	~<√töë/icmp6.h
>

39 
	~"../ö˛ude/›íÊow/›íÊow.h
"

40 
	~"oÊ.h
"

41 
	~"oÊ-a˘i⁄s.h
"

42 
	~"oÊ-∑ckës.h
"

43 
	~"../lib/hm≠.h
"

46 
	goÊ_exp
;

52 
	soÊ_∑ckë_queue
 {

53 
uöt32_t
 
	mqueue_id
;

54 
size_t
 
	m¥›îtõs_num
;

55 
oÊ_queue_¥›_hódî
 **
	m¥›îtõs
;

59 
	soÊ_queue_¥›_hódî
 {

60 
oÂ_queue_¥›îtõs
 
	mty≥
;

63 
	soÊ_queue_¥›_mö_øã
 {

64 
oÊ_queue_¥›_hódî
 
	mhódî
;

66 
uöt16_t
 
	møã
;

69 
	soÊ_queue_¥›_max_øã
 {

70 
oÊ_queue_¥›_hódî
 
	mhódî
;

72 
uöt16_t
 
	møã
;

75 
	soÊ_queue_¥›_ex≥rimíãr
 {

76 
oÊ_queue_¥›_hódî
 
	m¥›_hódî
;

77 
uöt32_t
 
	mex≥rimíãr
;

78 
uöt8_t
 *
	md©a
;

82 
	soÊ_ö°ru˘i⁄_hódî
 {

83 
oÂ_ö°ru˘i⁄_ty≥
 
	mty≥
;

86 
	soÊ_ö°ru˘i⁄_gŸo_èbÀ
 {

87 
oÊ_ö°ru˘i⁄_hódî
 
	mhódî
;

89 
uöt8_t
 
	mèbÀ_id
;

94 
	soÊ_ö°ru˘i⁄_wrôe_mëad©a
 {

95 
oÊ_ö°ru˘i⁄_hódî
 
	mhódî
;

97 
uöt64_t
 
	mmëad©a
;

98 
uöt64_t
 
	mmëad©a_mask
;

102 
	soÊ_ö°ru˘i⁄_a˘i⁄s
 {

103 
oÊ_ö°ru˘i⁄_hódî
 
	mhódî
;

105 
size_t
 
	ma˘i⁄s_num
;

106 
oÊ_a˘i⁄_hódî
 **
	ma˘i⁄s
;

109 
	soÊ_ö°ru˘i⁄_mëî
 {

110 
oÊ_ö°ru˘i⁄_hódî
 
	mhódî
;

111 
uöt32_t
 
	mmëî_id
;

116 
	soÊ_ö°ru˘i⁄_ex≥rimíãr
 {

117 
oÊ_ö°ru˘i⁄_hódî
 
	mhódî
;

119 
uöt32_t
 
	mex≥rimíãr_id
;

122 
	soÊ_c⁄fig
 {

123 
uöt16_t
 
	mÊags
;

124 
uöt16_t
 
	mmiss_£nd_Àn
;

128 
	soÊ_async_c⁄fig
 {

129 
uöt32_t
 
	m∑ckë_ö_mask
[2];

130 
uöt32_t
 
	mp‹t_°©us_mask
[2];

131 
uöt32_t
 
	mÊow_ªmoved_mask
[2];

134 
	soÊ_buckë
 {

135 
uöt16_t
 
	mweight
;

137 
uöt32_t
 
	mw©ch_p‹t
;

140 
uöt32_t
 
	mw©ch_group
;

143 
size_t
 
	ma˘i⁄s_num
;

144 
oÊ_a˘i⁄_hódî
 **
	ma˘i⁄s
;

147 
	soÊ_Êow_°©s
 {

148 
uöt8_t
 
	mèbÀ_id
;

149 
uöt32_t
 
	mduøti⁄_£c
;

150 
uöt32_t
 
	mduøti⁄_n£c
;

152 
uöt16_t
 
	m¥i‹ôy
;

154 
uöt16_t
 
	midÀ_timeout
;

156 
uöt16_t
 
	mh¨d_timeout
;

157 
uöt64_t
 
	mcookõ
;

158 
uöt64_t
 
	m∑ckë_cou¡
;

159 
uöt64_t
 
	mbyã_cou¡
;

160 
oÊ_m©ch_hódî
 *
	mm©ch
;

161 
size_t
 
	mö°ru˘i⁄s_num
;

162 
oÊ_ö°ru˘i⁄_hódî
 **
	mö°ru˘i⁄s
;

167 
	soÊ_èbÀ_°©s
 {

168 
uöt8_t
 
	mèbÀ_id
;

170 
uöt32_t
 
	ma˘ive_cou¡
;

171 
uöt64_t
 
	mlookup_cou¡
;

172 
uöt64_t
 
	mm©ched_cou¡
;

175 
	soÊ_èbÀ_„©uª_¥›_hódî
 {

176 
uöt16_t
 
	mty≥
;

177 
uöt16_t
 
	mÀngth
;

180 
OFP_ASSERT
((
oÊ_èbÀ_„©uª_¥›_hódî
) == 4);

183 
	soÊ_èbÀ_„©uª_¥›_ö°ru˘i⁄s
 {

184 
oÊ_èbÀ_„©uª_¥›_hódî
 
	mhódî
;

185 
size_t
 
	mids_num
;

186 
oÊ_ö°ru˘i⁄_hódî
 *
	mö°ru˘i⁄_ids
;

189 
	soÊ_èbÀ_„©uª_¥›_√xt_èbÀs
 {

190 
oÊ_èbÀ_„©uª_¥›_hódî
 
	mhódî
;

191 
size_t
 
	mèbÀ_num
;

192 
uöt8_t
 *
	m√xt_èbÀ_ids
;

196 
	soÊ_èbÀ_„©uª_¥›_a˘i⁄s
 {

197 
oÊ_èbÀ_„©uª_¥›_hódî
 
	mhódî
;

198 
size_t
 
	ma˘i⁄s_num
;

199 
oÊ_a˘i⁄_hódî
 *
	ma˘i⁄_ids
;

202 
	soÊ_èbÀ_„©uª_¥›_oxm
 {

203 
oÊ_èbÀ_„©uª_¥›_hódî
 
	mhódî
;

204 
size_t
 
	moxm_num
;

205 
uöt32_t
 *
	moxm_ids
;

211 
	soÊ_èbÀ_„©uªs
 {

212 
uöt16_t
 
	mÀngth
;

213 
uöt8_t
 
	mèbÀ_id
;

215 
uöt8_t
 
	m∑d
[5];

216 *
	m«me
;

217 
uöt64_t
 
	mmëad©a_m©ch
;

218 
uöt64_t
 
	mmëad©a_wrôe
;

219 
uöt32_t
 
	mc⁄fig
;

220 
uöt32_t
 
	mmax_íåõs
;

221 
size_t
 
	m¥›îtõs_num
;

223 
oÊ_èbÀ_„©uª_¥›_hódî
 **
	m¥›îtõs
;

226 
	soÊ_m©ch_hódî
 {

227 
uöt16_t
 
	mty≥
;

228 
uöt16_t
 
	mÀngth
;

232 
	soÊ_m©ch_°™d¨d
 {

233 
oÊ_m©ch_hódî
 
	mhódî
;

235 
uöt32_t
 
	mö_p‹t
;

236 
uöt32_t
 
	mwûdˇrds
;

238 
uöt8_t
 
	mdl_§c
[
OFP_ETH_ALEN
];

239 
uöt8_t
 
	mdl_§c_mask
[
OFP_ETH_ALEN
];

240 
uöt8_t
 
	mdl_d°
[
OFP_ETH_ALEN
];

241 
uöt8_t
 
	mdl_d°_mask
[
OFP_ETH_ALEN
];

242 
uöt16_t
 
	mdl_vœn
;

243 
uöt8_t
 
	mdl_vœn_p˝
;

244 
uöt16_t
 
	mdl_ty≥
;

245 
uöt8_t
 
	mnw_tos
;

246 
uöt8_t
 
	mnw_¥Ÿo
;

248 
uöt32_t
 
	mnw_§c
;

249 
uöt32_t
 
	mnw_§c_mask
;

250 
uöt32_t
 
	mnw_d°
;

251 
uöt32_t
 
	mnw_d°_mask
;

252 
uöt16_t
 
	mç_§c
;

253 
uöt16_t
 
	mç_d°
;

254 
uöt32_t
 
	mm∂s_œbñ
;

255 
uöt8_t
 
	mm∂s_tc
;

257 
uöt64_t
 
	mmëad©a
;

258 
uöt64_t
 
	mmëad©a_mask
;

262 
	soÊ_m©ch
 {

263 
oÊ_m©ch_hódî
 
	mhódî
;

264 
hm≠
 
	mm©ch_fõlds
;

268 
uöt32_t
 
	mö_p‹t
;

269 
uöt32_t
 
	mwûdˇrds
;

271 
uöt8_t
 
	mdl_§c
[
OFP_ETH_ALEN
];

272 
uöt8_t
 
	mdl_§c_mask
[
OFP_ETH_ALEN
];

273 
uöt8_t
 
	mdl_d°
[
OFP_ETH_ALEN
];

274 
uöt8_t
 
	mdl_d°_mask
[
OFP_ETH_ALEN
];

275 
uöt16_t
 
	mdl_vœn
;

276 
uöt8_t
 
	mdl_vœn_p˝
;

277 
uöt16_t
 
	mdl_ty≥
;

278 
uöt8_t
 
	mnw_tos
;

279 
uöt8_t
 
	mnw_¥Ÿo
;

281 
uöt32_t
 
	mnw_§c
;

282 
uöt32_t
 
	mnw_§c_mask
;

283 
uöt32_t
 
	mnw_d°
;

284 
uöt32_t
 
	mnw_d°_mask
;

285 
uöt16_t
 
	mç_§c
;

286 
uöt16_t
 
	mç_d°
;

287 
uöt32_t
 
	mm∂s_œbñ
;

288 
uöt8_t
 
	mm∂s_tc
;

290 
uöt64_t
 
	mmëad©a
;

291 
uöt64_t
 
	mmëad©a_mask
;

296 
	soÊ_m©ch_év
{

298 
hm≠_node
 
	mhm≠_node
;

299 
uöt32_t
 
	mhódî
;

300 
uöt8_t
 *
	mvÆue
;

305 
	soÊ_mëî_b™d_hódî
 {

306 
uöt16_t
 
	mty≥
;

307 
uöt32_t
 
	møã
;

308 
uöt32_t
 
	mbur°_size
;

313 
	soÊ_mëî_b™d_dr›
 {

314 
uöt16_t
 
	mty≥
;

315 
uöt32_t
 
	møã
;

316 
uöt32_t
 
	mbur°_size
;

320 
	soÊ_mëî_b™d_ds˝_ªm¨k
 {

321 
uöt16_t
 
	mty≥
;

322 
uöt32_t
 
	møã
;

323 
uöt32_t
 
	mbur°_size
;

324 
uöt8_t
 
	m¥ec_Àvñ
;

328 
	soÊ_mëî_b™d_ex≥rimíãr
 {

329 
uöt16_t
 
	mty≥
;

330 
uöt32_t
 
	møã
;

331 
uöt32_t
 
	mbur°_size
;

332 
uöt32_t
 
	mex≥rimíãr
;

337 
	soÊ_p‹t_°©s
 {

338 
uöt32_t
 
	mp‹t_no
;

339 
uöt64_t
 
	mrx_∑ckës
;

340 
uöt64_t
 
	mtx_∑ckës
;

341 
uöt64_t
 
	mrx_byãs
;

342 
uöt64_t
 
	mtx_byãs
;

343 
uöt64_t
 
	mrx_dr›≥d
;

344 
uöt64_t
 
	mtx_dr›≥d
;

345 
uöt64_t
 
	mrx_îr‹s
;

349 
uöt64_t
 
	mtx_îr‹s
;

353 
uöt64_t
 
	mrx_‰ame_îr
;

354 
uöt64_t
 
	mrx_ovî_îr
;

355 
uöt64_t
 
	mrx_¸c_îr
;

356 
uöt64_t
 
	mcﬁlisi⁄s
;

357 
uöt32_t
 
	mduøti⁄_£c
;

358 
uöt32_t
 
	mduøti⁄_n£c
;

362 
	soÊ_buckë_cou¡î
 {

363 
uöt64_t
 
	m∑ckë_cou¡
;

364 
uöt64_t
 
	mbyã_cou¡
;

367 
	soÊ_group_°©s
 {

368 
uöt32_t
 
	mgroup_id
;

369 
uöt32_t
 
	mªf_cou¡
;

370 
uöt64_t
 
	m∑ckë_cou¡
;

371 
uöt64_t
 
	mbyã_cou¡
;

372 
size_t
 
	mcou¡îs_num
;

373 
uöt32_t
 
	mduøti⁄_£c
;

374 
uöt32_t
 
	mduøti⁄_n£c
;

376 
oÊ_buckë_cou¡î
 **
	mcou¡îs
;

380 
	soÊ_p‹t
 {

381 
uöt32_t
 
	mp‹t_no
;

382 
uöt8_t
 
	mhw_addr
[
OFP_ETH_ALEN
];

383 *
	m«me
;

385 
uöt32_t
 
	mc⁄fig
;

386 
uöt32_t
 
	m°©e
;

388 
uöt32_t
 
	mcuº
;

389 
uöt32_t
 
	madvîti£d
;

390 
uöt32_t
 
	msuµ‹ãd
;

391 
uöt32_t
 
	m≥î
;

393 
uöt32_t
 
	mcuº_•ìd
;

394 
uöt32_t
 
	mmax_•ìd
;

399 
	soÊ_queue_°©s
 {

400 
uöt32_t
 
	mp‹t_no
;

401 
uöt32_t
 
	mqueue_id
;

402 
uöt64_t
 
	mtx_byãs
;

403 
uöt64_t
 
	mtx_∑ckës
;

404 
uöt64_t
 
	mtx_îr‹s
;

405 
uöt32_t
 
	mduøti⁄_£c
;

406 
uöt32_t
 
	mduøti⁄_n£c
;

410 
	soÊ_group_desc_°©s
 {

411 
uöt8_t
 
	mty≥
;

412 
uöt32_t
 
	mgroup_id
;

414 
size_t
 
	mbuckës_num
;

415 
oÊ_buckë
 **
	mbuckës
;

420 
	soÊ_mëî_b™d_°©s
 {

421 
uöt64_t
 
	m∑ckë_b™d_cou¡
;

422 
uöt64_t
 
	mbyã_b™d_cou¡
;

425 
uöt64_t
 
	mœ°_fûl
;

426 
uöt64_t
 
	mtokís
;

430 
	soÊ_mëî_°©s
 {

431 
uöt32_t
 
	mmëî_id
;

432 
uöt16_t
 
	mÀn
;

433 
uöt32_t
 
	mÊow_cou¡
;

434 
uöt64_t
 
	m∑ckë_ö_cou¡
;

435 
uöt64_t
 
	mbyã_ö_cou¡
;

436 
uöt32_t
 
	mduøti⁄_£c
;

437 
uöt32_t
 
	mduøti⁄_n£c
;

439 
size_t
 
	mmëî_b™ds_num
;

440 
oÊ_mëî_b™d_°©s
 **
	mb™d_°©s
;

445 
	soÊ_mëî_c⁄fig
 {

446 
uöt16_t
 
	mÀngth
;

447 
uöt16_t
 
	mÊags
;

448 
uöt32_t
 
	mmëî_id
;

449 
size_t
 
	mmëî_b™ds_num
;

450 
oÊ_mëî_b™d_hódî
 **
	mb™ds
;

454 
	soÊ_mëî_„©uªs
 {

455 
uöt32_t
 
	mmax_mëî
;

456 
uöt32_t
 
	mb™d_ty≥s
;

457 
uöt32_t
 
	mˇ∑bûôõs
;

458 
uöt8_t
 
	mmax_b™ds
;

459 
uöt8_t
 
	mmax_cﬁ‹
;

466 
oÊ_°ru˘s_m©ch_öô
(
oÊ_m©ch
 *
m©ch
);

468 #ifde‡
__˝lu•lus


472 
oÊ_°ru˘s_m©ch_put8
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, 
uöt8_t
 
vÆue
);

475 
oÊ_°ru˘s_m©ch_put8m
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, 
uöt8_t
 
vÆue
, uöt8_à
mask
);

478 
oÊ_°ru˘s_m©ch_put16
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, 
uöt16_t
 
vÆue
);

481 
oÊ_°ru˘s_m©ch_put16m
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, 
uöt16_t
 
vÆue
, uöt16_à
mask
);

484 
oÊ_°ru˘s_m©ch_put32
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, uöt32_à
vÆue
);

487 
oÊ_°ru˘s_m©ch_put32m
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, uöt32_à
vÆue
, uöt32_à
mask
);

490 
oÊ_°ru˘s_m©ch_put64
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, 
uöt64_t
 
vÆue
);

493 
oÊ_°ru˘s_m©ch_put64m
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, 
uöt64_t
 
vÆue
, uöt64_à
mask
);

496 
oÊ_°ru˘s_m©ch_put_ëh
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, 
uöt8_t
 
vÆue
[
ETH_ADDR_LEN
]);

499 
oÊ_°ru˘s_m©ch_put_ëh_m
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, 
uöt8_t
 
vÆue
[
ETH_ADDR_LEN
], uöt8_à
mask
[ETH_ADDR_LEN]);

502 
oÊ_°ru˘s_m©ch_put_ùv6
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, 
uöt8_t
 
vÆue
[
IPv6_ADDR_LEN
] );

505 
oÊ_°ru˘s_m©ch_put_ùv6m
(
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
, 
uöt8_t
 
vÆue
[
IPv6_ADDR_LEN
], uöt8_à
mask
[IPv6_ADDR_LEN]);

507 #ifde‡
__˝lu•lus


512 
oÊ_°ru˘s_m©ch_oÂ_tŸÆ_Àn
(
oÊ_m©ch
 *
m©ch
);

519 
size_t


520 
oÊ_°ru˘s_ö°ru˘i⁄s_∑ck
(
oÊ_ö°ru˘i⁄_hódî
 *
§c
, 
oÂ_ö°ru˘i⁄
 *
d°
, 
oÊ_exp
 *
exp
);

522 
size_t


523 
oÊ_°ru˘s_mëî_b™d_∑ck
(
oÊ_mëî_b™d_hódî
 *
§c
, 
oÂ_mëî_b™d_hódî
 *
d°
);

525 
size_t


526 
oÊ_°ru˘s_mëî_c⁄f_∑ck
(
oÊ_mëî_c⁄fig
 *
§c
, 
oÂ_mëî_c⁄fig
 *
d°
, 
uöt8_t
* 
d©a
);

528 
size_t


529 
oÊ_°ru˘s_mëî_°©s_∑ck
(
oÊ_mëî_°©s
 *
§c
, 
oÂ_mëî_°©s
 *
d°
);

531 
size_t


532 
oÊ_°ru˘s_èbÀ_¥›îtõs_∑ck
(
oÊ_èbÀ_„©uª_¥›_hódî
 * 
§c
, 
oÂ_èbÀ_„©uª_¥›_hódî
 *
d°
, 
uöt8_t
 *
d©a
, 
oÊ_exp
 *
exp
);

534 
size_t


535 
oÊ_°ru˘s_èbÀ_„©uªs_∑ck
(
oÊ_èbÀ_„©uªs
 *
§c
, 
oÂ_èbÀ_„©uªs
 *
d°
, 
uöt8_t
* 
d©a
, 
oÊ_exp
 *
exp
);

537 
size_t


538 
oÊ_°ru˘s_buckë_∑ck
(
oÊ_buckë
 *
§c
, 
oÂ_buckë
 *
d°
, 
oÊ_exp
 *
exp
);

540 
size_t


541 
oÊ_°ru˘s_Êow_°©s_∑ck
(
oÊ_Êow_°©s
 *
§c
, 
uöt8_t
 *
d°
, 
oÊ_exp
 *
exp
);

543 
size_t


544 
oÊ_°ru˘s_group_°©s_∑ck
(
oÊ_group_°©s
 *
§c
, 
oÂ_group_°©s
 *
d°
);

546 
size_t


547 
oÊ_°ru˘s_queue_¥›_∑ck
(
oÊ_queue_¥›_hódî
 *
§c
, 
oÂ_queue_¥›_hódî
 *
d°
);

549 
size_t


550 
oÊ_°ru˘s_∑ckë_queue_∑ck
(
oÊ_∑ckë_queue
 *
§c
, 
oÂ_∑ckë_queue
 *
d°
);

552 
size_t


553 
oÊ_°ru˘s_p‹t_°©s_∑ck
(
oÊ_p‹t_°©s
 *
§c
, 
oÂ_p‹t_°©s
 *
d°
);

556 
size_t


557 
oÊ_°ru˘s_p‹t_∑ck
(
oÊ_p‹t
 *
§c
, 
oÂ_p‹t
 *
d°
);

559 
size_t


560 
oÊ_°ru˘s_èbÀ_°©s_∑ck
(
oÊ_èbÀ_°©s
 *
§c
, 
oÂ_èbÀ_°©s
 *
d°
);

563 
size_t


564 
oÊ_°ru˘s_queue_°©s_∑ck
(
oÊ_queue_°©s
 *
§c
, 
oÂ_queue_°©s
 *
d°
);

566 
size_t


567 
oÊ_°ru˘s_group_desc_°©s_∑ck
(
oÊ_group_desc_°©s
 *
§c
, 
oÂ_group_desc_°©s
 *
d°
, 
oÊ_exp
 *
exp
);

569 
size_t


570 
oÊ_°ru˘s_buckë_cou¡î_∑ck
(
oÊ_buckë_cou¡î
 *
§c
, 
oÂ_buckë_cou¡î
 *
d°
);

572 
size_t


573 
oÊ_°ru˘s_m©ch_∑ck
(
oÊ_m©ch_hódî
 *
§c
, 
oÂ_m©ch
 *
d°
, 
uöt8_t
* 
oxm_fõlds
, 
oÊ_exp
 *
exp
);

575 
oÊ_îr


576 
oÊ_°ru˘s_ö°ru˘i⁄s_u≈ack
(
oÂ_ö°ru˘i⁄
 *
§c
, 
size_t
 *
Àn
, 
oÊ_ö°ru˘i⁄_hódî
 **
d°
, 
oÊ_exp
 *
exp
);

578 
oÊ_îr


579 
oÊ_°ru˘s_èbÀ_„©uªs_u≈ack
(
oÂ_èbÀ_„©uªs
 *
§c
, 
size_t
 *
Àn
, 
oÊ_èbÀ_„©uªs
 **
d°
, 
oÊ_exp
 *
exp
);

581 
oÊ_îr


582 
oÊ_°ru˘s_buckë_u≈ack
(
oÂ_buckë
 *
§c
, 
size_t
 *
Àn
, 
uöt8_t
 
gty≥
, 
oÊ_buckë
 **
d°
, 
oÊ_exp
 *
exp
);

584 
oÊ_îr


585 
oÊ_°ru˘s_Êow_°©s_u≈ack
(
oÂ_Êow_°©s
 *
§c
,
uöt8_t
 *
buf
, 
size_t
 *
Àn
, 
oÊ_Êow_°©s
 **
d°
, 
oÊ_exp
 *
exp
);

587 
oÊ_îr


588 
oÊ_°ru˘s_queue_¥›_u≈ack
(
oÂ_queue_¥›_hódî
 *
§c
, 
size_t
 *
Àn
, 
oÊ_queue_¥›_hódî
 **
d°
);

590 
oÊ_îr


591 
oÊ_°ru˘s_∑ckë_queue_u≈ack
(
oÂ_∑ckë_queue
 *
§c
, 
size_t
 *
Àn
, 
oÊ_∑ckë_queue
 **
d°
);

593 
oÊ_îr


594 
oÊ_°ru˘s_p‹t_u≈ack
(
oÂ_p‹t
 *
§c
, 
size_t
 *
Àn
, 
oÊ_p‹t
 **
d°
);

596 
oÊ_îr


597 
oÊ_°ru˘s_èbÀ_°©s_u≈ack
(
oÂ_èbÀ_°©s
 *
§c
, 
size_t
 *
Àn
, 
oÊ_èbÀ_°©s
 **
d°
);

599 
oÊ_îr


600 
oÊ_°ru˘s_p‹t_°©s_u≈ack
(
oÂ_p‹t_°©s
 *
§c
, 
size_t
 *
Àn
, 
oÊ_p‹t_°©s
 **
d°
);

602 
oÊ_îr


603 
oÊ_°ru˘s_group_°©s_u≈ack
(
oÂ_group_°©s
 *
§c
, 
size_t
 *
Àn
, 
oÊ_group_°©s
 **
d°
);

605 
oÊ_îr


606 
oÊ_°ru˘s_queue_°©s_u≈ack
(
oÂ_queue_°©s
 *
§c
, 
size_t
 *
Àn
, 
oÊ_queue_°©s
 **
d°
);

608 
oÊ_îr


609 
oÊ_°ru˘s_mëî_b™d_u≈ack
(
oÂ_mëî_b™d_hódî
 *
§c
, 
size_t
 *
Àn
, 
oÊ_mëî_b™d_hódî
 **
d°
);

611 
oÊ_îr


612 
oÊ_°ru˘s_group_desc_°©s_u≈ack
(
oÂ_group_desc_°©s
 *
§c
, 
size_t
 *
Àn
, 
oÊ_group_desc_°©s
 **
d°
, 
oÊ_exp
 *
exp
);

614 
oÊ_îr


615 
oÊ_°ru˘s_buckë_cou¡î_u≈ack
(
oÂ_buckë_cou¡î
 *
§c
, 
size_t
 *
Àn
, 
oÊ_buckë_cou¡î
 **
d°
);

617 
oÊ_îr


618 
oÊ_°ru˘s_m©ch_u≈ack
(
oÂ_m©ch
 *
§c
,
uöt8_t
 *
buf
, 
size_t
 *
Àn
, 
oÊ_m©ch_hódî
 **
d°
, 
oÊ_exp
 *
exp
);

620 
oÊ_îr


621 
oÊ_°ru˘s_mëî_b™d_°©s_u≈ack
(
oÂ_mëî_b™d_°©s
 *
§c
, 
size_t
 *
Àn
, 
oÊ_mëî_b™d_°©s
 **
d°
);

623 
oÊ_îr


624 
oÊ_°ru˘s_mëî_°©s_u≈ack
(
oÂ_mëî_°©s
 *
§c
, 
size_t
 *
Àn
, 
oÊ_mëî_°©s
 **
d°
);

626 
oÊ_îr


627 
oÊ_°ru˘s_mëî_c⁄fig_u≈ack
(
oÂ_mëî_c⁄fig
 *
§c
, 
size_t
 *
Àn
, 
oÊ_mëî_c⁄fig
 **
d°
);

634 
oÊ_°ru˘s_‰ì_mëî_b™ds
(
oÊ_mëî_b™d_hódî
 *
mëî_b™d
);

637 
oÊ_°ru˘s_‰ì_∑ckë_queue
(
oÊ_∑ckë_queue
 *
queue
);

640 
oÊ_°ru˘s_‰ì_ö°ru˘i⁄
(
oÊ_ö°ru˘i⁄_hódî
 *
ö°
, 
oÊ_exp
 *
exp
);

643 
oÊ_°ru˘s_‰ì_èbÀ_°©s
(
oÊ_èbÀ_°©s
 *
°©s
);

646 
oÊ_°ru˘s_‰ì_buckë
(
oÊ_buckë
 *
buckë
, 
oÊ_exp
 *
exp
);

649 
oÊ_°ru˘s_‰ì_Êow_°©s
(
oÊ_Êow_°©s
 *
°©s
, 
oÊ_exp
 *
exp
);

652 
oÊ_°ru˘s_‰ì_p‹t
(
oÊ_p‹t
 *
p‹t
);

655 
oÊ_°ru˘s_‰ì_group_°©s
(
oÊ_group_°©s
 *
°©s
);

658 
oÊ_°ru˘s_‰ì_group_desc_°©s
(
oÊ_group_desc_°©s
 *
°©s
, 
oÊ_exp
 *
exp
);

661 
oÊ_°ru˘s_‰ì_m©ch
(
oÊ_m©ch_hódî
 *
m©ch
, 
oÊ_exp
 *
exp
);

664 
oÊ_°ru˘s_‰ì_mëî_b™d_°©s
(
oÊ_mëî_b™d_°©s
* 
s
);

667 
oÊ_°ru˘s_‰ì_mëî_°©s
(
oÊ_mëî_°©s
 *
°©s
);

670 
oÊ_°ru˘s_‰ì_mëî_c⁄fig
(
oÊ_mëî_c⁄fig
 *
c⁄f
);

673 
oÊ_°ru˘s_‰ì_èbÀ_„©uªs
(
oÊ_èbÀ_„©uªs
* 
„©uªs
, 
oÊ_exp
 *
exp
);

676 
oÊ_°ru˘s_‰ì_èbÀ_¥›îtõs
(
oÊ_èbÀ_„©uª_¥›_hódî
 *
¥›
, 
oÊ_exp
 *
exp
);

685 
oÊ_îr


686 
oÊ_utûs_cou¡_oÂ_ö°ru˘i⁄s
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
);

688 
oÊ_îr


689 
oÊ_utûs_cou¡_oÂ_buckës
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
);

691 
oÊ_îr


692 
oÊ_utûs_cou¡_oÂ_mëî_b™ds
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
);

694 
oÊ_îr


695 
oÊ_utûs_cou¡_oÂ_p‹ts
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
);

697 
oÊ_îr


698 
oÊ_utûs_cou¡_oÂ_Êow_°©s
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
);

700 
oÊ_îr


701 
oÊ_utûs_cou¡_oÂ_group_°©s
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
);

703 
oÊ_îr


704 
oÊ_utûs_cou¡_oÂ_èbÀ_°©s
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
);

706 
oÊ_îr


707 
oÊ_utûs_cou¡_oÂ_buckë_cou¡îs
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
);

709 
oÊ_îr


710 
oÊ_utûs_cou¡_oÂ_p‹t_°©s
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
);

712 
oÊ_îr


713 
oÊ_utûs_cou¡_oÂ_queue_°©s
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
);

715 
oÊ_îr


716 
oÊ_utûs_cou¡_oÂ_group_desc_°©s
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
);

718 
oÊ_îr


719 
oÊ_utûs_cou¡_oÂ_∑ckë_queues
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
);

721 
oÊ_îr


722 
oÊ_utûs_cou¡_oÂ_queue_¥›s
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
);

724 
oÊ_îr


725 
oÊ_utûs_cou¡_oÂ_èbÀ_„©uªs_¥›îtõs
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
);

727 
oÊ_îr


728 
oÊ_utûs_cou¡_oÂ_èbÀ_„©uªs
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
);

730 
oÊ_îr


731 
oÊ_utûs_cou¡_oÂ_mëî_°©s
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
);

733 
oÊ_îr


734 
oÊ_utûs_cou¡_oÂ_mëî_b™d_°©s
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
);

736 
oÊ_îr


737 
oÊ_utûs_cou¡_oÂ_mëî_c⁄fig
(*
d©a
, 
size_t
 
d©a_Àn
, size_à*
cou¡
);

739 
size_t


740 
oÊ_°ru˘s_ö°ru˘i⁄s_oÂ_tŸÆ_Àn
(
oÊ_ö°ru˘i⁄_hódî
 **
ö°ru˘i⁄s
, 
size_t
 
ö°ru˘i⁄s_num
, 
oÊ_exp
 *
exp
);

742 
size_t


743 
oÊ_°ru˘s_ö°ru˘i⁄s_oÂ_Àn
(
oÊ_ö°ru˘i⁄_hódî
 *
ö°ru˘i⁄
, 
oÊ_exp
 *
exp
);

745 
size_t


746 
oÊ_°ru˘s_mëî_b™ds_oÂ_tŸÆ_Àn
(
oÊ_mëî_b™d_hódî
 **
mëî_b™ds
, 
size_t
 
mëî_b™ds_num
);

748 
size_t


749 
oÊ_°ru˘s_mëî_b™d_oÂ_Àn
(
oÊ_mëî_b™d_hódî
 *
mëî_b™d
);

751 
size_t


752 
oÊ_°ru˘s_buckës_oÂ_tŸÆ_Àn
(
oÊ_buckë
 ** 
buckës
, 
size_t
 
buckës_num
, 
oÊ_exp
 *
exp
);

754 
size_t


755 
oÊ_°ru˘s_buckës_oÂ_Àn
(
oÊ_buckë
 *
buckë
, 
oÊ_exp
 *
exp
);

757 
size_t


758 
oÊ_°ru˘s_Êow_°©s_oÂ_tŸÆ_Àn
(
oÊ_Êow_°©s
 ** 
°©s
, 
size_t
 
°©s_num
, 
oÊ_exp
 *
exp
);

760 
size_t


761 
oÊ_°ru˘s_Êow_°©s_oÂ_Àn
(
oÊ_Êow_°©s
 *
°©s
, 
oÊ_exp
 *
exp
);

763 
size_t


764 
oÊ_°ru˘s_group_°©s_oÂ_tŸÆ_Àn
(
oÊ_group_°©s
 ** 
°©s
, 
size_t
 
°©s_num
);

766 
size_t


767 
oÊ_°ru˘s_group_°©s_oÂ_Àn
(
oÊ_group_°©s
 *
°©s
);

769 
size_t


770 
oÊ_°ru˘s_group_desc_°©s_oÂ_tŸÆ_Àn
(
oÊ_group_desc_°©s
 ** 
°©s
, 
size_t
 
°©s_num
, 
oÊ_exp
 *
exp
);

772 
size_t


773 
oÊ_°ru˘s_èbÀ_„©uªs_¥›îtõs_oÂ_Àn
(
oÊ_èbÀ_„©uª_¥›_hódî
 *
¥›
, 
oÊ_exp
 *
exp
);

775 
size_t


776 
oÊ_°ru˘s_èbÀ_„©uªs_¥›îtõs_oÂ_tŸÆ_Àn
(
oÊ_èbÀ_„©uª_¥›_hódî
 **
¥›s
, 
size_t
 
„©uªs_num
, 
oÊ_exp
 *
exp
);

778 
size_t
 
oÊ_°ru˘s_èbÀ_„©uªs_oÂ_tŸÆ_Àn
(
oÊ_èbÀ_„©uªs
 **
„©
, size_à
èbÀs_num
, 
oÊ_exp
 * 
exp
);

780 
size_t


781 
oÊ_°ru˘s_group_desc_°©s_oÂ_Àn
(
oÊ_group_desc_°©s
 *
°©s
, 
oÊ_exp
 *
exp
);

783 
size_t


784 
oÊ_°ru˘s_queue_¥›_oÂ_tŸÆ_Àn
(
oÊ_queue_¥›_hódî
 ** 
¥›s
, 
size_t
 
¥›s_num
);

786 
size_t


787 
oÊ_°ru˘s_queue_¥›_oÂ_Àn
(
oÊ_queue_¥›_hódî
 *
¥›
);

789 
size_t


790 
oÊ_°ru˘s_∑ckë_queue_oÂ_tŸÆ_Àn
(
oÊ_∑ckë_queue
 ** 
queues
, 
size_t
 
queues_num
);

792 
size_t


793 
oÊ_°ru˘s_∑ckë_queue_oÂ_Àn
(
oÊ_∑ckë_queue
 *
queue
);

795 
size_t


796 
oÊ_°ru˘s_m©ch_oÂ_Àn
(
oÊ_m©ch_hódî
 *
m©ch
, 
oÊ_exp
 *
exp
);

798 
size_t


799 
oÊ_°ru˘s_mëî_°©s_oÂ_tŸÆ_Àn
(
oÊ_mëî_°©s
 **
°©s
, 
size_t
 
°©s_num
);

801 
size_t


802 
oÊ_°ru˘s_mëî_°©s_oÂ_Àn
(
oÊ_mëî_°©s
 * 
°©s
);

804 
size_t


805 
oÊ_°ru˘s_∑ck_b™d_°©s
(
oÊ_mëî_b™d_°©s
 *
§c
, 
oÂ_mëî_b™d_°©s
 *
d°
);

807 
size_t


808 
oÊ_°ru˘s_mëî_c⁄f_oÂ_tŸÆ_Àn
(
oÊ_mëî_c⁄fig
 **
mëî_c⁄f
, 
size_t
 
°©s_num
);

810 
size_t


811 
oÊ_°ru˘s_mëî_c⁄f_oÂ_Àn
(
oÊ_mëî_c⁄fig
 * 
mëî_c⁄f
);

820 
oÊ_°ru˘s_p‹t_to_°rög
(
oÊ_p‹t
 *
p‹t
);

823 
oÊ_°ru˘s_p‹t_¥öt
(
FILE
 *
°ªam
, 
oÊ_p‹t
 *
p‹t
);

826 
oÊ_°ru˘s_ö°ru˘i⁄_to_°rög
(
oÊ_ö°ru˘i⁄_hódî
 *
ö°
, 
oÊ_exp
 *
exp
);

829 
oÊ_°ru˘s_ö°ru˘i⁄_¥öt
(
FILE
 *
°ªam
, 
oÊ_ö°ru˘i⁄_hódî
 *
ö°
, 
oÊ_exp
 *
exp
);

832 
oÊ_°ru˘s_m©ch_to_°rög
(
oÊ_m©ch_hódî
 *
m©ch
, 
oÊ_exp
 *
exp
);

835 
oÊ_°ru˘s_m©ch_¥öt
(
FILE
 *
°ªam
, 
oÊ_m©ch_hódî
 *
m©ch
, 
oÊ_exp
 *
exp
);

838 
oÊ_°ru˘s_oxm_év_to_°rög
(
oÊ_m©ch_év
 *
f
);

841 
oÊ_°ru˘s_oxm_év_¥öt
(
FILE
 *
°ªam
, 
oÊ_m©ch_év
 *
f
);

844 
oÊ_°ru˘s_oxm_m©ch_to_°rög
(
oÊ_m©ch
 *
m
);

847 
oÊ_°ru˘s_oxm_m©ch_¥öt
(
FILE
 *
°ªam
, c⁄° 
oÊ_m©ch
 *
omt
);

850 
oÊ_°ru˘s_c⁄fig_to_°rög
(
oÊ_c⁄fig
 *
c
);

853 
oÊ_°ru˘s_c⁄fig_¥öt
(
FILE
 *
°ªam
, 
oÊ_c⁄fig
 *
c
);

856 
oÊ_°ru˘s_buckë_to_°rög
(
oÊ_buckë
 *
b
, 
oÊ_exp
 *
exp
);

859 
oÊ_°ru˘s_buckë_¥öt
(
FILE
 *
°ªam
, 
oÊ_buckë
 *
b
, 
oÊ_exp
 *
exp
);

862 
oÊ_°ru˘s_queue_to_°rög
(
oÊ_∑ckë_queue
 *
q
);

865 
oÊ_°ru˘s_queue_¥öt
(
FILE
 *
°ªam
, 
oÊ_∑ckë_queue
 *
q
);

868 
oÊ_°ru˘s_queue_¥›_to_°rög
(
oÊ_queue_¥›_hódî
 *
p
);

871 
oÊ_°ru˘s_queue_¥›_¥öt
(
FILE
 *
°ªam
, 
oÊ_queue_¥›_hódî
 *
p
);

874 
oÊ_°ru˘s_Êow_°©s_to_°rög
(
oÊ_Êow_°©s
 *
s
, 
oÊ_exp
 *
exp
);

877 
oÊ_°ru˘s_Êow_°©s_¥öt
(
FILE
 *
°ªam
, 
oÊ_Êow_°©s
 *
s
, 
oÊ_exp
 *
exp
);

880 
oÊ_°ru˘s_buckë_cou¡î_to_°rög
(
oÊ_buckë_cou¡î
 *
s
);

883 
oÊ_°ru˘s_buckë_cou¡î_¥öt
(
FILE
 *
°ªam
, 
oÊ_buckë_cou¡î
 *
c
);

886 
oÊ_°ru˘s_group_°©s_to_°rög
(
oÊ_group_°©s
 *
s
);

889 
oÊ_°ru˘s_group_°©s_¥öt
(
FILE
 *
°ªam
, 
oÊ_group_°©s
 *
s
);

892 
oÊ_°ru˘s_èbÀ_°©s_to_°rög
(
oÊ_èbÀ_°©s
 *
s
);

895 
oÊ_°ru˘s_èbÀ_°©s_¥öt
(
FILE
 *
°ªam
, 
oÊ_èbÀ_°©s
 *
s
);

898 
oÊ_°ru˘s_èbÀ_¥›îtõs_to_°rög
(
oÊ_èbÀ_„©uª_¥›_hódî
 *
s
);

901 
oÊ_°ru˘s_èbÀ_¥›îtõs_¥öt
(
FILE
 * 
°ªam
, 
oÊ_èbÀ_„©uª_¥›_hódî
* 
s
);

904 
oÊ_°ru˘s_èbÀ_„©uªs_to_°rög
(
oÊ_èbÀ_„©uªs
 *
s
);

907 
oÊ_°ru˘s_èbÀ_„©uªs_¥öt
(
FILE
 *
°ªam
, 
oÊ_èbÀ_„©uªs
 *
s
);

910 
oÊ_°ru˘s_p‹t_°©s_to_°rög
(
oÊ_p‹t_°©s
 *
s
);

913 
oÊ_°ru˘s_p‹t_°©s_¥öt
(
FILE
 *
°ªam
, 
oÊ_p‹t_°©s
 *
s
);

916 
oÊ_°ru˘s_queue_°©s_to_°rög
(
oÊ_queue_°©s
 *
s
);

919 
oÊ_°ru˘s_queue_°©s_¥öt
(
FILE
 *
°ªam
, 
oÊ_queue_°©s
 *
s
);

922 
oÊ_°ru˘s_group_desc_°©s_to_°rög
(
oÊ_group_desc_°©s
 *
s
, 
oÊ_exp
 *
exp
);

925 
oÊ_°ru˘s_group_desc_°©s_¥öt
(
FILE
 *
°ªam
, 
oÊ_group_desc_°©s
 *
s
, 
oÊ_exp
 *
exp
);

928 
oÊ_°ru˘s_mëî_b™d_to_°rög
(
oÊ_mëî_b™d_hódî
* 
s
);

931 
oÊ_°ru˘s_mëî_b™d_¥öt
(
FILE
 *
°ªam
, 
oÊ_mëî_b™d_hódî
* 
s
);

934 
oÊ_°ru˘s_mëî_b™d_°©s_to_°rög
(
oÊ_mëî_b™d_°©s
* 
s
);

937 
oÊ_°ru˘s_mëî_b™d_°©s_¥öt
(
FILE
 *
°ªam
, 
oÊ_mëî_b™d_°©s
* 
s
);

940 
oÊ_°ru˘s_mëî_„©uªs_to_°rög
(
oÊ_mëî_„©uªs
* 
s
);

943 
oÊ_°ru˘s_mëî_„©uªs_¥öt
(
FILE
 *
°ªam
, 
oÊ_mëî_„©uªs
* 
s
);

946 
oÊ_°ru˘s_mëî_°©s_to_°rög
(
oÊ_mëî_°©s
 *
s
);

949 
oÊ_°ru˘s_mëî_°©s_¥öt
(
FILE
 *
°ªam
, 
oÊ_mëî_°©s
* 
s
);

952 
oÊ_°ru˘s_mëî_c⁄fig_to_°rög
(
oÊ_mëî_c⁄fig
* 
s
);

955 
oÊ_°ru˘s_mëî_c⁄fig_¥öt
(
FILE
 *
°ªam
, 
oÊ_mëî_c⁄fig
* 
s
);

958 
oÊ_°ru˘s_async_c⁄fig_to_°rög
(
oÊ_async_c⁄fig
 *
s
);

961 
oÊ_°ru˘s_async_c⁄fig_¥öt
(
FILE
 * 
°ªam
, 
oÊ_async_c⁄fig
 *
s
);

	@oflib/ofl-utils.h

32 #i‚de‡
OFL_UTILS_H


33 
	#OFL_UTILS_H
 1

	)

36 
	~<√töë/ö.h
>

42 
	#OFL_UTILS_FREE_ARR
(
ELEMS
, 
ELEM_NUM
) \

44 
size_t
 
_ôî
; \

45 
_ôî
=0; _ôî<
ELEM_NUM
; _iter++) { \

46 
	`‰ì
(
ELEMS
[
_ôî
]); \

48 
	`‰ì
(
ELEMS
); \

49 }

	)

54 
	#OFL_UTILS_FREE_ARR_FUN
(
ELEMS
, 
ELEM_NUM
, 
FREE_FUN
) \

56 
size_t
 
_ôî
; \

57 
_ôî
=0; _ôî<
ELEM_NUM
; _iter++) { \

58 
	`FREE_FUN
(
ELEMS
[
_ôî
]); \

60 
	`‰ì
(
ELEMS
); \

61 }

	)

63 
	#OFL_UTILS_FREE_ARR_FUN2
(
ELEMS
, 
ELEM_NUM
, 
FREE_FUN
, 
ARG2
) \

65 
size_t
 
_ôî
; \

66 
_ôî
=0; _ôî<
ELEM_NUM
; _iter++) { \

67 
	`FREE_FUN
(
ELEMS
[
_ôî
], 
ARG2
); \

69 
	`‰ì
(
ELEMS
); \

70 }

	)

77 
	#OFL_UTILS_SUM_ARR_FUN
(
RESULT
, 
ELEMS
, 
ELEM_NUM
, 
LEN_FUN
) \

79 
size_t
 
_ôî
, 
_ªt
; \

81 
_ªt
 = 0; \

82 
_ôî
=0; _ôî<
ELEM_NUM
; _iter++) { \

83 
_ªt
 +
	`LEN_FUN
(
ELEMS
[
_ôî
]); \

86 
RESULT
 = 
_ªt
; \

87 }

	)

90 
	#OFL_UTILS_SUM_ARR_FUN2
(
RESULT
, 
ELEMS
, 
ELEM_NUM
, 
LEN_FUN
, 
ARG2
) \

92 
size_t
 
_ôî
, 
_ªt
; \

94 
_ªt
 = 0; \

95 
_ôî
=0; _ôî<
ELEM_NUM
; _iter++) { \

96 
_ªt
 +
	`LEN_FUN
(
ELEMS
[
_ôî
], 
ARG2
); \

99 
RESULT
 = 
_ªt
; \

100 }

	)

103 
ölöe
 
uöt64_t


104 
	$ht⁄64
(
uöt64_t
 
n
) {

105 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


106  
n
;

108  (((
uöt64_t
)
	`ht⁄l
(
n
)) << 32) + htonl(n >> 32);

110 
	}
}

112 
ölöe
 
uöt64_t


113 
	$¡oh64
(
uöt64_t
 
n
) {

114 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


115  
n
;

117  (((
uöt64_t
)
	`¡ohl
(
n
)) << 32) +Çtohl(n >> 32);

119 
	}
}

	@oflib/ofl.h

32 #i‚de‡
OFL_H


33 
	#OFL_H
 1

	)

35 
	~<sys/ty≥s.h
>

37 
	~"../ö˛ude/›íÊow/›íÊow.h
"

39 
	goÊ_msg_ex≥rimíãr
;

40 
	goÊ_msg_mu…ù¨t_ªque°_hódî
;

41 
	goÊ_msg_mu…ù¨t_ª∂y_hódî
;

42 
	goÊ_a˘i⁄_hódî
;

43 
	goÊ_ö°ru˘i⁄_hódî
;

44 
	goÊ_m©ch_hódî
;

45 
	goÂ_a˘i⁄_hódî
;

46 
	goÂ_ö°ru˘i⁄
;

47 
	goÂ_mu…ù¨t_ª∂y
;

48 
	goÂ_m©ch
;

54 
uöt32_t
 
	toÊ_îr
;

84 
	soÊ_exp_a˘
 {

85 (*
	m∑ck
Ë(
oÊ_a˘i⁄_hódî
 *
	m§c
, 
oÂ_a˘i⁄_hódî
 *
	md°
);

86 
oÊ_îr
 (*
u≈ack
Ë(
oÂ_a˘i⁄_hódî
 *
	m§c
, 
size_t
 *
	mÀn
, 
oÊ_a˘i⁄_hódî
 **
	md°
);

87 (*
	m‰ì
Ë(
oÊ_a˘i⁄_hódî
 *
	ma˘
);

88 
size_t
 (*
oÂ_Àn
Ë(
oÊ_a˘i⁄_hódî
 *
	ma˘
);

89 *(*
	mto_°rög
Ë(
oÊ_a˘i⁄_hódî
 *
	ma˘
);

93 
	soÊ_exp_ö°
 {

94 (*
	m∑ck
Ë(
oÊ_ö°ru˘i⁄_hódî
 *
	m§c
, 
oÂ_ö°ru˘i⁄
 *
	md°
);

95 
oÊ_îr
 (*
u≈ack
Ë(
oÂ_ö°ru˘i⁄
 *
	m§c
, 
size_t
 *
	mÀn
, 
oÊ_ö°ru˘i⁄_hódî
 **
	md°
);

96 (*
	m‰ì
Ë(
oÊ_ö°ru˘i⁄_hódî
 *
	mi
);

97 
size_t
 (*
oÂ_Àn
Ë(
oÊ_ö°ru˘i⁄_hódî
 *
	mi
);

98 *(*
	mto_°rög
Ë(
oÊ_ö°ru˘i⁄_hódî
 *
	mi
);

102 
	soÊ_exp_m©ch
 {

103 (*
	m∑ck
Ë(
oÊ_m©ch_hódî
 *
	m§c
, 
oÂ_m©ch
 *
	md°
);

104 
oÊ_îr
 (*
u≈ack
Ë(
oÂ_m©ch
 *
	m§c
, 
size_t
 *
	mÀn
, 
oÊ_m©ch_hódî
 **
	md°
);

105 (*
	m‰ì
Ë(
oÊ_m©ch_hódî
 *
	mm
);

106 
size_t
 (*
oÂ_Àn
Ë(
oÊ_m©ch_hódî
 *
	mm
);

107 *(*
	mto_°rög
Ë(
oÊ_m©ch_hódî
 *
	mm
);

111 
	soÊ_exp_°©s
 {

112 (*
	mªq_∑ck
Ë(
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
	mmsg
, 
uöt8_t
 **
	mbuf
, 
size_t
 *
	mbuf_Àn
);

113 
oÊ_îr
 (*
ªq_u≈ack
Ë(
oÂ_mu…ù¨t_ªque°
 *
	mos
, 
size_t
 *
	mÀn
, 
oÊ_msg_mu…ù¨t_ªque°_hódî
 **
	mmsg
);

114 (*
	mªq_‰ì
Ë(
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
	mmsg
);

115 *(*
	mªq_to_°rög
Ë(
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
	mmsg
);

116 (*
	mª∂y_∑ck
Ë(
oÊ_msg_mu…ù¨t_ª∂y_hódî
 *
	mmsg
, 
uöt8_t
 **
	mbuf
, 
size_t
 *
	mbuf_Àn
);

117 
oÊ_îr
 (*
ª∂y_u≈ack
Ë(
oÂ_mu…ù¨t_ª∂y
 *
	mos
, 
size_t
 *
	mÀn
, 
oÊ_msg_mu…ù¨t_ª∂y_hódî
 **
	mmsg
);

118 (*
	mª∂y_‰ì
Ë(
oÊ_msg_mu…ù¨t_ª∂y_hódî
 *
	mmsg
);

119 *(*
	mª∂y_to_°rög
Ë(
oÊ_msg_mu…ù¨t_ª∂y_hódî
 *
	mmsg
);

123 
	soÊ_exp_msg
 {

124 (*
	m∑ck
Ë(
oÊ_msg_ex≥rimíãr
 *
	mmsg
, 
uöt8_t
 **
	mbuf
, 
size_t
 *
	mbuf_Àn
);

125 
oÊ_îr
 (*
u≈ack
Ë(
oÂ_hódî
 *
	moh
, 
size_t
 *
	mÀn
, 
oÊ_msg_ex≥rimíãr
 **
	mmsg
);

126 (*
	m‰ì
Ë(
oÊ_msg_ex≥rimíãr
 *
	mmsg
);

127 *(*
	mto_°rög
Ë(
oÊ_msg_ex≥rimíãr
 *
	mmsg
);

131 
	soÊ_exp
 {

132 
oÊ_exp_a˘
 *
	ma˘
;

133 
oÊ_exp_ö°
 *
	mö°
;

134 
oÊ_exp_m©ch
 *
	mm©ch
;

135 
oÊ_exp_°©s
 *
	m°©s
;

136 
oÊ_exp_msg
 *
	mmsg
;

144 
	#OFL_ERROR
 0xffffffff

	)

147 
ölöe
 
oÊ_îr


148 
	$oÊ_îr‹
(
uöt16_t
 
ty≥
, uöt16_à
code
) {

150 
uöt32_t
 
ªt
 = 
ty≥
;

151  0x80000000 | 
ªt
 << 16 | 
code
;

152 
	}
}

155 
ölöe
 
uöt16_t


156 
	$oÊ_îr‹_ty≥
(
oÊ_îr
 
îr‹
) {

157  (0x7fff0000 & 
îr‹
) >> 16;

158 
	}
}

161 
ölöe
 
uöt16_t


162 
	$oÊ_îr‹_code
(
oÊ_îr
 
îr‹
) {

163  
îr‹
 & 0x0000ffff;

164 
	}
}

	@oflib/oxm-match.c

48 
	~"oxm-m©ch.h
"

50 
	~<√töë/icmp6.h
>

51 
	~"hm≠.h
"

52 
	~"hash.h
"

53 
	~"oÂ.h
"

54 
	~"oÂbuf.h
"

55 
	~"byã-‹dî.h
"

56 
	~"∑ckës.h
"

57 
	~"oÂbuf.h
"

58 
	~"oÊib/oÊ-°ru˘s.h
"

59 
	~"oÊib/oÊ-utûs.h
"

60 
	~"oÊib/oÊ-¥öt.h
"

61 
	~"u«lig√d.h
"

62 
	~"byã-‹dî.h
"

63 
	~"../ö˛ude/›íÊow/›íÊow.h
"

65 
	#LOG_MODULE
 
VLM_oxm_m©ch


	)

66 
	~"vlog.h
"

68 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(1, 5);

71 c⁄° 
uöt8_t
 
	gëh_Æl_0s
[
ETH_ADDR_LEN
]

73 c⁄° 
uöt8_t
 
	gëh_Æl_1s
[
ETH_ADDR_LEN
]

75 c⁄° 
uöt8_t
 
	gëh_mˇ°_1
[
ETH_ADDR_LEN
]

77 c⁄° 
uöt8_t
 
	gëh_mˇ°_0
[
ETH_ADDR_LEN
]

80 
oxm_fõld
 
	gÆl_fõlds
[
NUM_OXM_FIELDS
] = {

81 
	#DEFINE_FIELD
(
HEADER
, 
DL_TYPES
, 
NW_PROTO
, 
MASKABLE
) \

82 { 
HMAP_NODE_NULL_INITIALIZER
, 
OFI_OXM_
##
HEADER
, 
OXM_
##HEADER, \

83 
DL_CONVERT
 
DL_TYPES
, 
NW_PROTO
, 
MASKABLE
 },

	)

84 
	#DL_CONVERT
(
T1
, 
T2
Ë{ 
	`CONSTANT_HTONS
(T1), CONSTANT_HTONS(T2Ë}

	)

85 
	~"oxm-m©ch.def
"

89 
hm≠
 
	gÆl_oxm_fõlds
 = 
HMAP_INITIALIZER
(&
Æl_oxm_fõlds
);

92 
	$oxm_öô
()

94 i‡(
	`hm≠_is_em±y
(&
Æl_oxm_fõlds
)) {

95 
i
;

97 
i
 = 0; i < 
NUM_OXM_FIELDS
; i++) {

98 
oxm_fõld
 *
f
 = &
Æl_fõlds
[
i
];

99 
	`hm≠_ö£π
(&
Æl_oxm_fõlds
, &
f
->
hm≠_node
,

100 
	`hash_öt
(
f
->
hódî
, 0));

106 
	#DEFINE_FIELD
(
HEADER
, 
DL_TYPE
, 
NW_PROTO
, 
MASKABLE
) \

107 
OXM_
##
HEADER
: ;

	)

108 
	~"oxm-m©ch.def
"

111 
	}
}

113 
oxm_fõld
 *

114 
	$oxm_fõld_lookup
(
uöt32_t
 
hódî
)

116 
oxm_fõld
 *
f
;

118 
	`oxm_öô
();

119 
	`HMAP_FOR_EACH_WITH_HASH
(
f
, 
oxm_fõld
, 
hm≠_node
, 
	`hash_öt
(
hódî
, 0),

120 &
Æl_oxm_fõlds
) {

121 i‡(
f
->
hódî
 == header) {

122  
f
;

125  
NULL
;

126 
	}
}

129 
oÊ_m©ch_év
 *

130 
	$oxm_m©ch_lookup
(
uöt32_t
 
hódî
, c⁄° 
oÊ_m©ch
 *
omt
)

132 
oÊ_m©ch_év
 *
f
;

135 
	`HMAP_FOR_EACH_WITH_HASH
(
f
, 
oÊ_m©ch_év
, 
hm≠_node
, 
	`hash_öt
(
hódî
, 0),

136 &
omt
->
m©ch_fõlds
) {

137 i‡(
f
->
hódî
 == header) {

139  
f
;

142  
NULL
;

143 
	}
}

146 
boﬁ


147 
	$check_¥e£¡_¥îeq
(c⁄° 
oÊ_m©ch
 *
m©ch
, 
uöt32_t
 
hódî
){

149 
oÊ_m©ch_év
 *
omt
;

152 
	`HMAP_FOR_EACH_WITH_HASH
 (
omt
, 
oÊ_m©ch_év
, 
hm≠_node
, 
	`hash_öt
(
hódî
, 0),

153 &
m©ch
->
m©ch_fõlds
) {

154  
åue
;

156  
Ál£
;

157 
	}
}

159 
boﬁ


160 
	$oxm_¥îeqs_ok
(c⁄° 
oxm_fõld
 *
fõld
, c⁄° 
oÊ_m©ch
 *
ruÀ
)

163 
oÊ_m©ch_év
 *
omt
 = 
NULL
;

166 i‡(
fõld
->
hódî
 =
OXM_OF_IPV6_ND_SLL
 || fõld->hódî =
OXM_OF_IPV6_ND_TARGET
 ){

167 
boﬁ
 
found
 = 
Ál£
;

168 
	`HMAP_FOR_EACH_WITH_HASH
 (
omt
, 
oÊ_m©ch_év
, 
hm≠_node
, 
	`hash_öt
(
OXM_OF_ICMPV6_TYPE
, 0),

169 &
ruÀ
->
m©ch_fõlds
) {

170 i‡(*
omt
->
vÆue
 !
ICMPV6_NEIGHSOL
){

171  
Ál£
;

173 
found
 = 
åue
;

175 if(!
found
)

176  
Ál£
;

179 i‡(
fõld
->
hódî
 =
OXM_OF_IPV6_ND_TLL
 || fõld->hódî =
OXM_OF_IPV6_ND_TARGET
){

180 
boﬁ
 
found
 = 
Ál£
;

181 
	`HMAP_FOR_EACH_WITH_HASH
 (
omt
, 
oÊ_m©ch_év
, 
hm≠_node
, 
	`hash_öt
(
OXM_OF_ICMPV6_TYPE
, 0),

182 &
ruÀ
->
m©ch_fõlds
) {

183 i‡(*
omt
->
vÆue
 !
ICMPV6_NEIGHADV
){

184  
Ál£
;

186 
found
 = 
åue
;

188 if(!
found
)

189  
Ál£
;

193 i‡(
fõld
->
nw_¥Ÿo
){

194 
boﬁ
 
found
 = 
Ál£
;

195 
	`HMAP_FOR_EACH_WITH_HASH
 (
omt
, 
oÊ_m©ch_év
, 
hm≠_node
, 
	`hash_öt
(
OXM_OF_IP_PROTO
, 0),

196 &
ruÀ
->
m©ch_fõlds
) {

197 
uöt8_t
 
ù_¥Ÿo
;

198 
	`mem˝y
(&
ù_¥Ÿo
,
omt
->
vÆue
, (
uöt8_t
));

199 i‡(
fõld
->
nw_¥Ÿo
 !
ù_¥Ÿo
)

200  
Ál£
;

201 
found
 = 
åue
;

203 if(!
found
)

204  
Ál£
;

208 i‡(!
fõld
->
dl_ty≥
[0])

209  
åue
;

211 
	`HMAP_FOR_EACH_WITH_HASH
 (
omt
, 
oÊ_m©ch_év
, 
hm≠_node
, 
	`hash_öt
(
OXM_OF_ETH_TYPE
, 0),

212 &
ruÀ
->
m©ch_fõlds
) {

213 
uöt16_t
 
ëh_ty≥
;

214 
	`mem˝y
(&
ëh_ty≥
, 
omt
->
vÆue
, (
uöt16_t
));

215 i‡(
fõld
->
dl_ty≥
[0] =
	`ht⁄s
(
ëh_ty≥
)) {

216  
åue
;

217 } i‡(
fõld
->
dl_ty≥
[1] && fõld->dl_ty≥[1] =
	`ht⁄s
(
ëh_ty≥
)) {

218  
åue
;

223  
Ál£
;

224 
	}
}

226 
boﬁ


227 
	$check_oxm_dup
(
oÊ_m©ch
 *
m©ch
,c⁄° 
oxm_fõld
 *
om
){

229 
oÊ_m©ch_év
 *
t
;

230 
	`HMAP_FOR_EACH_WITH_HASH
(
t
, 
oÊ_m©ch_év
, 
hm≠_node
 ,
	`hash_öt
(
om
->
hódî
, 0),

231 &
m©ch
->
m©ch_fõlds
) {

232  
åue
;

234  
Ál£
;

236 
	}
}

238 
uöt8_t
* 
	$gë_oxm_vÆue
(
oÊ_m©ch
 *
m
, 
uöt32_t
 
hódî
){

240 
oÊ_m©ch_év
 *
t
;

241 
	`HMAP_FOR_EACH_WITH_HASH
 (
t
, 
oÊ_m©ch_év
, 
hm≠_node
, 
	`hash_öt
(
hódî
, 0),

242 &
m
->
m©ch_fõlds
) {

243  
t
->
vÆue
;

246  
NULL
;

247 
	}
}

250 
	$∑r£_oxm_íåy
(
oÊ_m©ch
 *
m©ch
, c⁄° 
oxm_fõld
 *
f
,

251 c⁄° *
vÆue
, c⁄° *
mask
){

253 
f
->
ödex
) {

254 
OFI_OXM_OF_IN_PORT
: {

255 
uöt32_t
* 
ö_p‹t
 = (uöt32_t*Ë
vÆue
;

256 
	`oÊ_°ru˘s_m©ch_put32
(
m©ch
, 
f
->
hódî
, 
	`¡ohl
(*
ö_p‹t
));

259 
OFI_OXM_OF_IN_PHY_PORT
:{

261 i‡(
	`check_¥e£¡_¥îeq
(
m©ch
,
OXM_OF_IN_PORT
))

262 
	`oÊ_°ru˘s_m©ch_put32
(
m©ch
, 
f
->
hódî
, 
	`¡ohl
(*((
uöt32_t
*Ë
vÆue
)));

263  
	`oÂ_mkîr
(
OFPET_BAD_MATCH
, 
OFPBMC_BAD_PREREQ
);

266 
OFI_OXM_OF_METADATA
:{

267 
	`oÊ_°ru˘s_m©ch_put64
(
m©ch
, 
f
->
hódî
, 
	`¡oh64
(*((
uöt64_t
*Ë
vÆue
)));

270 
OFI_OXM_OF_METADATA_W
:{

271 
	`oÊ_°ru˘s_m©ch_put64m
(
m©ch
, 
f
->
hódî
, 
	`¡oh64
(*((
uöt64_t
*Ë
vÆue
)),Çtoh64(*((uöt64_t*Ë
mask
)));

275 
OFI_OXM_OF_ETH_DST
:

276 
OFI_OXM_OF_ETH_SRC
:{

277 
	`oÊ_°ru˘s_m©ch_put_ëh
(
m©ch
, 
f
->
hódî
,(
uöt8_t
* )
vÆue
);

280 
OFI_OXM_OF_ETH_DST_W
:

281 
OFI_OXM_OF_ETH_SRC_W
:{

282 
	`oÊ_°ru˘s_m©ch_put_ëh_m
(
m©ch
, 
f
->
hódî
,(
uöt8_t
* )
vÆue
, (uöt8_t* )
mask
 );

285 
OFI_OXM_OF_ETH_TYPE
:{

286 
uöt16_t
* 
ëh_ty≥
 = (uöt16_t*Ë
vÆue
;

287 
	`oÊ_°ru˘s_m©ch_put16
(
m©ch
, 
f
->
hódî
, 
	`¡ohs
(*
ëh_ty≥
));

291 
OFI_OXM_OF_VLAN_VID
:{

292 
uöt16_t
* 
vœn_id
 = (uöt16_t*Ë
vÆue
;

293 i‡(
	`¡ohs
(*
vœn_id
)> 
OFPVID_PRESENT
+
VLAN_VID_MAX
){

294  
	`oÂ_mkîr
(
OFPET_BAD_MATCH
, 
OFPBMC_BAD_VALUE
);

297 
	`oÊ_°ru˘s_m©ch_put16
(
m©ch
, 
f
->
hódî
, 
	`¡ohs
(*
vœn_id
));

301 
OFI_OXM_OF_VLAN_VID_W
:{

302 
uöt16_t
* 
vœn_id
 = (uöt16_t*Ë
vÆue
;

303 
uöt16_t
* 
vœn_mask
 = (uöt16_t*Ë
mask
;

305 i‡(
	`¡ohs
(*
vœn_id
Ë> 
OFPVID_PRESENT
+
VLAN_VID_MAX
)

306  
	`oÂ_mkîr
(
OFPET_BAD_MATCH
, 
OFPBMC_BAD_VALUE
);

308 
	`oÊ_°ru˘s_m©ch_put16m
(
m©ch
, 
f
->
hódî
, 
	`¡ohs
(*
vœn_id
),Çtohs(*
vœn_mask
));

312 
OFI_OXM_OF_VLAN_PCP
:{

314 i‡(
	`check_¥e£¡_¥îeq
(
m©ch
,
OXM_OF_VLAN_VID
)){

315 
uöt8_t
 *
p
 = 
	`gë_oxm_vÆue
(
m©ch
,
OXM_OF_VLAN_VID
);

316 i‡(*(
uöt16_t
*Ë
p
 !
OFPVID_NONE
 ){

317 
uöt8_t
 *
v
 = (uöt8_t*Ë
vÆue
;

318 
	`oÊ_°ru˘s_m©ch_put8
(
m©ch
, 
f
->
hódî
, *
v
);

323  
	`oÂ_mkîr
(
OFPET_BAD_MATCH
, 
OFPBMC_BAD_PREREQ
);

326 
OFI_OXM_OF_IP_DSCP
:{

327 
uöt8_t
 *
v
 = (uöt8_t*Ë
vÆue
;

328 i‡(*
v
 & 0xc0) {

329  
	`oÂ_mkîr
(
OFPET_BAD_MATCH
, 
OFPBMC_BAD_VALUE
);

332 
	`oÊ_°ru˘s_m©ch_put8
(
m©ch
, 
f
->
hódî
, *
v
);

336 
OFI_OXM_OF_IP_ECN
:

337 
OFI_OXM_OF_IP_PROTO
:{

338 
uöt8_t
 *
v
 = (uöt8_t*Ë
vÆue
;

339 
	`oÊ_°ru˘s_m©ch_put8
(
m©ch
, 
f
->
hódî
, *
v
);

344 
OFI_OXM_OF_IPV4_SRC
:

345 
OFI_OXM_OF_IPV4_DST
:

346 
OFI_OXM_OF_ARP_TPA
:

347 
OFI_OXM_OF_ARP_SPA
:

348 
	`oÊ_°ru˘s_m©ch_put32
(
m©ch
, 
f
->
hódî
, *((
uöt32_t
*Ë
vÆue
));

350 
OFI_OXM_OF_IPV4_DST_W
:

351 
OFI_OXM_OF_IPV4_SRC_W
:

352 
OFI_OXM_OF_ARP_SPA_W
:

353 
OFI_OXM_OF_ARP_TPA_W
:

354 
	`oÊ_°ru˘s_m©ch_put32m
(
m©ch
, 
f
->
hódî
, *((
uöt32_t
*Ë
vÆue
), *((uöt32_t*Ë
mask
));

356 
OFI_OXM_OF_ARP_SHA
:

357 
OFI_OXM_OF_ARP_THA
:

358 
	`oÊ_°ru˘s_m©ch_put_ëh
(
m©ch
, 
f
->
hódî
,(
uöt8_t
* )
vÆue
);

361 
OFI_OXM_OF_ARP_SHA_W
:

362 
OFI_OXM_OF_ARP_THA_W
:

363 
	`oÊ_°ru˘s_m©ch_put_ëh_m
(
m©ch
, 
f
->
hódî
,(
uöt8_t
* )
vÆue
, (uöt8_t* )
mask
 );

367 
OFI_OXM_OF_IPV6_SRC
:

368 
OFI_OXM_OF_IPV6_DST
:{

369 
	`oÊ_°ru˘s_m©ch_put_ùv6
(
m©ch
, 
f
->
hódî
,(
uöt8_t
* ) 
vÆue
);

372 
OFI_OXM_OF_IPV6_SRC_W
:

373 
OFI_OXM_OF_IPV6_DST_W
:{

374 
	`oÊ_°ru˘s_m©ch_put_ùv6m
(
m©ch
, 
f
->
hódî
,(
uöt8_t
* ) 
vÆue
,(uöt8_t* ) 
mask
);

377 
OFI_OXM_OF_IPV6_FLABEL
:{

378 
	`oÊ_°ru˘s_m©ch_put32
(
m©ch
, 
f
->
hódî
, 
	`¡ohl
(*((
uöt32_t
*Ë
vÆue
)));

381 
OFI_OXM_OF_IPV6_FLABEL_W
:{

382 
	`oÊ_°ru˘s_m©ch_put32m
(
m©ch
, 
f
->
hódî
, 
	`¡ohl
(*((
uöt32_t
*Ë
vÆue
)),Çtohl(*((uöt32_t*Ë
mask
)));

386 
OFI_OXM_OF_TCP_SRC
:

387 
OFI_OXM_OF_TCP_DST
:

389 
OFI_OXM_OF_UDP_SRC
:

390 
OFI_OXM_OF_UDP_DST
:

392 
OFI_OXM_OF_SCTP_SRC
:

393 
OFI_OXM_OF_SCTP_DST
:

394 
	`oÊ_°ru˘s_m©ch_put16
(
m©ch
, 
f
->
hódî
, 
	`¡ohs
(*((
uöt16_t
*Ë
vÆue
)));

398 
OFI_OXM_OF_ICMPV4_TYPE
:

399 
OFI_OXM_OF_ICMPV4_CODE
:

401 
OFI_OXM_OF_ICMPV6_TYPE
:

402 
OFI_OXM_OF_ICMPV6_CODE
:{

403 
uöt8_t
 *
v
 = (uöt8_t*Ë
vÆue
;

404 
	`oÊ_°ru˘s_m©ch_put8
(
m©ch
, 
f
->
hódî
, *
v
);

408 
OFI_OXM_OF_IPV6_ND_TARGET
:

409 
	`oÊ_°ru˘s_m©ch_put_ùv6
(
m©ch
, 
f
->
hódî
,(
uöt8_t
* ) 
vÆue
);

411 
OFI_OXM_OF_IPV6_ND_SLL
:

412 
OFI_OXM_OF_IPV6_ND_TLL
:

413 
	`oÊ_°ru˘s_m©ch_put_ëh
(
m©ch
, 
f
->
hódî
,(
uöt8_t
* )
vÆue
);

416 
OFI_OXM_OF_ARP_OP
:{

417 
	`oÊ_°ru˘s_m©ch_put16
(
m©ch
, 
f
->
hódî
, 
	`¡ohs
(*((
uöt16_t
*Ë
vÆue
)));

420 
OFI_OXM_OF_MPLS_LABEL
:

421 
	`oÊ_°ru˘s_m©ch_put32
(
m©ch
, 
f
->
hódî
, 
	`¡ohl
(*((
uöt32_t
*Ë
vÆue
)));

423 
OFI_OXM_OF_MPLS_TC
:{

424 
uöt8_t
 *
v
 = (uöt8_t*Ë
vÆue
;

425 
	`oÊ_°ru˘s_m©ch_put8
(
m©ch
, 
f
->
hódî
, *
v
);

428 
OFI_OXM_OF_MPLS_BOS
:{

429 
uöt8_t
 *
v
 = (uöt8_t*Ë
vÆue
;

430 
	`oÊ_°ru˘s_m©ch_put8
(
m©ch
, 
f
->
hódî
, *
v
);

433 
OFI_OXM_OF_PBB_ISID
:

434 
	`oÊ_°ru˘s_m©ch_put32
(
m©ch
, 
f
->
hódî
, 
	`¡ohl
(*((
uöt32_t
*Ë
vÆue
)));

436 
OFI_OXM_OF_PBB_ISID_W
:

437 
	`oÊ_°ru˘s_m©ch_put32m
(
m©ch
, 
f
->
hódî
, 
	`¡ohl
(*((
uöt32_t
*Ë
vÆue
)),Çtohl(*((uöt32_t*Ë
mask
)));

439 
OFI_OXM_OF_TUNNEL_ID
:{

440 
	`oÊ_°ru˘s_m©ch_put64
(
m©ch
, 
f
->
hódî
, *((
uöt64_t
*Ë
vÆue
));

443 
OFI_OXM_OF_TUNNEL_ID_W
:{

444 
	`oÊ_°ru˘s_m©ch_put64m
(
m©ch
, 
f
->
hódî
,*((
uöt64_t
*Ë
vÆue
),*((uöt64_t*Ë
mask
));

447 
OFI_OXM_OF_IPV6_EXTHDR
:

448 
	`oÊ_°ru˘s_m©ch_put16
(
m©ch
, 
f
->
hódî
, 
	`¡ohs
(*((
uöt16_t
*Ë
vÆue
)));

450 
OFI_OXM_OF_IPV6_EXTHDR_W
:

451 
	`oÊ_°ru˘s_m©ch_put16m
(
m©ch
, 
f
->
hódî
, 
	`¡ohs
(*((
uöt16_t
*Ë
vÆue
)),¡ohs(*((uöt16_t*Ë
mask
)));

453 
NUM_OXM_FIELDS
:

454 
	`NOT_REACHED
();

456 
	`NOT_REACHED
();

457 
	}
}

467 
	$oxm_puŒ_m©ch
(
oÂbuf
 *
buf
, 
oÊ_m©ch
 * 
m©ch_d°
, 
m©ch_Àn
)

470 
uöt32_t
 
hódî
;

471 
uöt8_t
 *
p
;

472 
p
 = 
	`oÂbuf_åy_puŒ
(
buf
, 
m©ch_Àn
);

474 i‡(!
p
) {

475 
	`VLOG_WARN_RL
(
LOG_MODULE
,&
æ
, "oxm_matchÜength %u,Ñounded upÅoá "

477 "Àngth %d)", 
m©ch_Àn
, 
buf
->
size
);

479  
	`oÂ_mkîr
(
OFPET_BAD_MATCH
, 
OFPBRC_BAD_LEN
);

483 
	`oÊ_°ru˘s_m©ch_öô
(
m©ch_d°
);

485 (
hódî
 = 
	`oxm_íåy_ok
(
p
, 
m©ch_Àn
)) != 0) {

487 
Àngth
 = 
	`OXM_LENGTH
(
hódî
);

488 c⁄° 
oxm_fõld
 *
f
;

489 
îr‹
;

490 
f
 = 
	`oxm_fõld_lookup
(
hódî
);

492 i‡(!
f
) {

493 
îr‹
 = 
	`oÂ_mkîr
(
OFPET_BAD_MATCH
, 
OFPBMC_BAD_FIELD
);

494 
	`VLOG_WARN_RL
(
LOG_MODULE
,&
æ
, "LasÉlse1");

496 i‡(
	`OXM_HASMASK
(
hódî
Ë&& !
f
->
maskabÀ
){

497 
îr‹
 = 
	`oÂ_mkîr
(
OFPET_BAD_MATCH
, 
OFPBMC_BAD_MASK
);

498 
	`VLOG_WARN_RL
(
LOG_MODULE
,&
æ
, "LasÉlse2");

500 i‡(!
	`oxm_¥îeqs_ok
(
f
, 
m©ch_d°
)) {

501 
îr‹
 = 
	`oÂ_mkîr
(
OFPET_BAD_MATCH
, 
OFPBMC_BAD_PREREQ
);

502 
	`VLOG_WARN_RL
(
LOG_MODULE
,&
æ
, "LasÉlse3");

504 i‡(
	`check_oxm_dup
(
m©ch_d°
,
f
)){

505 
îr‹
 = 
	`oÂ_mkîr
(
OFPET_BAD_MATCH
, 
OFPBMC_DUP_FIELD
);

506 
	`VLOG_WARN_RL
(
LOG_MODULE
,&
æ
, "LasÉlse4");

512 
îr‹
 = 
	`∑r£_oxm_íåy
(
m©ch_d°
, 
f
, 
p
 + 4,Ö + 4 + 
Àngth
 / 2);

513 
	`VLOG_WARN_RL
(
LOG_MODULE
,&
æ
, "LasÉlse5");

515 i‡(
îr‹
) {

516 
	`VLOG_WARN_RL
(
LOG_MODULE
,&
æ
, "bad oxm_íåy wôh víd‹=%"
PRIu32
", "

517 "fõld=%"
PRIu32
", hasmask=%"PRIu32",Åype=%"PRIu32" "

519 
	`OXM_VENDOR
(
hódî
), 
	`OXM_FIELD
(header),

520 
	`OXM_HASMASK
(
hódî
), 
	`OXM_TYPE
(header),

521 
îr‹
);

522  
îr‹
;

524 
p
 +4 + 
Àngth
;

525 
m©ch_Àn
 -4 + 
Àngth
;

527  
m©ch_Àn
 ? 
	`oÂ_mkîr
(
OFPET_BAD_MATCH
, 
OFPBMC_BAD_LEN
) : 0;

528 
	}
}

531 
uöt32_t


532 
	$oxm_íåy_ok
(c⁄° *
p
, 
m©ch_Àn
)

534 
∑ylﬂd_Àn
;

535 
uöt32_t
 
hódî
;

537 i‡(
m©ch_Àn
 <= 4) {

538 i‡(
m©ch_Àn
) {

539 
	`VLOG_DBG
(
LOG_MODULE
,"oxm_matchÉnds withÖartial oxm_header");

544 
	`mem˝y
(&
hódî
, 
p
, 4);

545 
hódî
 = 
	`¡ohl
(header);

546 
∑ylﬂd_Àn
 = 
	`OXM_LENGTH
(
hódî
);

547 i‡(!
∑ylﬂd_Àn
) {

548 
	`VLOG_DBG
(
LOG_MODULE
, "oxm_íåy %08"
PRIx32
" has invalidÖayload "

549 "Àngth 0", 
hódî
);

552 i‡(
m©ch_Àn
 < 
∑ylﬂd_Àn
 + 4) {

553 
	`VLOG_DBG
(
LOG_MODULE
, "%"
PRIu32
"-byte oxm_entry but only "

554 "%u byã†À· i¿ox_m©ch", 
∑ylﬂd_Àn
 + 4, 
m©ch_Àn
);

555 
	`VLOG_DBG
(
LOG_MODULE
, "Header == %d"

556 , 
	`OXM_FIELD
(
hódî
));

559  
hódî
;

560 
	}
}

570 
	$oxm_put_hódî
(
oÂbuf
 *
buf
, 
uöt32_t
 
hódî
)

572 
uöt32_t
 
n_hódî
 = 
	`ht⁄l
(
hódî
);

573 
	`oÂbuf_put
(
buf
, &
n_hódî
, Ç_header);

575 
	}
}

578 
	$oxm_put_8
(
oÂbuf
 *
buf
, 
uöt32_t
 
hódî
, 
uöt8_t
 
vÆue
)

580 
	`oxm_put_hódî
(
buf
, 
hódî
);

581 
	`oÂbuf_put
(
buf
, &
vÆue
,  value);

582 
	}
}

585 
	$oxm_put_8w
(
oÂbuf
 *
buf
, 
uöt32_t
 
hódî
, 
uöt8_t
 
vÆue
, 
uöt16_t
 
mask
){

587 
	`oxm_put_hódî
(
buf
, 
hódî
);

588 
	`oÂbuf_put
(
buf
, &
vÆue
,  value);

589 
	`oÂbuf_put
(
buf
, &
mask
,  mask);

591 
	}
}

594 
	$oxm_put_16
(
oÂbuf
 *
buf
, 
uöt32_t
 
hódî
, 
uöt16_t
 
vÆue
)

596 
	`oxm_put_hódî
(
buf
, 
hódî
);

597 
	`oÂbuf_put
(
buf
, &
vÆue
,  value);

598 
	}
}

601 
	$oxm_put_16w
(
oÂbuf
 *
buf
, 
uöt32_t
 
hódî
, 
uöt16_t
 
vÆue
, uöt16_à
mask
)

603 
	`oxm_put_hódî
(
buf
, 
hódî
);

604 
	`oÂbuf_put
(
buf
, &
vÆue
,  value);

605 
	`oÂbuf_put
(
buf
, &
mask
,  mask);

606 
	}
}

609 
	$oxm_put_32
(
oÂbuf
 *
buf
, 
uöt32_t
 
hódî
, uöt32_à
vÆue
)

611 
	`oxm_put_hódî
(
buf
, 
hódî
);

612 
	`oÂbuf_put
(
buf
, &
vÆue
,  value);

613 
	}
}

616 
	$oxm_put_32w
(
oÂbuf
 *
buf
, 
uöt32_t
 
hódî
, uöt32_à
vÆue
, uöt32_à
mask
)

618 
	`oxm_put_hódî
(
buf
, 
hódî
);

619 
	`oÂbuf_put
(
buf
, &
vÆue
,  value);

620 
	`oÂbuf_put
(
buf
, &
mask
,  mask);

621 
	}
}

624 
	$oxm_put_64
(
oÂbuf
 *
buf
, 
uöt32_t
 
hódî
, 
uöt64_t
 
vÆue
)

626 
	`oxm_put_hódî
(
buf
, 
hódî
);

627 
	`oÂbuf_put
(
buf
, &
vÆue
,  value);

628 
	}
}

631 
	$oxm_put_64w
(
oÂbuf
 *
buf
, 
uöt32_t
 
hódî
, 
uöt64_t
 
vÆue
, uöt64_à
mask
)

633 
	`oxm_put_hódî
(
buf
, 
hódî
);

634 
	`oÂbuf_put
(
buf
, &
vÆue
,  value);

635 
	`oÂbuf_put
(
buf
, &
mask
,  mask);

636 
	}
}

639 
	$oxm_put_ëh
(
oÂbuf
 *
buf
, 
uöt32_t
 
hódî
,

640 c⁄° 
uöt8_t
 
vÆue
[
ETH_ADDR_LEN
])

642 
	`oxm_put_hódî
(
buf
, 
hódî
);

643 
	`oÂbuf_put
(
buf
, 
vÆue
, 
ETH_ADDR_LEN
);

645 
	}
}

648 
	$oxm_put_ëhm
(
oÂbuf
 *
buf
, 
uöt32_t
 
hódî
,

649 c⁄° 
uöt8_t
 
vÆue
[
ETH_ADDR_LEN
], c⁄° uöt8_à
mask
[ETH_ADDR_LEN])

651 
	`oxm_put_hódî
(
buf
, 
hódî
);

652 
	`oÂbuf_put
(
buf
, 
vÆue
, 
ETH_ADDR_LEN
);

653 
	`oÂbuf_put
(
buf
, 
mask
, 
ETH_ADDR_LEN
);

654 
	}
}

656 
	$oxm_put_ùv6
(
oÂbuf
 *
buf
, 
uöt32_t
 
hódî
,

657 
uöt8_t
 
vÆue
[
IPv6_ADDR_LEN
]){

658 
	`oxm_put_hódî
(
buf
, 
hódî
);

659 
	`oÂbuf_put
(
buf
, 
vÆue
, 
IPv6_ADDR_LEN
);

660 
	}
}

662 
	$oxm_put_ùv6m
(
oÂbuf
 *
buf
, 
uöt32_t
 
hódî
,

663 
uöt8_t
 
vÆue
[
ETH_ADDR_LEN
], uöt8_à
mask
[ETH_ADDR_LEN]){

664 
	`oxm_put_hódî
(
buf
, 
hódî
);

665 
	`oÂbuf_put
(
buf
, 
vÆue
, 
IPv6_ADDR_LEN
);

666 
	`oÂbuf_put
(
buf
, 
mask
, 
IPv6_ADDR_LEN
);

667 
	}
}

693 
boﬁ


694 
	$is_ªquisôe
(
uöt32_t
 
hódî
){

695 if(
hódî
 =
OXM_OF_IN_PORT
 || hódî =
OXM_OF_ETH_TYPE


696 || 
hódî
 =
OXM_OF_VLAN_VID
 || hódî =
OXM_OF_IP_PROTO
) {

697  
åue
;

699  
Ál£
;

700 
	}
}

703 
	$oxm_put_m©ch
(
oÂbuf
 *
buf
, 
oÊ_m©ch
 *
omt
){

705 
oÊ_m©ch_év
 *
o·
;

706 
°¨t_Àn
 = 
buf
->
size
;

707 
m©ch_Àn
;

712 
	`HMAP_FOR_EACH_WITH_HASH
(
o·
, 
oÊ_m©ch_év
, 
hm≠_node
, 
	`hash_öt
(
OXM_OF_IN_PORT
, 0),

713 &
omt
->
m©ch_fõlds
) {

714 
uöt32_t
 
vÆue
;

715 
	`mem˝y
(&
vÆue
, 
o·
->vÆue,(
uöt32_t
));

716 
	`oxm_put_32
(
buf
,
o·
->
hódî
, 
	`ht⁄l
(
vÆue
));

722 
	`HMAP_FOR_EACH_WITH_HASH
(
o·
, 
oÊ_m©ch_év
, 
hm≠_node
, 
	`hash_öt
(
OXM_OF_ETH_TYPE
, 0),

723 &
omt
->
m©ch_fõlds
) {

724 
uöt16_t
 
vÆue
;

725 
	`mem˝y
(&
vÆue
, 
o·
->vÆue,(
uöt16_t
));

726 
	`oxm_put_16
(
buf
,
o·
->
hódî
, 
	`ht⁄s
(
vÆue
));

730 
	`HMAP_FOR_EACH_WITH_HASH
(
o·
, 
oÊ_m©ch_év
, 
hm≠_node
, 
	`hash_öt
(
OXM_OF_VLAN_VID
, 0),

731 &
omt
->
m©ch_fõlds
) {

732 
uöt16_t
 
vÆue
;

733 
	`mem˝y
(&
vÆue
, 
o·
->vÆue,(
uöt16_t
));

734 
	`oxm_put_16
(
buf
,
o·
->
hódî
, 
	`ht⁄s
(
vÆue
));

738 
	`HMAP_FOR_EACH_WITH_HASH
(
o·
, 
oÊ_m©ch_év
, 
hm≠_node
, 
	`hash_öt
(
OXM_OF_IP_PROTO
, 0),

739 &
omt
->
m©ch_fõlds
) {

740 
uöt8_t
 
vÆue
;

741 
	`mem˝y
(&
vÆue
, 
o·
->vÆue,(
uöt8_t
));

742 
	`oxm_put_8
(
buf
,
o·
->
hódî
, 
vÆue
);

746 
	`HMAP_FOR_EACH
(
o·
, 
oÊ_m©ch_év
, 
hm≠_node
, &
omt
->
m©ch_fõlds
){

748 i‡(
	`is_ªquisôe
(
o·
->
hódî
))

752 
uöt8_t
 
Àngth
 = 
	`OXM_LENGTH
(
o·
->
hódî
) ;

753 
boﬁ
 
has_mask
 =
Ál£
;

754 i‡(
	`OXM_HASMASK
(
o·
->
hódî
)){

755 
Àngth
 =Üength / 2;

756 
has_mask
 = 
åue
;

758 
Àngth
){

759 ((
uöt8_t
)):{

760 
uöt8_t
 
vÆue
;

761 
	`mem˝y
(&
vÆue
, 
o·
->vÆue,(
uöt8_t
));

762 if(!
has_mask
)

763 
	`oxm_put_8
(
buf
,
o·
->
hódî
, 
vÆue
);

765 
uöt8_t
 
mask
;

766 
	`mem˝y
(&
mask
,
o·
->
vÆue
 + 
Àngth
 ,(
uöt8_t
));

767 
	`oxm_put_8w
(
buf
, 
o·
->
hódî
,
vÆue
,
mask
);

771 ((
uöt16_t
)):{

772 
uöt16_t
 
vÆue
;

773 
	`mem˝y
(&
vÆue
, 
o·
->vÆue,(
uöt16_t
));

774 if(!
has_mask
)

775 
	`oxm_put_16
(
buf
,
o·
->
hódî
, 
	`ht⁄s
(
vÆue
));

777 
uöt16_t
 
mask
;

778 
	`mem˝y
(&
mask
,
o·
->
vÆue
 + 
Àngth
 ,(
uöt16_t
));

779 
	`oxm_put_16w
(
buf
, 
o·
->
hódî
,
	`ht⁄s
(
vÆue
),ht⁄s(
mask
));

783 ((
uöt32_t
)):{

784 
uöt32_t
 
vÆue
;

785 
	`mem˝y
(&
vÆue
, 
o·
->vÆue,(
uöt32_t
));

786 if(!
has_mask
)

787 i‡(
o·
->
hódî
 =
OXM_OF_IPV4_DST
 || o·->hódî =
OXM_OF_IPV4_SRC


788 ||
o·
->
hódî
 =
OXM_OF_ARP_SPA
 || o·->hódî =
OXM_OF_ARP_TPA
)

789 
	`oxm_put_32
(
buf
,
o·
->
hódî
, 
vÆue
);

791 
	`oxm_put_32
(
buf
,
o·
->
hódî
, 
	`ht⁄l
(
vÆue
));

793 
uöt32_t
 
mask
;

794 
	`mem˝y
(&
mask
,
o·
->
vÆue
 + 
Àngth
 ,(
uöt32_t
));

795 i‡(
o·
->
hódî
 =
OXM_OF_IPV4_DST_W
|| o·->hódî =
OXM_OF_IPV4_SRC_W


796 ||
o·
->
hódî
 =
OXM_OF_ARP_SPA_W
 || o·->hódî =
OXM_OF_ARP_TPA_W
){

797 
	`oxm_put_32w
(
buf
, 
o·
->
hódî
, 
vÆue
, 
mask
);

800 
	`oxm_put_32w
(
buf
, 
o·
->
hódî
, 
	`ht⁄l
(
vÆue
),ht⁄l(
mask
));

806 ((
uöt64_t
)):{

807 
uöt64_t
 
vÆue
;

808 
	`mem˝y
(&
vÆue
, 
o·
->vÆue,(
uöt64_t
));

809 if(!
has_mask
)

810 
	`oxm_put_64
(
buf
,
o·
->
hódî
, 
	`ht⁄64
(
vÆue
));

812 
uöt64_t
 
mask
;

813 
	`mem˝y
(&
mask
,
o·
->
vÆue
 + 
Àngth
 ,(
uöt64_t
));

814 
	`oxm_put_64w
(
buf
, 
o·
->
hódî
,
	`ht⁄64
(
vÆue
),ht⁄64(
mask
));

818 (
ETH_ADDR_LEN
):{

819 
uöt8_t
 
vÆue
[
ETH_ADDR_LEN
];

820 
	`mem˝y
(&
vÆue
, 
o·
->vÆue,
ETH_ADDR_LEN
);

821 if(!
has_mask
)

822 
	`oxm_put_ëh
(
buf
,
o·
->
hódî
, 
vÆue
);

824 
uöt8_t
 
mask
[
ETH_ADDR_LEN
];

825 
	`mem˝y
(&
mask
,
o·
->
vÆue
 + 
Àngth
 ,
ETH_ADDR_LEN
);

826 
	`oxm_put_ëhm
(
buf
, 
o·
->
hódî
,
vÆue
,
mask
);

830 (
IPv6_ADDR_LEN
):{

831 
uöt8_t
 
vÆue
[
IPv6_ADDR_LEN
];

832 
	`mem˝y
(
vÆue
, 
o·
->vÆue,
IPv6_ADDR_LEN
);

833 if(!
has_mask
)

834 
	`oxm_put_ùv6
(
buf
,
o·
->
hódî
, 
vÆue
);

836 
uöt8_t
 
mask
[
IPv6_ADDR_LEN
];

837 
	`mem˝y
(&
mask
,
o·
->
vÆue
 + 
Àngth
 ,
IPv6_ADDR_LEN
);

838 
	`oxm_put_ùv6m
(
buf
, 
o·
->
hódî
,
vÆue
,
mask
);

846 
m©ch_Àn
 = 
buf
->
size
 - 
°¨t_Àn
;

847 
	`oÂbuf_put_zîos
(
buf
, 
	`ROUND_UP
(
m©ch_Àn
 - 4, 8) - (match_len -4));

848  
m©ch_Àn
;

849 
	}
}

	@oflib/oxm-match.h

46 #i‚de‡
OX_MATCH_H


47 
	#OX_MATCH_H
 1

	)

49 
	~<°döt.h
>

50 
	~<sys/ty≥s.h
>

51 
	~<√töë/ö.h
>

52 
	~"oÂbuf.h
"

53 
	~"hm≠.h
"

54 
	~"∑ckës.h
"

55 
	~"../oÊib/oÊ-°ru˘s.h
"

57 
	#OXM_HEADER__
(
VENDOR
, 
FIELD
, 
HASMASK
, 
LENGTH
) \

58 (((
VENDOR
Ë<< 16Ë| ((
FIELD
Ë<< 9Ë| ((
HASMASK
Ë<< 8Ë| (
LENGTH
))

	)

59 
	#OXM_HEADER
(
VENDOR
, 
FIELD
, 
LENGTH
) \

60 
	`OXM_HEADER__
(
VENDOR
, 
FIELD
, 0, 
LENGTH
)

	)

61 
	#OXM_HEADER_W
(
VENDOR
, 
FIELD
, 
LENGTH
) \

62 
	`OXM_HEADER__
(
VENDOR
, 
FIELD
, 1, (
LENGTH
Ë* 2)

	)

64 
	#OXM_HEADER_VL
(
VENDOR
,
FIELD
) \

65 
	`OXM_HEADER__
(
VENDOR
,
FIELD
,0,0)

	)

67 
	#OXM_HEADER_VL_W
(
VENDOR
,
FIELD
) \

68 
	`OXM_HEADER__
(
VENDOR
,
FIELD
,1,0)

	)

70 
	#OXM_VENDOR
(
HEADER
Ë((HEADERË>> 16)

	)

71 
	#OXM_FIELD
(
HEADER
Ë(((HEADERË>> 9Ë& 0x7f)

	)

72 
	#OXM_TYPE
(
HEADER
Ë(((HEADERË>> 9Ë& 0x7fffff)

	)

73 
	#OXM_HASMASK
(
HEADER
Ë(((HEADERË>> 8Ë& 1)

	)

74 
	#OXM_LENGTH
(
HEADER
Ë((HEADERË& 0xff)

	)

75 
	#VENDOR_FROM_TYPE
(
TYPE
Ë((TYPEË>> 7)

	)

76 
	#FIELD_FROM_TYPE
(
TYPE
Ë((TYPEË& 0x7f)

	)

78 
	#OXM_MAKE_WILD_HEADER
(
HEADER
) \

79 
	`OXM_HEADER_W
(
	`OXM_VENDOR
(
HEADER
), 
	`OXM_FIELD
(HEADER), 
	`OXM_LENGTH
(HEADER))

	)

90 
	#OXM_OF_IN_PORT
 
	`OXM_HEADER
 (0x8000, 0, 4)

	)

98 
	#OXM_OF_IN_PHY_PORT
 
	`OXM_HEADER
 (0x8000, 1, 4)

	)

101 
	#OXM_OF_METADATA
 
	`OXM_HEADER
 (0x8000, 2, 8)

	)

102 
	#OXM_OF_METADATA_W
 
	`OXM_HEADER_W
 (0x8000, 2, 8)

	)

105 
	#OXM_OF_ETH_DST
 
	`OXM_HEADER
 (0x8000,3,6)

	)

106 
	#OXM_OF_ETH_DST_W
 
	`OXM_HEADER_W
(0x8000,3,6)

	)

109 
	#OXM_OF_ETH_SRC
 
	`OXM_HEADER
 (0x8000, 4,6)

	)

110 
	#OXM_OF_ETH_SRC_W
 
	`OXM_HEADER_W
(0x8000,4,6)

	)

113 
	#OXM_OF_ETH_TYPE
 
	`OXM_HEADER
 (0x8000, 5, 2)

	)

116 
	#OXM_OF_VLAN_VID
 
	`OXM_HEADER
 (0x8000, 6, 2)

	)

117 
	#OXM_OF_VLAN_VID_W
 
	`OXM_HEADER_W
 (0x8000, 6, 2)

	)

120 
	#OXM_OF_VLAN_PCP
 
	`OXM_HEADER
 (0x8000, 7, 1)

	)

124 
	#OXM_OF_IP_DSCP
 
	`OXM_HEADER
 (0x8000, 8, 1)

	)

127 
	#OXM_OF_IP_ECN
 
	`OXM_HEADER
 (0x8000, 9, 1)

	)

130 
	#OXM_OF_IP_PROTO
 
	`OXM_HEADER
 (0x8000, 10, 1)

	)

133 
	#OXM_OF_IPV4_SRC
 
	`OXM_HEADER
 (0x8000,11, 4)

	)

134 
	#OXM_OF_IPV4_SRC_W
 
	`OXM_HEADER_W
 (0x8000,11, 4)

	)

137 
	#OXM_OF_IPV4_DST
 
	`OXM_HEADER
 (0x8000,12 , 4)

	)

138 
	#OXM_OF_IPV4_DST_W
 
	`OXM_HEADER_W
 (0x8000,12 , 4)

	)

141 
	#OXM_OF_TCP_SRC
 
	`OXM_HEADER
 (0x8000, 13, 2)

	)

144 
	#OXM_OF_TCP_DST
 
	`OXM_HEADER
 (0x8000, 14, 2)

	)

147 
	#OXM_OF_UDP_SRC
 
	`OXM_HEADER
 (0x8000, 15, 2)

	)

150 
	#OXM_OF_UDP_DST
 
	`OXM_HEADER
 (0x8000, 16, 2)

	)

153 
	#OXM_OF_SCTP_SRC
 
	`OXM_HEADER
 (0x8000, 17, 2)

	)

156 
	#OXM_OF_SCTP_DST
 
	`OXM_HEADER
 (0x8000, 18, 2)

	)

159 
	#OXM_OF_ICMPV4_TYPE
 
	`OXM_HEADER
 (0x8000, 19, 1)

	)

162 
	#OXM_OF_ICMPV4_CODE
 
	`OXM_HEADER
 (0x8000, 20, 1)

	)

165 
	#OXM_OF_ARP_OP
 
	`OXM_HEADER
 (0x8000,21, 2)

	)

168 
	#OXM_OF_ARP_SPA
 
	`OXM_HEADER
 (0x8000,22, 4)

	)

169 
	#OXM_OF_ARP_SPA_W
 
	`OXM_HEADER_W
 (0x8000,22, 4)

	)

172 
	#OXM_OF_ARP_TPA
 
	`OXM_HEADER
 (0x8000,23 , 4)

	)

173 
	#OXM_OF_ARP_TPA_W
 
	`OXM_HEADER_W
 (0x8000,23 , 4)

	)

176 
	#OXM_OF_ARP_SHA
 
	`OXM_HEADER
 (0x8000,24,6)

	)

177 
	#OXM_OF_ARP_SHA_W
 
	`OXM_HEADER_W
(0x8000,24,6)

	)

180 
	#OXM_OF_ARP_THA
 
	`OXM_HEADER
 (0x8000, 25,6)

	)

181 
	#OXM_OF_ARP_THA_W
 
	`OXM_HEADER_W
(0x8000,25,6)

	)

184 
	#OXM_OF_IPV6_SRC
 
	`OXM_HEADER
 (0x8000, 26, 16)

	)

185 
	#OXM_OF_IPV6_SRC_W
 
	`OXM_HEADER_W
(0x8000, 26, 16)

	)

188 
	#OXM_OF_IPV6_DST
 
	`OXM_HEADER
 (0x8000, 27, 16)

	)

189 
	#OXM_OF_IPV6_DST_W
 
	`OXM_HEADER_W
(0x8000, 27, 16)

	)

192 
	#OXM_OF_IPV6_FLABEL
 
	`OXM_HEADER
 (0x8000, 28, 4)

	)

193 
	#OXM_OF_IPV6_FLABEL_W
 
	`OXM_HEADER_W
 (0x8000, 28, 4)

	)

196 
	#OXM_OF_ICMPV6_TYPE
 
	`OXM_HEADER
 (0x8000, 29, 1)

	)

199 
	#OXM_OF_ICMPV6_CODE
 
	`OXM_HEADER
 (0x8000, 30, 1)

	)

202 
	#OXM_OF_IPV6_ND_TARGET
 
	`OXM_HEADER
 (0x8000, 31, 16)

	)

205 
	#OXM_OF_IPV6_ND_SLL
 
	`OXM_HEADER
 (0x8000, 32, 6)

	)

208 
	#OXM_OF_IPV6_ND_TLL
 
	`OXM_HEADER
 (0x8000, 33, 6)

	)

211 
	#OXM_OF_MPLS_LABEL
 
	`OXM_HEADER
 (0x8000, 34, 4)

	)

214 
	#OXM_OF_MPLS_TC
 
	`OXM_HEADER
 (0x8000, 35, 1)

	)

216 
	#OXM_OF_MPLS_BOS
 
	`OXM_HEADER
 (0x8000, 36, 1)

	)

218 
	#OXM_OF_PBB_ISID
 
	`OXM_HEADER
 (0x8000, 37, 4)

	)

219 
	#OXM_OF_PBB_ISID_W
 
	`OXM_HEADER_W
 (0x8000, 37, 4)

	)

221 
	#OXM_OF_TUNNEL_ID
 
	`OXM_HEADER
 (0x8000, 38, 8)

	)

222 
	#OXM_OF_TUNNEL_ID_W
 
	`OXM_HEADER_W
 (0x8000, 38, 8)

	)

224 
	#OXM_OF_IPV6_EXTHDR
 
	`OXM_HEADER
 (0x8000, 39, 2)

	)

225 
	#OXM_OF_IPV6_EXTHDR_W
 
	`OXM_HEADER_W
 (0x8000, 39, 2)

	)

233 
	#OXM_OF_IPV6_TC
 
	`OXM_HEADER
 (0x0002, 5, 1)

	)

234 
	#OXM_OF_IPV6_TC_W
 
	`OXM_HEADER_W
 (0x0002, 5, 1)

	)

237 
	#OXM_OF_IPV6_HBH_ID
 
	`OXM_HEADER
 (0x0002, 8, 1)

	)

238 
	#OXM_OF_IPV6_HBH_ID_W
 
	`OXM_HEADER_W
 (0x0002, 8, 1)

	)

240 
	#OXM_OF_IPV6_HBH_OPT_CODE
 
	`OXM_HEADER
 (0x0002, 9, 1)

	)

242 
	#OXM_OF_IPV6_HBH_OPT_VALUE
 
	`OXM_HEADER_VL
 (0x0002, 10)

	)

245 
	#OXM_OF_IPV6_DOH_ID
 
	`OXM_HEADER
 (0x0002, 16, 1)

	)

246 
	#OXM_OF_IPV6_DOH_ID_W
 
	`OXM_HEADER_W
 (0x0002, 16, 1)

	)

248 
	#OXM_OF_IPV6_DOH_OPT_CODE
 
	`OXM_HEADER
 (0x0002, 17, 1)

	)

250 
	#OXM_OF_IPV6_DOH_OPT_VALUE
 
	`OXM_HEADER_VL
 (0x0002, 18)

	)

254 
	#OXM_OF_IPV6_RH_ID
 
	`OXM_HEADER
 (0x0002, 24, 1)

	)

255 
	#OXM_OF_IPV6_RH_ID_W
 
	`OXM_HEADER_W
 (0x0002, 24, 1)

	)

257 
	#OXM_OF_IPV6_RH_ADDRESS
 
	`OXM_HEADER
 (0x0002, 25, 16)

	)

260 
	#OXM_OF_IPV6_FH_ID
 
	`OXM_HEADER
 (0x0002, 32, 1)

	)

261 
	#OXM_OF_IPV6_FH_ID_W
 
	`OXM_HEADER_W
 (0x0002, 32, 1)

	)

264 
	#OXM_OF_IPV6_AH_ID
 
	`OXM_HEADER
 (0x0002, 40, 1)

	)

265 
	#OXM_OF_IPV6_AH_ID_W
 
	`OXM_HEADER_W
 (0x0002, 40, 1)

	)

268 
	#OXM_OF_IPV6_ESP_ID
 
	`OXM_HEADER
 (0x0002, 48, 1)

	)

271 
	#OXM_OF_IPV6_MH_ID
 
	`OXM_HEADER
 (0x0002, 56, 1)

	)

278 
	#OXM_OF_MPLS_TTL
 
	`OXM_HEADER
 (0x0002, 80, 4)

	)

281 
	#OXM_OF_IPV4_TTL
 
	`OXM_HEADER
 (0x0002, 81, 1)

	)

283 
	eoxm_fõld_ödex
 {

284 
	#DEFINE_FIELD
(
HEADER
,
DL_TYPES
, 
NW_PROTO
, 
MASKABLE
) \

285 
OFI_OXM_
##
HEADER
,

	)

286 
	~"oxm-m©ch.def
"

287 
	mNUM_OXM_FIELDS
 = 56

290 
	soxm_fõld
 {

291 
hm≠_node
 
	mhm≠_node
;

292 
oxm_fõld_ödex
 
	mödex
;

293 
uöt32_t
 
	mhódî
;

294 
uöt16_t
 
	mdl_ty≥
[
N_OXM_DL_TYPES
];

295 
uöt8_t
 
	mnw_¥Ÿo
;

296 
boﬁ
 
	mmaskabÀ
;

300 
oxm_fõld
 
Æl_fõlds
[
NUM_OXM_FIELDS
];

302 
oxm_fõld
 *

303 
oxm_fõld_lookup
(
uöt32_t
 
hódî
);

305 
boﬁ


306 
oxm_¥îeqs_ok
(c⁄° 
oxm_fõld
 *
fõld
, c⁄° 
oÊ_m©ch
 *
ruÀ
);

309 
oxm_puŒ_m©ch
(
oÂbuf
 * 
buf
, 
oÊ_m©ch
 *
m©ch_d°
, 
m©ch_Àn
);

311 
oxm_put_m©ch
(
oÂbuf
 *
buf
, 
oÊ_m©ch
 *
omt
);

313 
oÊ_m©ch_év
 *

314 
oxm_m©ch_lookup
(
uöt32_t
 
hódî
, c⁄° 
oÊ_m©ch
 *
omt
);

316 
uöt32_t
 
oxm_íåy_ok
(const *, );

319 
oxm_fõld_byãs
(
uöt32_t
 
hódî
);

322 
oxm_fõld_bôs
(
uöt32_t
 
hódî
);

	@secchan/discovery.c

34 
	~<c⁄fig.h
>

35 
	~"discovîy.h
"

36 
	~<öây≥s.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~"dh˝-˛õ¡.h
"

40 
	~"dh˝.h
"

41 
	~"√tdev.h
"

42 
	~"›íÊow/›íÊow.h
"

43 
	~"∑ckës.h
"

44 
	~"p‹t-w©chî.h
"

45 
	~"£cch™.h
"

46 
	~"°©us.h
"

48 
	~"vlog.h
"

50 
	#LOG_MODULE
 
VLM_discovîy


	)

52 
	sdiscovîy


54 c⁄° 
£âögs
 *
	ms
;

55 
dh˛õ¡
 *
	mdh˝
;

56 
	mn_ch™ges
;

59 
modify_dh˝_ªque°
(
dh˝_msg
 *, *
aux
);

60 
boﬁ
 
vÆid©e_dh˝_of„r
(c⁄° 
dh˝_msg
 *, *
aux
);

62 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

65 
	$discovîy_°©us_cb
(
°©us_ª∂y
 *
§
, *
d_
)

67 
discovîy
 *
d
 = 
d_
;

69 
	`°©us_ª∂y_put
(
§
, "ac˚±-ªmŸe=%s", 
d
->
s
->
ac˚±_c⁄åﬁÀr_ª
);

70 
	`°©us_ª∂y_put
(
§
, "n-ch™ges=%d", 
d
->
n_ch™ges
);

71 i‡(
d
->
dh˝
) {

72 
	`°©us_ª∂y_put
(
§
, "°©e=%s", 
	`dh˛õ¡_gë_°©e
(
d
->
dh˝
));

73 
	`°©us_ª∂y_put
(
§
, "state-elapsed=%u",

74 
	`dh˛õ¡_gë_°©e_ñ≠£d
(
d
->
dh˝
));

75 i‡(
	`dh˛õ¡_is_bound
(
d
->
dh˝
)) {

76 
uöt32_t
 
ù
 = 
	`dh˛õ¡_gë_ù
(
d
->
dh˝
);

77 
uöt32_t
 
√tmask
 = 
	`dh˛õ¡_gë_√tmask
(
d
->
dh˝
);

78 
uöt32_t
 
rouãr
 = 
	`dh˛õ¡_gë_rouãr
(
d
->
dh˝
);

80 c⁄° 
dh˝_msg
 *
cfg
 = 
	`dh˛õ¡_gë_c⁄fig
(
d
->
dh˝
);

81 
uöt32_t
 
dns_£rvî
;

82 *
domaö_«me
;

83 
i
;

85 
	`°©us_ª∂y_put
(
§
, "ù="
IP_FMT
, 
	`IP_ARGS
(&
ù
));

86 
	`°©us_ª∂y_put
(
§
, "√tmask="
IP_FMT
, 
	`IP_ARGS
(&
√tmask
));

87 i‡(
rouãr
) {

88 
	`°©us_ª∂y_put
(
§
, "rouãr="
IP_FMT
, 
	`IP_ARGS
(&
rouãr
));

91 
i
 = 0; 
	`dh˝_msg_gë_ù
(
cfg
, 
DHCP_CODE_DNS_SERVER
, i,

92 &
dns_£rvî
);

93 
i
++) {

94 
	`°©us_ª∂y_put
(
§
, "dns%d="
IP_FMT
, 
i
, 
	`IP_ARGS
(&
dns_£rvî
));

97 
domaö_«me
 = 
	`dh˝_msg_gë_°rög
(
cfg
, 
DHCP_CODE_DOMAIN_NAME
);

98 i‡(
domaö_«me
) {

99 
	`°©us_ª∂y_put
(
§
, "domaö=%s", 
domaö_«me
);

100 
	`‰ì
(
domaö_«me
);

103 
	`°©us_ª∂y_put
(
§
, "lease-remaining=%u",

104 
	`dh˛õ¡_gë_Àa£_ªmaöög
(
d
->
dh˝
));

107 
	}
}

110 
	$discovîy_loˇl_p‹t_cb
(c⁄° 
oÂ_p‹t
 *
p‹t
, *
d_
)

112 
discovîy
 *
d
 = 
d_
;

113 i‡(
p‹t
) {

114 
«me
[
OFP_MAX_PORT_NAME_LEN
 + 1];

115 
√tdev
 *netdev;

116 
ªtvÆ
;

119 
	`gë_p‹t_«me
(
p‹t
, 
«me
, Çame);

120 i‡(
d
->
dh˝
 && !
	`°rcmp
(
	`√tdev_gë_«me
(
	`dh˛õ¡_gë_√tdev
(d->dhcp)),

121 
«me
)) {

126 
	`dh˛õ¡_de°roy
(
d
->
dh˝
);

127 
d
->
dh˝
 = 
NULL
;

130 
ªtvÆ
 = 
	`√tdev_›í
(
«me
, 
NETDEV_ETH_TYPE_NONE
, &
√tdev
);

131 i‡(
ªtvÆ
) {

132 
	`VLOG_ERR
(
LOG_MODULE
, "CouldÇot open %s device, discovery disabled: %s",

133 
«me
, 
	`°ªº‹
(
ªtvÆ
));

136 
ªtvÆ
 = 
	`√tdev_tu∫_Êags_⁄
(
√tdev
, 
NETDEV_UP
, 
åue
);

137 i‡(
ªtvÆ
) {

138 
	`VLOG_ERR
(
LOG_MODULE
, "CouldÇot bring %s device up, discovery disabled: %s",

139 
«me
, 
	`°ªº‹
(
ªtvÆ
));

142 
	`√tdev_˛o£
(
√tdev
);

145 
ªtvÆ
 = 
	`dh˛õ¡_¸óã
(
«me
, 
modify_dh˝_ªque°
,

146 
vÆid©e_dh˝_of„r
, (*Ë
d
->
s
, &d->
dh˝
);

147 i‡(
ªtvÆ
) {

148 
	`VLOG_ERR
(
LOG_MODULE
, "FailedÅo initialize DHCP client, "

149 "discovîy dißbÀd: %s", 
	`°ªº‹
(
ªtvÆ
));

152 
	`dh˛õ¡_£t_max_timeout
(
d
->
dh˝
, 3);

153 
	`dh˛õ¡_öô
(
d
->
dh˝
, 0);

155 
	`dh˛õ¡_de°roy
(
d
->
dh˝
);

156 
d
->
dh˝
 = 
NULL
;

158 
	}
}

161 
discovîy
 *

162 
	$discovîy_öô
(c⁄° 
£âögs
 *
s
, 
p‹t_w©chî
 *
pw
,

163 
swôch_°©us
 *
ss
)

165 
discovîy
 *
d
;

167 
d
 = 
	`xmÆloc
( *d);

168 
d
->
s
 = s;

169 
d
->
dh˝
 = 
NULL
;

170 
d
->
n_ch™ges
 = 0;

172 
	`swôch_°©us_ªgi°î_ˇãg‹y
(
ss
, "discovîy", 
discovîy_°©us_cb
, 
d
);

173 
	`p‹t_w©chî_ªgi°î_loˇl_p‹t_ˇŒback
(
pw
, 
discovîy_loˇl_p‹t_cb
, 
d
);

175  
d
;

176 
	}
}

179 
	$discovîy_que°i⁄_c⁄√˘ivôy
(
discovîy
 *
d
)

181 i‡(
d
->
dh˝
) {

182 
	`dh˛õ¡_f‹˚_ª√w
(
d
->
dh˝
, 15);

184 
	}
}

186 
boﬁ


187 
	$discovîy_run
(
discovîy
 *
d
, **
c⁄åﬁÀr_«me
)

189 i‡(!
d
->
dh˝
) {

190 *
c⁄åﬁÀr_«me
 = 
NULL
;

191  
åue
;

194 
	`dh˛õ¡_run
(
d
->
dh˝
);

195 i‡(!
	`dh˛õ¡_ch™ged
(
d
->
dh˝
)) {

196  
Ál£
;

199 
	`dh˛õ¡_c⁄figuª_√tdev
(
d
->
dh˝
);

200 i‡(
d
->
s
->
upd©e_ªsﬁv_c⁄f
) {

201 
	`dh˛õ¡_upd©e_ªsﬁv_c⁄f
(
d
->
dh˝
);

204 i‡(
	`dh˛õ¡_is_bound
(
d
->
dh˝
)) {

205 *
c⁄åﬁÀr_«me
 = 
	`dh˝_msg_gë_°rög
(
	`dh˛õ¡_gë_c⁄fig
(
d
->
dh˝
),

206 
DHCP_CODE_OFP_CONTROLLER_VCONN
);

207 
	`VLOG_INFO
(
LOG_MODULE
, "%s: discovîed c⁄åﬁÀr", *
c⁄åﬁÀr_«me
);

208 
d
->
n_ch™ges
++;

210 *
c⁄åﬁÀr_«me
 = 
NULL
;

211 i‡(
d
->
n_ch™ges
) {

212 
	`VLOG_INFO
(
LOG_MODULE
, "discovered controllerÇoÜongerávailable");

213 
d
->
n_ch™ges
++;

216  
åue
;

217 
	}
}

220 
	$discovîy_waô
(
discovîy
 *
d
)

222 i‡(
d
->
dh˝
) {

223 
	`dh˛õ¡_waô
(
d
->
dh˝
);

225 
	}
}

228 
	$modify_dh˝_ªque°
(
dh˝_msg
 *
msg
, *
aux
 
UNUSED
)

230 
	`dh˝_msg_put_°rög
(
msg
, 
DHCP_CODE_VENDOR_CLASS
, "OpenFlow");

231 
	}
}

233 
boﬁ


234 
	$vÆid©e_dh˝_of„r
(c⁄° 
dh˝_msg
 *
msg
, *
s_
)

236 c⁄° 
£âögs
 *
s
 = 
s_
;

237 *
vc⁄n_«me
;

238 
boﬁ
 
ac˚±
;

240 
vc⁄n_«me
 = 
	`dh˝_msg_gë_°rög
(
msg
, 
DHCP_CODE_OFP_CONTROLLER_VCONN
);

241 i‡(!
vc⁄n_«me
) {

242 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "rejecting DHCP offer missing controller vconn");

243  
Ál£
;

245 
ac˚±
 = !
	`ªgexec
(&
s
->
ac˚±_c⁄åﬁÀr_ªgex
, 
vc⁄n_«me
, 0, 
NULL
, 0);

246 i‡(!
ac˚±
) {

247 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "rejecting controller vconnÅhat failsÅo match %s",

248 
s
->
ac˚±_c⁄åﬁÀr_ª
);

250 
	`‰ì
(
vc⁄n_«me
);

251  
ac˚±
;

252 
	}
}

	@secchan/discovery.h

34 #i‚de‡
DISCOVERY_H


35 
	#DISCOVERY_H
 1

	)

37 
	~<°dboﬁ.h
>

39 
	g£âögs
;

40 
	gp‹t_w©chî
;

41 
	gswôch_°©us
;

43 
discovîy
 *
discovîy_öô
(c⁄° 
£âögs
 *,

44 
p‹t_w©chî
 *,

45 
swôch_°©us
 *);

46 
discovîy_que°i⁄_c⁄√˘ivôy
(
discovîy
 *);

47 
boﬁ
 
discovîy_run
(
discovîy
 *, **
c⁄åﬁÀr_«me
);

48 
discovîy_waô
(
discovîy
 *);

	@secchan/failover.c

33 
	~<c⁄fig.h
>

34 
	~<°dlib.h
>

35 
	~<°ddef.h
>

36 
	~<°rög.h
>

38 
	~"utû.h
"

39 
	~"rc⁄n.h
"

40 
	~"£cch™.h
"

41 
	~"°©us.h
"

42 
	~"timevÆ.h
"

43 
	~"ßt-m©h.h
"

44 
	~"Áûovî.h
"

45 
	~"vlog.h
"

47 
	#LOG_MODULE
 
VLM_Áûovî


	)

49 
	sÁûovî_≥î
 {

50 
time_t
 
	mïoch
;

53 
	sÁûovî_c⁄ãxt
 {

54 c⁄° 
£âögs
 *
	m£âögs
;

55 c⁄° 
£cch™
 *
	m£cch™
;

56 
rc⁄n
 *
	mªmŸe_rc⁄n
;

57 
	mödex
;

58 
Áûovî_≥î
 *
	m≥îs
[
MAX_CONTROLLERS
];

61 
Áûovî_°©us_cb
(
°©us_ª∂y
 *, *);

62 
boﬁ
 
is_timed_out
(c⁄° 
Áûovî_≥î
 *, );

63 
Áûovî_≥riodic_cb
(*);

66 
	$Áûovî_°©us_cb
(
°©us_ª∂y
 *°©us_ª∂y, *
c⁄ãxt_
)

68 
Áûovî_c⁄ãxt
 *
c⁄ãxt
 = 
c⁄ãxt_
;

69 
i
;

71 
	`°©us_ª∂y_put
(
°©us_ª∂y
, "num-controllers=%d",

72 
c⁄ãxt
->
£âögs
->
num_c⁄åﬁÀrs
);

74 
i
 = 0; i < 
MAX_CONTROLLERS
; ++i) {

75 i‡(
c⁄ãxt
->
£âögs
->
c⁄åﬁÀr_«mes
[
i
] =
NULL
)

77 
	`°©us_ª∂y_put
(
°©us_ª∂y
, "controller#%d=%s",

78 
i
, 
c⁄ãxt
->
£âögs
->
c⁄åﬁÀr_«mes
[i]);

80 
	}
}

82 
boﬁ


83 
	$is_timed_out
(c⁄° 
Áûovî_≥î
 *
≥î
, 
max_backoff
)

85 
ßt_vÆue
 = 
	`ßt_add
(
≥î
->
ïoch
, 
max_backoff
);

86  
	`time_now
(Ë>
ßt_vÆue
;

87 
	}
}

90 
	$Áûovî_≥riodic_cb
(*
c⁄ãxt_
)

92 
Áûovî_c⁄ãxt
 *
c⁄ãxt
 = 
c⁄ãxt_
;

93 *
cuº_≥î
 = 
NULL
;

94 *
¥ev_≥î
 = 
NULL
;

96 i‡(
	`rc⁄n_is_c⁄√˘ed
(
c⁄ãxt
->
ªmŸe_rc⁄n
))

99 i‡(!
	`is_timed_out
(
c⁄ãxt
->
≥îs
[c⁄ãxt->
ödex
],

100 
c⁄ãxt
->
£âögs
->
max_backoff
)) {

104 
	`rc⁄n_disc⁄√˘
(
c⁄ãxt
->
ªmŸe_rc⁄n
);

105 
¥ev_≥î
 = (*)
c⁄ãxt
->
£âögs
->
c⁄åﬁÀr_«mes
[c⁄ãxt->
ödex
];

106 
c⁄ãxt
->
ödex
 = (context->index + 1)

107 % 
c⁄ãxt
->
£âögs
->
num_c⁄åﬁÀrs
;

108 
cuº_≥î
 = (*)
c⁄ãxt
->
£âögs
->
c⁄åﬁÀr_«mes
[c⁄ãxt->
ödex
];

109 
	`rc⁄n_c⁄√˘
(
c⁄ãxt
->
ªmŸe_rc⁄n
,

110 
c⁄ãxt
->
£âögs
->
c⁄åﬁÀr_«mes
[c⁄ãxt->
ödex
]);

111 
c⁄ãxt
->
≥îs
[c⁄ãxt->
ödex
]->
ïoch
 = 
	`time_now
();

112 
	`VLOG_INFO
(
LOG_MODULE
, "Swôchög ovîÅÿ%s, from %s", 
cuº_≥î
, 
¥ev_≥î
);

113 
	}
}

116 
	$Áûovî_°¨t
(
£cch™
 *£cch™, c⁄° 
£âögs
 *settings,

117 
swôch_°©us
 *swôch_°©us, 
rc⁄n
 *
ªmŸe_rc⁄n
)

119 
Áûovî_c⁄ãxt
 *
c⁄ãxt
 = 
NULL
;

120 
i
;

121 
hook_˛ass
 
Áûovî_hook_˛ass
 = {

122 
NULL
,

123 
NULL
,

124 
Áûovî_≥riodic_cb
,

125 
NULL
,

126 
NULL
,

129 
c⁄ãxt
 = 
	`xmÆloc
((*context));

130 
c⁄ãxt
->
£âögs
 = settings;

131 
c⁄ãxt
->
£cch™
 = secchan;

132 
c⁄ãxt
->
ªmŸe_rc⁄n
 =Ñemote_rconn;

133 
c⁄ãxt
->
ödex
 = 0;

134 
i
 = 0; i < 
MAX_CONTROLLERS
; ++i) {

135 
c⁄ãxt
->
≥îs
[
i
] = 
NULL
;

136 i‡(
£âögs
->
c⁄åﬁÀr_«mes
[
i
] =
NULL
)

138 
c⁄ãxt
->
≥îs
[
i
] = 
	`xmÆloc
((
Áûovî_≥î
));

139 
c⁄ãxt
->
≥îs
[
i
]->
ïoch
 = 
	`time_now
();

142 
	`swôch_°©us_ªgi°î_ˇãg‹y
(
swôch_°©us
, "failover",

143 
Áûovî_°©us_cb
, 
c⁄ãxt
);

144 
	`add_hook
(
£cch™
, &
Áûovî_hook_˛ass
, 
c⁄ãxt
);

145 
	}
}

	@secchan/failover.h

33 #i‚de‡
FAILOVER_H_


34 
	#FAILOVER_H_
 1

	)

36 
	grc⁄n
;

37 
	g£cch™
;

38 
	g£âögs
;

39 
	gswôch_°©us
;

41 
Áûovî_°¨t
(
£cch™
 *, c⁄° 
£âögs
 *,

42 
swôch_°©us
 *, 
rc⁄n
 *);

	@secchan/in-band.c

34 
	~<c⁄fig.h
>

35 
	~"ö-b™d.h
"

36 
	~<¨∑/öë.h
>

37 
	~<î∫o.h
>

38 
	~<öây≥s.h
>

39 
	~<°rög.h
>

40 
	~"Êow.h
"

41 
	~"mac-À¨nög.h
"

42 
	~"√tdev.h
"

43 
	~"oÂ.h
"

44 
	~"oÂbuf.h
"

45 
	~"›íÊow/›íÊow.h
"

46 
	~"∑ckës.h
"

47 
	~"p‹t-w©chî.h
"

48 
	~"rc⁄n.h
"

49 
	~"£cch™.h
"

50 
	~"°©us.h
"

51 
	~"timevÆ.h
"

52 
	~"vlog.h
"

54 
	#LOG_MODULE
 
VLM_ö_b™d


	)

56 
	sö_b™d_d©a
 {

57 c⁄° 
£âögs
 *
	ms
;

58 
mac_À¨nög
 *
	mml
;

59 
√tdev
 *
	mof_devi˚
;

60 
rc⁄n
 *
	mc⁄åﬁÀr
;

61 
	mn_queued
;

64 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

67 
	$queue_tx
(
rc⁄n
 *
rc
, 
ö_b™d_d©a
 *
ö_b™d
, 
oÂbuf
 *
b
)

69 
	`rc⁄n_£nd_wôh_limô
(
rc
, 
b
, &
ö_b™d
->
n_queued
, 10);

70 
	}
}

72 c⁄° 
uöt8_t
 *

73 
	$gë_c⁄åﬁÀr_mac
(
ö_b™d_d©a
 *
ö_b™d
)

75 
uöt32_t
 
ù
, 
œ°_n⁄zîo_ù
;

76 
uöt8_t
 
mac
[
ETH_ADDR_LEN
], 
œ°_n⁄zîo_mac
[ETH_ADDR_LEN];

77 
time_t
 
√xt_ª‰esh
 = 0;

79 
uöt32_t
 
œ°_ù
 = 
ù
;

81 
time_t
 
now
 = 
	`time_now
();

83 
ù
 = 
	`rc⁄n_gë_ù
(
ö_b™d
->
c⁄åﬁÀr
);

84 i‡(
œ°_ù
 !
ù
 || !
√xt_ª‰esh
 || 
now
 >=Çext_refresh) {

85 
boﬁ
 
have_mac
;

88 
	`mem£t
(
mac
, 0,  mac);

89 i‡(
ù
 && 
ö_b™d
->
of_devi˚
) {

90 
ªtvÆ
 = 
	`√tdev_¨p_lookup
(
ö_b™d
->
of_devi˚
, 
ù
, 
mac
);

91 i‡(
ªtvÆ
) {

92 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "cannotÜook up controller hwáddress "

93 "("
IP_FMT
"): %s", 
	`IP_ARGS
(&
ù
), 
	`°ªº‹
(
ªtvÆ
));

96 
have_mac
 = !
	`ëh_addr_is_zîo
(
mac
);

99 i‡(
ù
 && i∞!
œ°_n⁄zîo_ù
) {

100 
	`VLOG_DBG
(
LOG_MODULE
, "c⁄åﬁÀ∏IPáddªs†ch™ged from "
IP_FMT


101 "Åÿ"
IP_FMT
, 
	`IP_ARGS
(&
œ°_n⁄zîo_ù
), IP_ARGS(&
ù
));

102 
œ°_n⁄zîo_ù
 = 
ù
;

104 i‡(
have_mac
 && 
	`memcmp
(
œ°_n⁄zîo_mac
, 
mac
, 
ETH_ADDR_LEN
)) {

105 
	`VLOG_DBG
(
LOG_MODULE
, "c⁄åﬁÀ∏MACáddªs†ch™ged from "
ETH_ADDR_FMT
"Åo "

106 
ETH_ADDR_FMT
,

107 
	`ETH_ADDR_ARGS
(
œ°_n⁄zîo_mac
), ETH_ADDR_ARGS(
mac
));

108 
	`mem˝y
(
œ°_n⁄zîo_mac
, 
mac
, 
ETH_ADDR_LEN
);

116 
√xt_ª‰esh
 = 
now
 + (!
ù
 || 
have_mac
 ? 10 : 1);

118  !
	`ëh_addr_is_zîo
(
mac
Ë? ma¯: 
NULL
;

119 
	}
}

121 
boﬁ


122 
	$is_c⁄åﬁÀr_mac
(c⁄° 
uöt8_t
 
dl_addr
[
ETH_ADDR_LEN
],

123 
ö_b™d_d©a
 *
ö_b™d
)

125 c⁄° 
uöt8_t
 *
mac
 = 
	`gë_c⁄åﬁÀr_mac
(
ö_b™d
);

126  
mac
 && 
	`ëh_addr_equÆs
(mac, 
dl_addr
);

127 
	}
}

130 
	$ö_b™d_À¨n_mac
(
ö_b™d_d©a
 *
ö_b™d
,

131 
uöt16_t
 
ö_p‹t
, c⁄° 
uöt8_t
 
§c_mac
[
ETH_ADDR_LEN
])

133 i‡(
	`mac_À¨nög_À¨n
(
ö_b™d
->
ml
, 
§c_mac
, 0, 
ö_p‹t
)) {

134 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "À¨√dÅh© "
ETH_ADDR_FMT
" i†⁄Ö‹à%"
PRIu16
,

135 
	`ETH_ADDR_ARGS
(
§c_mac
), 
ö_p‹t
);

137 
	}
}

139 
boﬁ


140 
	$ö_b™d_loˇl_∑ckë_cb
(
ªœy
 *
r
, *
ö_b™d_
)

142 
ö_b™d_d©a
 *
ö_b™d
 = 
ö_b™d_
;

143 
rc⁄n
 *
rc
 = 
r
->
hÆves
[
HALF_LOCAL
].rconn;

144 
oÂ_∑ckë_ö
 *
›i
;

145 
ëh_hódî
 *
ëh
;

146 
oÂbuf
 
∑ylﬂd
;

147 
Êow
 flow;

148 
uöt16_t
 
ö_p‹t
;

149 
out_p‹t
;

151 i‡(!
	`gë_oÂ_∑ckë_ëh_hódî
(
r
, &
›i
, &
ëh
Ë|| !
ö_b™d
->
of_devi˚
) {

152  
Ál£
;

155 
ö_p‹t
 = 0;

157 
	`gë_oÂ_∑ckë_∑ylﬂd
(
›i
, &
∑ylﬂd
);

158 
	`Êow_exåa˘
(&
∑ylﬂd
, 
ö_p‹t
, &
Êow
);

160 i‡(
ö_p‹t
 =
OFPP_LOCAL
) {

162 
out_p‹t
 = 
	`mac_À¨nög_lookup
(
ö_b™d
->
ml
, 
ëh
->
ëh_d°
, 0);

163 } i‡(
	`ëh_addr_equÆs
(
ëh
->
ëh_d°
,

164 
	`√tdev_gë_ëhîaddr
(
ö_b™d
->
of_devi˚
))) {

166 
out_p‹t
 = 
OFPP_LOCAL
;

167 
	`ö_b™d_À¨n_mac
(
ö_b™d
, 
ö_p‹t
, 
ëh
->
ëh_§c
);

168 } i‡(
ëh
->
ëh_ty≥
 =
	`ht⁄s
(
ETH_TYPE_ARP
)

169 && 
	`ëh_addr_is_brﬂdˇ°
(
ëh
->
ëh_d°
)

170 && 
	`is_c⁄åﬁÀr_mac
(
ëh
->
ëh_§c
, 
ö_b™d
)) {

172 
out_p‹t
 = 
OFPP_FLOOD
;

173 } i‡((
	`is_c⁄åﬁÀr_mac
(
ëh
->
ëh_d°
, 
ö_b™d
)

174 || 
	`is_c⁄åﬁÀr_mac
(
ëh
->
ëh_§c
, 
ö_b™d
))

175 && 
Êow
.
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
)

176 && 
Êow
.
nw_¥Ÿo
 =
IP_TYPE_TCP


177 && (
Êow
.
ç_§c
 =
	`ht⁄s
(
OFP_TCP_PORT
)

178 || 
Êow
.
ç_§c
 =
	`ht⁄s
(
OFP_SSL_PORT
)

179 || 
Êow
.
ç_d°
 =
	`ht⁄s
(
OFP_TCP_PORT
)

180 || 
Êow
.
ç_d°
 =
	`ht⁄s
(
OFP_SSL_PORT
))) {

182 
	`ö_b™d_À¨n_mac
(
ö_b™d
, 
ö_p‹t
, 
ëh
->
ëh_§c
);

183 
out_p‹t
 = 
	`mac_À¨nög_lookup
(
ö_b™d
->
ml
, 
ëh
->
ëh_d°
, 0);

185 c⁄° 
uöt8_t
 *
c⁄åﬁÀr_mac
;

186 
c⁄åﬁÀr_mac
 = 
	`gë_c⁄åﬁÀr_mac
(
ö_b™d
);

187 i‡(
ëh
->
ëh_ty≥
 =
	`ht⁄s
(
ETH_TYPE_ARP
)

188 && 
	`ëh_addr_is_brﬂdˇ°
(
ëh
->
ëh_d°
)

189 && 
	`is_c⁄åﬁÀr_mac
(
ëh
->
ëh_§c
, 
ö_b™d
)) {

191 
out_p‹t
 = 
OFPP_FLOOD
;

192 } i‡(
	`is_c⁄åﬁÀr_mac
(
ëh
->
ëh_d°
, 
ö_b™d
)

193 && 
ö_p‹t
 =
	`mac_À¨nög_lookup
(
ö_b™d
->
ml
,

194 
c⁄åﬁÀr_mac
, 0)) {

196 
out_p‹t
 = -1;

198  
Ál£
;

202 i‡(
ö_p‹t
 =
out_p‹t
) {

204 
	`queue_tx
(
rc
, 
ö_b™d
, 
	`make_add_Êow
(&
Êow
, 
	`¡ohl
(
›i
->
buf„r_id
), 0x00,

205 
ö_b™d
->
s
->
max_idÀ
, 0));

206 } i‡(
out_p‹t
 !
OFPP_FLOOD
) {

208 
	`queue_tx
(
rc
, 
ö_b™d
,

209 
	`make_add_sim∂e_Êow
(&
Êow
, 
	`¡ohl
(
›i
->
buf„r_id
),

210 
out_p‹t
, 
ö_b™d
->
s
->
max_idÀ
));

213 i‡(
	`¡ohl
(
›i
->
buf„r_id
Ë=
UINT32_MAX
) {

214 
	`queue_tx
(
rc
, 
ö_b™d
,

215 
	`make_unbuf„ªd_∑ckë_out
(&
∑ylﬂd
, 
ö_p‹t
, 
out_p‹t
));

220 
oÂbuf
 *
b
;

221 i‡(
	`¡ohl
(
›i
->
buf„r_id
Ë=
UINT32_MAX
) {

222 
b
 = 
	`make_unbuf„ªd_∑ckë_out
(&
∑ylﬂd
, 
ö_p‹t
, 
out_p‹t
);

224 
b
 = 
	`make_buf„ªd_∑ckë_out
(
	`¡ohl
(
›i
->
buf„r_id
),

225 
ö_p‹t
, 
out_p‹t
);

227 
	`queue_tx
(
rc
, 
ö_b™d
, 
b
);

229  
åue
;

230 
	}
}

233 
	$ö_b™d_°©us_cb
(
°©us_ª∂y
 *
§
, *
ö_b™d_
)

235 
ö_b™d_d©a
 *
ö_b™d
 = 
ö_b™d_
;

236 
ö_addr
 
loˇl_ù
;

237 
uöt32_t
 
c⁄åﬁÀr_ù
;

238 c⁄° 
uöt8_t
 *
c⁄åﬁÀr_mac
;

240 i‡(
ö_b™d
->
of_devi˚
) {

241 c⁄° 
uöt8_t
 *
mac
 = 
	`√tdev_gë_ëhîaddr
(
ö_b™d
->
of_devi˚
);

242 i‡(
	`√tdev_gë_ö4
(
ö_b™d
->
of_devi˚
, &
loˇl_ù
)) {

243 
	`°©us_ª∂y_put
(
§
, "loˇl-ù="
IP_FMT
, 
	`IP_ARGS
(&
loˇl_ù
.
s_addr
));

245 
	`°©us_ª∂y_put
(
§
, "loˇl-mac="
ETH_ADDR_FMT
, 
	`ETH_ADDR_ARGS
(
mac
));

247 
c⁄åﬁÀr_ù
 = 
	`rc⁄n_gë_ù
(
ö_b™d
->
c⁄åﬁÀr
);

248 i‡(
c⁄åﬁÀr_ù
) {

249 
	`°©us_ª∂y_put
(
§
, "c⁄åﬁÀr-ù="
IP_FMT
,

250 
	`IP_ARGS
(&
c⁄åﬁÀr_ù
));

252 
c⁄åﬁÀr_mac
 = 
	`gë_c⁄åﬁÀr_mac
(
ö_b™d
);

253 i‡(
c⁄åﬁÀr_mac
) {

254 
	`°©us_ª∂y_put
(
§
, "c⁄åﬁÀr-mac="
ETH_ADDR_FMT
,

255 
	`ETH_ADDR_ARGS
(
c⁄åﬁÀr_mac
));

258 
	}
}

261 
	$gë_oÂ_∑ckë_∑ylﬂd
(
oÂ_∑ckë_ö
 *
›i
, 
oÂbuf
 *
∑ylﬂd
)

266 
	}
}

269 
	$ö_b™d_loˇl_p‹t_cb
(c⁄° 
oÂ_p‹t
 *
p‹t
, *
ö_b™d_
)

271 
ö_b™d_d©a
 *
ö_b™d
 = 
ö_b™d_
;

272 i‡(
p‹t
) {

273 
«me
[ 
p‹t
->name + 1];

274 
	`gë_p‹t_«me
(
p‹t
, 
«me
, Çame);

276 i‡(!
ö_b™d
->
of_devi˚


277 || 
	`°rcmp
(
	`√tdev_gë_«me
(
ö_b™d
->
of_devi˚
), 
«me
))

279 
îr‹
;

280 
	`√tdev_˛o£
(
ö_b™d
->
of_devi˚
);

281 
îr‹
 = 
	`√tdev_›í
(
«me
, 
NETDEV_ETH_TYPE_NONE
,

282 &
ö_b™d
->
of_devi˚
);

283 i‡(
îr‹
) {

284 
	`VLOG_ERR
(
LOG_MODULE
, "failedÅo open in-band controlÇetwork device "

285 "\"%s\": %s", 
«me
, 
	`°ªº‹
(
î∫o
));

289 
	`√tdev_˛o£
(
ö_b™d
->
of_devi˚
);

290 
ö_b™d
->
of_devi˚
 = 
NULL
;

292 
	}
}

295 
	$ö_b™d_≥riodic_cb
(*
ö_b™d_
)

297 
ö_b™d_d©a
 *
ö_b™d
 = 
ö_b™d_
;

298 
	`mac_À¨nög_run
(
ö_b™d
->
ml
, 
NULL
);

299 
	}
}

302 
	$ö_b™d_waô_cb
(*
ö_b™d_
)

304 
ö_b™d_d©a
 *
ö_b™d
 = 
ö_b™d_
;

305 
	`mac_À¨nög_waô
(
ö_b™d
->
ml
);

306 
	}
}

308 
hook_˛ass
 
	gö_b™d_hook_˛ass
 = {

309 
ö_b™d_loˇl_∑ckë_cb
,

310 
NULL
,

311 
ö_b™d_≥riodic_cb
,

312 
ö_b™d_waô_cb
,

313 
NULL
,

317 
	$ö_b™d_°¨t
(
£cch™
 *secchan,

318 c⁄° 
£âögs
 *
s
, 
swôch_°©us
 *
ss
,

319 
p‹t_w©chî
 *
pw
, 
rc⁄n
 *
ªmŸe
)

321 
ö_b™d_d©a
 *
ö_b™d
;

323 
ö_b™d
 = 
	`xˇŒoc
(1,  *in_band);

324 
ö_b™d
->
s
 = s;

325 
ö_b™d
->
ml
 = 
	`mac_À¨nög_¸óã
();

326 
ö_b™d
->
of_devi˚
 = 
NULL
;

327 
ö_b™d
->
c⁄åﬁÀr
 = 
ªmŸe
;

328 
	`swôch_°©us_ªgi°î_ˇãg‹y
(
ss
, "ö-b™d", 
ö_b™d_°©us_cb
, 
ö_b™d
);

329 
	`p‹t_w©chî_ªgi°î_loˇl_p‹t_ˇŒback
(
pw
, 
ö_b™d_loˇl_p‹t_cb
,

330 
ö_b™d
);

331 
	`add_hook
(
£cch™
, &
ö_b™d_hook_˛ass
, 
ö_b™d
);

332 
	}
}

	@secchan/in-band.h

34 #i‚de‡
IN_BAND_H


35 
	#IN_BAND_H
 1

	)

37 
	gp‹t_w©chî
;

38 
	grc⁄n
;

39 
	g£cch™
;

40 
	g£âögs
;

41 
	gswôch_°©us
;

43 
ö_b™d_°¨t
(
£cch™
 *, c⁄° 
£âögs
 *,

44 
swôch_°©us
 *, 
p‹t_w©chî
 *,

45 
rc⁄n
 *
ªmŸe
);

	@secchan/port-watcher.c

34 
	~<c⁄fig.h
>

35 
	~"p‹t-w©chî.h
"

36 
	~<¨∑/öë.h
>

37 
	~<as£π.h
>

38 
	~<öây≥s.h
>

39 
	~<°dlib.h
>

40 
	~"dy«mic-°rög.h
"

41 
	~"√tdev.h
"

42 
	~"oÂ.h
"

43 
	~"oÂbuf.h
"

44 
	~"›íÊow/›íÊow.h
"

45 
	~"pﬁl-lo›.h
"

46 
	~"p‹t-¨øy.h
"

47 
	~"rc⁄n.h
"

48 
	~"shash.h
"

49 
	~"svec.h
"

50 
	~"timevÆ.h
"

51 
	~"xtoxŒ.h
"

52 
	~"vlog.h
"

54 
	#LOG_MODULE
 
VLM_p‹t_w©chî


	)

56 
	sp‹t_w©chî_cb
 {

57 
p‹t_ch™ged_cb_func
 *
	mp‹t_ch™ged
;

58 *
	maux
;

61 
	sp‹t_w©chî_loˇl_cb
 {

62 
loˇl_p‹t_ch™ged_cb_func
 *
	mloˇl_p‹t_ch™ged
;

63 *
	maux
;

66 
	sp‹t_w©chî
 {

67 
rc⁄n
 *
	mloˇl_rc⁄n
;

68 
rc⁄n
 *
	mªmŸe_rc⁄n
;

69 
p‹t_¨øy
 
	mp‹ts
;

70 
time_t
 
	mœ°_„©uª_ªque°
;

71 
boﬁ
 
	mgŸ_„©uª_ª∂y
;

72 
uöt64_t
 
	md©≠©h_id
;

73 
	mn_txq
;

74 
p‹t_w©chî_cb
 
	mcbs
[2];

75 
	mn_cbs
;

76 
p‹t_w©chî_loˇl_cb
 
	mloˇl_cbs
[4];

77 
	mn_loˇl_cbs
;

78 
	mloˇl_p‹t_«me
[
OFP_MAX_PORT_NAME_LEN
 + 1];

79 
√tdev_m⁄ô‹
 *
	mm⁄
;

80 
shash
 
	mp‹t_by_«me
;

85 
	$›p_dif„rs
(c⁄° 
oÂ_p‹t
 *
a
, c⁄° oÂ_p‹à*
b
)

87 
	`BUILD_ASSERT_DECL
( *
a
 == 64);

88  ((
a
->
p‹t_no
 !
b
->port_no)

89 + (
	`memcmp
(
a
->
hw_addr
, 
b
->hw_addr, á->hw_addr) != 0)

90 + (
	`memcmp
(
a
->
«me
, 
b
->name, á->name) != 0)

91 + (
a
->
c⁄fig
 !
b
->config)

92 + (
a
->
°©e
 !
b
->state)

93 + (
a
->
cuº
 !
b
->curr)

94 + (
a
->
advîti£d
 !
b
->advertised)

95 + (
a
->
suµ‹ãd
 !
b
->supported)

96 + (
a
->
≥î
 !
b
->peer)

97 + (
a
->
cuº_•ìd
 !
b
->curr_speed)

98 + (
a
->
max_•ìd
 !
b
->max_speed));

99 
	}
}

102 
	$ßnôize_›p
(
oÂ_p‹t
 *
›p
)

104 
size_t
 
i
;

106 
i
 = 0; i <  
›p
->
«me
; i++) {

107 
c
 = 
›p
->
«me
[
i
];

108 i‡(
c
 && (c < 0x20 || c > 0x7e)) {

109 
›p
->
«me
[
i
] = '.';

112 
›p
->
«me
[ opp->name - 1] = '\0';

113 
	}
}

116 
	$ˇŒ_p‹t_ch™ged_ˇŒbacks
(
p‹t_w©chî
 *
pw
, 
p‹t_no
,

117 c⁄° 
oÂ_p‹t
 *
ﬁd
,

118 c⁄° 
oÂ_p‹t
 *
√w
)

120 
i
;

121 
i
 = 0; i < 
pw
->
n_cbs
; i++) {

122 
p‹t_ch™ged_cb_func
 *
p‹t_ch™ged
 = 
pw
->
cbs
[
i
].port_changed;

123 (
p‹t_ch™ged
)(
p‹t_no
, 
ﬁd
, 
√w
, 
pw
->
cbs
[
i
].
aux
);

125 
	}
}

128 
	$gë_p‹t_«me
(c⁄° 
oÂ_p‹t
 *
p‹t
, *
«me
, 
size_t
 
«me_size
)

130 *
p
;

132 
	`mem˝y
(
«me
, 
p‹t
->«me, 
	`MIN
(
«me_size
, Öort->name));

133 
«me
[
«me_size
 - 1] = '\0';

134 
p
 = 
«me
; *p != '\0';Ö++) {

135 i‡(*
p
 < 32 || *p > 126) {

136 *
p
 = '.';

139 
	}
}

141 
oÂ_p‹t
 *

142 
	$lookup_p‹t
(c⁄° 
p‹t_w©chî
 *
pw
, 
uöt32_t
 
p‹t_no
)

144  
	`p‹t_¨øy_gë
(&
pw
->
p‹ts
, 
p‹t_no
);

145 
	}
}

148 
	$ˇŒ_loˇl_p‹t_ch™ged_ˇŒbacks
(
p‹t_w©chî
 *
pw
)

150 
«me
[
OFP_MAX_PORT_NAME_LEN
 + 1];

151 c⁄° 
oÂ_p‹t
 *
p‹t
;

152 
i
;

156 
p‹t
 = 
	`lookup_p‹t
(
pw
, 
OFPP_LOCAL
);

159 i‡(
p‹t
) {

160 
	`gë_p‹t_«me
(
p‹t
, 
«me
, Çame);

162 
«me
[0] = '\0';

164 i‡(
	`°rcmp
(
pw
->
loˇl_p‹t_«me
, 
«me
)) {

165 i‡(
«me
[0]) {

166 
	`VLOG_INFO
(
LOG_MODULE
, "Idítifõd d©®∑thÜoˇ»p‹àa†\"%s\".", 
«me
);

168 
	`VLOG_WARN
(
LOG_MODULE
, "DataÖath hasÇoÜocalÖort.");

170 
	`°r˝y
(
pw
->
loˇl_p‹t_«me
, 
«me
);

174 
i
 = 0; i < 
pw
->
n_loˇl_cbs
; i++) {

175 
loˇl_p‹t_ch™ged_cb_func
 *
cb
 = 
pw
->
loˇl_cbs
[
i
].
loˇl_p‹t_ch™ged
;

176 (
cb
)(
p‹t
, 
pw
->
loˇl_cbs
[
i
].
aux
);

178 
	}
}

181 
	$upd©e_phy_p‹t
(
p‹t_w©chî
 *
pw
, 
oÂ_p‹t
 *
›p
,

182 
uöt8_t
 
ªas⁄
)

184 
oÂ_p‹t
 *
ﬁd
;

185 
uöt32_t
 
p‹t_no
;

187 
p‹t_no
 = 
	`¡ohl
(
›p
->port_no);

188 
ﬁd
 = 
	`lookup_p‹t
(
pw
, 
p‹t_no
);

190 i‡(
ªas⁄
 =
OFPPR_DELETE
 && 
ﬁd
) {

191 
	`ˇŒ_p‹t_ch™ged_ˇŒbacks
(
pw
, 
p‹t_no
, 
ﬁd
, 
NULL
);

192 
	`‰ì
(
ﬁd
);

193 
	`p‹t_¨øy_£t
(&
pw
->
p‹ts
, 
p‹t_no
, 
NULL
);

194 } i‡(
ªas⁄
 =
OFPPR_MODIFY
 ||Ñós⁄ =
OFPPR_ADD
) {

203 
oÂ_p‹t
 
√w
 = *
›p
;

204 
	`ßnôize_›p
(&
√w
);

205 
	`ˇŒ_p‹t_ch™ged_ˇŒbacks
(
pw
, 
p‹t_no
, 
ﬁd
, &
√w
);

206 i‡(
ﬁd
) {

207 *
ﬁd
 = 
√w
;

209 
	`p‹t_¨øy_£t
(&
pw
->
p‹ts
, 
p‹t_no
, 
	`xmemdup
(&
√w
, Çew));

215 
	}
}

218 
	$upd©e_√tdev_m⁄ô‹_devi˚s
(
p‹t_w©chî
 *
pw
)

220 
oÂ_p‹t
 *
p
;

221 
svec
 
√tdevs
;

222 
p‹t_no
;

224 
	`svec_öô
(&
√tdevs
);

225 
	`shash_˛ór
(&
pw
->
p‹t_by_«me
);

226 
p
 = 
	`p‹t_¨øy_fú°
(&
pw
->
p‹ts
, &
p‹t_no
);Ö;

227 
p
 = 
	`p‹t_¨øy_√xt
(&
pw
->
p‹ts
, &
p‹t_no
)) {

228 c⁄° *
«me
 = (c⁄° *Ë
p
->name;

229 
	`svec_add
(&
√tdevs
, 
«me
);

230 
	`shash_add
(&
pw
->
p‹t_by_«me
, 
«me
, 
p
);

232 
	`√tdev_m⁄ô‹_£t_devi˚s
(
pw
->
m⁄
, 
√tdevs
.
«mes
,Çëdevs.
n
);

233 
	`svec_de°roy
(&
√tdevs
);

234 
	}
}

236 
boﬁ


237 
	$p‹t_w©chî_loˇl_∑ckë_cb
(
ªœy
 *
r
, *
pw_
)

239 
p‹t_w©chî
 *
pw
 = 
pw_
;

240 
oÂbuf
 *
msg
 = 
r
->
hÆves
[
HALF_LOCAL
].
rxbuf
;

241 
oÂ_hódî
 *
oh
 = 
msg
->
d©a
;

242 i‡(
oh
->
ty≥
 =
OFPT_FEATURES_REPLY
) {

243 
oÂ_swôch_„©uªs
 *
osf
 = 
msg
->
d©a
;

245 
pw
->
gŸ_„©uª_ª∂y
 = 
åue
;

246 i‡(
pw
->
d©≠©h_id
 !
osf
->datapath_id) {

247 
pw
->
d©≠©h_id
 = 
osf
->datapath_id;

248 
	`VLOG_INFO
(
LOG_MODULE
, "D©≠©h id i†%012"
PRIx64
, 
	`¡ohŒ
(
pw
->
d©≠©h_id
));

251 i‡(
oh
->
ty≥
 =
OFPT_MULTIPART_REPLY
) {

252 
oÂ_mu…ù¨t_ª∂y
 *
ª∂
 = 
msg
->
d©a
;

253 if(
	`¡ohs
(
ª∂
->
ty≥
Ë=
OFPMP_PORT_DESC
){

254 
boﬁ
 
£í
[
PORT_ARRAY_SIZE
];

255 
oÂ_p‹t
 *
p
;

256 
p‹t_no
;

257 
size_t
 
n_p‹ts
, 
i
;

258 
p
 = (
oÂ_p‹t
*Ë
ª∂
->
body
;

260 
	`mem£t
(
£í
, 
Ál£
,  seen);

261 
n_p‹ts
 = ((
msg
->
size
 - 
	`off£tof
(
oÂ_mu…ù¨t_ª∂y
, 
body
))

262 /  *
p
);

263 
i
 = 0; i < 
n_p‹ts
; i++) {

264 
oÂ_p‹t
 *
›p
 = &
p
[
i
];

265 i‡(
	`¡ohl
(
›p
->
p‹t_no
Ë> 
PORT_ARRAY_SIZE
 - 1) {

266 i‡(
	`¡ohl
(
›p
->
p‹t_no
Ë<
OFPP_MAX
) {

267 
	`VLOG_WARN
(
LOG_MODULE
, "P‹àID %u ovîÜimô", 
	`¡ohl
(
›p
->
p‹t_no
));

271 
	`upd©e_phy_p‹t
(
pw
, 
›p
, 
OFPPR_MODIFY
);

272 
£í
[
	`¡ohl
(
›p
->
p‹t_no
)] = 
åue
;

276 
p
 = 
	`p‹t_¨øy_fú°
(&
pw
->
p‹ts
, &
p‹t_no
);Ö;

277 
p
 = 
	`p‹t_¨øy_√xt
(&
pw
->
p‹ts
, &
p‹t_no
)) {

278 i‡(!
£í
[
p‹t_no
]) {

279 
	`upd©e_phy_p‹t
(
pw
, 
p
, 
OFPPR_DELETE
);

283 
	`upd©e_√tdev_m⁄ô‹_devi˚s
(
pw
);

285 
	`ˇŒ_loˇl_p‹t_ch™ged_ˇŒbacks
(
pw
);

287 i‡((
	`¡ohs
(
oh
->
ty≥
Ë=
OFPMP_PORT_STATS
 ||

288 
	`¡ohs
(
oh
->
ty≥
Ë=
OFPT_PORT_STATUS
)

289 && 
msg
->
size
 >(
oÂ_p‹t_°©us
)) {

290 
oÂ_p‹t_°©us
 *
›s
 = 
msg
->
d©a
;

291 
	`upd©e_phy_p‹t
(
pw
, &
›s
->
desc
, ops->
ªas⁄
);

292 i‡(
›s
->
desc
.
p‹t_no
 =
	`ht⁄l
(
OFPP_LOCAL
)) {

293 
	`ˇŒ_loˇl_p‹t_ch™ged_ˇŒbacks
(
pw
);

295 i‡(
›s
->
ªas⁄
 =
OFPPR_ADD
 || 
OFPPR_DELETE
) {

296 
	`upd©e_√tdev_m⁄ô‹_devi˚s
(
pw
);

301  
Ál£
;

302 
	}
}

305 
	$brög_√tdev_up_‹_down
(c⁄° *
«me
, 
boﬁ
 
down
)

307 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

308 
√tdev
 *netdev;

309 
ªtvÆ
;

311 
ªtvÆ
 = 
	`√tdev_›í
(
«me
, 
NETDEV_ETH_TYPE_NONE
, &
√tdev
);

312 i‡(!
ªtvÆ
) {

313 i‡(
down
) {

314 
ªtvÆ
 = 
	`√tdev_tu∫_Êags_off
(
√tdev
, 
NETDEV_UP
, 
åue
);

316 
ªtvÆ
 = 
	`√tdev_tu∫_Êags_⁄
(
√tdev
, 
NETDEV_UP
, 
åue
);

318 i‡(
ªtvÆ
) {

319 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "failedÅo bringÇetwork device %s %s: %s",

320 
«me
, 
down
 ? "down" : "up", 
	`°ªº‹
(
ªtvÆ
));

322 
	`√tdev_˛o£
(
√tdev
);

324 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "failedÅo openÇetwork device %s: %s",

325 
«me
, 
	`°ªº‹
(
ªtvÆ
));

327 
	}
}

329 
boﬁ


330 
	$p‹t_w©chî_ªmŸe_∑ckë_cb
(
ªœy
 *
r
, *
pw_
)

332 
p‹t_w©chî
 *
pw
 = 
pw_
;

333 
oÂbuf
 *
msg
 = 
r
->
hÆves
[
HALF_REMOTE
].
rxbuf
;

334 
oÂ_hódî
 *
oh
 = 
msg
->
d©a
;

336 i‡(
oh
->
ty≥
 =
OFPT_PORT_MOD


337 && 
msg
->
size
 >(
oÂ_p‹t_mod
)) {

338 
oÂ_p‹t_mod
 *
›m
 = 
msg
->
d©a
;

339 
uöt32_t
 
p‹t_no
 = 
	`¡ohl
(
›m
->port_no);

340 
oÂ_p‹t
 *
pw_›p
 = 
	`lookup_p‹t
(
pw
, 
p‹t_no
);

341 i‡(
pw_›p
->
p‹t_no
 !
	`ht⁄l
(
OFPP_ANY
)) {

342 
oÂ_p‹t
 
ﬁd
 = *
pw_›p
;

343 
pw_›p
->
c⁄fig
 = (’w_›p->c⁄fig & ~
›m
->
mask
)

344 | (
›m
->
c⁄fig
 & opm->
mask
));

345 
	`ˇŒ_p‹t_ch™ged_ˇŒbacks
(
pw
, 
p‹t_no
, &
ﬁd
, 
pw_›p
);

346 i‡(
pw_›p
->
p‹t_no
 =
	`ht⁄l
(
OFPP_LOCAL
)) {

347 
	`ˇŒ_loˇl_p‹t_ch™ged_ˇŒbacks
(
pw
);

350 i‡(
›m
->
mask
 & 
	`ht⁄l
(
OFPPC_PORT_DOWN
)) {

351 
	`brög_√tdev_up_‹_down
((c⁄° *Ë
pw_›p
->
«me
,

352 
›m
->
c⁄fig
 & 
	`ht⁄l
(
OFPPC_PORT_DOWN
));

356  
Ál£
;

357 
	}
}

361 
	$£t_bô
(
uöt32_t
 
bô
, 
boﬁ
 
vÆue
, uöt32_à*
w‹d
)

363 i‡(
vÆue
) {

364 *
w‹d
 |
bô
;

366 *
w‹d
 &~
bô
;

368 
	}
}

371 
	$p‹t_w©chî_≥riodic_cb
(*
pw_
)

373 
p‹t_w©chî
 *
pw
 = 
pw_
;

374 c⁄° *
«me
;

376 i‡(!
pw
->
gŸ_„©uª_ª∂y


377 && 
	`time_now
(Ë>
pw
->
œ°_„©uª_ªque°
 + 5

378 && 
	`rc⁄n_is_c⁄√˘ed
(
pw
->
loˇl_rc⁄n
)) {

379 
oÂbuf
 *
b
;

380 
	`make_›íÊow
((
oÂ_hódî
), 
OFPT_FEATURES_REQUEST
, &
b
);

381 
	`rc⁄n_£nd_wôh_limô
(
pw
->
loˇl_rc⁄n
, 
b
, &pw->
n_txq
, 1);

383 
b
 = 
	`make_p‹t_desc_ªque°
();

384 
	`rc⁄n_£nd_wôh_limô
(
pw
->
loˇl_rc⁄n
, 
b
, &pw->
n_txq
, 1);

385 
pw
->
œ°_„©uª_ªque°
 = 
	`time_now
();

388 
	`√tdev_m⁄ô‹_run
(
pw
->
m⁄
);

389 (
«me
 = 
	`√tdev_m⁄ô‹_pﬁl
(
pw
->
m⁄
)Ë!
NULL
) {

390 
oÂ_p‹t
 *
›p
;

391 
oÂ_p‹t
 
√w_›p
;

392 
√tdev_Êags
 
Êags
;

393 
ªtvÆ
;

394 
›p
 = 
	`shash_föd_d©a
(&
pw
->
p‹t_by_«me
, 
«me
);

395 i‡(!
›p
) {

399 
ªtvÆ
 = 
	`√tdev_nodev_gë_Êags
(
«me
, &
Êags
);

400 i‡(
ªtvÆ
) {

401 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

402 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "couldÇŸ gë fœg†f‹ %s", 
«me
);

406 
√w_›p
 = *
›p
;

407 
	`£t_bô
(
	`ht⁄l
(
OFPPC_PORT_DOWN
), ~
Êags
 & 
NETDEV_UP
, &
√w_›p
.
c⁄fig
);

408 
	`£t_bô
(
	`ht⁄l
(
OFPPS_LINK_DOWN
), ~
Êags
 & 
NETDEV_CARRIER
,

409 &
√w_›p
.
°©e
);

410 i‡(
›p
->
c⁄fig
 !
√w_›p
.c⁄fig || oµ->
°©e
 !=Çew_opp.state) {

411 
oÂ_p‹t_°©us
 *
›s
;

412 
oÂbuf
 *
b
;

415 
	`upd©e_phy_p‹t
(
pw
, &
√w_›p
, 
OFPPR_MODIFY
);

417 i‡(
√w_›p
.
p‹t_no
 =
	`ht⁄l
(
OFPP_LOCAL
)) {

418 
	`ˇŒ_loˇl_p‹t_ch™ged_ˇŒbacks
(
pw
);

422 
›s
 = 
	`make_›íÊow
( *›s, 
OFPT_PORT_STATUS
, &
b
);

423 
›s
->
ªas⁄
 = 
OFPPR_MODIFY
;

424 
›s
->
desc
 = 
√w_›p
;

425 
	`rc⁄n_£nd
(
pw
->
ªmŸe_rc⁄n
, 
b
, 
NULL
);

428 
	}
}

431 
	$p‹t_w©chî_waô_cb
(*
pw_
)

433 
p‹t_w©chî
 *
pw
 = 
pw_
;

434 i‡(!
pw
->
gŸ_„©uª_ª∂y
 && 
	`rc⁄n_is_c⁄√˘ed
’w->
loˇl_rc⁄n
)) {

435 i‡(
pw
->
œ°_„©uª_ªque°
 !
TIME_MIN
) {

436 
	`pﬁl_timî_waô
(
pw
->
œ°_„©uª_ªque°
 + 5 - 
	`time_now
());

438 
	`pﬁl_immedüã_wake
();

441 
	`√tdev_m⁄ô‹_waô
(
pw
->
m⁄
);

442 
	}
}

445 
	$put_du∂exes
(
ds
 *ds, c⁄° *
«me
, 
uöt32_t
 
„©uªs
,

446 
uöt32_t
 
hd_bô
, uöt32_à
fd_bô
)

448 i‡(
„©uªs
 & (
hd_bô
 | 
fd_bô
)) {

449 
	`ds_put_f‹m©
(
ds
, " %s", 
«me
);

450 i‡(
„©uªs
 & 
hd_bô
) {

451 
	`ds_put_c°r
(
ds
, "(HD)");

453 i‡(
„©uªs
 & 
fd_bô
) {

454 
	`ds_put_c°r
(
ds
, "(FD)");

457 
	}
}

460 
	$put_„©uªs
(
ds
 *ds, c⁄° *
«me
, 
uöt32_t
 
„©uªs
)

462 i‡(
„©uªs
 & (
OFPPF_10MB_HD
 | 
OFPPF_10MB_FD


463 | 
OFPPF_100MB_HD
 | 
OFPPF_100MB_FD


464 | 
OFPPF_1GB_HD
 | 
OFPPF_1GB_FD
 | 
OFPPF_10GB_FD
)) {

465 
	`ds_put_c°r
(
ds
, 
«me
);

466 
	`put_du∂exes
(
ds
, "10M", 
„©uªs
, 
OFPPF_10MB_HD
, 
OFPPF_10MB_FD
);

467 
	`put_du∂exes
(
ds
, "100M", 
„©uªs
,

468 
OFPPF_100MB_HD
, 
OFPPF_100MB_FD
);

469 
	`put_du∂exes
(
ds
, "1G", 
„©uªs
, 
OFPPF_1GB_HD
, 
OFPPF_1GB_FD
);

470 i‡(
„©uªs
 & 
OFPPF_10GB_FD
) {

471 
	`ds_put_c°r
(
ds
, " 10G");

473 i‡(
„©uªs
 & 
OFPPF_AUTONEG
) {

474 
	`ds_put_c°r
(
ds
, " AUTO_NEG");

476 i‡(
„©uªs
 & 
OFPPF_PAUSE
) {

477 
	`ds_put_c°r
(
ds
, " PAUSE");

479 i‡(
„©uªs
 & 
OFPPF_PAUSE_ASYM
) {

480 
	`ds_put_c°r
(
ds
, " PAUSE_ASYM");

483 
	}
}

486 
	$log_p‹t_°©us
(
uöt32_t
 
p‹t_no
,

487 c⁄° 
oÂ_p‹t
 *
ﬁd
,

488 c⁄° 
oÂ_p‹t
 *
√w
,

489 *
aux
 
UNUSED
)

491 i‡(
	`VLOG_IS_DBG_ENABLED
(
LOG_MODULE
)) {

492 i‡(
ﬁd
 && 
√w
 && (
	`›p_dif„rs
(old,Çew)

493 =((
ﬁd
->
c⁄fig
 !
√w
->config)

494 + (
ﬁd
->
°©e
 !
√w
->state))))

497 } i‡(!
√w
) {

498 i‡(
ﬁd
) {

499 
	`VLOG_DBG
(
LOG_MODULE
, "P‹à%d dñëed", 
p‹t_no
);

502 
ds
 d†
DS_EMPTY_INITIALIZER
;

503 
uöt32_t
 
cuº
 = 
	`¡ohl
(
√w
->curr);

504 
uöt32_t
 
suµ‹ãd
 = 
	`¡ohl
(
√w
->supported);

505 
	`ds_put_f‹m©
(&
ds
, "\"%s\", "
ETH_ADDR_FMT
, 
√w
->
«me
,

506 
	`ETH_ADDR_ARGS
(
√w
->
hw_addr
));

507 i‡(
cuº
) {

508 
	`put_„©uªs
(&
ds
, ", cuºít", 
cuº
);

510 i‡(
suµ‹ãd
) {

511 
	`put_„©uªs
(&
ds
, ", suµ‹ts", 
suµ‹ãd
);

513 
	`VLOG_DBG
(
LOG_MODULE
, "Port %d %s: %s",

514 
p‹t_no
, 
ﬁd
 ? "ch™ged" : "added", 
	`ds_c°r
(&
ds
));

515 
	`ds_de°roy
(&
ds
);

518 
	}
}

521 
	$p‹t_w©chî_ªgi°î_ˇŒback
(
p‹t_w©chî
 *
pw
,

522 
p‹t_ch™ged_cb_func
 *
p‹t_ch™ged
,

523 *
aux
)

525 
	`as£π
(
pw
->
n_cbs
 < 
	`ARRAY_SIZE
’w->
cbs
));

526 
pw
->
cbs
[pw->
n_cbs
].
p‹t_ch™ged
 =Öort_changed;

527 
pw
->
cbs
[pw->
n_cbs
].
aux
 =áux;

528 
pw
->
n_cbs
++;

529 
	}
}

532 
	$p‹t_w©chî_ªgi°î_loˇl_p‹t_ˇŒback
(
p‹t_w©chî
 *
pw
,

533 
loˇl_p‹t_ch™ged_cb_func
 *
cb
,

534 *
aux
)

536 
	`as£π
(
pw
->
n_loˇl_cbs
 < 
	`ARRAY_SIZE
’w->
loˇl_cbs
));

537 
pw
->
loˇl_cbs
[pw->
n_loˇl_cbs
].
loˇl_p‹t_ch™ged
 = 
cb
;

538 
pw
->
loˇl_cbs
[pw->
n_loˇl_cbs
].
aux
 =áux;

539 
pw
->
n_loˇl_cbs
++;

540 
	}
}

542 
uöt32_t


543 
	$p‹t_w©chî_gë_c⁄fig
(c⁄° 
p‹t_w©chî
 *
pw
, 
uöt32_t
 
p‹t_no
)

545 
oÂ_p‹t
 *
p
 = 
	`lookup_p‹t
(
pw
, 
p‹t_no
);

546  
p
 ? 
	`¡ohl
’->
c⁄fig
) : 0;

547 
	}
}

550 
	$p‹t_w©chî_gë_«me
(c⁄° 
p‹t_w©chî
 *
pw
, 
uöt32_t
 
p‹t_no
)

552 
oÂ_p‹t
 *
p
 = 
	`lookup_p‹t
(
pw
, 
p‹t_no
);

553  
p
 ? (c⁄° *Ëp->
«me
 : 
NULL
;

554 
	}
}

556 c⁄° 
uöt8_t
 *

557 
	$p‹t_w©chî_gë_hwaddr
(c⁄° 
p‹t_w©chî
 *
pw
, 
uöt32_t
 
p‹t_no
)

559 
oÂ_p‹t
 *
p
 = 
	`lookup_p‹t
(
pw
, 
p‹t_no
);

560  
p
 ?Ö->
hw_addr
 : 
NULL
;

561 
	}
}

564 
	$p‹t_w©chî_£t_Êags
(
p‹t_w©chî
 *
pw
, 
uöt32_t
 
p‹t_no
,

565 
uöt32_t
 
c⁄fig
, uöt32_à
c_mask
,

566 
uöt32_t
 
°©e
, uöt32_à
s_mask
)

568 
oÂ_p‹t
 
ﬁd
;

569 
oÂ_p‹t
 *
p
;

570 
oÂ_p‹t_mod
 *
›m
;

571 
oÂ_p‹t_°©us
 *
›s
;

572 
oÂbuf
 *
b
;

574 
p
 = 
	`lookup_p‹t
(
pw
, 
p‹t_no
);

575 i‡(!
p
) {

579 i‡(!((
	`¡ohl
(
p
->
°©e
Ë^ sèãË& 
s_mask
)

580 && (!((
	`¡ohl
(
p
->
c⁄fig
Ë^ c⁄figË& 
c_mask
))) {

583 
ﬁd
 = *
p
;

586 
p
->
c⁄fig
 = 
	`ht⁄l
((
	`¡ohl
’->c⁄figË& ~
c_mask
) | (config & c_mask));

587 
p
->
°©e
 = 
	`ht⁄l
((
	`¡ohl
’->°©eË& ~
s_mask
) | (state & s_mask));

588 
	`ˇŒ_p‹t_ch™ged_ˇŒbacks
(
pw
, 
p‹t_no
, &
ﬁd
, 
p
);

591 
›m
 = 
	`make_›íÊow
( *›m, 
OFPT_PORT_MOD
, &
b
);

592 
›m
->
p‹t_no
 = 
p
->port_no;

593 
	`mem˝y
(
›m
->
hw_addr
, 
p
->hw_addr, 
OFP_ETH_ALEN
);

594 
›m
->
c⁄fig
 = 
p
->config;

595 
›m
->
mask
 = 
	`ht⁄l
(
c_mask
);

596 
›m
->
advîti£
 = 
	`ht⁄l
(0);

597 
	`rc⁄n_£nd
(
pw
->
loˇl_rc⁄n
, 
b
, 
NULL
);

600 
›s
 = 
	`make_›íÊow
( *›s, 
OFPT_PORT_STATUS
, &
b
);

601 
›s
->
ªas⁄
 = 
OFPPR_MODIFY
;

602 
›s
->
desc
 = *
p
;

603 
	`rc⁄n_£nd
(
pw
->
ªmŸe_rc⁄n
, 
b
, 
NULL
);

604 
	}
}

606 
boﬁ


607 
	$p‹t_w©chî_is_ªady
(c⁄° 
p‹t_w©chî
 *
pw
)

609  
pw
->
gŸ_„©uª_ª∂y
;

610 
	}
}

612 
hook_˛ass
 
	gp‹t_w©chî_hook_˛ass
 = {

613 
p‹t_w©chî_loˇl_∑ckë_cb
,

614 
p‹t_w©chî_ªmŸe_∑ckë_cb
,

615 
p‹t_w©chî_≥riodic_cb
,

616 
p‹t_w©chî_waô_cb
,

617 
NULL
,

621 
	$p‹t_w©chî_°¨t
(
£cch™
 *secchan,

622 
rc⁄n
 *
loˇl_rc⁄n
, rc⁄¿*
ªmŸe_rc⁄n
,

623 
p‹t_w©chî
 **
pwp
)

625 
p‹t_w©chî
 *
pw
;

626 
ªtvÆ
;

628 
pw
 = *
pwp
 = 
	`xˇŒoc
(1,  *pw);

629 
pw
->
loˇl_rc⁄n
 =Üocal_rconn;

630 
pw
->
ªmŸe_rc⁄n
 =Ñemote_rconn;

631 
pw
->
œ°_„©uª_ªque°
 = 
TIME_MIN
;

632 
	`p‹t_¨øy_öô
(&
pw
->
p‹ts
);

633 
pw
->
loˇl_p‹t_«me
[0] = '\0';

634 
ªtvÆ
 = 
	`√tdev_m⁄ô‹_¸óã
(&
pw
->
m⁄
);

635 i‡(
ªtvÆ
) {

636 
	`oÂ_Áèl
(
ªtvÆ
, "failedÅo startÇetwork device monitoring");

638 
	`shash_öô
(&
pw
->
p‹t_by_«me
);

639 
	`p‹t_w©chî_ªgi°î_ˇŒback
(
pw
, 
log_p‹t_°©us
, 
NULL
);

640 
	`add_hook
(
£cch™
, &
p‹t_w©chî_hook_˛ass
, 
pw
);

641 
	}
}

	@secchan/port-watcher.h

34 #i‚de‡
PORT_WATCHER_H


35 
	#PORT_WATCHER_H
 1

	)

37 
	~<°döt.h
>

38 
	~"compûî.h
"

39 
	~"£cch™.h
"

41 
	goÂ_p‹t
;

42 
	gp‹t_w©chî
;

43 
	g£cch™
;

45 
p‹t_w©chî_°¨t
(
£cch™
 *,

46 
rc⁄n
 *
loˇl
, rc⁄¿*
ªmŸe
,

47 
p‹t_w©chî
 **);

48 
boﬁ
 
p‹t_w©chî_is_ªady
(c⁄° 
p‹t_w©chî
 *);

49 
uöt32_t
 
p‹t_w©chî_gë_c⁄fig
(c⁄° 
p‹t_w©chî
 *,

50 
uöt32_t
 
p‹t_no
);

51 c⁄° *
	$p‹t_w©chî_gë_«me
(c⁄° 
p‹t_w©chî
 *,

52 
uöt32_t
 
p‹t_no
Ë
UNUSED
;

53 c⁄° 
uöt8_t
 *
	`p‹t_w©chî_gë_hwaddr
(c⁄° 
p‹t_w©chî
 *,

54 
uöt32_t
 
p‹t_no
);

55 
	`p‹t_w©chî_£t_Êags
(
p‹t_w©chî
 *, 
uöt32_t
 
p‹t_no
,

56 
uöt32_t
 
c⁄fig
, uöt32_à
c_mask
,

57 
uöt32_t
 
°©e
, uöt32_à
s_mask
);

59 
	tp‹t_ch™ged_cb_func
(
	tuöt32_t
 
	tp‹t_no
,

60 c⁄° 
	toÂ_p‹t
 *
	tﬁd
,

61 c⁄° 
	toÂ_p‹t
 *
	t√w
,

62 *
	taux
);

64 
	`p‹t_w©chî_ªgi°î_ˇŒback
(
p‹t_w©chî
 *,

65 
p‹t_ch™ged_cb_func
 *
p‹t_ch™ged
,

66 *
aux
);

68 
	tloˇl_p‹t_ch™ged_cb_func
(c⁄° 
	toÂ_p‹t
 *
	t√w
,

69 *
	taux
);

71 
	`p‹t_w©chî_ªgi°î_loˇl_p‹t_ˇŒback
(
p‹t_w©chî
 *
pw
,

72 
loˇl_p‹t_ch™ged_cb_func
 *
cb
,

73 *
aux
);

75 
	`gë_p‹t_«me
(c⁄° 
oÂ_p‹t
 *, *
«me
, 
size_t
 
«me_size
);

	@secchan/ratelimit.c

34 
	~<c⁄fig.h
>

35 
	~"øãlimô.h
"

36 
	~<¨∑/öë.h
>

37 
	~<°dlib.h
>

38 
	~"oÂbuf.h
"

39 
	~"›íÊow/›íÊow.h
"

40 
	~"pﬁl-lo›.h
"

41 
	~"queue.h
"

42 
	~"rc⁄n.h
"

43 
	~"£cch™.h
"

44 
	~"°©us.h
"

45 
	~"timevÆ.h
"

46 
	~"vc⁄n.h
"

48 
	søã_limôî
 {

49 c⁄° 
£âögs
 *
	ms
;

50 
rc⁄n
 *
	mªmŸe_rc⁄n
;

53 
oÂ_queue
 
	mqueues
[65535];

54 
	mn_queued
;

55 
	m√xt_tx_p‹t
;

63 
	mœ°_fûl
;

64 
	mtokís
;

67 
	mn_txq
;

70 
	mn_n‹mÆ
;

71 
	mn_limôed
;

72 
	mn_queue_dr›≥d
;

73 
	mn_tx_dr›≥d
;

78 
	$dr›_∑ckë
(
øã_limôî
 *
æ
)

80 
oÂ_queue
 *
l⁄ge°
;

81 
n_l⁄ge°
;

82 
oÂ_queue
 *
q
;

84 
l⁄ge°
 = &
æ
->
queues
[0];

85 
n_l⁄ge°
 = 1;

86 
q
 = &
æ
->
queues
[0]; q < &æ->queues[
OFPP_MAX
]; q++) {

87 i‡(
l⁄ge°
->
n
 < 
q
->n) {

88 
l⁄ge°
 = 
q
;

89 
n_l⁄ge°
 = 1;

90 } i‡(
l⁄ge°
->
n
 =
q
->n) {

91 
n_l⁄ge°
++;

95 i‡(!
	`øndom_ønge
(
n_l⁄ge°
)) {

96 
l⁄ge°
 = 
q
;

102 
	`oÂbuf_dñëe
(
	`queue_p›_hód
(
l⁄ge°
));

103 
æ
->
n_queued
--;

104 
	}
}

107 
oÂbuf
 *

108 
	$dequeue_∑ckë
(
øã_limôî
 *
æ
)

110 
i
;

112 
i
 = 0; i < 
OFPP_MAX
; i++) {

113 
p‹t
 = (
æ
->
√xt_tx_p‹t
 + 
i
Ë% 
OFPP_MAX
;

114 
oÂ_queue
 *
q
 = &
æ
->
queues
[
p‹t
];

115 i‡(
q
->
n
) {

116 
æ
->
√xt_tx_p‹t
 = (
p‹t
 + 1Ë% 
OFPP_MAX
;

117 
æ
->
n_queued
--;

118  
	`queue_p›_hód
(
q
);

121 
	`NOT_REACHED
();

122 
	}
}

126 
	$ªfûl_buckë
(
øã_limôî
 *
æ
)

128 c⁄° 
£âögs
 *
s
 = 
æ
->s;

129 
now
 = 
	`time_m£c
();

130 
tokís
 = (
now
 - 
æ
->
œ°_fûl
Ë* 
s
->
øã_limô
 +Ñl->tokens;

131 i‡(
tokís
 >= 1000) {

132 
æ
->
œ°_fûl
 = 
now
;

133 
æ
->
tokís
 = 
	`MIN
—okís, 
s
->
bur°_limô
 * 1000);

135 
	}
}

140 
boﬁ


141 
	$gë_tokí
(
øã_limôî
 *
æ
)

143 i‡(
æ
->
tokís
 >= 1000) {

144 
æ
->
tokís
 -= 1000;

145  
åue
;

147  
Ál£
;

149 
	}
}

151 
boﬁ


152 
	$øã_limô_loˇl_∑ckë_cb
(
ªœy
 *
r
, *
æ_
)

154 
øã_limôî
 *
æ
 = 
æ_
;

155 c⁄° 
£âögs
 *
s
 = 
æ
->s;

156 
oÂ_∑ckë_ö
 *
›i
;

158 
›i
 = 
	`gë_oÂ_∑ckë_ö
(
r
);

159 i‡(!
›i
) {

160  
Ál£
;

163 i‡(
›i
->
ªas⁄
 =
OFPR_ACTION
) {

167  
Ál£
;

170 i‡(!
æ
->
n_queued
 && 
	`gë_tokí
(rl)) {

173 
æ
->
n_n‹mÆ
++;

174  
Ál£
;

177 
oÂbuf
 *
msg
 = 
r
->
hÆves
[
HALF_LOCAL
].
rxbuf
;

179 
p‹t
 = 0;

180 i‡(
æ
->
n_queued
 >
s
->
bur°_limô
) {

181 
	`dr›_∑ckë
(
æ
);

183 
	`queue_push_èû
(&
æ
->
queues
[
p‹t
], 
	`oÂbuf_˛⁄e
(
msg
));

184 
æ
->
n_queued
++;

185 
æ
->
n_limôed
++;

186  
åue
;

188 
	}
}

191 
	$øã_limô_°©us_cb
(
°©us_ª∂y
 *
§
, *
æ_
)

193 
øã_limôî
 *
æ
 = 
æ_
;

195 
	`°©us_ª∂y_put
(
§
, "n‹mÆ=%Œu", 
æ
->
n_n‹mÆ
);

196 
	`°©us_ª∂y_put
(
§
, "limôed=%Œu", 
æ
->
n_limôed
);

197 
	`°©us_ª∂y_put
(
§
, "queue-dr›≥d=%Œu", 
æ
->
n_queue_dr›≥d
);

198 
	`°©us_ª∂y_put
(
§
, "tx-dr›≥d=%Œu", 
æ
->
n_tx_dr›≥d
);

199 
	}
}

202 
	$øã_limô_≥riodic_cb
(*
æ_
)

204 
øã_limôî
 *
æ
 = 
æ_
;

205 
i
;

209 
	`ªfûl_buckë
(
æ
);

210 
i
 = 0; 
æ
->
n_queued
 && 
	`gë_tokí
(rl) && i < 50; i++) {

215 
oÂbuf
 *
b
 = 
	`dequeue_∑ckë
(
æ
);

216 i‡(
	`rc⁄n_£nd_wôh_limô
(
æ
->
ªmŸe_rc⁄n
, 
b
, &æ->
n_txq
, 10)) {

217 
æ
->
n_tx_dr›≥d
++;

220 
	}
}

223 
	$øã_limô_waô_cb
(*
æ_
)

225 
øã_limôî
 *
æ
 = 
æ_
;

226 i‡(
æ
->
n_queued
) {

227 i‡(
æ
->
tokís
 >= 1000) {

229 
	`pﬁl_immedüã_wake
();

233 
	`pﬁl_timî_waô
(
TIME_UPDATE_INTERVAL
 / 2);

236 
	}
}

238 
hook_˛ass
 
	gøã_limô_hook_˛ass
 = {

239 
øã_limô_loˇl_∑ckë_cb
,

240 
NULL
,

241 
øã_limô_≥riodic_cb
,

242 
øã_limô_waô_cb
,

243 
NULL
,

247 
	$øã_limô_°¨t
(
£cch™
 *£cch™, c⁄° 
£âögs
 *
s
,

248 
swôch_°©us
 *
ss
, 
rc⁄n
 *
ªmŸe
)

250 
øã_limôî
 *
æ
;

251 
size_t
 
i
;

253 
æ
 = 
	`xˇŒoc
(1,  *rl);

254 
æ
->
s
 = s;

255 
æ
->
ªmŸe_rc⁄n
 = 
ªmŸe
;

256 
i
 = 0; i < 
	`ARRAY_SIZE
(
æ
->
queues
); i++) {

257 
	`queue_öô
(&
æ
->
queues
[
i
]);

259 
æ
->
œ°_fûl
 = 
	`time_m£c
();

260 
æ
->
tokís
 = 
s
->
øã_limô
 * 100;

261 
	`swôch_°©us_ªgi°î_ˇãg‹y
(
ss
, "rate-limit",

262 
øã_limô_°©us_cb
, 
æ
);

263 
	`add_hook
(
£cch™
, &
øã_limô_hook_˛ass
, 
æ
);

264 
	}
}

	@secchan/ratelimit.h

34 #i‚de‡
RATELIMIT_H


35 
	#RATELIMIT_H
 1

	)

37 
	grc⁄n
;

38 
	g£cch™
;

39 
	g£âögs
;

40 
	gswôch_°©us
;

42 
øã_limô_°¨t
(
£cch™
 *, c⁄° 
£âögs
 *,

43 
swôch_°©us
 *, 
rc⁄n
 *
ªmŸe
);

	@secchan/secchan.c

34 
	~<c⁄fig.h
>

35 
	~"£cch™.h
"

36 
	~<as£π.h
>

37 
	~<î∫o.h
>

38 
	~<gë›t.h
>

39 
	~<√töë/ö.h
>

40 
	~<°dlib.h
>

41 
	~<sig«l.h
>

42 
	~<°rög.h
>

44 
	~"comm™d-löe.h
"

45 
	~"compûî.h
"

46 
	~"d´m⁄.h
"

47 
	~"dús.h
"

48 
	~"discovîy.h
"

49 
	~"Áûovî.h
"

50 
	~"Áu….h
"

51 
	~"ö-b™d.h
"

52 
	~"Àak-checkî.h
"

53 
	~"li°.h
"

54 
	~"oÂ.h
"

55 
	~"oÂbuf.h
"

56 
	~"›íÊow/›íÊow.h
"

57 
	~"∑ckës.h
"

58 
	~"p‹t-w©chî.h
"

59 
	~"pﬁl-lo›.h
"

60 
	~"øãlimô.h
"

61 
	~"rc⁄n.h
"

62 
	~"°p-£cch™.h
"

63 
	~"°©us.h
"

64 
	~"timevÆ.h
"

65 
	~"utû.h
"

66 
	~"vc⁄n-s¶.h
"

67 
	~"vc⁄n.h
"

68 
	~"vlog-sockë.h
"

69 
	~"vlog.h
"

71 
	#LOG_MODULE
 
VLM_£cch™


	)

73 
	shook
 {

74 c⁄° 
hook_˛ass
 *
	m˛ass
;

75 *
	maux
;

78 
	s£cch™
 {

79 
hook
 *
	mhooks
;

80 
size_t
 
	mn_hooks
, 
	mÆloˇãd_hooks
;

83 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

85 
∑r£_›ti⁄s
(
¨gc
, *
¨gv
[], 
£âögs
 *);

86 
	$ußge
(Ë
NO_RETURN
;

88 *
	`vc⁄n_«me_wôhout_subs¸ùti⁄
(const *);

89 
pvc⁄n
 *
	`›í_∑ssive_vc⁄n
(c⁄° *
«me
);

90 
vc⁄n
 *
	`ac˚±_vc⁄n
(
pvc⁄n
 *pvconn);

92 
ªœy
 *
	`ªœy_¸óã
(
rc⁄n
 *
async
,

93 
rc⁄n
 *
loˇl
, rc⁄¿*
ªmŸe
,

94 
boﬁ
 
is_mgmt_c⁄n
);

95 
ªœy
 *
	`ªœy_ac˚±
(c⁄° 
£âögs
 *, 
pvc⁄n
 *);

96 
	`ªœy_run
(
ªœy
 *, 
£cch™
 *);

97 
	`ªœy_waô
(
ªœy
 *);

98 
	`ªœy_de°roy
(
ªœy
 *);

101 
	$maö
(
¨gc
, *
¨gv
[])

103 
£âögs
 
s
;

105 
li°
 
ªœys
 = 
	`LIST_INITIALIZER
(&relays);

107 
£cch™
 secchan;

109 
pvc⁄n
 *
m⁄ô‹
;

111 
pvc⁄n
 *
li°íîs
[
MAX_MGMT
];

112 
size_t
 
n_li°íîs
;

114 *
loˇl_rc⁄n_«me
;

115 
rc⁄n
 *
async_rc⁄n
, *
loˇl_rc⁄n
, *
ªmŸe_rc⁄n
;

116 
ªœy
 *
c⁄åﬁÀr_ªœy
;

117 
discovîy
 *discovery;

118 
swôch_°©us
 *switch_status;

119 
p‹t_w©chî
 *
pw
;

120 
i
;

121 
ªtvÆ
;

123 
	`£t_¥ogøm_«me
(
¨gv
[0]);

124 
	`ªgi°î_Áu…_h™dÀrs
();

125 
	`time_öô
();

126 
	`vlog_öô
();

127 
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
, &
s
);

128 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

130 
£cch™
.
hooks
 = 
NULL
;

131 
£cch™
.
n_hooks
 = 0;

132 
£cch™
.
Æloˇãd_hooks
 = 0;

135 
n_li°íîs
 = 0;

136 
i
 = 0; i < 
s
.
n_li°íîs
; i++) {

137 
li°íîs
[
n_li°íîs
++] = 
	`›í_∑ssive_vc⁄n
(
s
.
li°íî_«mes
[
i
]);

139 
m⁄ô‹
 = 
s
.
m⁄ô‹_«me
 ? 
	`›í_∑ssive_vc⁄n
(s.m⁄ô‹_«meË: 
NULL
;

142 
	`swôch_°©us_°¨t
(&
£cch™
, &
s
, &
swôch_°©us
);

144 
	`dõ_if_Æªady_ru¬ög
();

145 
	`d´m⁄ize
();

148 
ªtvÆ
 = 
	`vlog_£rvî_li°í
(
NULL
, NULL);

149 i‡(
ªtvÆ
) {

150 
	`oÂ_Áèl
(
ªtvÆ
, "CouldÇotÜisten for vlog connections");

153 
	`VLOG_INFO
(
LOG_MODULE
, "O≥nFlowÑe„ªn˚ im∂emíèti⁄ vîsi⁄ %s", 
VERSION
 
BUILDNR
);

154 
	`VLOG_INFO
(
LOG_MODULE
, "O≥nFlowÖrŸocﬁ vîsi⁄ 0x%02x", 
OFP_VERSION
);

157 i‡(
	`°∫cmp
(
s
.
dp_«me
, "nl:", 3) && strncmp(s.dp_name, "unix:", 5)

158 && !
s
.
c⁄åﬁÀr_«mes
[0]) {

159 
	`VLOG_WARN
(
LOG_MODULE
, "ControllerÇot specifiedánd datapath isÇotÇl: or "

163 i‡(!
	`°∫cmp
(
s
.
dp_«me
, "nl:", 3)) {

169 
async_rc⁄n
 = 
	`rc⁄n_¸óã
(0, 
s
.
max_backoff
);

170 
	`rc⁄n_c⁄√˘
(
async_rc⁄n
, 
s
.
dp_«me
);

171 
	`swôch_°©us_ªgi°î_ˇãg‹y
(
swôch_°©us
, "async",

172 
rc⁄n_°©us_cb
, 
async_rc⁄n
);

180 
async_rc⁄n
 = 
NULL
;

184 
loˇl_rc⁄n_«me
 = 
	`vc⁄n_«me_wôhout_subs¸ùti⁄
(
s
.
dp_«me
);

185 
loˇl_rc⁄n
 = 
	`rc⁄n_¸óã
(0, 
s
.
max_backoff
);

186 
	`rc⁄n_c⁄√˘
(
loˇl_rc⁄n
, 
loˇl_rc⁄n_«me
);

187 
	`‰ì
(
loˇl_rc⁄n_«me
);

188 
	`swôch_°©us_ªgi°î_ˇãg‹y
(
swôch_°©us
, "local",

189 
rc⁄n_°©us_cb
, 
loˇl_rc⁄n
);

192 
ªmŸe_rc⁄n
 = 
	`rc⁄n_¸óã
(
s
.
¥obe_öãrvÆ
, s.
max_backoff
);

193 i‡(
s
.
c⁄åﬁÀr_«mes
[0]) {

194 
ªtvÆ
 = 
	`rc⁄n_c⁄√˘
(
ªmŸe_rc⁄n
, 
s
.
c⁄åﬁÀr_«mes
[0]);

195 i‡(
ªtvÆ
 =
EAFNOSUPPORT
) {

196 
	`oÂ_Áèl
(0, "Nÿsuµ‹àf‹ %†vc⁄n", 
s
.
c⁄åﬁÀr_«mes
[0]);

199 
	`swôch_°©us_ªgi°î_ˇãg‹y
(
swôch_°©us
, "remote",

200 
rc⁄n_°©us_cb
, 
ªmŸe_rc⁄n
);

203 
c⁄åﬁÀr_ªœy
 = 
	`ªœy_¸óã
(
async_rc⁄n
, 
loˇl_rc⁄n
, 
ªmŸe_rc⁄n
,

204 
Ál£
);

205 
	`li°_push_back
(&
ªœys
, &
c⁄åﬁÀr_ªœy
->
node
);

208 
	`p‹t_w©chî_°¨t
(&
£cch™
, 
loˇl_rc⁄n
, 
ªmŸe_rc⁄n
, &
pw
);

209 
discovîy
 = 
s
.discovîy ? 
	`discovîy_öô
(&s, 
pw
, 
swôch_°©us
Ë: 
NULL
;

210 i‡(
s
.
íabÀ_°p
) {

211 
	`°p_°¨t
(&
£cch™
, 
pw
, 
loˇl_rc⁄n
, 
ªmŸe_rc⁄n
);

213 i‡(
s
.
ö_b™d
) {

214 
	`ö_b™d_°¨t
(&
£cch™
, &
s
, 
swôch_°©us
, 
pw
, 
ªmŸe_rc⁄n
);

216 i‡(
s
.
num_c⁄åﬁÀrs
 > 1) {

217 
	`Áûovî_°¨t
(&
£cch™
, &
s
, 
swôch_°©us
, 
ªmŸe_rc⁄n
);

219 i‡(
s
.
øã_limô
) {

220 
	`øã_limô_°¨t
(&
£cch™
, &
s
, 
swôch_°©us
, 
ªmŸe_rc⁄n
);

223 
s
.
discovîy
 || 
	`rc⁄n_is_Æive
(
ªmŸe_rc⁄n
)) {

224 
ªœy
 *
r
, *
n
;

225 
size_t
 
i
;

228 
	`LIST_FOR_EACH_SAFE
 (
r
, 
n
, 
ªœy
, 
node
, &
ªœys
) {

229 
	`ªœy_run
(
r
, &
£cch™
);

231 
i
 = 0; i < 
n_li°íîs
; i++) {

233 
ªœy
 *
r
 = 
	`ªœy_ac˚±
(&
s
, 
li°íîs
[
i
]);

234 i‡(!
r
) {

237 
	`li°_push_back
(&
ªœys
, &
r
->
node
);

240 i‡(
m⁄ô‹
) {

241 
vc⁄n
 *
√w
 = 
	`ac˚±_vc⁄n
(
m⁄ô‹
);

242 i‡(
√w
) {

245 
	`rc⁄n_add_m⁄ô‹
(
loˇl_rc⁄n
, 
√w
);

248 
i
 = 0; i < 
£cch™
.
n_hooks
; i++) {

249 i‡(
£cch™
.
hooks
[
i
].
˛ass
->
≥riodic_cb
) {

250 
£cch™
.
hooks
[
i
].
˛ass
->
	`≥riodic_cb
(£cch™.hooks[i].
aux
);

253 i‡(
s
.
discovîy
) {

254 *
c⁄åﬁÀr_«me
;

255 i‡(
	`rc⁄n_is_c⁄√˘ivôy_que°i⁄abÀ
(
ªmŸe_rc⁄n
)) {

256 
	`discovîy_que°i⁄_c⁄√˘ivôy
(
discovîy
);

258 i‡(
	`discovîy_run
(
discovîy
, &
c⁄åﬁÀr_«me
)) {

259 i‡(
c⁄åﬁÀr_«me
) {

260 
	`rc⁄n_c⁄√˘
(
ªmŸe_rc⁄n
, 
c⁄åﬁÀr_«me
);

262 
	`rc⁄n_disc⁄√˘
(
ªmŸe_rc⁄n
);

268 
	`LIST_FOR_EACH
 (
r
, 
ªœy
, 
node
, &
ªœys
) {

269 
	`ªœy_waô
(
r
);

271 
i
 = 0; i < 
n_li°íîs
; i++) {

272 
	`pvc⁄n_waô
(
li°íîs
[
i
]);

274 i‡(
m⁄ô‹
) {

275 
	`pvc⁄n_waô
(
m⁄ô‹
);

277 
i
 = 0; i < 
£cch™
.
n_hooks
; i++) {

278 i‡(
£cch™
.
hooks
[
i
].
˛ass
->
waô_cb
) {

279 
£cch™
.
hooks
[
i
].
˛ass
->
	`waô_cb
(£cch™.hooks[i].
aux
);

282 i‡(
discovîy
) {

283 
	`discovîy_waô
(
discovîy
);

285 
	`pﬁl_block
();

289 
	}
}

291 
pvc⁄n
 *

292 
	$›í_∑ssive_vc⁄n
(c⁄° *
«me
)

294 
pvc⁄n
 *pvconn;

295 
ªtvÆ
;

297 
ªtvÆ
 = 
	`pvc⁄n_›í
(
«me
, &
pvc⁄n
);

298 i‡(
ªtvÆ
 &&ÑëvÆ !
EAGAIN
) {

299 
	`oÂ_Áèl
(
ªtvÆ
, "›íög %s", 
«me
);

301  
pvc⁄n
;

302 
	}
}

304 
vc⁄n
 *

305 
	$ac˚±_vc⁄n
(
pvc⁄n
 *pvconn)

307 
vc⁄n
 *
√w
;

308 
ªtvÆ
;

310 
ªtvÆ
 = 
	`pvc⁄n_ac˚±
(
pvc⁄n
, 
OFP_VERSION
, &
√w
);

311 i‡(
ªtvÆ
 &&ÑëvÆ !
EAGAIN
) {

312 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "ac˚± faûed (%s)", 
	`°ªº‹
(
ªtvÆ
));

314  
√w
;

315 
	}
}

318 
	$add_hook
(
£cch™
 *£cch™, c⁄° 
hook_˛ass
 *
˛ass
, *
aux
)

320 
hook
 *hook;

322 i‡(
£cch™
->
n_hooks
 >£cch™->
Æloˇãd_hooks
) {

323 
£cch™
->
hooks
 = 
	`x2ƒóŒoc
(£cch™->hooks, &£cch™->
Æloˇãd_hooks
,

324  *
£cch™
->
hooks
);

326 
hook
 = &
£cch™
->
hooks
[£cch™->
n_hooks
++];

327 
hook
->
˛ass
 = class;

328 
hook
->
aux
 =áux;

329 
	}
}

331 
oÂ_∑ckë_ö
 *

332 
	$gë_oÂ_∑ckë_ö
(
ªœy
 *
r
)

334 
oÂbuf
 *
msg
 = 
r
->
hÆves
[
HALF_LOCAL
].
rxbuf
;

335 
oÂ_hódî
 *
oh
 = 
msg
->
d©a
;

336 i‡(
oh
->
ty≥
 =
OFPT_PACKET_IN
) {

338  
msg
->
d©a
;

344  
NULL
;

345 
	}
}

348 
boﬁ


349 
	$gë_oÂ_∑ckë_ëh_hódî
(
ªœy
 *
r
, 
oÂ_∑ckë_ö
 **
›ù
,

350 
ëh_hódî
 **
ëhp
)

352 c⁄° 
mö_Àn
 = 0;

353 
oÂ_∑ckë_ö
 *
›i
 = 
	`gë_oÂ_∑ckë_ö
(
r
);

354 i‡(
›i
 && 
	`¡ohs
(›i->
hódî
.
Àngth
Ë>
mö_Àn
) {

355 *
›ù
 = 
›i
;

357  
åue
;

359  
Ál£
;

360 
	}
}

368 
	$vc⁄n_«me_wôhout_subs¸ùti⁄
(c⁄° *
vc⁄n_«me
)

370 
∆_ödex
;

371 i‡(
	`ssˇnf
(
vc⁄n_«me
, "∆:%d", &
∆_ödex
) == 1) {

376  
	`xa•rötf
("∆:%d:0", 
∆_ödex
);

381 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "new management connection willÑeceive "

383  
	`x°rdup
(
vc⁄n_«me
);

385 
	}
}

387 
ªœy
 *

388 
	$ªœy_ac˚±
(c⁄° 
£âögs
 *
s
, 
pvc⁄n
 *pvconn)

390 
vc⁄n
 *
√w_ªmŸe
, *
√w_loˇl
;

391 
rc⁄n
 *
r1
, *
r2
;

392 *
vc⁄n_«me
;

393 
ªtvÆ
;

395 
√w_ªmŸe
 = 
	`ac˚±_vc⁄n
(
pvc⁄n
);

396 i‡(!
√w_ªmŸe
) {

397  
NULL
;

400 
vc⁄n_«me
 = 
	`vc⁄n_«me_wôhout_subs¸ùti⁄
(
s
->
dp_«me
);

401 
ªtvÆ
 = 
	`vc⁄n_›í
(
vc⁄n_«me
, 
OFP_VERSION
, &
√w_loˇl
);

402 i‡(
ªtvÆ
) {

403 
	`VLOG_ERR_RL
(
LOG_MODULE
, &
æ
, "couldÇot connectÅo %s (%s)",

404 
vc⁄n_«me
, 
	`°ªº‹
(
ªtvÆ
));

405 
	`vc⁄n_˛o£
(
√w_ªmŸe
);

406 
	`‰ì
(
vc⁄n_«me
);

407  
NULL
;

411 
r1
 = 
	`rc⁄n_¸óã
(0, 0);

412 
	`rc⁄n_c⁄√˘_uƒñübly
(
r1
, 
vc⁄n_«me
, 
√w_loˇl
);

413 
	`‰ì
(
vc⁄n_«me
);

415 
r2
 = 
	`rc⁄n_¸óã
(0, 0);

416 
	`rc⁄n_c⁄√˘_uƒñübly
(
r2
, "∑ssive", 
√w_ªmŸe
);

418  
	`ªœy_¸óã
(
NULL
, 
r1
, 
r2
, 
åue
);

419 
	}
}

421 
ªœy
 *

422 
	$ªœy_¸óã
(
rc⁄n
 *
async
, rc⁄¿*
loˇl
, rc⁄¿*
ªmŸe
,

423 
boﬁ
 
is_mgmt_c⁄n
)

425 
ªœy
 *
r
 = 
	`xˇŒoc
(1,  *r);

426 
r
->
hÆves
[
HALF_LOCAL
].
rc⁄n
 = 
loˇl
;

427 
r
->
hÆves
[
HALF_REMOTE
].
rc⁄n
 = 
ªmŸe
;

428 
r
->
is_mgmt_c⁄n
 = is_mgmt_conn;

429 
r
->
async_rc⁄n
 = 
async
;

430  
r
;

431 
	}
}

433 
boﬁ


434 
	$ˇŒ_loˇl_∑ckë_cbs
(
£cch™
 *£cch™, 
ªœy
 *
r
)

436 c⁄° 
hook
 *
h
;

437 
h
 = 
£cch™
->
hooks
; h < &£cch™->hooks[£cch™->
n_hooks
]; h++) {

438 
	`boﬁ
 (*
cb
)(
ªœy
 *, *
aux
Ë
h
->
˛ass
->
loˇl_∑ckë_cb
;

439 i‡(
cb
 && (cb)(
r
, 
h
->
aux
)) {

440  
åue
;

443  
Ál£
;

444 
	}
}

446 
boﬁ


447 
	$ˇŒ_ªmŸe_∑ckë_cbs
(
£cch™
 *£cch™, 
ªœy
 *
r
)

449 c⁄° 
hook
 *
h
;

450 
h
 = 
£cch™
->
hooks
; h < &£cch™->hooks[£cch™->
n_hooks
]; h++) {

451 
	`boﬁ
 (*
cb
)(
ªœy
 *, *
aux
Ë
h
->
˛ass
->
ªmŸe_∑ckë_cb
;

452 i‡(
cb
 && (cb)(
r
, 
h
->
aux
)) {

453  
åue
;

456  
Ál£
;

457 
	}
}

460 
	$ªœy_run
(
ªœy
 *
r
, 
£cch™
 *secchan)

462 
ôî©i⁄
;

463 
i
;

465 i‡(
r
->
async_rc⁄n
) {

466 
	`rc⁄n_run
(
r
->
async_rc⁄n
);

468 
i
 = 0; i < 2; i++) {

469 
	`rc⁄n_run
(
r
->
hÆves
[
i
].
rc⁄n
);

473 
ôî©i⁄
 = 0; iteration < 50; iteration++) {

474 
boﬁ
 
¥ogªss
 = 
Ál£
;

475 
i
 = 0; i < 2; i++) {

476 
hÆf
 *
this
 = &
r
->
hÆves
[
i
];

477 
hÆf
 *
≥î
 = &
r
->
hÆves
[!
i
];

479 i‡(!
this
->
rxbuf
) {

480 
this
->
rxbuf
 = 
	`rc⁄n_ªcv
—his->
rc⁄n
);

481 i‡(!
this
->
rxbuf
 && 
i
 =
HALF_LOCAL
 && 
r
->
async_rc⁄n
) {

482 
this
->
rxbuf
 = 
	`rc⁄n_ªcv
(
r
->
async_rc⁄n
);

484 i‡(
this
->
rxbuf
 && (
i
 =
HALF_REMOTE
 || !
r
->
is_mgmt_c⁄n
)) {

485 i‡(
i
 =
HALF_LOCAL


486 ? 
	`ˇŒ_loˇl_∑ckë_cbs
(
£cch™
, 
r
)

487 : 
	`ˇŒ_ªmŸe_∑ckë_cbs
(
£cch™
, 
r
))

489 
	`oÂbuf_dñëe
(
this
->
rxbuf
);

490 
this
->
rxbuf
 = 
NULL
;

491 
¥ogªss
 = 
åue
;

497 i‡(
this
->
rxbuf
 && !this->
n_txq
) {

498 
ªtvÆ
 = 
	`rc⁄n_£nd
(
≥î
->
rc⁄n
, 
this
->
rxbuf
,

499 &
this
->
n_txq
);

500 i‡(
ªtvÆ
 !
EAGAIN
) {

501 i‡(!
ªtvÆ
) {

502 
¥ogªss
 = 
åue
;

504 
	`oÂbuf_dñëe
(
this
->
rxbuf
);

506 
this
->
rxbuf
 = 
NULL
;

510 i‡(!
¥ogªss
) {

515 i‡(
r
->
is_mgmt_c⁄n
) {

516 
i
 = 0; i < 2; i++) {

517 
hÆf
 *
this
 = &
r
->
hÆves
[
i
];

518 i‡(!
	`rc⁄n_is_Æive
(
this
->
rc⁄n
)) {

519 
	`ªœy_de°roy
(
r
);

524 
	}
}

527 
	$ªœy_waô
(
ªœy
 *
r
)

529 
i
;

531 i‡(
r
->
async_rc⁄n
) {

532 
	`rc⁄n_run_waô
(
r
->
async_rc⁄n
);

534 
i
 = 0; i < 2; i++) {

535 
hÆf
 *
this
 = &
r
->
hÆves
[
i
];

537 
	`rc⁄n_run_waô
(
this
->
rc⁄n
);

538 i‡(!
this
->
rxbuf
) {

539 
	`rc⁄n_ªcv_waô
(
this
->
rc⁄n
);

540 i‡(
i
 =
HALF_LOCAL
 && 
r
->
async_rc⁄n
) {

541 
	`rc⁄n_ªcv_waô
(
r
->
async_rc⁄n
);

545 
	}
}

548 
	$ªœy_de°roy
(
ªœy
 *
r
)

550 
i
;

552 
	`li°_ªmove
(&
r
->
node
);

553 
	`rc⁄n_de°roy
(
r
->
async_rc⁄n
);

554 
i
 = 0; i < 2; i++) {

555 
hÆf
 *
this
 = &
r
->
hÆves
[
i
];

556 
	`rc⁄n_de°roy
(
this
->
rc⁄n
);

557 
	`oÂbuf_dñëe
(
this
->
rxbuf
);

559 
	`‰ì
(
r
);

560 
	}
}

565 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[], 
£âögs
 *
s
)

568 
OPT_ACCEPT_VCONN
 = 
UCHAR_MAX
 + 1,

569 
OPT_NO_RESOLV_CONF
,

570 
OPT_INACTIVITY_PROBE
,

571 
OPT_MAX_IDLE
,

572 
OPT_MAX_BACKOFF
,

573 
OPT_RATE_LIMIT
,

574 
OPT_BURST_LIMIT
,

575 
OPT_BOOTSTRAP_CA_CERT
,

576 
OPT_STP
,

577 
OPT_NO_STP
,

578 
OPT_OUT_OF_BAND
,

579 
OPT_IN_BAND
,

580 
VLOG_OPTION_ENUMS
,

581 
LEAK_CHECKER_OPTION_ENUMS


583 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

584 {"ac˚±-vc⁄n", 
ªquúed_¨gumít
, 0, 
OPT_ACCEPT_VCONN
},

585 {"no-ªsﬁv-c⁄f", 
no_¨gumít
, 0, 
OPT_NO_RESOLV_CONF
},

586 {"Áû", 
ªquúed_¨gumít
, 0, 'F'},

587 {"öa˘ivôy-¥obe", 
ªquúed_¨gumít
, 0, 
OPT_INACTIVITY_PROBE
},

588 {"max-idÀ", 
ªquúed_¨gumít
, 0, 
OPT_MAX_IDLE
},

589 {"max-backoff", 
ªquúed_¨gumít
, 0, 
OPT_MAX_BACKOFF
},

590 {"li°í", 
ªquúed_¨gumít
, 0, 'l'},

591 {"m⁄ô‹", 
ªquúed_¨gumít
, 0, 'm'},

592 {"øã-limô", 
›ti⁄Æ_¨gumít
, 0, 
OPT_RATE_LIMIT
},

593 {"bur°-limô", 
ªquúed_¨gumít
, 0, 
OPT_BURST_LIMIT
},

594 {"°p", 
no_¨gumít
, 0, 
OPT_STP
},

595 {"no-°p", 
no_¨gumít
, 0, 
OPT_NO_STP
},

596 {"out-of-b™d", 
no_¨gumít
, 0, 
OPT_OUT_OF_BAND
},

597 {"ö-b™d", 
no_¨gumít
, 0, 
OPT_IN_BAND
},

598 {"vîbo£", 
›ti⁄Æ_¨gumít
, 0, 'v'},

599 {"hñp", 
no_¨gumít
, 0, 'h'},

600 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

601 
DAEMON_LONG_OPTIONS
,

602 
VLOG_LONG_OPTIONS
,

603 
LEAK_CHECKER_LONG_OPTIONS
,

604 #ifde‡
HAVE_OPENSSL


605 
VCONN_SSL_LONG_OPTIONS


606 {"boŸ°øp-ˇ-˚π", 
ªquúed_¨gumít
, 0, 
OPT_BOOTSTRAP_CA_CERT
},

610 *
sh‹t_›ti⁄s
 = 
	`l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(
l⁄g_›ti⁄s
);

611 *
ac˚±_ª
 = 
NULL
;

612 
ªtvÆ
;

615 
s
->
n_li°íîs
 = 0;

616 
s
->
m⁄ô‹_«me
 = 
NULL
;

617 
s
->
max_idÀ
 = 15;

618 
s
->
¥obe_öãrvÆ
 = 15;

619 
s
->
max_backoff
 = 4;

620 
s
->
upd©e_ªsﬁv_c⁄f
 = 
åue
;

621 
s
->
øã_limô
 = 0;

622 
s
->
bur°_limô
 = 0;

623 
s
->
íabÀ_°p
 = 
Ál£
;

624 
s
->
ö_b™d
 = 
åue
;

626 
c
;

628 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

629 i‡(
c
 == -1) {

633 
c
) {

634 
OPT_ACCEPT_VCONN
:

635 
ac˚±_ª
 = 
›èrg
[0] ='^' ? o±¨g : 
	`xa•rötf
("^%s", optarg);

638 
OPT_NO_RESOLV_CONF
:

639 
s
->
upd©e_ªsﬁv_c⁄f
 = 
Ál£
;

642 
OPT_INACTIVITY_PROBE
:

643 
s
->
¥obe_öãrvÆ
 = 
	`©oi
(
›èrg
);

644 i‡(
s
->
¥obe_öãrvÆ
 < 1) {

645 
	`oÂ_Áèl
(0, "--inactivity-probeárgument must beátÜeast 1");

649 
OPT_MAX_IDLE
:

650 i‡(!
	`°rcmp
(
›èrg
, "permanent")) {

651 
s
->
max_idÀ
 = 
OFP_FLOW_PERMANENT
;

653 
s
->
max_idÀ
 = 
	`©oi
(
›èrg
);

654 i‡(
s
->
max_idÀ
 < 1 || s->max_idle > 65535) {

655 
	`oÂ_Áèl
(0, "--max-idleárgument must be between 1ánd "

661 
OPT_MAX_BACKOFF
:

662 
s
->
max_backoff
 = 
	`©oi
(
›èrg
);

663 i‡(
s
->
max_backoff
 < 1) {

664 
	`oÂ_Áèl
(0, "--max-backoffárgument must beátÜeast 1");

665 } i‡(
s
->
max_backoff
 > 3600) {

666 
s
->
max_backoff
 = 3600;

670 
OPT_RATE_LIMIT
:

671 i‡(
›èrg
) {

672 
s
->
øã_limô
 = 
	`©oi
(
›èrg
);

673 i‡(
s
->
øã_limô
 < 1) {

674 
	`oÂ_Áèl
(0, "--rate-limitárgument must beátÜeast 1");

677 
s
->
øã_limô
 = 1000;

681 
OPT_BURST_LIMIT
:

682 
s
->
bur°_limô
 = 
	`©oi
(
›èrg
);

683 i‡(
s
->
bur°_limô
 < 1) {

684 
	`oÂ_Áèl
(0, "--burst-limitárgument must beátÜeast 1");

688 
OPT_STP
:

689 
s
->
íabÀ_°p
 = 
åue
;

692 
OPT_NO_STP
:

693 
s
->
íabÀ_°p
 = 
Ál£
;

696 
OPT_OUT_OF_BAND
:

697 
s
->
ö_b™d
 = 
Ál£
;

703 
OPT_IN_BAND
:

704 
s
->
ö_b™d
 = 
åue
;

708 i‡(
s
->
n_li°íîs
 >
MAX_MGMT
) {

709 
	`oÂ_Áèl
(0,

711 
MAX_MGMT
);

713 
s
->
li°íî_«mes
[s->
n_li°íîs
++] = 
›èrg
;

717 i‡(
s
->
m⁄ô‹_«me
) {

718 
	`oÂ_Áèl
(0, "-m or --monitor may only be specified once");

720 
s
->
m⁄ô‹_«me
 = 
›èrg
;

724 
	`ußge
();

727 
	`¥ötf
("%†%†compûed "
__DATE__
" "
__TIME__
"\n",

728 
¥ogøm_«me
, 
VERSION
 
BUILDNR
);

729 
	`exô
(
EXIT_SUCCESS
);

731 
DAEMON_OPTION_HANDLERS


733 
VLOG_OPTION_HANDLERS


735 
LEAK_CHECKER_OPTION_HANDLERS


737 #ifde‡
HAVE_OPENSSL


738 
VCONN_SSL_OPTION_HANDLERS


740 
OPT_BOOTSTRAP_CA_CERT
:

741 
	`vc⁄n_s¶_£t_ˇ_˚π_fûe
(
›èrg
, 
åue
);

746 
	`exô
(
EXIT_FAILURE
);

749 
	`ab‹t
();

752 
	`‰ì
(
sh‹t_›ti⁄s
);

754 
¨gc
 -
›töd
;

755 
¨gv
 +
›töd
;

756 i‡(
¨gc
 < 1 ||árgc > 2) {

757 
	`oÂ_Áèl
(0, "need one orÅwoÇon-optionárguments; "

762 
s
->
dp_«me
 = 
¨gv
[0];

764 *
cuº
;

765 *
ßve
;

766 
i
;

768 
s
->
num_c⁄åﬁÀrs
 = 0;

769 
i
 = 0; i < 
MAX_CONTROLLERS
; ++i)

770 
s
->
c⁄åﬁÀr_«mes
[
i
] = 
NULL
;

771 i‡(
¨gc
 > 1) {

772 
cuº
 = 
	`°πok_r
(
¨gv
[1], ",,", &
ßve
), 
i
 = 0;

773 
cuº
 && 
i
 < 
MAX_CONTROLLERS
;

774 
cuº
 = 
	`°πok_r
(
NULL
, ",,", &
ßve
), ++
i
) {

775 
s
->
c⁄åﬁÀr_«mes
[
i
] = 
	`x°rdup
(
cuº
);

776 ++
s
->
num_c⁄åﬁÀrs
;

782 i‡(!
ac˚±_ª
) {

783 
ac˚±_ª
 = 
	`vc⁄n_s¶_is_c⁄figuªd
() ? "^ssl:.*" : ".*";

785 
ªtvÆ
 = 
	`ªgcomp
(&
s
->
ac˚±_c⁄åﬁÀr_ªgex
, 
ac˚±_ª
,

786 
REG_NOSUB
 | 
REG_EXTENDED
);

787 i‡(
ªtvÆ
) {

788 
size_t
 
Àngth
 = 
	`ªgîr‹
(
ªtvÆ
, &
s
->
ac˚±_c⁄åﬁÀr_ªgex
, 
NULL
, 0);

789 *
buf„r
 = 
	`xmÆloc
(
Àngth
);

790 
	`ªgîr‹
(
ªtvÆ
, &
s
->
ac˚±_c⁄åﬁÀr_ªgex
, 
buf„r
, 
Àngth
);

791 
	`oÂ_Áèl
(0, "%s: %s", 
ac˚±_ª
, 
buf„r
);

793 
s
->
ac˚±_c⁄åﬁÀr_ª
 = 
ac˚±_ª
;

796 
s
->
discovîy
 = s->
c⁄åﬁÀr_«mes
[0] =
NULL
;

797 i‡(
s
->
discovîy
 && !s->
ö_b™d
) {

798 
	`oÂ_Áèl
(0, "CannotÖerform discovery with out-of-band control");

802 i‡(
s
->
øã_limô
) {

803 i‡(
s
->
øã_limô
 < 100) {

804 
	`VLOG_WARN
(
LOG_MODULE
, "RateÜimit setÅo unusuallyÜow value %d",

805 
s
->
øã_limô
);

807 i‡(!
s
->
bur°_limô
) {

808 
s
->
bur°_limô
 = s->
øã_limô
 / 4;

810 
s
->
bur°_limô
 = 
	`MAX
(s->burst_limit, 1);

811 
s
->
bur°_limô
 = 
	`MIN
(s->bur°_limô, 
INT_MAX
 / 1000);

813 
	}
}

816 
	$ußge
()

818 
	`¥ötf
("%s: secure channel,áÑelay for OpenFlow messages.\n"

823 
¥ogøm_«me
,Örogram_name);

824 
	`vc⁄n_ußge
(
åue
,Årue,Årue);

825 
	`¥ötf
("\nController discovery options:\n"

843 
	`d´m⁄_ußge
();

844 
	`vlog_ußge
();

845 
	`¥ötf
("\nOther options:\n"

848 
	`Àak_checkî_ußge
();

849 
	`exô
(
EXIT_SUCCESS
);

850 
	}
}

	@secchan/secchan.h

34 #i‚de‡
SECCHAN_H


35 
	#SECCHAN_H
 1

	)

37 
	~<ªgex.h
>

38 
	~<°dboﬁ.h
>

39 
	~<°ddef.h
>

40 
	~"li°.h
"

41 
	~"∑ckës.h
"

43 
	g£cch™
;

46 
	#MAX_MGMT
 8

	)

48 
	#MAX_CONTROLLERS
 3

	)

51 
	s£âögs
 {

53 
boﬁ
 
	mdiscovîy
;

54 
boﬁ
 
	mö_b™d
;

57 c⁄° *
	mdp_«me
;

58 
	mnum_c⁄åﬁÀrs
;

59 c⁄° *
	mc⁄åﬁÀr_«mes
[
MAX_CONTROLLERS
];

60 c⁄° *
	mli°íî_«mes
[
MAX_MGMT
];

61 
size_t
 
	mn_li°íîs
;

62 c⁄° *
	mm⁄ô‹_«me
;

65 
	mmax_idÀ
;

66 
	m¥obe_öãrvÆ
;

67 
	mmax_backoff
;

70 
	møã_limô
;

71 
	mbur°_limô
;

74 
ªgex_t
 
	mac˚±_c⁄åﬁÀr_ªgex
;

75 c⁄° *
	mac˚±_c⁄åﬁÀr_ª
;

76 
boﬁ
 
	mupd©e_ªsﬁv_c⁄f
;

79 
boﬁ
 
	míabÀ_°p
;

82 
	shÆf
 {

83 
rc⁄n
 *
	mrc⁄n
;

84 
oÂbuf
 *
	mrxbuf
;

85 
	mn_txq
;

88 
	sªœy
 {

89 
li°
 
	mnode
;

91 
	#HALF_LOCAL
 0

	)

92 
	#HALF_REMOTE
 1

	)

93 
hÆf
 
	mhÆves
[2];

105 
boﬁ
 
	mis_mgmt_c⁄n
;

106 
rc⁄n
 *
	masync_rc⁄n
;

109 
	shook_˛ass
 {

110 
boﬁ
 (*
loˇl_∑ckë_cb
)(
	mªœy
 *, *
	maux
);

111 
boﬁ
 (*
ªmŸe_∑ckë_cb
)(
	mªœy
 *, *
	maux
);

112 (*
	m≥riodic_cb
)(*
	maux
);

113 (*
	mwaô_cb
)(*
	maux
);

114 (*
	m˛osög_cb
)(
	mªœy
 *, *
	maux
);

117 
add_hook
(
£cch™
 *, c⁄° 
hook_˛ass
 *, *);

119 
oÂ_∑ckë_ö
 *
gë_oÂ_∑ckë_ö
(
ªœy
 *);

120 
boﬁ
 
gë_oÂ_∑ckë_ëh_hódî
(
ªœy
 *, 
oÂ_∑ckë_ö
 **,

121 
ëh_hódî
 **);

122 
gë_oÂ_∑ckë_∑ylﬂd
(
oÂ_∑ckë_ö
 *, 
oÂbuf
 *);

	@secchan/status.c

34 
	~<c⁄fig.h
>

35 
	~"°©us.h
"

36 
	~<¨∑/öë.h
>

37 
	~<as£π.h
>

38 
	~<î∫o.h
>

39 
	~<uni°d.h
>

40 
	~"dy«mic-°rög.h
"

41 
	~"›íÊow/nicúa-ext.h
"

42 
	~"oÂ.h
"

43 
	~"oÂbuf.h
"

44 
	~"›íÊow/›íÊow.h
"

45 
	~"rc⁄n.h
"

46 
	~"timevÆ.h
"

47 
	~"vlog.h
"

49 
	#LOG_MODULE
 
VLM_°©us


	)

52 
	sswôch_°©us_ˇãg‹y
 {

53 *
	m«me
;

54 (*
	mcb
)(
	m°©us_ª∂y
 *, *
	maux
);

55 *
	maux
;

58 
	sswôch_°©us
 {

59 c⁄° 
£âögs
 *
	ms
;

60 
time_t
 
	mboŸed
;

61 
swôch_°©us_ˇãg‹y
 *
	mˇãg‹õs
;

62 
size_t
 
	mn_ˇãg‹õs
, 
	mÆloˇãd_ˇãg‹õs
;

65 
	s°©us_ª∂y
 {

66 
swôch_°©us_ˇãg‹y
 *
	mˇãg‹y
;

67 
ds
 
	mªque°
;

68 
ds
 
	mouçut
;

71 
boﬁ


72 
	$swôch_°©us_ªmŸe_∑ckë_cb
(
ªœy
 *
r
, *
ss_
)

74 
swôch_°©us
 *
ss
 = 
ss_
;

75 
rc⁄n
 *
rc
 = 
r
->
hÆves
[
HALF_REMOTE
].rconn;

76 
oÂbuf
 *
msg
 = 
r
->
hÆves
[
HALF_REMOTE
].
rxbuf
;

77 
swôch_°©us_ˇãg‹y
 *
c
;

78 
nicúa_hódî
 *
ªque°
;

79 
nicúa_hódî
 *
ª∂y
;

80 
°©us_ª∂y
 
§
;

81 
oÂbuf
 *
b
;

82 
ªtvÆ
;

84 i‡(
msg
->
size
 < (
nicúa_hódî
)) {

85  
Ál£
;

87 
ªque°
 = 
msg
->
d©a
;

88 i‡(
ªque°
->
hódî
.
ty≥
 !
OFPT_EXPERIMENTER


89 || 
ªque°
->
víd‹
 !
	`ht⁄l
(
NX_VENDOR_ID
)

90 || 
ªque°
->
subty≥
 !
	`ht⁄l
(
NXT_STATUS_REQUEST
)) {

91  
Ál£
;

94 
§
.
ªque°
.
°rög
 = (*) (request + 1);

95 
§
.
ªque°
.
Àngth
 = 
msg
->
size
 -  *request;

96 
	`ds_öô
(&
§
.
ouçut
);

97 
c
 = 
ss
->
ˇãg‹õs
; c < &ss->ˇãg‹õs[ss->
n_ˇãg‹õs
]; c++) {

98 i‡(!
	`memcmp
(
c
->
«me
, 
§
.
ªque°
.
°rög
,

99 
	`MIN
(
	`°æí
(
c
->
«me
), 
§
.
ªque°
.
Àngth
))) {

100 
§
.
ˇãg‹y
 = 
c
;

101 
c
->
	`cb
(&
§
, c->
aux
);

104 
ª∂y
 = 
	`make_›íÊow_xid
( *ª∂y + 
§
.
ouçut
.
Àngth
,

105 
OFPT_EXPERIMENTER
, 
ªque°
->
hódî
.
xid
, &
b
);

106 
ª∂y
->
víd‹
 = 
	`ht⁄l
(
NX_VENDOR_ID
);

107 
ª∂y
->
subty≥
 = 
	`ht⁄l
(
NXT_STATUS_REPLY
);

108 
	`mem˝y
(
ª∂y
 + 1, 
§
.
ouçut
.
°rög
, sr.ouçut.
Àngth
);

109 
ªtvÆ
 = 
	`rc⁄n_£nd
(
rc
, 
b
, 
NULL
);

110 i‡(
ªtvÆ
 &&ÑëvÆ !
EAGAIN
) {

111 
	`VLOG_WARN
(
LOG_MODULE
, "£nd faûed (%s)", 
	`°ªº‹
(
ªtvÆ
));

113 
	`ds_de°roy
(&
§
.
ouçut
);

114  
åue
;

115 
	}
}

118 
	$rc⁄n_°©us_cb
(
°©us_ª∂y
 *
§
, *
rc⁄n_
)

120 
rc⁄n
 *rc⁄¿
rc⁄n_
;

121 
time_t
 
now
 = 
	`time_now
();

123 
	`°©us_ª∂y_put
(
§
, "«me=%s", 
	`rc⁄n_gë_«me
(
rc⁄n
));

124 
	`°©us_ª∂y_put
(
§
, "°©e=%s", 
	`rc⁄n_gë_°©e
(
rc⁄n
));

125 
	`°©us_ª∂y_put
(
§
, "backoff=%d", 
	`rc⁄n_gë_backoff
(
rc⁄n
));

126 
	`°©us_ª∂y_put
(
§
, "is-connected=%s",

127 
	`rc⁄n_is_c⁄√˘ed
(
rc⁄n
) ? "true" : "false");

128 
	`°©us_ª∂y_put
(
§
, "£¡-msgs=%u", 
	`rc⁄n_∑ckës_£¡
(
rc⁄n
));

129 
	`°©us_ª∂y_put
(
§
, "ª˚ived-msgs=%u", 
	`rc⁄n_∑ckës_ª˚ived
(
rc⁄n
));

130 
	`°©us_ª∂y_put
(
§
, "attempted-connections=%u",

131 
	`rc⁄n_gë_©ãm±ed_c⁄√˘i⁄s
(
rc⁄n
));

132 
	`°©us_ª∂y_put
(
§
, "successful-connections=%u",

133 
	`rc⁄n_gë_suc˚ssful_c⁄√˘i⁄s
(
rc⁄n
));

134 
	`°©us_ª∂y_put
(
§
, "last-connection=%ld",

135 (Ë(
now
 - 
	`rc⁄n_gë_œ°_c⁄√˘i⁄
(
rc⁄n
)));

136 
	`°©us_ª∂y_put
(
§
, "time-connected=%lu",

137 
	`rc⁄n_gë_tŸÆ_time_c⁄√˘ed
(
rc⁄n
));

138 
	`°©us_ª∂y_put
(
§
, "°©e-ñ≠£d=%u", 
	`rc⁄n_gë_°©e_ñ≠£d
(
rc⁄n
));

139 
	}
}

142 
	$c⁄fig_°©us_cb
(
°©us_ª∂y
 *
§
, *
s_
)

144 c⁄° 
£âögs
 *
s
 = 
s_
;

145 
size_t
 
i
;

147 
i
 = 0; i < 
s
->
n_li°íîs
; i++) {

148 
	`°©us_ª∂y_put
(
§
, "m™agemít%zu=%s", 
i
, 
s
->
li°íî_«mes
[i]);

150 i‡(
s
->
¥obe_öãrvÆ
) {

151 
	`°©us_ª∂y_put
(
§
, "¥obe-öãrvÆ=%d", 
s
->
¥obe_öãrvÆ
);

153 i‡(
s
->
max_backoff
) {

154 
	`°©us_ª∂y_put
(
§
, "max-backoff=%d", 
s
->
max_backoff
);

156 
	}
}

159 
	$swôch_°©us_cb
(
°©us_ª∂y
 *
§
, *
ss_
)

161 
swôch_°©us
 *
ss
 = 
ss_
;

162 
time_t
 
now
 = 
	`time_now
();

164 
	`°©us_ª∂y_put
(
§
, "now=%ld", (Ë
now
);

165 
	`°©us_ª∂y_put
(
§
, "u±ime=%ld", (Ë(
now
 - 
ss
->
boŸed
));

166 
	`°©us_ª∂y_put
(
§
, "pid=%ld", (Ë
	`gëpid
());

167 
	}
}

169 
hook_˛ass
 
	gswôch_°©us_hook_˛ass
 = {

170 
NULL
,

171 
swôch_°©us_ªmŸe_∑ckë_cb
,

172 
NULL
,

173 
NULL
,

174 
NULL
,

178 
	$swôch_°©us_°¨t
(
£cch™
 *£cch™, c⁄° 
£âögs
 *
s
,

179 
swôch_°©us
 **
s•
)

181 
swôch_°©us
 *
ss
 = 
	`xˇŒoc
(1,  *ss);

182 
ss
->
s
 = s;

183 
ss
->
boŸed
 = 
	`time_now
();

184 
	`swôch_°©us_ªgi°î_ˇãg‹y
(
ss
, "config",

185 
c⁄fig_°©us_cb
, (*Ë
s
);

186 
	`swôch_°©us_ªgi°î_ˇãg‹y
(
ss
, "swôch", 
swôch_°©us_cb
, ss);

187 *
s•
 = 
ss
;

188 
	`add_hook
(
£cch™
, &
swôch_°©us_hook_˛ass
, 
ss
);

189 
	}
}

192 
swôch_°©us_ªgi°î_ˇãg‹y
(
swôch_°©us
 *
ss
,

193 c⁄° *
ˇãg‹y
,

194 (*
cb
)(
°©us_ª∂y
 *, *
aux
),

195 *
aux
)

197 
swôch_°©us_ˇãg‹y
 *
c
;

198 i‡(
ss
->
n_ˇãg‹õs
 >ss->
Æloˇãd_ˇãg‹õs
) {

199 
ss
->
ˇãg‹õs
 = 
	`x2ƒóŒoc
(ss->ˇãg‹õs, &ss->
Æloˇãd_ˇãg‹õs
,

200  *
ss
->
ˇãg‹õs
);

202 
c
 = &
ss
->
ˇãg‹õs
[ss->
n_ˇãg‹õs
++];

203 
c
->
cb
 = cb;

204 
c
->
aux
 =áux;

205 
c
->
«me
 = 
	`x°rdup
(
ˇãg‹y
);

206 
	}
}

209 
	$°©us_ª∂y_put
(
°©us_ª∂y
 *
§
, c⁄° *
c⁄ã¡
, ...)

211 
size_t
 
ﬁd_Àngth
 = 
§
->
ouçut
.
Àngth
;

212 
size_t
 
added
;

213 
va_li°
 
¨gs
;

216 
	`ds_put_f‹m©
(&
§
->
ouçut
, "%s.", sr->
ˇãg‹y
->
«me
);

217 
	`va_°¨t
(
¨gs
, 
c⁄ã¡
);

218 
	`ds_put_f‹m©_vÆi°
(&
§
->
ouçut
, 
c⁄ã¡
, 
¨gs
);

219 
	`va_íd
(
¨gs
);

220 i‡(
	`ds_œ°
(&
§
->
ouçut
) != '\n') {

221 
	`ds_put_ch¨
(&
§
->
ouçut
, '\n');

225 
added
 = 
§
->
ouçut
.
Àngth
 - 
ﬁd_Àngth
;

226 i‡(
added
 < 
§
->
ªque°
.
Àngth


227 || 
	`memcmp
(&
§
->
ouçut
.
°rög
[
ﬁd_Àngth
],

228 
§
->
ªque°
.
°rög
, sr->ªque°.
Àngth
)) {

229 
	`ds_åunˇã
(&
§
->
ouçut
, 
ﬁd_Àngth
);

231 
	}
}

	@secchan/status.h

34 #i‚de‡
STATUS_H


35 
	#STATUS_H
 1

	)

37 
	~"£cch™.h
"

39 
	g£cch™
;

40 
	g°©us_ª∂y
;

41 
	gswôch_°©us
;

43 
swôch_°©us_°¨t
(
£cch™
 *, c⁄° 
£âögs
 *,

44 
swôch_°©us
 **);

45 
swôch_°©us_ªgi°î_ˇãg‹y
(
swôch_°©us
 *,

46 c⁄° *
ˇãg‹y
,

47 (*
cb
)(
°©us_ª∂y
 *,

48 *
aux
),

49 *
aux
);

51 
	$°©us_ª∂y_put
(
°©us_ª∂y
 *, const *, ...)

52 
	`PRINTF_FORMAT
(2, 3);

54 
	`rc⁄n_°©us_cb
(
°©us_ª∂y
 *, *
rc⁄n_
);

	@secchan/stp-secchan.c

34 
	~<c⁄fig.h
>

35 
	~"°p-£cch™.h
"

36 
	~<¨∑/öë.h
>

37 
	~<öây≥s.h
>

38 
	~"Êow.h
"

39 
	~"£cch™.h
"

40 
	~"oÂ.h
"

41 
	~"oÂbuf.h
"

42 
	~"›íÊow/›íÊow.h
"

43 
	~"pﬁl-lo›.h
"

44 
	~"p‹t-w©chî.h
"

45 
	~"rc⁄n.h
"

46 
	~"°p.h
"

47 
	~"timevÆ.h
"

48 
	~"vlog.h
"

50 
	#LOG_MODULE
 
VLM_°p_£cch™


	)

52 
	s°p_d©a
 {

53 
°p
 *
	m°p
;

54 
p‹t_w©chî
 *
	mpw
;

55 
rc⁄n
 *
	mloˇl_rc⁄n
;

56 
rc⁄n
 *
	mªmŸe_rc⁄n
;

57 
	mœ°_tick
;

58 
	mn_txq
;

61 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

63 
boﬁ


64 
	$°p_loˇl_∑ckë_cb
(
ªœy
 *
r
, *
°p_
)

66 
oÂbuf
 *
msg
 = 
r
->
hÆves
[
HALF_LOCAL
].
rxbuf
;

67 
oÂ_hódî
 *
oh
;

68 
°p_d©a
 *
°p
 = 
°p_
;

69 
oÂ_∑ckë_ö
 *
›i
;

70 
ëh_hódî
 *
ëh
;

71 
Œc_hódî
 *
Œc
;

72 
oÂbuf
 
∑ylﬂd
;

73 
uöt32_t
 
p‹t_no
;

74 
Êow
 flow;

76 
oh
 = 
msg
->
d©a
;

85 i‡(!
	`gë_oÂ_∑ckë_ëh_hódî
(
r
, &
›i
, &
ëh
)

86 || !
	`ëh_addr_equÆs
(
ëh
->
ëh_d°
, 
°p_ëh_addr
)) {

87  
Ál£
;

89 
p‹t_no
 = 0;

103 i‡(
›i
->
ªas⁄
 =
OFPR_ACTION
) {

105  
Ál£
;

108 
	`gë_oÂ_∑ckë_∑ylﬂd
(
›i
, &
∑ylﬂd
);

109 
	`Êow_exåa˘
(&
∑ylﬂd
, 
p‹t_no
, &
Êow
);

110 i‡(
Êow
.
dl_ty≥
 !
	`ht⁄s
(0x05ff)) {

111 
	`VLOG_DBG
(
LOG_MODULE
, "non-LLC frameÑeceived on STP multicastáddress");

112  
Ál£
;

114 
Œc
 = 
	`oÂbuf_©_as£π
(&
∑ylﬂd
,  *
ëh
,  *llc);

115 i‡(
Œc
->
Œc_dßp
 !
STP_LLC_DSAP
) {

116 
	`VLOG_DBG
(
LOG_MODULE
, "bad DSAP 0x%02"
PRIx8
"Ñeceived on STP multicastáddress",

117 
Œc
->
Œc_dßp
);

118  
Ál£
;

122 i‡(
∑ylﬂd
.
size
 > 
	`¡ohs
(
ëh
->
ëh_ty≥
Ë+ 
ETH_HEADER_LEN
) {

123 
∑ylﬂd
.
size
 = 
	`¡ohs
(
ëh
->
ëh_ty≥
Ë+ 
ETH_HEADER_LEN
;

125 i‡(
	`oÂbuf_åy_puŒ
(&
∑ylﬂd
, 
ETH_HEADER_LEN
 + 
LLC_HEADER_LEN
)) {

126 
°p_p‹t
 *
p
 = 
	`°p_gë_p‹t
(
°p
->°p, 
p‹t_no
);

127 
	`°p_ª˚ived_bpdu
(
p
, 
∑ylﬂd
.
d©a
,Öaylﬂd.
size
);

130  
åue
;

131 
	}
}

134 
	$°p_≥riodic_cb
(*
°p_
)

136 
°p_d©a
 *
°p
 = 
°p_
;

137 
now
 = 
	`time_m£c
();

138 
ñ≠£d
 = 
now
 - 
°p
->
œ°_tick
;

139 
°p_p‹t
 *
p
;

141 i‡(!
	`p‹t_w©chî_is_ªady
(
°p
->
pw
)) {

146 i‡(
ñ≠£d
 <= 0) {

150 
	`°p_tick
(
°p
->°p, 
	`MIN
(
INT_MAX
, 
ñ≠£d
));

151 
°p
->
œ°_tick
 = 
now
;

153 
	`°p_gë_ch™ged_p‹t
(
°p
->°p, &
p
)) {

154 
p‹t_no
 = 
	`°p_p‹t_no
(
p
);

155 
°p_°©e
 
s_°©e
 = 
	`°p_p‹t_gë_°©e
(
p
);

157 i‡(
s_°©e
 !
STP_DISABLED
) {

158 
	`VLOG_INFO
(
LOG_MODULE
, "STP: Port %dÉntered %s state",

159 
p‹t_no
, 
	`°p_°©e_«me
(
s_°©e
));

197 
	}
}

200 
	$°p_waô_cb
(*
°p_
 
UNUSED
)

202 
	`pﬁl_timî_waô
(1000);

203 
	}
}

206 
	$£nd_bpdu
(
oÂbuf
 *
pkt
, 
p‹t_no
, *
°p_
)

208 
°p_d©a
 *
°p
 = 
°p_
;

209 c⁄° 
uöt8_t
 *
p‹t_mac
 = 
	`p‹t_w©chî_gë_hwaddr
(
°p
->
pw
, 
p‹t_no
);

210 i‡(
p‹t_mac
) {

211 
ëh_hódî
 *
ëh
 = 
pkt
->
l2
;

212 
oÂbuf
 *
›o
;

214 
	`mem˝y
(
ëh
->
ëh_§c
, 
p‹t_mac
, 
ETH_ADDR_LEN
);

215 
›o
 = 
	`make_unbuf„ªd_∑ckë_out
(
pkt
, 
OFPP_ANY
, 
p‹t_no
);

217 
	`rc⁄n_£nd_wôh_limô
(
°p
->
loˇl_rc⁄n
, 
›o
, &°p->
n_txq
, 
OFPP_MAX
);

219 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "ˇ¬Ÿ síd BPDU o¿missögÖ‹à%d", 
p‹t_no
);

221 
	`oÂbuf_dñëe
(
pkt
);

222 
	}
}

224 
boﬁ


225 
	$°p_is_p‹t_suµ‹ãd
(
uöt32_t
 
p‹t_no
)

227  
p‹t_no
 < 
STP_MAX_PORTS
;

228 
	}
}

231 
	$°p_p‹t_ch™ged_cb
(
uöt32_t
 
p‹t_no
,

232 c⁄° 
oÂ_p‹t
 *
ﬁd
 
UNUSED
,

233 c⁄° 
oÂ_p‹t
 *
√w
,

234 *
°p_
)

236 
°p_d©a
 *
°p
 = 
°p_
;

237 
°p_p‹t
 *
p
;

239 i‡(!
	`°p_is_p‹t_suµ‹ãd
(
p‹t_no
)) {

243 
p
 = 
	`°p_gë_p‹t
(
°p
->°p, 
p‹t_no
);

244 i‡(!
√w


249 
	`°p_p‹t_dißbÀ
(
p
);

251 
•ìd
 = 0;

252 
	`°p_p‹t_íabÀ
(
p
);

253 i‡(
√w
->
cuº
 & (
OFPPF_10MB_HD
 | 
OFPPF_10MB_FD
)) {

254 
•ìd
 = 10;

255 } i‡(
√w
->
cuº
 & (
OFPPF_100MB_HD
 | 
OFPPF_100MB_FD
)) {

256 
•ìd
 = 100;

257 } i‡(
√w
->
cuº
 & (
OFPPF_1GB_HD
 | 
OFPPF_1GB_FD
)) {

258 
•ìd
 = 1000;

259 } i‡(
√w
->
cuº
 & 
OFPPF_10GB_FD
) {

260 
•ìd
 = 10000;

262 
	`°p_p‹t_£t_•ìd
(
p
, 
•ìd
);

264 
	}
}

267 
	$°p_loˇl_p‹t_ch™ged_cb
(c⁄° 
oÂ_p‹t
 *
p‹t
, *
°p_
)

269 
°p_d©a
 *
°p
 = 
°p_
;

270 i‡(
p‹t
) {

271 
	`°p_£t_bridge_id
(
°p
->°p, 
	`ëh_addr_to_uöt64
(
p‹t
->
hw_addr
));

273 
	}
}

275 
hook_˛ass
 
	g°p_hook_˛ass
 = {

276 
°p_loˇl_∑ckë_cb
,

277 
NULL
,

278 
°p_≥riodic_cb
,

279 
°p_waô_cb
,

280 
NULL
,

284 
	$°p_°¨t
(
£cch™
 *£cch™, 
p‹t_w©chî
 *
pw
,

285 
rc⁄n
 *
loˇl
, rc⁄¿*
ªmŸe
)

287 
uöt8_t
 
dpid
[
ETH_ADDR_LEN
];

288 
°p_d©a
 *
°p
;

290 
°p
 = 
	`xˇŒoc
(1,  *stp);

291 
	`ëh_addr_øndom
(
dpid
);

292 
°p
->°∞
	`°p_¸óã
("°p", 
	`ëh_addr_to_uöt64
(
dpid
), 
£nd_bpdu
, stp);

293 
°p
->
pw
 =Öw;

294 
°p
->
loˇl_rc⁄n
 = 
loˇl
;

295 
°p
->
ªmŸe_rc⁄n
 = 
ªmŸe
;

296 
°p
->
œ°_tick
 = 
	`time_m£c
();

298 
	`p‹t_w©chî_ªgi°î_ˇŒback
(
pw
, 
°p_p‹t_ch™ged_cb
, 
°p
);

299 
	`p‹t_w©chî_ªgi°î_loˇl_p‹t_ˇŒback
(
pw
, 
°p_loˇl_p‹t_ch™ged_cb
,

300 
°p
);

301 
	`add_hook
(
£cch™
, &
°p_hook_˛ass
, 
°p
);

302 
	}
}

	@secchan/stp-secchan.h

34 #i‚de‡
STP_SECCHAN_H


35 
	#STP_SECCHAN_H
 1

	)

39 
	#STP_EXTRA_BOOT_TIME
 30

	)

41 
	gp‹t_w©chî
;

42 
	grc⁄n
;

43 
	g£cch™
;

45 
°p_°¨t
(
£cch™
 *, 
p‹t_w©chî
 *,

46 
rc⁄n
 *
loˇl
, rc⁄¿*
ªmŸe
);

	@udatapath/action_set.c

31 
	~<°dlib.h
>

32 
	~"a˘i⁄_£t.h
"

33 
	~"dp_a˘i⁄s.h
"

34 
	~"d©≠©h.h
"

35 
	~"∑ckë.h
"

36 
	~"oÊib/oÊ.h
"

37 
	~"oÊib/oÊ-a˘i⁄s.h
"

38 
	~"oÊib/oÊ-¥öt.h
"

39 
	~"∑ckë.h
"

40 
	~"li°.h
"

41 
	~"utû.h
"

42 
	~"vlog.h
"

44 
	#LOG_MODULE
 
VLM_a˘i⁄_£t


	)

46 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

48 
	ga˘i⁄_£t_íåy
;

50 
	sa˘i⁄_£t
 {

51 
li°
 
	ma˘i⁄s
;

54 
oÊ_exp
 *
	mexp
;

57 
	sa˘i⁄_£t_íåy
 {

58 
li°
 
	mnode
;

60 
oÊ_a˘i⁄_hódî
 *
	ma˘i⁄
;

62 
	m‹dî
;

73 
	$a˘i⁄_£t_‹dî
(
oÊ_a˘i⁄_hódî
 *
a˘
) {

74 
a˘
->
ty≥
) {

75 (
OFPAT_COPY_TTL_OUT
):  40;

76 (
OFPAT_COPY_TTL_IN
):  10;

77 (
OFPAT_SET_FIELD
):  60;

78 (
OFPAT_SET_MPLS_TTL
):  60;

79 (
OFPAT_DEC_MPLS_TTL
):  50;

80 (
OFPAT_PUSH_PBB
):  30;

81 (
OFPAT_POP_PBB
):  20;

82 (
OFPAT_PUSH_VLAN
):  30;

83 (
OFPAT_POP_VLAN
):  20;

84 (
OFPAT_PUSH_MPLS
):  30;

85 (
OFPAT_POP_MPLS
):  20;

86 (
OFPAT_SET_QUEUE
):  70;

87 (
OFPAT_GROUP
):  80;

88 (
OFPAT_SET_NW_TTL
):  60;

89 (
OFPAT_DEC_NW_TTL
):  50;

90 (
OFPAT_OUTPUT
):  90;

91 (
OFPAT_EXPERIMENTER
):  75;

94 
	}
}

98 
a˘i⁄_£t
 *

99 
	$a˘i⁄_£t_¸óã
(
oÊ_exp
 *
exp
) {

100 
a˘i⁄_£t
 *
£t
 = 
	`xmÆloc
((action_set));

101 
	`li°_öô
(&
£t
->
a˘i⁄s
);

102 
£t
->
exp
 =Éxp;

104  
£t
;

105 
	}
}

107 
	$a˘i⁄_£t_de°roy
(
a˘i⁄_£t
 *
£t
) {

108 
	`a˘i⁄_£t_˛ór_a˘i⁄s
(
£t
);

109 
	`‰ì
(
£t
);

110 
	}
}

112 
a˘i⁄_£t_íåy
 *

113 
	$a˘i⁄_£t_¸óã_íåy
(
oÊ_a˘i⁄_hódî
 *
a˘
) {

114 
a˘i⁄_£t_íåy
 *
íåy
;

116 
íåy
 = 
	`xmÆloc
((
a˘i⁄_£t_íåy
));

117 
íåy
->
a˘i⁄
 = 
a˘
;

118 
íåy
->
‹dî
 = 
	`a˘i⁄_£t_‹dî
(
a˘
);

120  
íåy
;

121 
	}
}

123 
a˘i⁄_£t
 *

124 
	$a˘i⁄_£t_˛⁄e
(
a˘i⁄_£t
 *
£t
) {

125 
a˘i⁄_£t
 *
s
 = 
	`xmÆloc
((action_set));

126 
a˘i⁄_£t_íåy
 *
íåy
, *
√w_íåy
;

128 
	`li°_öô
(&
s
->
a˘i⁄s
);

129 
s
->
exp
 = 
£t
->exp;

131 
	`LIST_FOR_EACH
(
íåy
, 
a˘i⁄_£t_íåy
, 
node
, &
£t
->
a˘i⁄s
) {

132 
√w_íåy
 = 
	`a˘i⁄_£t_¸óã_íåy
(
íåy
->
a˘i⁄
);

133 
	`li°_push_back
(&
s
->
a˘i⁄s
, &
√w_íåy
->
node
);

136  
s
;

137 
	}
}

144 
	$a˘i⁄_£t_wrôe_a˘i⁄
(
a˘i⁄_£t
 *
£t
,

145 
oÊ_a˘i⁄_hódî
 *
a˘
) {

146 
a˘i⁄_£t_íåy
 *
íåy
, *
√w_íåy
;

148 
√w_íåy
 = 
	`a˘i⁄_£t_¸óã_íåy
(
a˘
);

150 
	`LIST_FOR_EACH
(
íåy
, 
a˘i⁄_£t_íåy
, 
node
, &
£t
->
a˘i⁄s
) {

151 i‡(
íåy
->
a˘i⁄
->
ty≥
 =
√w_íåy
->action->type) {

152 if(
íåy
->
a˘i⁄
->
ty≥
 =
OFPAT_SET_FIELD
){

153 
oÊ_a˘i⁄_£t_fõld
 *
√w_a˘
 =

154 (
oÊ_a˘i⁄_£t_fõld
*Ë
√w_íåy
->
a˘i⁄
;

155 
oÊ_a˘i⁄_£t_fõld
 *
a˘
 =

156 (
oÊ_a˘i⁄_£t_fõld
 *Ë
íåy
->
a˘i⁄
;

157 if(
a˘
->
fõld
->
hódî
 !
√w_a˘
->field->header){

162 
	`li°_ª∂a˚
(&
√w_íåy
->
node
, &
íåy
->node);

165 
	`‰ì
(
íåy
);

169 i‡(
√w_íåy
->
‹dî
 < 
íåy
->order) {

171 
	`li°_ö£π
(&
íåy
->
node
, &
√w_íåy
->node);

178 
	`li°_ö£π
(&
íåy
->
node
, &
√w_íåy
->node);

179 
	}
}

183 
	$a˘i⁄_£t_wrôe_a˘i⁄s
(
a˘i⁄_£t
 *
£t
,

184 
size_t
 
a˘i⁄s_num
,

185 
oÊ_a˘i⁄_hódî
 **
a˘i⁄s
) {

186 
size_t
 
i
;

187 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "WritingÅoáction set.");

188 
i
=0; i<
a˘i⁄s_num
; i++) {

189 
	`a˘i⁄_£t_wrôe_a˘i⁄
(
£t
, 
a˘i⁄s
[
i
]);

191 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, 
	`a˘i⁄_£t_to_°rög
(
£t
));

192 
	}
}

195 
	$a˘i⁄_£t_˛ór_a˘i⁄s
(
a˘i⁄_£t
 *
£t
) {

196 
a˘i⁄_£t_íåy
 *
íåy
, *
√xt
;

198 
	`LIST_FOR_EACH_SAFE
(
íåy
, 
√xt
, 
a˘i⁄_£t_íåy
, 
node
, &
£t
->
a˘i⁄s
) {

199 
	`li°_ªmove
(&
íåy
->
node
);

202 
	`‰ì
(
íåy
);

204 
	}
}

207 
	$a˘i⁄_£t_execuã
(
a˘i⁄_£t
 *
£t
, 
∑ckë
 *
pkt
, 
uöt64_t
 
cookõ
) {

208 
a˘i⁄_£t_íåy
 *
íåy
, *
√xt
;

210 
	`LIST_FOR_EACH_SAFE
(
íåy
, 
√xt
, 
a˘i⁄_£t_íåy
, 
node
, &
£t
->
a˘i⁄s
) {

211 
	`dp_execuã_a˘i⁄
(
pkt
, 
íåy
->
a˘i⁄
);

212 
	`li°_ªmove
(&
íåy
->
node
);

213 
	`‰ì
(
íåy
);

217 i‡(
pkt
->
out_group
 !
OFPG_ANY
) {

218 
uöt32_t
 
group_id
 = 
pkt
->
out_group
;

219 
pkt
->
out_group
 = 
OFPG_ANY
;

221 
	`a˘i⁄_£t_˛ór_a˘i⁄s
(
pkt
->
a˘i⁄_£t
);

222 
	`group_èbÀ_execuã
(
pkt
->
dp
->
groups
,Ökt, 
group_id
);

225 } i‡(
pkt
->
out_p‹t
 !
OFPP_ANY
) {

226 
uöt32_t
 
p‹t_id
 = 
pkt
->
out_p‹t
;

227 
uöt32_t
 
queue_id
 = 
pkt
->
out_queue
;

228 
uöt16_t
 
max_Àn
 = 
pkt
->
out_p‹t_max_Àn
;

229 
pkt
->
out_p‹t
 = 
OFPP_ANY
;

230 
pkt
->
out_p‹t_max_Àn
 = 0;

231 
pkt
->
out_queue
 = 0;

233 
	`a˘i⁄_£t_˛ór_a˘i⁄s
(
pkt
->
a˘i⁄_£t
);

234 
	`dp_a˘i⁄s_ouçut_p‹t
(
pkt
, 
p‹t_id
, 
queue_id
, 
max_Àn
, 
cookõ
);

238 
	}
}

241 
	$a˘i⁄_£t_to_°rög
(
a˘i⁄_£t
 *
£t
) {

242 *
°r
;

243 
size_t
 
°r_size
;

244 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

246 
	`a˘i⁄_£t_¥öt
(
°ªam
, 
£t
);

248 
	`f˛o£
(
°ªam
);

249  
°r
;

250 
	}
}

253 
	$a˘i⁄_£t_¥öt
(
FILE
 *
°ªam
, 
a˘i⁄_£t
 *
£t
) {

254 
a˘i⁄_£t_íåy
 *
íåy
;

256 
	`Ârötf
(
°ªam
, "[");

258 
	`LIST_FOR_EACH
(
íåy
, 
a˘i⁄_£t_íåy
, 
node
, &
£t
->
a˘i⁄s
) {

259 
	`oÊ_a˘i⁄_¥öt
(
°ªam
, 
íåy
->
a˘i⁄
, 
£t
->
exp
);

260 i‡(
íåy
->
node
.
√xt
 !&
£t
->
a˘i⁄s
Ë{ 
	`Ârötf
(
°ªam
, ", "); }

263 
	`Ârötf
(
°ªam
, "]");

264 
	}
}

	@udatapath/action_set.h

32 #i‚de‡
ACTION_SET_H


33 
	#ACTION_SET_H
 1

	)

35 
	~<sys/ty≥s.h
>

36 
	~<°dio.h
>

37 
	~"d©≠©h.h
"

38 
	~"∑ckë.h
"

39 
	~"oÊib/oÊ.h
"

40 
	~"oÊib/oÊ-a˘i⁄s.h
"

41 
	~"oÊib/oÊ-°ru˘s.h
"

43 
	ga˘i⁄_£t
;

44 
	gd©≠©h
;

45 
	g∑ckë
;

52 
a˘i⁄_£t
 *

53 
a˘i⁄_£t_¸óã
(
oÊ_exp
 *
exp
);

57 
a˘i⁄_£t_de°roy
(
a˘i⁄_£t
 *
£t
);

61 
a˘i⁄_£t
 *

62 
a˘i⁄_£t_˛⁄e
(
a˘i⁄_£t
 *
£t
);

67 
a˘i⁄_£t_wrôe_a˘i⁄s
(
a˘i⁄_£t
 *
£t
,

68 
size_t
 
a˘i⁄s_num
,

69 
oÊ_a˘i⁄_hódî
 **
a˘i⁄s
);

74 
a˘i⁄_£t_˛ór_a˘i⁄s
(
a˘i⁄_£t
 *
£t
);

79 
a˘i⁄_£t_execuã
(
a˘i⁄_£t
 *
£t
, 
∑ckë
 *
pkt
, 
uöt64_t
 
cookõ
);

83 
a˘i⁄_£t_to_°rög
(
a˘i⁄_£t
 *
£t
);

88 
a˘i⁄_£t_¥öt
(
FILE
 *
°ªam
, 
a˘i⁄_£t
 *
£t
);

	@udatapath/crc32.c

34 
	~<c⁄fig.h
>

35 
	~"¸c32.h
"

38 
	$¸c32_öô
(
¸c32
 *
¸c
, 
pﬁynomül
)

40 
i
;

42 
i
 = 0; i < 
CRC32_TABLE_SIZE
; ++i) {

43 
ªg
 = 
i
 << 24;

44 
j
;

45 
j
 = 0; j < 
CRC32_TABLE_BITS
; j++) {

46 
t›Bô
 = (
ªg
 & 0x80000000) != 0;

47 
ªg
 <<= 1;

48 i‡(
t›Bô
)

49 
ªg
 ^
pﬁynomül
;

51 
¸c
->
èbÀ
[
i
] = 
ªg
;

53 
	}
}

56 
	$¸c32_ˇlcuœã
(c⁄° 
¸c32
 *
¸c
, c⁄° *
d©a_
, 
size_t
 
n_byãs
)

58 c⁄° 
uöt8_t
 *
d©a
 = 
d©a_
;

59 
ªsu…
 = 0;

60 
size_t
 
i
;

62 
i
 = 0; i < 
n_byãs
; i++) {

63 
t›
 = 
ªsu…
 >> 24;

64 
t›
 ^
d©a
[
i
];

65 
ªsu…
 = (ªsu… << 8Ë^ 
¸c
->
èbÀ
[
t›
];

67  
ªsu…
;

68 
	}
}

	@udatapath/crc32.h

34 #i‚de‡
CRC32_H


35 
	#CRC32_H
 1

	)

37 
	~<°döt.h
>

38 
	~<°ddef.h
>

40 
	#CRC32_TABLE_BITS
 8

	)

41 
	#CRC32_TABLE_SIZE
 (1u << 
CRC32_TABLE_BITS
)

	)

43 
	s¸c32
 {

44 
	mèbÀ
[
CRC32_TABLE_SIZE
];

47 
¸c32_öô
(
¸c32
 *, 
pﬁynomül
);

48 
¸c32_ˇlcuœã
(c⁄° 
¸c32
 *, c⁄° *, 
size_t
);

	@udatapath/datapath.c

40 
	~"d©≠©h.h
"

41 
	~<as£π.h
>

42 
	~<î∫o.h
>

43 
	~<öây≥s.h
>

44 
	~<°dlib.h
>

45 
	~<°rög.h
>

46 
	~<uni°d.h
>

47 
	~"csum.h
"

48 
	~"dp_buf„rs.h
"

49 
	~"dp_c⁄åﬁ.h
"

50 
	~"oÂ.h
"

51 
	~"oÂbuf.h
"

52 
	~"group_èbÀ.h
"

53 
	~"mëî_èbÀ.h
"

54 
	~"oÊib/oÊ.h
"

55 
	~"oÊib-exp/oÊ-exp.h
"

56 
	~"oÊib-exp/oÊ-exp-nicúa.h
"

57 
	~"oÊib/oÊ-mesßges.h
"

58 
	~"oÊib/oÊ-log.h
"

59 
	~"›íÊow/›íÊow.h
"

60 
	~"›íÊow/nicúa-ext.h
"

61 
	~"›íÊow/¥iv©e-ext.h
"

62 
	~"›íÊow/›íÊow-ext.h
"

63 
	~"pùñöe.h
"

64 
	~"pﬁl-lo›.h
"

65 
	~"rc⁄n.h
"

66 
	~"°p.h
"

67 
	~"vc⁄n.h
"

69 
	#LOG_MODULE
 
VLM_dp


	)

71 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

74 
ªmŸe
 *
ªmŸe_¸óã
(
d©≠©h
 *
dp
, 
rc⁄n
 *rc⁄n, rc⁄¿*
rc⁄n_aux
);

75 
ªmŸe_run
(
d©≠©h
 *, 
ªmŸe
 *);

76 
ªmŸe_rc⁄n_run
(
d©≠©h
 *, 
ªmŸe
 *, 
uöt8_t
);

77 
ªmŸe_waô
(
ªmŸe
 *);

78 
ªmŸe_de°roy
(
ªmŸe
 *);

81 
	#MFR_DESC
 "Sènf‹d Univîsôy, Ericss⁄ Re£¨chánd CPqD Re£¨ch"

	)

82 
	#HW_DESC
 "O≥nFlow 1.3 Re„ªn˚ U£r•a˚ Swôch"

	)

83 
	#SW_DESC
 
__DATE__
" "
__TIME__


	)

84 
	#DP_DESC
 "O≥nFlow 1.3 Re„ªn˚ U£r•a˚ Swôch D©≠©h"

	)

85 
	#SERIAL_NUM
 "1"

	)

87 
	#MAIN_CONNECTION
 0

	)

88 
	#PTIN_CONNECTION
 1

	)

92 
oÊ_exp_msg
 
	gdp_exp_msg
 =

93 {.
∑ck
 = 
oÊ_exp_msg_∑ck
,

94 .
	gu≈ack
 = 
oÊ_exp_msg_u≈ack
,

95 .
	g‰ì
 = 
oÊ_exp_msg_‰ì
,

96 .
	gto_°rög
 = 
oÊ_exp_msg_to_°rög
};

98 
oÊ_exp
 
	gdp_exp
 =

99 {.
a˘
 = 
NULL
,

100 .
	gö°
 = 
NULL
,

101 .
	gm©ch
 = 
NULL
,

102 .
	g°©s
 = 
NULL
,

103 .
	gmsg
 = &
dp_exp_msg
};

106 
uöt64_t


107 
	$gí_d©≠©h_id
() {

108 
uöt8_t
 
ó
[
ETH_ADDR_LEN
];

109 
	`ëh_addr_øndom
(
ó
);

110  
	`ëh_addr_to_uöt64
(
ó
);

111 
	}
}

114 
d©≠©h
 *

115 
	$dp_√w
() {

116 
d©≠©h
 *
dp
;

117 
dp
 = 
	`xmÆloc
((
d©≠©h
));

119 
dp
->
m‰_desc
 = 
	`°∫˝y
(
	`xmÆloc
(
DESC_STR_LEN
), 
MFR_DESC
, DESC_STR_LEN);

120 
dp
->
m‰_desc
[
DESC_STR_LEN
-1] = 0x00;

121 
dp
->
hw_desc
 = 
	`°∫˝y
(
	`xmÆloc
(
DESC_STR_LEN
), 
HW_DESC
, DESC_STR_LEN);

122 
dp
->
hw_desc
[
DESC_STR_LEN
-1] = 0x00;

123 
dp
->
sw_desc
 = 
	`°∫˝y
(
	`xmÆloc
(
DESC_STR_LEN
), 
SW_DESC
, DESC_STR_LEN);

124 
dp
->
sw_desc
[
DESC_STR_LEN
-1] = 0x00;

125 
dp
->
dp_desc
 = 
	`°∫˝y
(
	`xmÆloc
(
DESC_STR_LEN
), 
DP_DESC
, DESC_STR_LEN);

126 
dp
->
dp_desc
[
DESC_STR_LEN
-1] = 0x00;

127 
dp
->
£rül_num
 = 
	`°∫˝y
(
	`xmÆloc
(
SERIAL_NUM_LEN
), 
SERIAL_NUM
, SERIAL_NUM_LEN);

128 
dp
->
£rül_num
[
SERIAL_NUM_LEN
-1] = 0x00;

131 
dp
->
id
 = 
	`gí_d©≠©h_id
();

133 
dp
->
gíî©i⁄_id
 = -1;

135 
dp
->
œ°_timeout
 = 
	`time_now
();

136 
	`li°_öô
(&
dp
->
ªmŸes
);

137 
dp
->
li°íîs
 = 
NULL
;

138 
dp
->
n_li°íîs
 = 0;

139 
dp
->
li°íîs_aux
 = 
NULL
;

140 
dp
->
n_li°íîs_aux
 = 0;

142 
	`mem£t
(
dp
->
p‹ts
, 0x00,  (dp->ports));

143 
dp
->
loˇl_p‹t
 = 
NULL
;

145 
dp
->
buf„rs
 = 
	`dp_buf„rs_¸óã
(dp);

146 
dp
->
pùñöe
 = 
	`pùñöe_¸óã
(dp);

147 
dp
->
groups
 = 
	`group_èbÀ_¸óã
(dp);

148 
dp
->
mëîs
 = 
	`mëî_èbÀ_¸óã
(dp);

150 
	`li°_öô
(&
dp
->
p‹t_li°
);

151 
dp
->
p‹ts_num
 = 0;

152 
dp
->
max_queues
 = 
NETDEV_MAX_QUEUES
;

154 
dp
->
exp
 = &
dp_exp
;

156 
dp
->
c⁄fig
.
Êags
 = 
OFPC_FRAG_NORMAL
;

157 
dp
->
c⁄fig
.
miss_£nd_Àn
 = 
OFP_DEFAULT_MISS_SEND_LEN
;

159 if(
	`°æí
(
dp
->
dp_desc
) == 0) {

161 
ho°«mëmp
[
DESC_STR_LEN
];

162 
	`gëho°«me
(
ho°«mëmp
, hostnametmp);

163 
	`¢¥ötf
(
dp
->
dp_desc
,  dp->dp_desc,"%†pid=%u",
ho°«mëmp
, 
	`gëpid
());

167 #i‡
	`deföed
(
OF_HW_PLAT
Ë&& (deföed(
UDATAPATH_AS_LIB
Ë|| deföed(
USE_NETDEV
))

168 
	`dp_hw_drv_öô
(
dp
);

171  
dp
;

172 
	}
}

176 
	$dp_add_pvc⁄n
(
d©≠©h
 *
dp
, 
pvc⁄n
 *pvc⁄n, pvc⁄¿*
pvc⁄n_aux
) {

177 
dp
->
li°íîs
 = 
	`xªÆloc
(dp->listeners,

178  *
dp
->
li°íîs
 * (dp->
n_li°íîs
 + 1));

179 
dp
->
li°íîs
[dp->
n_li°íîs
++] = 
pvc⁄n
;

181 
dp
->
li°íîs_aux
 = 
	`xªÆloc
(dp->listeners_aux,

182  *
dp
->
li°íîs_aux
 * (dp->
n_li°íîs_aux
 + 1));

183 
dp
->
li°íîs_aux
[dp->
n_li°íîs_aux
++] = 
pvc⁄n_aux
;

184 
	}
}

187 
	$dp_run
(
d©≠©h
 *
dp
) {

188 
time_t
 
now
 = 
	`time_now
();

189 
ªmŸe
 *
r
, *
∫
;

190 
size_t
 
i
;

192 i‡(
now
 !
dp
->
œ°_timeout
) {

193 
dp
->
œ°_timeout
 = 
now
;

194 
	`mëî_èbÀ_add_tokís
(
dp
->
mëîs
);

195 
	`pùñöe_timeout
(
dp
->
pùñöe
);

198 
	`pﬁl_timî_waô
(1000);

199 
	`dp_p‹ts_run
(
dp
);

202 
	`LIST_FOR_EACH_SAFE
 (
r
, 
∫
, 
ªmŸe
, 
node
, &
dp
->
ªmŸes
) {

203 
	`ªmŸe_run
(
dp
, 
r
);

206 
i
 = 0; i < 
dp
->
n_li°íîs
; ) {

207 
pvc⁄n
 *pvc⁄¿
dp
->
li°íîs
[
i
];

208 
vc⁄n
 *
√w_vc⁄n
;

210 
ªtvÆ
 = 
	`pvc⁄n_ac˚±
(
pvc⁄n
, 
OFP_VERSION
, &
√w_vc⁄n
);

211 i‡(!
ªtvÆ
) {

212 
rc⁄n
 * 
rc⁄n_aux
 = 
NULL
;

213 i‡(
dp
->
n_li°íîs_aux
 && dp->
li°íîs_aux
[
i
] !
NULL
) {

214 
pvc⁄n
 *
pvc⁄n_aux
 = 
dp
->
li°íîs_aux
[
i
];

215 
vc⁄n
 *
√w_vc⁄n_aux
;

216 
ªtvÆ_aux
 = 
	`pvc⁄n_ac˚±
(
pvc⁄n_aux
, 
OFP_VERSION
, &
√w_vc⁄n_aux
);

217 i‡(!
ªtvÆ_aux
)

218 
rc⁄n_aux
 = 
	`rc⁄n_√w_‰om_vc⁄n
("∑ssive_aux", 
√w_vc⁄n_aux
);

220 
	`ªmŸe_¸óã
(
dp
, 
	`rc⁄n_√w_‰om_vc⁄n
("∑ssive", 
√w_vc⁄n
), 
rc⁄n_aux
);

222 i‡(
ªtvÆ
 !
EAGAIN
) {

223 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "ac˚± faûed (%s)", 
	`°ªº‹
(
ªtvÆ
));

224 
dp
->
li°íîs
[
i
] = dp->li°íîs[--dp->
n_li°íîs
];

225 i‡(
dp
->
n_li°íîs_aux
) {

226 
dp
->
li°íîs_aux
[
i
] = dp->li°íîs_aux[--dp->
n_li°íîs_aux
];

230 
i
++;

232 
	}
}

235 
	$ªmŸe_run
(
d©≠©h
 *
dp
, 
ªmŸe
 *
r
)

237 
	`ªmŸe_rc⁄n_run
(
dp
, 
r
, 
MAIN_CONNECTION
);

239 i‡(!
	`rc⁄n_is_Æive
(
r
->
rc⁄n
)) {

240 
	`ªmŸe_de°roy
(
r
);

244 i‡(
r
->
rc⁄n_aux
 =
NULL
 || !
	`rc⁄n_is_Æive
(r->rconn_aux))

247 
	`ªmŸe_rc⁄n_run
(
dp
, 
r
, 
PTIN_CONNECTION
);

248 
	}
}

251 
	$ªmŸe_rc⁄n_run
(
d©≠©h
 *
dp
, 
ªmŸe
 *
r
, 
uöt8_t
 
c⁄n_id
) {

252 
rc⁄n
 *rconn;

253 
oÊ_îr
 
îr‹
;

254 
size_t
 
i
;

256 i‡(
c⁄n_id
 =
MAIN_CONNECTION
)

257 
rc⁄n
 = 
r
->rconn;

258 i‡(
c⁄n_id
 =
PTIN_CONNECTION
)

259 
rc⁄n
 = 
r
->
rc⁄n_aux
;

261 
	`rc⁄n_run
(
rc⁄n
);

264 
i
 = 0; i < 50; i++) {

265 i‡(!
r
->
cb_dump
) {

266 
oÂbuf
 *
buf„r
;

268 
buf„r
 = 
	`rc⁄n_ªcv
(
rc⁄n
);

269 i‡(
buf„r
 =
NULL
) {

272 
oÊ_msg_hódî
 *
msg
;

274 
£ndî
 sídî = {.
ªmŸe
 = 
r
, .
c⁄n_id
 = conn_id};

278 
îr‹
 = 
	`oÊ_msg_u≈ack
(
buf„r
->
d©a
, buf„r->
size
, &
msg
, &(
£ndî
.
xid
), 
dp
->
exp
);

280 i‡(!
îr‹
) {

281 
îr‹
 = 
	`h™dÀ_c⁄åﬁ_msg
(
dp
, 
msg
, &
£ndî
);

283 i‡(
îr‹
) {

284 
	`oÊ_msg_‰ì
(
msg
, 
dp
->
exp
);

288 i‡(
îr‹
) {

289 
oÊ_msg_îr‹
 
îr
 =

290 {{.
ty≥
 = 
OFPT_ERROR
},

291 .
ty≥
 = 
	`oÊ_îr‹_ty≥
(
îr‹
),

292 .
code
 = 
	`oÊ_îr‹_code
(
îr‹
),

293 .
d©a_Àngth
 = 
buf„r
->
size
,

294 .
d©a
 = 
buf„r
->data};

295 
	`dp_£nd_mesßge
(
dp
, (
oÊ_msg_hódî
 *)&
îr
, &
£ndî
);

298 
	`oÂbuf_dñëe
(
buf„r
);

301 i‡(
r
->
n_txq
 < 
TXQ_LIMIT
) {

302 
îr‹
 = 
r
->
	`cb_dump
(
dp
,Ñ->
cb_aux
);

303 i‡(
îr‹
 <= 0) {

304 i‡(
îr‹
) {

305 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "CallbackÉrror: %s.",

306 
	`°ªº‹
(-
îr‹
));

308 
r
->
	`cb_d⁄e
‘->
cb_aux
);

309 
r
->
cb_dump
 = 
NULL
;

316 
	}
}

319 
	$ªmŸe_waô
(
ªmŸe
 *
r
)

321 
	`rc⁄n_run_waô
(
r
->
rc⁄n
);

322 
	`rc⁄n_ªcv_waô
(
r
->
rc⁄n
);

324 i‡(
r
->
rc⁄n_aux
) {

325 
	`rc⁄n_run_waô
(
r
->
rc⁄n_aux
);

326 
	`rc⁄n_ªcv_waô
(
r
->
rc⁄n_aux
);

328 
	}
}

331 
	$ªmŸe_de°roy
(
ªmŸe
 *
r
)

333 i‡(
r
) {

334 i‡(
r
->
cb_dump
 &&Ñ->
cb_d⁄e
) {

335 
r
->
	`cb_d⁄e
‘->
cb_aux
);

337 
	`li°_ªmove
(&
r
->
node
);

338 i‡(
r
->
rc⁄n_aux
 !
NULL
) {

339 
	`rc⁄n_de°roy
(
r
->
rc⁄n_aux
);

341 
	`rc⁄n_de°roy
(
r
->
rc⁄n
);

342 
	`‰ì
(
r
);

344 
	}
}

346 
ªmŸe
 *

347 
	$ªmŸe_¸óã
(
d©≠©h
 *
dp
, 
rc⁄n
 *rc⁄n, rc⁄¿*
rc⁄n_aux
)

349 
size_t
 
i
;

350 
ªmŸe
 *ªmŸê
	`xmÆloc
( *remote);

351 
	`li°_push_back
(&
dp
->
ªmŸes
, &
ªmŸe
->
node
);

352 
ªmŸe
->
rc⁄n
 =Ñconn;

353 
ªmŸe
->
rc⁄n_aux
 =Ñconn_aux;

354 
ªmŸe
->
cb_dump
 = 
NULL
;

355 
ªmŸe
->
n_txq
 = 0;

356 
ªmŸe
->
rﬁe
 = 
OFPCR_ROLE_EQUAL
;

358 
i
 = 0; i < 2; i++){

359 
	`mem£t
(&
ªmŸe
->
c⁄fig
.
∑ckë_ö_mask
[
i
], 0x7, (
uöt32_t
));

360 
	`mem£t
(&
ªmŸe
->
c⁄fig
.
p‹t_°©us_mask
[
i
], 0x7, (
uöt32_t
));

361 
	`mem£t
(&
ªmŸe
->
c⁄fig
.
Êow_ªmoved_mask
[
i
], 0x1f, (
uöt32_t
));

363  
ªmŸe
;

364 
	}
}

368 
	$dp_waô
(
d©≠©h
 *
dp
)

370 
sw_p‹t
 *
p
;

371 
ªmŸe
 *
r
;

372 
size_t
 
i
;

374 
	`LIST_FOR_EACH
 (
p
, 
sw_p‹t
, 
node
, &
dp
->
p‹t_li°
) {

375 i‡(
	`IS_HW_PORT
(
p
)) {

378 
	`√tdev_ªcv_waô
(
p
->
√tdev
);

380 
	`LIST_FOR_EACH
 (
r
, 
ªmŸe
, 
node
, &
dp
->
ªmŸes
) {

381 
	`ªmŸe_waô
(
r
);

383 
i
 = 0; i < 
dp
->
n_li°íîs
; i++) {

384 
	`pvc⁄n_waô
(
dp
->
li°íîs
[
i
]);

386 
	}
}

389 
	$dp_£t_dpid
(
d©≠©h
 *
dp
, 
uöt64_t
 
dpid
) {

390 
dp
->
id
 = 
dpid
;

391 
	}
}

394 
	$dp_£t_m‰_desc
(
d©≠©h
 *
dp
, *
m‰_desc
) {

395 
	`°∫˝y
(
dp
->
m‰_desc
, m‰_desc, 
DESC_STR_LEN
);

396 
dp
->
m‰_desc
[
DESC_STR_LEN
-1] = 0x00;

397 
	}
}

400 
	$dp_£t_hw_desc
(
d©≠©h
 *
dp
, *
hw_desc
) {

401 
	`°∫˝y
(
dp
->
hw_desc
, hw_desc, 
DESC_STR_LEN
);

402 
dp
->
hw_desc
[
DESC_STR_LEN
-1] = 0x00;

403 
	}
}

406 
	$dp_£t_sw_desc
(
d©≠©h
 *
dp
, *
sw_desc
) {

407 
	`°∫˝y
(
dp
->
sw_desc
, sw_desc, 
DESC_STR_LEN
);

408 
dp
->
sw_desc
[
DESC_STR_LEN
-1] = 0x00;

409 
	}
}

412 
	$dp_£t_dp_desc
(
d©≠©h
 *
dp
, *
dp_desc
) {

413 
	`°∫˝y
(
dp
->
dp_desc
, dp_desc, 
DESC_STR_LEN
);

414 
dp
->
dp_desc
[
DESC_STR_LEN
-1] = 0x00;

415 
	}
}

418 
	$dp_£t_£rül_num
(
d©≠©h
 *
dp
, *
£rül_num
) {

419 
	`°∫˝y
(
dp
->
£rül_num
, sîül_num, 
SERIAL_NUM_LEN
);

420 
dp
->
£rül_num
[
SERIAL_NUM_LEN
-1] = 0x00;

421 
	}
}

424 
	$dp_£t_max_queues
(
d©≠©h
 *
dp
, 
uöt32_t
 
max_queues
) {

425 
dp
->
max_queues
 = max_queues;

426 
	}
}

430 
	$£nd_›íÊow_buf„r_to_ªmŸe
(
oÂbuf
 *
buf„r
, 
ªmŸe
 *remote) {

431 
rc⁄n
*Ñc⁄¿
ªmŸe
->rconn;

432 
ªtvÆ
;

433 i‡(
buf„r
->
c⁄n_id
 =
PTIN_CONNECTION
 &&

434 
ªmŸe
->
rc⁄n
 !
NULL
 &&

435 
ªmŸe
->
rc⁄n_aux
 !
NULL
 &&

436 
	`rc⁄n_is_c⁄√˘ed
(
ªmŸe
->
rc⁄n
) &&

437 
	`rc⁄n_is_c⁄√˘ed
(
ªmŸe
->
rc⁄n_aux
)) {

438 
rc⁄n
 = 
ªmŸe
->
rc⁄n_aux
;

440 
ªtvÆ
 = 
	`rc⁄n_£nd_wôh_limô
(
rc⁄n
, 
buf„r
, &
ªmŸe
->
n_txq
,

441 
TXQ_LIMIT
);

443 i‡(
ªtvÆ
) {

444 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "sendÅo %s failed: %s",

445 
	`rc⁄n_gë_«me
(
rc⁄n
), 
	`°ªº‹
(
ªtvÆ
));

448  
ªtvÆ
;

449 
	}
}

452 
	$£nd_›íÊow_buf„r
(
d©≠©h
 *
dp
, 
oÂbuf
 *
buf„r
,

453 c⁄° 
£ndî
 *sender) {

454 
	`upd©e_›íÊow_Àngth
(
buf„r
);

455 i‡(
£ndî
) {

457  
	`£nd_›íÊow_buf„r_to_ªmŸe
(
buf„r
, 
£ndî
->
ªmŸe
);

461 
ªmŸe
 *
r
, *
¥ev
 = 
NULL
;

462 
uöt8_t
 
msg_ty≥
;

464 
	`mem˝y
(&
msg_ty≥
,((* ) 
buf„r
->
d©a
Ë+ 1, (
uöt8_t
));

465 
	`LIST_FOR_EACH
 (
r
, 
ªmŸe
, 
node
, &
dp
->
ªmŸes
) {

467 i‡(
r
->
rﬁe
 =
OFPCR_ROLE_EQUAL
 ||Ñ->rﬁê=
OFPCR_ROLE_MASTER
){

469 
msg_ty≥
){

470 (
OFPT_PACKET_IN
):{

471 
oÂ_∑ckë_ö
 *
p
 = (oÂ_∑ckë_ö*)
buf„r
->
d©a
;

473 if((
p
->
ªas⁄
 =
OFPR_NO_MATCH
Ë&& !(
r
->
c⁄fig
.
∑ckë_ö_mask
[0] & 0x1))

475 if((
p
->
ªas⁄
 =
OFPR_ACTION
Ë&& !(
r
->
c⁄fig
.
∑ckë_ö_mask
[0] & 0x2))

477 if((
p
->
ªas⁄
 =
OFPR_INVALID_TTL
Ë&& !(
r
->
c⁄fig
.
∑ckë_ö_mask
[0] & 0x4))

481 (
OFPT_PORT_STATUS
):{

482 
oÂ_p‹t_°©us
 *
p
 = (oÂ_p‹t_°©us*)
buf„r
->
d©a
;

483 if((
p
->
ªas⁄
 =
OFPPR_ADD
Ë&& !(
r
->
c⁄fig
.
p‹t_°©us_mask
[0] & 0x1))

485 if((
p
->
ªas⁄
 =
OFPPR_DELETE
Ë&& !(
r
->
c⁄fig
.
p‹t_°©us_mask
[0] & 0x2))

487 if((
p
->
ªas⁄
 =
OFPPR_MODIFY
Ë&& !(
r
->
c⁄fig
.
∑ckë_ö_mask
[0] & 0x4))

490 (
OFPT_FLOW_REMOVED
):{

491 
oÂ_Êow_ªmoved
 *
p
(oÂ_Êow_ªmoved *)
buf„r
->
d©a
;

492 if((
p
->
ªas⁄
 =
OFPRR_IDLE_TIMEOUT
Ë&& !(
r
->
c⁄fig
.
p‹t_°©us_mask
[0] & 0x1))

494 if((
p
->
ªas⁄
 =
OFPRR_HARD_TIMEOUT
Ë&& !(
r
->
c⁄fig
.
p‹t_°©us_mask
[0] & 0x2))

496 if((
p
->
ªas⁄
 =
OFPRR_DELETE
Ë&& !(
r
->
c⁄fig
.
∑ckë_ö_mask
[0] & 0x4))

498 if((
p
->
ªas⁄
 =
OFPRR_GROUP_DELETE
Ë&& !(
r
->
c⁄fig
.
∑ckë_ö_mask
[0] & 0x8))

500 if((
p
->
ªas⁄
 =
OFPRR_METER_DELETE
Ë&& !(
r
->
c⁄fig
.
∑ckë_ö_mask
[0] & 0x10))

508 i‡(
r
->
rﬁe
 =
OFPCR_ROLE_SLAVE
 && 
msg_ty≥
 !
OFPT_PORT_STATUS
) {

512 
oÂ_p‹t_°©us
 *
p
 = (oÂ_p‹t_°©us*)
buf„r
->
d©a
;

513 if((
p
->
ªas⁄
 =
OFPPR_ADD
Ë&& !(
r
->
c⁄fig
.
p‹t_°©us_mask
[1] & 0x1))

515 if((
p
->
ªas⁄
 =
OFPPR_DELETE
Ë&& !(
r
->
c⁄fig
.
p‹t_°©us_mask
[1] & 0x2))

517 if((
p
->
ªas⁄
 =
OFPPR_MODIFY
Ë&& !(
r
->
c⁄fig
.
∑ckë_ö_mask
[1] & 0x4))

521 i‡(
¥ev
) {

522 
	`£nd_›íÊow_buf„r_to_ªmŸe
(
	`oÂbuf_˛⁄e
(
buf„r
), 
¥ev
);

524 
¥ev
 = 
r
;

526 i‡(
¥ev
) {

527 
	`£nd_›íÊow_buf„r_to_ªmŸe
(
buf„r
, 
¥ev
);

529 
	`oÂbuf_dñëe
(
buf„r
);

533 
	}
}

536 
	$dp_£nd_mesßge
(
d©≠©h
 *
dp
, 
oÊ_msg_hódî
 *
msg
,

537 c⁄° 
£ndî
 *sender) {

538 
oÂbuf
 *ofpbuf;

539 
uöt8_t
 *
buf
;

540 
size_t
 
buf_size
;

541 
îr‹
;

543 i‡(
	`VLOG_IS_DBG_ENABLED
(
LOG_MODULE
)) {

544 *
msg_°r
 = 
	`oÊ_msg_to_°rög
(
msg
, 
dp
->
exp
);

545 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "£ndög: %.400s", 
msg_°r
);

546 
	`‰ì
(
msg_°r
);

549 
îr‹
 = 
	`oÊ_msg_∑ck
(
msg
, 
£ndî
 =
NULL
 ? 0 : sídî->
xid
, &
buf
, &
buf_size
, 
dp
->
exp
);

550 i‡(
îr‹
) {

551 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "There wasánÉrrorÖackingÅhe message!");

552  
îr‹
;

554 
oÂbuf
 = 
	`oÂbuf_√w
(0);

555 
	`oÂbuf_u£
(
oÂbuf
, 
buf
, 
buf_size
);

556 
	`oÂbuf_put_unöô
(
oÂbuf
, 
buf_size
);

564 
oÂbuf
->
c⁄n_id
 = 
MAIN_CONNECTION
;

565 i‡(
£ndî
 !
NULL
)

566 
oÂbuf
->
c⁄n_id
 = 
£ndî
->conn_id;

567 i‡(
msg
->
ty≥
 =
OFPT_PACKET_IN
)

568 
oÂbuf
->
c⁄n_id
 = 
PTIN_CONNECTION
;

570 
îr‹
 = 
	`£nd_›íÊow_buf„r
(
dp
, 
oÂbuf
, 
£ndî
);

571 i‡(
îr‹
) {

572 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "There wasánÉrror sendingÅhe message!");

574 
	`oÂbuf_dñëe
(
oÂbuf
);

575  
îr‹
;

578 
	}
}

580 
oÊ_îr


581 
	$dp_h™dÀ_£t_desc
(
d©≠©h
 *
dp
, 
oÊ_exp_›íÊow_msg_£t_dp_desc
 *
msg
,

582 c⁄° 
£ndî
 *£ndî 
UNUSED
) {

583 
	`dp_£t_dp_desc
(
dp
, 
msg
->
dp_desc
);

584 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
dp
->
exp
);

586 
	}
}

588 
oÊ_îr


589 
	$dp_check_gíî©i⁄_id
(
d©≠©h
 *
dp
, 
uöt64_t
 
√w_gí_id
){

591 if(
dp
->
gíî©i⁄_id
 >0 && ((
uöt64_t
)(
√w_gí_id
 - dp->generation_id) < 0) )

592  
	`oÊ_îr‹
(
OFPET_ROLE_REQUEST_FAILED
, 
OFPRRFC_STALE
);

593 
dp
->
gíî©i⁄_id
 = 
√w_gí_id
;

596 
	}
}

598 
oÊ_îr


599 
	$dp_h™dÀ_rﬁe_ªque°
(
d©≠©h
 *
dp
, 
oÊ_msg_rﬁe_ªque°
 *
msg
,

600 c⁄° 
£ndî
 *sender) {

601 
uöt32_t
 
rﬁe
 = 
msg
->role;

602 
uöt64_t
 
gíî©i⁄_id
 = 
msg
->generation_id;

603 
msg
->
rﬁe
) {

604 
OFPCR_ROLE_NOCHANGE
:{

605 
rﬁe
 = 
£ndî
->
ªmŸe
->role;

606 
gíî©i⁄_id
 = 
dp
->generation_id;

609 
OFPCR_ROLE_EQUAL
: {

610 
£ndî
->
ªmŸe
->
rﬁe
 = 
OFPCR_ROLE_EQUAL
;

613 
OFPCR_ROLE_MASTER
: {

614 
ªmŸe
 *
r
;

615 
îr‹
 = 
	`dp_check_gíî©i⁄_id
(
dp
,
msg
->
gíî©i⁄_id
);

616 i‡(
îr‹
) {

617 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Role message generation id is smallerÅhanÅhe current id!");

618  
îr‹
;

621 
	`LIST_FOR_EACH
 (
r
, 
ªmŸe
, 
node
, &
dp
->
ªmŸes
) {

622 i‡(
r
->
rﬁe
 =
OFPCR_ROLE_MASTER
) {

623 
r
->
rﬁe
 = 
OFPCR_ROLE_SLAVE
;

626 
£ndî
->
ªmŸe
->
rﬁe
 = 
OFPCR_ROLE_MASTER
;

629 
OFPCR_ROLE_SLAVE
: {

630 
îr‹
 = 
	`dp_check_gíî©i⁄_id
(
dp
,
msg
->
gíî©i⁄_id
);

631 i‡(
îr‹
) {

632 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Role message generation id is smallerÅhanÅhe current id!");

633  
îr‹
;

635 
£ndî
->
ªmŸe
->
rﬁe
 = 
OFPCR_ROLE_SLAVE
;

639 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Rﬁêªque° wôh unknow¿rﬁê(%u).", 
msg
->
rﬁe
);

640  
	`oÊ_îr‹
(
OFPET_ROLE_REQUEST_FAILED
, 
OFPRRFC_BAD_ROLE
);

645 
oÊ_msg_rﬁe_ªque°
 
ª∂y
 =

646 {{.
ty≥
 = 
OFPT_ROLE_REPLY
},

647 .
rﬁe
 =Ñole,

648 .
gíî©i⁄_id
 = generation_id};

650 
	`dp_£nd_mesßge
(
dp
, (
oÊ_msg_hódî
 *)&
ª∂y
, 
£ndî
);

653 
	}
}

655 
oÊ_îr


656 
	$dp_h™dÀ_async_ªque°
(
d©≠©h
 *
dp
, 
oÊ_msg_async_c⁄fig
 *
msg
,

657 c⁄° 
£ndî
 *sender) {

659 
uöt16_t
 
async_ty≥
 = 
msg
->
hódî
.
ty≥
;

660 
async_ty≥
){

661 (
OFPT_GET_ASYNC_REQUEST
):{

662 
oÊ_msg_async_c⁄fig
 
ª∂y
 =

663 {{.
ty≥
 = 
OFPT_GET_ASYNC_REPLY
},

664 .
c⁄fig
 = &
£ndî
->
ªmŸe
->config};

665 
	`dp_£nd_mesßge
(
dp
, (
oÊ_msg_hódî
 *)&
ª∂y
, 
£ndî
);

667 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
*)
msg
, 
dp
->
exp
);

671 (
OFPT_SET_ASYNC
):{

672 
	`mem˝y
(&
£ndî
->
ªmŸe
->
c⁄fig
, 
msg
->c⁄fig, (
oÊ_async_c⁄fig
));

677 
	}
}

	@udatapath/datapath.h

39 #i‚de‡
DATAPATH_H


40 
	#DATAPATH_H
 1

	)

43 
	~<°dboﬁ.h
>

44 
	~<°döt.h
>

45 
	~"dp_buf„rs.h
"

46 
	~"dp_p‹ts.h
"

47 
	~"›íÊow/nicúa-ext.h
"

48 
	~"oÂbuf.h
"

49 
	~"oÊib/oÊ.h
"

50 
	~"oÊib/oÊ-mesßges.h
"

51 
	~"oÊib/oÊ-°ru˘s.h
"

52 
	~"oÊib-exp/oÊ-exp-nicúa.h
"

53 
	~"group_èbÀ.h
"

54 
	~"timevÆ.h
"

55 
	~"li°.h
"

58 
	grc⁄n
;

59 
	gpvc⁄n
;

60 
	g£ndî
;

67 
	sd©≠©h
 {

70 *
	mm‰_desc
;

71 *
	mhw_desc
;

72 *
	msw_desc
;

73 *
	mdp_desc
;

74 *
	m£rül_num
;

76 
uöt64_t
 
	mid
;

78 
li°
 
	mªmŸes
;

80 
uöt64_t
 
	mgíî©i⁄_id
;

83 
pvc⁄n
 **
	mli°íîs
;

84 
size_t
 
	mn_li°íîs
;

85 
pvc⁄n
 **
	mli°íîs_aux
;

86 
size_t
 
	mn_li°íîs_aux
;

88 
time_t
 
	mœ°_timeout
;

90 
dp_buf„rs
 *
	mbuf„rs
;

92 
pùñöe
 *
	mpùñöe
;

94 
group_èbÀ
 *
	mgroups
;

96 
mëî_èbÀ
 *
	mmëîs
;

98 
oÊ_c⁄fig
 
	mc⁄fig
;

102 
uöt32_t
 
	mmax_queues
;

103 
sw_p‹t
 
	mp‹ts
[
DP_MAX_PORTS
 + 1];

104 
sw_p‹t
 *
	mloˇl_p‹t
;

105 
li°
 
	mp‹t_li°
;

106 
size_t
 
	mp‹ts_num
;

109 
oÊ_exp
 *
	mexp
;

111 #i‡
deföed
(
OF_HW_PLAT
)

116 
of_hw_drivî_t
 *
	mhw_drv
;

117 
hw_pkt_q_íåy
 *
	mhw_pkt_li°_hód
, *
	mhw_pkt_li°_èû
;

121 *
	mexp_bme
;

126 
	s£ndî
 {

127 
ªmŸe
 *
	mªmŸe
;

128 
uöt8_t
 
	mc⁄n_id
;

129 
uöt32_t
 
	mxid
;

133 
	sªmŸe
 {

134 
li°
 
	mnode
;

135 
rc⁄n
 *
	mrc⁄n
;

136 
rc⁄n
 *
	mrc⁄n_aux
;

138 
	#TXQ_LIMIT
 128

	)

139 
	mn_txq
;

146 (*
	mcb_dump
)(
	md©≠©h
 *, *
	maux
);

147 (*
	mcb_d⁄e
)(*
	maux
);

148 *
	mcb_aux
;

150 
uöt32_t
 
	mrﬁe
;

151 
oÊ_async_c⁄fig
 
	mc⁄fig
;

156 
d©≠©h
 *

157 
dp_√w
();

160 
dp_add_pvc⁄n
(
d©≠©h
 *
dp
, 
pvc⁄n
 *pvc⁄n, pvc⁄¿*
pvc⁄n_aux
);

165 
dp_run
(
d©≠©h
 *
dp
);

171 
dp_waô
(
d©≠©h
 *
dp
);

176 
dp_£t_dpid
(
d©≠©h
 *
dp
, 
uöt64_t
 
dpid
);

179 
dp_£t_m‰_desc
(
d©≠©h
 *
dp
, *
m‰_desc
);

182 
dp_£t_hw_desc
(
d©≠©h
 *
dp
, *
hw_desc
);

185 
dp_£t_sw_desc
(
d©≠©h
 *
dp
, *
sw_desc
);

188 
dp_£t_dp_desc
(
d©≠©h
 *
dp
, *
dp_desc
);

191 
dp_£t_£rül_num
(
d©≠©h
 *
dp
, *
£rül_num
);

194 
dp_£t_max_queues
(
d©≠©h
 *
dp
, 
uöt32_t
 
max_queues
);

200 
dp_£nd_mesßge
(
d©≠©h
 *
dp
, 
oÊ_msg_hódî
 *
msg
,

201 c⁄° 
£ndî
 *sender);

206 
oÊ_îr


207 
dp_h™dÀ_£t_desc
(
d©≠©h
 *
dp
, 
oÊ_exp_›íÊow_msg_£t_dp_desc
 *
msg
,

208 c⁄° 
£ndî
 *sender);

211 
oÊ_îr


212 
dp_h™dÀ_rﬁe_ªque°
(
d©≠©h
 *
dp
, 
oÊ_msg_rﬁe_ªque°
 *
msg
,

213 c⁄° 
£ndî
 *sender);

216 
oÊ_îr


217 
dp_h™dÀ_async_ªque°
(
d©≠©h
 *
dp
, 
oÊ_msg_async_c⁄fig
 *
msg
,

218 c⁄° 
£ndî
 *sender);

	@udatapath/dp_actions.c

34 
	~<√töë/ö.h
>

35 
	~"csum.h
"

36 
	~"dp_exp.h
"

37 
	~"dp_exp_bme.h
"

38 
	~"dp_a˘i⁄s.h
"

39 
	~"dp_buf„rs.h
"

40 
	~"d©≠©h.h
"

41 
	~"oÊib/oÊ.h
"

42 
	~"oÊib/oÊ-a˘i⁄s.h
"

43 
	~"oÊib/oÊ-log.h
"

44 
	~"∑ckë.h
"

45 
	~"∑ckës.h
"

46 
	~"pùñöe.h
"

47 
	~"utû.h
"

48 
	~"oÊib/oxm-m©ch.h
"

49 
	~"hash.h
"

51 
	#LOG_MODULE
 
VLM_dp_a˘s


	)

52 
	#XOR_ENCODING_WAIT
 2000

	)

55 
	#PENDING_MAX_LENGTH
 1000

	)

57 
	#SQR
(
A
Ë((AË* (A))

	)

58 
	#LIST_POP_FRONT
(
A
Ë(
	`li°_p›_‰⁄t
((
li°
*)A))

	)

59 
	#LIST_IS_EMPTY
(
A
Ë(
	`li°_is_em±y
((
li°
*)A))

	)

61 
	s≥ndög_pkt
 {

62 
li°
 
	mnode
;

63 
∑ckë
 *
	mpkt
;

64 
uöt32_t
 
	m£q_no_01
;

65 
uöt32_t
 
	m£q_no_10
;

66 
uöt32_t
 
	mm∂s_âl
;

67 
uöt32_t
 
	mœbñ_a
, 
	mœbñ_b
;

68 
	mdódlöe
;

70 
	s≥ndög_Êows
 {

71 
li°
 
	mnode
;

72 
uöt32_t
 
	mÊow_œbñ
;

74 
li°
 
	míc_10
;

75 
li°
 
	míc_01
;

76 
li°
 
	mdec_ﬁd
;

77 
li°
 
	m£q
;

78 
	mÀngth
;

79 
li°
 
	mdec_√w
;

81 
uöt32_t
 
	mœ°_£q
;

84 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

95 
	$ouçut
(
∑ckë
 *
pkt
, 
oÊ_a˘i⁄_ouçut
 *
a˘i⁄
) {

96 
pkt
->
out_p‹t
 = 
a˘i⁄
->
p‹t
;

98 i‡(
a˘i⁄
->
p‹t
 =
OFPP_CONTROLLER
) {

99 
pkt
->
out_p‹t_max_Àn
 = 
a˘i⁄
->
max_Àn
;

101 
	}
}

108 
	$£t_fõld
(
∑ckë
 *
pkt
, 
oÊ_a˘i⁄_£t_fõld
 *
a˘
 )

110 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

111 i‡(
pkt
->
h™dÀ_°d
->
vÆid
)

115 
a˘
->
fõld
->
hódî
){

116 
OXM_OF_ETH_DST
:{

117 
	`mem˝y
(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
ëh
->
ëh_d°
,

118 
a˘
->
fõld
->
vÆue
, 
	`OXM_LENGTH
◊˘->fõld->
hódî
));

121 
OXM_OF_ETH_SRC
:{

122 
	`mem˝y
(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
ëh
->
ëh_§c
,

123 
a˘
->
fõld
->
vÆue
, 
	`OXM_LENGTH
◊˘->fõld->
hódî
));

126 
OXM_OF_ETH_TYPE
:{

127 
uöt16_t
 *
v
 = (uöt16_t*Ë
a˘
->
fõld
->
vÆue
;

128 *
v
 = 
	`ht⁄s
(*v);

129 
	`mem˝y
(&
pkt
->
h™dÀ_°d
->
¥Ÿo
->
ëh
->
ëh_ty≥
,

130 
v
, 
	`OXM_LENGTH
(
a˘
->
fõld
->
hódî
));

133 
OXM_OF_VLAN_VID
:{

134 
vœn_hódî
 *
vœn
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->vlan;

136 if(
vœn
 !
NULL
){

137 
uöt16_t
 
v
 = (*(uöt16_t*)
a˘
->
fõld
->
vÆue
);

138 
vœn
->
vœn_tci
 = 
	`ht⁄s
((
	`¡ohs
(vœn->vœn_tciË& ~
VLAN_VID_MASK
)

139 | (
v
 & 
VLAN_VID_MASK
));

144 
OXM_OF_VLAN_PCP
:{

145 
vœn_hódî
 *
vœn
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->vlan;

147 if(
vœn
 !
NULL
){

148 
vœn
->
vœn_tci
 = (vœn->vœn_tcò& ~
	`ht⁄s
(
VLAN_PCP_MASK
))

149 | 
	`ht⁄s
(*
a˘
->
fõld
->
vÆue
 << 
VLAN_PCP_SHIFT
);

153 
OXM_OF_IP_DSCP
:{

154 
ù_hódî
 *
ùv4
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->ipv4;

155 
uöt8_t
 
tos
 = (
ùv4
->
ù_tos
 & ~
IP_DSCP_MASK
) |

156 (*
a˘
->
fõld
->
vÆue
 << 2);

158 
ùv4
->
ù_csum
 = 
	`ªˇlc_csum16
(ùv4->ù_csum, (
uöt16_t
)

159 (
ùv4
->
ù_tos
), (
uöt16_t
)
tos
);

160 
ùv4
->
ù_tos
 = 
tos
;

163 
OXM_OF_IP_ECN
:{

164 
ù_hódî
 *
ùv4
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->ipv4;

165 
uöt8_t
 
tos
 = (
ùv4
->
ù_tos
 & ~
IP_ECN_MASK
) |

166 (*
a˘
->
fõld
->
vÆue
 & 
IP_ECN_MASK
);

167 
ùv4
->
ù_csum
 = 
	`ªˇlc_csum16
(ùv4->ù_csum, (
uöt16_t
)

168 (
ùv4
->
ù_tos
), (
uöt16_t
)
tos
);

169 
ùv4
->
ù_tos
 = 
tos
;

172 
OXM_OF_IP_PROTO
:{

173 
pkt
->
h™dÀ_°d
->
¥Ÿo
->
ùv4
->
ù_¥Ÿo
 = *
a˘
->
fõld
->
vÆue
;

176 
OXM_OF_IPV4_SRC
:{

177 
ù_hódî
 *
ùv4
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->ipv4;

180 i‡(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
t˝
 !
NULL
) {

181 
t˝_hódî
 *
t˝
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->tcp;

182 
t˝
->
t˝_csum
 = 
	`ªˇlc_csum32
(tcp->tcp_csum,

183 
ùv4
->
ù_§c
, *((
uöt32_t
*Ë
a˘
->
fõld
->
vÆue
));

184 } i‡(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
udp
 !
NULL
) {

185 
udp_hódî
 *
udp
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->udp;

186 
udp
->
udp_csum
 = 
	`ªˇlc_csum32
(udp->udp_csum,

187 
ùv4
->
ù_§c
, *((
uöt32_t
*Ë
a˘
->
fõld
->
vÆue
));

190 
ùv4
->
ù_csum
 = 
	`ªˇlc_csum32
(ùv4->ù_csum, ipv4->
ù_§c
,

191 *((
uöt32_t
*Ë
a˘
->
fõld
->
vÆue
));

193 
ùv4
->
ù_§c
 = *((
uöt32_t
*Ë
a˘
->
fõld
->
vÆue
);

196 
OXM_OF_IPV4_DST
:{

197 
ù_hódî
 *
ùv4
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->ipv4;

200 i‡(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
t˝
 !
NULL
) {

201 
t˝_hódî
 *
t˝
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->tcp;

202 
t˝
->
t˝_csum
 = 
	`ªˇlc_csum32
(tcp->tcp_csum,

203 
ùv4
->
ù_d°
, *((
uöt32_t
*Ë
a˘
->
fõld
->
vÆue
));

204 } i‡(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
udp
 !
NULL
) {

205 
udp_hódî
 *
udp
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->udp;

206 
udp
->
udp_csum
 = 
	`ªˇlc_csum32
(udp->udp_csum,

207 
ùv4
->
ù_d°
, *((
uöt32_t
*Ë
a˘
->
fõld
->
vÆue
));

210 
ùv4
->
ù_csum
 = 
	`ªˇlc_csum32
(ùv4->ù_csum, ipv4->
ù_d°
,

211 *((
uöt32_t
*Ë
a˘
->
fõld
->
vÆue
));

213 
ùv4
->
ù_d°
 = *((
uöt32_t
*Ë
a˘
->
fõld
->
vÆue
);

216 
OXM_OF_TCP_SRC
:{

217 
t˝_hódî
 *
t˝
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->tcp;

218 
uöt16_t
 *
v
 = (uöt16_t*Ë
a˘
->
fõld
->
vÆue
;

219 *
v
 = 
	`ht⁄s
(*v);

220 
t˝
->
t˝_csum
 = 
	`ªˇlc_csum16
—˝->t˝_csum,Å˝->
t˝_§c
,*
v
);

221 
	`mem˝y
(&
t˝
->
t˝_§c
, 
v
, 
	`OXM_LENGTH
(
a˘
->
fõld
->
hódî
));

225 
OXM_OF_TCP_DST
:{

226 
t˝_hódî
 *
t˝
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->tcp;

227 
uöt16_t
 *
v
 = (uöt16_t*Ë
a˘
->
fõld
->
vÆue
;

228 *
v
 = 
	`ht⁄s
(*v);

229 
t˝
->
t˝_csum
 = 
	`ªˇlc_csum16
—˝->t˝_csum,Å˝->
t˝_d°
,*
v
);

230 
	`mem˝y
(&
t˝
->
t˝_d°
, 
v
, 
	`OXM_LENGTH
(
a˘
->
fõld
->
hódî
));

234 
OXM_OF_UDP_SRC
:{

235 
udp_hódî
 *
udp
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->udp;

236 
uöt16_t
 *
v
 = (uöt16_t*Ë
a˘
->
fõld
->
vÆue
;

237 *
v
 = 
	`ht⁄s
(*v);

238 
udp
->
udp_csum
 = 
	`ªˇlc_csum16
(udp->udp_csum, udp->
udp_d°
, *
v
);

239 
	`mem˝y
(&
udp
->
udp_§c
, 
v
, 
	`OXM_LENGTH
(
a˘
->
fõld
->
hódî
));

242 
OXM_OF_UDP_DST
:{

243 
udp_hódî
 *
udp
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->udp;

244 
uöt16_t
 *
v
 = (uöt16_t*Ë
a˘
->
fõld
->
vÆue
;

245 *
v
 = 
	`ht⁄s
(*v);

246 
udp
->
udp_csum
 = 
	`ªˇlc_csum16
(udp->udp_csum, udp->
udp_d°
, *
v
);

247 
	`mem˝y
(&
udp
->
udp_d°
, 
v
, 
	`OXM_LENGTH
(
a˘
->
fõld
->
hódî
));

251 
OXM_OF_SCTP_SRC
:{

252 
uöt16_t
 *
v
 = (uöt16_t*Ë
a˘
->
fõld
->
vÆue
;

253 *
v
 = 
	`ht⁄s
(*v);

254 
	`mem˝y
(&
pkt
->
h™dÀ_°d
->
¥Ÿo
->
s˘p
->
s˘p_§c
,

255 
v
, 
	`OXM_LENGTH
(
a˘
->
fõld
->
hódî
));

258 
OXM_OF_SCTP_DST
:{

259 
uöt16_t
 *
v
 = (uöt16_t*Ë
a˘
->
fõld
->
vÆue
;

260 *
v
 = 
	`ht⁄s
(*v);

261 
	`mem˝y
(&
pkt
->
h™dÀ_°d
->
¥Ÿo
->
s˘p
->
s˘p_d°
,

262 
v
, 
	`OXM_LENGTH
(
a˘
->
fõld
->
hódî
));

265 
OXM_OF_ICMPV4_TYPE
:

266 
OXM_OF_ICMPV6_TYPE
:{

267 
pkt
->
h™dÀ_°d
->
¥Ÿo
->
icmp
->
icmp_ty≥
 = *
a˘
->
fõld
->
vÆue
;

271 
OXM_OF_ICMPV4_CODE
:

272 
OXM_OF_ICMPV6_CODE
:{

273 
pkt
->
h™dÀ_°d
->
¥Ÿo
->
icmp
->
icmp_code
 = *
a˘
->
fõld
->
vÆue
;

276 
OXM_OF_ARP_OP
: {

277 
pkt
->
h™dÀ_°d
->
¥Ÿo
->
¨p
->
¨_›
 = 
	`ht⁄s
(*((
uöt16_t
*Ë
a˘
->
fõld
->
vÆue
));

280 
OXM_OF_ARP_SPA
:{

281 
pkt
->
h™dÀ_°d
->
¥Ÿo
->
¨p
->
¨_•a
 = *((
uöt32_t
*)

282 
a˘
->
fõld
->
vÆue
);

285 
OXM_OF_ARP_TPA
:{

286 
pkt
->
h™dÀ_°d
->
¥Ÿo
->
¨p
->
¨_ça
 = *((
uöt32_t
*)

287 
a˘
->
fõld
->
vÆue
);

290 
OXM_OF_ARP_SHA
:{

291 
	`mem˝y
(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
¨p
->
¨_sha
,

292 
a˘
->
fõld
->
vÆue
, 
	`OXM_LENGTH
◊˘->fõld->
hódî
));

295 
OXM_OF_ARP_THA
:{

296 
	`mem˝y
(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
¨p
->
¨_tha
,

297 
a˘
->
fõld
->
vÆue
, 
	`OXM_LENGTH
◊˘->fõld->
hódî
));

300 
OXM_OF_IPV6_SRC
:{

301 
	`mem˝y
(&
pkt
->
h™dÀ_°d
->
¥Ÿo
->
ùv6
->
ùv6_§c
,

302 
a˘
->
fõld
->
vÆue
, 
	`OXM_LENGTH
◊˘->fõld->
hódî
));

305 
OXM_OF_IPV6_DST
:{

306 
	`mem˝y
(&
pkt
->
h™dÀ_°d
->
¥Ÿo
->
ùv6
->
ùv6_d°
,

307 
a˘
->
fõld
->
vÆue
, 
	`OXM_LENGTH
◊˘->fõld->
hódî
));

310 
OXM_OF_IPV6_FLABEL
:{

311 
ùv6_hódî
 *
ùv6
 = (ipv6_header*)

312 
pkt
->
h™dÀ_°d
->
¥Ÿo
->
ùv6
;

313 
uöt32_t
 
v
 = *((uöt32_t*Ë
a˘
->
fõld
->
vÆue
);

314 
ùv6
->
ùv6_vî_tc_Ê
 = (ipv6->ipv6_ver_tc_fl &

315 ~
	`¡ohl
(
IPV6_FLABEL_MASK
)Ë|Çtohl(
v
 & IPV6_FLABEL_MASK);

319 
OXM_OF_IPV6_ND_TARGET
:{

320 
icmp_hódî
 *
icmp
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->icmp;

321 
uöt8_t
 
off£t
;

322 
uöt8_t
 *
d©a
 = (uöt8_t*)
icmp
;

324 
off£t
 = (
icmp_hódî
) + 4;

326 
	`mem˝y
(
d©a
 + 
off£t
, 
a˘
->
fõld
->
vÆue
,

327 
	`OXM_LENGTH
(
a˘
->
fõld
->
hódî
));

330 
OXM_OF_IPV6_ND_SLL
:{

331 
icmp_hódî
 *
icmp
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->icmp;

332 
uöt8_t
 
off£t
;

333 
ùv6_nd_›ti⁄s_hd
 *
›t
 = (ipv6_nd_options_hd*)

334 
icmp
 + (
icmp_hódî
);

335 
uöt8_t
 *
d©a
 = (uöt8_t*Ë
›t
;

337 
off£t
 = (
ùv6_nd_hódî
);

339 if(
›t
->
ty≥
 =
ND_OPT_SLL
){

340 
	`mem˝y
(
d©a
 + 
off£t
, 
a˘
->
fõld
->
vÆue
,

341 
	`OXM_LENGTH
(
a˘
->
fõld
->
hódî
));

345 
OXM_OF_IPV6_ND_TLL
:{

346 
icmp_hódî
 *
icmp
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->icmp;

347 
uöt8_t
 
off£t
;

348 
ùv6_nd_›ti⁄s_hd
 *
›t
 = (ipv6_nd_options_hd*)

349 
icmp
 + (
icmp_hódî
);

350 
uöt8_t
 *
d©a
 = (uöt8_t*Ë
›t
;

352 
off£t
 = (
ùv6_nd_hódî
);

354 if(
›t
->
ty≥
 =
ND_OPT_TLL
){

355 
	`mem˝y
(
d©a
 + 
off£t
, 
a˘
->
fõld
->
vÆue
,

356 
	`OXM_LENGTH
(
a˘
->
fõld
->
hódî
));

360 
OXM_OF_MPLS_LABEL
:{

361 
m∂s_hódî
 *
m∂s
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->mpls;

362 
uöt32_t
 
v
 = *((uöt32_t*Ë
a˘
->
fõld
->
vÆue
);

363 
m∂s
->
fõlds
 = (m∂s->fõld†& ~
	`¡ohl
(
MPLS_LABEL_MASK
)) |

364 
	`¡ohl
((
v
 << 
MPLS_LABEL_SHIFT
Ë& 
MPLS_LABEL_MASK
);

367 
OXM_OF_MPLS_TC
:{

368 
m∂s_hódî
 *
m∂s
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->mpls;

369 
m∂s
->
fõlds
 = (m∂s->fõld†& ~
	`¡ohl
(
MPLS_TC_MASK
))

370 | 
	`¡ohl
((*
a˘
->
fõld
->
vÆue
 << 
MPLS_TC_SHIFT
Ë& 
MPLS_TC_MASK
);

373 
OXM_OF_MPLS_BOS
:{

374 
m∂s_hódî
 *
m∂s
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->mpls;

375 
m∂s
->
fõlds
 = (m∂s->fõld†& ~
	`¡ohl
(
MPLS_S_MASK
))

376 | 
	`¡ohl
((*
a˘
->
fõld
->
vÆue
 << 
MPLS_S_SHIFT
Ë& 
MPLS_S_MASK
);

379 
OXM_OF_PBB_ISID
 :{

380 
pbb_hódî
 *
pbb
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->pbb;

381 
uöt32_t
 
v
 = *((uöt32_t*Ë
a˘
->
fõld
->
vÆue
);

382 
pbb
->
id
 = (pbb->id & ~
	`¡ohl
(
PBB_ISID_MASK
)) |

383 
	`¡ohl
(
v
 & 
PBB_ISID_MASK
);

387 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryingÅo set unknow field.");

390 
pkt
->
h™dÀ_°d
->
vÆid
 = 
Ál£
;

394 
	}
}

396 
≥ndög_Êows
*

397 
	$gë_≥ndög_Êow
(
d©≠©h
 *
dp
, 
uöt32_t
 
Êow_œbñ
)

399 
≥ndög_Êows
 *
li°s
, *
membî
;

401 i‡(!
dp
->
exp_bme
) {

402 
li°s
 = 
	`xmÆloc
((
≥ndög_Êows
));

403 
dp
->
exp_bme
 = (*)
li°s
;

404 
	`li°_öô
((
li°
*)
li°s
);

406 
li°s
 = (
≥ndög_Êows
 *)
dp
->
exp_bme
;

409 
	`LIST_FOR_EACH
 (
membî
, 
≥ndög_Êows
, 
node
, (
li°
*)
li°s
) {

410 i‡(
membî
->
Êow_œbñ
 == flow_label)

411  
membî
;

414 
membî
 = 
	`xmÆloc
((
≥ndög_Êows
));

415 
membî
->
Êow_œbñ
 = flow_label;

416 
	`li°_öô
(&
membî
->
íc_10
);

417 
	`li°_öô
(&
membî
->
íc_01
);

418 
	`li°_öô
(&
membî
->
dec_ﬁd
);

419 
	`li°_öô
(&
membî
->
dec_√w
);

420 
	`li°_öô
(&
membî
->
£q
);

421 
membî
->
Àngth
 = 0;

422 
membî
->
œ°_£q
 = 0;

424 
	`li°_push_back
((
li°
*)
li°s
, (li°*)
membî
);

425  
membî
;

426 
	}
}

428 
ölöe
 

429 
	$p›_m∂s_hódî
(
∑ckë
 *
pkt
, 
uöt16_t
 
ëhîty≥
)

431 
oÊ_a˘i⁄_p›_m∂s
 
p›_a˘i⁄
;

433 
p›_a˘i⁄
.
hódî
.
ty≥
 = 
OFPAT_POP_MPLS
;

434 
p›_a˘i⁄
.
ëhîty≥
 =Éthertype;

435 
	`dp_execuã_a˘i⁄
(
pkt
, (
oÊ_a˘i⁄_hódî
*Ë&
p›_a˘i⁄
);

436 
	}
}

440 
	$c›y_âl_out
(
∑ckë
 *
pkt
, 
oÊ_a˘i⁄_hódî
 *
a˘
 
UNUSED
) {

441 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

442 i‡(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
m∂s
 !
NULL
) {

443 
m∂s_hódî
 *
m∂s
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->mpls;

445 i‡((
	`¡ohl
(
m∂s
->
fõlds
Ë& 
MPLS_S_MASK
) == 0) {

447 
m∂s_hódî
 *
ö_m∂s
 = (m∂s_hódî *)((
uöt8_t
 *)
m∂s
 + 
MPLS_HEADER_LEN
);

449 
m∂s
->
fõlds
 = (m∂s->fõld†& ~
	`ht⁄l
(
MPLS_TTL_MASK
)Ë| (
ö_m∂s
->fields & htonl(MPLS_TTL_MASK));

451 } i‡(
pkt
->
buf„r
->
size
 >
ETH_HEADER_LEN
 + 
MPLS_HEADER_LEN
 + 
IP_HEADER_LEN
) {

453 
ù_hódî
 *
ùv4
 = (ù_hódî *)((
uöt8_t
 *)
m∂s
 + 
MPLS_HEADER_LEN
);

455 
m∂s
->
fõlds
 = (m∂s->fõld†& ~
	`ht⁄l
(
MPLS_TTL_MASK
)Ë| ht⁄l((
uöt32_t
)
ùv4
->
ù_âl
 & MPLS_TTL_MASK);

458 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryingÅoÉxecute copyÅtl ináction onÖacket with only one mpls.");

461 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryingÅoÉxecute COPY_TTL_OUTáction onÖacket withÇo mpls.");

463 
	}
}

467 
	$c›y_âl_ö
(
∑ckë
 *
pkt
, 
oÊ_a˘i⁄_hódî
 *
a˘
 
UNUSED
) {

468 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

469 i‡(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
m∂s
 !
NULL
) {

470 
m∂s_hódî
 *
m∂s
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->mpls;

472 i‡((
	`¡ohl
(
m∂s
->
fõlds
Ë& 
MPLS_S_MASK
) == 0) {

474 
m∂s_hódî
 *
ö_m∂s
 = (m∂s_hódî *)((
uöt8_t
 *)
m∂s
 + 
MPLS_HEADER_LEN
);

476 
ö_m∂s
->
fõlds
 = (ö_m∂s->fõld†& ~
	`ht⁄l
(
MPLS_TTL_MASK
)Ë| (
m∂s
->fields & htonl(MPLS_TTL_MASK));

478 } i‡(
pkt
->
buf„r
->
size
 >
ETH_HEADER_LEN
 + 
MPLS_HEADER_LEN
 + 
IP_HEADER_LEN
) {

480 
ù_hódî
 *
ùv4
 = (ù_hódî *)((
uöt8_t
 *)
m∂s
 + 
MPLS_HEADER_LEN
);

482 
uöt8_t
 
√w_âl
 = (
	`¡ohl
(
m∂s
->
fõlds
Ë& 
MPLS_TTL_MASK
Ë>> 
MPLS_TTL_SHIFT
;

483 
uöt16_t
 
ﬁd_vÆ
 = 
	`ht⁄s
((
ùv4
->
ù_¥Ÿo
Ë+ (ùv4->
ù_âl
<<8));

484 
uöt16_t
 
√w_vÆ
 = 
	`ht⁄s
((
ùv4
->
ù_¥Ÿo
Ë+ (
√w_âl
<<8));

485 
ùv4
->
ù_csum
 = 
	`ªˇlc_csum16
(ùv4->ù_csum, 
ﬁd_vÆ
, 
√w_vÆ
);

486 
ùv4
->
ù_âl
 = 
√w_âl
;

489 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryingÅoÉxecute copyÅtl ináction onÖacket with only one mpls.");

492 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryingÅoÉxecute COPY_TTL_INáction onÖacket withÇo mpls.");

494 
	}
}

498 
	$push_vœn
(
∑ckë
 *
pkt
, 
oÊ_a˘i⁄_push
 *
a˘
) {

500 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

501 i‡(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
ëh
 !
NULL
) {

502 
ëh_hódî
 *
ëh
, *
√w_ëh
;

503 
¢≠_hódî
 *
¢≠
, *
√w_¢≠
;

504 
vœn_hódî
 *
vœn
, *
√w_vœn
, *
push_vœn
;

505 
size_t
 
ëh_size
;

507 
ëh
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->eth;

508 
¢≠
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->
ëh_¢≠
;

509 
vœn
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->vlan;

511 
ëh_size
 = 
¢≠
 =
NULL


512 ? 
ETH_HEADER_LEN


513 : 
ETH_HEADER_LEN
 + 
LLC_HEADER_LEN
 + 
SNAP_HEADER_LEN
;

515 i‡(
	`oÂbuf_hódroom
(
pkt
->
buf„r
Ë>
VLAN_HEADER_LEN
) {

517 
pkt
->
buf„r
->
d©a
 = (
uöt8_t
 *)’kt->buf„r->d©aË- 
VLAN_HEADER_LEN
;

518 
pkt
->
buf„r
->
size
 +
VLAN_HEADER_LEN
;

520 
	`memmove
(
pkt
->
buf„r
->
d©a
, 
ëh
, 
ëh_size
);

522 
√w_ëh
 = (
ëh_hódî
 *)(
pkt
->
buf„r
->
d©a
);

523 
√w_¢≠
 = 
¢≠
 =
NULL
 ? NULL

524 : (
¢≠_hódî
 *)((
uöt8_t
 *)
√w_ëh


525 + 
ETH_HEADER_LEN
 + 
LLC_HEADER_LEN
);

526 
push_vœn
 = (
vœn_hódî
 *)((
uöt8_t
 *)
√w_ëh
 + 
ëh_size
);

527 
√w_vœn
 = 
vœn
;

532 
	`oÂbuf_put_unöô
(
pkt
->
buf„r
, 
VLAN_HEADER_LEN
);

534 
√w_ëh
 = (
ëh_hódî
 *)(
pkt
->
buf„r
->
d©a
);

535 
√w_¢≠
 = 
¢≠
 =
NULL
 ? NULL

536 : (
¢≠_hódî
 *)((
uöt8_t
 *)
√w_ëh


537 + 
ETH_HEADER_LEN
 + 
LLC_HEADER_LEN
);

538 
push_vœn
 = (
vœn_hódî
 *)((
uöt8_t
 *)
√w_ëh
 + 
ëh_size
);

541 
	`memmove
((
uöt8_t
 *)
push_vœn
 + 
VLAN_HEADER_LEN
,Öush_vlan,

542 
pkt
->
buf„r
->
size
 - 
ëh_size
);

544 
√w_vœn
 = 
vœn
 =
NULL
 ? NULL

545 : (
vœn_hódî
 *)((
uöt8_t
 *)
push_vœn
 + 
VLAN_HEADER_LEN
);

548 
push_vœn
->
vœn_tci
 = 
√w_vœn
 =
NULL
 ? 0x0000 :Çew_vlan->vlan_tci;

550 i‡(
√w_¢≠
 !
NULL
) {

551 
push_vœn
->
vœn_√xt_ty≥
 = 
√w_¢≠
->
¢≠_ty≥
;

552 
√w_¢≠
->
¢≠_ty≥
 = 
	`¡ohs
(
a˘
->
ëhîty≥
);

553 
√w_ëh
->
ëh_ty≥
 = 
	`ht⁄s
(
	`¡ohs
“ew_ëh->ëh_ty≥Ë+ 
VLAN_HEADER_LEN
);

555 
push_vœn
->
vœn_√xt_ty≥
 = 
√w_ëh
->
ëh_ty≥
;

556 
√w_ëh
->
ëh_ty≥
 = 
	`¡ohs
(
a˘
->
ëhîty≥
);

561 
pkt
->
h™dÀ_°d
->
vÆid
 = 
Ál£
;

564 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryingÅoÉxecuteÖush vlanáction onÖacket withÇoÉth.");

566 
	}
}

570 
	$p›_vœn
(
∑ckë
 *
pkt
, 
oÊ_a˘i⁄_hódî
 *
a˘
 
UNUSED
) {

571 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

572 i‡(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
ëh
 !
NULL
 &&Ökt->h™dÀ_°d->¥Ÿo->
vœn
 != NULL) {

573 
ëh_hódî
 *
ëh
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->eth;

574 
¢≠_hódî
 *
ëh_¢≠
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->eth_snap;

575 
vœn_hódî
 *
vœn
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->vlan;

576 
size_t
 
move_size
;

578 i‡(
ëh_¢≠
 !
NULL
) {

579 
ëh_¢≠
->
¢≠_ty≥
 = 
vœn
->
vœn_√xt_ty≥
;

580 
ëh
->
ëh_ty≥
 = 
	`ht⁄s
(
	`¡ohs
”th->ëh_ty≥Ë- 
VLAN_HEADER_LEN
);

582 
ëh
->
ëh_ty≥
 = 
vœn
->
vœn_√xt_ty≥
;

585 
move_size
 = (
uöt8_t
 *)
vœn
 - (uöt8_à*)
ëh
;

587 
pkt
->
buf„r
->
d©a
 = (
uöt8_t
 *Ìkt->buf„r->d©®+ 
VLAN_HEADER_LEN
;

588 
pkt
->
buf„r
->
size
 -
VLAN_HEADER_LEN
;

590 
	`memmove
(
pkt
->
buf„r
->
d©a
, 
ëh
, 
move_size
);

593 
pkt
->
h™dÀ_°d
->
vÆid
 = 
Ál£
;

595 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryingÅoÉxecute POP_VLANáction onÖacket withÇoÉth/vlan.");

597 
	}
}

601 
	$£t_m∂s_œbñ_‰om_cou¡î
(
∑ckë
 *
pkt
)

603 
uöt32_t
 
cou¡î
 = 1;

604 
uöt32_t
 
hódî
 ;

605 
uöt32_t
 
ëh_ty≥
 ;

606 
oÊ_m©ch_év
 *
m
 = (oÊ_m©ch_év *Ë
	`mÆloc
( (ofl_match_tlv));

607 
oÊ_m©ch_év
 *
m_f‹_ëh
 = (oÊ_m©ch_év *Ë
	`mÆloc
( (ofl_match_tlv));

608 
Àn
;

609 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "NowÉxecuting SET_MPLS_LABEL_FROM_COUNTERáction ....");

611 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

612 i‡(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
m∂s
 !
NULL
) {

613 
m∂s_hódî
 *
m∂s
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->mpls;

614 
m∂s
->
fõlds
 = (m∂s->fõld†& ~
	`¡ohl
(
MPLS_LABEL_MASK
)Ë|Çtohl((
cou¡î
 << 
MPLS_LABEL_SHIFT
) & MPLS_LABEL_MASK);

616 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Thê£àMPLS_LABEL i†ö SET_MPLS_LABEL_FROM_COUNTER .... =\"0x%08"
PRIx32
"\"", 
m∂s
->
fõlds
);

619 
hódî
 = 
OXM_OF_MPLS_LABEL
;

620 
Àn
 = ((
hódî
) & 0xff);

621 
m
->
hódî
 = header;

622 
m
->
vÆue
 = (
uöt8_t
*Ë
	`mÆloc
(
Àn
);

623 
	`mem˝y
(
m
->
vÆue
, &
cou¡î
, 
Àn
);

624 
	`hm≠_ö£π
(&(
pkt
->
h™dÀ_°d
->
m©ch
.
m©ch_fõlds
),&
m
->
hm≠_node
,
	`hash_öt
(
hódî
, 0));

625 
pkt
->
h™dÀ_°d
->
m©ch
.
hódî
.
Àngth
 +
Àn
 + 4;

627 
hódî
 = 
OXM_OF_ETH_TYPE
;

628 
Àn
 = ((
hódî
) & 0xff);

629 
m_f‹_ëh
->
hódî
 = header;

630 
m_f‹_ëh
->
vÆue
 = (
uöt8_t
*Ë
	`mÆloc
(
Àn
);

631 
ëh_ty≥
 = 0x8847;

632 
	`mem˝y
(
m_f‹_ëh
->
vÆue
, &
ëh_ty≥
, 
Àn
);

633 
	`hm≠_ö£π
(&(
pkt
->
h™dÀ_°d
->
m©ch
.
m©ch_fõlds
),&
m_f‹_ëh
->
hm≠_node
,
	`hash_öt
(
hódî
, 0));

634 
pkt
->
h™dÀ_°d
->
m©ch
.
hódî
.
Àngth
 +
Àn
 + 4;

636 
cou¡î
 += 1;

639 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryingÅoÉxecute SET_MPLS_LABELáction onÖacket withÇo mpls.");

641 
	}
}

645 
	$£t_∑rôy_m∂s_œbñ
(
∑ckë
 *
pkt
) {

647 
uöt32_t
 
cou¡î
 = 1;

648 
uöt32_t
 
hódî
 ;

649 
uöt32_t
 
ëh_ty≥
 ;

650 
oÊ_m©ch_év
 *
m
 = (oÊ_m©ch_év *Ë
	`mÆloc
( (ofl_match_tlv));

651 
oÊ_m©ch_év
 *
m_f‹_ëh
 = (oÊ_m©ch_év *Ë
	`mÆloc
( (ofl_match_tlv));

652 
Àn
;

653 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "NowÉxecuting SET_PARITY_MPLS_LABELáction ....");

655 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

656 i‡(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
m∂s
 !
NULL
) {

657 
m∂s_hódî
 *
m∂s
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->mpls;

661 
m∂s
->
fõlds
 = (m∂s->fõld†& ~
	`¡ohl
(
MPLS_LABEL_MASK
)Ë|Çtohl((
cou¡î
 << 
MPLS_LABEL_SHIFT
) & MPLS_LABEL_MASK);

663 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Thê£àMPLS_LABEL i†ö SET_MPLS_LABEL_FROM_COUNTER .... =\"0x%08"
PRIx32
"\"", 
m∂s
->
fõlds
);

665 
hódî
 = 
OXM_OF_MPLS_LABEL
;

666 
Àn
 = ((
hódî
) & 0xff);

667 
m
->
hódî
 = header;

668 
m
->
vÆue
 = (
uöt8_t
*Ë
	`mÆloc
(
Àn
);

669 
	`mem˝y
(
m
->
vÆue
, &
cou¡î
, 
Àn
);

670 
	`hm≠_ö£π
(&(
pkt
->
h™dÀ_°d
->
m©ch
.
m©ch_fõlds
),&
m
->
hm≠_node
,
	`hash_öt
(
hódî
, 0));

671 
pkt
->
h™dÀ_°d
->
m©ch
.
hódî
.
Àngth
 +
Àn
 + 4;

673 
hódî
 = 
OXM_OF_ETH_TYPE
;

674 
Àn
 = ((
hódî
) & 0xff);

675 
m_f‹_ëh
->
hódî
 = header;

676 
m_f‹_ëh
->
vÆue
 = (
uöt8_t
*Ë
	`mÆloc
(
Àn
);

677 
ëh_ty≥
 = 0x8847;

678 
	`mem˝y
(
m_f‹_ëh
->
vÆue
, &
ëh_ty≥
, 
Àn
);

679 
	`hm≠_ö£π
(&(
pkt
->
h™dÀ_°d
->
m©ch
.
m©ch_fõlds
),&
m_f‹_ëh
->
hm≠_node
,
	`hash_öt
(
hódî
, 0));

680 
pkt
->
h™dÀ_°d
->
m©ch
.
hódî
.
Àngth
 +
Àn
 + 4;

682 
cou¡î
 += 1;

683 if(
cou¡î
 > 2)

684 
cou¡î
 = 1;

693 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryingÅoÉxecute SET_MPLS_LABELáction onÖacket withÇo mpls.");

695 
	}
}

698 
	$x‹_ícode_∑ckë_‰om_queue
(
∑ckë
 *
pkt0
, 
oÊ_a˘i⁄_x‹_ícode
 *
a˘i⁄
)

700 
uöt32_t
 
Êow_œbñ
, 
Êow_âl
, 
£q_10
, 
£q_01
;

701 
uöt32_t
 
m∂s_fõld
;

702 
≥ndög_pkt
 *
≥ndög
;

703 
≥ndög_Êows
 *
∂
;

704 
∑ckë
 *
pkt
;

705 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "NowÉxecuting XOR_ENCODE_PACKET_FROM_QUEUEáction ....");

708 
pkt
 = 
	`∑ckë_¸óã
(
pkt0
->
dp
,Ökt0->
ö_p‹t
, 
	`oÂbuf_˛⁄e
’kt0->
buf„r
),

709 
pkt0
->
∑ckë_out
);

712 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

713 
m∂s_fõld
 = 
	`¡ohl
(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
m∂s
->
fõlds
);

714 
Êow_œbñ
 = (
m∂s_fõld
 & 
MPLS_LABEL_MASK
Ë>> 
MPLS_LABEL_SHIFT
;

715 
Êow_âl
 = (
m∂s_fõld
 & 
MPLS_TTL_MASK
Ë>> 
MPLS_TTL_SHIFT
;

716 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Êow_œbñ=\"0x%08"
PRIx32
"\"", 
Êow_œbñ
);

718 
	`p›_m∂s_hódî
(
pkt
, 
ETH_TYPE_MPLS
);

719 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

722 
m∂s_fõld
 = 
	`¡ohl
(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
m∂s
->
fõlds
);

723 
£q_10
 = (
m∂s_fõld
 & 
MPLS_LABEL_MASK
Ë>> 
MPLS_LABEL_SHIFT
;

724 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "£q_10 =\"0x%08"
PRIx32
"\"", 
£q_10
);

726 
	`p›_m∂s_hódî
(
pkt
, 
ETH_TYPE_MPLS
);

727 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

730 
m∂s_fõld
 = 
	`¡ohl
(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
m∂s
->
fõlds
);

731 
£q_01
 = (
m∂s_fõld
 & 
MPLS_LABEL_MASK
Ë>> 
MPLS_LABEL_SHIFT
;

732 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "£q_01 =\"0x%08"
PRIx32
"\"", 
£q_01
);

734 
	`p›_m∂s_hódî
(
pkt
, 
ETH_TYPE_IP
);

735 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

738 i‡((
£q_10
 =0 && 
£q_01
 == 0) ||

739 (
£q_10
 !0 && 
£q_01
 != 0))

741 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "cannotÉncodeÖkt (seq_10, seq_01 :"

742 "\"0x%08"
PRIx32
"\", \"0x%08"PRIx32"\")",

743 
£q_10
, 
£q_01
);

744 
	`∑ckë_de°roy
(
pkt
);

748 
∂
 = 
	`gë_≥ndög_Êow
(
pkt
->
dp
, 
Êow_œbñ
);

749 
≥ndög
 = 
	`xmÆloc
((
≥ndög_pkt
));

750 
≥ndög
->
pkt
 =Ökt;

751 
≥ndög
->
œbñ_a
 = 
a˘i⁄
->label_a;

752 
≥ndög
->
œbñ_b
 = 
a˘i⁄
->label_b;

753 
≥ndög
->
dódlöe
 = 
	`time_m£c
(Ë+ 
XOR_ENCODING_WAIT
;

754 
≥ndög
->
m∂s_âl
 = 
Êow_âl
;

755 
≥ndög
->
£q_no_10
 = 
£q_10
;

756 
≥ndög
->
£q_no_01
 = 
£q_01
;

757 
∂
->
Àngth
++;

758 i‡(
£q_10
) {

759 
	`li°_push_back
(&
∂
->
íc_10
, (
li°
*)
≥ndög
);

761 
	`li°_push_back
(&
∂
->
íc_01
, (
li°
*)
≥ndög
);

763 
	}
}

766 
	$x‹_decode_∑ckë_‰om_queue
(
∑ckë
 *
pkt0
, 
oÊ_a˘i⁄_x‹_ícode
 *
a˘i⁄
)

768 
uöt32_t
 
Êow_œbñ
, 
Êow_âl
, 
£q_10
, 
£q_01
;

769 
uöt32_t
 
m∂s_fõld
;

770 
≥ndög_pkt
 *
≥ndög
;

771 
≥ndög_Êows
 *
∂
;

772 
∑ckë
 *
pkt
;

775 
pkt
 = 
	`∑ckë_¸óã
(
pkt0
->
dp
,Ökt0->
ö_p‹t
, 
	`oÂbuf_˛⁄e
’kt0->
buf„r
),

776 
pkt0
->
∑ckë_out
);

779 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

780 
m∂s_fõld
 = 
	`¡ohl
(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
m∂s
->
fõlds
);

781 
Êow_œbñ
 = (
m∂s_fõld
 & 
MPLS_LABEL_MASK
Ë>> 
MPLS_LABEL_SHIFT
;

782 
Êow_âl
 = (
m∂s_fõld
 & 
MPLS_TTL_MASK
Ë>> 
MPLS_TTL_SHIFT
;

783 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Êow_œbñ=\"0x%08"
PRIx32
"\"", 
Êow_œbñ
);

785 
	`p›_m∂s_hódî
(
pkt
, 
ETH_TYPE_MPLS
);

786 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

789 
m∂s_fõld
 = 
	`¡ohl
(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
m∂s
->
fõlds
);

790 
£q_10
 = (
m∂s_fõld
 & 
MPLS_LABEL_MASK
Ë>> 
MPLS_LABEL_SHIFT
;

791 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "£q_10 =\"0x%08"
PRIx32
"\"", 
£q_10
);

793 
	`p›_m∂s_hódî
(
pkt
, 
ETH_TYPE_MPLS
);

794 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

797 
m∂s_fõld
 = 
	`¡ohl
(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
m∂s
->
fõlds
);

798 
£q_01
 = (
m∂s_fõld
 & 
MPLS_LABEL_MASK
Ë>> 
MPLS_LABEL_SHIFT
;

799 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "£q_01 =\"0x%08"
PRIx32
"\"", 
£q_01
);

801 
	`p›_m∂s_hódî
(
pkt
, 
ETH_TYPE_IP
);

802 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

804 
∂
 = 
	`gë_≥ndög_Êow
(
pkt
->
dp
, 
Êow_œbñ
);

805 
≥ndög
 = 
	`xmÆloc
((
≥ndög_pkt
));

806 
≥ndög
->
pkt
 =Ökt;

807 
≥ndög
->
œbñ_a
 = 
a˘i⁄
->label_a;

808 
≥ndög
->
œbñ_b
 = 
a˘i⁄
->label_b;

809 
≥ndög
->
dódlöe
 = 
	`time_m£c
(Ë+ 
XOR_ENCODING_WAIT
;

810 
≥ndög
->
m∂s_âl
 = 
Êow_âl
;

811 
≥ndög
->
£q_no_10
 = 
£q_10
;

812 
≥ndög
->
£q_no_01
 = 
£q_01
;

813 
	`li°_push_back
(&
∂
->
dec_√w
, (
li°
*)
≥ndög
);

814 
	}
}

817 
	$£t_m∂s_œbñ
(
∑ckë
 *
pkt
, 
oÊ_a˘i⁄_£t_m∂s_œbñ
 *
a˘
) {

818 
uöt32_t
 
cou¡î
;

819 
uöt32_t
 
hódî
 ;

820 
uöt32_t
 
ëh_ty≥
 ;

821 
oÊ_m©ch_év
 *
m
 = (oÊ_m©ch_év *Ë
	`mÆloc
( (ofl_match_tlv));

822 
oÊ_m©ch_év
 *
m_f‹_ëh
 = (oÊ_m©ch_év *Ë
	`mÆloc
( (ofl_match_tlv));

823 
Àn
;

825 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "NowÉxecuting set_mpls_labeláction ....");

827 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

829 i‡(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
m∂s
 !
NULL
) {

830 
m∂s_hódî
 *
m∂s
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->mpls;

833 
m∂s
->
fõlds
 = (m∂s->fõld†& ~
	`¡ohl
(
MPLS_LABEL_MASK
)Ë|Çtohl((
a˘
->
m∂s_œbñ
 << 
MPLS_LABEL_SHIFT
) & MPLS_LABEL_MASK);

835 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Thê£àMPLS_LABEL i†ö SET_MPLS_LABEL_FROM_COUNTER .... =\"0x%08"
PRIx32
"\"", 
m∂s
->
fõlds
);

837 
cou¡î
 = 
a˘
->
m∂s_œbñ
;

838 
hódî
 = 
OXM_OF_MPLS_LABEL
;

839 
Àn
 = ((
hódî
) & 0xff);

840 
m
->
hódî
 = header;

841 
m
->
vÆue
 = (
uöt8_t
*Ë
	`mÆloc
(
Àn
);

842 
	`mem˝y
(
m
->
vÆue
, &
cou¡î
, 
Àn
);

843 
	`hm≠_ö£π
(&(
pkt
->
h™dÀ_°d
->
m©ch
.
m©ch_fõlds
),&
m
->
hm≠_node
,
	`hash_öt
(
hódî
, 0));

844 
pkt
->
h™dÀ_°d
->
m©ch
.
hódî
.
Àngth
 +
Àn
 + 4;

846 
hódî
 = 
OXM_OF_ETH_TYPE
;

847 
Àn
 = ((
hódî
) & 0xff);

848 
m_f‹_ëh
->
hódî
 = header;

849 
m_f‹_ëh
->
vÆue
 = (
uöt8_t
*Ë
	`mÆloc
(
Àn
);

850 
ëh_ty≥
 = 0x8847;

851 
	`mem˝y
(
m_f‹_ëh
->
vÆue
, &
ëh_ty≥
, 
Àn
);

852 
	`hm≠_ö£π
(&(
pkt
->
h™dÀ_°d
->
m©ch
.
m©ch_fõlds
),&
m_f‹_ëh
->
hm≠_node
,
	`hash_öt
(
hódî
, 0));

853 
pkt
->
h™dÀ_°d
->
m©ch
.
hódî
.
Àngth
 +
Àn
 + 4;

861 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryingÅoÉxecute SET_MPLS_LABELáction onÖacket withÇo mpls.");

863 
	}
}

868 
	$£t_m∂s_âl
(
∑ckë
 *
pkt
, 
oÊ_a˘i⁄_m∂s_âl
 *
a˘
) {

869 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

870 i‡(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
m∂s
 !
NULL
) {

871 
m∂s_hódî
 *
m∂s
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->mpls;

873 
m∂s
->
fõlds
 = (m∂s->fõld†& ~
	`¡ohl
(
MPLS_TTL_MASK
)Ë|Çtohl((
a˘
->
m∂s_âl
 << 
MPLS_TTL_SHIFT
) & MPLS_TTL_MASK);

876 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryingÅoÉxecute SET_MPLS_TTLáction onÖacket withÇo mpls.");

878 
	}
}

882 
	$dec_m∂s_âl
(
∑ckë
 *
pkt
, 
oÊ_a˘i⁄_hódî
 *
a˘
 
UNUSED
) {

883 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

884 i‡(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
m∂s
 !
NULL
) {

885 
m∂s_hódî
 *
m∂s
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->mpls;

887 
uöt32_t
 
âl
 = 
	`¡ohl
(
m∂s
->
fõlds
Ë& 
MPLS_TTL_MASK
;

889 i‡(
âl
 > 0) {Åtl--; }

890 
m∂s
->
fõlds
 = (m∂s->fõld†& ~
	`¡ohl
(
MPLS_TTL_MASK
)Ë| 
	`ht⁄l
(
âl
);

893 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryingÅoÉxecute DEC_MPLS_TTLáction onÖacket withÇo mpls.");

895 
	}
}

899 
	$push_m∂s
(
∑ckë
 *
pkt
, 
oÊ_a˘i⁄_push
 *
a˘
) {

901 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

902 i‡(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
ëh
 !
NULL
) {

903 
ëh_hódî
 *
ëh
, *
√w_ëh
;

904 
¢≠_hódî
 *
¢≠
, *
√w_¢≠
;

905 
m∂s_hódî
 *
m∂s
, *
√w_m∂s
, *
push_m∂s
;

906 
ù_hódî
 *
ùv4
;

907 
ùv6_hódî
 *
ùv6
;

908 
size_t
 
ëh_size
;

910 
ëh
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->eth;

911 
¢≠
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->
ëh_¢≠
;

912 
m∂s
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->mpls;

913 
ùv4
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->ipv4;

914 
ùv6
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->ipv6;

916 
ëh_size
 = 
¢≠
 =
NULL


917 ? 
ETH_HEADER_LEN


918 : 
ETH_HEADER_LEN
 + 
LLC_HEADER_LEN
 + 
SNAP_HEADER_LEN
;

920 i‡(
	`oÂbuf_hódroom
(
pkt
->
buf„r
Ë>
MPLS_HEADER_LEN
) {

922 
pkt
->
buf„r
->
d©a
 = (
uöt8_t
 *)’kt->buf„r->d©aË- 
MPLS_HEADER_LEN
;

923 
pkt
->
buf„r
->
size
 +
MPLS_HEADER_LEN
;

925 
	`memmove
(
pkt
->
buf„r
->
d©a
, 
ëh
, 
ëh_size
);

927 
√w_ëh
 = (
ëh_hódî
 *)(
pkt
->
buf„r
->
d©a
);

928 
√w_¢≠
 = 
¢≠
 =
NULL
 ? NULL

929 : (
¢≠_hódî
 *)((
uöt8_t
 *)
√w_ëh


930 + 
ETH_HEADER_LEN
 + 
MPLS_HEADER_LEN
 + 
LLC_HEADER_LEN
);

931 
push_m∂s
 = (
m∂s_hódî
 *)((
uöt8_t
 *)
√w_ëh
 + 
ëh_size
);

932 
√w_m∂s
 = 
m∂s
;

938 
	`oÂbuf_put_unöô
(
pkt
->
buf„r
, 
MPLS_HEADER_LEN
);

940 
√w_ëh
 = (
ëh_hódî
 *)(
pkt
->
buf„r
->
d©a
);

941 
√w_¢≠
 = 
¢≠
 =
NULL
 ? NULL

942 : (
¢≠_hódî
 *)((
uöt8_t
 *)
√w_ëh


943 + 
ETH_HEADER_LEN
 + 
MPLS_HEADER_LEN
 + 
LLC_HEADER_LEN
);

944 
push_m∂s
 = (
m∂s_hódî
 *)((
uöt8_t
 *)
√w_ëh
 + 
ETH_HEADER_LEN
);

947 
	`memmove
((
uöt8_t
 *)
push_m∂s
 + 
MPLS_HEADER_LEN
,Öush_mpls,

948 
pkt
->
buf„r
->
size
 - 
ETH_HEADER_LEN
);

950 
√w_m∂s
 = 
m∂s
 =
NULL
 ? NULL

951 : (
m∂s_hódî
 *)((
uöt8_t
 *)
push_m∂s
 + 
MPLS_HEADER_LEN
);

954 i‡(
√w_m∂s
 !
NULL
) {

955 
push_m∂s
->
fõlds
 = 
√w_m∂s
->fõld†& ~
	`ht⁄l
(
MPLS_S_MASK
);

956 } i‡(
ùv4
 !
NULL
) {

958 
push_m∂s
->
fõlds
 = 
	`ht⁄l
((
uöt32_t
)
ùv4
->
ù_âl
 & 
MPLS_TTL_MASK
Ë| ht⁄l(
MPLS_S_MASK
);

959 } i‡(
ùv6
 !
NULL
) {

961 
push_m∂s
->
fõlds
 = 
	`ht⁄l
((
uöt32_t
)
ùv6
->
ùv6_h›_limô
 & 
MPLS_TTL_MASK
Ë| ht⁄l(
MPLS_S_MASK
);

964 
push_m∂s
->
fõlds
 = 
	`ht⁄l
(
MPLS_S_MASK
);

967 i‡(
√w_¢≠
 !
NULL
) {

968 
√w_¢≠
->
¢≠_ty≥
 = 
	`¡ohs
(
a˘
->
ëhîty≥
);

970 
√w_ëh
->
ëh_ty≥
 = 
	`¡ohs
(
a˘
->
ëhîty≥
);

973 
pkt
->
h™dÀ_°d
->
vÆid
 = 
Ál£
;

976 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryingÅoÉxecute PUSH_MPLSáction onÖacket withÇoÉth.");

978 
	}
}

982 
	$p›_m∂s
(
∑ckë
 *
pkt
, 
oÊ_a˘i⁄_p›_m∂s
 *
a˘
) {

983 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

984 i‡(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
ëh
 !
NULL
 &&Ökt->h™dÀ_°d->¥Ÿo->
m∂s
 != NULL) {

985 
ëh_hódî
 *
ëh
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->eth;

986 
¢≠_hódî
 *
¢≠
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->
ëh_¢≠
;

987 
vœn_hódî
 *
vœn_œ°
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->vlan_last;

988 
m∂s_hódî
 *
m∂s
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->mpls;

989 
size_t
 
move_size
;

991 i‡(
vœn_œ°
 !
NULL
) {

992 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Now in first if....");

993 
vœn_œ°
->
vœn_√xt_ty≥
 = 
	`ht⁄s
(
a˘
->
ëhîty≥
);

994 } i‡(
¢≠
 !
NULL
) {

995 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Now in 2 if....");

996 
¢≠
->
¢≠_ty≥
 = 
	`ht⁄s
(
a˘
->
ëhîty≥
);

998 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Now in 3 if....");

999 
ëh
->
ëh_ty≥
 = 
	`ht⁄s
(
a˘
->
ëhîty≥
);

1002 
move_size
 = (
uöt8_t
 *)
m∂s
 - (uöt8_à*)
ëh
;

1004 
pkt
->
buf„r
->
d©a
 = (
uöt8_t
 *Ìkt->buf„r->d©®+ 
MPLS_HEADER_LEN
;

1005 
pkt
->
buf„r
->
size
 -
MPLS_HEADER_LEN
;

1007 
	`memmove
(
pkt
->
buf„r
->
d©a
, 
ëh
, 
move_size
);

1009 i‡(
¢≠
 !
NULL
) {

1010 
ëh_hódî
 *
√w_ëh
 = (ëh_hódî *)(
pkt
->
buf„r
->
d©a
);

1011 
√w_ëh
->
ëh_ty≥
 = 
	`ht⁄s
(
	`¡ohs
“ew_ëh->ëh_ty≥Ë+ 
MPLS_HEADER_LEN
);

1015 
pkt
->
h™dÀ_°d
->
vÆid
 = 
Ál£
;

1017 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryingÅoÉxecute POP_MPLSáction onÖacket withÇoÉth/mpls.");

1019 
	}
}

1023 
	$push_pbb
(
∑ckë
 *
pkt
, 
oÊ_a˘i⁄_push
 *
a˘
) {

1025 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

1026 i‡(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
ëh
 !
NULL
) {

1027 
ëh_hódî
 *
ëh
, *
√w_ëh
;

1028 
¢≠_hódî
 *
¢≠
, *
√w_¢≠
;

1029 
pbb_hódî
 *
pbb
, *
√w_pbb
, *
push_pbb
;

1030 
vœn_hódî
 * 
vœn
;

1031 
size_t
 
ëh_size
;

1033 
ëh
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->eth;

1034 
¢≠
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->
ëh_¢≠
;

1035 
pbb
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->pbb;

1036 
vœn
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->vlan;

1038 
ëh_size
 = 
¢≠
 =
NULL


1039 ? 
ETH_HEADER_LEN


1040 : 
ETH_HEADER_LEN
 + 
LLC_HEADER_LEN
 + 
SNAP_HEADER_LEN
;

1042 i‡(
	`oÂbuf_hódroom
(
pkt
->
buf„r
Ë>
PBB_HEADER_LEN
) {

1044 
pkt
->
buf„r
->
d©a
 = (
uöt8_t
 *)’kt->buf„r->d©aË- 
PBB_HEADER_LEN
;

1045 
pkt
->
buf„r
->
size
 +
PBB_HEADER_LEN
;

1047 
	`memmove
(
pkt
->
buf„r
->
d©a
, 
ëh
, 
ëh_size
);

1049 
√w_ëh
 = (
ëh_hódî
 *)(
pkt
->
buf„r
->
d©a
);

1050 
√w_¢≠
 = 
¢≠
 =
NULL
 ? NULL

1051 : (
¢≠_hódî
 *)((
uöt8_t
 *)
√w_ëh


1052 + 
ETH_HEADER_LEN
 + 
PBB_HEADER_LEN
 + 
LLC_HEADER_LEN
);

1053 
push_pbb
 = (
pbb_hódî
 *)((
uöt8_t
 *)
√w_ëh
 + 
ëh_size
);

1054 
√w_pbb
 = 
pbb
;

1060 
	`oÂbuf_put_unöô
(
pkt
->
buf„r
, 
PBB_HEADER_LEN
);

1062 
√w_ëh
 = (
ëh_hódî
 *)(
pkt
->
buf„r
->
d©a
);

1063 
√w_¢≠
 = 
¢≠
 =
NULL
 ? NULL

1064 : (
¢≠_hódî
 *)((
uöt8_t
 *)
√w_ëh


1065 + 
ETH_HEADER_LEN
 + 
PBB_HEADER_LEN
 + 
LLC_HEADER_LEN
);

1066 
push_pbb
 = (
pbb_hódî
 *)((
uöt8_t
 *)
√w_ëh
 + 
ETH_HEADER_LEN
);

1069 
	`memmove
((
uöt8_t
 *)
push_pbb
 + 
PBB_HEADER_LEN
,Öush_pbb,

1070 
pkt
->
buf„r
->
size
 - 
ETH_HEADER_LEN
);

1072 
√w_pbb
 = 
pbb
 =
NULL
 ? NULL

1073 : (
pbb_hódî
 *)((
uöt8_t
 *)
push_pbb
 + 
PBB_HEADER_LEN
);

1076 
push_pbb
->
id
 = 
√w_pbb
 =
NULL
 ? 0x0000 :Çew_pbb->id;

1077 
push_pbb
->
id
 = 
vœn
 =
NULL


1078 ? 
push_pbb
->
id


1079 : 
push_pbb
->
id
 & (((
uöt32_t
Ë(
vœn
->
vœn_tci
 & ~
	`ht⁄l
(
VLAN_PCP_MASK
)) )<< 16);

1080 
	`mem˝y
(
push_pbb
->
c_ëh_d°
,
ëh
,
ETH_HEADER_LEN
);

1082 i‡(
√w_¢≠
 !
NULL
) {

1084 
push_pbb
->
pbb_√xt_ty≥
 = 
√w_¢≠
->
¢≠_ty≥
;

1085 
√w_¢≠
->
¢≠_ty≥
 = 
	`¡ohs
(
a˘
->
ëhîty≥
);

1086 
√w_ëh
->
ëh_ty≥
 = 
	`ht⁄s
(
	`¡ohs
“ew_ëh->ëh_ty≥Ë+ 
PBB_HEADER_LEN
);

1088 
push_pbb
->
pbb_√xt_ty≥
 = 
√w_ëh
->
ëh_ty≥
;

1089 
√w_ëh
->
ëh_ty≥
 = 
	`¡ohs
(
a˘
->
ëhîty≥
);

1092 
pkt
->
h™dÀ_°d
->
vÆid
 = 
Ál£
;

1095 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryingÅoÉxecuteÖushÖbbáction onÖacket withÇoÉth.");

1097 
	}
}

1102 
	$p›_pbb
(
∑ckë
 *
pkt
, 
oÊ_a˘i⁄_hódî
 *
a˘
 
UNUSED
) {

1103 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

1104 i‡(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
ëh
 !
NULL
 &&Ökt->h™dÀ_°d->¥Ÿo->
pbb
 != NULL) {

1105 
ëh_hódî
 *
ëh
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->eth;

1106 
pbb_hódî
 *
pbb
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->pbb;

1107 
size_t
 
move_size
;

1109 
move_size
 = (
uöt8_t
 *Ë
pbb
->
c_ëh_d°
 - (uöt8_à*)
ëh
;

1113 
	`memmove
(
pkt
->
buf„r
->
d©a
, 
pbb
->
c_ëh_d°
, (pkt->buf„r->
size
 - 
move_size
));

1114 
pkt
->
buf„r
->
size
 -
move_size
;

1116 
pkt
->
h™dÀ_°d
->
vÆid
 = 
Ál£
;

1118 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryingÅoÉxecute POP_PBBáction onÖacket withÇo PBB header.");

1120 
	}
}

1125 
	$£t_queue
(
∑ckë
 *
pkt
 
UNUSED
, 
oÊ_a˘i⁄_£t_queue
 *
a˘
) {

1126 
pkt
->
out_queue
 = 
a˘
->
queue_id
;

1127 
	}
}

1131 
	$group
(
∑ckë
 *
pkt
, 
oÊ_a˘i⁄_group
 *
a˘
) {

1132 
pkt
->
out_group
 = 
a˘
->
group_id
;

1133 
	}
}

1138 
	$£t_nw_âl
(
∑ckë
 *
pkt
, 
oÊ_a˘i⁄_£t_nw_âl
 *
a˘
) {

1139 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

1140 i‡(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
ùv4
 !
NULL
) {

1141 
ù_hódî
 *
ùv4
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->ipv4;

1143 
uöt16_t
 
ﬁd_vÆ
 = 
	`ht⁄s
((
ùv4
->
ù_¥Ÿo
Ë+ (ùv4->
ù_âl
<<8));

1144 
uöt16_t
 
√w_vÆ
 = 
	`ht⁄s
((
ùv4
->
ù_¥Ÿo
Ë+ (
a˘
->
nw_âl
<<8));

1145 
ùv4
->
ù_csum
 = 
	`ªˇlc_csum16
(ùv4->ù_csum, 
ﬁd_vÆ
, 
√w_vÆ
);

1146 
ùv4
->
ù_âl
 = 
a˘
->
nw_âl
;

1148 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryingÅoÉxecute SET_NW_TTLáction onÖacket withÇo ipv4.");

1150 
	}
}

1155 
	$dec_nw_âl
(
∑ckë
 *
pkt
, 
oÊ_a˘i⁄_hódî
 *
a˘
 
UNUSED
) {

1156 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

1157 i‡(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
ùv4
 !
NULL
) {

1159 
ù_hódî
 *
ùv4
 = 
pkt
->
h™dÀ_°d
->
¥Ÿo
->ipv4;

1161 i‡(
ùv4
->
ù_âl
 > 0) {

1162 
uöt8_t
 
√w_âl
 = 
ùv4
->
ù_âl
 - 1;

1163 
uöt16_t
 
ﬁd_vÆ
 = 
	`ht⁄s
((
ùv4
->
ù_¥Ÿo
Ë+ (ùv4->
ù_âl
<<8));

1164 
uöt16_t
 
√w_vÆ
 = 
	`ht⁄s
((
ùv4
->
ù_¥Ÿo
Ë+ (
√w_âl
<<8));

1165 
ùv4
->
ù_csum
 = 
	`ªˇlc_csum16
(ùv4->ù_csum, 
ﬁd_vÆ
, 
√w_vÆ
);

1166 
ùv4
->
ù_âl
 = 
√w_âl
;

1169 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryingÅoÉxecute DEC_NW_TTLáction onÖacket withÇo ipv4.");

1171 
	}
}

1175 
	$dp_execuã_a˘i⁄
(
∑ckë
 *
pkt
,

1176 
oÊ_a˘i⁄_hódî
 *
a˘i⁄
) {

1185 *
a1
 = 
	`oÊ_a˘i⁄_to_°rög
(
a˘i⁄
, 
pkt
->
dp
->
exp
);

1186 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "executögá˘i⁄ i¿DP_EXECUTE_ACTION %s.", 
a1
);

1187 
	`‰ì
(
a1
);

1189 i‡(
	`VLOG_IS_DBG_ENABLED
(
LOG_MODULE
)) {

1190 *
a
 = 
	`oÊ_a˘i⁄_to_°rög
(
a˘i⁄
, 
pkt
->
dp
->
exp
);

1191 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "executögá˘i⁄ %s.", 
a
);

1192 
	`‰ì
(
a
);

1195 
a˘i⁄
->
ty≥
) {

1196 (
OFPAT_SET_FIELD
): {

1197 
	`£t_fõld
(
pkt
,(
oÊ_a˘i⁄_£t_fõld
*Ë
a˘i⁄
);

1200 (
OFPAT_OUTPUT
): {

1201 
	`ouçut
(
pkt
, (
oÊ_a˘i⁄_ouçut
 *)
a˘i⁄
);

1204 (
OFPAT_COPY_TTL_OUT
): {

1205 
	`c›y_âl_out
(
pkt
, 
a˘i⁄
);

1208 (
OFPAT_COPY_TTL_IN
): {

1209 
	`c›y_âl_ö
(
pkt
, 
a˘i⁄
);

1212 (
OFPAT_SET_PARITY_MPLS_LABEL
): {

1213 
	`£t_∑rôy_m∂s_œbñ
(
pkt
);

1216 (
OFPAT_XOR_ENCODE
): {

1217 
	`x‹_ícode_∑ckë_‰om_queue
(
pkt
, (
oÊ_a˘i⁄_x‹_ícode
 *)
a˘i⁄
);

1220 (
OFPAT_XOR_DECODE
): {

1221 
	`x‹_decode_∑ckë_‰om_queue
(
pkt
, (
oÊ_a˘i⁄_x‹_ícode
 *)
a˘i⁄
);

1224 (
OFPAT_SET_MPLS_LABEL_FROM_COUNTER
): {

1225 
	`£t_m∂s_œbñ_‰om_cou¡î
(
pkt
);

1228 (
OFPAT_SET_MPLS_LABEL
): {

1229 
	`£t_m∂s_œbñ
(
pkt
, (
oÊ_a˘i⁄_£t_m∂s_œbñ
 *)
a˘i⁄
);

1232 (
OFPAT_SET_MPLS_TTL
): {

1233 
	`£t_m∂s_âl
(
pkt
, (
oÊ_a˘i⁄_m∂s_âl
 *)
a˘i⁄
);

1236 (
OFPAT_DEC_MPLS_TTL
): {

1237 
	`dec_m∂s_âl
(
pkt
, 
a˘i⁄
);

1240 (
OFPAT_PUSH_VLAN
): {

1241 
	`push_vœn
(
pkt
, (
oÊ_a˘i⁄_push
 *)
a˘i⁄
);

1244 (
OFPAT_POP_VLAN
): {

1245 
	`p›_vœn
(
pkt
, 
a˘i⁄
);

1248 (
OFPAT_PUSH_MPLS
): {

1249 
	`push_m∂s
(
pkt
, (
oÊ_a˘i⁄_push
 *)
a˘i⁄
);

1252 (
OFPAT_POP_MPLS
): {

1253 
	`p›_m∂s
(
pkt
, (
oÊ_a˘i⁄_p›_m∂s
 *)
a˘i⁄
);

1256 (
OFPAT_SET_QUEUE
): {

1257 
	`£t_queue
(
pkt
, (
oÊ_a˘i⁄_£t_queue
 *)
a˘i⁄
);

1260 (
OFPAT_GROUP
): {

1261 
	`group
(
pkt
, (
oÊ_a˘i⁄_group
 *)
a˘i⁄
);

1264 (
OFPAT_SET_NW_TTL
): {

1265 
	`£t_nw_âl
(
pkt
, (
oÊ_a˘i⁄_£t_nw_âl
 *)
a˘i⁄
);

1268 (
OFPAT_DEC_NW_TTL
): {

1269 
	`dec_nw_âl
(
pkt
, 
a˘i⁄
);

1272 (
OFPAT_PUSH_PBB
):{

1273 
	`push_pbb
(
pkt
, (
oÊ_a˘i⁄_push
*)
a˘i⁄
);

1276 (
OFPAT_POP_PBB
):{

1277 
	`p›_pbb
(
pkt
, 
a˘i⁄
);

1280 (
OFPAT_EXPERIMENTER
): {

1281 
	`dp_exp_a˘i⁄
(
pkt
, (
oÊ_a˘i⁄_ex≥rimíãr
 *)
a˘i⁄
);

1286 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryögÅÿexecuã unknow¿a˘i⁄Åy≥ (%u).", 
a˘i⁄
->
ty≥
);

1289 *
p
 = 
	`∑ckë_to_°rög
(
pkt
);

1290 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "a˘i⁄Ñesu…: %s", 
p
);

1291 
	`‰ì
(
p
);

1292 i‡(
	`VLOG_IS_DBG_ENABLED
(
LOG_MODULE
)) {

1293 *
p
 = 
	`∑ckë_to_°rög
(
pkt
);

1294 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "a˘i⁄Ñesu…: %s", 
p
);

1295 
	`‰ì
(
p
);

1298 
	}
}

1320 
	$dp_execuã_a˘i⁄_li°
(
∑ckë
 *
pkt
,

1321 
size_t
 
a˘i⁄s_num
, 
oÊ_a˘i⁄_hódî
 **
a˘i⁄s
, 
uöt64_t
 
cookõ
) {

1322 
size_t
 
i
;

1325 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "***************************************");

1326 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Executögá˘i⁄Üi°Çumbî o‡a˘i⁄s: %d\n",
a˘i⁄s_num
);

1327 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "***************************************");

1328 
i
=0; i < 
a˘i⁄s_num
; i++) {

1329 
	`dp_execuã_a˘i⁄
(
pkt
, 
a˘i⁄s
[
i
]);

1331 i‡(
pkt
->
out_group
 !
OFPG_ANY
) {

1332 
uöt32_t
 
group
 = 
pkt
->
out_group
;

1333 
pkt
->
out_group
 = 
OFPG_ANY
;

1334 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Grou∞a˘i⁄;Éxecutög grou∞(%u).", 
group
);

1335 
	`group_èbÀ_execuã
(
pkt
->
dp
->
groups
,Ökt, 
group
);

1337 } i‡(
pkt
->
out_p‹t
 !
OFPP_ANY
) {

1338 
uöt32_t
 
p‹t
 = 
pkt
->
out_p‹t
;

1339 
uöt32_t
 
queue
 = 
pkt
->
out_queue
;

1340 
uöt16_t
 
max_Àn
 = 
pkt
->
out_p‹t_max_Àn
;

1341 
pkt
->
out_p‹t
 = 
OFPP_ANY
;

1342 
pkt
->
out_p‹t_max_Àn
 = 0;

1343 
pkt
->
out_queue
 = 0;

1344 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "P‹àa˘i⁄; sídögÅÿp‹à(%u).", 
p‹t
);

1345 
	`dp_a˘i⁄s_ouçut_p‹t
(
pkt
, 
p‹t
, 
queue
, 
max_Àn
, 
cookõ
);

1349 
	}
}

1353 
	$dp_a˘i⁄s_ouçut_p‹t
(
∑ckë
 *
pkt
, 
uöt32_t
 
out_p‹t
, uöt32_à
out_queue
, 
uöt16_t
 
max_Àn
, 
uöt64_t
 
cookõ
) {

1355 
out_p‹t
) {

1356 (
OFPP_TABLE
): {

1357 i‡(
pkt
->
∑ckë_out
) {

1359 
pkt
->
∑ckë_out
 = 
Ál£
;

1360 
	`pùñöe_¥o˚ss_∑ckë
(
pkt
->
dp
->
pùñöe
,Ökt);

1362 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryingÅoÑesubmitÖacketÅoÖipeline.");

1366 (
OFPP_IN_PORT
): {

1367 
	`dp_p‹ts_ouçut
(
pkt
->
dp
,Ökt->
buf„r
,Ökt->
ö_p‹t
, 0);

1370 (
OFPP_CONTROLLER
): {

1371 
oÊ_msg_∑ckë_ö
 
msg
;

1372 
msg
.
hódî
.
ty≥
 = 
OFPT_PACKET_IN
;

1373 
msg
.
tŸÆ_Àn
 = 
pkt
->
buf„r
->
size
;

1374 
msg
.
ªas⁄
 = 
pkt
->
h™dÀ_°d
->
èbÀ_miss
? 
OFPR_NO_MATCH
:
OFPR_ACTION
;

1375 
msg
.
èbÀ_id
 = 
pkt
->table_id;

1376 
msg
.
d©a
 = 
pkt
->
buf„r
->data;

1377 
msg
.
cookõ
 = cookie;

1379 i‡(
pkt
->
dp
->
c⁄fig
.
miss_£nd_Àn
 !
OFPCML_NO_BUFFER
){

1380 
	`dp_buf„rs_ßve
(
pkt
->
dp
->
buf„rs
,Ökt);

1381 
msg
.
buf„r_id
 = 
pkt
->buffer_id;

1382 
msg
.
d©a_Àngth
 = 
	`MIN
(
max_Àn
, 
pkt
->
buf„r
->
size
);

1385 
msg
.
buf„r_id
 = 
OFP_NO_BUFFER
;

1386 
msg
.
d©a_Àngth
 = 
pkt
->
buf„r
->
size
;

1389 i‡(!
pkt
->
h™dÀ_°d
->
vÆid
){

1390 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

1395 
msg
.
m©ch
 = (
oÊ_m©ch_hódî
*Ë&
pkt
->
h™dÀ_°d
->match;

1396 
	`dp_£nd_mesßge
(
pkt
->
dp
, (
oÊ_msg_hódî
 *)&
msg
, 
NULL
);

1399 (
OFPP_FLOOD
):

1400 (
OFPP_ALL
): {

1401 
	`dp_p‹ts_ouçut_Æl
(
pkt
->
dp
,Ökt->
buf„r
,Ökt->
ö_p‹t
, 
out_p‹t
 =
OFPP_FLOOD
);

1404 (
OFPP_NORMAL
):

1406 (
OFPP_LOCAL
):

1408 i‡(
pkt
->
ö_p‹t
 =
out_p‹t
) {

1409 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "can't directly forwardÅo inputÖort.");

1411 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "OuçuâögÖackë o¿p‹à%u.", 
out_p‹t
);

1412 
	`dp_p‹ts_ouçut
(
pkt
->
dp
,Ökt->
buf„r
, 
out_p‹t
, 
out_queue
);

1416 
	}
}

1418 
boﬁ


1419 
	$dp_a˘i⁄s_li°_has_out_p‹t
(
size_t
 
a˘i⁄s_num
, 
oÊ_a˘i⁄_hódî
 **
a˘i⁄s
, 
uöt32_t
 
p‹t
) {

1420 
size_t
 
i
;

1422 
i
=0; i < 
a˘i⁄s_num
; i++) {

1423 i‡(
a˘i⁄s
[
i
]->
ty≥
 =
OFPAT_OUTPUT
) {

1424 
oÊ_a˘i⁄_ouçut
 *
ao
 = (oÊ_a˘i⁄_ouçuà*)
a˘i⁄s
[
i
];

1425 i‡(
ao
->
p‹t
 ==Öort) {

1426  
åue
;

1430  
Ál£
;

1431 
	}
}

1433 
boﬁ


1434 
	$dp_a˘i⁄s_li°_has_out_group
(
size_t
 
a˘i⁄s_num
, 
oÊ_a˘i⁄_hódî
 **
a˘i⁄s
, 
uöt32_t
 
group
) {

1435 
size_t
 
i
;

1437 
i
=0; i < 
a˘i⁄s_num
; i++) {

1438 i‡(
a˘i⁄s
[
i
]->
ty≥
 =
OFPAT_GROUP
) {

1439 
oÊ_a˘i⁄_group
 *
ag
 = (oÊ_a˘i⁄_grou∞*)
a˘i⁄s
[
i
];

1440 i‡(
ag
->
group_id
 =
group
) {

1441  
åue
;

1445  
Ál£
;

1446 
	}
}

1448 
oÊ_îr


1449 
	$dp_a˘i⁄s_vÆid©e
(
d©≠©h
 *
dp
, 
size_t
 
a˘i⁄s_num
, 
oÊ_a˘i⁄_hódî
 **
a˘i⁄s
) {

1450 
size_t
 
i
;

1452 
i
=0; i < 
a˘i⁄s_num
; i++) {

1453 i‡(
a˘i⁄s
[
i
]->
ty≥
 =
OFPAT_OUTPUT
) {

1454 
oÊ_a˘i⁄_ouçut
 *
ao
 = (oÊ_a˘i⁄_ouçuà*)
a˘i⁄s
[
i
];

1456 i‡(
ao
->
p‹t
 <
OFPP_MAX
 && 
	`dp_p‹ts_lookup
(
dp
,áo->p‹tË=
NULL
) {

1457 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Ouçuàa˘i⁄ f‹ invÆidÖ‹à(%u).", 
ao
->
p‹t
);

1458  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_OUT_PORT
);

1461 i‡(
a˘i⁄s
[
i
]->
ty≥
 =
OFPAT_GROUP
) {

1462 
oÊ_a˘i⁄_group
 *
ag
 = (oÊ_a˘i⁄_grou∞*)
a˘i⁄s
[
i
];

1464 i‡(
ag
->
group_id
 <
OFPG_MAX
 && 
	`group_èbÀ_föd
(
dp
->
groups
,ág->group_idË=
NULL
) {

1465 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Grou∞a˘i⁄ f‹ invÆid grou∞(%u).", 
ag
->
group_id
);

1466  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_BAD_OUT_GROUP
);

1472 
	}
}

1474 
oÊ_îr


1475 
	$dp_a˘i⁄s_check_£t_fõld_ªq
(
oÊ_msg_Êow_mod
 *
msg
, 
size_t
 
a˘i⁄s_num
, 
oÊ_a˘i⁄_hódî
 **
a˘i⁄s
){

1476 
size_t
 
i
;

1478 
i
=0; i < 
a˘i⁄s_num
; i++) {

1479 i‡(
a˘i⁄s
[
i
]->
ty≥
 =
OFPAT_SET_FIELD
) {

1480 
oÊ_a˘i⁄_£t_fõld
 *
as
 = (oÊ_a˘i⁄_£t_fõld*)
a˘i⁄s
[
i
];

1481 
oxm_fõld
 *
f
;

1483 
f
 = 
	`oxm_fõld_lookup
(
as
->
fõld
->
hódî
);

1486 i‡(
msg
->
m©ch
->
Àngth
 =0 && 
f
->
dl_ty≥
[0] != 0)

1487  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_MATCH_INCONSISTENT
);

1489 if(!
	`oxm_¥îeqs_ok
(
f
, (
oÊ_m©ch
*Ë
msg
->
m©ch
)) {

1490  
	`oÊ_îr‹
(
OFPET_BAD_ACTION
, 
OFPBAC_MATCH_INCONSISTENT
);

1496 
	}
}

	@udatapath/dp_actions.h

32 #i‚de‡
DP_ACTIONS_H


33 
	#DP_ACTIONS_H
 1

	)

35 
	~<sys/ty≥s.h
>

36 
	~"d©≠©h.h
"

37 
	~"∑ckë.h
"

38 
	~"oÊib/oÊ-a˘i⁄s.h
"

47 
dp_execuã_a˘i⁄
(
∑ckë
 *
pkt
,

48 
oÊ_a˘i⁄_hódî
 *
a˘i⁄
);

53 
dp_execuã_a˘i⁄_li°
(
∑ckë
 *
pkt
,

54 
size_t
 
a˘i⁄s_num
, 
oÊ_a˘i⁄_hódî
 **
a˘i⁄s
, 
uöt64_t
 
cookõ
);

58 
dp_a˘i⁄s_ouçut_p‹t
(
∑ckë
 *
pkt
, 
uöt32_t
 
out_p‹t
, uöt32_à
out_queue
, 
uöt16_t
 
max_Àn
, 
uöt64_t
 
cookõ
);

61 
boﬁ


62 
dp_a˘i⁄s_li°_has_out_p‹t
(
size_t
 
a˘i⁄s_num
, 
oÊ_a˘i⁄_hódî
 **
a˘i⁄s
, 
uöt32_t
 
p‹t
);

65 
boﬁ


66 
dp_a˘i⁄s_li°_has_out_group
(
size_t
 
a˘i⁄s_num
, 
oÊ_a˘i⁄_hódî
 **
a˘i⁄s
, 
uöt32_t
 
group
);

70 
oÊ_îr


71 
dp_a˘i⁄s_vÆid©e
(
d©≠©h
 *
dp
, 
size_t
 
a˘i⁄s_num
, 
oÊ_a˘i⁄_hódî
 **
a˘i⁄s
);

75 
oÊ_îr


76 
dp_a˘i⁄s_check_£t_fõld_ªq
(
oÊ_msg_Êow_mod
 *
msg
, 
size_t
 
a˘i⁄s_num
, 
oÊ_a˘i⁄_hódî
 **
a˘i⁄s
);

	@udatapath/dp_buffers.c

40 
	~<°dboﬁ.h
>

41 
	~<°döt.h
>

43 
	~"dp_buf„rs.h
"

44 
	~"timevÆ.h
"

45 
	~"∑ckë.h
"

46 
	~"vlog.h
"

48 
	#LOG_MODULE
 
VLM_dp_buf


	)

50 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

58 
	#PKT_BUFFER_BITS
 8

	)

59 
	#PKT_COOKIE_BITS
 (32 - 
PKT_BUFFER_BITS
)

	)

61 
	#N_PKT_BUFFERS
 (1 << 
PKT_BUFFER_BITS
)

	)

62 
	#PKT_BUFFER_MASK
 (
N_PKT_BUFFERS
 - 1)

	)

65 
	#OVERWRITE_SECS
 1

	)

67 
	s∑ckë_buf„r
 {

68 
∑ckë
 *
	mpkt
;

69 
uöt32_t
 
	mcookõ
;

70 
time_t
 
	mtimeout
;

79 
	sdp_buf„rs
 {

80 
d©≠©h
 *
	mdp
;

81 
size_t
 
	mbuf„r_idx
;

82 
size_t
 
	mbuf„rs_num
;

83 
∑ckë_buf„r
 
	mbuf„rs
[
N_PKT_BUFFERS
];

87 
dp_buf„rs
 *

88 
	$dp_buf„rs_¸óã
(
d©≠©h
 *
dp
) {

89 
dp_buf„rs
 *
dpb
 = 
	`xmÆloc
((dp_buffers));

90 
size_t
 
i
;

92 
dpb
->
dp
 = dp;

93 
dpb
->
buf„r_idx
 = (
size_t
)-1;

94 
dpb
->
buf„rs_num
 = 
N_PKT_BUFFERS
;

96 
i
=0; i<
N_PKT_BUFFERS
; i++) {

97 
dpb
->
buf„rs
[
i
].
pkt
 = 
NULL
;

98 
dpb
->
buf„rs
[
i
].
cookõ
 = 
UINT32_MAX
;

100 
dpb
->
buf„rs
[
i
].
timeout
 = 0;

103  
dpb
;

104 
	}
}

106 
size_t


107 
	$dp_buf„rs_size
(
dp_buf„rs
 *
dpb
) {

108  
dpb
->
buf„rs_num
;

109 
	}
}

111 
uöt32_t


112 
	$dp_buf„rs_ßve
(
dp_buf„rs
 *
dpb
, 
∑ckë
 *
pkt
) {

113 
∑ckë_buf„r
 *
p
;

114 
uöt32_t
 
id
;

117 i‡(
pkt
->
buf„r_id
 !
NO_BUFFER
) {

118 i‡(
	`dp_buf„rs_is_Æive
(
dpb
, 
pkt
->
buf„r_id
)) {

119  
pkt
->
buf„r_id
;

123 
dpb
->
buf„r_idx
 = (dpb->buf„r_idx + 1Ë& 
PKT_BUFFER_MASK
;

125 
p
 = &
dpb
->
buf„rs
[dpb->
buf„r_idx
];

126 i‡(
p
->
pkt
 !
NULL
) {

127 i‡(
	`time_now
(Ë< 
p
->
timeout
) {

128  
NO_BUFFER
;

130 
p
->
pkt
->
buf„r_id
 = 
NO_BUFFER
;

131 
	`∑ckë_de°roy
(
p
->
pkt
);

136 i‡(++
p
->
cookõ
 >(1u << 
PKT_COOKIE_BITS
) - 1)

137 
p
->
cookõ
 = 0;

138 
p
->
pkt
 =Ökt;

139 
p
->
timeout
 = 
	`time_now
(Ë+ 
OVERWRITE_SECS
;

140 
id
 = 
dpb
->
buf„r_idx
 | (
p
->
cookõ
 << 
PKT_BUFFER_BITS
);

142 
pkt
->
buf„r_id
 = 
id
;

144  
id
;

145 
	}
}

147 
∑ckë
 *

148 
	$dp_buf„rs_ªåõve
(
dp_buf„rs
 *
dpb
, 
uöt32_t
 
id
) {

149 
∑ckë
 *
pkt
 = 
NULL
;

150 
∑ckë_buf„r
 *
p
;

152 
p
 = &
dpb
->
buf„rs
[
id
 & 
PKT_BUFFER_MASK
];

153 i‡(
p
->
cookõ
 =
id
 >> 
PKT_BUFFER_BITS
 &&Ö->
pkt
 !
NULL
) {

154 
pkt
 = 
p
->pkt;

155 
pkt
->
buf„r_id
 = 
NO_BUFFER
;

156 
pkt
->
∑ckë_out
 = 
Ál£
;

158 
p
->
pkt
 = 
NULL
;

165  
pkt
;

166 
	}
}

168 
boﬁ


169 
	$dp_buf„rs_is_Æive
(
dp_buf„rs
 *
dpb
, 
uöt32_t
 
id
) {

170 
∑ckë_buf„r
 *
p
;

172 
p
 = &
dpb
->
buf„rs
[
id
 & 
PKT_BUFFER_MASK
];

173  ((
p
->
cookõ
 =
id
 >> 
PKT_BUFFER_BITS
) &&

174 (
	`time_now
(Ë< 
p
->
timeout
));

175 
	}
}

179 
	$dp_buf„rs_disˇrd
(
dp_buf„rs
 *
dpb
, 
uöt32_t
 
id
, 
boﬁ
 
de°roy
) {

180 
∑ckë_buf„r
 *
p
;

182 
p
 = &
dpb
->
buf„rs
[
id
 & 
PKT_BUFFER_MASK
];

184 i‡(
p
->
cookõ
 =
id
 >> 
PKT_BUFFER_BITS
) {

185 i‡(
de°roy
) {

186 
p
->
pkt
->
buf„r_id
 = 
NO_BUFFER
;

187 
	`∑ckë_de°roy
(
p
->
pkt
);

189 
p
->
pkt
 = 
NULL
;

191 
	}
}

	@udatapath/dp_buffers.h

40 #i‚de‡
DP_BUFFERS_H


41 
	#DP_BUFFERS_H
 1

	)

43 
	~<°dboﬁ.h
>

44 
	~<°döt.h
>

45 
	~"oÂbuf.h
"

49 
	#NO_BUFFER
 0xffffffff

	)

55 
	gd©≠©h
;

56 
	g∑ckë
;

59 
dp_buf„rs
 *

60 
dp_buf„rs_¸óã
(
d©≠©h
 *
dp
);

63 
size_t


64 
dp_buf„rs_size
(
dp_buf„rs
 *
dpb
);

68 
uöt32_t


69 
dp_buf„rs_ßve
(
dp_buf„rs
 *
dpb
, 
∑ckë
 *
pkt
);

73 
∑ckë
 *

74 
dp_buf„rs_ªåõve
(
dp_buf„rs
 *
dpb
, 
uöt32_t
 
id
);

77 
boﬁ


78 
dp_buf„rs_is_Æive
(
dp_buf„rs
 *
dpb
, 
uöt32_t
 
id
);

82 
dp_buf„rs_disˇrd
(
dp_buf„rs
 *
dpb
, 
uöt32_t
 
id
, 
boﬁ
 
de°roy
);

	@udatapath/dp_capabilities.h

34 #i‚de‡
DP_CAPABILITIES_H


35 
	#DP_CAPABILITIES_H
 1

	)

38 
	~"›íÊow/›íÊow.h
"

45 
	#DP_SUPPORTED_CAPABILITIES
 ( 
OFPC_FLOW_STATS
 \

46 | 
OFPC_TABLE_STATS
 \

47 | 
OFPC_PORT_STATS
 \

48 | 
OFPC_GROUP_STATS
 \

50 | 
OFPC_QUEUE_STATS
 )

	)

53 
	#DP_SUPPORTED_ACTIONS
 ( (1 << 
OFPAT_OUTPUT
) \

54 | (2 << 
OFPAT_COPY_TTL_OUT
) \

55 | (3 << 
OFPAT_COPY_TTL_IN
) \

56 | (4 << 
OFPAT_SET_MPLS_TTL
) \

57 | (5 << 
OFPAT_DEC_MPLS_TTL
) \

58 | (6 << 
OFPAT_PUSH_VLAN
) \

59 | (7 << 
OFPAT_POP_VLAN
) \

60 | (8 << 
OFPAT_PUSH_MPLS
) \

61 | (9 << 
OFPAT_POP_MPLS
) \

62 | (10 << 
OFPAT_SET_QUEUE
) \

63 | (11 << 
OFPAT_GROUP
) \

64 | (12 << 
OFPAT_SET_NW_TTL
) \

65 | (13 << 
OFPAT_DEC_NW_TTL
Ë)

	)

67 
	#DP_SUPPORTED_MATCH_FIELDS
 ( 
OFPXMT_OFB_IN_PORT
 \

68 | 
OFPXMT_OFB_IN_PHY_PORT
 \

69 | 
OFPXMT_OFB_METADATA
 \

70 | 
OFPXMT_OFB_ETH_DST
 \

71 | 
OFPXMT_OFB_ETH_SRC
 \

72 | 
OFPXMT_OFB_ETH_TYPE
 \

73 | 
OFPXMT_OFB_VLAN_VID
 \

74 | 
OFPXMT_OFB_VLAN_PCP
 \

75 | 
OFPXMT_OFB_IP_DSCP
 \

76 | 
OFPXMT_OFB_IP_ECN
 \

77 | 
OFPXMT_OFB_IP_PROTO
 \

78 | 
OFPXMT_OFB_IPV4_SRC
 \

79 | 
OFPXMT_OFB_IPV4_DST
 \

80 | 
OFPXMT_OFB_TCP_SRC
 \

81 | 
OFPXMT_OFB_TCP_DST
 \

82 | 
OFPXMT_OFB_UDP_SRC
 \

83 | 
OFPXMT_OFB_UDP_DST
 \

84 | 
OFPXMT_OFB_SCTP_SRC
 \

85 | 
OFPXMT_OFB_SCTP_DST
 \

86 | 
OFPXMT_OFB_ICMPV4_CODE
 \

87 | 
OFPXMT_OFB_ICMPV4_TYPE
 \

88 | 
OFPXMT_OFB_ARP_OP
 \

89 | 
OFPXMT_OFB_ARP_SHA
 \

90 | 
OFPXMT_OFB_ARP_SPA
 \

91 | 
OFPXMT_OFB_ARP_THA
 \

92 | 
OFPXMT_OFB_ARP_TPA
 \

93 | 
OFPXMT_OFB_IPV6_SRC
 \

94 | 
OFPXMT_OFB_IPV6_DST
 \

95 | 
OFPXMT_OFB_IPV6_FLABEL
 \

96 | 
OFPXMT_OFB_ICMPV6_CODE
 \

97 | 
OFPXMT_OFB_ICMPV6_TYPE
 \

98 | 
OFPXMT_OFB_IPV6_ND_SLL
 \

99 | 
OFPXMT_OFB_IPV6_ND_TARGET
 \

100 | 
OFPXMT_OFB_IPV6_ND_TLL
 \

101 | 
OFPXMT_OFB_MPLS_LABEL
 \

102 | 
OFPXMT_OFB_MPLS_TC
 )

	)

104 
	#DP_SUPPORTED_GROUPS
 ( 
OFPGT_ALL
 \

105 | 
OFPGT_SELECT
 \

106 | 
OFPGT_INDIRECT
 \

107 | 
OFPGT_FF
)

	)

109 
	#DP_SUPPORTED_GROUP_CAPABILITIES
 ( 
OFPGFC_SELECT_WEIGHT
 \

110  )

	)

	@udatapath/dp_control.c

32 
	~"compûî.h
"

33 
	~"dp_ˇ∑bûôõs.h
"

34 
	~"dp_c⁄åﬁ.h
"

35 
	~"dp_a˘i⁄s.h
"

36 
	~"dp_buf„rs.h
"

37 
	~"dp_p‹ts.h
"

38 
	~"group_èbÀ.h
"

39 
	~"mëî_èbÀ.h
"

40 
	~"∑ckës.h
"

41 
	~"pùñöe.h
"

42 
	~"oÊib/oÊ.h
"

43 
	~"oÊib/oÊ-mesßges.h
"

44 
	~"oÊib/oÊ-log.h
"

45 
	~"›íÊow/›íÊow.h
"

47 
	~"vlog.h
"

48 
	#LOG_MODULE
 
VLM_dp_˘æ


	)

50 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

53 
oÊ_îr


54 
	$h™dÀ_c⁄åﬁ_b¨rõr_ªque°
(
d©≠©h
 *
dp
,

55 
oÊ_msg_hódî
 *
msg
, c⁄° 
£ndî
 *sender) {

59 
oÊ_msg_hódî
 
ª∂y
 =

60 {.
ty≥
 = 
OFPT_BARRIER_REPLY
};

62 
	`dp_£nd_mesßge
(
dp
, (
oÊ_msg_hódî
 *)&
ª∂y
, 
£ndî
);

63 
	`oÊ_msg_‰ì
(
msg
, 
dp
->
exp
);

66 
	}
}

69 
oÊ_îr


70 
	$h™dÀ_c⁄åﬁ_„©uªs_ªque°
(
d©≠©h
 *
dp
,

71 
oÊ_msg_hódî
 *
msg
, c⁄° 
£ndî
 *sender) {

73 
oÊ_msg_„©uªs_ª∂y
 
ª∂y
 =

74 {{.
ty≥
 = 
OFPT_FEATURES_REPLY
},

75 .
d©≠©h_id
 = 
dp
->
id
,

76 .
n_buf„rs
 = 
	`dp_buf„rs_size
(
dp
->
buf„rs
),

77 .
n_èbÀs
 = 
PIPELINE_TABLES
,

78 .
auxûüry_id
 = 
£ndî
->
c⁄n_id
,

79 .
ˇ∑bûôõs
 = 
DP_SUPPORTED_CAPABILITIES
,

80 .
ª£rved
 = 0x00000000};

82 
	`dp_£nd_mesßge
(
dp
, (
oÊ_msg_hódî
 *)&
ª∂y
, 
£ndî
);

84 
	`oÊ_msg_‰ì
(
msg
, 
dp
->
exp
);

87 
	}
}

91 
oÊ_îr


92 
	$h™dÀ_c⁄åﬁ_gë_c⁄fig_ªque°
(
d©≠©h
 *
dp
,

93 
oÊ_msg_hódî
 *
msg
, c⁄° 
£ndî
 *sender) {

95 
oÊ_msg_gë_c⁄fig_ª∂y
 
ª∂y
 =

96 {{.
ty≥
 = 
OFPT_GET_CONFIG_REPLY
},

97 .
c⁄fig
 = &
dp
->config};

98 
	`dp_£nd_mesßge
(
dp
, (
oÊ_msg_hódî
 *)&
ª∂y
, 
£ndî
);

100 
	`oÊ_msg_‰ì
(
msg
, 
dp
->
exp
);

102 
	}
}

105 
oÊ_îr


106 
	$h™dÀ_c⁄åﬁ_£t_c⁄fig
(
d©≠©h
 *
dp
, 
oÊ_msg_£t_c⁄fig
 *
msg
,

107 c⁄° 
£ndî
 *£ndî 
UNUSED
) {

108 
uöt16_t
 
Êags
;

110 
Êags
 = 
msg
->
c⁄fig
->Êag†& 
OFPC_FRAG_MASK
;

111 i‡((
Êags
 & 
OFPC_FRAG_MASK
Ë!
OFPC_FRAG_NORMAL


112 && (
Êags
 & 
OFPC_FRAG_MASK
Ë!
OFPC_FRAG_DROP
) {

113 
Êags
 = (Êag†& ~
OFPC_FRAG_MASK
Ë| 
OFPC_FRAG_DROP
;

116 
dp
->
c⁄fig
.
Êags
 = flags;

117 
dp
->
c⁄fig
.
miss_£nd_Àn
 = 
msg
->config->miss_send_len;

119 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
dp
->
exp
);

121 
	}
}

124 
oÊ_îr


125 
	$h™dÀ_c⁄åﬁ_∑ckë_out
(
d©≠©h
 *
dp
, 
oÊ_msg_∑ckë_out
 *
msg
,

126 c⁄° 
£ndî
 *sender) {

127 
∑ckë
 *
pkt
;

128 
îr‹
;

130 if(
£ndî
->
ªmŸe
->
rﬁe
 =
OFPCR_ROLE_SLAVE
)

131  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_IS_SLAVE
);

133 
îr‹
 = 
	`dp_a˘i⁄s_vÆid©e
(
dp
, 
msg
->
a˘i⁄s_num
, msg->
a˘i⁄s
);

134 i‡(
îr‹
) {

135  
îr‹
;

138 i‡(
msg
->
buf„r_id
 =
NO_BUFFER
) {

139 
oÂbuf
 *
buf
;

141 
buf
 = 
	`oÂbuf_√w
(0);

142 
	`oÂbuf_u£
(
buf
, 
msg
->
d©a
, msg->
d©a_Àngth
);

143 
	`oÂbuf_put_unöô
(
buf
, 
msg
->
d©a_Àngth
);

144 
pkt
 = 
	`∑ckë_¸óã
(
dp
, 
msg
->
ö_p‹t
, 
buf
, 
åue
);

147 
pkt
 = 
	`dp_buf„rs_ªåõve
(
dp
->
buf„rs
, 
msg
->
buf„r_id
);

150 i‡(
pkt
 =
NULL
) {

152  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BUFFER_EMPTY
);

155 
	`dp_execuã_a˘i⁄_li°
(
pkt
, 
msg
->
a˘i⁄s_num
, msg->
a˘i⁄s
, 0xffffffffffffffff);

157 
	`∑ckë_de°roy
(
pkt
);

158 
	`oÊ_msg_‰ì_∑ckë_out
(
msg
, 
Ál£
, 
dp
->
exp
);

160 
	}
}

164 
oÊ_îr


165 
	$h™dÀ_c⁄åﬁ_°©s_ªque°_desc
(
d©≠©h
 *
dp
,

166 
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
msg
,

167 c⁄° 
£ndî
 *sender) {

168 
oÊ_msg_ª∂y_desc
 
ª∂y
 =

169 {{{.
ty≥
 = 
OFPT_MULTIPART_REPLY
},

170 .
ty≥
 = 
OFPMP_DESC
, .
Êags
 = 0x0000},

171 .
m‰_desc
 = 
dp
->mfr_desc,

172 .
hw_desc
 = 
dp
->hw_desc,

173 .
sw_desc
 = 
dp
->sw_desc,

174 .
£rül_num
 = 
dp
->serial_num,

175 .
dp_desc
 = 
dp
->dp_desc};

176 
	`dp_£nd_mesßge
(
dp
, (
oÊ_msg_hódî
 *)&
ª∂y
, 
£ndî
);

178 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
dp
->
exp
);

180 
	}
}

183 
oÊ_îr


184 
	$h™dÀ_c⁄åﬁ_°©s_ªque°
(
d©≠©h
 *
dp
,

185 
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
msg
,

186 c⁄° 
£ndî
 *sender) {

187 
msg
->
ty≥
) {

188 (
OFPMP_DESC
): {

189  
	`h™dÀ_c⁄åﬁ_°©s_ªque°_desc
(
dp
, 
msg
, 
£ndî
);

191 (
OFPMP_FLOW
): {

192  
	`pùñöe_h™dÀ_°©s_ªque°_Êow
(
dp
->
pùñöe
, (
oÊ_msg_mu…ù¨t_ªque°_Êow
 *)
msg
, 
£ndî
);

194 (
OFPMP_AGGREGATE
): {

195  
	`pùñöe_h™dÀ_°©s_ªque°_aggªg©e
(
dp
->
pùñöe
, (
oÊ_msg_mu…ù¨t_ªque°_Êow
 *)
msg
, 
£ndî
);

197 (
OFPMP_TABLE
): {

198  
	`pùñöe_h™dÀ_°©s_ªque°_èbÀ
(
dp
->
pùñöe
, 
msg
, 
£ndî
);

200 (
OFPMP_TABLE_FEATURES
):{

201  
	`pùñöe_h™dÀ_°©s_ªque°_èbÀ_„©uªs_ªque°
(
dp
->
pùñöe
, 
msg
, 
£ndî
);

203 (
OFPMP_PORT_STATS
): {

204  
	`dp_p‹ts_h™dÀ_°©s_ªque°_p‹t
(
dp
, (
oÊ_msg_mu…ù¨t_ªque°_p‹t
 *)
msg
, 
£ndî
);

206 (
OFPMP_QUEUE
): {

207  
	`dp_p‹ts_h™dÀ_°©s_ªque°_queue
(
dp
, (
oÊ_msg_mu…ù¨t_ªque°_queue
 *)
msg
, 
£ndî
);

209 (
OFPMP_GROUP
): {

210  
	`group_èbÀ_h™dÀ_°©s_ªque°_group
(
dp
->
groups
, (
oÊ_msg_mu…ù¨t_ªque°_group
 *)
msg
, 
£ndî
);

212 (
OFPMP_GROUP_DESC
): {

213  
	`group_èbÀ_h™dÀ_°©s_ªque°_group_desc
(
dp
->
groups
, 
msg
, 
£ndî
);

215 (
OFPMP_GROUP_FEATURES
):{

216  
	`group_èbÀ_h™dÀ_°©s_ªque°_group_„©uªs
(
dp
->
groups
, 
msg
, 
£ndî
);

218 (
OFPMP_METER
):{

219  
	`mëî_èbÀ_h™dÀ_°©s_ªque°_mëî
(
dp
->
mëîs
,(
oÊ_msg_mu…ù¨t_mëî_ªque°
*)
msg
, 
£ndî
);

221 (
OFPMP_METER_CONFIG
):{

222  
	`mëî_èbÀ_h™dÀ_°©s_ªque°_mëî_c⁄f
(
dp
->
mëîs
,(
oÊ_msg_mu…ù¨t_mëî_ªque°
*)
msg
, 
£ndî
);

224 
OFPMP_METER_FEATURES
:{

225  
	`mëî_èbÀ_h™dÀ_„©uªs_ªque°
(
dp
->
mëîs
, 
msg
, 
£ndî
);

227 
OFPMP_PORT_DESC
:{

228  
	`dp_p‹ts_h™dÀ_p‹t_desc_ªque°
(
dp
, 
msg
, 
£ndî
);

230 (
OFPMP_EXPERIMENTER
): {

231  
	`dp_exp_°©s
(
dp
, (
oÊ_msg_mu…ù¨t_ªque°_ex≥rimíãr
 *)
msg
, 
£ndî
);

234  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_MULTIPART
);

237 
	}
}

241 
oÊ_îr


242 
	$h™dÀ_c⁄åﬁ_echo_ª∂y
(
d©≠©h
 *
dp
 
UNUSED
,

243 
oÊ_msg_echo
 *
msg
,

244 c⁄° 
£ndî
 *£ndî 
UNUSED
) {

246 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
dp
->
exp
);

248 
	}
}

251 
oÊ_îr


252 
	$h™dÀ_c⁄åﬁ_echo_ªque°
(
d©≠©h
 *
dp
,

253 
oÊ_msg_echo
 *
msg
,

254 c⁄° 
£ndî
 *sender) {

255 
oÊ_msg_echo
 
ª∂y
 =

256 {{.
ty≥
 = 
OFPT_ECHO_REPLY
},

257 .
d©a_Àngth
 = 
msg
->data_length,

258 .
d©a
 = 
msg
->data};

259 
	`dp_£nd_mesßge
(
dp
, (
oÊ_msg_hódî
 *)&
ª∂y
, 
£ndî
);

261 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
dp
->
exp
);

263 
	}
}

266 
oÊ_îr


267 
	$h™dÀ_c⁄åﬁ_msg
(
d©≠©h
 *
dp
, 
oÊ_msg_hódî
 *
msg
,

268 c⁄° 
£ndî
 *sender) {

270 *
msg_°r
 = 
	`oÊ_msg_to_°rög
(
msg
, 
dp
->
exp
);

273 
oÊ_msg_Êow_mod
 * 
Êm
;

274 
Êm
 = 
msg
;

276 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "ª˚ived c⁄åﬁ msg: %.400s", 
msg_°r
);

277 i‡(
	`VLOG_IS_DBG_ENABLED
(
LOG_MODULE
)) {

278 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "ª˚ived c⁄åﬁ msg: %.400s", 
msg_°r
);

279 
	`‰ì
(
msg_°r
);

286 
msg
->
ty≥
) {

287 
OFPT_HELLO
: {

288 
	`oÊ_msg_‰ì
(
msg
, 
dp
->
exp
);

291 
OFPT_ERROR
: {

292  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_TYPE
);

294 
OFPT_BARRIER_REQUEST
: {

295  
	`h™dÀ_c⁄åﬁ_b¨rõr_ªque°
(
dp
, 
msg
, 
£ndî
);

297 
OFPT_BARRIER_REPLY
: {

298 
	`oÊ_msg_‰ì
(
msg
, 
dp
->
exp
);

301 
OFPT_FEATURES_REQUEST
: {

302  
	`h™dÀ_c⁄åﬁ_„©uªs_ªque°
(
dp
, 
msg
, 
£ndî
);

304 
OFPT_FEATURES_REPLY
: {

305  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_TYPE
);

307 
OFPT_GET_CONFIG_REQUEST
: {

308  
	`h™dÀ_c⁄åﬁ_gë_c⁄fig_ªque°
(
dp
, 
msg
, 
£ndî
);

310 
OFPT_GET_CONFIG_REPLY
: {

311  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_TYPE
);

313 
OFPT_SET_CONFIG
: {

314  
	`h™dÀ_c⁄åﬁ_£t_c⁄fig
(
dp
, (
oÊ_msg_£t_c⁄fig
 *)
msg
, 
£ndî
);

316 
OFPT_PACKET_IN
: {

317  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_TYPE
);

319 
OFPT_PACKET_OUT
: {

320  
	`h™dÀ_c⁄åﬁ_∑ckë_out
(
dp
, (
oÊ_msg_∑ckë_out
 *)
msg
, 
£ndî
);

323 
OFPT_FLOW_REMOVED
: {

324  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_TYPE
);

326 
OFPT_PORT_STATUS
: {

327  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_TYPE
);

329 
OFPT_FLOW_MOD
: {

330 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "ª˚ived c⁄åﬁ msg i¿OFPT_FLOW_MOD:: %.400s", 
msg_°r
);

331  
	`pùñöe_h™dÀ_Êow_mod
(
dp
->
pùñöe
, (
oÊ_msg_Êow_mod
 *)
msg
, 
£ndî
);

333 
OFPT_GROUP_MOD
: {

334  
	`group_èbÀ_h™dÀ_group_mod
(
dp
->
groups
, (
oÊ_msg_group_mod
 *)
msg
, 
£ndî
);

336 
OFPT_PORT_MOD
: {

337  
	`dp_p‹ts_h™dÀ_p‹t_mod
(
dp
, (
oÊ_msg_p‹t_mod
 *)
msg
, 
£ndî
);

339 
OFPT_TABLE_MOD
: {

340  
	`pùñöe_h™dÀ_èbÀ_mod
(
dp
->
pùñöe
, (
oÊ_msg_èbÀ_mod
 *)
msg
, 
£ndî
);

342 
OFPT_MULTIPART_REQUEST
: {

343  
	`h™dÀ_c⁄åﬁ_°©s_ªque°
(
dp
, (
oÊ_msg_mu…ù¨t_ªque°_hódî
 *)
msg
, 
£ndî
);

345 
OFPT_MULTIPART_REPLY
: {

346  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_TYPE
);

348 
OFPT_ECHO_REQUEST
: {

349  
	`h™dÀ_c⁄åﬁ_echo_ªque°
(
dp
, (
oÊ_msg_echo
 *)
msg
, 
£ndî
);

351 
OFPT_ECHO_REPLY
: {

352  
	`h™dÀ_c⁄åﬁ_echo_ª∂y
(
dp
, (
oÊ_msg_echo
 *)
msg
, 
£ndî
);

354 
OFPT_QUEUE_GET_CONFIG_REQUEST
: {

355  
	`dp_p‹ts_h™dÀ_queue_gë_c⁄fig_ªque°
(
dp
, (
oÊ_msg_queue_gë_c⁄fig_ªque°
 *)
msg
, 
£ndî
);

357 
OFPT_ROLE_REQUEST
: {

358  
	`dp_h™dÀ_rﬁe_ªque°
(
dp
, (
oÊ_msg_rﬁe_ªque°
*)
msg
, 
£ndî
);

360 
OFPT_ROLE_REPLY
:{

361  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_TYPE
);

363 
OFPT_QUEUE_GET_CONFIG_REPLY
: {

364  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_TYPE
);

366 
OFPT_METER_MOD
:{

367  
	`mëî_èbÀ_h™dÀ_mëî_mod
(
dp
->
mëîs
, (
oÊ_msg_mëî_mod
 *)
msg
, 
£ndî
);

369 
OFPT_EXPERIMENTER
: {

370  
	`dp_exp_mesßge
(
dp
, (
oÊ_msg_ex≥rimíãr
 *)
msg
, 
£ndî
);

372 
OFPT_GET_ASYNC_REPLY
:{

373  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_TYPE
);

375 
OFPT_GET_ASYNC_REQUEST
:

376 
OFPT_SET_ASYNC
:{

377  
	`dp_h™dÀ_async_ªque°
(
dp
, (
oÊ_msg_async_c⁄fig
*)
msg
, 
£ndî
);

380  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_TYPE
);

383 
	}
}

	@udatapath/dp_control.h

32 #i‚de‡
DP_CONTROL_H


33 
	#DP_CONTROL_H
 1

	)

35 
	~"d©≠©h.h
"

36 
	~"oÊib/oÊ.h
"

37 
	~"oÊib/oÊ-mesßges.h
"

45 
	g£ndî
;

48 
oÊ_îr


49 
h™dÀ_c⁄åﬁ_msg
(
d©≠©h
 *
dp
, 
oÊ_msg_hódî
 *
msg
,

50 c⁄° 
£ndî
 *sender);

	@udatapath/dp_exp.c

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~"d©≠©h.h
"

35 
	~"dp_exp.h
"

36 
	~"∑ckë.h
"

37 
	~"oÊib/oÊ.h
"

38 
	~"oÊib/oÊ-a˘i⁄s.h
"

39 
	~"oÊib/oÊ-°ru˘s.h
"

40 
	~"oÊib/oÊ-mesßges.h
"

41 
	~"oÊib-exp/oÊ-exp-›íÊow.h
"

42 
	~"oÊib-exp/oÊ-exp-nicúa.h
"

43 
	~"›íÊow/›íÊow.h
"

44 
	~"›íÊow/›íÊow-ext.h
"

45 
	~"›íÊow/nicúa-ext.h
"

46 
	~"vlog.h
"

48 
	#LOG_MODULE
 
VLM_dp_exp


	)

50 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

53 
	$dp_exp_a˘i⁄
(
∑ckë
 * 
pkt
 
UNUSED
, 
oÊ_a˘i⁄_ex≥rimíãr
 *
a˘
) {

54 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryögÅÿexecuã unknow¿ex≥rimíã∏a˘i⁄ (%u).", 
a˘
->
ex≥rimíãr_id
);

55 
	}
}

58 
	$dp_exp_ö°
(
∑ckë
 *
pkt
 
UNUSED
, 
oÊ_ö°ru˘i⁄_ex≥rimíãr
 *
ö°
) {

59 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryögÅÿexecuã unknow¿ex≥rimíã∏ö°ru˘i⁄ (%u).", 
ö°
->
ex≥rimíãr_id
);

60 
	}
}

62 
oÊ_îr


63 
	$dp_exp_°©s
(
d©≠©h
 *
dp
 
UNUSED
,

64 
oÊ_msg_mu…ù¨t_ªque°_ex≥rimíãr
 *
msg
,

65 c⁄° 
£ndî
 *£ndî 
UNUSED
) {

66 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryögÅÿh™dÀ unknow¿ex≥rimíã∏°©†(%u).", 
msg
->
ex≥rimíãr_id
);

67  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_EXPERIMENTER
);

68 
	}
}

71 
oÊ_îr


72 
	$dp_exp_mesßge
(
d©≠©h
 *
dp
,

73 
oÊ_msg_ex≥rimíãr
 *
msg
,

74 c⁄° 
£ndî
 *sender) {

76 
msg
->
ex≥rimíãr_id
) {

77 (
OPENFLOW_VENDOR_ID
): {

78 
oÊ_exp_›íÊow_msg_hódî
 *
exp
 = (oÊ_exp_›íÊow_msg_hódî *)
msg
;

80 
exp
->
ty≥
) {

81 (
OFP_EXT_QUEUE_MODIFY
): {

82  
	`dp_p‹ts_h™dÀ_queue_modify
(
dp
, (
oÊ_exp_›íÊow_msg_queue
 *)
msg
, 
£ndî
);

84 (
OFP_EXT_QUEUE_DELETE
): {

85  
	`dp_p‹ts_h™dÀ_queue_dñëe
(
dp
, (
oÊ_exp_›íÊow_msg_queue
 *)
msg
, 
£ndî
);

87 (
OFP_EXT_SET_DESC
): {

88  
	`dp_h™dÀ_£t_desc
(
dp
, (
oÊ_exp_›íÊow_msg_£t_dp_desc
 *)
msg
, 
£ndî
);

91 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryögÅÿh™dÀ unknow¿ex≥rimíã∏ty≥ (%u).", 
exp
->
ty≥
);

92  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_EXPERIMENTER
);

97  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_EXPERIMENTER
);

100 
	}
}

	@udatapath/dp_exp.h

32 #i‚de‡
DP_EXP_H


33 
	#DP_EXP_H
 1

	)

35 
	~"∑ckë.h
"

36 
	~"oÊib/oÊ-mesßges.h
"

38 
	gd©≠©h
;

39 
	g£ndî
;

47 
dp_exp_a˘i⁄
(
∑ckë
 *
pkt
, 
oÊ_a˘i⁄_ex≥rimíãr
 *
a˘
);

51 
dp_exp_ö°
(
∑ckë
 *
pkt
, 
oÊ_ö°ru˘i⁄_ex≥rimíãr
 *
ö°
);

54 
oÊ_îr


55 
dp_exp_°©s
(
d©≠©h
 *
dp
, 
oÊ_msg_mu…ù¨t_ªque°_ex≥rimíãr
 *
msg
,

56 c⁄° 
£ndî
 *sender);

59 
oÊ_îr


60 
dp_exp_mesßge
(
d©≠©h
 *
dp
,

61 
oÊ_msg_ex≥rimíãr
 *
msg
,

62 c⁄° 
£ndî
 *sender);

	@udatapath/dp_exp_bme.c

32 
	~<√töë/ö.h
>

33 
	~"∑ckë.h
"

34 
	~"›íÊow/›íÊow.h
"

35 
	~"›íÊow/bme-ext.h
"

36 
	~"pùñöe.h
"

37 
	~"oÊib/oÊ-a˘i⁄s.h
"

38 
	~"oÊib-exp/oÊ-exp-bme.h
"

39 
	~"dp_exp_bme.h
"

40 
	~"dp_a˘i⁄s.h
"

41 
	~"li°.h
"

42 
	~"vlog.h
"

44 
	#LOG_MODULE
 
VLM_dp_exp_bme


	)

45 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

47 
	#XOR_ENCODING_WAIT
 2000

	)

50 
	#PENDING_MAX_LENGTH
 1000

	)

52 
	#SQR
(
A
Ë((AË* (A))

	)

53 
	#LIST_POP_FRONT
(
A
Ë(
	`li°_p›_‰⁄t
((
li°
*)A))

	)

54 
	#LIST_IS_EMPTY
(
A
Ë(
	`li°_is_em±y
((
li°
*)A))

	)

56 
	s≥ndög_pkt
 {

57 
li°
 
	mnode
;

58 
∑ckë
 *
	mpkt
;

59 
uöt32_t
 
	m£q_no_01
;

60 
uöt32_t
 
	m£q_no_10
;

61 
uöt32_t
 
	mm∂s_âl
;

62 
uöt32_t
 
	mœbñ_a
, 
	mœbñ_b
;

63 
	mdódlöe
;

65 
	s≥ndög_Êows
 {

66 
li°
 
	mnode
;

67 
uöt32_t
 
	mÊow_œbñ
;

69 
li°
 
	míc_10
;

70 
li°
 
	míc_01
;

71 
li°
 
	mdec_ﬁd
;

72 
li°
 
	m£q
;

73 
	mÀngth
;

74 
li°
 
	mdec_√w
;

76 
uöt32_t
 
	mœ°_£q
;

79 
≥ndög_Êows
*

80 
	$gë_≥ndög_Êow
(
d©≠©h
 *
dp
, 
uöt32_t
 
Êow_œbñ
)

82 
≥ndög_Êows
 *
li°s
, *
membî
;

84 i‡(!
dp
->
exp_bme
) {

85 
li°s
 = 
	`xmÆloc
((
≥ndög_Êows
));

86 
dp
->
exp_bme
 = (*)
li°s
;

87 
	`li°_öô
((
li°
*)
li°s
);

89 
li°s
 = (
≥ndög_Êows
 *)
dp
->
exp_bme
;

92 
	`LIST_FOR_EACH
 (
membî
, 
≥ndög_Êows
, 
node
, (
li°
*)
li°s
) {

93 i‡(
membî
->
Êow_œbñ
 == flow_label)

94  
membî
;

97 
membî
 = 
	`xmÆloc
((
≥ndög_Êows
));

98 
membî
->
Êow_œbñ
 = flow_label;

99 
	`li°_öô
(&
membî
->
íc_10
);

100 
	`li°_öô
(&
membî
->
íc_01
);

101 
	`li°_öô
(&
membî
->
dec_ﬁd
);

102 
	`li°_öô
(&
membî
->
dec_√w
);

103 
	`li°_öô
(&
membî
->
£q
);

104 
membî
->
Àngth
 = 0;

105 
membî
->
œ°_£q
 = 0;

107 
	`li°_push_back
((
li°
*)
li°s
, (li°*)
membî
);

108  
membî
;

109 
	}
}

114 
	$XOR
(*
d°
, *
§c
, 
Àn
)

116  
Àn
 && ( (Ë
d°
 & 3) ) {

117 * 
d°
 ++ ^* 
§c
 ++;

118 
Àn
 --;

121  
Àn
 >= 4 ) {

122 * (*Ë
d°
 ^* (*Ë
§c
;

123 
d°
 += 4;

124 
§c
 += 4;

125 
Àn
 -= 4;

128  
Àn
 ) {

129 * 
d°
 ++ ^* 
§c
 ++;

130 
Àn
 --;

132 
	}
}

134 
ölöe
 
uöt32_t


135 
	$ö¸emít_m∂s_œbñ
(
uöt32_t
 
£q_no
)

137 c⁄° 
uöt32_t
 
MAX_MPLS_LABEL
 = ((1 << 20) - 1);

139 i‡(++
£q_no
 > 
MAX_MPLS_LABEL
) {

142  
£q_no
;

144 
	}
}

148 
ölöe
 

149 
	$cmp_m∂s_£q_numbîs
(
uöt32_t
 
a
, uöt32_à
b
)

151 c⁄° 
uöt32_t
 
lowî_limô
 = ((1 << 18) - 1);

152 c⁄° 
uöt32_t
 
uµî_limô
 = (3 << 18);

154 i‡(
a
 =
b
)

156 i‡(
a
 > 
uµî_limô
 && 
b
 < 
lowî_limô
)

158 i‡(
a
 < 
lowî_limô
 && 
b
 > 
uµî_limô
)

161  
a
 < 
b
? -1: 1;

162 
	}
}

164 
ölöe
 

165 
	$£t_m∂s_œbñ
(
∑ckë
 *
pkt
, 
uöt32_t
 
œbñ
)

167 
oÊ_a˘i⁄_£t_m∂s_œbñ
 
œbñ_a˘i⁄
;

169 
œbñ_a˘i⁄
.
hódî
.
ty≥
 = 
OFPAT_SET_MPLS_LABEL
;

170 
œbñ_a˘i⁄
.
m∂s_œbñ
 = 
œbñ
;

171 
	`dp_execuã_a˘i⁄
(
pkt
, (
oÊ_a˘i⁄_hódî
*Ë&
œbñ_a˘i⁄
);

172 
	}
}

175 
	$add_m∂s_œbñ
(
∑ckë
 *
pkt
, 
uöt32_t
 
œbñ
)

177 
oÊ_a˘i⁄_push
 
push_a˘i⁄
;

179 
push_a˘i⁄
.
hódî
.
ty≥
 = 
OFPAT_PUSH_MPLS
;

180 
push_a˘i⁄
.
ëhîty≥
 = 
ETH_TYPE_MPLS
;

181 
	`dp_execuã_a˘i⁄
(
pkt
, (
oÊ_a˘i⁄_hódî
*Ë&
push_a˘i⁄
);

183 
	`£t_m∂s_œbñ
(
pkt
, 
œbñ
);

184 
	}
}

187 
	$£t_m∂s_âl
(
∑ckë
 *
pkt
, 
uöt32_t
 
âl
)

189 
oÊ_a˘i⁄_m∂s_âl
 
âl_a˘i⁄
;

191 
âl_a˘i⁄
.
hódî
.
ty≥
 = 
OFPAT_SET_MPLS_TTL
;

192 
âl_a˘i⁄
.
m∂s_âl
 = (
uöt8_t
)
âl
;

193 
	`dp_execuã_a˘i⁄
(
pkt
, (
oÊ_a˘i⁄_hódî
*Ë&
âl_a˘i⁄
);

194 
	}
}

196 
ölöe
 

197 
	$p›_m∂s_hódî
(
∑ckë
 *
pkt
, 
uöt16_t
 
ëhîty≥
)

199 
oÊ_a˘i⁄_p›_m∂s
 
p›_a˘i⁄
;

201 
p›_a˘i⁄
.
hódî
.
ty≥
 = 
OFPAT_POP_MPLS
;

202 
p›_a˘i⁄
.
ëhîty≥
 =Éthertype;

203 
	`dp_execuã_a˘i⁄
(
pkt
, (
oÊ_a˘i⁄_hódî
*Ë&
p›_a˘i⁄
);

204 
	}
}

209 
	$ouçut_by_mëad©a
(
∑ckë
 *
pkt
)

211 
oÊ_a˘i⁄_ouçut
 
ouçut_a˘i⁄
;

215 
uöt64_t
 
mëad©a
 = 
pkt
->
h™dÀ_°d
->
m©ch
.metadata;

217 
uöt32_t
 
p‹t
 = (uöt32_tË
mëad©a
;

218 
uöt16_t
 
max_Àn
 = (uöt16_tË(
mëad©a
 >> 32);

220 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "BME_p‹à =\"0x%08"
PRIx32
"\"", 
p‹t
);

221 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "BME_out_max_Àn=\"0x%04"
PRIx16
"\"", 
max_Àn
);

223 
ouçut_a˘i⁄
.
hódî
.
ty≥
 = 
OFPAT_OUTPUT
;

224 
ouçut_a˘i⁄
.
p‹t
 =Öort;

225 
ouçut_a˘i⁄
.
max_Àn
 = max_len;

227 
	`dp_execuã_a˘i⁄
(
pkt
, (
oÊ_a˘i⁄_hódî
*Ë&
ouçut_a˘i⁄
);

228 
	}
}

373 
	$ø˚_m∂s_œbñ
(
∑ckë
 *
pkt
,

374 
oÊ_bme_£t_m∂s_œbñ
 *
a˘
 
UNUSED
)

376 
uöt32_t
 
cou¡î
 = 2;

377 
uöt32_t
 
∑ssM∂s
 = 1;

378 
uöt32_t
 
dr›M∂s
 = 0;

379 
uöt32_t
 
m∂s_fõld
;

380 
uöt32_t
 
Êow_œbñ
;

384 
pkt
 = 
	`∑ckë_¸óã
’kt->
dp
,Ökt->
ö_p‹t
, 
	`oÂbuf_˛⁄e
’kt->
buf„r
),

385 
pkt
->
∑ckë_out
);

388 
m∂s_fõld
 = 
	`¡ohl
(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
m∂s
->
fõlds
);

389 
Êow_œbñ
 = (
m∂s_fõld
 & 
MPLS_LABEL_MASK
Ë>> 
MPLS_LABEL_SHIFT
;

391 
	`VLOG_ERR_RL
(
LOG_MODULE
,&
æ
, "%"
PRIu32
" "

393 
Êow_œbñ
);

394 
	`VLOG_ERR_RL
(
LOG_MODULE
,&
æ
, "%"
PRIu32
" "

396 
cou¡î
);

397 *
pkt_°r
 = 
	`∑ckë_to_°rög
(
pkt
);

398 i‡(
	`cmp_m∂s_£q_numbîs
(
Êow_œbñ
 , 
cou¡î
) == -1){

400 
	`£t_m∂s_œbñ
(
pkt
, 
dr›M∂s
);

401 
	`VLOG_ERR_RL
(
LOG_MODULE
, &
æ
, "now dr›pögÖackë: %s", 
pkt_°r
);

412 
	`VLOG_ERR_RL
(
LOG_MODULE
, &
æ
, "nowÖassögÖackë: %s", 
pkt_°r
);

413 
cou¡î
 = 
	`ö¸emít_m∂s_œbñ
(counter);

416 
	}
}

418 
	$£t_m∂s_œbñ_‰om_cou¡î
(
∑ckë
 *
pkt
,

419 
oÊ_bme_£t_m∂s_œbñ
 *
a˘
 
UNUSED
)

421 
uöt32_t
 
cou¡î
 = 1;

425 
	`£t_m∂s_œbñ
(
pkt
, 
cou¡î
);

427 
cou¡î
 = 
	`ö¸emít_m∂s_œbñ
(counter);

429 
	}
}

457 
∑ckë
*

458 
	$ªmove_‰om_≥ndög
(
≥ndög_Êows
 *
∂
, 
≥ndög_pkt
* 
ñem
)

460 
∑ckë
 *
pkt
;

461 
≥ndög_pkt
 *
p
;

463 
p
 = (
≥ndög_pkt
 *)
	`li°_ªmove
((
li°
*)
ñem
);

464 
∂
->
Àngth
--;

465 
pkt
 = 
ñem
->pkt;

467  
pkt
;

468 
	}
}

471 
∑ckë
 *

472 
	$x‹_∑ckës
(
∑ckë
 *
pkt_1
, ∑ckë *
pkt_2
)

474 
x‹_Àn
;

476 i‡–
pkt_1
->
buf„r
->
size
 < 
pkt_2
->buffer->size ) {

477 
x‹_Àn
 = 
pkt_2
->
buf„r
->
size
;

478 
	`oÂbuf_put_zîos
–
pkt_1
->
buf„r
, 
x‹_Àn
 -Ökt_1->buf„r->
size
 );

480 
x‹_Àn
 = 
pkt_1
->
buf„r
->
size
;

482 
	`XOR
–
pkt_1
->
buf„r
->
d©a
, 
pkt_2
->buf„r->d©a, 
x‹_Àn
 );

483 
	`∑ckë_de°roy
–
pkt_2
 );

485  
pkt_1
;

486 
	}
}

488 
≥ndög_pkt
*

489 
	$föd_pkt_ö_dec_ﬁd
(
≥ndög_Êows
 *
∂
, 
≥ndög_pkt
* 
p_√w
)

493 
≥ndög_pkt
 *
p_ﬁd
, *
≤
;

495 
	`LIST_FOR_EACH_SAFE
 (
p_ﬁd
, 
≤
, 
≥ndög_pkt
, 
node
, &
∂
->
dec_ﬁd
) {

496 
uöt32_t
 
n01
 = 
p_√w
->
£q_no_01
;

497 
uöt32_t
 
n10
 = 
p_√w
->
£q_no_10
;

498 
uöt32_t
 
o01
 = 
p_ﬁd
->
£q_no_01
;

499 
uöt32_t
 
o10
 = 
p_ﬁd
->
£q_no_10
;

501 i‡((
n01
 =0 || 
o01
 == 0 || o01 ==Ç01) &&

502 (
n10
 =0 || 
o10
 == 0 || o10 ==Ç10) &&

503 ((
n01
 && 
n10
Ë|| ((
o01
 && 
o10
))))

505  
p_ﬁd
;

508  
NULL
;

509 
	}
}

512 
	$¥o˚ss_decodög_queues
(
≥ndög_Êows
 *
∂
)

514 
≥ndög_pkt
 *
p_√w
, *
p_ﬁd
;

515 
∑ckë
 *
pkt_ﬁd
, *
pkt_√w
;

516 
uöt32_t
 
£q_no_01
, 
£q_no_10
, 
Êow_œbñ
;

518 !
	`LIST_IS_EMPTY
(&
∂
->
dec_√w
)) {

519 
p_√w
 = (
≥ndög_pkt
*)
	`LIST_POP_FRONT
(&
∂
->
dec_√w
);

520 
p_ﬁd
 = 
	`föd_pkt_ö_dec_ﬁd
(
∂
, 
p_√w
);

521 i‡(
p_ﬁd
) {

522 
	`ªmove_‰om_≥ndög
(
∂
, 
p_ﬁd
);

523 
pkt_√w
 = 
p_√w
->
pkt
;

524 
pkt_ﬁd
 = 
p_ﬁd
->
pkt
;

525 
pkt_√w
 = 
	`x‹_∑ckës
’kt_√w, 
pkt_ﬁd
);

527 
£q_no_01
 = 
p_ﬁd
->£q_no_01 ^ 
p_√w
->seq_no_01;

528 
£q_no_10
 = 
p_ﬁd
->£q_no_10 ^ 
p_√w
->seq_no_10;

529 
Êow_œbñ
 = 
£q_no_10
? 
p_ﬁd
->
œbñ_a
:Ö_ﬁd->
œbñ_b
;

530 
	`add_m∂s_œbñ
(
pkt_√w
, 
£q_no_01
);

531 
	`add_m∂s_œbñ
(
pkt_√w
, 
£q_no_10
);

532 
	`add_m∂s_œbñ
(
pkt_√w
, 
Êow_œbñ
);

533 
	`£t_m∂s_âl
(
pkt_√w
, 
p_√w
->
m∂s_âl
);

535 
	`‰ì
(
p_√w
);

536 
	`‰ì
(
p_ﬁd
);

538 
	`pùñöe_¥o˚ss_∑ckë
(
pkt_√w
->
dp
->
pùñöe
,Ökt_new);

540 
	`li°_push_back
(&
∂
->
dec_ﬁd
, (
li°
*)
p_√w
);

541 i‡(++(
∂
->
Àngth
Ë> 
PENDING_MAX_LENGTH
) {

542 
p_ﬁd
 = (
≥ndög_pkt
*)
	`LIST_POP_FRONT
(&
∂
->
dec_ﬁd
);

543 
	`∑ckë_de°roy
(
p_ﬁd
->
pkt
);

544 
	`‰ì
(
p_ﬁd
);

545 
∂
->
Àngth
 --;

549 
	}
}

552 
	$¥o˚ss_ícodög_queues
(
≥ndög_Êows
 *
∂
)

554 
≥ndög_pkt
 *
p_01
, *
≤
, *
p_10
;

555 
now
 = 
	`time_m£c
();

556 
∑ckë
 *
pkt_01
, *
pkt_10
, *
pkt_11
;

558 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Now PROCESS_ENCODING_QUEUES ...");

560 
	`LIST_FOR_EACH_SAFE
 (
p_01
, 
≤
, 
≥ndög_pkt
, 
node
, &
∂
->
íc_01
) {

561 i‡(
	`LIST_IS_EMPTY
(&
∂
->
íc_10
)) {

562 i‡((
now
 > 
p_01
->
dódlöe
) ||

563 (
∂
->
Àngth
 > 
PENDING_MAX_LENGTH
))

565 
pkt_01
 = 
	`ªmove_‰om_≥ndög
(
∂
, 
p_01
);

566 
	`add_m∂s_œbñ
(
pkt_01
, 
p_01
->
£q_no_01
);

567 
	`add_m∂s_œbñ
(
pkt_01
, 0);

568 
	`add_m∂s_œbñ
(
pkt_01
, 
p_01
->
œbñ_b
);

569 
	`£t_m∂s_âl
(
pkt_01
, 
p_01
->
m∂s_âl
);

570 
	`‰ì
(
p_01
);

572 
	`pùñöe_¥o˚ss_∑ckë
(
pkt_01
->
dp
->
pùñöe
,Ökt_01);

575  (
p_01
->
dódlöe
 - 
now
);

578 
p_10
 = (
≥ndög_pkt
*)
	`li°_‰⁄t
(&
∂
->
íc_10
);

579 
pkt_01
 = 
	`ªmove_‰om_≥ndög
(
∂
, 
p_01
);

580 
pkt_10
 = 
	`ªmove_‰om_≥ndög
(
∂
, 
p_10
);

582 
pkt_11
 = 
	`x‹_∑ckës
(
pkt_01
, 
pkt_10
);

584 
	`add_m∂s_œbñ
(
pkt_11
, 
p_01
->
£q_no_01
);

585 
	`add_m∂s_œbñ
(
pkt_11
, 
p_10
->
£q_no_10
);

586 
	`add_m∂s_œbñ
(
pkt_11
, 
p_01
->
œbñ_a
);

587 
	`£t_m∂s_âl
(
pkt_11
, 
p_01
->
m∂s_âl
);

588 
	`‰ì
(
p_01
);

589 
	`‰ì
(
p_10
);

591 
	`pùñöe_¥o˚ss_∑ckë
(
pkt_11
->
dp
->
pùñöe
,Ökt_11);

593 
	`LIST_FOR_EACH_SAFE
 (
p_10
, 
≤
, 
≥ndög_pkt
, 
node
, &
∂
->
íc_10
) {

594 i‡((
now
 > 
p_10
->
dódlöe
) ||

595 (
∂
->
Àngth
 > 
PENDING_MAX_LENGTH
))

597 
pkt_10
 = 
	`ªmove_‰om_≥ndög
(
∂
, 
p_10
);

598 
	`add_m∂s_œbñ
(
pkt_10
, 0);

599 
	`add_m∂s_œbñ
(
pkt_10
, 
p_10
->
£q_no_10
);

600 
	`add_m∂s_œbñ
(
pkt_10
, 
p_10
->
œbñ_b
);

601 
	`£t_m∂s_âl
(
pkt_10
, 
p_10
->
m∂s_âl
);

602 
	`‰ì
(
p_10
);

604 
	`pùñöe_¥o˚ss_∑ckë
(
pkt_10
->
dp
->
pùñöe
,Ökt_10);

607  (
p_10
->
dódlöe
 - 
now
);

611 
	}
}

614 
	$¥o˚ss_£q_queue
(
≥ndög_Êows
 *
∂
)

616 
≥ndög_pkt
 *
p
;

617 
∑ckë
 *
pkt
;

618 
now
 = 
	`time_m£c
();

620 !
	`LIST_IS_EMPTY
(&
∂
->
£q
)) {

621 
p
 = (
≥ndög_pkt
*)
	`li°_‰⁄t
(&
∂
->
£q
);

625 i‡(
	`cmp_m∂s_£q_numbîs
(
p
->
£q_no_10
, 
∂
->
œ°_£q
) < 0) {

626 
p
 = (
≥ndög_pkt
*)
	`LIST_POP_FRONT
(&
∂
->
£q
);

627 
	`∑ckë_de°roy
(
p
->
pkt
);

628 
	`‰ì
(
p
);

629 
∂
->
Àngth
 --;

631 } i‡((
now
 > 
p
->
dódlöe
) ||

632 (
∂
->
Àngth
 > 
PENDING_MAX_LENGTH
) ||

633 (
p
->
£q_no_10
 =
	`ö¸emít_m∂s_œbñ
(
∂
->
œ°_£q
)))

635 
∂
->
œ°_£q
 = 
p
->
£q_no_10
;

637 
pkt
 = 
	`ªmove_‰om_≥ndög
(
∂
, 
p
);

638 
	`add_m∂s_œbñ
(
pkt
, 
p
->
œbñ_a
);

639 
	`£t_m∂s_âl
(
pkt
, 
p
->
m∂s_âl
);

640 
	`‰ì
(
p
);

642 
	`pùñöe_¥o˚ss_∑ckë
(
pkt
->
dp
->
pùñöe
,Ökt);

645  (
p
->
dódlöe
 - 
now
);

649 
	}
}

652 
	$dp_exp_bme_¥o˚ss_≥ndög
(
d©≠©h
 *
dp
)

654 
≥ndög_Êows
 *
p
, *
≤
;

655 
ªt
 = -1;

656 
li°
 *
l
 = (li° *)
dp
->
exp_bme
;

658 i‡(!
l
)

661 
	`LIST_FOR_EACH_SAFE
 (
p
, 
≤
, 
≥ndög_Êows
, 
node
, 
l
) {

662 
r1
;

664 
	`¥o˚ss_decodög_queues
(
p
);

665 
r1
 = 
	`¥o˚ss_ícodög_queues
(
p
);

666 i‡(
r1
>0)

667 
ªt
 = 
	`MIN
‘ë, 
r1
);

668 
r1
 = 
	`¥o˚ss_£q_queue
(
p
);

669 i‡(
r1
>0)

670 
ªt
 = 
	`MIN
‘ë, 
r1
);

673  
ªt
;

674 
	}
}

684 
	$x‹_∑ckë_‰om_queue
(
∑ckë
 *
pkt0
,

685 
oÊ_bme_x‹_∑ckë
 *
a˘i⁄
)

688 
oÊ_bme_x‹_∑ckë
 *
bme_a˘
 =

689 (
oÊ_bme_x‹_∑ckë
 *)
a˘i⁄
;

690 
uöt32_t
 
Êow_œbñ
, 
Êow_âl
, 
£q_10
, 
£q_01
;

691 
uöt32_t
 
m∂s_fõld
;

692 
≥ndög_pkt
 *
≥ndög
;

693 
≥ndög_Êows
 *
∂
;

694 
∑ckë
 *
pkt
;

697 
pkt
 = 
	`∑ckë_¸óã
(
pkt0
->
dp
,Ökt0->
ö_p‹t
, 
	`oÂbuf_˛⁄e
’kt0->
buf„r
),

698 
pkt0
->
∑ckë_out
);

701 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

702 
m∂s_fõld
 = 
	`¡ohl
(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
m∂s
->
fõlds
);

703 
Êow_œbñ
 = (
m∂s_fõld
 & 
MPLS_LABEL_MASK
Ë>> 
MPLS_LABEL_SHIFT
;

704 
Êow_âl
 = (
m∂s_fõld
 & 
MPLS_TTL_MASK
Ë>> 
MPLS_TTL_SHIFT
;

705 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "Êow_œbñ=\"0x%08"
PRIx32
"\"", 
Êow_œbñ
);

707 
	`p›_m∂s_hódî
(
pkt
, 
ETH_TYPE_MPLS
);

708 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

711 
m∂s_fõld
 = 
	`¡ohl
(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
m∂s
->
fõlds
);

712 
£q_10
 = (
m∂s_fõld
 & 
MPLS_LABEL_MASK
Ë>> 
MPLS_LABEL_SHIFT
;

713 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "£q_10 =\"0x%08"
PRIx32
"\"", 
£q_10
);

715 
	`p›_m∂s_hódî
(
pkt
, 
ETH_TYPE_MPLS
);

716 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

719 
m∂s_fõld
 = 
	`¡ohl
(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
m∂s
->
fõlds
);

720 
£q_01
 = (
m∂s_fõld
 & 
MPLS_LABEL_MASK
Ë>> 
MPLS_LABEL_SHIFT
;

721 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "£q_01 =\"0x%08"
PRIx32
"\"", 
£q_01
);

723 
	`p›_m∂s_hódî
(
pkt
, 
ETH_TYPE_IP
);

724 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

728 i‡((
£q_10
 =0 && 
£q_01
 == 0) ||

729 (
£q_10
 !0 && 
£q_01
 != 0))

731 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "cannotÉncodeÖkt (seq_10, seq_01 :"

732 "\"0x%08"
PRIx32
"\", \"0x%08"PRIx32"\")",

733 
£q_10
, 
£q_01
);

734 
	`∑ckë_de°roy
(
pkt
);

740 
∂
 = 
	`gë_≥ndög_Êow
(
pkt
->
dp
, 
Êow_œbñ
);

741 
≥ndög
 = 
	`xmÆloc
((
≥ndög_pkt
));

742 
≥ndög
->
pkt
 =Ökt;

743 
≥ndög
->
œbñ_a
 = 
bme_a˘
->label_a;

744 
≥ndög
->
œbñ_b
 = 
bme_a˘
->label_b;

745 
≥ndög
->
dódlöe
 = 
	`time_m£c
(Ë+ 
XOR_ENCODING_WAIT
;

746 
≥ndög
->
m∂s_âl
 = 
Êow_âl
;

747 
≥ndög
->
£q_no_10
 = 
£q_10
;

748 
≥ndög
->
£q_no_01
 = 
£q_01
;

750 
∂
->
Àngth
++;

751 i‡(
£q_10
) {

752 
	`li°_push_back
(&
∂
->
íc_10
, (
li°
*)
≥ndög
);

754 
	`li°_push_back
(&
∂
->
íc_01
, (
li°
*)
≥ndög
);

760 
	}
}

771 
	$£rülize
(
∑ckë
 *
pkt0
, 
oÊ_bme_£rülize
 *
a˘i⁄
)

773 
uöt32_t
 
Êow_œbñ
, 
Êow_âl
, 
£q_10
;

774 
uöt32_t
 
m∂s_fõld
;

775 
≥ndög_pkt
 *
≥ndög
, *
p
, *
≤
;

776 
≥ndög_Êows
 *
∂
;

777 
∑ckë
 *
pkt
;

780 
pkt
 = 
	`∑ckë_¸óã
(
pkt0
->
dp
,Ökt0->
ö_p‹t
, 
	`oÂbuf_˛⁄e
’kt0->
buf„r
),

781 
pkt0
->
∑ckë_out
);

784 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

785 
m∂s_fõld
 = 
	`¡ohl
(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
m∂s
->
fõlds
);

786 
Êow_œbñ
 = (
m∂s_fõld
 & 
MPLS_LABEL_MASK
Ë>> 
MPLS_LABEL_SHIFT
;

787 
Êow_âl
 = (
m∂s_fõld
 & 
MPLS_TTL_MASK
Ë>> 
MPLS_TTL_SHIFT
;

788 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "Êow_œbñ=\"0x%08"
PRIx32
"\"", 
Êow_œbñ
);

790 
	`p›_m∂s_hódî
(
pkt
, 
ETH_TYPE_MPLS
);

791 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

794 
m∂s_fõld
 = 
	`¡ohl
(
pkt
->
h™dÀ_°d
->
¥Ÿo
->
m∂s
->
fõlds
);

795 
£q_10
 = (
m∂s_fõld
 & 
MPLS_LABEL_MASK
Ë>> 
MPLS_LABEL_SHIFT
;

796 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "£q_10 =\"0x%08"
PRIx32
"\"", 
£q_10
);

798 
	`p›_m∂s_hódî
(
pkt
, 
ETH_TYPE_IP
);

799 
	`∑ckë_h™dÀ_°d_vÆid©e
(
pkt
->
h™dÀ_°d
);

801 
∂
 = 
	`gë_≥ndög_Êow
(
pkt
->
dp
, 
Êow_œbñ
);

802 
≥ndög
 = 
	`xmÆloc
((
≥ndög_pkt
));

803 
≥ndög
->
pkt
 =Ökt;

804 
≥ndög
->
œbñ_a
 = 
a˘i⁄
->
m∂s_œbñ
;

805 
≥ndög
->
dódlöe
 = 
	`time_m£c
(Ë+ 
a˘i⁄
->
timeout
;

806 
≥ndög
->
m∂s_âl
 = 
Êow_âl
;

807 
≥ndög
->
£q_no_10
 = 
£q_10
;

808 
≥ndög
->
£q_no_01
 = 0;

811 
	`LIST_FOR_EACH_SAFE
 (
p
, 
≤
, 
≥ndög_pkt
, 
node
, &
∂
->
£q
) {

812 i‡(
	`cmp_m∂s_£q_numbîs
(
p
->
£q_no_10
, 
£q_10
) > 0) {

813 
	`li°_ö£π
((
li°
*)
p
, (li°*)
≥ndög
);

817 
	`li°_push_back
((
li°
*)&
∂
->
£q
, (li°*)
≥ndög
);

818 
	}
}

821 
	$gë_co‹dö©es
(
uöt64_t
 
addr
, *
x
, *
y
)

823 c⁄° 
uöt64_t
 
mask
 = 0x0000000000FFFFFFULL;

825 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


829 
addr
 = 
	`__buûtö_bsw≠64
(addr);

832 *
x
 = 
addr
 & 
mask
;

833 *
y
 = (
addr
 >> (3 * 8)Ë& 
mask
;

834 
	}
}

876 
	$dp_exp_bme_a˘i⁄
(
∑ckë
 *
pkt
, 
oÊ_a˘i⁄_ex≥rimíãr
 *
a˘
)

879 
oÊ_bme_a˘i⁄_hódî
 *
exp
 =

880 (
oÊ_bme_a˘i⁄_hódî
 *)
a˘
;

882 
exp
->
ty≥
) {

883 
BME_OUTPUT_BY_METADATA
:

884 
	`ouçut_by_mëad©a
–
pkt
 );

886 
BME_SET_METADATA_FROM_PACKET
:

889 
BME_RACE_MPLS_LABEL
:

890 
	`ø˚_m∂s_œbñ
–
pkt
,

891 (
oÊ_bme_£t_m∂s_œbñ
 *Ë
exp
 );

893 
BME_SET_MPLS_LABEL_FROM_COUNTER
:

894 
	`£t_m∂s_œbñ_‰om_cou¡î
–
pkt
,

895 (
oÊ_bme_£t_m∂s_œbñ
 *Ë
exp
 );

897 
BME_XOR_DECODE
:

898 
BME_XOR_ENCODE
:

902 
BME_UPDATE_DISTANCE_IN_METADATA
:

906 
BME_SET_METADATA_FROM_COUNTER
: {

907 
oÊ_bme_£t_mëad©a_‰om_cou¡î
 
	toÊ_t
;

911 
BME_SET_FIELD_FROM_METADATA
: {

915 
BME_SERIALIZE
: {

916 
	`£rülize
–
pkt
, (
oÊ_bme_£rülize
 *Ë
exp
 );

920 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
,

922 
exp
->
ty≥
);

925 
	}
}

	@udatapath/dp_exp_bme.h

33 
dp_exp_bme_a˘i⁄
(
∑ckë
 *
pkt
, 
oÊ_a˘i⁄_ex≥rimíãr
 *
a˘
);

36 
dp_exp_bme_¥o˚ss_≥ndög
(
d©≠©h
 *
dp
);

	@udatapath/dp_ports.c

40 
	~<¨∑/öë.h
>

41 
	~<as£π.h
>

42 
	~<î∫o.h
>

43 
	~<öây≥s.h
>

44 
	~"dp_exp.h
"

45 
	~"dp_p‹ts.h
"

46 
	~"d©≠©h.h
"

47 
	~"∑ckës.h
"

48 
	~"pùñöe.h
"

49 
	~"oÊib/oÊ.h
"

50 
	~"oÊib/oÊ-mesßges.h
"

51 
	~"oÊib-exp/oÊ-exp-›íÊow.h
"

52 
	~"oÊib/oÊ-log.h
"

53 
	~"utû.h
"

55 
	~"vlog.h
"

56 
	#LOG_MODULE
 
VLM_dp_p‹ts


	)

58 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

60 #i‡
deföed
(
OF_HW_PLAT
)

61 
	~<›íÊow/of_hw_≠i.h
>

62 
	~<±hªad.h
>

66 #i‡
deföed
(
OF_HW_PLAT
Ë&& !deföed(
USE_NETDEV
)

69 
±hªad_muãx_t
 
	gpkt_q_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

70 
	#PKT_Q_LOCK
 
	`±hªad_muãx_lock
(&
pkt_q_muãx
)

	)

71 
	#PKT_Q_UNLOCK
 
	`±hªad_muãx_u∆ock
(&
pkt_q_muãx
)

	)

74 
	$íqueue_pkt
(
d©≠©h
 *
dp
, 
oÂbuf
 *
buf„r
, 
of_p‹t_t
 
p‹t_no
,

75 
ªas⁄
)

77 
hw_pkt_q_íåy
 *
q_íåy
;

79 i‡((
q_íåy
 = 
	`xmÆloc
((*q_íåy))Ë=
NULL
) {

80 
	`VLOG_WARN
(
LOG_MODULE
, "CouldÇotálloc qÉntry\n");

84 
q_íåy
->
buf„r
 = buffer;

85 
q_íåy
->
√xt
 = 
NULL
;

86 
q_íåy
->
p‹t_no
 =Öort_no;

87 
q_íåy
->
ªas⁄
 =Ñeason;

88 
	`±hªad_muãx_lock
(&
pkt_q_muãx
);

89 i‡(
dp
->
hw_pkt_li°_hód
 =
NULL
) {

90 
dp
->
hw_pkt_li°_hód
 = 
q_íåy
;

92 
dp
->
hw_pkt_li°_èû
->
√xt
 = 
q_íåy
;

94 
dp
->
hw_pkt_li°_èû
 = 
q_íåy
;

95 
	`±hªad_muãx_u∆ock
(&
pkt_q_muãx
);

96 
	}
}

100 
	$dequeue_pkt
(
d©≠©h
 *
dp
, 
oÂbuf
 **
buf„r
, 
of_p‹t_t
 *
p‹t_no
,

101 *
ªas⁄
)

103 
hw_pkt_q_íåy
 *
q_íåy
;

104 
rv
 = 0;

106 
	`±hªad_muãx_lock
(&
pkt_q_muãx
);

107 
q_íåy
 = 
dp
->
hw_pkt_li°_hód
;

108 i‡(
dp
->
hw_pkt_li°_hód
 !
NULL
) {

109 
dp
->
hw_pkt_li°_hód
 = dp->hw_pkt_li°_hód->
√xt
;

110 i‡(
dp
->
hw_pkt_li°_hód
 =
NULL
) {

111 
dp
->
hw_pkt_li°_èû
 = 
NULL
;

114 
	`±hªad_muãx_u∆ock
(&
pkt_q_muãx
);

116 i‡(
q_íåy
 !
NULL
) {

117 
rv
 = 1;

118 *
buf„r
 = 
q_íåy
->buffer;

119 *
p‹t_no
 = 
q_íåy
->port_no;

120 *
ªas⁄
 = 
q_íåy
->reason;

121 
	`‰ì
(
q_íåy
);

124  
rv
;

125 
	}
}

130 #i‡
deföed
(
OF_HW_PLAT
Ë&& !deföed(
USE_NETDEV
Ë&& deföed(
UDATAPATH_AS_LIB
)

139 
	$hw_∑ckë_ö
(
of_p‹t_t
 
p‹t_no
, 
of_∑ckë_t
 *
∑ckë
, 
ªas⁄
,

140 *
cookõ
)

142 
sw_p‹t
 *
p‹t
;

143 
oÂbuf
 *
buf„r
 = 
NULL
;

144 
d©≠©h
 *
dp
 = (d©≠©h *)
cookõ
;

145 c⁄° 
hódroom
 = 128 + 2;

146 c⁄° 
h¨d_hódî
 = 
VLAN_ETH_HEADER_LEN
;

147 c⁄° 
èû_room
 = (
uöt32_t
);

149 
	`VLOG_INFO
(
LOG_MODULE
, "dpÑcvÖacket onÖort %d, size %d\n",

150 
p‹t_no
, 
∑ckë
->
Àngth
);

151 i‡((
p‹t_no
 < 1Ë||Ö‹t_nÿ> 
DP_MAX_PORTS
) {

152 
	`VLOG_ERR
(
LOG_MODULE
, "BadÑe˚ivêp‹à%d\n", 
p‹t_no
);

156 
p‹t
 = &
dp
->
p‹ts
[
p‹t_no
];

157 i‡(!
	`PORT_IN_USE
(
p‹t
)) {

158 
	`VLOG_WARN
(
LOG_MODULE
, "Re˚ivêp‹ànŸá˘ive: %d\n", 
p‹t_no
);

161 i‡(!
	`IS_HW_PORT
(
p‹t
)) {

162 
	`VLOG_ERR
(
LOG_MODULE
, "Re˚ivêp‹ànŸ c⁄åﬁÀd by HW: %d\n", 
p‹t_no
);

167 
p‹t
->
rx_∑ckës
++;

168 
p‹t
->
rx_byãs
 +
∑ckë
->
Àngth
;

172 
buf„r
 = 
	`oÂbuf_√w
(
hódroom
 + 
h¨d_hódî
 + 
∑ckë
->
Àngth
 + 
èû_room
);

173 i‡(
buf„r
 =
NULL
) {

174 
	`VLOG_WARN
(
LOG_MODULE
, "CouldÇotálloc ofpbuf on hwÖkt in\n");

175 
	`Ârötf
(
°dîr
, "CouldÇotálloc ofpbuf on hwÖkt in\n");

177 
buf„r
->
d©a
 = (*)buf„r->d©®+ 
hódroom
;

178 
buf„r
->
size
 = 
∑ckë
->
Àngth
;

179 
	`mem˝y
(
buf„r
->
d©a
, 
∑ckë
->d©a,Öackë->
Àngth
);

180 
	`íqueue_pkt
(
dp
, 
buf„r
, 
p‹t_no
, 
ªas⁄
);

181 
	`pﬁl_immedüã_wake
();

185 
	}
}

188 #i‡
deföed
(
OF_HW_PLAT
)

190 
	$dp_hw_drv_öô
(
d©≠©h
 *
dp
)

192 
dp
->
hw_pkt_li°_hód
 = 
NULL
;

193 
dp
->
hw_pkt_li°_èû
 = 
NULL
;

195 
dp
->
hw_drv
 = 
	`√w_of_hw_drivî
(dp);

196 i‡(
dp
->
hw_drv
 =
NULL
) {

197 
	`VLOG_ERR
(
LOG_MODULE
, "CouldÇot create HW driver");

200 #i‡!
	`deföed
(
USE_NETDEV
)

201 i‡(
dp
->
hw_drv
->
	`∑ckë_ª˚ive_ªgi°î
(dp->hw_drv,

202 
hw_∑ckë_ö
, 
dp
) < 0) {

203 
	`VLOG_ERR
(
LOG_MODULE
, "CouldÇotÑegister with HW driverÅoÑeceiveÖkts");

208 
	}
}

215 
	$¥o˚ss_buf„r
(
d©≠©h
 *
dp
, 
sw_p‹t
 *
p
, 
oÂbuf
 *
buf„r
) {

216 
∑ckë
 *
pkt
;

218 i‡(
p
->
c⁄f
->
c⁄fig
 & ((
OFPPC_NO_RECV
 | 
OFPPC_PORT_DOWN
) != 0)) {

219 
	`oÂbuf_dñëe
(
buf„r
);

224 
pkt
 = 
	`∑ckë_¸óã
(
dp
, 
p
->
°©s
->
p‹t_no
, 
buf„r
, 
Ál£
);

225 
	`pùñöe_¥o˚ss_∑ckë
(
dp
->
pùñöe
, 
pkt
);

226 
	}
}

229 
	$dp_p‹ts_run
(
d©≠©h
 *
dp
) {

231 
oÂbuf
 *
buf„r
 = 
NULL
;

233 
sw_p‹t
 *
p
, *
≤
;

235 #i‡
	`deföed
(
OF_HW_PLAT
Ë&& !deföed(
USE_NETDEV
)

237 
oÂbuf
 *
buf„r
;

238 
of_p‹t_t
 
p‹t_no
;

239 
ªas⁄
;

240 
sw_p‹t
 *
p
;

242 
	`dequeue_pkt
(
dp
, &
buf„r
, &
p‹t_no
, &
ªas⁄
)) {

243 
p
 = 
	`dp_p‹ts_lookup
(
dp
, 
p‹t_no
);

245 
	`¥o˚ss_∑ckë
(
dp
, 
p
, 
buf„r
);

250 
	`LIST_FOR_EACH_SAFE
 (
p
, 
≤
, 
sw_p‹t
, 
node
, &
dp
->
p‹t_li°
) {

251 
îr‹
;

253 i‡(
	`IS_HW_PORT
(
p
)) {

256 i‡(
buf„r
 =
NULL
) {

260 c⁄° 
hódroom
 = 128 + 2;

261 c⁄° 
h¨d_hódî
 = 
VLAN_ETH_HEADER_LEN
;

262 c⁄° 
mtu
 = 
	`√tdev_gë_mtu
(
p
->
√tdev
);

263 
buf„r
 = 
	`oÂbuf_√w_wôh_hódroom
(
h¨d_hódî
 + 
mtu
, 
hódroom
);

265 
îr‹
 = 
	`√tdev_ªcv
(
p
->
√tdev
, 
buf„r
);

266 i‡(
îr‹
 =
ENETDOWN
){

267 
	`VLOG_ERR
(
LOG_MODULE
, "N√£oÅenhoÇada masÅ√¥áqui...");

269 i‡(!
îr‹
) {

270 
p
->
°©s
->
rx_∑ckës
++;

271 
p
->
°©s
->
rx_byãs
 +
buf„r
->
size
;

273 
	`¥o˚ss_buf„r
(
dp
, 
p
, 
buf„r
);

274 
buf„r
 = 
NULL
;

275 } i‡(
îr‹
 !
EAGAIN
) {

276 if(
îr‹
 =
ENETDOWN
){

277 
p
->
c⁄f
->
°©e
 = 
OFPPS_LINK_DOWN
;

279 
	`VLOG_ERR_RL
(
LOG_MODULE
, &
æ
, "errorÑeceiving data from %s: %s",

280 
	`√tdev_gë_«me
(
p
->
√tdev
), 
	`°ªº‹
(
îr‹
));

283 
	`pﬁl_timî_waô_de¸ó£
–
	`dp_exp_bme_¥o˚ss_≥ndög
(
dp
) );

284 
	}
}

287 
uöt32_t
 
	$p‹t_•ìd
(
uöt32_t
 
c⁄f
) {

288 i‡((
c⁄f
 & 
OFPPF_1TB_FD
) != 0)  1024 * 1024 * 1024;

289 i‡((
c⁄f
 & 
OFPPF_100GB_FD
) != 0)  100 * 1024 * 1024;

290 i‡((
c⁄f
 & 
OFPPF_40GB_FD
) != 0)  40 * 1024 * 1024;

291 i‡((
c⁄f
 & 
OFPPF_10GB_FD
) != 0)  10 * 1024 * 1024;

292 i‡((
c⁄f
 & 
OFPPF_1GB_FD
) != 0)  1024 * 1024;

293 i‡((
c⁄f
 & 
OFPPF_1GB_HD
) != 0)  1024 * 1024;

294 i‡((
c⁄f
 & 
OFPPF_100MB_FD
) != 0)  100 * 1024;

295 i‡((
c⁄f
 & 
OFPPF_100MB_HD
) != 0)  100 * 1024;

296 i‡((
c⁄f
 & 
OFPPF_10MB_FD
) != 0)  10 * 1024;

297 i‡((
c⁄f
 & 
OFPPF_10MB_HD
) != 0)  10 * 1024;

300 
	}
}

304 
	$√w_p‹t
(
d©≠©h
 *
dp
, 
sw_p‹t
 *
p‹t
, 
uöt32_t
 
p‹t_no
,

305 c⁄° *
√tdev_«me
, c⁄° 
uöt8_t
 *
√w_mac
, 
uöt32_t
 
max_queues
)

307 
√tdev
 *netdev;

308 
ö6_addr
 
ö6
;

309 
ö_addr
 
ö4
;

310 
îr‹
;

311 
uöt64_t
 
now
;

313 
now
 = 
	`time_m£c
();

315 
max_queues
 = 
	`MIN
(max_queues, 
NETDEV_MAX_QUEUES
);

317 
îr‹
 = 
	`√tdev_›í
(
√tdev_«me
, 
NETDEV_ETH_TYPE_ANY
, &
√tdev
);

318 i‡(
îr‹
) {

319  
îr‹
;

321 i‡(
√w_mac
 && !
	`ëh_addr_equÆs
(
	`√tdev_gë_ëhîaddr
(
√tdev
),Çew_mac)) {

325 
	`√tdev_£t_Êags
(
√tdev
, 0, 
Ál£
);

326 
îr‹
 = 
	`√tdev_£t_ëhîaddr
(
√tdev
, 
√w_mac
);

327 i‡(
îr‹
) {

328 
	`VLOG_WARN
(
LOG_MODULE
, "failedÅo change %s Ethernetáddress "

329 "tÿ"
ETH_ADDR_FMT
": %s",

330 
√tdev_«me
, 
	`ETH_ADDR_ARGS
(
√w_mac
), 
	`°ªº‹
(
îr‹
));

333 
îr‹
 = 
	`√tdev_£t_Êags
(
√tdev
, 
NETDEV_UP
 | 
NETDEV_PROMISC
, 
Ál£
);

334 i‡(
îr‹
) {

335 
	`VLOG_ERR
(
LOG_MODULE
, "ÁûedÅÿ£à¥omiscuou†modê⁄ %†devi˚", 
√tdev_«me
);

336 
	`√tdev_˛o£
(
√tdev
);

337  
îr‹
;

339 i‡(
	`√tdev_gë_ö4
(
√tdev
, &
ö4
)) {

340 
	`VLOG_ERR
(
LOG_MODULE
, "%s device hasássigned IPáddress %s",

341 
√tdev_«me
, 
	`öë_¡ﬂ
(
ö4
));

343 i‡(
	`√tdev_gë_ö6
(
√tdev
, &
ö6
)) {

344 
ö6_«me
[
INET6_ADDRSTRLEN
 + 1];

345 
	`öë_¡›
(
AF_INET6
, &
ö6
, 
ö6_«me
,  in6_name);

346 
	`VLOG_ERR
(
LOG_MODULE
, "%s device hasássigned IPv6áddress %s",

347 
√tdev_«me
, 
ö6_«me
);

350 i‡(
max_queues
 > 0) {

351 
îr‹
 = 
	`√tdev_£tup_¶icög
(
√tdev
, 
max_queues
);

352 i‡(
îr‹
) {

353 
	`VLOG_ERR
(
LOG_MODULE
, "failedÅo configure slicing on %s device: "\

356 
√tdev_«me
);

357 
	`√tdev_˛o£
(
√tdev
);

358  
îr‹
;

363 
	`mem£t
(
p‹t
, '\0',  *port);

365 
p‹t
->
dp
 = dp;

367 
p‹t
->
c⁄f
 = 
	`xmÆloc
((
oÊ_p‹t
));

368 
p‹t
->
c⁄f
->
p‹t_no
 =Öort_no;

369 
	`mem˝y
(
p‹t
->
c⁄f
->
hw_addr
, 
	`√tdev_gë_ëhîaddr
(
√tdev
), 
ETH_ADDR_LEN
);

370 
p‹t
->
c⁄f
->
«me
 = 
	`°r˝y
(
	`xmÆloc
(
	`°æí
(
√tdev_«me
) + 1),Çetdev_name);

371 
p‹t
->
c⁄f
->
c⁄fig
 = 0x00000000;

372 
p‹t
->
c⁄f
->
°©e
 = 0x00000000 | 
OFPPS_LIVE
;

373 
p‹t
->
c⁄f
->
cuº
 = 
	`√tdev_gë_„©uªs
(
√tdev
, 
NETDEV_FEAT_CURRENT
);

374 
p‹t
->
c⁄f
->
advîti£d
 = 
	`√tdev_gë_„©uªs
(
√tdev
, 
NETDEV_FEAT_ADVERTISED
);

375 
p‹t
->
c⁄f
->
suµ‹ãd
 = 
	`√tdev_gë_„©uªs
(
√tdev
, 
NETDEV_FEAT_SUPPORTED
);

376 
p‹t
->
c⁄f
->
≥î
 = 
	`√tdev_gë_„©uªs
(
√tdev
, 
NETDEV_FEAT_PEER
);

377 
p‹t
->
c⁄f
->
cuº_•ìd
 = 
	`p‹t_•ìd
’‹t->c⁄f->
cuº
);

378 
p‹t
->
c⁄f
->
max_•ìd
 = 
	`p‹t_•ìd
’‹t->c⁄f->
suµ‹ãd
);

380 i‡(
	`IS_HW_PORT
(
p
)) {

381 #i‡
	`deföed
(
OF_HW_PLAT
Ë&& !deföed(
USE_NETDEV
)

382 
of_hw_drivî_t
 *
hw_drv
;

384 
hw_drv
 = 
p
->
dp
->hw_drv;

385 
	`‰ì
(
p‹t
->
c⁄f
->
«me
);

386 
p‹t
->
c⁄f
->
«me
 = 
	`°r˝y
(
	`xmÆloc
(
	`°æí
(
p
->
hw_«me
) + 1),Ö->hw_name);

387 / * 
Upd©e
 
loˇl
 
p‹t
 
°©e
 * /

388 i‡(
hw_drv
->
	`p‹t_lök_gë
(hw_drv, 
p‹t_no
)) {

389 
p
->
°©e
 &~
OFPPS_LINK_DOWN
;

391 
p
->
°©e
 |
OFPPS_LINK_DOWN
;

393 i‡(
hw_drv
->
	`p‹t_íabÀ_gë
(hw_drv, 
p‹t_no
)) {

394 
p
->
c⁄fig
 &~
OFPPC_PORT_DOWN
;

396 
p
->
c⁄fig
 |
OFPPC_PORT_DOWN
;

398 / * 
FIXME
: 
Add
 
cuºít
, 
suµ‹ãd
 
™d
 
advîti£d
 
„©uªs
 * /

402 
p‹t
->
°©s
 = 
	`xmÆloc
((
oÊ_p‹t_°©s
));

403 
p‹t
->
°©s
->
p‹t_no
 =Öort_no;

404 
p‹t
->
°©s
->
rx_∑ckës
 = 0;

405 
p‹t
->
°©s
->
tx_∑ckës
 = 0;

406 
p‹t
->
°©s
->
rx_byãs
 = 0;

407 
p‹t
->
°©s
->
tx_byãs
 = 0;

408 
p‹t
->
°©s
->
rx_dr›≥d
 = 0;

409 
p‹t
->
°©s
->
tx_dr›≥d
 = 0;

410 
p‹t
->
°©s
->
rx_îr‹s
 = 0;

411 
p‹t
->
°©s
->
tx_îr‹s
 = 0;

412 
p‹t
->
°©s
->
rx_‰ame_îr
 = 0;

413 
p‹t
->
°©s
->
rx_ovî_îr
 = 0;

414 
p‹t
->
°©s
->
rx_¸c_îr
 = 0;

415 
p‹t
->
°©s
->
cﬁlisi⁄s
 = 0;

416 
p‹t
->
°©s
->
duøti⁄_£c
 = 0;

417 
p‹t
->
°©s
->
duøti⁄_n£c
 = 0;

418 
p‹t
->
Êags
 |
SWP_USED
;

419 
p‹t
->
√tdev
 =Çetdev;

420 
p‹t
->
max_queues
 = max_queues;

421 
p‹t
->
num_queues
 = 0;

422 
p‹t
->
¸óãd
 = 
now
;

424 
	`mem£t
(
p‹t
->
queues
, 0x00, (port->queues));

426 
	`li°_push_back
(&
dp
->
p‹t_li°
, &
p‹t
->
node
);

427 
dp
->
p‹ts_num
++;

431 
oÊ_msg_p‹t_°©us
 
msg
 =

432 {{.
ty≥
 = 
OFPT_PORT_STATUS
},

433 .
ªas⁄
 = 
OFPPR_ADD
, .
desc
 = 
p‹t
->
c⁄f
};

435 
	`dp_£nd_mesßge
(
dp
, (
oÊ_msg_hódî
 *)&
msg
, 
NULL
 );

439 
	}
}

442 #i‡
deföed
(
OF_HW_PLAT
Ë&& !deföed(
USE_NETDEV
)

444 
	$dp_p‹ts_add
(
d©≠©h
 *
dp
, c⁄° *
p‹t_«me
)

446 
p‹t_no
;

447 
rc
 = 0;

448 
sw_p‹t
 *
p‹t
;

450 
	`Ârötf
(
°dîr
, "AddögÖ‹à%s. hw_drv i†%p\n", 
p‹t_«me
, 
dp
->
hw_drv
);

451 i‡(
dp
->
hw_drv
 && dp->hw_drv->
p‹t_add
) {

452 
p‹t_no
 = 
dp
->
hw_drv
->
	`p‹t_add
(dp->hw_drv, -1, 
p‹t_«me
);

453 i‡(
p‹t_no
 >= 0) {

454 
p‹t
 = &
dp
->
p‹ts
[
p‹t_no
];

455 i‡(
p‹t
->
Êags
 & 
SWP_USED
) {

456 
	`VLOG_ERR
(
LOG_MODULE
, "HWÖort %s (%d)álready created\n",

457 
p‹t_«me
, 
p‹t_no
);

458 
rc
 = -1;

460 
	`Ârötf
(
°dîr
, "Adding HWÖort %sás OFÖortÇumber %d\n",

461 
p‹t_«me
, 
p‹t_no
);

463 
p‹t
->
Êags
 |
SWP_USED
 | 
SWP_HW_DRV_PORT
;

464 
p‹t
->
dp
 = dp;

465 
p‹t
->
p‹t_no
 =Öort_no;

466 
	`li°_öô
(&
p‹t
->
queue_li°
);

467 
p‹t
->
max_queues
 = max_queues;

468 
p‹t
->
num_queues
 = 0;

469 
	`°∫˝y
(
p‹t
->
hw_«me
, 
p‹t_«me
, (port->hw_name));

470 
	`li°_push_back
(&
dp
->
p‹t_li°
, &
p‹t
->
node
);

472 
oÊ_msg_p‹t_°©us
 
msg
 =

473 {{.
ty≥
 = 
OFPT_PORT_STATUS
},

474 .
ªas⁄
 = 
OFPPR_ADD
, .
desc
 = 
p
->
c⁄f
};

476 
	`dp_£nd_mesßge
(
dp
, (
oÊ_msg_hódî
 *)&
msg
, 
NULL
);

480 
	`VLOG_ERR
(
LOG_MODULE
, "P‹à%†nŸÑecognized by h¨dw¨êdrivî", 
p‹t_«me
);

481 
rc
 = -1;

484 
	`VLOG_ERR
(
LOG_MODULE
, "No hardware driver support; can'táddÖorts");

485 
rc
 = -1;

488  
rc
;

489 
	}
}

493 
	$dp_p‹ts_add
(
d©≠©h
 *
dp
, c⁄° *
√tdev
)

495 
uöt32_t
 
p‹t_no
;

496 
p‹t_no
 = 1;Ö‹t_nÿ< 
DP_MAX_PORTS
;Öort_no++) {

497 
sw_p‹t
 *
p‹t
 = &
dp
->
p‹ts
[
p‹t_no
];

498 i‡(
p‹t
->
√tdev
 =
NULL
) {

499  
	`√w_p‹t
(
dp
, 
p‹t
, 
p‹t_no
, 
√tdev
, 
NULL
, dp->
max_queues
);

502  
EXFULL
;

503 
	}
}

507 
	$dp_p‹ts_add_loˇl
(
d©≠©h
 *
dp
, c⁄° *
√tdev
)

509 i‡(!
dp
->
loˇl_p‹t
) {

510 
uöt8_t
 
ó
[
ETH_ADDR_LEN
];

511 
sw_p‹t
 *
p‹t
;

512 
îr‹
;

514 
p‹t
 = 
	`xˇŒoc
(1,  *port);

515 
	`ëh_addr_‰om_uöt64
(
dp
->
id
, 
ó
);

516 
îr‹
 = 
	`√w_p‹t
(
dp
, 
p‹t
, 
OFPP_LOCAL
, 
√tdev
, 
ó
, 0);

517 i‡(!
îr‹
) {

518 
dp
->
loˇl_p‹t
 = 
p‹t
;

520 
	`‰ì
(
p‹t
);

522  
îr‹
;

524  
EXFULL
;

526 
	}
}

529 
sw_p‹t
 *

530 
	$dp_p‹ts_lookup
(
d©≠©h
 *
dp
, 
uöt32_t
 
p‹t_no
) {

533 
uöt32_t
 
p‹ts_num
 = 
dp
->
loˇl_p‹t
 ? dp->ports_num -1 : dp->ports_num;

535 i‡(
p‹t_no
 =
OFPP_LOCAL
) {

536  
dp
->
loˇl_p‹t
;

539 i‡(
p‹t_no
 < 1 ||Ö‹t_nÿ> 
p‹ts_num
) {

540  
NULL
;

543  &
dp
->
p‹ts
[
p‹t_no
];

544 
	}
}

546 
sw_queue
 *

547 
	$dp_p‹ts_lookup_queue
(
sw_p‹t
 *
p
, 
uöt32_t
 
queue_id
)

549 
sw_queue
 *
q
;

551 i‡(
queue_id
 <
p
->
max_queues
) {

552 
q
 = &(
p
->
queues
[
queue_id
]);

554 i‡(
q
->
p‹t
 !
NULL
) {

555  
q
;

559  
NULL
;

560 
	}
}

563 
	$dp_p‹ts_ouçut
(
d©≠©h
 *
dp
, 
oÂbuf
 *
buf„r
, 
uöt32_t
 
out_p‹t
,

564 
uöt32_t
 
queue_id
)

566 
uöt16_t
 
˛ass_id
;

567 
sw_queue
 * 
q
;

568 
sw_p‹t
 *
p
;

570 
p
 = 
	`dp_p‹ts_lookup
(
dp
, 
out_p‹t
);

573 #i‡
	`deföed
(
OF_HW_PLAT
Ë&& !deföed(
USE_NETDEV
)

574 i‡((
p
 !
NULL
Ë&& 
	`IS_HW_PORT
(p)) {

575 i‡(
dp
 && dp->
hw_drv
) {

576 i‡(
dp
->
hw_drv
->
	`p‹t_lök_gë
(dp->hw_drv, 
p
->
p‹t_no
)) {

577 
of_∑ckë_t
 *
pkt
;

578 
rv
;

580 
pkt
 = 
	`ˇŒoc
(1, (*pkt));

581 
	`OF_PKT_INIT
(
pkt
, 
buf„r
);

582 
rv
 = 
dp
->
hw_drv
->
	`∑ckë_£nd
(dp->hw_drv, 
out_p‹t
, 
pkt
, 0);

583 i‡((
rv
 < 0Ë&& (rv !
OF_HW_PORT_DOWN
)) {

584 
	`VLOG_ERR
(
LOG_MODULE
, "Error %d sendingÖkt on HWÖort %d\n",

585 
rv
, 
out_p‹t
);

586 
	`oÂbuf_dñëe
(
buf„r
);

587 
	`‰ì
(
pkt
);

596 i‡(
p
 !
NULL
 &&Ö->
√tdev
 != NULL) {

597 i‡(!(
p
->
c⁄f
->
c⁄fig
 & 
OFPPC_PORT_DOWN
)) {

599 i‡(
queue_id
 == 0) {

600 
q
 = 
NULL
;

601 
˛ass_id
 = 0;

605 
q
 = 
	`dp_p‹ts_lookup_queue
(
p
, 
queue_id
);

606 i‡(
q
 !
NULL
) {

607 
˛ass_id
 = 
q
->class_id;

610 
îr‹
;

614 i‡(!
	`√tdev_£nd
(
p
->
√tdev
, 
buf„r
, 
˛ass_id
)) {

615 
p
->
°©s
->
tx_∑ckës
++;

616 
p
->
°©s
->
tx_byãs
 +
buf„r
->
size
;

617 i‡(
q
 !
NULL
) {

618 
q
->
°©s
->
tx_∑ckës
++;

619 
q
->
°©s
->
tx_byãs
 +
buf„r
->
size
;

622 
p
->
°©s
->
tx_dr›≥d
++;

629 
îr‹
:

631 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "ˇn'àf‹w¨dÅÿbadÖ‹t:queue(%d:%d)\n", 
out_p‹t
,

632 
queue_id
);

633 
	}
}

636 
	$dp_p‹ts_ouçut_Æl
(
d©≠©h
 *
dp
, 
oÂbuf
 *
buf„r
, 
ö_p‹t
, 
boﬁ
 
Êood
)

638 
sw_p‹t
 *
p
;

640 
	`LIST_FOR_EACH
 (
p
, 
sw_p‹t
, 
node
, &
dp
->
p‹t_li°
) {

641 i‡(
p
->
°©s
->
p‹t_no
 =
ö_p‹t
) {

644 i‡(
Êood
 && 
p
->
c⁄f
->
c⁄fig
 & 
OFPPC_NO_FWD
) {

648 
	`dp_p‹ts_ouçut
(
dp
, 
buf„r
, 
p
->
°©s
->
p‹t_no
, 0);

652 
	}
}

654 
oÊ_îr


655 
	$dp_p‹ts_h™dÀ_p‹t_mod
(
d©≠©h
 *
dp
, 
oÊ_msg_p‹t_mod
 *
msg
,

656 c⁄° 
£ndî
 *sender) {

658 
sw_p‹t
 *
p
;

660 if(
£ndî
->
ªmŸe
->
rﬁe
 =
OFPCR_ROLE_SLAVE
)

661  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_IS_SLAVE
);

663 
p
 = 
	`dp_p‹ts_lookup
(
dp
, 
msg
->
p‹t_no
);

665 i‡(
p
 =
NULL
) {

666  
	`oÊ_îr‹
(
OFPET_PORT_MOD_FAILED
,
OFPPMFC_BAD_PORT
);

670 i‡(
	`memcmp
(
msg
->
hw_addr
, 
	`√tdev_gë_ëhîaddr
(
p
->
√tdev
),

671 
ETH_ADDR_LEN
) != 0) {

672  
	`oÊ_îr‹
(
OFPET_PORT_MOD_FAILED
, 
OFPPMFC_BAD_HW_ADDR
);

676 i‡(
msg
->
mask
) {

677 
p
->
c⁄f
->
c⁄fig
 &~
msg
->
mask
;

678 
p
->
c⁄f
->
c⁄fig
 |
msg
->c⁄fig & msg->
mask
;

682 
oÊ_msg_p‹t_°©us
 
ªp_msg
 =

683 {{.
ty≥
 = 
OFPT_PORT_STATUS
},

684 .
ªas⁄
 = 
OFPPR_MODIFY
, .
desc
 = 
p
->
c⁄f
};

686 
	`dp_£nd_mesßge
(
dp
, (
oÊ_msg_hódî
 *)&
ªp_msg
, 
NULL
 );

688 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
dp
->
exp
);

690 
	}
}

693 
	$dp_p‹t_°©s_upd©e
(
sw_p‹t
 *
p‹t
) {

694 
p‹t
->
°©s
->
duøti⁄_£c
 = (
	`time_m£c
(Ë-Ö‹t->
¸óãd
) / 1000;

695 
p‹t
->
°©s
->
duøti⁄_n£c
 = ((
	`time_m£c
(Ë-Ö‹t->
¸óãd
) % 1000) * 1000;

696 
	}
}

698 
oÊ_îr


699 
	$dp_p‹ts_h™dÀ_°©s_ªque°_p‹t
(
d©≠©h
 *
dp
,

700 
oÊ_msg_mu…ù¨t_ªque°_p‹t
 *
msg
,

701 c⁄° 
£ndî
 *£ndî 
UNUSED
) {

702 
sw_p‹t
 *
p‹t
;

704 
oÊ_msg_mu…ù¨t_ª∂y_p‹t
 
ª∂y
 =

705 {{{.
ty≥
 = 
OFPT_MULTIPART_REPLY
},

706 .
ty≥
 = 
OFPMP_PORT_STATS
, .
Êags
 = 0x0000},

707 .
°©s_num
 = 0,

708 .
°©s
 = 
NULL
};

710 i‡(
msg
->
p‹t_no
 =
OFPP_ANY
) {

711 
size_t
 
i
 = 0;

713 
ª∂y
.
°©s_num
 = 
dp
->
p‹ts_num
;

714 
ª∂y
.
°©s
 = 
	`xmÆloc
((
oÊ_p‹t_°©s
 *Ë* 
dp
->
p‹ts_num
);

716 
	`LIST_FOR_EACH
(
p‹t
, 
sw_p‹t
, 
node
, &
dp
->
p‹t_li°
) {

717 
	`dp_p‹t_°©s_upd©e
(
p‹t
);

718 
ª∂y
.
°©s
[
i
] = 
p‹t
->stats;

719 
i
++;

723 
p‹t
 = 
	`dp_p‹ts_lookup
(
dp
, 
msg
->
p‹t_no
);

725 i‡(
p‹t
 !
NULL
 &&Ö‹t->
√tdev
 != NULL) {

726 
ª∂y
.
°©s_num
 = 1;

727 
ª∂y
.
°©s
 = 
	`xmÆloc
((
oÊ_p‹t_°©s
 *));

728 
	`dp_p‹t_°©s_upd©e
(
p‹t
);

729 
ª∂y
.
°©s
[0] = 
p‹t
->stats;

733 
	`dp_£nd_mesßge
(
dp
, (
oÊ_msg_hódî
 *)&
ª∂y
, 
£ndî
);

735 
	`‰ì
(
ª∂y
.
°©s
);

736 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
dp
->
exp
);

739 
	}
}

741 
oÊ_îr


742 
	$dp_p‹ts_h™dÀ_p‹t_desc_ªque°
(
d©≠©h
 *
dp
,

743 
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
msg
 
UNUSED
,

744 c⁄° 
£ndî
 *£ndî 
UNUSED
){

745 
sw_p‹t
 *
p‹t
;

746 
size_t
 
i
 = 0;

749 
oÊ_msg_mu…ù¨t_ª∂y_p‹t_desc
 
ª∂y
 =

750 {{{.
ty≥
 = 
OFPT_MULTIPART_REPLY
},

751 .
ty≥
 = 
OFPMP_PORT_DESC
, .
Êags
 = 0x0000},

752 .
°©s_num
 = 0,

753 .
°©s
 = 
NULL
};

755 
ª∂y
.
°©s_num
 = 
dp
->
p‹ts_num
;

756 
ª∂y
.
°©s
 = 
	`xmÆloc
((
oÊ_p‹t
 *Ë* 
dp
->
p‹ts_num
);

758 
	`LIST_FOR_EACH
(
p‹t
, 
sw_p‹t
, 
node
, &
dp
->
p‹t_li°
) {

759 
ª∂y
.
°©s
[
i
] = 
p‹t
->
c⁄f
;

760 
i
++;

763 
	`dp_£nd_mesßge
(
dp
, (
oÊ_msg_hódî
 *)&
ª∂y
, 
£ndî
);

765 
	`‰ì
(
ª∂y
.
°©s
);

766 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
dp
->
exp
);

769 
	}
}

772 
	$dp_p‹ts_queue_upd©e
(
sw_queue
 *
queue
) {

773 
queue
->
°©s
->
duøti⁄_£c
 = (
	`time_m£c
(Ë- queue->
¸óãd
) / 1000;

774 
queue
->
°©s
->
duøti⁄_n£c
 = ((
	`time_m£c
(Ë- queue->
¸óãd
) % 1000) * 1000;

775 
	}
}

777 
oÊ_îr


778 
	$dp_p‹ts_h™dÀ_°©s_ªque°_queue
(
d©≠©h
 *
dp
,

779 
oÊ_msg_mu…ù¨t_ªque°_queue
 *
msg
,

780 c⁄° 
£ndî
 *sender) {

781 
sw_p‹t
 *
p‹t
;

783 
oÊ_msg_mu…ù¨t_ª∂y_queue
 
ª∂y
 =

784 {{{.
ty≥
 = 
OFPT_MULTIPART_REPLY
},

785 .
ty≥
 = 
OFPMP_QUEUE
, .
Êags
 = 0x0000},

786 .
°©s_num
 = 0,

787 .
°©s
 = 
NULL
};

789 i‡(
msg
->
p‹t_no
 =
OFPP_ANY
) {

790 
size_t
 
i
,
idx
 = 0, 
num
 = 0;

792 
	`LIST_FOR_EACH
(
p‹t
, 
sw_p‹t
, 
node
, &
dp
->
p‹t_li°
) {

793 i‡(
msg
->
queue_id
 =
OFPQ_ALL
) {

794 
num
 +
p‹t
->
num_queues
;

796 i‡(
msg
->
queue_id
 < 
p‹t
->
max_queues
) {

797 i‡(
p‹t
->
queues
[
msg
->
queue_id
].p‹à!
NULL
) {

798 
num
++;

804 
ª∂y
.
°©s_num
 = 
num
;

805 
ª∂y
.
°©s
 = 
	`xmÆloc
((
oÊ_p‹t_°©s
 *Ë* 
num
);

807 
	`LIST_FOR_EACH
(
p‹t
, 
sw_p‹t
, 
node
, &
dp
->
p‹t_li°
) {

808 i‡(
msg
->
queue_id
 =
OFPQ_ALL
) {

809 
i
=0; i<
p‹t
->
max_queues
; i++) {

810 i‡(
p‹t
->
queues
[
i
].p‹à!
NULL
) {

811 
	`dp_p‹ts_queue_upd©e
(&
p‹t
->
queues
[
i
]);

812 
ª∂y
.
°©s
[
idx
] = 
p‹t
->
queues
[
i
].stats;

813 
idx
++;

817 i‡(
msg
->
queue_id
 < 
p‹t
->
max_queues
) {

818 i‡(
p‹t
->
queues
[
msg
->
queue_id
].p‹à!
NULL
) {

819 
	`dp_p‹ts_queue_upd©e
(&
p‹t
->
queues
[
msg
->
queue_id
]);

820 
ª∂y
.
°©s
[
idx
] = 
p‹t
->
queues
[
msg
->
queue_id
].stats;

821 
idx
++;

828 
p‹t
 = 
	`dp_p‹ts_lookup
(
dp
, 
msg
->
p‹t_no
);

830 i‡(
p‹t
 !
NULL
 &&Ö‹t->
√tdev
 != NULL) {

831 
size_t
 
i
, 
idx
 = 0;

833 i‡(
msg
->
queue_id
 =
OFPQ_ALL
) {

834 
ª∂y
.
°©s_num
 = 
p‹t
->
num_queues
;

835 
ª∂y
.
°©s
 = 
	`xmÆloc
((
oÊ_p‹t_°©s
 *Ë* 
p‹t
->
num_queues
);

837 
i
=0; i<
p‹t
->
max_queues
; i++) {

838 i‡(
p‹t
->
queues
[
i
].p‹à!
NULL
) {

839 
	`dp_p‹ts_queue_upd©e
(&
p‹t
->
queues
[
i
]);

840 
ª∂y
.
°©s
[
idx
] = 
p‹t
->
queues
[
i
].stats;

841 
idx
++;

845 i‡(
msg
->
queue_id
 < 
p‹t
->
max_queues
) {

846 i‡(
p‹t
->
queues
[
msg
->
queue_id
].p‹à!
NULL
) {

847 
ª∂y
.
°©s_num
 = 1;

848 
ª∂y
.
°©s
 = 
	`xmÆloc
((
oÊ_p‹t_°©s
 *));

849 
	`dp_p‹ts_queue_upd©e
(&
p‹t
->
queues
[
msg
->
queue_id
]);

850 
ª∂y
.
°©s
[0] = 
p‹t
->
queues
[
msg
->
queue_id
].stats;

857 
	`dp_£nd_mesßge
(
dp
, (
oÊ_msg_hódî
 *)&
ª∂y
, 
£ndî
);

859 
	`‰ì
(
ª∂y
.
°©s
);

860 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
dp
->
exp
);

863 
	}
}

865 
oÊ_îr


866 
	$dp_p‹ts_h™dÀ_queue_gë_c⁄fig_ªque°
(
d©≠©h
 *
dp
,

867 
oÊ_msg_queue_gë_c⁄fig_ªque°
 *
msg
,

868 c⁄° 
£ndî
 *sender) {

869 
sw_p‹t
 *
p
;

871 
oÊ_msg_queue_gë_c⁄fig_ª∂y
 
ª∂y
 =

872 {{.
ty≥
 = 
OFPT_QUEUE_GET_CONFIG_REPLY
},

873 .
queues
 = 
NULL
};

875 i‡(
msg
->
p‹t
 =
OFPP_ANY
) {

876 
size_t
 
i
, 
idx
 = 0, 
num
 = 0;

878 
	`LIST_FOR_EACH
(
p
, 
sw_p‹t
, 
node
, &
dp
->
p‹t_li°
) {

879 
num
 +
p
->
num_queues
;

882 
ª∂y
.
p‹t
 = 
OFPP_ANY
;

883 
ª∂y
.
queues_num
 = 
num
;

884 
ª∂y
.
queues
 = 
	`xmÆloc
((
oÊ_∑ckë_queue
 *Ë* 
num
);

886 
	`LIST_FOR_EACH
(
p
, 
sw_p‹t
, 
node
, &
dp
->
p‹t_li°
) {

887 
i
=0; i<
p
->
max_queues
; i++) {

888 i‡(
p
->
queues
[
i
].
p‹t
 !
NULL
) {

889 
ª∂y
.
queues
[
idx
] = 
p
->queues[
i
].
¥›s
;

890 
idx
++;

895 
p
 = 
	`dp_p‹ts_lookup
(
dp
, 
msg
->
p‹t
);

897 i‡(
p
 =
NULL
 || (p->
°©s
->
p‹t_no
 !
msg
->
p‹t
)) {

898 
	`‰ì
(
ª∂y
.
queues
);

899 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
dp
->
exp
);

900  
	`oÊ_îr‹
(
OFPET_QUEUE_OP_FAILED
, 
OFPQOFC_BAD_PORT
);

902 
size_t
 
i
, 
idx
 = 0;

904 
ª∂y
.
p‹t
 = 
msg
->port;

905 
ª∂y
.
queues_num
 = 
p
->
num_queues
;

906 
ª∂y
.
queues
 = 
	`xmÆloc
((
oÊ_∑ckë_queue
 *Ë* 
p
->
num_queues
);

908 
i
=0; i<
p
->
max_queues
; i++) {

909 i‡(
p
->
queues
[
i
].
p‹t
 !
NULL
) {

910 
ª∂y
.
queues
[
idx
] = 
p
->queues[
i
].
¥›s
;

911 
idx
++;

917 
	`dp_£nd_mesßge
(
dp
, (
oÊ_msg_hódî
 *)&
ª∂y
, 
£ndî
);

919 
	`‰ì
(
ª∂y
.
queues
);

920 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
dp
->
exp
);

922 
	}
}

929 
	$√w_queue
(
sw_p‹t
 * 
p‹t
, 
sw_queue
 * 
queue
,

930 
uöt32_t
 
queue_id
, 
uöt16_t
 
˛ass_id
,

931 
oÊ_queue_¥›_mö_øã
 * 
mr
)

933 
uöt64_t
 
now
 = 
	`time_m£c
();

935 
	`mem£t
(
queue
, '\0',  *queue);

936 
queue
->
p‹t
 =Öort;

937 
queue
->
¸óãd
 = 
now
;

938 
queue
->
°©s
 = 
	`xmÆloc
((
oÊ_queue_°©s
));

940 
queue
->
°©s
->
p‹t_no
 = 
p‹t
->stats->port_no;

941 
queue
->
°©s
->
queue_id
 = queue_id;

942 
queue
->
°©s
->
tx_byãs
 = 0;

943 
queue
->
°©s
->
tx_∑ckës
 = 0;

944 
queue
->
°©s
->
tx_îr‹s
 = 0;

945 
queue
->
°©s
->
duøti⁄_£c
 = 0;

946 
queue
->
°©s
->
duøti⁄_n£c
 = 0;

953 
queue
->
˛ass_id
 = class_id;

955 
queue
->
¥›s
 = 
	`xmÆloc
((
oÊ_∑ckë_queue
));

956 
queue
->
¥›s
->
queue_id
 = queue_id;

957 
queue
->
¥›s
->
¥›îtõs
 = 
	`xmÆloc
((
oÊ_queue_¥›_hódî
 *));

958 
queue
->
¥›s
->
¥›îtõs_num
 = 1;

959 
queue
->
¥›s
->
¥›îtõs
[0] = 
	`xmÆloc
((
oÊ_queue_¥›_mö_øã
));

960 ((
oÊ_queue_¥›_mö_øã
 *)(
queue
->
¥›s
->
¥›îtõs
[0]))->
hódî
.
ty≥
 = 
OFPQT_MIN_RATE
;

961 ((
oÊ_queue_¥›_mö_øã
 *)(
queue
->
¥›s
->
¥›îtõs
[0]))->
øã
 = 
mr
->rate;

963 
p‹t
->
num_queues
++;

965 
	}
}

968 
	$p‹t_add_queue
(
sw_p‹t
 *
p
, 
uöt32_t
 
queue_id
,

969 
oÊ_queue_¥›_mö_øã
 * 
mr
)

971 i‡(
queue_id
 > 
p
->
max_queues
) {

972  
EXFULL
;

975 i‡(
p
->
queues
[
queue_id
].
p‹t
 !
NULL
) {

976  
EXFULL
;

979  
	`√w_queue
(
p
, &’->
queues
[
queue_id
]), queue_id, queue_id, 
mr
);

980 
	}
}

983 
	$p‹t_dñëe_queue
(
sw_p‹t
 *
p
, 
sw_queue
 *
q
)

985 
	`mem£t
(
q
,'\0',  *q);

986 
p
->
num_queues
--;

988 
	}
}

990 
oÊ_îr


991 
	$dp_p‹ts_h™dÀ_queue_modify
(
d©≠©h
 *
dp
, 
oÊ_exp_›íÊow_msg_queue
 *
msg
,

992 c⁄° 
£ndî
 *£ndî 
UNUSED
) {

994 
sw_p‹t
 *
p
;

995 
sw_queue
 *
q
;

997 
îr‹
 = 0;

999 
p
 = 
	`dp_p‹ts_lookup
(
dp
, 
msg
->
p‹t_id
);

1000 i‡(
	`PORT_IN_USE
(
p
)) {

1001 
q
 = 
	`dp_p‹ts_lookup_queue
(
p
, 
msg
->
queue
->
queue_id
);

1002 i‡(
q
 !
NULL
) {

1004 
îr‹
 = 
	`√tdev_ch™ge_˛ass
(
p
->
√tdev
,
q
->
˛ass_id
,

1005 ((
oÊ_queue_¥›_mö_øã
 *)
msg
->
queue
->
¥›îtõs
[0])->
øã
);

1006 i‡(
îr‹
) {

1007 
	`VLOG_ERR
(
LOG_MODULE
, "FaûedÅÿupd©êqueuê%d", 
msg
->
queue
->
queue_id
);

1008  
	`oÊ_îr‹
(
OFPET_QUEUE_OP_FAILED
, 
OFPQOFC_EPERM
);

1011 ((
oÊ_queue_¥›_mö_øã
 *)
q
->
¥›s
->
¥›îtõs
[0])->
øã
 =

1012 ((
oÊ_queue_¥›_mö_øã
 *)
msg
->
queue
->
¥›îtõs
[0])->
øã
;

1017 
îr‹
 = 
	`p‹t_add_queue
(
p
, 
msg
->
queue
->
queue_id
,

1018 (
oÊ_queue_¥›_mö_øã
 *)
msg
->
queue
->
¥›îtõs
[0]);

1019 i‡(
îr‹
 =
EXFULL
) {

1020  
	`oÊ_îr‹
(
OFPET_QUEUE_OP_FAILED
, 
OFPQOFC_EPERM
);

1023 
q
 = 
	`dp_p‹ts_lookup_queue
(
p
, 
msg
->
queue
->
queue_id
);

1024 
îr‹
 = 
	`√tdev_£tup_˛ass
(
p
->
√tdev
,
q
->
˛ass_id
,

1025 ((
oÊ_queue_¥›_mö_øã
 *)
msg
->
queue
->
¥›îtõs
[0])->
øã
);

1026 i‡(
îr‹
) {

1027 
	`VLOG_ERR
(
LOG_MODULE
, "FaûedÅÿc⁄figuª queuê%d", 
msg
->
queue
->
queue_id
);

1028  
	`oÊ_îr‹
(
OFPET_QUEUE_OP_FAILED
, 
OFPQOFC_BAD_QUEUE
);

1033 
	`VLOG_ERR
(
LOG_MODULE
, "FaûedÅÿ¸óã/modify queuê-Ö‹à%d d€¢'àexi°", 
msg
->
p‹t_id
);

1034  
	`oÊ_îr‹
(
OFPET_QUEUE_OP_FAILED
, 
OFPQOFC_BAD_PORT
);

1037 i‡(
	`IS_HW_PORT
(
p
)) {

1038 #i‡
	`deföed
(
OF_HW_PLAT
Ë&& !deföed(
USE_NETDEV
)

1039 
îr‹
 = 
dp
->
hw_drv
->
	`p‹t_queue_c⁄fig
(dp->hw_drv, 
p‹t_no
,

1040 
queue_id
, 
	`¡ohs
(
mr
->
øã
));

1041 i‡(
îr‹
 < 0) {

1042 
	`VLOG_ERR
(
LOG_MODULE
, "FailedÅo update HWÖort %d queue %d",

1043 
p‹t_no
, 
queue_id
);

1048 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
dp
->
exp
);

1050 
	}
}

1053 
oÊ_îr


1054 
	$dp_p‹ts_h™dÀ_queue_dñëe
(
d©≠©h
 *
dp
, 
oÊ_exp_›íÊow_msg_queue
 *
msg
,

1055 c⁄° 
£ndî
 *£ndî 
UNUSED
) {

1056 
sw_p‹t
 *
p
;

1057 
sw_queue
 *
q
;

1059 
p
 = 
	`dp_p‹ts_lookup
(
dp
, 
msg
->
p‹t_id
);

1060 i‡(
p
 !
NULL
 &&Ö->
√tdev
 != NULL) {

1061 
q
 = 
	`dp_p‹ts_lookup_queue
(
p
, 
msg
->
queue
->
queue_id
);

1062 i‡(
q
 !
NULL
) {

1063 
	`√tdev_dñëe_˛ass
(
p
->
√tdev
,
q
->
˛ass_id
);

1064 
	`p‹t_dñëe_queue
(
p
, 
q
);

1066 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
dp
->
exp
);

1069  
	`oÊ_îr‹
(
OFPET_QUEUE_OP_FAILED
, 
OFPQOFC_BAD_QUEUE
);

1073  
	`oÊ_îr‹
(
OFPET_QUEUE_OP_FAILED
, 
OFPQOFC_BAD_PORT
);

1074 
	}
}

	@udatapath/dp_ports.h

40 #i‚de‡
DP_PORTS_H


41 
	#DP_PORTS_H
 1

	)

43 
	~"li°.h
"

44 
	~"√tdev.h
"

45 
	~"dp_exp.h
"

46 
	~"oÊib/oÊ.h
"

47 
	~"oÊib/oÊ-°ru˘s.h
"

48 
	~"oÊib/oÊ-mesßges.h
"

49 
	~"oÊib-exp/oÊ-exp-›íÊow.h
"

58 #i‡
deföed
(
OF_HW_PLAT
)

59 
	~<›íÊow/of_hw_≠i.h
>

63 
	g£ndî
;

65 
	ssw_queue
 {

66 
sw_p‹t
 *
	mp‹t
;

67 
uöt16_t
 
	m˛ass_id
;

68 
uöt64_t
 
	m¸óãd
;

69 
oÊ_queue_°©s
 *
	m°©s
;

70 
oÊ_∑ckë_queue
 *
	m¥›s
;

74 
	#MAX_HW_NAME_LEN
 32

	)

75 
	esw_p‹t_Êags
 {

76 
	mSWP_USED
 = 1 << 0,

77 
	mSWP_HW_DRV_PORT
 = 1 << 1,

79 #i‡
deföed
(
OF_HW_PLAT
Ë&& !deföed(
USE_NETDEV
)

80 
	#IS_HW_PORT
(
p
Ë(’)->
Êags
 & 
SWP_HW_DRV_PORT
)

	)

82 
	#IS_HW_PORT
(
p
Ë0

	)

85 
	#PORT_IN_USE
(
p
Ë((’Ë!
NULL
Ë&& (p)->
Êags
 & 
SWP_USED
)

	)

87 
	ssw_p‹t
 {

88 
li°
 
	mnode
;

90 
uöt32_t
 
	mÊags
;

91 
d©≠©h
 *
	mdp
;

92 
√tdev
 *
	m√tdev
;

93 
oÊ_p‹t
 *
	mc⁄f
;

94 
oÊ_p‹t_°©s
 *
	m°©s
;

96 
uöt16_t
 
	mmax_queues
;

97 
uöt16_t
 
	mnum_queues
;

98 
uöt64_t
 
	m¸óãd
;

99 
sw_queue
 
	mqueues
[
NETDEV_MAX_QUEUES
];

103 #i‡
deföed
(
OF_HW_PLAT
)

104 
	shw_pkt_q_íåy
 {

105 
oÂbuf
 *
	mbuf„r
;

106 
hw_pkt_q_íåy
 *
	m√xt
;

107 
of_p‹t_t
 
	mp‹t_no
;

108 
	mªas⁄
;

112 
	#DP_MAX_PORTS
 255

	)

113 
BUILD_ASSERT_DECL
(
DP_MAX_PORTS
 <
OFPP_MAX
);

119 
dp_p‹ts_add
(
d©≠©h
 *
dp
, c⁄° *
√tdev
);

123 
dp_p‹ts_add_loˇl
(
d©≠©h
 *
dp
, c⁄° *
√tdev
);

127 
dp_p‹ts_run
(
d©≠©h
 *
dp
);

130 
sw_p‹t
 *

131 
dp_p‹ts_lookup
(
d©≠©h
 *, 
uöt32_t
);

134 
sw_queue
 *

135 
dp_p‹ts_lookup_queue
(
sw_p‹t
 *, 
uöt32_t
);

139 
dp_p‹ts_ouçut
(
d©≠©h
 *
dp
, 
oÂbuf
 *
buf„r
, 
uöt32_t
 
out_p‹t
,

140 
uöt32_t
 
queue_id
);

145 
dp_p‹ts_ouçut_Æl
(
d©≠©h
 *
dp
, 
oÂbuf
 *
buf„r
, 
ö_p‹t
, 
boﬁ
 
Êood
);

148 
oÊ_îr


149 
dp_p‹ts_h™dÀ_p‹t_mod
(
d©≠©h
 *
dp
, 
oÊ_msg_p‹t_mod
 *
msg
,

150 c⁄° 
£ndî
 *sender);

153 
oÊ_îr


154 
dp_p‹ts_h™dÀ_°©s_ªque°_p‹t
(
d©≠©h
 *
dp
,

155 
oÊ_msg_mu…ù¨t_ªque°_p‹t
 *
msg
,

156 c⁄° 
£ndî
 *sender);

159 
oÊ_îr


160 
dp_p‹ts_h™dÀ_p‹t_desc_ªque°
(
d©≠©h
 *
dp
,

161 
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
msg
 
UNUSED
,

162 c⁄° 
£ndî
 *£ndî 
UNUSED
);

165 
oÊ_îr


166 
dp_p‹ts_h™dÀ_°©s_ªque°_queue
(
d©≠©h
 *
dp
,

167 
oÊ_msg_mu…ù¨t_ªque°_queue
 *
msg
,

168 c⁄° 
£ndî
 *sender);

171 
oÊ_îr


172 
dp_p‹ts_h™dÀ_queue_gë_c⁄fig_ªque°
(
d©≠©h
 *
dp
,

173 
oÊ_msg_queue_gë_c⁄fig_ªque°
 *
msg
,

174 c⁄° 
£ndî
 *sender);

177 
oÊ_îr


178 
dp_p‹ts_h™dÀ_queue_modify
(
d©≠©h
 *
dp
, 
oÊ_exp_›íÊow_msg_queue
 *
msg
,

179 c⁄° 
£ndî
 *sender);

182 
oÊ_îr


183 
dp_p‹ts_h™dÀ_queue_dñëe
(
d©≠©h
 *
dp
, 
oÊ_exp_›íÊow_msg_queue
 *
msg
,

184 c⁄° 
£ndî
 *sender);

	@udatapath/flow_entry.c

31 
	~<°dboﬁ.h
>

32 
	~<°dlib.h
>

33 
	~"d©≠©h.h
"

34 
	~"dp_a˘i⁄s.h
"

35 
	~"Êow_èbÀ.h
"

36 
	~"Êow_íåy.h
"

37 
	~"group_èbÀ.h
"

38 
	~"group_íåy.h
"

39 
	~"mëî_èbÀ.h
"

40 
	~"mëî_íåy.h
"

41 
	~"oÊib/oÊ-mesßges.h
"

42 
	~"oÊib/oÊ-°ru˘s.h
"

43 
	~"oÊib/oÊ-a˘i⁄s.h
"

44 
	~"oÊib/oÊ-utûs.h
"

45 
	~"∑ckës.h
"

46 
	~"timevÆ.h
"

47 
	~"utû.h
"

49 
	~"vlog.h
"

50 
	#LOG_MODULE
 
VLM_Êow_e


	)

52 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

54 
	sgroup_ªf_íåy
 {

55 
li°
 
	mnode
;

56 
uöt32_t
 
	mgroup_id
;

59 
	smëî_ªf_íåy
 {

60 
li°
 
	mnode
;

61 
uöt32_t
 
	mmëî_id
;

65 
öô_group_ªfs
(
Êow_íåy
 *
íåy
);

68 
dñ_group_ªfs
(
Êow_íåy
 *
íåy
);

71 
öô_mëî_ªfs
(
Êow_íåy
 *
íåy
);

74 
dñ_mëî_ªfs
(
Êow_íåy
 *
íåy
);

76 
boﬁ


77 
	$Êow_íåy_has_out_p‹t
(
Êow_íåy
 *
íåy
, 
uöt32_t
 
p‹t
) {

78 
size_t
 
i
;

80 
i
=0; i<
íåy
->
°©s
->
ö°ru˘i⁄s_num
; i++) {

81 i‡(
íåy
->
°©s
->
ö°ru˘i⁄s
[
i
]->
ty≥
 =
OFPIT_APPLY_ACTIONS
 ||

82 
íåy
->
°©s
->
ö°ru˘i⁄s
[
i
]->
ty≥
 =
OFPIT_WRITE_ACTIONS
) {

83 
oÊ_ö°ru˘i⁄_a˘i⁄s
 *
ü
 = (oÊ_ö°ru˘i⁄_a˘i⁄†*)
íåy
->
°©s
->
ö°ru˘i⁄s
[
i
];

84 i‡(
	`dp_a˘i⁄s_li°_has_out_p‹t
(
ü
->
a˘i⁄s_num
, ia->
a˘i⁄s
, 
p‹t
)) {

85  
åue
;

89  
Ál£
;

90 
	}
}

93 
boﬁ


94 
	$Êow_íåy_has_out_group
(
Êow_íåy
 *
íåy
, 
uöt32_t
 
group
) {

95 
size_t
 
i
;

97 
i
=0; i<
íåy
->
°©s
->
ö°ru˘i⁄s_num
; i++) {

98 i‡(
íåy
->
°©s
->
ö°ru˘i⁄s
[
i
]->
ty≥
 =
OFPIT_APPLY_ACTIONS
 ||

99 
íåy
->
°©s
->
ö°ru˘i⁄s
[
i
]->
ty≥
 =
OFPIT_WRITE_ACTIONS
) {

100 
oÊ_ö°ru˘i⁄_a˘i⁄s
 *
ü
 = (oÊ_ö°ru˘i⁄_a˘i⁄†*)
íåy
->
°©s
->
ö°ru˘i⁄s
[
i
];

101 i‡(
	`dp_a˘i⁄s_li°_has_out_group
(
ü
->
a˘i⁄s_num
, ia->
a˘i⁄s
, 
group
)) {

102  
åue
;

106  
Ál£
;

107 
	}
}

110 
boﬁ


111 
	$Êow_íåy_m©ches
(
Êow_íåy
 *
íåy
, 
oÊ_msg_Êow_mod
 *
mod
, 
boﬁ
 
°ri˘
, boﬁ 
check_cookõ
) {

112 i‡(
check_cookõ
 && ((
íåy
->
°©s
->
cookõ
 & 
mod
->
cookõ_mask
) != (mod->cookie & mod->cookie_mask))) {

113  
Ál£
;

116 i‡(
°ri˘
) {

117  ( (
íåy
->
°©s
->
¥i‹ôy
 =
mod
->priority) &&

118 
	`m©ch_°d_°ri˘
((
oÊ_m©ch
 *)
mod
->
m©ch
,

119 (
oÊ_m©ch
 *)
íåy
->
°©s
->
m©ch
));

121  
	`m©ch_°d_n⁄°ri˘
((
oÊ_m©ch
 *)
mod
->
m©ch
,

122 (
oÊ_m©ch
 *)
íåy
->
°©s
->
m©ch
);

124 
	}
}

126 
boﬁ


127 
	$Êow_íåy_ovîœps
(
Êow_íåy
 *
íåy
, 
oÊ_msg_Êow_mod
 *
mod
) {

128  (
íåy
->
°©s
->
¥i‹ôy
 =
mod
->priority &&

129 (
mod
->
out_p‹t
 =
OFPP_ANY
 || 
	`Êow_íåy_has_out_p‹t
(
íåy
, mod->out_port)) &&

130 (
mod
->
out_group
 =
OFPG_ANY
 || 
	`Êow_íåy_has_out_group
(
íåy
, mod->out_group)) &&

131 
	`m©ch_°d_ovîœp
((
oÊ_m©ch
 *)
íåy
->
°©s
->
m©ch
,

132 (
oÊ_m©ch
 *)
mod
->
m©ch
));

133 
	}
}

137 
	$Êow_íåy_ª∂a˚_ö°ru˘i⁄s
(
Êow_íåy
 *
íåy
,

138 
size_t
 
ö°ru˘i⁄s_num
,

139 
oÊ_ö°ru˘i⁄_hódî
 **
ö°ru˘i⁄s
) {

142 
	`dñ_group_ªfs
(
íåy
);

144 
	`OFL_UTILS_FREE_ARR_FUN2
(
íåy
->
°©s
->
ö°ru˘i⁄s
,É¡ry->°©s->
ö°ru˘i⁄s_num
,

145 
oÊ_°ru˘s_‰ì_ö°ru˘i⁄
, 
íåy
->
dp
->
exp
);

147 
íåy
->
°©s
->
ö°ru˘i⁄s_num
 = instructions_num;

148 
íåy
->
°©s
->
ö°ru˘i⁄s
 = instructions;

150 
	`öô_group_ªfs
(
íåy
);

151 
	}
}

153 
boﬁ


154 
	$Êow_íåy_idÀ_timeout
(
Êow_íåy
 *
íåy
) {

155 
boﬁ
 
timeout
;

157 
timeout
 = (
íåy
->
°©s
->
idÀ_timeout
 != 0) &&

158 (
	`time_m£c
(Ë> 
íåy
->
œ°_u£d
 +É¡ry->
°©s
->
idÀ_timeout
 * 1000);

160 i‡(
timeout
) {

161 
	`Êow_íåy_ªmove
(
íåy
, 
OFPRR_IDLE_TIMEOUT
);

163  
timeout
;

164 
	}
}

166 
boﬁ


167 
	$Êow_íåy_h¨d_timeout
(
Êow_íåy
 *
íåy
) {

168 
boﬁ
 
timeout
;

170 
timeout
 = (
íåy
->
ªmove_©
 !0Ë&& (
	`time_m£c
() >Éntry->remove_at);

172 i‡(
timeout
) {

173 
	`Êow_íåy_ªmove
(
íåy
, 
OFPRR_HARD_TIMEOUT
);

175  
timeout
;

176 
	}
}

179 
	$Êow_íåy_upd©e
(
Êow_íåy
 *
íåy
) {

180 
íåy
->
°©s
->
duøti⁄_£c
 = (
	`time_m£c
(Ë-É¡ry->
¸óãd
) / 1000;

181 
íåy
->
°©s
->
duøti⁄_n£c
 = ((
	`time_m£c
(Ë-É¡ry->
¸óãd
) % 1000) * 1000;

182 
	}
}

185 
boﬁ


186 
	$has_group_ªf
(
Êow_íåy
 *
íåy
, 
uöt32_t
 
group_id
) {

187 
group_ªf_íåy
 *
g
;

189 
	`LIST_FOR_EACH
(
g
, 
group_ªf_íåy
, 
node
, &
íåy
->
group_ªfs
) {

190 i‡(
g
->
group_id
 == group_id) {

191  
åue
;

194  
Ál£
;

195 
	}
}

199 
	$öô_group_ªfs
(
Êow_íåy
 *
íåy
) {

200 
group_ªf_íåy
 *
e
;

201 
size_t
 
i
,
j
;

203 
i
=0; i<
íåy
->
°©s
->
ö°ru˘i⁄s_num
; i++) {

204 i‡(
íåy
->
°©s
->
ö°ru˘i⁄s
[
i
]->
ty≥
 =
OFPIT_APPLY_ACTIONS
 ||

205 
íåy
->
°©s
->
ö°ru˘i⁄s
[
i
]->
ty≥
 =
OFPIT_WRITE_ACTIONS
) {

206 
oÊ_ö°ru˘i⁄_a˘i⁄s
 *
ü
 = (oÊ_ö°ru˘i⁄_a˘i⁄†*)
íåy
->
°©s
->
ö°ru˘i⁄s
[
i
];

208 
j
=0; j < 
ü
->
a˘i⁄s_num
; j++) {

209 i‡(
ü
->
a˘i⁄s
[
j
]->
ty≥
 =
OFPAT_GROUP
) {

210 
oÊ_a˘i⁄_group
 *
ag
 = (oÊ_a˘i⁄_grou∞*)(
ü
->
a˘i⁄s
[
j
]);

211 i‡(!
	`has_group_ªf
(
íåy
, 
ag
->
group_id
)) {

212 
group_ªf_íåy
 *
gª
 = 
	`xmÆloc
((group_ref_entry));

213 
gª
->
group_id
 = 
ag
->group_id;

214 
	`li°_ö£π
(&
íåy
->
group_ªfs
, &
gª
->
node
);

222 
	`LIST_FOR_EACH
(
e
, 
group_ªf_íåy
, 
node
, &
íåy
->
group_ªfs
) {

223 
group_íåy
 *
group
 = 
	`group_èbÀ_föd
(
íåy
->
dp
->
groups
, 
e
->
group_id
);

224 i‡(
group
 !
NULL
) {

225 
	`group_íåy_add_Êow_ªf
(
group
, 
íåy
);

227 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryögÅÿac˚s†n⁄-exi°ög group(%u).", 
e
->
group_id
);

230 
	}
}

235 
	$dñ_group_ªfs
(
Êow_íåy
 *
íåy
) {

236 
group_ªf_íåy
 *
gª
, *
√xt
;

238 
	`LIST_FOR_EACH_SAFE
(
gª
, 
√xt
, 
group_ªf_íåy
, 
node
, &
íåy
->
group_ªfs
) {

240 
group_íåy
 *
group
 = 
	`group_èbÀ_föd
(
íåy
->
dp
->
groups
, 
gª
->
group_id
);

241 i‡(
group
 !
NULL
) {

242 
	`group_íåy_dñ_Êow_ªf
(
group
, 
íåy
);

244 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryögÅÿac˚s†n⁄-exi°ög group(%u).", 
gª
->
group_id
);

246 
	`li°_ªmove
(&
gª
->
node
);

247 
	`‰ì
(
gª
);

249 
	}
}

253 
boﬁ


254 
	$has_mëî_ªf
(
Êow_íåy
 *
íåy
, 
uöt32_t
 
mëî_id
) {

255 
mëî_ªf_íåy
 *
m
;

257 
	`LIST_FOR_EACH
(
m
, 
mëî_ªf_íåy
, 
node
, &
íåy
->
mëî_ªfs
) {

258 i‡(
m
->
mëî_id
 == meter_id) {

259  
åue
;

262  
Ál£
;

263 
	}
}

267 
	$öô_mëî_ªfs
(
Êow_íåy
 *
íåy
) {

268 
mëî_ªf_íåy
 *
e
;

269 
size_t
 
i
;

271 
i
=0; i<
íåy
->
°©s
->
ö°ru˘i⁄s_num
; i++) {

272 i‡(
íåy
->
°©s
->
ö°ru˘i⁄s
[
i
]->
ty≥
 =
OFPIT_METER
 ) {

273 
oÊ_ö°ru˘i⁄_mëî
 *
ü
 = (oÊ_ö°ru˘i⁄_mëî *)
íåy
->
°©s
->
ö°ru˘i⁄s
[
i
];

275 i‡(!
	`has_mëî_ªf
(
íåy
, 
ü
->
mëî_id
)) {

276 
mëî_ªf_íåy
 *
mª
 = 
	`xmÆloc
((meter_ref_entry));

277 
mª
->
mëî_id
 = 
ü
->meter_id;

278 
	`li°_ö£π
(&
íåy
->
mëî_ªfs
, &
mª
->
node
);

285 
	`LIST_FOR_EACH
(
e
, 
mëî_ªf_íåy
, 
node
, &
íåy
->
mëî_ªfs
) {

286 
mëî_íåy
 *
mëî
 = 
	`mëî_èbÀ_föd
(
íåy
->
dp
->
mëîs
, 
e
->
mëî_id
);

287 i‡(
mëî
 !
NULL
) {

288 
	`mëî_íåy_add_Êow_ªf
(
mëî
, 
íåy
);

290 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryögÅÿac˚s†n⁄-exi°ög mëî(%u).", 
e
->
mëî_id
);

293 
	}
}

298 
	$dñ_mëî_ªfs
(
Êow_íåy
 *
íåy
) {

299 
mëî_ªf_íåy
 *
mª
, *
√xt
;

301 
	`LIST_FOR_EACH_SAFE
(
mª
, 
√xt
, 
mëî_ªf_íåy
, 
node
, &
íåy
->
mëî_ªfs
) {

303 
mëî_íåy
 *
mëî
 = 
	`mëî_èbÀ_föd
(
íåy
->
dp
->
mëîs
, 
mª
->
mëî_id
);

304 i‡(
mëî
 !
NULL
) {

305 
	`mëî_íåy_dñ_Êow_ªf
(
mëî
, 
íåy
);

307 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryögÅÿac˚s†n⁄-exi°ög mëî(%u).", 
mª
->
mëî_id
);

309 
	`li°_ªmove
(&
mª
->
node
);

310 
	`‰ì
(
mª
);

312 
	}
}

315 
Êow_íåy
 *

316 
	$Êow_íåy_¸óã
(
d©≠©h
 *
dp
, 
Êow_èbÀ
 *
èbÀ
, 
oÊ_msg_Êow_mod
 *
mod
) {

317 
Êow_íåy
 *
íåy
;

318 
uöt64_t
 
now
;

320 
now
 = 
	`time_m£c
();

322 
íåy
 = 
	`xmÆloc
((
Êow_íåy
));

323 
íåy
->
dp
 = dp;

324 
íåy
->
èbÀ
 =Åable;

326 
íåy
->
°©s
 = 
	`xmÆloc
((
oÊ_Êow_°©s
));

328 
íåy
->
°©s
->
èbÀ_id
 = 
mod
->table_id;

329 
íåy
->
°©s
->
duøti⁄_£c
 = 0;

330 
íåy
->
°©s
->
duøti⁄_n£c
 = 0;

331 
íåy
->
°©s
->
¥i‹ôy
 = 
mod
->priority;

332 
íåy
->
°©s
->
idÀ_timeout
 = 
mod
->idle_timeout;

333 
íåy
->
°©s
->
h¨d_timeout
 = 
mod
->hard_timeout;

334 
íåy
->
°©s
->
cookõ
 = 
mod
->cookie;

335 
íåy
->
no_pkt_cou¡
 = ((
mod
->
Êags
 & 
OFPFF_NO_PKT_COUNTS
) != 0 );

336 
íåy
->
no_byt_cou¡
 = ((
mod
->
Êags
 & 
OFPFF_NO_BYT_COUNTS
) != 0 );

337 i‡(
íåy
->
no_pkt_cou¡
)

338 
íåy
->
°©s
->
∑ckë_cou¡
 = 0xffffffffffffffff;

340 
íåy
->
°©s
->
∑ckë_cou¡
 = 0;

341 i‡(
íåy
->
no_byt_cou¡
)

342 
íåy
->
°©s
->
byã_cou¡
 = 0xffffffffffffffff;

344 
íåy
->
°©s
->
byã_cou¡
 = 0;

346 
íåy
->
°©s
->
m©ch
 = 
mod
->match;

347 
íåy
->
°©s
->
ö°ru˘i⁄s_num
 = 
mod
->instructions_num;

348 
íåy
->
°©s
->
ö°ru˘i⁄s
 = 
mod
->instructions;

350 
íåy
->
m©ch
 = 
mod
->match;

352 
íåy
->
¸óãd
 = 
now
;

353 
íåy
->
ªmove_©
 = 
mod
->
h¨d_timeout
 == 0 ? 0

354 : 
now
 + 
mod
->
h¨d_timeout
 * 1000;

355 
íåy
->
œ°_u£d
 = 
now
;

356 
íåy
->
£nd_ªmoved
 = ((
mod
->
Êags
 & 
OFPFF_SEND_FLOW_REM
) != 0);

357 
	`li°_öô
(&
íåy
->
m©ch_node
);

358 
	`li°_öô
(&
íåy
->
idÀ_node
);

359 
	`li°_öô
(&
íåy
->
h¨d_node
);

361 
	`li°_öô
(&
íåy
->
group_ªfs
);

362 
	`öô_group_ªfs
(
íåy
);

364 
	`li°_öô
(&
íåy
->
mëî_ªfs
);

365 
	`öô_mëî_ªfs
(
íåy
);

367  
íåy
;

368 
	}
}

371 
	$Êow_íåy_de°roy
(
Êow_íåy
 *
íåy
) {

374 
	`dñ_group_ªfs
(
íåy
);

375 
	`dñ_mëî_ªfs
(
íåy
);

376 
	`oÊ_°ru˘s_‰ì_Êow_°©s
(
íåy
->
°©s
,É¡ry->
dp
->
exp
);

379 
	`‰ì
(
íåy
);

380 
	}
}

383 
	$Êow_íåy_ªmove
(
Êow_íåy
 *
íåy
, 
uöt8_t
 
ªas⁄
) {

384 i‡(
íåy
->
£nd_ªmoved
) {

385 
	`Êow_íåy_upd©e
(
íåy
);

387 
oÊ_msg_Êow_ªmoved
 
msg
 =

388 {{.
ty≥
 = 
OFPT_FLOW_REMOVED
},

389 .
ªas⁄
 =Ñeason,

390 .
°©s
 = 
íåy
->stats};

392 
	`dp_£nd_mesßge
(
íåy
->
dp
, (
oÊ_msg_hódî
 *)&
msg
, 
NULL
);

396 
	`li°_ªmove
(&
íåy
->
m©ch_node
);

397 
	`li°_ªmove
(&
íåy
->
h¨d_node
);

398 
	`li°_ªmove
(&
íåy
->
idÀ_node
);

399 
íåy
->
èbÀ
->
°©s
->
a˘ive_cou¡
--;

400 
	`Êow_íåy_de°roy
(
íåy
);

401 
	}
}

	@udatapath/flow_entry.h

31 #i‚de‡
FLOW_íåy_H


32 
	#FLOW_íåy_H
 1

	)

35 
	~<°dboﬁ.h
>

36 
	~<sys/ty≥s.h
>

37 
	~"d©≠©h.h
"

38 
	~"li°.h
"

39 
	~"oÊib/oÊ-°ru˘s.h
"

40 
	~"oÊib/oÊ-mesßges.h
"

41 
	~"timevÆ.h
"

47 
	sÊow_íåy
 {

48 
li°
 
	mm©ch_node
;

49 
li°
 
	mh¨d_node
;

50 
li°
 
	midÀ_node
;

52 
d©≠©h
 *
	mdp
;

53 
Êow_èbÀ
 *
	mèbÀ
;

54 
oÊ_Êow_°©s
 *
	m°©s
;

55 
oÊ_m©ch_hódî
 *
	mm©ch
;

58 
uöt64_t
 
	m¸óãd
;

59 
uöt64_t
 
	mªmove_©
;

61 
uöt64_t
 
	mœ°_u£d
;

62 
boﬁ
 
	m£nd_ªmoved
;

65 
boﬁ
 
	mno_pkt_cou¡
;

66 
boﬁ
 
	mno_byt_cou¡
;

67 
li°
 
	mgroup_ªfs
;

68 
li°
 
	mmëî_ªfs
;

71 
	g∑ckë
;

74 
boﬁ


75 
Êow_íåy_m©ches
(
Êow_íåy
 *
íåy
, 
oÊ_msg_Êow_mod
 *
mod
, 
boﬁ
 
°ri˘
, boﬁ 
check_cookõ
);

78 
boﬁ


79 
Êow_íåy_ovîœps
(
Êow_íåy
 *
íåy
, 
oÊ_msg_Êow_mod
 *
mod
);

83 
Êow_íåy_ª∂a˚_ö°ru˘i⁄s
(
Êow_íåy
 *
íåy
,

84 
size_t
 
ö°ru˘i⁄s_num
,

85 
oÊ_ö°ru˘i⁄_hódî
 **
ö°ru˘i⁄s
);

89 
boﬁ


90 
Êow_íåy_idÀ_timeout
(
Êow_íåy
 *
íåy
);

94 
boﬁ


95 
Êow_íåy_h¨d_timeout
(
Êow_íåy
 *
íåy
);

98 
boﬁ


99 
Êow_íåy_has_out_p‹t
(
Êow_íåy
 *
íåy
, 
uöt32_t
 
p‹t
);

102 
boﬁ


103 
Êow_íåy_has_out_group
(
Êow_íåy
 *
íåy
, 
uöt32_t
 
group
);

108 
Êow_íåy_upd©e
(
Êow_íåy
 *
íåy
);

111 
Êow_íåy
 *

112 
Êow_íåy_¸óã
(
d©≠©h
 *
dp
, 
Êow_èbÀ
 *
èbÀ
, 
oÊ_msg_Êow_mod
 *
mod
);

116 
Êow_íåy_de°roy
(
Êow_íåy
 *
íåy
);

120 
Êow_íåy_ªmove
(
Êow_íåy
 *
íåy
, 
uöt8_t
 
ªas⁄
);

	@udatapath/flow_table.c

31 
	~<°dboﬁ.h
>

32 
	~<°rög.h
>

33 
	~"dy«mic-°rög.h
"

34 
	~"d©≠©h.h
"

35 
	~"Êow_èbÀ.h
"

36 
	~"Êow_íåy.h
"

37 
	~"oÊib/oÊ.h
"

38 
	~"oÊib/oxm-m©ch.h
"

39 
	~"time.h
"

40 
	~"dp_ˇ∑bûôõs.h
"

43 
	~"vlog.h
"

44 
	#LOG_MODULE
 
VLM_Êow_t


	)

46 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

48 
uöt32_t
 
	goxm_ids
[]={
OXM_OF_IN_PORT
,
OXM_OF_IN_PHY_PORT
,
OXM_OF_METADATA
,
OXM_OF_ETH_DST
,

49 
OXM_OF_ETH_SRC
,
OXM_OF_ETH_TYPE
, 
OXM_OF_VLAN_VID
, 
OXM_OF_VLAN_PCP
, 
OXM_OF_IP_DSCP
,

50 
OXM_OF_IP_ECN
, 
OXM_OF_IP_PROTO
, 
OXM_OF_IPV4_SRC
, 
OXM_OF_IPV4_DST
, 
OXM_OF_TCP_SRC
,

51 
OXM_OF_TCP_DST
, 
OXM_OF_UDP_SRC
, 
OXM_OF_UDP_DST
, 
OXM_OF_SCTP_SRC
, 
OXM_OF_SCTP_DST
,

52 
OXM_OF_ICMPV4_TYPE
, 
OXM_OF_ICMPV4_CODE
, 
OXM_OF_ARP_OP
, 
OXM_OF_ARP_SPA
,
OXM_OF_ARP_TPA
,

53 
OXM_OF_ARP_SHA
, 
OXM_OF_ARP_THA
, 
OXM_OF_IPV6_SRC
, 
OXM_OF_IPV6_DST
, 
OXM_OF_IPV6_FLABEL
,

54 
OXM_OF_ICMPV6_TYPE
, 
OXM_OF_ICMPV6_CODE
, 
OXM_OF_IPV6_ND_TARGET
, 
OXM_OF_IPV6_ND_SLL
,

55 
OXM_OF_IPV6_ND_TLL
, 
OXM_OF_MPLS_LABEL
, 
OXM_OF_MPLS_TC
, 
OXM_OF_MPLS_BOS
, 
OXM_OF_PBB_ISID
,

56 
OXM_OF_TUNNEL_ID
, 
OXM_OF_IPV6_EXTHDR
};

58 
uöt32_t
 
	gwûdˇrded
[] = {
OXM_OF_METADATA
, 
OXM_OF_ETH_DST
, 
OXM_OF_ETH_SRC
, 
OXM_OF_VLAN_VID
, 
OXM_OF_IPV4_SRC
,

59 
OXM_OF_IPV4_DST
, 
OXM_OF_ARP_SPA
, 
OXM_OF_ARP_TPA
, 
OXM_OF_ARP_SHA
, 
OXM_OF_ARP_THA
, 
OXM_OF_IPV6_SRC
,

60 
OXM_OF_IPV6_DST
 , 
OXM_OF_IPV6_FLABEL
, 
OXM_OF_PBB_ISID
, 
OXM_OF_TUNNEL_ID
, 
OXM_OF_IPV6_EXTHDR
};

63 
oÊ_ö°ru˘i⁄_hódî
 
	gö°ru˘i⁄s
[] = { {
OFPIT_GOTO_TABLE
},

64 {
OFPIT_WRITE_METADATA
 },{
OFPIT_WRITE_ACTIONS
},{
OFPIT_APPLY_ACTIONS
},

65 {
OFPIT_CLEAR_ACTIONS
},{
OFPIT_METER
}} ;

67 
oÊ_a˘i⁄_hódî
 
	ga˘i⁄s
[] = { {
OFPAT_OUTPUT
, 4},

68 {
OFPAT_COPY_TTL_OUT
, 4},{
OFPAT_COPY_TTL_IN
, 4},{
OFPAT_SET_MPLS_TTL
, 4},

69 {
OFPAT_DEC_MPLS_TTL
, 4},{
OFPAT_PUSH_VLAN
, 4},{
OFPAT_POP_VLAN
, 4}, {
OFPAT_PUSH_MPLS
, 4},

70 {
OFPAT_POP_MPLS
, 4},{
OFPAT_SET_QUEUE
, 4}, {
OFPAT_GROUP
, 4}, {
OFPAT_SET_NW_TTL
, 4}, {
OFPAT_DEC_NW_TTL
, 4},

71 {
OFPAT_SET_FIELD
, 4}, {
OFPAT_PUSH_PBB
, 4}, {
OFPAT_POP_PBB
, 4} } ;

76 
	$add_to_timeout_li°s
(
Êow_èbÀ
 *
èbÀ
, 
Êow_íåy
 *
íåy
) {

77 i‡(
íåy
->
°©s
->
idÀ_timeout
 > 0) {

78 
	`li°_ö£π
(&
èbÀ
->
idÀ_íåõs
, &
íåy
->
idÀ_node
);

81 i‡(
íåy
->
ªmove_©
 > 0) {

82 
Êow_íåy
 *
e
;

85 
	`LIST_FOR_EACH
 (
e
, 
Êow_íåy
, 
h¨d_node
, &
èbÀ
->
h¨d_íåõs
) {

86 i‡(
e
->
ªmove_©
 > 
íåy
->remove_at) {

87 
	`li°_ö£π
(&
e
->
h¨d_node
, &
íåy
->hard_node);

91 
	`li°_ö£π
(&
e
->
h¨d_node
, &
íåy
->hard_node);

93 
	}
}

96 
oÊ_îr


97 
	$Êow_èbÀ_add
(
Êow_èbÀ
 *
èbÀ
, 
oÊ_msg_Êow_mod
 *
mod
, 
boﬁ
 
check_ovîœp
, boﬁ *
m©ch_kït
, boﬁ *
ö°s_kït
) {

99 
Êow_íåy
 *
íåy
, *
√w_íåy
;

101 
	`LIST_FOR_EACH
 (
íåy
, 
Êow_íåy
, 
m©ch_node
, &
èbÀ
->
m©ch_íåõs
) {

102 i‡(
check_ovîœp
 && 
	`Êow_íåy_ovîœps
(
íåy
, 
mod
)) {

103  
	`oÊ_îr‹
(
OFPET_FLOW_MOD_FAILED
, 
OFPFMFC_OVERLAP
);

107 i‡(
	`Êow_íåy_m©ches
(
íåy
, 
mod
, 
åue
 , 
Ál£
 )) {

108 
√w_íåy
 = 
	`Êow_íåy_¸óã
(
èbÀ
->
dp
,ÅabÀ, 
mod
);

109 *
m©ch_kït
 = 
åue
;

110 *
ö°s_kït
 = 
åue
;

113 
	`li°_ª∂a˚
(&
√w_íåy
->
m©ch_node
, &
íåy
->match_node);

114 
	`li°_ªmove
(&
íåy
->
h¨d_node
);

115 
	`li°_ªmove
(&
íåy
->
idÀ_node
);

116 
	`Êow_íåy_de°roy
(
íåy
);

117 
	`add_to_timeout_li°s
(
èbÀ
, 
√w_íåy
);

121 i‡(
mod
->
¥i‹ôy
 > 
íåy
->
°©s
->priority) {

126 i‡(
èbÀ
->
°©s
->
a˘ive_cou¡
 =
FLOW_TABLE_MAX_ENTRIES
) {

127  
	`oÊ_îr‹
(
OFPET_FLOW_MOD_FAILED
, 
OFPFMFC_TABLE_FULL
);

129 
èbÀ
->
°©s
->
a˘ive_cou¡
++;

131 
√w_íåy
 = 
	`Êow_íåy_¸óã
(
èbÀ
->
dp
,ÅabÀ, 
mod
);

132 *
m©ch_kït
 = 
åue
;

133 *
ö°s_kït
 = 
åue
;

135 
	`li°_ö£π
(&
íåy
->
m©ch_node
, &
√w_íåy
->match_node);

136 
	`add_to_timeout_li°s
(
èbÀ
, 
√w_íåy
);

139 
	}
}

143 
oÊ_îr


144 
	$Êow_èbÀ_modify
(
Êow_èbÀ
 *
èbÀ
, 
oÊ_msg_Êow_mod
 *
mod
, 
boﬁ
 
°ri˘
, boﬁ *
ö°s_kït
) {

145 
Êow_íåy
 *
íåy
;

147 
	`LIST_FOR_EACH
 (
íåy
, 
Êow_íåy
, 
m©ch_node
, &
èbÀ
->
m©ch_íåõs
) {

148 i‡(
	`Êow_íåy_m©ches
(
íåy
, 
mod
, 
°ri˘
, 
åue
 )) {

149 
	`Êow_íåy_ª∂a˚_ö°ru˘i⁄s
(
íåy
, 
mod
->
ö°ru˘i⁄s_num
, mod->
ö°ru˘i⁄s
);

150 *
ö°s_kït
 = 
åue
;

155 
	}
}

158 
oÊ_îr


159 
	$Êow_èbÀ_dñëe
(
Êow_èbÀ
 *
èbÀ
, 
oÊ_msg_Êow_mod
 *
mod
, 
boﬁ
 
°ri˘
) {

160 
Êow_íåy
 *
íåy
, *
√xt
;

162 
	`LIST_FOR_EACH_SAFE
 (
íåy
, 
√xt
, 
Êow_íåy
, 
m©ch_node
, &
èbÀ
->
m©ch_íåõs
) {

163 i‡((
mod
->
out_p‹t
 =
OFPP_ANY
 || 
	`Êow_íåy_has_out_p‹t
(
íåy
, mod->out_port)) &&

164 (
mod
->
out_group
 =
OFPG_ANY
 || 
	`Êow_íåy_has_out_group
(
íåy
, mod->out_group)) &&

165 
	`Êow_íåy_m©ches
(
íåy
, 
mod
, 
°ri˘
, 
åue
 )) {

166 
	`Êow_íåy_ªmove
(
íåy
, 
OFPRR_DELETE
);

171 
	}
}

174 
oÊ_îr


175 
	$Êow_èbÀ_Êow_mod
(
Êow_èbÀ
 *
èbÀ
, 
oÊ_msg_Êow_mod
 *
mod
, 
boﬁ
 *
m©ch_kït
, boﬁ *
ö°s_kït
) {

176 
mod
->
comm™d
) {

177 (
OFPFC_ADD
): {

178 
boﬁ
 
ovîœp
 = ((
mod
->
Êags
 & 
OFPFF_CHECK_OVERLAP
) != 0);

179  
	`Êow_èbÀ_add
(
èbÀ
, 
mod
, 
ovîœp
, 
m©ch_kït
, 
ö°s_kït
);

181 (
OFPFC_MODIFY
): {

182  
	`Êow_èbÀ_modify
(
èbÀ
, 
mod
, 
Ál£
, 
ö°s_kït
);

184 (
OFPFC_MODIFY_STRICT
): {

185  
	`Êow_èbÀ_modify
(
èbÀ
, 
mod
, 
åue
, 
ö°s_kït
);

187 (
OFPFC_DELETE
): {

188  
	`Êow_èbÀ_dñëe
(
èbÀ
, 
mod
, 
Ál£
);

190 (
OFPFC_DELETE_STRICT
): {

191  
	`Êow_èbÀ_dñëe
(
èbÀ
, 
mod
, 
åue
);

194  
	`oÊ_îr‹
(
OFPET_FLOW_MOD_FAILED
, 
OFPFMFC_BAD_COMMAND
);

197 
	}
}

200 
Êow_íåy
 *

201 
	$Êow_èbÀ_lookup
(
Êow_èbÀ
 *
èbÀ
, 
∑ckë
 *
pkt
) {

202 
Êow_íåy
 *
íåy
;

204 
èbÀ
->
°©s
->
lookup_cou¡
++;

206 
	`LIST_FOR_EACH
(
íåy
, 
Êow_íåy
, 
m©ch_node
, &
èbÀ
->
m©ch_íåõs
) {

207 
oÊ_m©ch_hódî
 *
m
;

209 
m
 = 
íåy
->
m©ch
 =
NULL
 ?É¡ry->
°©s
->match :Éntry->match;

212 
m
->
ty≥
) {

213 (
OFPMT_OXM
): {

214 i‡(
	`∑ckë_h™dÀ_°d_m©ch
(
pkt
->
h™dÀ_°d
,

215 (
oÊ_m©ch
 *)
m
)) {

216 i‡(!
íåy
->
no_byt_cou¡
)

217 
íåy
->
°©s
->
byã_cou¡
 +
pkt
->
buf„r
->
size
;

218 i‡(!
íåy
->
no_pkt_cou¡
)

219 
íåy
->
°©s
->
∑ckë_cou¡
++;

220 
íåy
->
œ°_u£d
 = 
	`time_m£c
();

222 
èbÀ
->
°©s
->
m©ched_cou¡
++;

224  
íåy
;

231 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryögÅÿ¥o˚s†ÊowÉ¡ry wôh unknow¿m©chÅy≥ (%u).", 
m
->
ty≥
);

236  
NULL
;

237 
	}
}

242 
	$Êow_èbÀ_timeout
(
Êow_èbÀ
 *
èbÀ
) {

243 
Êow_íåy
 *
íåy
, *
√xt
;

247 
	`LIST_FOR_EACH_SAFE
 (
íåy
, 
√xt
, 
Êow_íåy
, 
h¨d_node
, &
èbÀ
->
h¨d_íåõs
) {

248 i‡(!
	`Êow_íåy_h¨d_timeout
(
íåy
)) {

253 
	`LIST_FOR_EACH_SAFE
 (
íåy
, 
√xt
, 
Êow_íåy
, 
idÀ_node
, &
èbÀ
->
idÀ_íåõs
) {

254 
	`Êow_íåy_idÀ_timeout
(
íåy
);

256 
	}
}

260 
	$Êow_èbÀ_¸óã_¥›îty
(
oÊ_èbÀ_„©uª_¥›_hódî
 **
¥›
, 
oÂ_èbÀ_„©uª_¥›_ty≥
 
ty≥
){

262 
ty≥
){

263 
OFPTFPT_INSTRUCTIONS
:

264 
OFPTFPT_INSTRUCTIONS_MISS
:{

265 
oÊ_èbÀ_„©uª_¥›_ö°ru˘i⁄s
 *
ö°_ˇ∑bûôõs
;

266 
ö°_ˇ∑bûôõs
 = 
	`xmÆloc
((
oÊ_èbÀ_„©uª_¥›_ö°ru˘i⁄s
));

267 
ö°_ˇ∑bûôõs
->
hódî
.
ty≥
 =Åype;

268 
ö°_ˇ∑bûôõs
->
ids_num
 = 
N_INSTRUCTIONS
;

269 
ö°_ˇ∑bûôõs
->
ö°ru˘i⁄_ids
 = 
ö°ru˘i⁄s
;

270 
ö°_ˇ∑bûôõs
->
hódî
.
Àngth
 = 
	`oÊ_°ru˘s_èbÀ_„©uªs_¥›îtõs_oÂ_Àn
(&ö°_ˇ∑bûôõs->hódî, 
NULL
);

271 (*
¥›
Ë(
oÊ_èbÀ_„©uª_¥›_hódî
*Ë
ö°_ˇ∑bûôõs
;

274 
OFPTFPT_NEXT_TABLES
:

275 
OFPTFPT_NEXT_TABLES_MISS
:{

276 
oÊ_èbÀ_„©uª_¥›_√xt_èbÀs
 *
tbl_ªachabÀ
;

277 
i
;

278 
tbl_ªachabÀ
 = 
	`xmÆloc
((
oÊ_èbÀ_„©uª_¥›_√xt_èbÀs
));

279 
tbl_ªachabÀ
->
hódî
.
ty≥
 =Åype;

280 
tbl_ªachabÀ
->
èbÀ_num
 = 
PIPELINE_TABLES
 ;

281 
tbl_ªachabÀ
->
√xt_èbÀ_ids
 = 
	`xmÆloc
((
uöt8_t
Ë*Åbl_ªachabÀ->
èbÀ_num
);

282 
i
=0; i < 
tbl_ªachabÀ
->
èbÀ_num
; i++)

283 
tbl_ªachabÀ
->
√xt_èbÀ_ids
[
i
] = i;

284 
tbl_ªachabÀ
->
hódî
.
Àngth
 = 
	`oÊ_°ru˘s_èbÀ_„©uªs_¥›îtõs_oÂ_Àn
(&tbl_ªachabÀ->hódî, 
NULL
);

285 *
¥›
 = (
oÊ_èbÀ_„©uª_¥›_hódî
*Ë
tbl_ªachabÀ
;

288 
OFPTFPT_APPLY_ACTIONS
:

289 
OFPTFPT_APPLY_ACTIONS_MISS
:

290 
OFPTFPT_WRITE_ACTIONS
:

291 
OFPTFPT_WRITE_ACTIONS_MISS
:{

292 
oÊ_èbÀ_„©uª_¥›_a˘i⁄s
 *
a˘_ˇ∑bûôõs
;

293 
a˘_ˇ∑bûôõs
 = 
	`xmÆloc
((
oÊ_èbÀ_„©uª_¥›_a˘i⁄s
));

294 
a˘_ˇ∑bûôõs
->
hódî
.
ty≥
 =Åype;

295 
a˘_ˇ∑bûôõs
->
a˘i⁄s_num

N_ACTIONS
;

296 
a˘_ˇ∑bûôõs
->
a˘i⁄_ids
 = 
a˘i⁄s
;

297 
a˘_ˇ∑bûôõs
->
hódî
.
Àngth
 = 
	`oÊ_°ru˘s_èbÀ_„©uªs_¥›îtõs_oÂ_Àn
(&a˘_ˇ∑bûôõs->hódî, 
NULL
);

298 *
¥›
 = (
oÊ_èbÀ_„©uª_¥›_hódî
*Ë
a˘_ˇ∑bûôõs
;

301 
OFPTFPT_MATCH
:

302 
OFPTFPT_APPLY_SETFIELD
:

303 
OFPTFPT_APPLY_SETFIELD_MISS
:

304 
OFPTFPT_WRITE_SETFIELD
:

305 
OFPTFPT_WRITE_SETFIELD_MISS
:{

306 
oÊ_èbÀ_„©uª_¥›_oxm
 *
oxm_ˇ∑bûôõs
;

307 
i
;

308 
oxm_ˇ∑bûôõs
 = 
	`xmÆloc
((
oÊ_èbÀ_„©uª_¥›_oxm
));

309 
oxm_ˇ∑bûôõs
->
hódî
.
ty≥
 =Åype;

310 
oxm_ˇ∑bûôõs
->
oxm_num
 = 
NUM_OXM_FIELDS
;

311 
oxm_ˇ∑bûôõs
->
oxm_ids
 = oxm_ids;

312 
oxm_ˇ∑bûôõs
->
hódî
.
Àngth
 = 
	`oÊ_°ru˘s_èbÀ_„©uªs_¥›îtõs_oÂ_Àn
(&oxm_ˇ∑bûôõs->hódî, 
NULL
);

313 *
¥›
 = (
oÊ_èbÀ_„©uª_¥›_hódî
*Ë
oxm_ˇ∑bûôõs
;

316 
OFPTFPT_WILDCARDS
:{

317 
oÊ_èbÀ_„©uª_¥›_oxm
 *
oxm_ˇ∑bûôõs
;

318 
oxm_ˇ∑bûôõs
 = 
	`xmÆloc
((
oÊ_èbÀ_„©uª_¥›_oxm
));

319 
oxm_ˇ∑bûôõs
->
hódî
.
ty≥
 =Åype;

320 
oxm_ˇ∑bûôõs
->
oxm_num
 = 
N_WILDCARDED
;

321 
oxm_ˇ∑bûôõs
->
oxm_ids
 = 
wûdˇrded
;

322 
oxm_ˇ∑bûôõs
->
hódî
.
Àngth
 = 
	`oÊ_°ru˘s_èbÀ_„©uªs_¥›îtõs_oÂ_Àn
(&oxm_ˇ∑bûôõs->hódî, 
NULL
);

323 *
¥›
 = (
oÊ_èbÀ_„©uª_¥›_hódî
*Ë
oxm_ˇ∑bûôõs
;

326 
OFPTFPT_EXPERIMENTER
:

327 
OFPTFPT_EXPERIMENTER_MISS
:{

331 
	}
}

334 
	$Êow_èbÀ_„©uªs
(
oÊ_èbÀ_„©uªs
 *
„©uªs
){

336 
ty≥
, 
j
;

337 
„©uªs
->
¥›îtõs
 = (
oÊ_èbÀ_„©uª_¥›_hódî
 **Ë
	`xmÆloc
((oÊ_èbÀ_„©uª_¥›_hódî *Ë* 
TABLE_FEATURES_NUM
);

338 
j
 = 0;

339 
ty≥
 = 
OFPTFPT_INSTRUCTIONS
;Åy≥ <
OFPTFPT_APPLY_SETFIELD_MISS
;Åype++){

341 
	`Êow_èbÀ_¸óã_¥›îty
(&
„©uªs
->
¥›îtõs
[
j
], 
ty≥
);

342 if(
ty≥
 =
OFPTFPT_MATCH
||Åy≥ =
OFPTFPT_WILDCARDS
){

343 
ty≥
++;

345 
j
++;

348 if(
j
 !
TABLE_FEATURES_NUM
) {

349 
	`VLOG_WARN
(
LOG_MODULE
, "InvÆidÇumbî o‡èbÀ fótuªs, %d in°ód o‡%d.", 
j
, 
TABLE_FEATURES_NUM
);

350 
	`ab‹t
();

352  
j
;

353 
	}
}

355 
Êow_èbÀ
 *

356 
	$Êow_èbÀ_¸óã
(
d©≠©h
 *
dp
, 
uöt8_t
 
èbÀ_id
) {

357 
Êow_èbÀ
 *
èbÀ
;

358 
ds
 
°rög
 = 
DS_EMPTY_INITIALIZER
;

360 
	`ds_put_f‹m©
(&
°rög
, "èbÀ_%u", 
èbÀ_id
);

362 
èbÀ
 = 
	`xmÆloc
((
Êow_èbÀ
));

363 
èbÀ
->
dp
 = dp;

366 
èbÀ
->
°©s
 = 
	`xmÆloc
((
oÊ_èbÀ_°©s
));

367 
èbÀ
->
°©s
->
èbÀ_id
 =Åable_id;

368 
èbÀ
->
°©s
->
a˘ive_cou¡
 = 0;

369 
èbÀ
->
°©s
->
lookup_cou¡
 = 0;

370 
èbÀ
->
°©s
->
m©ched_cou¡
 = 0;

373 
èbÀ
->
„©uªs
 = 
	`xmÆloc
((
oÊ_èbÀ_„©uªs
));

374 
èbÀ
->
„©uªs
->
èbÀ_id
 =Åable_id;

375 
èbÀ
->
„©uªs
->
«me
 = 
	`ds_c°r
(&
°rög
);

376 
èbÀ
->
„©uªs
->
mëad©a_m©ch
 = 0xffffffffffffffff;

377 
èbÀ
->
„©uªs
->
mëad©a_wrôe
 = 0xffffffffffffffff;

378 
èbÀ
->
„©uªs
->
c⁄fig
 = 
OFPTC_TABLE_MISS_CONTROLLER
;

379 
èbÀ
->
„©uªs
->
max_íåõs
 = 
FLOW_TABLE_MAX_ENTRIES
;

380 
èbÀ
->
„©uªs
->
¥›îtõs_num
 = 
	`Êow_èbÀ_„©uªs
(table->features);

382 
	`li°_öô
(&
èbÀ
->
m©ch_íåõs
);

383 
	`li°_öô
(&
èbÀ
->
h¨d_íåõs
);

384 
	`li°_öô
(&
èbÀ
->
idÀ_íåõs
);

386  
èbÀ
;

387 
	}
}

390 
	$Êow_èbÀ_de°roy
(
Êow_èbÀ
 *
èbÀ
) {

391 
Êow_íåy
 *
íåy
, *
√xt
;

393 
	`LIST_FOR_EACH_SAFE
 (
íåy
, 
√xt
, 
Êow_íåy
, 
m©ch_node
, &
èbÀ
->
m©ch_íåõs
) {

394 
	`Êow_íåy_de°roy
(
íåy
);

396 
	`‰ì
(
èbÀ
->
„©uªs
);

397 
	`‰ì
(
èbÀ
->
°©s
);

398 
	`‰ì
(
èbÀ
);

399 
	}
}

402 
	$Êow_èbÀ_°©s
(
Êow_èbÀ
 *
èbÀ
, 
oÊ_msg_mu…ù¨t_ªque°_Êow
 *
msg
,

403 
oÊ_Êow_°©s
 ***
°©s
, 
size_t
 *
°©s_size
, size_à*
°©s_num
) {

404 
Êow_íåy
 *
íåy
;

406 
	`LIST_FOR_EACH
(
íåy
, 
Êow_íåy
, 
m©ch_node
, &
èbÀ
->
m©ch_íåõs
) {

407 i‡((
msg
->
out_p‹t
 =
OFPP_ANY
 || 
	`Êow_íåy_has_out_p‹t
(
íåy
, msg->out_port)) &&

408 (
msg
->
out_group
 =
OFPG_ANY
 || 
	`Êow_íåy_has_out_group
(
íåy
, msg->out_group)) &&

409 
	`m©ch_°d_n⁄°ri˘
((
oÊ_m©ch
 *)
msg
->
m©ch
,

410 (
oÊ_m©ch
 *)
íåy
->
°©s
->
m©ch
)) {

412 
	`Êow_íåy_upd©e
(
íåy
);

413 i‡((*
°©s_size
Ë=(*
°©s_num
)) {

414 (*
°©s
Ë
	`xªÆloc
(*°©s, ((
oÊ_Êow_°©s
 *)Ë* (*
°©s_size
) * 2);

415 *
°©s_size
 *= 2;

417 (*
°©s
)[(*
°©s_num
)] = 
íåy
->stats;

418 (*
°©s_num
)++;

421 
	}
}

424 
	$Êow_èbÀ_aggªg©e_°©s
(
Êow_èbÀ
 *
èbÀ
, 
oÊ_msg_mu…ù¨t_ªque°_Êow
 *
msg
,

425 
uöt64_t
 *
∑ckë_cou¡
, uöt64_à*
byã_cou¡
, 
uöt32_t
 *
Êow_cou¡
) {

426 
Êow_íåy
 *
íåy
;

428 
	`LIST_FOR_EACH
(
íåy
, 
Êow_íåy
, 
m©ch_node
, &
èbÀ
->
m©ch_íåõs
) {

429 i‡((
msg
->
out_p‹t
 =
OFPP_ANY
 || 
	`Êow_íåy_has_out_p‹t
(
íåy
, msg->out_port)) &&

430 (
msg
->
out_group
 =
OFPG_ANY
 || 
	`Êow_íåy_has_out_group
(
íåy
, msg->out_group))) {

432 i‡(!
íåy
->
no_pkt_cou¡
)

433 (*
∑ckë_cou¡
Ë+
íåy
->
°©s
->packet_count;

434 i‡(!
íåy
->
no_byt_cou¡
)

435 (*
byã_cou¡
Ë+
íåy
->
°©s
->byte_count;

436 (*
Êow_cou¡
)++;

440 
	}
}

	@udatapath/flow_table.h

31 #i‚de‡
FLOW_TABLE_H


32 
	#FLOW_TABLE_H
 1

	)

33 
	~"oÊib/oÊ.h
"

34 
	~"oÊib/oÊ-mesßges.h
"

35 
	~"oÊib/oÊ-°ru˘s.h
"

36 
	~"pùñöe.h
"

37 
	~"timevÆ.h
"

40 
	#FLOW_TABLE_MAX_ENTRIES
 1024

	)

41 
	#TABLE_FEATURES_NUM
 14

	)

44 
	#N_INSTRUCTIONS
 6

	)

45 
	#N_ACTIONS
 16

	)

46 
	#N_WILDCARDED
 16

	)

53 
	sÊow_èbÀ
 {

54 
d©≠©h
 *
	mdp
;

55 
oÊ_èbÀ_„©uªs
 *
	m„©uªs
;

56 
oÊ_èbÀ_°©s
 *
	m°©s
;

58 
li°
 
	mm©ch_íåõs
;

59 
li°
 
	mh¨d_íåõs
;

61 
li°
 
	midÀ_íåõs
;

65 
uöt32_t
 
oxm_ids
[];

67 
uöt32_t
 
wûdˇrded
[];

69 
oÊ_ö°ru˘i⁄_hódî
 
ö°ru˘i⁄s
[];

71 
oÊ_a˘i⁄_hódî
 
a˘i⁄s
[];

73 
oÊ_îr


74 
Êow_èbÀ_Êow_mod
(
Êow_èbÀ
 *
èbÀ
, 
oÊ_msg_Êow_mod
 *
mod
, 
boﬁ
 *
m©ch_kït
, boﬁ *
ö°s_kït
);

77 
Êow_íåy
 *

78 
Êow_èbÀ_lookup
(
Êow_èbÀ
 *
èbÀ
, 
∑ckë
 *
pkt
);

82 
Êow_èbÀ_timeout
(
Êow_èbÀ
 *
èbÀ
);

85 
Êow_èbÀ
 *

86 
Êow_èbÀ_¸óã
(
d©≠©h
 *
dp
, 
uöt8_t
 
èbÀ_id
);

90 
Êow_èbÀ_de°roy
(
Êow_èbÀ
 *
èbÀ
);

94 
Êow_èbÀ_°©s
(
Êow_èbÀ
 *
èbÀ
, 
oÊ_msg_mu…ù¨t_ªque°_Êow
 *
msg
,

95 
oÊ_Êow_°©s
 ***
°©s
, 
size_t
 *
°©s_size
, size_à*
°©s_num
);

99 
Êow_èbÀ_aggªg©e_°©s
(
Êow_èbÀ
 *
èbÀ
, 
oÊ_msg_mu…ù¨t_ªque°_Êow
 *
msg
,

100 
uöt64_t
 *
∑ckë_cou¡
, uöt64_à*
byã_cou¡
, 
uöt32_t
 *
Êow_cou¡
);

	@udatapath/group_entry.c

31 
	~<°dboﬁ.h
>

32 
	~"Êow_íåy.h
"

33 
	~"group_íåy.h
"

34 
	~"group_èbÀ.h
"

35 
	~"dp_a˘i⁄s.h
"

36 
	~"d©≠©h.h
"

37 
	~"utû.h
"

38 
	~"oÊib/oÊ.h
"

39 
	~"oÊib/oÊ-°ru˘s.h
"

40 
	~"oÊib/oÊ-utûs.h
"

42 
	~"vlog.h
"

43 
	#LOG_MODULE
 
VLM_group_e


	)

45 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

49 
	ggroup_èbÀ
;

50 
	gd©≠©h
;

53 
	sÊow_ªf_íåy
 {

54 
li°
 
	mnode
;

55 
Êow_íåy
 *
	míåy
;

59 
	sgroup_íåy_wº_d©a
 {

60 
uöt16_t
 
	mmax_weight
;

61 
uöt16_t
 
	mgcd_weight
;

62 
uöt16_t
 
	mcuº_weight
;

63 
size_t
 
	mcuº_buckë
;

66 
uöt16_t


67 
gcd
(
uöt16_t
 
a
, uöt16_à
b
);

69 
boﬁ


70 
buckë_is_Æive
(
oÊ_buckë
 *
buckë
, 
d©≠©h
 *
dp
);

73 
öô_£À˘_group
(
group_íåy
 *
íåy
, 
oÊ_msg_group_mod
 *
mod
);

75 
size_t


76 
£À˘_‰om_£À˘_group
(
group_íåy
 *
íåy
);

78 
size_t


79 
£À˘_‰om_ff_group
(
group_íåy
 *
íåy
);

82 
group_íåy
 *

83 
	$group_íåy_¸óã
(
d©≠©h
 *
dp
, 
group_èbÀ
 *
èbÀ
, 
oÊ_msg_group_mod
 *
mod
) {

84 
group_íåy
 *
íåy
;

85 
size_t
 
i
;

86 
uöt64_t
 
now
;

88 
now
 = 
	`time_m£c
();

89 
íåy
 = 
	`xmÆloc
((
group_íåy
));

91 
íåy
->
dp
 = dp;

92 
íåy
->
èbÀ
 =Åable;

94 
íåy
->
desc
 = 
	`xmÆloc
((
oÊ_group_desc_°©s
));

95 
íåy
->
desc
->
ty≥
 = 
mod
->type;

96 
íåy
->
desc
->
group_id
 = 
mod
->group_id;

97 
íåy
->
desc
->
buckës_num
 = 
mod
->buckets_num;

98 
íåy
->
desc
->
buckës
 = 
mod
->buckets;

100 
íåy
->
°©s
 = 
	`xmÆloc
((
oÊ_group_°©s
));

101 
íåy
->
°©s
->
group_id
 = 
mod
->group_id;

102 
íåy
->
°©s
->
ªf_cou¡
 = 0;

103 
íåy
->
°©s
->
∑ckë_cou¡
 = 0;

104 
íåy
->
°©s
->
byã_cou¡
 = 0;

105 
íåy
->
°©s
->
cou¡îs_num
 = 
mod
->
buckës_num
;

106 
íåy
->
°©s
->
cou¡îs
 = (
oÊ_buckë_cou¡î
 **Ë
	`xmÆloc
((oÊ_buckë_cou¡î *Ë*É¡ry->°©s->
cou¡îs_num
);

107 
íåy
->
°©s
->
duøti⁄_£c
 = 0;

108 
íåy
->
°©s
->
duøti⁄_n£c
 = 0;

110 
i
=0; i<
íåy
->
°©s
->
cou¡îs_num
; i++) {

111 
íåy
->
°©s
->
cou¡îs
[
i
] = (
oÊ_buckë_cou¡î
 *Ë
	`xmÆloc
((ofl_bucket_counter));

112 
íåy
->
°©s
->
cou¡îs
[
i
]->
∑ckë_cou¡
 = 0;

113 
íåy
->
°©s
->
cou¡îs
[
i
]->
byã_cou¡
 = 0;

116 
mod
->
ty≥
) {

117 (
OFPGT_SELECT
): {

118 
	`öô_£À˘_group
(
íåy
, 
mod
);

122 
íåy
->
d©a
 = 
NULL
;

126 
	`li°_öô
(&
íåy
->
Êow_ªfs
);

128  
íåy
;

129 
	}
}

133 
	$group_íåy_de°roy
(
group_íåy
 *
íåy
) {

134 
Êow_ªf_íåy
 *
ªf
, *
√xt
;

137 
	`LIST_FOR_EACH_SAFE
(
ªf
, 
√xt
, 
Êow_ªf_íåy
, 
node
, &
íåy
->
Êow_ªfs
) {

138 
	`Êow_íåy_ªmove
(
ªf
->
íåy
, 
OFPRR_GROUP_DELETE
);

144 
	`oÊ_°ru˘s_‰ì_group_desc_°©s
(
íåy
->
desc
,É¡ry->
dp
->
exp
);

145 
	`oÊ_°ru˘s_‰ì_group_°©s
(
íåy
->
°©s
);

146 
	`‰ì
(
íåy
->
d©a
);

147 
	`‰ì
(
íåy
);

148 
	}
}

152 
	$execuã_Æl
(
group_íåy
 *
íåy
, 
∑ckë
 *
pkt
) {

153 
size_t
 
i
;

157 
i
=0; i<
íåy
->
desc
->
buckës_num
; i++) {

158 
oÊ_buckë
 *
buckë
 = 
íåy
->
desc
->
buckës
[
i
];

159 
∑ckë
 *
p
 = 
	`∑ckë_˛⁄e
(
pkt
);

161 i‡(
	`VLOG_IS_DBG_ENABLED
(
LOG_MODULE
)) {

162 *
b
 = 
	`oÊ_°ru˘s_buckë_to_°rög
(
buckë
, 
íåy
->
dp
->
exp
);

163 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "Wrôög buckë: %s.", 
b
);

164 
	`‰ì
(
b
);

167 
	`a˘i⁄_£t_wrôe_a˘i⁄s
(
p
->
a˘i⁄_£t
, 
buckë
->
a˘i⁄s_num
, buckë->
a˘i⁄s
);

169 
íåy
->
°©s
->
byã_cou¡
 +
p
->
buf„r
->
size
;

170 
íåy
->
°©s
->
∑ckë_cou¡
++;

171 
íåy
->
°©s
->
cou¡îs
[
i
]->
byã_cou¡
 +
p
->
buf„r
->
size
;

172 
íåy
->
°©s
->
cou¡îs
[
i
]->
∑ckë_cou¡
++;

177 
	`a˘i⁄_£t_execuã
(
p
->
a˘i⁄_£t
,Ö, 0xffffffffffffffff);

179 
	`∑ckë_de°roy
(
p
);

181 
	}
}

185 
	$execuã_£À˘
(
group_íåy
 *
íåy
, 
∑ckë
 *
pkt
) {

186 
size_t
 
b
 = 
	`£À˘_‰om_£À˘_group
(
íåy
);

188 i‡(
b
 != -1) {

189 
oÊ_buckë
 *
buckë
 = 
íåy
->
desc
->
buckës
[
b
];

190 
∑ckë
 *
p
 = 
	`∑ckë_˛⁄e
(
pkt
);

192 i‡(
	`VLOG_IS_DBG_ENABLED
(
LOG_MODULE
)) {

193 *
b
 = 
	`oÊ_°ru˘s_buckë_to_°rög
(
buckë
, 
íåy
->
dp
->
exp
);

194 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "Wrôög buckë: %s.", 
b
);

195 
	`‰ì
(
b
);

198 
	`a˘i⁄_£t_wrôe_a˘i⁄s
(
p
->
a˘i⁄_£t
, 
buckë
->
a˘i⁄s_num
, buckë->
a˘i⁄s
);

200 
íåy
->
°©s
->
byã_cou¡
 +
p
->
buf„r
->
size
;

201 
íåy
->
°©s
->
∑ckë_cou¡
++;

202 
íåy
->
°©s
->
cou¡îs
[
b
]->
byã_cou¡
 +
p
->
buf„r
->
size
;

203 
íåy
->
°©s
->
cou¡îs
[
b
]->
∑ckë_cou¡
++;

207 
	`a˘i⁄_£t_execuã
(
p
->
a˘i⁄_£t
,Ö, 0xffffffffffffffff);

208 
	`∑ckë_de°roy
(
p
);

210 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "No bucket in group.");

212 
	}
}

216 
	$execuã_ödúe˘
(
group_íåy
 *
íåy
, 
∑ckë
 *
pkt
) {

218 i‡(
íåy
->
desc
->
buckës_num
 > 0) {

219 
oÊ_buckë
 *
buckë
 = 
íåy
->
desc
->
buckës
[0];

220 
∑ckë
 *
p
 = 
	`∑ckë_˛⁄e
(
pkt
);

222 i‡(
	`VLOG_IS_DBG_ENABLED
(
LOG_MODULE
)) {

223 *
b
 = 
	`oÊ_°ru˘s_buckë_to_°rög
(
buckë
, 
íåy
->
dp
->
exp
);

224 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "Wrôög buckë: %s.", 
b
);

225 
	`‰ì
(
b
);

228 
	`a˘i⁄_£t_wrôe_a˘i⁄s
(
p
->
a˘i⁄_£t
, 
buckë
->
a˘i⁄s_num
, buckë->
a˘i⁄s
);

230 
íåy
->
°©s
->
byã_cou¡
 +
p
->
buf„r
->
size
;

231 
íåy
->
°©s
->
∑ckë_cou¡
++;

232 
íåy
->
°©s
->
cou¡îs
[0]->
byã_cou¡
 +
p
->
buf„r
->
size
;

233 
íåy
->
°©s
->
cou¡îs
[0]->
∑ckë_cou¡
++;

237 
	`a˘i⁄_£t_execuã
(
p
->
a˘i⁄_£t
,Ö, 0xffffffffffffffff);

238 
	`∑ckë_de°roy
(
p
);

240 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "No bucket in group.");

242 
	}
}

246 
	$execuã_ff
(
group_íåy
 *
íåy
, 
∑ckë
 *
pkt
) {

247 
size_t
 
b
 = 
	`£À˘_‰om_ff_group
(
íåy
);

249 i‡(
b
 != -1) {

250 
oÊ_buckë
 *
buckë
 = 
íåy
->
desc
->
buckës
[
b
];

251 
∑ckë
 *
p
 = 
	`∑ckë_˛⁄e
(
pkt
);

253 i‡(
	`VLOG_IS_DBG_ENABLED
(
LOG_MODULE
)) {

254 *
b
 = 
	`oÊ_°ru˘s_buckë_to_°rög
(
buckë
, 
íåy
->
dp
->
exp
);

255 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "Wrôög buckë: %s.", 
b
);

256 
	`‰ì
(
b
);

259 
	`a˘i⁄_£t_wrôe_a˘i⁄s
(
p
->
a˘i⁄_£t
, 
buckë
->
a˘i⁄s_num
, buckë->
a˘i⁄s
);

261 
íåy
->
°©s
->
byã_cou¡
 +
p
->
buf„r
->
size
;

262 
íåy
->
°©s
->
∑ckë_cou¡
++;

263 
íåy
->
°©s
->
cou¡îs
[
b
]->
byã_cou¡
 +
p
->
buf„r
->
size
;

264 
íåy
->
°©s
->
cou¡îs
[
b
]->
∑ckë_cou¡
++;

268 
	`a˘i⁄_£t_execuã
(
p
->
a˘i⁄_£t
,Ö, 0xffffffffffffffff);

269 
	`∑ckë_de°roy
(
p
);

271 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "No bucket in group.");

273 
	}
}

278 
	$group_íåy_execuã
(
group_íåy
 *
íåy
,

279 
∑ckë
 *packet) {

281 
	`VLOG_DBG_RL
(
LOG_MODULE
, &
æ
, "Executög grou∞%u.", 
íåy
->
°©s
->
group_id
);

287 
íåy
->
desc
->
ty≥
) {

288 (
OFPGT_ALL
): {

289 
	`execuã_Æl
(
íåy
, 
∑ckë
);

292 (
OFPGT_SELECT
): {

293 
	`execuã_£À˘
(
íåy
, 
∑ckë
);

296 (
OFPGT_INDIRECT
): {

297 
	`execuã_ödúe˘
(
íåy
, 
∑ckë
);

300 (
OFPGT_FF
): {

301 
	`execuã_ff
(
íåy
, 
∑ckë
);

305 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryögÅÿexecuã unknow¿grou∞ty≥ (%uËö grou∞(%u).", 
íåy
->
desc
->
ty≥
,É¡ry->
°©s
->
group_id
);

308 
	}
}

311 
	$group_íåy_upd©e
(
group_íåy
 *
íåy
){

312 
íåy
->
°©s
->
duøti⁄_£c
 = (
	`time_m£c
(Ë-É¡ry->
¸óãd
) / 1000;

313 
íåy
->
°©s
->
duøti⁄_n£c
 = ((
	`time_m£c
(Ë-É¡ry->
¸óãd
) % 1000) * 1000;

314 
	}
}

317 
boﬁ


318 
	$has_Êow_ªf
(
group_íåy
 *
íåy
, 
Êow_íåy
 *
„
) {

319 
Êow_ªf_íåy
 *
f
;

321 
	`LIST_FOR_EACH
(
f
, 
Êow_ªf_íåy
, 
node
, &
íåy
->
Êow_ªfs
) {

322 i‡(
f
->
íåy
 =
„
) {

323  
åue
;

326  
Ál£
;

327 
	}
}

329 
boﬁ


330 
	$group_íåy_has_out_group
(
group_íåy
 *
íåy
, 
uöt32_t
 
group_id
) {

331 
size_t
 
i
;

333 
i
=0; i<
íåy
->
desc
->
buckës_num
; i++) {

334 
oÊ_buckë
 *
b
 = (oÊ_buckë *)
íåy
->
desc
->
buckës
[
i
];

335 i‡(
	`dp_a˘i⁄s_li°_has_out_group
(
b
->
a˘i⁄s_num
, b->
a˘i⁄s
, 
group_id
)) {

336  
åue
;

339  
Ál£
;

340 
	}
}

343 
	$group_íåy_add_Êow_ªf
(
group_íåy
 *
íåy
, 
Êow_íåy
 *
„
) {

344 i‡(!(
	`has_Êow_ªf
(
íåy
, 
„
))) {

345 
Êow_ªf_íåy
 *
f
 = 
	`xmÆloc
((flow_ref_entry));

346 
f
->
íåy
 = 
„
;

347 
	`li°_ö£π
(&
íåy
->
Êow_ªfs
, &
f
->
node
);

348 
íåy
->
°©s
->
ªf_cou¡
++;

350 
	}
}

353 
	$group_íåy_dñ_Êow_ªf
(
group_íåy
 *
íåy
, 
Êow_íåy
 *
„
) {

354 
Êow_ªf_íåy
 *
f
, *
√xt
;

356 
	`LIST_FOR_EACH_SAFE
(
f
, 
√xt
, 
Êow_ªf_íåy
, 
node
, &
íåy
->
Êow_ªfs
) {

357 i‡(
f
->
íåy
 =
„
) {

358 
	`li°_ªmove
(&
f
->
node
);

359 
	`‰ì
(
f
);

360 
íåy
->
°©s
->
ªf_cou¡
--;

363 
	}
}

367 
boﬁ


368 
	$buckë_is_Æive
(
oÊ_buckë
 *
buckë
, 
d©≠©h
 *
dp
) {

369 
sw_p‹t
 *
p
 = 
	`dp_p‹ts_lookup
(
dp
, 
buckë
->
w©ch_p‹t
);

371 if(
buckë
->
w©ch_p‹t
 =
OFPP_ANY
 || (
p
->
c⁄f
->
c⁄fig
 & 
OFPPC_PORT_DOWN
) ||

372 (
p
->
c⁄f
->
°©e
 & 
OFPPS_LINK_DOWN
)){

373  
Ál£
;

376  
åue
;

377 
	}
}

382 
	$öô_£À˘_group
(
group_íåy
 *
íåy
, 
oÊ_msg_group_mod
 *
mod
) {

383 
group_íåy_wº_d©a
 *
d©a
;

384 
size_t
 
i
;

386 
íåy
->
d©a
 = 
	`xmÆloc
((
group_íåy_wº_d©a
));

387 
d©a
 = (
group_íåy_wº_d©a
 *)
íåy
->data;

389 
d©a
->
cuº_weight
 = 0;

390 
d©a
->
cuº_buckë
 = -1;

392 i‡(
mod
->
buckës_num
 == 0) {

393 
d©a
->
gcd_weight
 = 0;

394 
d©a
->
max_weight
 = 0;

396 
d©a
->
gcd_weight
 = 
íåy
->
desc
->
buckës
[0]->
weight
;

397 
d©a
->
max_weight
 = 
íåy
->
desc
->
buckës
[0]->
weight
;

399 
i
=1; i< 
íåy
->
desc
->
buckës_num
; i++) {

400 
d©a
->
gcd_weight
 = 
	`gcd
(d©a->gcd_weight, 
íåy
->
desc
->
buckës
[
i
]->
weight
);

401 
d©a
->
max_weight
 = 
	`MAX
(d©a->max_weight, 
íåy
->
desc
->
buckës
[
i
]->
weight
);

405 
	}
}

408 
size_t


409 
	$£À˘_‰om_£À˘_group
(
group_íåy
 *
íåy
) {

410 
group_íåy_wº_d©a
 *
d©a
;

411 
size_t
 
gu¨d
;

413 i‡(
íåy
->
desc
->
buckës_num
 == 0) {

417 
d©a
 = (
group_íåy_wº_d©a
 *)
íåy
->data;

418 
gu¨d
 = 0;

420 
gu¨d
 < 
íåy
->
desc
->
buckës_num
) {

421 
d©a
->
cuº_buckë
 = (d©a->cuº_buckë + 1Ë% 
íåy
->
desc
->
buckës_num
;

423 i‡(
d©a
->
cuº_buckë
 == 0) {

424 i‡(
d©a
->
cuº_weight
 <d©a->
gcd_weight
) {

425 
d©a
->
cuº_weight
 = d©a->
max_weight
;

427 
d©a
->
cuº_weight
 = d©a->cuº_weighà- d©a->
gcd_weight
;

431 i‡(
íåy
->
desc
->
buckës
[
d©a
->
cuº_buckë
]->
weight
 >d©a->
cuº_weight
) {

432  
d©a
->
cuº_buckë
;

434 
gu¨d
++;

436 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "CouldÇot select from select group.");

438 
	}
}

441 
size_t


442 
	$£À˘_‰om_ff_group
(
group_íåy
 *
íåy
) {

443 
size_t
 
i
;

445 
i
=0; i<
íåy
->
desc
->
buckës_num
; i++) {

446 i‡(
	`buckë_is_Æive
(
íåy
->
desc
->
buckës
[
i
],É¡ry->
dp
)) {

447  
i
;

451 
	}
}

454 
uöt16_t


455 
	$gcd
(
uöt16_t
 
a
, uöt16_à
b
) {

456 
uöt16_t
 
c
;

458 
a
 != 0) {

459 
c
 = 
a
;

460 
a
 = 
b
 %á;

461 
b
 = 
c
;

464  
b
;

465 
	}
}

	@udatapath/group_entry.h

32 #i‚de‡
GROUP_íåy_H


33 
	#GROUP_íåy_H
 1

	)

35 
	~<°dboﬁ.h
>

36 
	~"hm≠.h
"

37 
	~"∑ckë.h
"

38 
	~"group_èbÀ.h
"

39 
	~"oÊib/oÊ-°ru˘s.h
"

40 
	~"oÊib/oÊ-mesßges.h
"

48 
	g∑ckë
;

49 
	gd©≠©h
;

50 
	gÊow_íåy
;

52 
	sgroup_íåy
 {

53 
hm≠_node
 
	mnode
;

55 
d©≠©h
 *
	mdp
;

56 
group_èbÀ
 *
	mèbÀ
;

57 
oÊ_group_desc_°©s
 *
	mdesc
;

58 
oÊ_group_°©s
 *
	m°©s
;

59 
uöt64_t
 
	m¸óãd
;

60 *
	md©a
;

62 
li°
 
	mÊow_ªfs
;

65 
	g£ndî
;

66 
	ggroup_èbÀ
;

70 
group_íåy_execuã
(
group_íåy
 *
íåy
,

71 
∑ckë
 *packet);

74 
group_íåy
 *

75 
group_íåy_¸óã
(
d©≠©h
 *
dp
, 
group_èbÀ
 *
èbÀ
, 
oÊ_msg_group_mod
 *
mod
);

79 
group_íåy_de°roy
(
group_íåy
 *
íåy
);

82 
boﬁ


83 
group_íåy_has_out_group
(
group_íåy
 *
íåy
, 
uöt32_t
 
group_id
);

87 
group_íåy_add_Êow_ªf
(
group_íåy
 *
íåy
, 
Êow_íåy
 *
„
);

91 
group_íåy_dñ_Êow_ªf
(
group_íåy
 *
íåy
, 
Êow_íåy
 *
„
);

96 
group_íåy_upd©e
(
group_íåy
 *
íåy
);

	@udatapath/group_table.c

32 
	~<sys/ty≥s.h
>

33 
	~"compûî.h
"

34 
	~"group_èbÀ.h
"

35 
	~"d©≠©h.h
"

36 
	~"dp_a˘i⁄s.h
"

37 
	~"dp_ˇ∑bûôõs.h
"

38 
	~"hm≠.h
"

39 
	~"li°.h
"

40 
	~"∑ckë.h
"

41 
	~"utû.h
"

42 
	~"›íÊow/›íÊow.h
"

43 
	~"oÊib/oÊ.h
"

44 
	~"oÊib/oÊ-mesßges.h
"

46 
	~"vlog.h
"

47 
	#LOG_MODULE
 
VLM_group_t


	)

49 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

51 
boﬁ


52 
is_ö
(
uöt32_t
 
id
, 
li°
 *list);

55 
is_lo›_‰ì_visô
(
oÊ_buckë
 **
buckës
, 
size_t
 
buckës_num
, 
li°
 *
visôed
, li° *
to_be_visôed
);

57 
boﬁ


58 
is_lo›_‰ì
(
group_èbÀ
 *
èbÀ
, 
oÊ_msg_group_mod
 *
mod
);

61 
group_íåy
 *

62 
	$group_èbÀ_föd
(
group_èbÀ
 *
èbÀ
, 
uöt32_t
 
group_id
) {

63 
hm≠_node
 *
hnode
;

65 
hnode
 = 
	`hm≠_fú°_wôh_hash
(&
èbÀ
->
íåõs
, 
group_id
);

67 i‡(
hnode
 =
NULL
) {

68  
NULL
;

71  
	`CONTAINER_OF
(
hnode
, 
group_íåy
, 
node
);

72 
	}
}

75 
oÊ_îr


76 
	$group_èbÀ_add
(
group_èbÀ
 *
èbÀ
, 
oÊ_msg_group_mod
 *
mod
) {

78 
group_íåy
 *
íåy
;

80 i‡(
	`hm≠_fú°_wôh_hash
(&
èbÀ
->
íåõs
, 
mod
->
group_id
Ë!
NULL
) {

81  
	`oÊ_îr‹
(
OFPET_GROUP_MOD_FAILED
, 
OFPGMFC_GROUP_EXISTS
);

84 i‡(
èbÀ
->
íåõs_num
 =
GROUP_TABLE_MAX_ENTRIES
) {

85  
	`oÊ_îr‹
(
OFPET_GROUP_MOD_FAILED
, 
OFPGMFC_OUT_OF_GROUPS
);

88 i‡(
èbÀ
->
buckës_num
 + 
mod
->buckës_num > 
GROUP_TABLE_MAX_BUCKETS
) {

89  
	`oÊ_îr‹
(
OFPET_GROUP_MOD_FAILED
, 
OFPGMFC_OUT_OF_BUCKETS
);

92 
íåy
 = 
	`group_íåy_¸óã
(
èbÀ
->
dp
,ÅabÀ, 
mod
);

94 
	`hm≠_ö£π
(&
èbÀ
->
íåõs
, &
íåy
->
node
,É¡ry->
°©s
->
group_id
);

96 
èbÀ
->
íåõs_num
++;

97 
èbÀ
->
buckës_num
 +
íåy
->
desc
->buckets_num;

99 
	`oÊ_msg_‰ì_group_mod
(
mod
, 
Ál£
, 
èbÀ
->
dp
->
exp
);

101 
	}
}

104 
oÊ_îr


105 
	$group_èbÀ_modify
(
group_èbÀ
 *
èbÀ
, 
oÊ_msg_group_mod
 *
mod
) {

106 
group_íåy
 *
íåy
, *
√w_íåy
;

108 
íåy
 = 
	`group_èbÀ_föd
(
èbÀ
, 
mod
->
group_id
);

109 i‡(
íåy
 =
NULL
) {

110  
	`oÊ_îr‹
(
OFPET_GROUP_MOD_FAILED
, 
OFPGMFC_UNKNOWN_GROUP
);

113 i‡(
èbÀ
->
buckës_num
 - 
íåy
->
desc
->buckës_num + 
mod
->buckës_num > 
GROUP_TABLE_MAX_BUCKETS
) {

114  
	`oÊ_îr‹
(
OFPET_GROUP_MOD_FAILED
, 
OFPGMFC_OUT_OF_BUCKETS
);

117 i‡(!
	`is_lo›_‰ì
(
èbÀ
, 
mod
)) {

118  
	`oÊ_îr‹
(
OFPET_GROUP_MOD_FAILED
, 
OFPGMFC_LOOP
);

121 
√w_íåy
 = 
	`group_íåy_¸óã
(
èbÀ
->
dp
,ÅabÀ, 
mod
);

123 
	`hm≠_ªmove
(&
èbÀ
->
íåõs
, &
íåy
->
node
);

124 
	`hm≠_ö£π_Á°
(&
èbÀ
->
íåõs
, &
√w_íåy
->
node
, 
mod
->
group_id
);

126 
èbÀ
->
buckës_num
 =ÅabÀ->buckës_num - 
íåy
->
desc
->buckës_num + 
√w_íåy
->desc->buckets_num;

129 
	`li°_ª∂a˚
(&
√w_íåy
->
Êow_ªfs
, &
íåy
->flow_refs);

130 
	`li°_öô
(&
íåy
->
Êow_ªfs
);

132 
	`group_íåy_de°roy
(
íåy
);

134 
	`oÊ_msg_‰ì_group_mod
(
mod
, 
Ál£
, 
èbÀ
->
dp
->
exp
);

136 
	}
}

139 
oÊ_îr


140 
	$group_èbÀ_dñëe
(
group_èbÀ
 *
èbÀ
, 
oÊ_msg_group_mod
 *
mod
) {

141 i‡(
mod
->
group_id
 =
OFPG_ALL
) {

142 
group_íåy
 *
íåy
, *
√xt
;

144 
	`HMAP_FOR_EACH_SAFE
(
íåy
, 
√xt
, 
group_íåy
, 
node
, &
èbÀ
->
íåõs
) {

145 
	`group_íåy_de°roy
(
íåy
);

147 
	`hm≠_de°roy
(&
èbÀ
->
íåõs
);

148 
	`hm≠_öô
(&
èbÀ
->
íåõs
);

150 
èbÀ
->
íåõs_num
 = 0;

151 
èbÀ
->
buckës_num
 = 0;

153 
	`oÊ_msg_‰ì_group_mod
(
mod
, 
åue
, 
èbÀ
->
dp
->
exp
);

157 
group_íåy
 *
íåy
, *
e
;

159 
íåy
 = 
	`group_èbÀ_föd
(
èbÀ
, 
mod
->
group_id
);

161 i‡(
íåy
 !
NULL
) {

165 
	`HMAP_FOR_EACH
(
e
, 
group_íåy
, 
node
, &
èbÀ
->
íåõs
) {

166 i‡(
	`group_íåy_has_out_group
(
e
, 
íåy
->
°©s
->
group_id
)) {

167  
	`oÊ_îr‹
(
OFPET_GROUP_MOD_FAILED
, 
OFPGMFC_CHAINING_UNSUPPORTED
);

171 
èbÀ
->
íåõs_num
--;

172 
èbÀ
->
buckës_num
 -
íåy
->
desc
->buckets_num;

174 
	`hm≠_ªmove
(&
èbÀ
->
íåõs
, &
íåy
->
node
);

175 
	`group_íåy_de°roy
(
íåy
);

180 
	`oÊ_msg_‰ì_group_mod
(
mod
, 
åue
, 
èbÀ
->
dp
->
exp
);

183 
	}
}

185 
oÊ_îr


186 
	$group_èbÀ_h™dÀ_group_mod
(
group_èbÀ
 *
èbÀ
, 
oÊ_msg_group_mod
 *
mod
,

187 c⁄° 
£ndî
 *sender) {

188 
oÊ_îr
 
îr‹
;

189 
size_t
 
i
;

191 if(
£ndî
->
ªmŸe
->
rﬁe
 =
OFPCR_ROLE_SLAVE
)

192  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_IS_SLAVE
);

194 
i
=0; i< 
mod
->
buckës_num
; i++) {

195 
îr‹
 = 
	`dp_a˘i⁄s_vÆid©e
(
èbÀ
->
dp
, 
mod
->
buckës
[
i
]->
a˘i⁄s_num
, mod->buckës[i]->
a˘i⁄s
);

196 i‡(
îr‹
) {

197  
îr‹
;

201 
mod
->
comm™d
) {

202 (
OFPGC_ADD
): {

203  
	`group_èbÀ_add
(
èbÀ
, 
mod
);

205 (
OFPGC_MODIFY
): {

206  
	`group_èbÀ_modify
(
èbÀ
, 
mod
);

208 (
OFPGC_DELETE
): {

209  
	`group_èbÀ_dñëe
(
èbÀ
, 
mod
);

212  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_TYPE
);

215 
	}
}

217 
oÊ_îr


218 
	$group_èbÀ_h™dÀ_°©s_ªque°_group
(
group_èbÀ
 *
èbÀ
,

219 
oÊ_msg_mu…ù¨t_ªque°_group
 *
msg
,

220 c⁄° 
£ndî
 *£ndî 
UNUSED
) {

221 
group_íåy
 *
íåy
;

223 i‡(
msg
->
group_id
 =
OFPG_ALL
) {

224 
íåy
 = 
NULL
;

226 
íåy
 = 
	`group_èbÀ_föd
(
èbÀ
, 
msg
->
group_id
);

228 i‡(
íåy
 =
NULL
) {

229  
	`oÊ_îr‹
(
OFPET_GROUP_MOD_FAILED
, 
OFPGMFC_UNKNOWN_GROUP
);

234 
oÊ_msg_mu…ù¨t_ª∂y_group
 
ª∂y
 =

235 {{{.
ty≥
 = 
OFPT_MULTIPART_REPLY
},

236 .
ty≥
 = 
OFPMP_GROUP
, .
Êags
 = 0x0000},

237 .
°©s_num
 = 
msg
->
group_id
 =
OFPG_ALL
 ? 
èbÀ
->
íåõs_num
 : 1,

238 .
°©s
 = 
	`xmÆloc
((
oÊ_group_°©s
 *Ë* (
msg
->
group_id
 =
OFPG_ALL
 ? 
èbÀ
->
íåõs_num
 : 1))

241 i‡(
msg
->
group_id
 =
OFPG_ALL
) {

242 
group_íåy
 *
e
;

243 
size_t
 
i
 = 0;

245 
	`HMAP_FOR_EACH
(
e
, 
group_íåy
, 
node
, &
èbÀ
->
íåõs
) {

246 
	`group_íåy_upd©e
(
e
);

247 
ª∂y
.
°©s
[
i
] = 
e
->stats;

248 
i
++;

252 
	`group_íåy_upd©e
(
íåy
);

253 
ª∂y
.
°©s
[0] = 
íåy
->stats;

256 
	`dp_£nd_mesßge
(
èbÀ
->
dp
, (
oÊ_msg_hódî
 *)&
ª∂y
, 
£ndî
);

258 
	`‰ì
(
ª∂y
.
°©s
);

259 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
èbÀ
->
dp
->
exp
);

262 
	}
}

264 
oÊ_îr


265 
	$group_èbÀ_h™dÀ_°©s_ªque°_group_desc
(
group_èbÀ
 *
èbÀ
,

266 
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
msg
 
UNUSED
,

267 c⁄° 
£ndî
 *sender) {

268 
group_íåy
 *
íåy
;

269 
size_t
 
i
 = 0;

271 
oÊ_msg_mu…ù¨t_ª∂y_group_desc
 
ª∂y
 =

272 {{{.
ty≥
 = 
OFPT_MULTIPART_REPLY
},

273 .
ty≥
 = 
OFPMP_GROUP_DESC
, .
Êags
 = 0x0000},

274 .
°©s_num
 = 
èbÀ
->
íåõs_num
,

275 .
°©s
 = 
	`xmÆloc
((
oÊ_group_desc_°©s
 *Ë* 
èbÀ
->
íåõs_num
)

278 
	`HMAP_FOR_EACH
(
íåy
, 
group_íåy
, 
node
, &
èbÀ
->
íåõs
) {

279 
ª∂y
.
°©s
[
i
] = 
íåy
->
desc
;

280 
i
++;

282 
	`dp_£nd_mesßge
(
èbÀ
->
dp
, (
oÊ_msg_hódî
 *)&
ª∂y
, 
£ndî
);

284 
	`‰ì
(
ª∂y
.
°©s
);

285 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
èbÀ
->
dp
->
exp
);

287 
	}
}

289 
oÊ_îr


290 
	$group_èbÀ_h™dÀ_°©s_ªque°_group_„©uªs
(
group_èbÀ
 *
èbÀ
,

291 
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
msg
 
UNUSED
,

292 c⁄° 
£ndî
 *sender) {

293 
size_t
 
i
 = 0;

295 
oÊ_msg_mu…ù¨t_ª∂y_group_„©uªs
 
ª∂y
 =

296 {{{.
ty≥
 = 
OFPT_MULTIPART_REPLY
},

297 .
ty≥
 = 
OFPMP_GROUP_FEATURES
, .
Êags
 = 0x0000},

298 .
ty≥s
 = 
èbÀ
->
„©uªs
->types,

299 .
ˇ∑bûôõs
 = 
èbÀ
->
„©uªs
->capabilities

302 
i
 = 0; i < 4; i++){

303 
ª∂y
.
max_groups
[
i
] = 
èbÀ
->
„©uªs
->max_groups[i];

304 
ª∂y
.
a˘i⁄s
[
i
] = 
èbÀ
->
„©uªs
->actions[i];

307 
	`dp_£nd_mesßge
(
èbÀ
->
dp
, (
oÊ_msg_hódî
 *)&
ª∂y
, 
£ndî
);

309 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
èbÀ
->
dp
->
exp
);

311 
	}
}

314 
	$group_èbÀ_execuã
(
group_èbÀ
 *
èbÀ
, 
∑ckë
 *∑ckë, 
uöt32_t
 
group_id
) {

315 
group_íåy
 *
íåy
;

317 
íåy
 = 
	`group_èbÀ_föd
(
èbÀ
, 
group_id
);

319 i‡(
íåy
 =
NULL
) {

320 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryögÅÿexecuãÇ⁄-exi°ög grou∞(%u).", 
group_id
);

324 
	`group_íåy_execuã
(
íåy
, 
∑ckë
);

325 
	}
}

327 
group_èbÀ
 *

328 
	$group_èbÀ_¸óã
(
d©≠©h
 *
dp
) {

329 
group_èbÀ
 *
èbÀ
;

330 
size_t
 
i
;

332 
èbÀ
 = 
	`xmÆloc
((
group_èbÀ
));

333 
èbÀ
->
dp
 = dp;

335 
èbÀ
->
„©uªs
 = (
oÊ_msg_mu…ù¨t_ª∂y_group_„©uªs
*Ë
	`xmÆloc
((ofl_msg_multipart_reply_group_features));

336 
èbÀ
->
„©uªs
->
ty≥s
 = 
DP_SUPPORTED_GROUPS
;

337 
èbÀ
->
„©uªs
->
ˇ∑bûôõs
 = 
DP_SUPPORTED_GROUP_CAPABILITIES
;

338 
i
 = 0; i < 4; i++){

339 
èbÀ
->
„©uªs
->
max_groups
[
i
] = 255;

340 
èbÀ
->
„©uªs
->
a˘i⁄s
[
i
] = 
DP_SUPPORTED_ACTIONS
;

342 
èbÀ
->
íåõs_num
 = 0;

343 
	`hm≠_öô
(&
èbÀ
->
íåõs
);

344 
èbÀ
->
buckës_num
 = 0;

346  
èbÀ
;

347 
	}
}

350 
	$group_èbÀ_de°roy
(
group_èbÀ
 *
èbÀ
) {

351 
group_íåy
 *
íåy
, *
√xt
;

353 
	`HMAP_FOR_EACH_SAFE
(
íåy
, 
√xt
, 
group_íåy
, 
node
, &
èbÀ
->
íåõs
) {

354 
	`group_íåy_de°roy
(
íåy
);

357 
	`‰ì
(
èbÀ
);

358 
	}
}

361 
	sgroup_visô
 {

362 
li°
 
	mnode
;

363 
uöt32_t
 
	mgroup_id
;

366 
boﬁ


367 
	$is_ö
(
uöt32_t
 
id
, 
li°
 *list) {

368 
group_visô
 *
gv
;

370 
	`LIST_FOR_EACH
(
gv
, 
group_visô
, 
node
, 
li°
) {

371 i‡(
gv
->
group_id
 =
id
) {

372  
åue
;

375  
Ál£
;

376 
	}
}

379 
	$is_lo›_‰ì_visô
(
oÊ_buckë
 **
buckës
, 
size_t
 
buckës_num
, 
li°
 *
visôed
, li° *
to_be_visôed
) {

380 
size_t
 
ib
;

381 
ib
=0; ib<
buckës_num
; ib++) {

382 
size_t
 
ü
;

384 
ü
=0; ia<
buckës
[
ib
]->
a˘i⁄s_num
; ia++) {

385 i‡(
buckës
[
ib
]->
a˘i⁄s
[
ü
]->
ty≥
 =
OFPAT_GROUP
) {

386 
oÊ_a˘i⁄_group
 *
a˘
 = (oÊ_a˘i⁄_grou∞*Ë
buckës
[
ib
]->
a˘i⁄s
[
ü
];

387 i‡(!
	`is_ö
(
a˘
->
group_id
, 
visôed
) &&

388 !
	`is_ö
(
a˘
->
group_id
, 
to_be_visôed
)) {

389 
group_visô
 *
gv
 = 
	`xmÆloc
((group_visit));

391 
gv
->
group_id
 = 
a˘
->group_id;

392 
	`li°_ö£π
(
to_be_visôed
, &(
gv
->
node
));

399 
	}
}

402 
boﬁ


403 
	$is_lo›_‰ì
(
group_èbÀ
 *
èbÀ
, 
oÊ_msg_group_mod
 *
mod
) {

409 
li°
 
visôed
, 
to_be_visôed
;

410 
boﬁ
 
lo›_‰ì
;

411 
group_visô
 *
gv
, *
gvn
;

413 
	`li°_öô
(&
visôed
);

414 
	`li°_öô
(&
to_be_visôed
);

416 
	`is_lo›_‰ì_visô
(
mod
->
buckës
, mod->
buckës_num
, &
visôed
, &
to_be_visôed
);

418 !
	`li°_is_em±y
(&
to_be_visôed
)) {

419 
group_íåy
 *
íåy
;

422 i‡(
	`is_ö
(
mod
->
group_id
, &
to_be_visôed
)) {

426 
gv
 = 
	`CONTAINER_OF
(
	`li°_p›_‰⁄t
(&
to_be_visôed
), 
group_visô
, 
node
);

428 
íåy
 = 
	`group_èbÀ_föd
(
èbÀ
, 
gv
->
group_id
);

429 i‡(
íåy
 !
NULL
) {

430 
	`is_lo›_‰ì_visô
(
íåy
->
desc
->
buckës
,É¡ry->desc->
buckës_num
, &
visôed
, &
to_be_visôed
);

432 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "is_lo›_‰ì c™nŸ föd grou∞(%u).", 
gv
->
group_id
);

435 
	`li°_ö£π
(&
visôed
, &(
gv
->
node
));

438 
lo›_‰ì
 = 
	`li°_is_em±y
(&
to_be_visôed
);

441 
	`LIST_FOR_EACH_SAFE
(
gv
, 
gvn
, 
group_visô
, 
node
, &
visôed
) {

442 
	`‰ì
(
gv
);

444 
	`LIST_FOR_EACH_SAFE
(
gv
, 
gvn
, 
group_visô
, 
node
, &
to_be_visôed
) {

445 
	`‰ì
(
gv
);

449  
lo›_‰ì
;

450 
	}
}

	@udatapath/group_table.h

32 #i‚de‡
GROUP_TABLE_H


33 
	#GROUP_TABLE_H
 1

	)

35 
	~"d©≠©h.h
"

36 
	~"group_íåy.h
"

37 
	~"oÊib/oÊ.h
"

38 
	~"oÊib/oÊ-mesßges.h
"

39 
	~"∑ckë.h
"

47 
	#GROUP_TABLE_MAX_ENTRIES
 1024

	)

48 
	#GROUP_TABLE_MAX_BUCKETS
 8192

	)

50 
	gd©≠©h
;

51 
	g∑ckë
;

52 
	g£ndî
;

54 
	sgroup_èbÀ
 {

55 
d©≠©h
 *
	mdp
;

56 
oÊ_msg_mu…ù¨t_ª∂y_group_„©uªs
 *
	m„©uªs
;

57 
size_t
 
	míåõs_num
;

58 
hm≠
 
	míåõs
;

59 
size_t
 
	mbuckës_num
;

64 
oÊ_îr


65 
group_èbÀ_h™dÀ_group_mod
(
group_èbÀ
 *
èbÀ
, 
oÊ_msg_group_mod
 *
mod
, c⁄° 
£ndî
 *sender);

68 
oÊ_îr


69 
group_èbÀ_h™dÀ_°©s_ªque°_group
(
group_èbÀ
 *
èbÀ
,

70 
oÊ_msg_mu…ù¨t_ªque°_group
 *
msg
,

71 c⁄° 
£ndî
 *sender);

74 
oÊ_îr


75 
group_èbÀ_h™dÀ_°©s_ªque°_group_desc
(
group_èbÀ
 *
èbÀ
,

76 
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
msg
,

77 c⁄° 
£ndî
 *sender);

80 
oÊ_îr


81 
group_èbÀ_h™dÀ_°©s_ªque°_group_„©uªs
(
group_èbÀ
 *
èbÀ
,

82 
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
msg
 
UNUSED
,

83 c⁄° 
£ndî
 *sender);

86 
group_íåy
 *

87 
group_èbÀ_föd
(
group_èbÀ
 *
èbÀ
, 
uöt32_t
 
group_id
);

91 
group_èbÀ_execuã
(
group_èbÀ
 *
èbÀ
, 
∑ckë
 *∑ckë, 
uöt32_t
 
group_id
);

94 
group_èbÀ
 *

95 
group_èbÀ_¸óã
(
d©≠©h
 *
dp
);

99 
group_èbÀ_de°roy
(
group_èbÀ
 *
èbÀ
);

	@udatapath/match_std.c

32 
	~<°dboﬁ.h
>

33 
	~<°rög.h
>

34 
	~"lib/hash.h
"

35 
	~"oÊib/oxm-m©ch.h
"

36 
	~"m©ch_°d.h
"

37 
	~"vlog.h
"

38 
	#LOG_MODULE
 
VLM_Êow_t


	)

40 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

42 
ölöe
 
boﬁ


43 
	$m©ch_8
(
uöt8_t
 *
a
, uöt8_à*
b
) {

44  (*
a
 =*
b
);

45 
	}
}

48 
ölöe
 
boﬁ


49 
	$m©ch_mask8
(
uöt8_t
 *
a
, uöt8_à*
am
, uöt8_à*
b
) {

50  ((~(
am
[0]Ë& (
a
[0] ^ 
b
[0])) == 0);

51 
	}
}

54 
ölöe
 
boﬁ


55 
	$m©ch_16
(
uöt8_t
 *
a
, uöt8_à*
b
) {

56 
uöt16_t
 *
a1
 = (uöt16_à*Ë
a
;

57 
uöt16_t
 *
b1
 = (uöt16_à*Ë
b
;

58  (*
a1
 =*
b1
);

59 
	}
}

62 
ölöe
 
boﬁ


63 
	$m©ch_mask16
(
uöt8_t
 *
a
, uöt8_à*
am
, uöt8_à*
b
) {

64 
uöt16_t
 *
a1
 = (uöt16_à*Ë
a
;

65 
uöt16_t
 *
b1
 = (uöt16_à*Ë
b
;

66 
uöt16_t
 *
mask
 = (uöt16_à*Ë
am
;

68  (((~*
mask
Ë& (*
a1
 ^ *
b1
)) == 0);

69 
	}
}

71 
	$¥ötbôs
(
uöt32_t
 
n
, 
FILE
 *
fûe
)

73 
j
;

75 
j
 = 0; j < 32; j++) {

76 
	`¥ötf
("%d", 
	`gë_bô
(
n
, 
j
));

80 
	}
}

83 
	$gë_bô
(
uöt32_t
 
n
, 
bônum
)

85 ((
n
 >> (31 - 
bônum
)) & 1);

86 
	}
}

89 
ölöe
 
boﬁ


90 
	$m©ch_32
(
uöt8_t
 *
a
, uöt8_à*
b
) {

91 
uöt32_t
 *
a1
 = (uöt32_à*Ë
a
;

92 
uöt32_t
 *
b1
 = (uöt32_à*Ë
b
;

93 
FILE
 *
fûe
;

94 
fûe
 = 
	`f›í
("file.txt","a+");

95 
	`Ârötf
(
fûe
,"%s","NowÖrinting A ");

96 
	`¥ötbôs
(*
a1
,
fûe
);

97 
	`Ârötf
(
fûe
,"%s","\n");

98 
	`Ârötf
(
fûe
,"%s","NowÖrinting B ");

99 
	`¥ötbôs
(*
b1
,
fûe
);

100 if(*
a1
 =*
b1
){

101 
	`Ârötf
(
fûe
,"%s","They match!");

105 
	`Ârötf
(
fûe
,"%s","They DONT match!");

108 
	`Ârötf
(
fûe
,"%s","\n");

109 
	`Ârötf
(
fûe
,"%s","\n");

111 
	`f˛o£
(
fûe
);

112  (*
a1
 =*
b1
);

113 
	}
}

116 
ölöe
 
boﬁ


117 
	$m©ch_mask32
(
uöt8_t
 *
a
, uöt8_à*
am
, uöt8_à*
b
) {

118 
uöt32_t
 *
a1
 = (uöt32_à*Ë
a
;

119 
uöt32_t
 *
b1
 = (uöt32_à*Ë
b
;

120 
uöt32_t
 *
mask
 = (uöt32_à*Ë
am
;

122  (((~*
mask
Ë& (*
a1
 ^ *
b1
)) == 0);

123 
	}
}

126 
ölöe
 
boﬁ


127 
	$m©ch_48
(
uöt8_t
 *
a
, uöt8_à*
b
) {

128  (
	`m©ch_32
(
a
, 
b
) &&

129 
	`m©ch_16
(
a
+4, 
b
+4));

130 
	}
}

133 
ölöe
 
boﬁ


134 
	$m©ch_mask48
(
uöt8_t
 *
a
, uöt8_à*
am
, uöt8_à*
b
) {

135  (
	`m©ch_mask32
(
a
, 
am
, 
b
) &&

136 
	`m©ch_mask16
(
a
+4, 
am
+4, 
b
+4));

137 
	}
}

140 
ölöe
 
boﬁ


141 
	$m©ch_64
(
uöt8_t
 *
a
, uöt8_à*
b
) {

142 
uöt64_t
 *
a1
 = (uöt64_à*Ë
a
;

143 
uöt64_t
 *
b1
 = (uöt64_à*Ë
b
;

145  (*
a1
 =*
b1
);

146 
	}
}

149 
ölöe
 
boﬁ


150 
	$m©ch_mask64
(
uöt8_t
 *
a
, uöt8_à*
am
, uöt8_à*
b
) {

151 
uöt64_t
 *
a1
 = (uöt64_à*Ë
a
;

152 
uöt64_t
 *
b1
 = (uöt64_à*Ë
b
;

153 
uöt64_t
 *
mask
 = (uöt64_à*Ë
am
;

155  (((~*
mask
Ë& (*
a1
 ^ *
b1
)) == 0);

156 
	}
}

159 
ölöe
 
boﬁ


160 
	$m©ch_128
(
uöt8_t
 *
a
, uöt8_à*
b
) {

161  (
	`m©ch_64
(
a
, 
b
) &&

162 
	`m©ch_64
(
a
+8, 
b
+8));

163 
	}
}

166 
ölöe
 
boﬁ


167 
	$m©ch_mask128
(
uöt8_t
 *
a
, uöt8_à*
am
, uöt8_à*
b
) {

168  (
	`m©ch_mask64
(
a
, 
am
, 
b
) &&

169 
	`m©ch_mask64
(
a
+8, 
am
+8, 
b
+8));

170 
	}
}

174 
boﬁ


175 
	$∑ckë_m©ch
(
oÊ_m©ch
 *
Êow_m©ch
, oÊ_m©ch *
∑ckë
){

177 
oÊ_m©ch_év
 *
f
;

178 
oÊ_m©ch_év
 *
∑ckë_f
;

179 
boﬁ
 
has_mask
;

180 
fõld_Àn
;

181 
∑ckë_hódî
;

182 
uöt8_t
 *
Êow_vÆ
, *
Êow_mask

NULL
;

183 
uöt8_t
 *
∑ckë_vÆ
;

186 i‡(
Êow_m©ch
->
hódî
.
Àngth
 == 0){

187  
åue
;

192 
	`HMAP_FOR_EACH
(
f
, 
oÊ_m©ch_év
, 
hm≠_node
, &
Êow_m©ch
->
m©ch_fõlds
)

196 
has_mask
 = 
	`OXM_HASMASK
(
f
->
hódî
);

197 
fõld_Àn
 = 
	`OXM_LENGTH
(
f
->
hódî
);

198 
∑ckë_hódî
 = 
f
->
hódî
;

199 
Êow_vÆ
 = 
f
->
vÆue
;

200 i‡(
has_mask
) {

202 
fõld_Àn
 /= 2;

203 
∑ckë_hódî
 &= 0xfffffe00;

204 
∑ckë_hódî
 |
fõld_Àn
;

205 
Êow_mask
 = 
f
->
vÆue
 + 
fõld_Àn
;

208 *
f_°r
 = 
	`oÊ_°ru˘s_oxm_év_to_°rög
(
f
);

209 
	`‰ì
(
f_°r
);

213 
∑ckë_f
 = 
	`oxm_m©ch_lookup
(
∑ckë_hódî
, 
∑ckë
);

214 i‡(!
∑ckë_f
) {

215 i‡(
f
->
hódî
==
OXM_OF_VLAN_VID
 &&

216 *((
uöt16_t
 *Ë
f
->
vÆue
)==
OFPVID_NONE
) {

221  
Ál£
;

225 
∑ckë_vÆ
 = 
∑ckë_f
->
vÆue
;

226 
fõld_Àn
) {

228 i‡(
has_mask
) {

229 i‡(!
	`m©ch_mask8
(
Êow_vÆ
, 
Êow_mask
, 
∑ckë_vÆ
))

230  
Ál£
;

233 i‡(!
	`m©ch_8
(
Êow_vÆ
, 
∑ckë_vÆ
))

234  
Ál£
;

238 
∑ckë_hódî
) {

239 
OXM_OF_VLAN_VID
: {

241 
uöt16_t
 *
Êow_vœn_id
 = (uöt16_t*Ë
Êow_vÆ
;

242 i‡(*
Êow_vœn_id
 =
OFPVID_NONE
) {

244  
Ál£
;

245 } i‡(*
Êow_vœn_id
 =
OFPVID_PRESENT
) {

249 *
Êow_vœn_id
 &
VLAN_VID_MASK
;

250 i‡(!
	`m©ch_16
(
Êow_vÆ
, 
∑ckë_vÆ
))

251  
Ál£
;

255 
OXM_OF_IPV6_EXTHDR
: {

257 
uöt16_t
 
Êow_eh
 = *((uöt16_à*Ë
Êow_vÆ
);

258 
uöt16_t
 
∑ckë_eh
 = *((uöt16_à*Ë
∑ckë_vÆ
);

259 i‡((
Êow_eh
 & 
∑ckë_eh
) != flow_eh) {

261  
Ál£
;

266 i‡(
has_mask
) {

267 i‡(!
	`m©ch_mask16
(
Êow_vÆ
, 
Êow_mask
, 
∑ckë_vÆ
))

268  
Ál£
;

271 i‡(!
	`m©ch_16
(
Êow_vÆ
, 
∑ckë_vÆ
))

272  
Ál£
;

278 i‡(
has_mask
) {

279 i‡(!
	`m©ch_mask32
(
Êow_vÆ
, 
Êow_mask
, 
∑ckë_vÆ
))

280  
Ál£
;

283 i‡(!
	`m©ch_32
(
Êow_vÆ
, 
∑ckë_vÆ
)){

284  
Ál£
;

289 i‡(
has_mask
) {

290 i‡(!
	`m©ch_mask48
(
Êow_vÆ
, 
Êow_mask
, 
∑ckë_vÆ
))

291  
Ál£
;

294 i‡(!
	`m©ch_48
(
Êow_vÆ
, 
∑ckë_vÆ
))

295  
Ál£
;

299 i‡(
has_mask
) {

300 i‡(!
	`m©ch_mask64
(
Êow_vÆ
, 
Êow_mask
, 
∑ckë_vÆ
))

301  
Ál£
;

304 i‡(!
	`m©ch_64
(
Êow_vÆ
, 
∑ckë_vÆ
))

305  
Ál£
;

309 i‡(
has_mask
) {

310 i‡(!
	`m©ch_mask128
(
Êow_vÆ
, 
Êow_mask
, 
∑ckë_vÆ
))

311  
Ál£
;

314 i‡(!
	`m©ch_128
(
Êow_vÆ
, 
∑ckë_vÆ
))

315  
Ál£
;

324  
åue
;

325 
	}
}

328 
ölöe
 
boﬁ


329 
	$°ri˘_mask8
(
uöt8_t
 *
a
, uöt8_à*
b
, uöt8_à*
am
, uöt8_à*
bm
) {

330  ((
am
[0] =
bm
[0]Ë&& ((
a
[0] ^ 
b
[0]) & ~am[0])) == 0;

331 
	}
}

333 
ölöe
 
boﬁ


334 
	$°ri˘_mask16
(
uöt8_t
 *
a
, uöt8_à*
b
, uöt8_à*
am
, uöt8_à*
bm
) {

335 
uöt16_t
 *
a1
 = (uöt16_à*Ë
a
;

336 
uöt16_t
 *
b1
 = (uöt16_à*Ë
b
;

337 
uöt16_t
 *
mask_a
 = (uöt16_à*Ë
am
;

338 
uöt16_t
 *
mask_b
 = (uöt16_à*Ë
bm
;

339  ((*
mask_a
 =*
mask_b
Ë&& ((*
a1
 ^ *
b1
) & ~(*mask_a))) == 0;

340 
	}
}

342 
ölöe
 
boﬁ


343 
	$°ri˘_mask32
(
uöt8_t
 *
a
, uöt8_à*
b
, uöt8_à*
am
, uöt8_à*
bm
) {

344 
uöt32_t
 *
a1
 = (uöt32_à*Ë
a
;

345 
uöt32_t
 *
b1
 = (uöt32_à*Ë
b
;

346 
uöt32_t
 *
mask_a
 = (uöt32_à*Ë
am
;

347 
uöt32_t
 *
mask_b
 = (uöt32_à*Ë
bm
;

348  ((*
mask_a
 =*
mask_b
Ë&& ((*
a1
 ^ *
b1
) & ~(*mask_a))) == 0;

349 
	}
}

351 
ölöe
 
boﬁ


352 
	$°ri˘_mask48
(
uöt8_t
 *
a
, uöt8_à*
b
, uöt8_à*
am
, uöt8_à*
bm
) {

353  
	`°ri˘_mask32
(
a
, 
b
, 
am
, 
bm
) &&

354 
	`°ri˘_mask16
(
a
+4, 
b
+4, 
am
+4, 
bm
+4);

355 
	}
}

357 
ölöe
 
boﬁ


358 
	$°ri˘_mask64
(
uöt8_t
 *
a
, uöt8_à*
b
, uöt8_à*
am
, uöt8_à*
bm
) {

359 
uöt64_t
 *
a1
 = (uöt64_à*Ë
a
;

360 
uöt64_t
 *
b1
 = (uöt64_à*Ë
b
;

361 
uöt64_t
 *
mask_a
 = (uöt64_à*Ë
am
;

362 
uöt64_t
 *
mask_b
 = (uöt64_à*Ë
bm
;

363  ((*
mask_a
 =*
mask_b
Ë&& ((*
a1
 ^ *
b1
) & ~(*mask_a))) == 0;

364 
	}
}

366 
ölöe
 
boﬁ


367 
	$°ri˘_mask128
(
uöt8_t
 *
a
, uöt8_à*
b
, uöt8_à*
am
, uöt8_à*
bm
) {

368  
	`°ri˘_mask64
(
a
, 
b
, 
am
, 
bm
) &&

369 
	`°ri˘_mask64
(
a
+8, 
b
+8, 
am
+8, 
bm
+8);

371 
	}
}

380 
boﬁ


381 
	$m©ch_°d_°ri˘
(
oÊ_m©ch
 *
a
, oÊ_m©ch *
b
) {

383 
oÊ_m©ch_év
 *
Êow_mod_m©ch
;

384 
oÊ_m©ch_év
 *
Êow_íåy_m©ch
;

385 
fõld_Àn
;

386 
uöt8_t
 *
Êow_mod_vÆ
, *
Êow_mod_mask
=0;

387 
uöt8_t
 *
Êow_íåy_vÆ
, *
Êow_íåy_mask
=0;

388 
boﬁ
 
has_mask
;

391 if(!
a
->
hódî
.
Àngth
 && !
b
->header.length )

392  
åue
;

395 i‡(
a
->
hódî
.
Àngth
 !
b
->header.length)

396  
Ál£
;

399 
	`HMAP_FOR_EACH
(
Êow_mod_m©ch
, 
oÊ_m©ch_év
, 
hm≠_node
, &
a
->
m©ch_fõlds
)

402 
Êow_íåy_m©ch
 = 
	`oxm_m©ch_lookup
(
Êow_mod_m©ch
->
hódî
, 
b
);

403 i‡(!
Êow_íåy_m©ch
) {

404  
Ál£
;

408 
has_mask
 = 
	`OXM_HASMASK
(
Êow_mod_m©ch
->
hódî
);

409 
fõld_Àn
 = 
	`OXM_LENGTH
(
Êow_mod_m©ch
->
hódî
);

410 
Êow_mod_vÆ
 = 
Êow_mod_m©ch
->
vÆue
;

411 
Êow_íåy_vÆ
 = 
Êow_íåy_m©ch
->
vÆue
;

412 i‡(
has_mask
)

414 
fõld_Àn
 /= 2;

415 
Êow_mod_mask
 = 
Êow_mod_m©ch
->
vÆue
 + 
fõld_Àn
;

416 
Êow_íåy_mask
 = 
Êow_íåy_m©ch
->
vÆue
 + 
fõld_Àn
;

418 
fõld_Àn
) {

420 i‡(
has_mask
) {

421 i‡(!
	`°ri˘_mask8
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
, 
Êow_mod_mask
, 
Êow_íåy_mask
))

422  
Ál£
;

425 i‡(!
	`m©ch_8
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
))

426  
Ál£
;

430 i‡(
has_mask
) {

431 i‡(!
	`°ri˘_mask16
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
, 
Êow_mod_mask
, 
Êow_íåy_mask
))

432  
Ál£
;

435 i‡(!
	`m©ch_16
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
))

436  
Ál£
;

440 i‡(
has_mask
) {

441 i‡(!
	`°ri˘_mask32
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
, 
Êow_mod_mask
, 
Êow_íåy_mask
))

442  
Ál£
;

445 i‡(!
	`m©ch_32
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
))

446  
Ál£
;

450 i‡(
has_mask
) {

451 i‡(!
	`°ri˘_mask48
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
, 
Êow_mod_mask
, 
Êow_íåy_mask
))

452  
Ál£
;

455 i‡(!
	`m©ch_48
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
))

456  
Ál£
;

460 i‡(
has_mask
) {

461 i‡(!
	`°ri˘_mask64
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
, 
Êow_mod_mask
, 
Êow_íåy_mask
))

462  
Ál£
;

465 i‡(!
	`m©ch_64
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
))

466  
Ál£
;

470 i‡(
has_mask
) {

471 i‡(!
	`°ri˘_mask128
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
, 
Êow_mod_mask
, 
Êow_íåy_mask
))

472  
Ál£
;

475 i‡(!
	`m©ch_128
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
))

476  
Ál£
;

488  
åue
;

489 
	}
}

492 
ölöe
 
boﬁ


493 
	$n⁄°ri˘_mask8
(
uöt8_t
 *
a
, uöt8_à*
b
, uöt8_à*
am
, uöt8_à*
bm
) {

495  (~
am
[0] & (~
a
[0] | ~
b
[0] | 
bm
[0]) & (a[0] | b[0] | bm[0])) == 0;

496 
	}
}

498 
ölöe
 
boﬁ


499 
	$n⁄°ri˘_mask16
(
uöt8_t
 *
a
, uöt8_à*
b
, uöt8_à*
am
, uöt8_à*
bm
) {

500 
uöt16_t
 *
a1
 = (uöt16_à*Ë
a
;

501 
uöt16_t
 *
b1
 = (uöt16_à*Ë
b
;

502 
uöt16_t
 *
mask_a
 = (uöt16_à*Ë
am
;

503 
uöt16_t
 *
mask_b
 = (uöt16_à*Ë
bm
;

504  (~(*
mask_a
Ë& (~(*
a1
Ë| ~(*
b1
Ë| *
mask_b
) & (*a1| *b1 | *mask_b)) == 0;

505 
	}
}

507 
ölöe
 
boﬁ


508 
	$n⁄°ri˘_mask32
(
uöt8_t
 *
a
, uöt8_à*
b
, uöt8_à*
am
, uöt8_à*
bm
) {

509 
uöt32_t
 *
a1
 = (uöt32_à*Ë
a
;

510 
uöt32_t
 *
b1
 = (uöt32_à*Ë
b
;

511 
uöt32_t
 *
mask_a
 = (uöt32_à*Ë
am
;

512 
uöt32_t
 *
mask_b
 = (uöt32_à*Ë
bm
;

513  (~(*
mask_a
Ë& (~(*
a1
Ë| ~(*
b1
Ë| *
mask_b
) & (*a1| *b1 | *mask_b)) == 0;

514 
	}
}

516 
ölöe
 
boﬁ


517 
	$n⁄°ri˘_mask48
(
uöt8_t
 *
a
, uöt8_à*
b
, uöt8_à*
am
, uöt8_à*
bm
) {

518  
	`n⁄°ri˘_mask32
(
a
, 
b
, 
am
, 
bm
) &&

519 
	`n⁄°ri˘_mask16
(
a
+4, 
b
+4, 
am
+4, 
bm
+4);

520 
	}
}

522 
ölöe
 
boﬁ


523 
	$n⁄°ri˘_mask64
(
uöt8_t
 *
a
, uöt8_à*
b
, uöt8_à*
am
, uöt8_à*
bm
) {

524 
uöt64_t
 *
a1
 = (uöt64_à*Ë
a
;

525 
uöt64_t
 *
b1
 = (uöt64_à*Ë
b
;

526 
uöt64_t
 *
mask_a
 = (uöt64_à*Ë
am
;

527 
uöt64_t
 *
mask_b
 = (uöt64_à*Ë
bm
;

528  (~(*
mask_a
Ë& (~(*
a1
Ë| ~(*
b1
Ë| *
mask_b
) & (*a1| *b1 | *mask_b)) == 0;

529 
	}
}

531 
ölöe
 
boﬁ


532 
	$n⁄°ri˘_mask128
(
uöt8_t
 *
a
, uöt8_à*
b
, uöt8_à*
am
, uöt8_à*
bm
) {

533  
	`n⁄°ri˘_mask64
(
a
, 
b
, 
am
, 
bm
) &&

534 
	`n⁄°ri˘_mask64
(
a
+8, 
b
+8, 
am
+8, 
bm
+8);

535 
	}
}

546 
boﬁ


547 
	$m©ch_°d_n⁄°ri˘
(
oÊ_m©ch
 *
a
, oÊ_m©ch *
b
)

549 
oÊ_m©ch_év
 *
Êow_mod_m©ch
;

550 
oÊ_m©ch_év
 *
Êow_íåy_m©ch
;

551 
fõld_Àn
;

552 
uöt8_t
 *
Êow_mod_vÆ
, *
Êow_mod_mask
=0;

553 
uöt8_t
 *
Êow_íåy_vÆ
, *
Êow_íåy_mask
=0;

554 
boﬁ
 
has_mask
;

557 i‡(!
a
->
hódî
.
Àngth
)

558  
åue
;

561 
	`HMAP_FOR_EACH
(
Êow_mod_m©ch
, 
oÊ_m©ch_év
, 
hm≠_node
, &
a
->
m©ch_fõlds
)

564 
Êow_íåy_m©ch
 = 
	`oxm_m©ch_lookup
(
Êow_mod_m©ch
->
hódî
, 
b
);

565 i‡(!
Êow_íåy_m©ch
) {

566  
Ál£
;

570 
has_mask
 = 
	`OXM_HASMASK
(
Êow_mod_m©ch
->
hódî
);

571 
fõld_Àn
 = 
	`OXM_LENGTH
(
Êow_mod_m©ch
->
hódî
);

572 
Êow_mod_vÆ
 = 
Êow_mod_m©ch
->
vÆue
;

573 
Êow_íåy_vÆ
 = 
Êow_íåy_m©ch
->
vÆue
;

574 i‡(
has_mask
)

576 
fõld_Àn
 /= 2;

577 
Êow_mod_mask
 = 
Êow_mod_m©ch
->
vÆue
 + 
fõld_Àn
;

578 
Êow_íåy_mask
 = 
Êow_íåy_m©ch
->
vÆue
 + 
fõld_Àn
;

580 
fõld_Àn
) {

582 i‡(
has_mask
) {

583 i‡(!
	`n⁄°ri˘_mask8
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
, 
Êow_mod_mask
, 
Êow_íåy_mask
))

584  
Ál£
;

587 i‡(!
	`m©ch_8
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
))

588  
Ál£
;

592 i‡(
has_mask
) {

593 i‡(!
	`n⁄°ri˘_mask16
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
, 
Êow_mod_mask
, 
Êow_íåy_mask
))

594  
Ál£
;

597 i‡(!
	`m©ch_16
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
))

598  
Ál£
;

602 i‡(
has_mask
) {

603 i‡(!
	`n⁄°ri˘_mask32
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
, 
Êow_mod_mask
, 
Êow_íåy_mask
))

604  
Ál£
;

607 i‡(!
	`m©ch_32
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
))

608  
Ál£
;

612 i‡(
has_mask
) {

613 i‡(!
	`n⁄°ri˘_mask48
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
, 
Êow_mod_mask
, 
Êow_íåy_mask
))

614  
Ál£
;

617 i‡(!
	`m©ch_48
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
))

618  
Ál£
;

622 i‡(
has_mask
) {

623 i‡(!
	`n⁄°ri˘_mask64
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
, 
Êow_mod_mask
, 
Êow_íåy_mask
))

624  
Ál£
;

627 i‡(!
	`m©ch_64
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
))

628  
Ál£
;

632 i‡(
has_mask
) {

633 i‡(!
	`n⁄°ri˘_mask128
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
, 
Êow_mod_mask
, 
Êow_íåy_mask
))

634  
Ál£
;

637 i‡(!
	`m©ch_128
(
Êow_mod_vÆ
, 
Êow_íåy_vÆ
))

638  
Ál£
;

650  
åue
;

651 
	}
}

657 
ölöe
 
boﬁ


658 
	$öcom∑tibÀ_8
(
uöt8_t
 *
a
, uöt8_à*
b
, uöt8_à*
am
, uöt8_à*
bm
) {

660  (–~(*
am
|*
bm
Ë& (*
a
^*
b
) ) != 0);

661 
	}
}

663 
ölöe
 
boﬁ


664 
	$öcom∑tibÀ_16
(
uöt8_t
 *
a
, uöt8_à*
b
, uöt8_à*
am
, uöt8_à*
bm
) {

665 
uöt16_t
 *
a1
 = (uöt16_à*Ë
a
;

666 
uöt16_t
 *
b1
 = (uöt16_à*Ë
b
;

667 
uöt16_t
 *
mask_a
 = (uöt16_à*Ë
am
;

668 
uöt16_t
 *
mask_b
 = (uöt16_à*Ë
bm
;

670  (–~(*
mask_a
|*
mask_b
Ë& (*
a1
^*
b1
) ) != 0);

671 
	}
}

673 
ölöe
 
boﬁ


674 
	$öcom∑tibÀ_32
(
uöt8_t
 *
a
, uöt8_à*
b
, uöt8_à*
am
, uöt8_à*
bm
) {

675 
uöt32_t
 *
a1
 = (uöt32_à*Ë
a
;

676 
uöt32_t
 *
b1
 = (uöt32_à*Ë
b
;

677 
uöt32_t
 *
mask_a
 = (uöt32_à*Ë
am
;

678 
uöt32_t
 *
mask_b
 = (uöt32_à*Ë
bm
;

680  (–~(*
mask_a
|*
mask_b
Ë& (*
a1
^*
b1
) ) != 0);

681 
	}
}

683 
ölöe
 
boﬁ


684 
	$öcom∑tibÀ_48
(
uöt8_t
 *
a
, uöt8_à*
b
, uöt8_à*
am
, uöt8_à*
bm
) {

685  (
	`öcom∑tibÀ_32
(
a
, 
b
, 
am
, 
bm
) ||

686 
	`öcom∑tibÀ_16
(
a
+4, 
b
+4, 
am
+4, 
bm
+4));

687 
	}
}

689 
ölöe
 
boﬁ


690 
	$öcom∑tibÀ_64
(
uöt8_t
 *
a
, uöt8_à*
b
, uöt8_à*
am
, uöt8_à*
bm
) {

691 
uöt64_t
 *
a1
 = (uöt64_à*Ë
a
;

692 
uöt64_t
 *
b1
 = (uöt64_à*Ë
b
;

693 
uöt64_t
 *
mask_a
 = (uöt64_à*Ë
am
;

694 
uöt64_t
 *
mask_b
 = (uöt64_à*Ë
bm
;

696  (–~(*
mask_a
|*
mask_b
Ë& (*
a1
^*
b1
) ) != 0);

697 
	}
}

699 
ölöe
 
boﬁ


700 
	$öcom∑tibÀ_128
(
uöt8_t
 *
a
, uöt8_à*
b
, uöt8_à*
am
, uöt8_à*
bm
) {

701  (
	`öcom∑tibÀ_64
(
a
, 
b
, 
am
, 
bm
) ||

702 
	`öcom∑tibÀ_64
(
a
+8, 
b
+8, 
am
+8, 
bm
+8));

703 
	}
}

711 
boﬁ


712 
	$m©ch_°d_ovîœp
(
oÊ_m©ch
 *
a
, oÊ_m©ch *
b
)

714 
uöt64_t
 
Æl_mask
[2] = {0, 0};

715 
oÊ_m©ch_év
 *
f_a
;

716 
oÊ_m©ch_év
 *
f_b
;

717 
hódî
, 
hódî_m
;

718 
fõld_Àn
;

719 
uöt8_t
 *
vÆ_a
, *
mask_a
;

720 
uöt8_t
 *
vÆ_b
, *
mask_b
;

723 
	`HMAP_FOR_EACH
(
f_a
, 
oÊ_m©ch_év
, 
hm≠_node
, &
a
->
m©ch_fõlds
)

725 
fõld_Àn
 = 
	`OXM_LENGTH
(
f_a
->
hódî
);

726 
vÆ_a
 = 
f_a
->
vÆue
;

727 i‡(
	`OXM_HASMASK
(
f_a
->
hódî
)) {

728 
fõld_Àn
 /= 2;

729 
hódî
 = (
f_a
->hódî & 0xffff„00Ë| 
fõld_Àn
;

730 
hódî_m
 = 
f_a
->
hódî
;

731 
mask_a
 = 
f_a
->
vÆue
 + 
fõld_Àn
;

733 
hódî
 = 
f_a
->header;

734 
hódî_m
 = (
f_a
->
hódî
 & 0xffff„00Ë| 0x100 | (
fõld_Àn
 << 1);

736 
mask_a
 = (
uöt8_t
 *Ë
Æl_mask
;

741 
f_b
 = 
	`oxm_m©ch_lookup
(
hódî
, 
b
);

742 i‡(!
f_b
Ëf_b = 
	`oxm_m©ch_lookup
(
hódî_m
, 
b
);

744 i‡(
f_b
) {

745 
vÆ_b
 = 
f_b
->
vÆue
;

746 i‡(
	`OXM_HASMASK
(
f_b
->
hódî
)) {

747 
mask_b
 = 
f_b
->
vÆue
 + 
fõld_Àn
;

750 
mask_b
 = (
uöt8_t
 *Ë
Æl_mask
;

752 
fõld_Àn
) {

754 i‡(
	`öcom∑tibÀ_8
(
vÆ_a
, 
vÆ_b
, 
mask_a
, 
mask_b
)) {

755  
Ál£
;

759 i‡(
	`öcom∑tibÀ_16
(
vÆ_a
, 
vÆ_b
, 
mask_a
, 
mask_b
)) {

760  
Ál£
;

764 i‡(
	`öcom∑tibÀ_32
(
vÆ_a
, 
vÆ_b
, 
mask_a
, 
mask_b
)) {

765  
Ál£
;

769 i‡(
	`öcom∑tibÀ_48
(
vÆ_a
, 
vÆ_b
, 
mask_a
, 
mask_b
)) {

770  
Ál£
;

774 i‡(
	`öcom∑tibÀ_64
(
vÆ_a
, 
vÆ_b
, 
mask_a
, 
mask_b
)) {

775  
Ál£
;

779 i‡(
	`öcom∑tibÀ_128
(
vÆ_a
, 
vÆ_b
, 
mask_a
, 
mask_b
)) {

780  
Ál£
;

794  
åue
;

795 
	}
}

	@udatapath/match_std.h

32 #i‚de‡
MATCH_EXT_H


33 
	#MATCH_EXT_H
 1

	)

35 
	~<°dboﬁ.h
>

36 
	~"oÊib/oÊ-°ru˘s.h
"

42 
boﬁ


43 
m©ch_°d_ovîœp
(
oÊ_m©ch
 *
a
, oÊ_m©ch *
b
);

45 
boﬁ


46 
∑ckë_m©ch
(
oÊ_m©ch
 *
a
, oÊ_m©ch *
b
);

49 
boﬁ


50 
m©ch_°d_°ri˘
(
oÊ_m©ch
 *
a
, oÊ_m©ch *
b
);

53 
boﬁ


54 
m©ch_°d_n⁄°ri˘
(
oÊ_m©ch
 *
a
, oÊ_m©ch *
b
);

	@udatapath/meter_entry.c

32 
	~<°dboﬁ.h
>

33 
	~"Êow_íåy.h
"

34 
	~"mëî_íåy.h
"

35 
	~"mëî_èbÀ.h
"

36 
	~"dp_a˘i⁄s.h
"

37 
	~"d©≠©h.h
"

38 
	~"utû.h
"

39 
	~"oÊib/oÊ.h
"

40 
	~"oÊib/oÊ-°ru˘s.h
"

41 
	~"oÊib/oÊ-utûs.h
"

42 
	~"oÊib/oÊ-mesßges.h
"

43 
	~"timevÆ.h
"

44 
	~<m©h.h
>

45 
	~"vlog.h
"

46 
	#LOG_MODULE
 
VLM_mëî_e


	)

48 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

52 
	gmëî_èbÀ
;

53 
	gd©≠©h
;

56 
	sÊow_ªf_íåy
 {

57 
li°
 
	mnode
;

58 
Êow_íåy
 *
	míåy
;

63 
mëî_íåy
 *

64 
	$mëî_íåy_¸óã
(
d©≠©h
 *
dp
, 
mëî_èbÀ
 *
èbÀ
, 
oÊ_msg_mëî_mod
 *
mod
) {

65 
mëî_íåy
 *
íåy
;

66 
size_t
 
i
;

67 
uöt64_t
 
now
;

69 
now
 = 
	`time_m£c
();

70 
íåy
 = 
	`xmÆloc
((
mëî_íåy
));

72 
íåy
->
dp
 = dp;

73 
íåy
->
èbÀ
 =Åable;

76 
íåy
->
c⁄fig
 = 
	`xmÆloc
((
oÊ_mëî_c⁄fig
));

77 
íåy
->
c⁄fig
->
mëî_id
 = 
mod
->meter_id;

78 
íåy
->
c⁄fig
->
Êags
 = 
mod
->flags;

79 
íåy
->
c⁄fig
->
mëî_b™ds_num
 = 
mod
->meter_bands_num;

82 
íåy
->
c⁄fig
->
b™ds
 = (
oÊ_mëî_b™d_hódî
 **Ë
	`xmÆloc
((oÊ_mëî_b™d_hódî *Ë*É¡ry->c⁄fig->
mëî_b™ds_num
);

83 
i
 = 0; i < 
íåy
->
c⁄fig
->
mëî_b™ds_num
; i++){

84 
mod
->
b™ds
[
i
]->
ty≥
){

85 (
OFPMBT_DROP
):{

86 
oÊ_mëî_b™d_dr›
 *
b™d
 = 
	`xmÆloc
((ofl_meter_band_drop));

87 
b™d
->
ty≥
 = 
OFPMBT_DROP
;

88 
b™d
->
øã
 = 
mod
->
b™ds
[
i
]->rate;

89 
b™d
->
bur°_size
 = 
mod
->
b™ds
[
i
]->burst_size;

90 
íåy
->
c⁄fig
->
b™ds
[
i
] = (
oÊ_mëî_b™d_hódî
 *Ë
b™d
;

93 (
OFPMBT_DSCP_REMARK
):{

94 
oÊ_mëî_b™d_ds˝_ªm¨k
 *
b™d
 = 
	`xmÆloc
((ofl_meter_band_dscp_remark));

95 
oÊ_mëî_b™d_ds˝_ªm¨k
 *
ﬁd
 = (oÊ_mëî_b™d_ds˝_ªm¨k *Ë
mod
->
b™ds
[
i
];

96 
b™d
->
ty≥
 = 
OFPMBT_DSCP_REMARK
;

97 
b™d
->
øã
 = 
ﬁd
->rate;

98 
b™d
->
bur°_size
 = 
ﬁd
->burst_size;

99 
b™d
->
¥ec_Àvñ
 = 
ﬁd
->prec_level;

100 
íåy
->
c⁄fig
->
b™ds
[
i
] = (
oÊ_mëî_b™d_hódî
 *Ë
b™d
;

103 (
OFPMBT_EXPERIMENTER
):{

104 
oÊ_mëî_b™d_ex≥rimíãr
 *
b™d
 = 
	`xmÆloc
((ofl_meter_band_experimenter));

105 
oÊ_mëî_b™d_ex≥rimíãr
 *
ﬁd
 = (oÊ_mëî_b™d_ex≥rimíã∏*Ë
mod
->
b™ds
[
i
];

106 
b™d
->
ty≥
 = 
OFPMBT_EXPERIMENTER
;

107 
b™d
->
øã
 = 
ﬁd
->rate;

108 
b™d
->
bur°_size
 = 
ﬁd
->burst_size;

109 
b™d
->
ex≥rimíãr
 = 
ﬁd
->experimenter;

110 
íåy
->
c⁄fig
->
b™ds
[
i
] = (
oÊ_mëî_b™d_hódî
 *Ë
b™d
;

116 
íåy
->
°©s
 = 
	`xmÆloc
((
oÊ_mëî_°©s
));

117 
íåy
->
°©s
->
mëî_id
 = 
mod
->meter_id;

118 
íåy
->
°©s
->
byã_ö_cou¡
 = 0;

119 
íåy
->
°©s
->
Êow_cou¡
 = 0;

120 
íåy
->
°©s
->
∑ckë_ö_cou¡
 = 0;

121 
íåy
->
°©s
->
mëî_b™ds_num
 = 
mod
->meter_bands_num;

122 
íåy
->
°©s
->
duøti⁄_n£c
 = 0;

123 
íåy
->
°©s
->
duøti⁄_£c
 = 0;

124 
íåy
->
¸óãd
 = 
now
;

125 
íåy
->
°©s
->
b™d_°©s
 = (
oÊ_mëî_b™d_°©s
 **Ë
	`xmÆloc
((oÊ_mëî_b™d_°©†*Ë*É¡ry->°©s->
mëî_b™ds_num
);

128 
i
=0; i<
íåy
->
°©s
->
mëî_b™ds_num
; i++) {

129 
íåy
->
°©s
->
b™d_°©s
[
i
] = (
oÊ_mëî_b™d_°©s
 *Ë
	`xmÆloc
((ofl_meter_band_stats));

130 
íåy
->
°©s
->
b™d_°©s
[
i
]->
byã_b™d_cou¡
 = 0;

131 
íåy
->
°©s
->
b™d_°©s
[
i
]->
∑ckë_b™d_cou¡
 = 0;

132 
íåy
->
°©s
->
b™d_°©s
[
i
]->
œ°_fûl
 = 
	`time_m£c
();

133 
íåy
->
°©s
->
b™d_°©s
[
i
]->
tokís
 = 0;

136 
	`li°_öô
(&
íåy
->
Êow_ªfs
);

138  
íåy
;

139 
	}
}

142 
	$mëî_íåy_upd©e
(
mëî_íåy
 *
íåy
) {

143 
íåy
->
°©s
->
duøti⁄_£c
 = (
	`time_m£c
(Ë-É¡ry->
¸óãd
) / 1000;

144 
íåy
->
°©s
->
duøti⁄_n£c
 = ((
	`time_m£c
(Ë-É¡ry->
¸óãd
) % 1000) * 1000;

145 
	}
}

148 
	$mëî_íåy_de°roy
(
mëî_íåy
 *
íåy
) {

149 
Êow_ªf_íåy
 *
ªf
, *
√xt
;

152 
	`LIST_FOR_EACH_SAFE
(
ªf
, 
√xt
, 
Êow_ªf_íåy
, 
node
, &
íåy
->
Êow_ªfs
) {

153 
	`Êow_íåy_ªmove
(
ªf
->
íåy
, 
OFPRR_METER_DELETE
);

157 
	`OFL_UTILS_FREE_ARR_FUN
(
íåy
->
c⁄fig
->
b™ds
,É¡ry->c⁄fig->
mëî_b™ds_num
, 
oÊ_°ru˘s_‰ì_mëî_b™ds
);

158 
	`‰ì
(
íåy
->
c⁄fig
);

160 
	`OFL_UTILS_FREE_ARR
(
íåy
->
°©s
->
b™d_°©s
,É¡ry->°©s->
mëî_b™ds_num
);

161 
	`‰ì
(
íåy
->
°©s
);

162 
	`‰ì
(
íåy
);

163 
	}
}

165 
boﬁ


166 
	$c⁄sume_tokís
(
oÊ_mëî_b™d_°©s
 *
b™d
, 
uöt16_t
 
mëî_Êag
, 
∑ckë
 *
pkt
){

168 if(
mëî_Êag
 & 
OFPMF_KBPS
){

169 
uöt32_t
 
pkt_size
 = (
pkt
->
buf„r
->
size
*8)/1024;

170 i‡(
b™d
->
tokís
 >
pkt_size
) {

171 
b™d
->
tokís
 -
pkt_size
;

172  
åue
;

174  
Ál£
;

178 if(
mëî_Êag
 & 
OFPMF_PKTPS
) {

179 i‡(
b™d
->
tokís
 >= 1000) {

180 
b™d
->
tokís
 -= 1000;

181  
åue
;

183  
Ál£
;

186  
Ál£
;

187 
	}
}

189 
size_t


190 
	$choo£_b™d
(
mëî_íåy
 *
íåy
, 
∑ckë
 *
pkt
)

192 
size_t
 
i
;

193 
size_t
 
b™d_ödex
 = -1;

194 
uöt32_t
 
tmp_øã
 = 0;

195 
i
 = 0; i < 
íåy
->
°©s
->
mëî_b™ds_num
; i++)

197 
oÊ_mëî_b™d_hódî
 *
b™d_hódî
 = 
íåy
->
c⁄fig
->
b™ds
[
i
];

199 if(!
	`c⁄sume_tokís
(
íåy
->
°©s
->
b™d_°©s
[
i
],É¡ry->
c⁄fig
->
Êags
, 
pkt
Ë&& 
b™d_hódî
->
øã
 > 
tmp_øã
)

201 
tmp_øã
 = 
b™d_hódî
->
øã
;

202 
b™d_ödex
 = 
i
;

205  
b™d_ödex
;

206 
	}
}

211 
	$mëî_íåy_≠∂y
(
mëî_íåy
 *
íåy
, 
∑ckë
 **
pkt
){

213 
size_t
 
b
;

214 
boﬁ
 
dr›
 = 
Ál£
;

216 
íåy
->
°©s
->
∑ckë_ö_cou¡
++;

217 
íåy
->
°©s
->
byã_ö_cou¡
 +(*
pkt
)->
buf„r
->
size
;

219 
b
 = 
	`choo£_b™d
(
íåy
, *
pkt
);

220 if(
b
 != -1){

221 
oÊ_mëî_b™d_hódî
 *
b™d_hódî
 = (oÊ_mëî_b™d_hódî*Ë
íåy
->
c⁄fig
->
b™ds
[
b
];

222 
b™d_hódî
->
ty≥
){

223 
OFPMBT_DROP
:{

224 
dr›
 = 
åue
;

227 
OFPMBT_DSCP_REMARK
:{

228 
oÊ_mëî_b™d_ds˝_ªm¨k
 *
b™d_hódî
 = (oÊ_mëî_b™d_ds˝_ªm¨k *Ë
íåy
->
c⁄fig
->
b™ds
[
b
];

230 
uöt8_t
 
√w_ds˝
 = ((*
pkt
)->
h™dÀ_°d
->
¥Ÿo
->
ùv4
->
ù_tos
 >> 5Ë- 
b™d_hódî
->
¥ec_Àvñ
;

231 (*
pkt
)->
h™dÀ_°d
->
¥Ÿo
->
ùv4
->
ù_tos
 = (
√w_ds˝
 << 5) | ((*pkt)->handle_std->proto->ipv4->ip_tos & 0x1f);

234 
OFPMBT_EXPERIMENTER
:{

238 
íåy
->
°©s
->
b™d_°©s
[
b
]->
byã_b™d_cou¡
 +(*
pkt
)->
buf„r
->
size
;

239 
íåy
->
°©s
->
b™d_°©s
[
b
]->
∑ckë_b™d_cou¡
++;

240 i‡(
dr›
){

241 
	`VLOG_ERR_RL
(
LOG_MODULE
, &
æ
, "Dr›pögÖackë:Ñ©ê%d", 
b™d_hódî
->
øã
);

242 
	`∑ckë_de°roy
(*
pkt
);

243 *
pkt
 = 
NULL
;

247 
	}
}

251 
boﬁ


252 
	$has_Êow_ªf
(
mëî_íåy
 *
íåy
, 
Êow_íåy
 *
„
) {

253 
Êow_ªf_íåy
 *
f
;

255 
	`LIST_FOR_EACH
(
f
, 
Êow_ªf_íåy
, 
node
, &
íåy
->
Êow_ªfs
) {

256 i‡(
f
->
íåy
 =
„
) {

257  
åue
;

260  
Ál£
;

261 
	}
}

265 
	$mëî_íåy_add_Êow_ªf
(
mëî_íåy
 *
íåy
, 
Êow_íåy
 *
„
) {

266 i‡(!(
	`has_Êow_ªf
(
íåy
, 
„
))) {

267 
Êow_ªf_íåy
 *
f
 = 
	`xmÆloc
((flow_ref_entry));

268 
f
->
íåy
 = 
„
;

269 
	`li°_ö£π
(&
íåy
->
Êow_ªfs
, &
f
->
node
);

270 
íåy
->
°©s
->
Êow_cou¡
++;

272 
	}
}

275 
	$mëî_íåy_dñ_Êow_ªf
(
mëî_íåy
 *
íåy
, 
Êow_íåy
 *
„
) {

276 
Êow_ªf_íåy
 *
f
, *
√xt
;

278 
	`LIST_FOR_EACH_SAFE
(
f
, 
√xt
, 
Êow_ªf_íåy
, 
node
, &
íåy
->
Êow_ªfs
) {

279 i‡(
f
->
íåy
 =
„
) {

280 
	`li°_ªmove
(&
f
->
node
);

281 
	`‰ì
(
f
);

282 
íåy
->
°©s
->
Êow_cou¡
--;

285 
	}
}

289 
	$ªfûl_buckë
(
mëî_íåy
 *
íåy
)

291 
size_t
 
i
;

293 
i
 = 0; i < 
íåy
->
c⁄fig
->
mëî_b™ds_num
; i++) {

294 
now
 = 
	`time_m£c
();

295 
tokís
 = !(
íåy
->
c⁄fig
->
Êags
 & 
OFPMF_PKTPS
) ?

296 (
now
 - 
íåy
->
°©s
->
b™d_°©s
[
i
]->
œ°_fûl
) *

297 
íåy
->
c⁄fig
->
b™ds
[
i
]->
øã
 +É¡ry->
°©s
->
b™d_°©s
[i]->
tokís


298 : (
now
 - 
íåy
->
°©s
->
b™d_°©s
[
i
]->
œ°_fûl
) *

299 (
íåy
->
c⁄fig
->
b™ds
[
i
]->
øã
 * 1000Ë+É¡ry->
°©s
->
b™d_°©s
[i]->
tokís
;

301 i‡(!(
íåy
->
c⁄fig
->
Êags
 & 
OFPMF_BURST
)){

302 if(
íåy
->
c⁄fig
->
Êags
 & 
OFPMF_KBPS
 && 
tokís
 >= 1){

303 
íåy
->
°©s
->
b™d_°©s
[
i
]->
tokís
 = 
	`MIN
—okís,É¡ry->
c⁄fig
->
b™ds
[i]->
øã
);

304 
íåy
->
°©s
->
b™d_°©s
[
i
]->
œ°_fûl
 = 
now
;

308 if(
tokís
 >= 1000) {

309 
íåy
->
°©s
->
b™d_°©s
[
i
]->
tokís
 = 
	`MIN
—okís,É¡ry->
c⁄fig
->
b™ds
[i]->
øã
 * 1000);

310 
íåy
->
°©s
->
b™d_°©s
[
i
]->
œ°_fûl
 = 
now
;

316 if(
íåy
->
c⁄fig
->
Êags
 & 
OFPMF_KBPS
 && 
tokís
 >= 1 ) {

317 
íåy
->
°©s
->
b™d_°©s
[
i
]->
tokís
 = 
	`MIN
—okís,É¡ry->
c⁄fig
->
b™ds
[i]->
bur°_size
);

321 if(
tokís
 >= 1000) {

322 
íåy
->
°©s
->
b™d_°©s
[
i
]->
tokís
 = 
	`MIN
—okís,É¡ry->
c⁄fig
->
b™ds
[i]->
bur°_size
 * 1000);

327 
	}
}

	@udatapath/meter_entry.h

32 #i‚de‡
METER_ENTRY_H


33 
	#METER_ENTRY_H
 1

	)

35 
	~<°dboﬁ.h
>

36 
	~"hm≠.h
"

37 
	~"li°.h
"

38 
	~"∑ckë.h
"

39 
	~"oÊib/oÊ-°ru˘s.h
"

40 
	~"oÊib/oÊ-mesßges.h
"

41 
	~"mëî_èbÀ.h
"

51 
	g∑ckë
;

52 
	gd©≠©h
;

53 
	gÊow_íåy
;

54 
	g£ndî
;

57 
	smëî_íåy
 {

58 
hm≠_node
 
	mnode
;

60 
d©≠©h
 *
	mdp
;

61 
mëî_èbÀ
 *
	mèbÀ
;

63 
oÊ_mëî_°©s
 *
	m°©s
;

64 
oÊ_mëî_c⁄fig
 *
	mc⁄fig
;

66 
uöt64_t
 
	m¸óãd
;

68 
li°
 
	mÊow_ªfs
;

73 
mëî_íåy
 *

74 
mëî_íåy_¸óã
(
d©≠©h
 *
dp
, 
mëî_èbÀ
 *
èbÀ
, 
oÊ_msg_mëî_mod
 *
mod
);

78 
mëî_íåy_upd©e
(
mëî_íåy
 *
íåy
);

82 
mëî_íåy_de°roy
(
mëî_íåy
 *
íåy
);

86 
mëî_íåy_≠∂y
(
mëî_íåy
 *
íåy
, 
∑ckë
 **
pkt
);

91 
mëî_íåy_add_Êow_ªf
(
mëî_íåy
 *
íåy
, 
Êow_íåy
 *
„
);

95 
mëî_íåy_dñ_Êow_ªf
(
mëî_íåy
 *
íåy
, 
Êow_íåy
 *
„
);

98 
ªfûl_buckë
(
mëî_íåy
 *
íåy
);

	@udatapath/meter_table.c

32 
	~<sys/ty≥s.h
>

33 
	~"compûî.h
"

34 
	~"mëî_èbÀ.h
"

35 
	~"d©≠©h.h
"

36 
	~"dp_a˘i⁄s.h
"

37 
	~"hm≠.h
"

38 
	~"li°.h
"

39 
	~"∑ckë.h
"

40 
	~"utû.h
"

41 
	~"›íÊow/›íÊow.h
"

42 
	~"oÊib/oÊ.h
"

43 
	~"oÊib/oÊ-mesßges.h
"

45 
	~"vlog.h
"

46 
	#LOG_MODULE
 
VLM_mëî_t


	)

48 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

51 
mëî_èbÀ
 *

52 
	$mëî_èbÀ_¸óã
(
d©≠©h
 *
dp
) {

53 
mëî_èbÀ
 *
èbÀ
;

55 
èbÀ
 = 
	`xmÆloc
((
mëî_èbÀ
));

56 
èbÀ
->
dp
 = dp;

57 
èbÀ
->
íåõs_num
 = 0;

58 
	`hm≠_öô
(&
èbÀ
->
mëî_íåõs
);

60 
èbÀ
->
„©uªs
 = 
	`xmÆloc
((
oÊ_mëî_„©uªs
));

61 
èbÀ
->
„©uªs
->
max_mëî
 = 
DEFAULT_MAX_METER
;

62 
èbÀ
->
„©uªs
->
max_b™ds
 = 
DEFAULT_MAX_BAND_PER_METER
;

63 
èbÀ
->
„©uªs
->
max_cﬁ‹
 = 
DEFAULT_MAX_METER_COLOR
;

64 
èbÀ
->
„©uªs
->
ˇ∑bûôõs
 = 
OFPMF_KBPS
 | 
OFPMF_BURST
 | 
OFPMF_STATS
;

66 
èbÀ
->
„©uªs
->
b™d_ty≥s
 = 1;

68  
èbÀ
;

69 
	}
}

72 
	$mëî_èbÀ_de°roy
(
mëî_èbÀ
 *
èbÀ
) {

73 
mëî_íåy
 *
íåy
, *
√xt
;

75 
	`HMAP_FOR_EACH_SAFE
(
íåy
, 
√xt
, 
mëî_íåy
, 
node
, &
èbÀ
->
mëî_íåõs
) {

76 
	`mëî_íåy_de°roy
(
íåy
);

79 
	`‰ì
(
èbÀ
);

80 
	}
}

83 
mëî_íåy
 *

84 
	$mëî_èbÀ_föd
(
mëî_èbÀ
 *
èbÀ
, 
uöt32_t
 
mëî_id
) {

85 
hm≠_node
 *
hnode
;

87 
hnode
 = 
	`hm≠_fú°_wôh_hash
(&
èbÀ
->
mëî_íåõs
, 
mëî_id
);

89 i‡(
hnode
 =
NULL
) {

90  
NULL
;

93  
	`CONTAINER_OF
(
hnode
, 
mëî_íåy
, 
node
);

94 
	}
}

99 
	$mëî_èbÀ_≠∂y
(
mëî_èbÀ
 *
èbÀ
, 
∑ckë
 **∑ckë, 
uöt32_t
 
mëî_id
) {

100 
mëî_íåy
 *
íåy
;

102 
íåy
 = 
	`mëî_èbÀ_föd
(
èbÀ
, 
mëî_id
);

104 i‡(
íåy
 =
NULL
) {

105 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "TryögÅÿexecuãÇ⁄-exi°ög mëî (%u).", 
mëî_id
);

109 
	`mëî_íåy_≠∂y
(
íåy
, 
∑ckë
);

110 
	}
}

114 
oÊ_îr


115 
	$mëî_èbÀ_add
(
mëî_èbÀ
 *
èbÀ
, 
oÊ_msg_mëî_mod
 *
mod
) {

117 
mëî_íåy
 *
íåy
;

119 i‡(
	`hm≠_fú°_wôh_hash
(&
èbÀ
->
mëî_íåõs
, 
mod
->
mëî_id
Ë!
NULL
) {

120  
	`oÊ_îr‹
(
OFPET_METER_MOD_FAILED
, 
OFPMMFC_METER_EXISTS
);

123 i‡(
èbÀ
->
íåõs_num
 =
DEFAULT_MAX_METER
) {

124  
	`oÊ_îr‹
(
OFPET_METER_MOD_FAILED
, 
OFPMMFC_OUT_OF_METERS
);

127 i‡(
èbÀ
->
b™ds_num
 + 
mod
->
mëî_b™ds_num
 > 
METER_TABLE_MAX_BANDS
) {

128  
	`oÊ_îr‹
(
OFPET_METER_MOD_FAILED
, 
OFPMMFC_OUT_OF_BANDS
);

131 
íåy
 = 
	`mëî_íåy_¸óã
(
èbÀ
->
dp
,ÅabÀ, 
mod
);

133 
	`hm≠_ö£π
(&
èbÀ
->
mëî_íåõs
, &
íåy
->
node
,É¡ry->
°©s
->
mëî_id
);

135 
èbÀ
->
íåõs_num
++;

136 
èbÀ
->
b™ds_num
 +
íåy
->
°©s
->
mëî_b™ds_num
;

137 
	`oÊ_msg_‰ì_mëî_mod
(
mod
, 
Ál£
);

139 
	}
}

142 
oÊ_îr


143 
	$mëî_èbÀ_modify
(
mëî_èbÀ
 *
èbÀ
, 
oÊ_msg_mëî_mod
 *
mod
) {

144 
mëî_íåy
 *
íåy
, *
√w_íåy
;

146 
íåy
 = 
	`mëî_èbÀ_föd
(
èbÀ
, 
mod
->
mëî_id
);

147 i‡(
íåy
 =
NULL
) {

148  
	`oÊ_îr‹
(
OFPET_METER_MOD_FAILED
, 
OFPMMFC_UNKNOWN_METER
);

151 i‡(
èbÀ
->
b™ds_num
 - 
íåy
->
c⁄fig
->
mëî_b™ds_num
 + 
mod
->mëî_b™ds_num > 
METER_TABLE_MAX_BANDS
) {

152  
	`oÊ_îr‹
(
OFPET_METER_MOD_FAILED
, 
OFPMMFC_OUT_OF_BANDS
);

155 
√w_íåy
 = 
	`mëî_íåy_¸óã
(
èbÀ
->
dp
,ÅabÀ, 
mod
);

157 
	`hm≠_ªmove
(&
èbÀ
->
mëî_íåõs
, &
íåy
->
node
);

158 
	`hm≠_ö£π_Á°
(&
èbÀ
->
mëî_íåõs
, &
√w_íåy
->
node
, 
mod
->
mëî_id
);

160 
èbÀ
->
b™ds_num
 =ÅabÀ->b™ds_num - 
íåy
->
c⁄fig
->
mëî_b™ds_num
 + 
√w_íåy
->
°©s
->meter_bands_num;

163 
	`li°_ª∂a˚
(&
√w_íåy
->
Êow_ªfs
, &
íåy
->flow_refs);

164 
	`li°_öô
(&
íåy
->
Êow_ªfs
);

166 
	`mëî_íåy_de°roy
(
íåy
);

167 
	`oÊ_msg_‰ì_mëî_mod
(
mod
, 
Ál£
);

169 
	}
}

172 
oÊ_îr


173 
	$mëî_èbÀ_dñëe
(
mëî_èbÀ
 *
èbÀ
, 
oÊ_msg_mëî_mod
 *
mod
) {

174 i‡(
mod
->
mëî_id
 =
OFPM_ALL
) {

175 
mëî_íåy
 *
íåy
, *
√xt
;

177 
	`HMAP_FOR_EACH_SAFE
(
íåy
, 
√xt
, 
mëî_íåy
, 
node
, &
èbÀ
->
mëî_íåõs
) {

178 
	`mëî_íåy_de°roy
(
íåy
);

180 
	`hm≠_de°roy
(&
èbÀ
->
mëî_íåõs
);

181 
	`hm≠_öô
(&
èbÀ
->
mëî_íåõs
);

183 
èbÀ
->
íåõs_num
 = 0;

184 
èbÀ
->
b™ds_num
 = 0;

185 
	`oÊ_msg_‰ì_mëî_mod
(
mod
, 
Ál£
);

189 
mëî_íåy
 *
íåy
;

191 
íåy
 = 
	`mëî_èbÀ_föd
(
èbÀ
, 
mod
->
mëî_id
);

193 i‡(
íåy
 !
NULL
) {

195 
èbÀ
->
íåõs_num
--;

196 
èbÀ
->
b™ds_num
 -
íåy
->
°©s
->
mëî_b™ds_num
;

198 
	`hm≠_ªmove
(&
èbÀ
->
mëî_íåõs
, &
íåy
->
node
);

199 
	`mëî_íåy_de°roy
(
íåy
);

201 
	`oÊ_msg_‰ì_mëî_mod
(
mod
, 
Ál£
);

204 
	}
}

206 
oÊ_îr


207 
	$mëî_èbÀ_h™dÀ_mëî_mod
(
mëî_èbÀ
 *
èbÀ
, 
oÊ_msg_mëî_mod
 *
mod
,

208 c⁄° 
£ndî
 *sender) {

209 if(
£ndî
->
ªmŸe
->
rﬁe
 =
OFPCR_ROLE_SLAVE
)

210  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_IS_SLAVE
);

212 
mod
->
comm™d
) {

213 (
OFPMC_ADD
): {

214  
	`mëî_èbÀ_add
(
èbÀ
, 
mod
);

216 (
OFPMC_MODIFY
): {

217  
	`mëî_èbÀ_modify
(
èbÀ
, 
mod
);

219 (
OFPMC_DELETE
): {

220  
	`mëî_èbÀ_dñëe
(
èbÀ
, 
mod
);

223  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_TYPE
);

226 
	}
}

228 
oÊ_îr


229 
	$mëî_èbÀ_h™dÀ_°©s_ªque°_mëî
(
mëî_èbÀ
 *
èbÀ
,

230 
oÊ_msg_mu…ù¨t_mëî_ªque°
 *
msg
,

231 c⁄° 
£ndî
 *£ndî 
UNUSED
) {

232 
mëî_íåy
 *
íåy
;

234 i‡(
msg
->
mëî_id
 =
OFPM_ALL
) {

235 
íåy
 = 
NULL
;

237 
íåy
 = 
	`mëî_èbÀ_föd
(
èbÀ
, 
msg
->
mëî_id
);

239 i‡(
íåy
 =
NULL
) {

240  
	`oÊ_îr‹
(
OFPET_METER_MOD_FAILED
, 
OFPMMFC_UNKNOWN_METER
);

245 
oÊ_msg_mu…ù¨t_ª∂y_mëî
 
ª∂y
 =

246 {{{.
ty≥
 = 
OFPT_MULTIPART_REPLY
},

247 .
ty≥
 = 
OFPMP_METER
, .
Êags
 = 0x0000},

248 .
°©s_num
 = 
msg
->
mëî_id
 =
OFPM_ALL
 ? 
èbÀ
->
íåõs_num
 : 1,

249 .
°©s
 = 
	`xmÆloc
((
oÊ_mëî_°©s
 *Ë* (
msg
->
mëî_id
 =
OFPM_ALL
 ? 
èbÀ
->
íåõs_num
 : 1))

252 i‡(
msg
->
mëî_id
 =
OFPM_ALL
) {

253 
mëî_íåy
 *
e
;

254 
size_t
 
i
 = 0;

256 
	`HMAP_FOR_EACH
(
e
, 
mëî_íåy
, 
node
, &
èbÀ
->
mëî_íåõs
) {

257 
	`mëî_íåy_upd©e
(
e
);

258 
ª∂y
.
°©s
[
i
] = 
e
->stats;

259 
i
++;

263 
	`mëî_íåy_upd©e
(
íåy
);

264 
ª∂y
.
°©s
[0] = 
íåy
->stats;

267 
	`dp_£nd_mesßge
(
èbÀ
->
dp
, (
oÊ_msg_hódî
 *)&
ª∂y
, 
£ndî
);

269 
	`‰ì
(
ª∂y
.
°©s
);

270 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
èbÀ
->
dp
->
exp
);

273 
	}
}

275 
oÊ_îr


276 
	$mëî_èbÀ_h™dÀ_°©s_ªque°_mëî_c⁄f
(
mëî_èbÀ
 *
èbÀ
,

277 
oÊ_msg_mu…ù¨t_mëî_ªque°
 *
msg
 
UNUSED
,

278 c⁄° 
£ndî
 *sender) {

279 
mëî_íåy
 *
íåy
;

281 i‡(
msg
->
mëî_id
 =
OFPM_ALL
) {

282 
íåy
 = 
NULL
;

284 
íåy
 = 
	`mëî_èbÀ_föd
(
èbÀ
, 
msg
->
mëî_id
);

286 i‡(
íåy
 =
NULL
) {

287  
	`oÊ_îr‹
(
OFPET_METER_MOD_FAILED
, 
OFPMMFC_UNKNOWN_METER
);

291 
oÊ_msg_mu…ù¨t_ª∂y_mëî_c⁄f
 
ª∂y
 =

292 {{{.
ty≥
 = 
OFPT_MULTIPART_REPLY
},

293 .
ty≥
 = 
OFPMP_METER_CONFIG
, .
Êags
 = 0x0000},

294 .
°©s_num
 = 
èbÀ
->
íåõs_num
,

295 .
°©s
 = 
	`xmÆloc
((
oÊ_mëî_c⁄fig
 *Ë* (
msg
->
mëî_id
 =
OFPM_ALL
 ? 
èbÀ
->
íåõs_num
 : 1))

298 i‡(
msg
->
mëî_id
 =
OFPM_ALL
) {

299 
mëî_íåy
 *
e
;

300 
size_t
 
i
 = 0;

302 
	`HMAP_FOR_EACH
(
e
, 
mëî_íåy
, 
node
, &
èbÀ
->
mëî_íåõs
) {

303 
ª∂y
.
°©s
[
i
] = 
e
->
c⁄fig
;

304 
i
++;

308 
ª∂y
.
°©s
[0] = 
íåy
->
c⁄fig
;

311 
	`dp_£nd_mesßge
(
èbÀ
->
dp
, (
oÊ_msg_hódî
 *)&
ª∂y
, 
£ndî
);

313 
	`‰ì
(
ª∂y
.
°©s
);

314 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
èbÀ
->
dp
->
exp
);

316 
	}
}

318 
oÊ_îr


319 
	$mëî_èbÀ_h™dÀ_„©uªs_ªque°
(
mëî_èbÀ
 *
èbÀ
,

320 
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
msg
 
UNUSED
,

321 c⁄° 
£ndî
 *sender) {

323 
oÊ_msg_mu…ù¨t_ª∂y_mëî_„©uªs
 
ª∂y
 =

324 {{{.
ty≥
 = 
OFPT_MULTIPART_REPLY
},

325 .
ty≥
 = 
OFPMP_METER_FEATURES
, .
Êags
 = 0x0000},

326 .
„©uªs
 = 
èbÀ
->features

328 
	`dp_£nd_mesßge
(
èbÀ
->
dp
, (
oÊ_msg_hódî
 *)&
ª∂y
, 
£ndî
);

330 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
èbÀ
->
dp
->
exp
);

333 
	}
}

336 
	$mëî_èbÀ_add_tokís
(
mëî_èbÀ
 *
èbÀ
){

338 
mëî_íåy
 *
íåy
;

339 
	`HMAP_FOR_EACH
(
íåy
, 
mëî_íåy
, 
node
, &
èbÀ
->
mëî_íåõs
){

340 
	`ªfûl_buckë
(
íåy
);

343 
	}
}

	@udatapath/meter_table.h

32 #i‚de‡
METER_TABLE_H


33 
	#METER_TABLE_H
 1

	)

35 
	~<°dboﬁ.h
>

36 
	~"hm≠.h
"

37 
	~"li°.h
"

38 
	~"∑ckë.h
"

39 
	~"oÊib/oÊ-°ru˘s.h
"

40 
	~"oÊib/oÊ-mesßges.h
"

41 
	~"mëî_íåy.h
"

43 
	#DEFAULT_MAX_METER
 256

	)

44 
	#DEFAULT_MAX_BAND_PER_METER
 16

	)

45 
	#DEFAULT_MAX_METER_COLOR
 8

	)

46 
	#METER_TABLE_MAX_BANDS
 1024

	)

54 
	smëî_èbÀ
 {

55 
d©≠©h
 *
	mdp
;

56 
oÊ_mëî_„©uªs
 *
	m„©uªs
;

57 
size_t
 
	míåõs_num
;

58 
hm≠
 
	mmëî_íåõs
;

59 
size_t
 
	mb™ds_num
;

65 
mëî_èbÀ
 *

66 
mëî_èbÀ_¸óã
(
d©≠©h
 *
dp
);

70 
mëî_èbÀ_de°roy
(
mëî_èbÀ
 *
èbÀ
);

73 
mëî_íåy
 *

74 
mëî_èbÀ_föd
(
mëî_èbÀ
 *
èbÀ
, 
uöt32_t
 
mëî_id
);

78 
mëî_èbÀ_≠∂y
(
mëî_èbÀ
 *
èbÀ
, 
∑ckë
 **∑ckë, 
uöt32_t
 
mëî_id
);

81 
oÊ_îr


82 
mëî_èbÀ_h™dÀ_mëî_mod
(
mëî_èbÀ
 *
èbÀ
, 
oÊ_msg_mëî_mod
 *
mod
, c⁄° 
£ndî
 *sender);

86 
oÊ_îr


87 
mëî_èbÀ_h™dÀ_°©s_ªque°_mëî
(
mëî_èbÀ
 *
èbÀ
,

88 
oÊ_msg_mu…ù¨t_mëî_ªque°
 *
msg
,

89 c⁄° 
£ndî
 *£ndî 
UNUSED
);

92 
oÊ_îr


93 
mëî_èbÀ_h™dÀ_°©s_ªque°_mëî_c⁄f
(
mëî_èbÀ
 *
èbÀ
,

94 
oÊ_msg_mu…ù¨t_mëî_ªque°
 *
msg
 
UNUSED
,

95 c⁄° 
£ndî
 *sender);

97 
oÊ_îr


98 
mëî_èbÀ_h™dÀ_„©uªs_ªque°
(
mëî_èbÀ
 *
èbÀ
,

99 
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
msg
 
UNUSED
,

100 c⁄° 
£ndî
 *sender);

103 
mëî_èbÀ_add_tokís
(
mëî_èbÀ
 *
èbÀ
);

	@udatapath/packet.c

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<°dboﬁ.h
>

34 
	~<sys/ty≥s.h
>

35 
	~"d©≠©h.h
"

36 
	~"dp_buf„rs.h
"

37 
	~"∑ckë.h
"

38 
	~"∑ckës.h
"

39 
	~"a˘i⁄_£t.h
"

40 
	~"oÂbuf.h
"

41 
	~"oÊib/oÊ-°ru˘s.h
"

42 
	~"oÊib/oÊ-¥öt.h
"

43 
	~"utû.h
"

46 
∑ckë
 *

47 
	$∑ckë_¸óã
(
d©≠©h
 *
dp
, 
uöt32_t
 
ö_p‹t
,

48 
oÂbuf
 *
buf
, 
boﬁ
 
∑ckë_out
) {

49 
∑ckë
 *
pkt
;

51 
pkt
 = 
	`xmÆloc
((
∑ckë
));

53 
pkt
->
dp
 = dp;

54 
pkt
->
buf„r
 = 
buf
;

55 
pkt
->
ö_p‹t
 = in_port;

56 
pkt
->
a˘i⁄_£t
 = 
	`a˘i⁄_£t_¸óã
(
dp
->
exp
);

58 
pkt
->
∑ckë_out
 =Öacket_out;

59 
pkt
->
out_group
 = 
OFPG_ANY
;

60 
pkt
->
out_p‹t
 = 
OFPP_ANY
;

61 
pkt
->
out_p‹t_max_Àn
 = 0;

62 
pkt
->
out_queue
 = 0;

63 
pkt
->
buf„r_id
 = 
NO_BUFFER
;

64 
pkt
->
èbÀ_id
 = 0;

66 
pkt
->
h™dÀ_°d
 = 
	`∑ckë_h™dÀ_°d_¸óã
(pkt);

67  
pkt
;

68 
	}
}

70 
∑ckë
 *

71 
	$∑ckë_˛⁄e
(
∑ckë
 *
pkt
) {

72 
∑ckë
 *
˛⁄e
;

74 
˛⁄e
 = 
	`xmÆloc
((
∑ckë
));

75 
˛⁄e
->
dp
 = 
pkt
->dp;

76 
˛⁄e
->
buf„r
 = 
	`oÂbuf_˛⁄e
(
pkt
->buffer);

77 
˛⁄e
->
ö_p‹t
 = 
pkt
->in_port;

78 
˛⁄e
->
a˘i⁄_£t
 = 
	`a˘i⁄_£t_˛⁄e
(
pkt
->action_set);

80 
˛⁄e
->
∑ckë_out
 = 
pkt
->packet_out;

81 
˛⁄e
->
out_group
 = 
OFPG_ANY
;

82 
˛⁄e
->
out_p‹t
 = 
OFPP_ANY
;

83 
˛⁄e
->
out_p‹t_max_Àn
 = 0;

84 
˛⁄e
->
out_queue
 = 0;

85 
˛⁄e
->
buf„r_id
 = 
NO_BUFFER
;

88 
˛⁄e
->
èbÀ_id
 = 
pkt
->table_id;

90 
˛⁄e
->
h™dÀ_°d
 = 
	`∑ckë_h™dÀ_°d_˛⁄e
(˛⁄e, 
pkt
->handle_std);

92  
˛⁄e
;

93 
	}
}

96 
	$∑ckë_de°roy
(
∑ckë
 *
pkt
) {

100 i‡(
pkt
->
buf„r_id
 !
NO_BUFFER
) {

101 i‡(
	`dp_buf„rs_is_Æive
(
pkt
->
dp
->
buf„rs
,Ökt->
buf„r_id
)) {

104 
	`dp_buf„rs_disˇrd
(
pkt
->
dp
->
buf„rs
,Ökt->
buf„r_id
, 
Ál£
);

108 
	`a˘i⁄_£t_de°roy
(
pkt
->
a˘i⁄_£t
);

109 
	`oÂbuf_dñëe
(
pkt
->
buf„r
);

110 
	`∑ckë_h™dÀ_°d_de°roy
(
pkt
->
h™dÀ_°d
);

111 
	`‰ì
(
pkt
);

112 
	}
}

115 
	$∑ckë_to_°rög
(
∑ckë
 *
pkt
) {

116 *
°r
;

117 
size_t
 
°r_size
;

118 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

120 
	`Ârötf
(
°ªam
, "pkt{in=\"");

121 
	`oÊ_p‹t_¥öt
(
°ªam
, 
pkt
->
ö_p‹t
);

122 
	`Ârötf
(
°ªam
, "\",áctset=");

123 
	`a˘i⁄_£t_¥öt
(
°ªam
, 
pkt
->
a˘i⁄_£t
);

124 
	`Ârötf
(
°ªam
, ",Öktout=\"%u\", ogΩ=\"", 
pkt
->
∑ckë_out
);

125 
	`oÊ_group_¥öt
(
°ªam
, 
pkt
->
out_group
);

126 
	`Ârötf
(
°ªam
, "\", oprt=\"");

127 
	`oÊ_p‹t_¥öt
(
°ªam
, 
pkt
->
out_p‹t
);

128 
	`Ârötf
(
°ªam
, "\", buffer=\"");

129 
	`oÊ_buf„r_¥öt
(
°ªam
, 
pkt
->
buf„r_id
);

130 
	`Ârötf
(
°ªam
, "\", std=");

131 
	`∑ckë_h™dÀ_°d_¥öt
(
°ªam
, 
pkt
->
h™dÀ_°d
);

132 
	`Ârötf
(
°ªam
, "}");

134 
	`f˛o£
(
°ªam
);

135  
°r
;

136 
	}
}

	@udatapath/packet.h

33 #i‚de‡
PACKET_H


34 
	#PACKET_H
 1

	)

36 
	~<°dboﬁ.h
>

37 
	~"a˘i⁄_£t.h
"

38 
	~"d©≠©h.h
"

39 
	~"∑ckë_h™dÀ_°d.h
"

40 
	~"oÂbuf.h
"

41 
	~"oÊib/oÊ-°ru˘s.h
"

42 
	~"∑ckës.h
"

51 
	s∑ckë
 {

52 
d©≠©h
 *
	mdp
;

53 
oÂbuf
 *
	mbuf„r
;

54 
uöt32_t
 
	mö_p‹t
;

55 
a˘i⁄_£t
 *
	ma˘i⁄_£t
;

56 
boﬁ
 
	m∑ckë_out
;

58 
uöt32_t
 
	mout_group
;

59 
uöt32_t
 
	mout_p‹t
;

60 
uöt16_t
 
	mout_p‹t_max_Àn
;

61 
uöt32_t
 
	mout_queue
;

62 
uöt8_t
 
	mèbÀ_id
;

63 
uöt32_t
 
	mbuf„r_id
;

66 
∑ckë_h™dÀ_°d
 *
	mh™dÀ_°d
;

70 
∑ckë
 *

71 
∑ckë_¸óã
(
d©≠©h
 *
dp
, 
uöt32_t
 
ö_p‹t
, 
oÂbuf
 *
buf
, 
boﬁ
 
∑ckë_out
);

75 
∑ckë_to_°rög
(
∑ckë
 *
pkt
);

79 
∑ckë_de°roy
(
∑ckë
 *
pkt
);

82 
∑ckë
 *

83 
∑ckë_˛⁄e
(
∑ckë
 *
pkt
);

	@udatapath/packet_handle_std.c

31 
	~<°dlib.h
>

32 
	~<°dboﬁ.h
>

33 
	~<°dio.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<√töë/ö.h
>

36 
	~"∑ckë_h™dÀ_°d.h
"

37 
	~"∑ckë.h
"

38 
	~"∑ckës.h
"

39 
	~"oÊib/oÊ-°ru˘s.h
"

40 
	~"›íÊow/›íÊow.h
"

41 
	~"compûî.h
"

43 
	~"lib/hash.h
"

44 
	~"oÊib/oxm-m©ch.h
"

46 
	~"nbì_lök/nbì_lök.h
"

51 
	$∑ckë_h™dÀ_°d_vÆid©e
(
∑ckë_h™dÀ_°d
 *
h™dÀ
) {

53 if(
h™dÀ
->
vÆid
)

55 
oÊ_m©ch_év
 * 
ôî
, *
√xt
;

56 
	`HMAP_FOR_EACH_SAFE
(
ôî
, 
√xt
, 
oÊ_m©ch_év
, 
hm≠_node
, &
h™dÀ
->
m©ch
.
m©ch_fõlds
){

57 
	`‰ì
(
ôî
->
vÆue
);

58 
	`‰ì
(
ôî
);

60 
	`oÊ_°ru˘s_m©ch_öô
(&
h™dÀ
->
m©ch
);

62 i‡(
	`nblök_∑ckë_∑r£
(
h™dÀ
->
pkt
->
buf„r
,&h™dÀ->
m©ch
,

63 
h™dÀ
->
¥Ÿo
) < 0)

66 
h™dÀ
->
vÆid
 = 
åue
;

69 
	`oÊ_°ru˘s_m©ch_put32
(&
h™dÀ
->
m©ch
, 
OXM_OF_IN_PORT
, h™dÀ->
pkt
->
ö_p‹t
);

71 
	`oÊ_°ru˘s_m©ch_put64
(&
h™dÀ
->
m©ch
, 
OXM_OF_METADATA
, 0xffffffffffffffff);

73 
	}
}

76 
∑ckë_h™dÀ_°d
 *

77 
	$∑ckë_h™dÀ_°d_¸óã
(
∑ckë
 *
pkt
) {

78 
∑ckë_h™dÀ_°d
 *
h™dÀ
 = 
	`xmÆloc
((packet_handle_std));

79 
h™dÀ
->
¥Ÿo
 = 
	`xmÆloc
((
¥Ÿocﬁs_°d
));

80 
h™dÀ
->
pkt
 =Ökt;

82 
	`hm≠_öô
(&
h™dÀ
->
m©ch
.
m©ch_fõlds
);

84 
h™dÀ
->
vÆid
 = 
Ál£
;

85 
	`∑ckë_h™dÀ_°d_vÆid©e
(
h™dÀ
);

87  
h™dÀ
;

88 
	}
}

90 
∑ckë_h™dÀ_°d
 *

91 
	$∑ckë_h™dÀ_°d_˛⁄e
(
∑ckë
 *
pkt
, 
∑ckë_h™dÀ_°d
 *
h™dÀ
 
UNUSED
) {

92 
∑ckë_h™dÀ_°d
 *
˛⁄e
 = 
	`xmÆloc
((packet_handle_std));

94 
˛⁄e
->
pkt
 =Ökt;

95 
˛⁄e
->
¥Ÿo
 = 
	`xmÆloc
((
¥Ÿocﬁs_°d
));

96 
	`hm≠_öô
(&
˛⁄e
->
m©ch
.
m©ch_fõlds
);

97 
˛⁄e
->
vÆid
 = 
Ál£
;

100 
	`∑ckë_h™dÀ_°d_vÆid©e
(
˛⁄e
);

102  
˛⁄e
;

103 
	}
}

106 
	$∑ckë_h™dÀ_°d_de°roy
(
∑ckë_h™dÀ_°d
 *
h™dÀ
) {

108 
oÊ_m©ch_év
 * 
ôî
, *
√xt
;

109 
	`HMAP_FOR_EACH_SAFE
(
ôî
, 
√xt
, 
oÊ_m©ch_év
, 
hm≠_node
, &
h™dÀ
->
m©ch
.
m©ch_fõlds
){

110 
	`‰ì
(
ôî
->
vÆue
);

111 
	`‰ì
(
ôî
);

113 
	`‰ì
(
h™dÀ
->
¥Ÿo
);

114 
	`hm≠_de°roy
(&
h™dÀ
->
m©ch
.
m©ch_fõlds
);

115 
	`‰ì
(
h™dÀ
);

116 
	}
}

118 
boﬁ


119 
	$∑ckë_h™dÀ_°d_is_âl_vÆid
(
∑ckë_h™dÀ_°d
 *
h™dÀ
) {

120 
	`∑ckë_h™dÀ_°d_vÆid©e
(
h™dÀ
);

122 i‡(
h™dÀ
->
¥Ÿo
->
m∂s
 !
NULL
) {

123 
uöt32_t
 
âl
 = 
	`¡ohl
(
h™dÀ
->
¥Ÿo
->
m∂s
->
fõlds
Ë& 
MPLS_TTL_MASK
;

124 i‡(
âl
 <= 1) {

125  
Ál£
;

128 i‡(
h™dÀ
->
¥Ÿo
->
ùv4
 !
NULL
) {

129 i‡(
h™dÀ
->
¥Ÿo
->
ùv4
->
ù_âl
 < 1) {

130  
Ál£
;

133  
åue
;

134 
	}
}

136 
boﬁ


137 
	$∑ckë_h™dÀ_°d_is_‰agmít
(
∑ckë_h™dÀ_°d
 *
h™dÀ
) {

138 
	`∑ckë_h™dÀ_°d_vÆid©e
(
h™dÀ
);

140  
Ál£
;

143 
	}
}

146 
boﬁ


147 
	$∑ckë_h™dÀ_°d_m©ch
(
∑ckë_h™dÀ_°d
 *
h™dÀ
, 
oÊ_m©ch
 *
m©ch
){

149 i‡(!
h™dÀ
->
vÆid
){

150 
	`∑ckë_h™dÀ_°d_vÆid©e
(
h™dÀ
);

151 i‡(!
h™dÀ
->
vÆid
){

152  
Ál£
;

156  
	`∑ckë_m©ch
(
m©ch
 ,&
h™dÀ
->match );

157 
	}
}

162 
ölöe
 const *

163 
	$p°r
(*
±r
, c⁄° *
°r
) {

164  (
±r
 =
NULL
Ë? "" : 
°r
;

165 
	}
}

170 
	$¥Ÿo_¥öt
(
FILE
 *
°ªam
, 
¥Ÿocﬁs_°d
 *
p
) {

171 
	`Ârötf
(
°ªam
, "{%s%s%s%s%s%s%s%s%s}",

172 
	`p°r
(
p
->
ëh
, "ëh"),Ö°r’->
vœn
, ",vœn"),Ö°r’->
m∂s
, ",m∂s"),Ö°r’->
ùv4
, ",ipv4"),

173 
	`p°r
(
p
->
¨p
, ",¨p"),Ö°r’->
t˝
, ",t˝"),Ö°r’->
udp
, ",udp"),Ö°r’->
s˘p
, ",sctp"),

174 
	`p°r
(
p
->
icmp
, ",icmp"));

175 
	}
}

178 
	$∑ckë_h™dÀ_°d_to_°rög
(
∑ckë_h™dÀ_°d
 *
h™dÀ
) {

179 *
°r
;

180 
size_t
 
°r_size
;

181 
FILE
 *
°ªam
 = 
	`›í_mem°ªam
(&
°r
, &
°r_size
);

183 
	`∑ckë_h™dÀ_°d_¥öt
(
°ªam
, 
h™dÀ
);

185 
	`f˛o£
(
°ªam
);

186  
°r
;

187 
	}
}

190 
	$∑ckë_h™dÀ_°d_¥öt
(
FILE
 *
°ªam
, 
∑ckë_h™dÀ_°d
 *
h™dÀ
) {

191 
	`∑ckë_h™dÀ_°d_vÆid©e
(
h™dÀ
);

193 
	`Ârötf
(
°ªam
, "{proto=");

194 
	`¥Ÿo_¥öt
(
°ªam
, 
h™dÀ
->
¥Ÿo
);

196 
	`Ârötf
(
°ªam
, ", match=");

197 
	`oÊ_°ru˘s_m©ch_¥öt
(
°ªam
, (
oÊ_m©ch_hódî
 *)(&
h™dÀ
->
m©ch
), h™dÀ->
pkt
->
dp
->
exp
);

198 
	`Ârötf
(
°ªam
, "\"}");

199 
	}
}

	@udatapath/packet_handle_std.h

31 #i‚de‡
PACKET_HANDLE_STD_H


32 
	#PACKET_HANDLE_STD_H
 1

	)

34 
	~<°dboﬁ.h
>

35 
	~<°dio.h
>

36 
	~"∑ckë.h
"

37 
	~"∑ckës.h
"

38 
	~"m©ch_°d.h
"

39 
	~"oÊib/oÊ-°ru˘s.h
"

40 
	~"nbì_lök/nbì_lök.h
"

47 
	s∑ckë_h™dÀ_°d
 {

48 
∑ckë
 *
	mpkt
;

49 
¥Ÿocﬁs_°d
 *
	m¥Ÿo
;

55 
oÊ_m©ch
 
	mm©ch
;

59 
boﬁ
 
	mvÆid
;

62 
boﬁ
 
	mèbÀ_miss
;

67 
∑ckë_h™dÀ_°d
 *

68 
∑ckë_h™dÀ_°d_¸óã
(
∑ckë
 *
pkt
);

72 
∑ckë_h™dÀ_°d_de°roy
(
∑ckë_h™dÀ_°d
 *
h™dÀ
);

75 
boﬁ


76 
∑ckë_h™dÀ_°d_is_âl_vÆid
(
∑ckë_h™dÀ_°d
 *
h™dÀ
);

79 
boﬁ


80 
∑ckë_h™dÀ_°d_is_‰agmít
(
∑ckë_h™dÀ_°d
 *
h™dÀ
);

83 
boﬁ


84 
∑ckë_h™dÀ_°d_m©ch
(
∑ckë_h™dÀ_°d
 *
h™dÀ
, 
oÊ_m©ch
 *
m©ch
);

88 
∑ckë_h™dÀ_°d_to_°rög
(
∑ckë_h™dÀ_°d
 *
h™dÀ
);

91 
∑ckë_h™dÀ_°d_¥öt
(
FILE
 *
°ªam
, 
∑ckë_h™dÀ_°d
 *
h™dÀ
);

94 
∑ckë_h™dÀ_°d
 *

95 
∑ckë_h™dÀ_°d_˛⁄e
(
∑ckë
 *
pkt
, 
∑ckë_h™dÀ_°d
 *
h™dÀ
);

99 
∑ckë_h™dÀ_°d_vÆid©e
(
∑ckë_h™dÀ_°d
 *
h™dÀ
);

	@udatapath/pipeline.c

31 
	~<sys/ty≥s.h
>

32 
	~<°dboﬁ.h
>

33 
	~<°dlib.h
>

35 
	~"a˘i⁄_£t.h
"

36 
	~"compûî.h
"

37 
	~"dp_a˘i⁄s.h
"

38 
	~"dp_buf„rs.h
"

39 
	~"dp_exp.h
"

40 
	~"dp_p‹ts.h
"

41 
	~"d©≠©h.h
"

42 
	~"∑ckë.h
"

43 
	~"pùñöe.h
"

44 
	~"Êow_èbÀ.h
"

45 
	~"Êow_íåy.h
"

46 
	~"mëî_èbÀ.h
"

47 
	~"oÊib/oÊ.h
"

48 
	~"oÊib/oÊ-°ru˘s.h
"

49 
	~"nbì_lök/nbì_lök.h
"

50 
	~"utû.h
"

51 
	~"hash.h
"

52 
	~"oÊib/oxm-m©ch.h
"

53 
	~"vlog.h
"

56 
	#LOG_MODULE
 
VLM_pùñöe


	)

58 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

61 
execuã_íåy
(
pùñöe
 *
∂
, 
Êow_íåy
 *
íåy
,

62 
Êow_èbÀ
 **
èbÀ
, 
∑ckë
 **
pkt
);

64 
pùñöe
 *

65 
	$pùñöe_¸óã
(
d©≠©h
 *
dp
) {

66 
pùñöe
 *
∂
;

67 
i
;

69 
∂
 = 
	`xmÆloc
((
pùñöe
));

70 
i
=0; i<
PIPELINE_TABLES
; i++) {

71 
∂
->
èbÀs
[
i
] = 
	`Êow_èbÀ_¸óã
(
dp
, i);

73 
∂
->
dp
 = dp;

75 
	`nblök_öôülize
();

77  
∂
;

78 
	}
}

80 
boﬁ


81 
	$is_èbÀ_miss
(
Êow_íåy
 *
íåy
){

83  ((
íåy
->
°©s
->
¥i‹ôy
Ë=0 && (íåy->
m©ch
->
Àngth
 <= 4));

85 
	}
}

89 
	$£nd_∑ckë_to_c⁄åﬁÀr
(
pùñöe
 *
∂
, 
∑ckë
 *
pkt
, 
uöt8_t
 
èbÀ_id
, uöt8_à
ªas⁄
) {

91 
oÊ_msg_∑ckë_ö
 
msg
;

92 
oÊ_m©ch
 *
m
;

93 
msg
.
hódî
.
ty≥
 = 
OFPT_PACKET_IN
;

94 
msg
.
tŸÆ_Àn
 = 
pkt
->
buf„r
->
size
;

95 
msg
.
ªas⁄
 =Ñeason;

96 
msg
.
èbÀ_id
 =Åable_id;

97 
msg
.
cookõ
 = 0xffffffffffffffff;

98 
msg
.
d©a
 = 
pkt
->
buf„r
->data;

103 i‡(
∂
->
dp
->
c⁄fig
.
miss_£nd_Àn
 !
OFPCML_NO_BUFFER
){

104 
	`dp_buf„rs_ßve
(
∂
->
dp
->
buf„rs
, 
pkt
);

105 
msg
.
buf„r_id
 = 
pkt
->buffer_id;

106 
msg
.
d©a_Àngth
 = 
	`MIN
(
∂
->
dp
->
c⁄fig
.
miss_£nd_Àn
, 
pkt
->
buf„r
->
size
);

108 
msg
.
buf„r_id
 = 
OFP_NO_BUFFER
;

109 
msg
.
d©a_Àngth
 = 
pkt
->
buf„r
->
size
;

112 
m
 = &
pkt
->
h™dÀ_°d
->
m©ch
;

116 
msg
.
m©ch
 = (
oÊ_m©ch_hódî
*)
m
;

117 
	`dp_£nd_mesßge
(
∂
->
dp
, (
oÊ_msg_hódî
 *)&
msg
, 
NULL
);

118 
	`oÊ_°ru˘s_‰ì_m©ch
((
oÊ_m©ch_hódî
* ) 
m
, 
NULL
);

119 
	}
}

122 
	$pùñöe_¥o˚ss_∑ckë
(
pùñöe
 *
∂
, 
∑ckë
 *
pkt
) {

123 
Êow_èbÀ
 *
èbÀ
, *
√xt_èbÀ
;

125 *
pkt_°r
 = 
	`∑ckë_to_°rög
(
pkt
);

126 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "¥o˚ssögÖackë: %s\n", 
pkt_°r
);

127 
	`‰ì
(
pkt_°r
);

128 i‡(
	`VLOG_IS_WARN_ENABLED
(
LOG_MODULE
)) {

129 *
pkt_°r
 = 
	`∑ckë_to_°rög
(
pkt
);

130 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "¥o˚ssögÖackë: %s", 
pkt_°r
);

131 
	`‰ì
(
pkt_°r
);

134 i‡(!
	`∑ckë_h™dÀ_°d_is_âl_vÆid
(
pkt
->
h™dÀ_°d
)) {

135 i‡((
∂
->
dp
->
c⁄fig
.
Êags
 & 
OFPC_INVALID_TTL_TO_CONTROLLER
) != 0) {

136 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Packet has invalid TTL, sendingÅo controller.");

138 
	`£nd_∑ckë_to_c⁄åﬁÀr
(
∂
, 
pkt
, 0 , 
OFPR_INVALID_TTL
);

140 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Packet has invalid TTL, dropping.");

142 
	`∑ckë_de°roy
(
pkt
);

146 
√xt_èbÀ
 = 
∂
->
èbÀs
[0];

147 
√xt_èbÀ
 !
NULL
) {

148 
Êow_íåy
 *
íåy
;

150 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "#########################################");

151 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "åyögÅabÀ %u.", 
√xt_èbÀ
->
°©s
->
èbÀ_id
);

152 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "#########################################");

154 
pkt
->
èbÀ_id
 = 
√xt_èbÀ
->
°©s
->table_id;

155 
èbÀ
 = 
√xt_èbÀ
;

156 
√xt_èbÀ
 = 
NULL
;

160 *
m
 = 
	`oÊ_°ru˘s_m©ch_to_°rög
((
oÊ_m©ch_hódî
*)&(
pkt
->
h™dÀ_°d
->
m©ch
),Ökt->
dp
->
exp
);

161 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "£¨chögÅabÀÉ¡ry f‹Öackë m©ch: %s.", 
m
);

162 
	`‰ì
(
m
);

164 
íåy
 = 
	`Êow_èbÀ_lookup
(
èbÀ
, 
pkt
);

165 i‡(
íåy
 !
NULL
) {

167 *
m
 = 
	`oÊ_°ru˘s_Êow_°©s_to_°rög
(
íåy
->
°©s
, 
pkt
->
dp
->
exp
);

168 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "found m©chögÉ¡ry: %s.", 
m
);

169 
	`‰ì
(
m
);

171 
pkt
->
h™dÀ_°d
->
èbÀ_miss
 = 
	`is_èbÀ_miss
(
íåy
);

172 
	`execuã_íåy
(
∂
, 
íåy
, &
√xt_èbÀ
, &
pkt
);

174 i‡(!
pkt
)

177 i‡(
√xt_èbÀ
 =
NULL
) {

181 
	`a˘i⁄_£t_execuã
(
pkt
->
a˘i⁄_£t
,Ökt, 0xffffffffffffffff);

182 
	`∑ckë_de°roy
(
pkt
);

188 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "No matchingÉntry found. DroppingÖacket.");

189 
	`∑ckë_de°roy
(
pkt
);

193 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Reached outside ofÖipelineÖrocessing cycle.");

194 
	}
}

197 
	$ö°_com∑ª
(c⁄° *
ö°1
, c⁄° *
ö°2
){

198 
oÊ_ö°ru˘i⁄_hódî
 * 
i1
 = *(oÊ_ö°ru˘i⁄_hódî **Ë
ö°1
;

199 
oÊ_ö°ru˘i⁄_hódî
 * 
i2
 = *(oÊ_ö°ru˘i⁄_hódî **Ë
ö°2
;

200 i‡((
i1
->
ty≥
 =
OFPIT_APPLY_ACTIONS
 && 
i2
->ty≥ =
OFPIT_CLEAR_ACTIONS
) ||

201 (
i1
->
ty≥
 =
OFPIT_CLEAR_ACTIONS
 && 
i2
->ty≥ =
OFPIT_APPLY_ACTIONS
))

202  
i1
->
ty≥
 > 
i2
->type;

204  
i1
->
ty≥
 < 
i2
->type;

205 
	}
}

207 
oÊ_îr


208 
	$pùñöe_h™dÀ_Êow_mod
(
pùñöe
 *
∂
, 
oÊ_msg_Êow_mod
 *
msg
,

209 c⁄° 
£ndî
 *sender) {

212 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "InÖipeline_handle_flow_mod ");

219 
oÊ_îr
 
îr‹
;

220 
size_t
 
i
;

221 
boﬁ
 
m©ch_kït
,
ö°s_kït
;

223 if(
£ndî
->
ªmŸe
->
rﬁe
 =
OFPCR_ROLE_SLAVE
)

224  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_IS_SLAVE
);

226 
m©ch_kït
 = 
Ál£
;

227 
ö°s_kït
 = 
Ál£
;

230 
	`qs‹t
(
msg
->
ö°ru˘i⁄s
, msg->
ö°ru˘i⁄s_num
,

231 (
oÊ_ö°ru˘i⁄_hódî
 *), 
ö°_com∑ª
);

234 
i
=0; i< 
msg
->
ö°ru˘i⁄s_num
; i++) {

235 i‡(
msg
->
ö°ru˘i⁄s
[
i
]->
ty≥
 =
OFPIT_APPLY_ACTIONS
 ||

236 
msg
->
ö°ru˘i⁄s
[
i
]->
ty≥
 =
OFPIT_WRITE_ACTIONS
) {

237 
oÊ_ö°ru˘i⁄_a˘i⁄s
 *
ü
 = (oÊ_ö°ru˘i⁄_a˘i⁄†*)
msg
->
ö°ru˘i⁄s
[
i
];

239 
îr‹
 = 
	`dp_a˘i⁄s_vÆid©e
(
∂
->
dp
, 
ü
->
a˘i⁄s_num
, ia->
a˘i⁄s
);

240 i‡(
îr‹
) {

241  
îr‹
;

243 
îr‹
 = 
	`dp_a˘i⁄s_check_£t_fõld_ªq
(
msg
, 
ü
->
a˘i⁄s_num
, ia->
a˘i⁄s
);

244 i‡(
îr‹
) {

245  
îr‹
;

250 i‡(
msg
->
èbÀ_id
 == 0xff) {

251 i‡(
msg
->
comm™d
 =
OFPFC_DELETE
 || msg->comm™d =
OFPFC_DELETE_STRICT
) {

252 
size_t
 
i
;

254 
îr‹
 = 0;

255 
i
=0; i < 
PIPELINE_TABLES
; i++) {

257 
îr‹
 = 
	`Êow_èbÀ_Êow_mod
(
∂
->
èbÀs
[
i
], 
msg
, &
m©ch_kït
, &
ö°s_kït
);

258 i‡(
îr‹
) {

262 i‡(
îr‹
) {

263  
îr‹
;

265 
	`oÊ_msg_‰ì_Êow_mod
(
msg
, !
m©ch_kït
, !
ö°s_kït
, 
∂
->
dp
->
exp
);

269  
	`oÊ_îr‹
(
OFPET_FLOW_MOD_FAILED
, 
OFPFMFC_BAD_TABLE_ID
);

272 
îr‹
 = 
	`Êow_èbÀ_Êow_mod
(
∂
->
èbÀs
[
msg
->
èbÀ_id
], msg, &
m©ch_kït
, &
ö°s_kït
);

273 i‡(
îr‹
) {

274  
îr‹
;

276 i‡((
msg
->
comm™d
 =
OFPFC_ADD
 || msg->comm™d =
OFPFC_MODIFY
 || msg->comm™d =
OFPFC_MODIFY_STRICT
) &&

277 
msg
->
buf„r_id
 !
NO_BUFFER
) {

279 
∑ckë
 *
pkt
;

282 
pkt
 = 
	`dp_buf„rs_ªåõve
(
∂
->
dp
->
buf„rs
, 
msg
->
buf„r_id
);

283 i‡(
pkt
 !
NULL
) {

284 
	`pùñöe_¥o˚ss_∑ckë
(
∂
, 
pkt
);

286 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Thêbuf„∏Êow_modÑe„ºedÅÿwa†em±y (%u).", 
msg
->
buf„r_id
);

290 
	`oÊ_msg_‰ì_Êow_mod
(
msg
, !
m©ch_kït
, !
ö°s_kït
, 
∂
->
dp
->
exp
);

294 
	}
}

296 
oÊ_îr


297 
	$pùñöe_h™dÀ_èbÀ_mod
(
pùñöe
 *
∂
,

298 
oÊ_msg_èbÀ_mod
 *
msg
,

299 c⁄° 
£ndî
 *sender) {

301 if(
£ndî
->
ªmŸe
->
rﬁe
 =
OFPCR_ROLE_SLAVE
)

302  
	`oÊ_îr‹
(
OFPET_BAD_REQUEST
, 
OFPBRC_IS_SLAVE
);

304 i‡(
msg
->
èbÀ_id
 == 0xff) {

305 
size_t
 
i
;

307 
i
=0; i<
PIPELINE_TABLES
; i++) {

308 
∂
->
èbÀs
[
i
]->
„©uªs
->
c⁄fig
 = 
msg
->config;

311 
∂
->
èbÀs
[
msg
->
èbÀ_id
]->
„©uªs
->
c⁄fig
 = msg->config;

314 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
∂
->
dp
->
exp
);

316 
	}
}

318 
oÊ_îr


319 
	$pùñöe_h™dÀ_°©s_ªque°_Êow
(
pùñöe
 *
∂
,

320 
oÊ_msg_mu…ù¨t_ªque°_Êow
 *
msg
,

321 c⁄° 
£ndî
 *sender) {

323 
oÊ_Êow_°©s
 **
°©s
 = 
	`xmÆloc
((ofl_flow_stats *));

324 
size_t
 
°©s_size
 = 1;

325 
size_t
 
°©s_num
 = 0;

327 i‡(
msg
->
èbÀ_id
 == 0xff) {

328 
size_t
 
i
;

329 
i
=0; i<
PIPELINE_TABLES
; i++) {

330 
	`Êow_èbÀ_°©s
(
∂
->
èbÀs
[
i
], 
msg
, &
°©s
, &
°©s_size
, &
°©s_num
);

333 
	`Êow_èbÀ_°©s
(
∂
->
èbÀs
[
msg
->
èbÀ_id
], msg, &
°©s
, &
°©s_size
, &
°©s_num
);

337 
oÊ_msg_mu…ù¨t_ª∂y_Êow
 
ª∂y
 =

338 {{{.
ty≥
 = 
OFPT_MULTIPART_REPLY
},

339 .
ty≥
 = 
OFPMP_FLOW
, .
Êags
 = 0x0000},

340 .
°©s
 = stats,

341 .
°©s_num
 = stats_num

344 
	`dp_£nd_mesßge
(
∂
->
dp
, (
oÊ_msg_hódî
 *)&
ª∂y
, 
£ndî
);

347 
	`‰ì
(
°©s
);

348 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
∂
->
dp
->
exp
);

350 
	}
}

352 
oÊ_îr


353 
	$pùñöe_h™dÀ_°©s_ªque°_èbÀ
(
pùñöe
 *
∂
,

354 
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
msg
 
UNUSED
,

355 c⁄° 
£ndî
 *sender) {

356 
oÊ_èbÀ_°©s
 **
°©s
;

357 
size_t
 
i
;

359 
°©s
 = 
	`xmÆloc
((
oÊ_èbÀ_°©s
 *Ë* 
PIPELINE_TABLES
);

361 
i
=0; i<
PIPELINE_TABLES
; i++) {

362 
°©s
[
i
] = 
∂
->
èbÀs
[i]->stats;

366 
oÊ_msg_mu…ù¨t_ª∂y_èbÀ
 
ª∂y
 =

367 {{{.
ty≥
 = 
OFPT_MULTIPART_REPLY
},

368 .
ty≥
 = 
OFPMP_TABLE
, .
Êags
 = 0x0000},

369 .
°©s
 = stats,

370 .
°©s_num
 = 
PIPELINE_TABLES
};

372 
	`dp_£nd_mesßge
(
∂
->
dp
, (
oÊ_msg_hódî
 *)&
ª∂y
, 
£ndî
);

375 
	`‰ì
(
°©s
);

376 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
∂
->
dp
->
exp
);

378 
	}
}

380 
oÊ_îr


381 
	$pùñöe_h™dÀ_°©s_ªque°_èbÀ_„©uªs_ªque°
(
pùñöe
 *
∂
,

382 
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
msg
,

383 c⁄° 
£ndî
 *sender) {

384 
size_t
 
i
, 
j
;

385 
oÊ_èbÀ_„©uªs
 **
„©uªs
;

386 
oÊ_msg_mu…ù¨t_ªque°_èbÀ_„©uªs
 *
„©
 =

387 (
oÊ_msg_mu…ù¨t_ªque°_èbÀ_„©uªs
 *Ë
msg
;

390 if(
„©
->
èbÀ_„©uªs
 !
NULL
){

393 
i
 = 0; i < 
„©
->
èbÀs_num
; i++){

394 
∂
->
èbÀs
[
„©
->
èbÀ_„©uªs
[
i
]->
èbÀ_id
]->
„©uªs
 = feat->table_features[i];

398 
j
 = 0;

400 
lo›
: ;

401 
„©uªs
 = (
oÊ_èbÀ_„©uªs
**Ë
	`xmÆloc
((ofl_table_features *) * 8);

402 
i
 = 0; i < 8; i++){

403 
„©uªs
[
i
] = 
∂
->
èbÀs
[
j
]->features;

404 
j
++;

407 
oÊ_msg_mu…ù¨t_ª∂y_èbÀ_„©uªs
 
ª∂y
 =

408 {{{.
ty≥
 = 
OFPT_MULTIPART_REPLY
},

409 .
ty≥
 = 
OFPMP_TABLE_FEATURES
, .
Êags
 = 
j
 =
PIPELINE_TABLES
? 0x00000000:
OFPMPF_REPLY_MORE
},

410 .
èbÀ_„©uªs
 = 
„©uªs
,

411 .
èbÀs_num
 = 8};

412 
	`dp_£nd_mesßge
(
∂
->
dp
, (
oÊ_msg_hódî
 *)&
ª∂y
, 
£ndî
);

414 i‡(
j
 < 
PIPELINE_TABLES
){

415 
lo›
;

419 
	}
}

421 
oÊ_îr


422 
	$pùñöe_h™dÀ_°©s_ªque°_aggªg©e
(
pùñöe
 *
∂
,

423 
oÊ_msg_mu…ù¨t_ªque°_Êow
 *
msg
,

424 c⁄° 
£ndî
 *sender) {

425 
oÊ_msg_mu…ù¨t_ª∂y_aggªg©e
 
ª∂y
 =

426 {{{.
ty≥
 = 
OFPT_MULTIPART_REPLY
},

427 .
ty≥
 = 
OFPMP_AGGREGATE
, .
Êags
 = 0x0000},

428 .
∑ckë_cou¡
 = 0,

429 .
byã_cou¡
 = 0,

430 .
Êow_cou¡
 = 0};

432 i‡(
msg
->
èbÀ_id
 == 0xff) {

433 
size_t
 
i
;

435 
i
=0; i<
PIPELINE_TABLES
; i++) {

436 
	`Êow_èbÀ_aggªg©e_°©s
(
∂
->
èbÀs
[
i
], 
msg
,

437 &
ª∂y
.
∑ckë_cou¡
, &ª∂y.
byã_cou¡
, &ª∂y.
Êow_cou¡
);

441 
	`Êow_èbÀ_aggªg©e_°©s
(
∂
->
èbÀs
[
msg
->
èbÀ_id
], msg,

442 &
ª∂y
.
∑ckë_cou¡
, &ª∂y.
byã_cou¡
, &ª∂y.
Êow_cou¡
);

445 
	`dp_£nd_mesßge
(
∂
->
dp
, (
oÊ_msg_hódî
 *)&
ª∂y
, 
£ndî
);

447 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
msg
, 
∂
->
dp
->
exp
);

449 
	}
}

453 
	$pùñöe_de°roy
(
pùñöe
 *
∂
) {

454 
Êow_èbÀ
 *
èbÀ
;

455 
i
;

457 
i
=0; i<
PIPELINE_TABLES
; i++) {

458 
èbÀ
 = 
∂
->
èbÀs
[
i
];

459 i‡(
èbÀ
 !
NULL
) {

460 
	`Êow_èbÀ_de°roy
(
èbÀ
);

463 
	`‰ì
(
∂
);

464 
	}
}

468 
	$pùñöe_timeout
(
pùñöe
 *
∂
) {

469 
i
;

471 
i
 = 0; i < 
PIPELINE_TABLES
; i++) {

472 
	`Êow_èbÀ_timeout
(
∂
->
èbÀs
[
i
]);

474 
	}
}

479 
	$execuã_íåy
(
pùñöe
 *
∂
, 
Êow_íåy
 *
íåy
,

480 
Êow_èbÀ
 **
√xt_èbÀ
, 
∑ckë
 **
pkt
) {

481 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Executing EXECUTE_ENTRY ..... " );

491 
size_t
 
i
;

492 
oÊ_ö°ru˘i⁄_hódî
 *
ö°
;

494 
i
=0; i < 
íåy
->
°©s
->
ö°ru˘i⁄s_num
; i++) {

497 if(!(*
pkt
)){

501 
ö°
 = 
íåy
->
°©s
->
ö°ru˘i⁄s
[
i
];

502 
ö°
->
ty≥
) {

503 
OFPIT_GOTO_TABLE
: {

504 
oÊ_ö°ru˘i⁄_gŸo_èbÀ
 *
gi
 = (oÊ_ö°ru˘i⁄_gŸo_èbÀ *)
ö°
;

506 *
√xt_èbÀ
 = 
∂
->
èbÀs
[
gi
->
èbÀ_id
];

509 
OFPIT_WRITE_METADATA
: {

510 
oÊ_ö°ru˘i⁄_wrôe_mëad©a
 *
wi
 = (oÊ_ö°ru˘i⁄_wrôe_mëad©®*)
ö°
;

511 
oÊ_m©ch_év
 *
f
;

515 
	`∑ckë_h™dÀ_°d_vÆid©e
((*
pkt
)->
h™dÀ_°d
);

517 
	`HMAP_FOR_EACH_WITH_HASH
(
f
, 
oÊ_m©ch_év
,

518 
hm≠_node
, 
	`hash_öt
(
OXM_OF_METADATA
,0), &(*
pkt
)->
h™dÀ_°d
->
m©ch
.
m©ch_fõlds
){

519 
uöt64_t
 *
mëad©a
 = (uöt64_t*Ë
f
->
vÆue
;

520 *
mëad©a
 = (*mëad©®& ~
wi
->
mëad©a_mask
) | (wi->metadata & wi->metadata_mask);

521 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "Executög wrôêmëad©a: %Œx", *
mëad©a
);

525 
OFPIT_WRITE_ACTIONS
: {

526 
oÊ_ö°ru˘i⁄_a˘i⁄s
 *
wa
 = (oÊ_ö°ru˘i⁄_a˘i⁄†*)
ö°
;

527 
	`a˘i⁄_£t_wrôe_a˘i⁄s
((*
pkt
)->
a˘i⁄_£t
, 
wa
->
a˘i⁄s_num
, wa->
a˘i⁄s
);

530 
OFPIT_APPLY_ACTIONS
: {

531 
oÊ_ö°ru˘i⁄_a˘i⁄s
 *
ü
 = (oÊ_ö°ru˘i⁄_a˘i⁄†*)
ö°
;

532 
	`dp_execuã_a˘i⁄_li°
((*
pkt
), 
ü
->
a˘i⁄s_num
, ia->
a˘i⁄s
, 
íåy
->
°©s
->
cookõ
);

535 
OFPIT_CLEAR_ACTIONS
: {

536 
	`a˘i⁄_£t_˛ór_a˘i⁄s
((*
pkt
)->
a˘i⁄_£t
);

539 
OFPIT_METER
: {

540 
oÊ_ö°ru˘i⁄_mëî
 *
im
 = (oÊ_ö°ru˘i⁄_mëî *)
ö°
;

541 
	`mëî_èbÀ_≠∂y
(
∂
->
dp
->
mëîs
, 
pkt
 , 
im
->
mëî_id
);

544 
OFPIT_EXPERIMENTER
: {

545 
	`dp_exp_ö°
((*
pkt
), (
oÊ_ö°ru˘i⁄_ex≥rimíãr
 *)
ö°
);

550 
	}
}

	@udatapath/pipeline.h

31 #i‚de‡
PIPELINE_H


32 
	#PIPELINE_H
 1

	)

35 
	~"d©≠©h.h
"

36 
	~"∑ckë.h
"

37 
	~"Êow_èbÀ.h
"

38 
	~"oÊib/oÊ.h
"

39 
	~"oÊib/oÊ-mesßges.h
"

42 
	g£ndî
;

50 
	spùñöe
 {

51 
d©≠©h
 *
	mdp
;

52 
Êow_èbÀ
 *
	mèbÀs
[
PIPELINE_TABLES
];

57 
pùñöe
 *

58 
pùñöe_¸óã
(
d©≠©h
 *
dp
);

62 
pùñöe_¥o˚ss_∑ckë
(
pùñöe
 *
∂
, 
∑ckë
 *
pkt
);

66 
oÊ_îr


67 
pùñöe_h™dÀ_Êow_mod
(
pùñöe
 *
∂
, 
oÊ_msg_Êow_mod
 *
msg
,

68 c⁄° 
£ndî
 *sender);

71 
oÊ_îr


72 
pùñöe_h™dÀ_èbÀ_mod
(
pùñöe
 *
∂
,

73 
oÊ_msg_èbÀ_mod
 *
msg
,

74 c⁄° 
£ndî
 *sender);

77 
oÊ_îr


78 
pùñöe_h™dÀ_°©s_ªque°_Êow
(
pùñöe
 *
∂
,

79 
oÊ_msg_mu…ù¨t_ªque°_Êow
 *
msg
,

80 c⁄° 
£ndî
 *sender);

83 
oÊ_îr


84 
pùñöe_h™dÀ_°©s_ªque°_èbÀ
(
pùñöe
 *
∂
,

85 
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
msg
,

86 c⁄° 
£ndî
 *sender);

89 
oÊ_îr


90 
pùñöe_h™dÀ_°©s_ªque°_èbÀ_„©uªs_ªque°
(
pùñöe
 *
∂
,

91 
oÊ_msg_mu…ù¨t_ªque°_hódî
 *
msg
,

92 c⁄° 
£ndî
 *sender);

95 
oÊ_îr


96 
pùñöe_h™dÀ_°©s_ªque°_aggªg©e
(
pùñöe
 *
∂
,

97 
oÊ_msg_mu…ù¨t_ªque°_Êow
 *
msg
,

98 c⁄° 
£ndî
 *sender);

103 
pùñöe_timeout
(
pùñöe
 *
∂
);

107 
pùñöe_de°roy
(
pùñöe
 *
∂
);

	@udatapath/udatapath.c

40 
	~<c⁄fig.h
>

41 
	~<î∫o.h
>

42 
	~<gë›t.h
>

43 
	~<limôs.h
>

44 
	~<sig«l.h
>

45 
	~<°döt.h
>

46 
	~<°dlib.h
>

47 
	~<°rög.h
>

49 
	~"comm™d-löe.h
"

50 
	~"d´m⁄.h
"

51 
	~"d©≠©h.h
"

52 
	~"Áu….h
"

53 
	~"›íÊow/›íÊow.h
"

54 
	~"pﬁl-lo›.h
"

55 
	~"queue.h
"

56 
	~"utû.h
"

57 
	~"rc⁄n.h
"

58 
	~"timevÆ.h
"

59 
	~"vc⁄n.h
"

60 
	~"dús.h
"

61 
	~"vc⁄n-s¶.h
"

62 
	~"vlog-sockë.h
"

64 #i‡
deföed
(
OF_HW_PLAT
)

65 
	~<›íÊow/of_hw_≠i.h
>

68 
	#THIS_MODULE
 
VLM_ud©≠©h


	)

69 
	~"vlog.h
"

71 
ud©≠©h_cmd
(
¨gc
, *
¨gv
[]);

73 
∑r£_›ti⁄s
(
d©≠©h
 *
dp
, 
¨gc
, *
¨gv
[]);

74 
	$ußge
(Ë
NO_RETURN
;

76 
d©≠©h
 *
dp
;

78 *
p‹t_li°
;

79 *
loˇl_p‹t
 = "tap:";

81 
	`add_p‹ts
(
d©≠©h
 *
dp
, *
p‹t_li°
);

83 
boﬁ
 
u£_mu…ùÀ_c⁄√˘i⁄s
 = 
Ál£
;

86 #i‡
	`deföed
(
UDATAPATH_AS_LIB
)

87 
	#OFP_FATAL
(
_î
, 
_°r
, 
¨gs
...) do { \

88 
	`Ârötf
(
°dîr
, 
_°r
, ## 
¨gs
); \

90 
	}
} 0)

	)

92 
	#OFP_FATAL
(
_î
, 
_°r
, 
¨gs
...Ë
	`oÂ_Áèl
(_î, _°r, ##árgs)

	)

95 #i‡!
deföed
(
UDATAPATH_AS_LIB
)

97 
	$maö
(
¨gc
, *
¨gv
[])

99  
	`ud©≠©h_cmd
(
¨gc
, 
¨gv
);

101 
	}
}

105 
	$ud©≠©h_cmd
(
¨gc
, *
¨gv
[])

107 
n_li°íîs
;

108 
îr‹
;

109 
i
;

111 
	`£t_¥ogøm_«me
(
¨gv
[0]);

112 
	`ªgi°î_Áu…_h™dÀrs
();

113 
	`time_öô
();

114 
	`vlog_öô
();

116 
dp
 = 
	`dp_√w
();

118 
	`∑r£_›ti⁄s
(
dp
, 
¨gc
, 
¨gv
);

119 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

121 i‡(
¨gc
 - 
›töd
 < 1) {

122 
	`OFP_FATAL
(0, "atÜeast oneÜistenerárgument isÑequired; "

126 i‡(
u£_mu…ùÀ_c⁄√˘i⁄s
 && (
¨gc
 - 
›töd
) % 2 != 0)

127 
	`OFP_FATAL
(0, "when using multiple connections, you must specifyánÉvenÇumber ofÜisteners");

129 
n_li°íîs
 = 0;

130 
i
 = 
›töd
; i < 
¨gc
; i += 2) {

131 c⁄° *
pvc⁄n_«me
 = 
¨gv
[
i
];

132 c⁄° *
pvc⁄n_«me_aux
 = 
NULL
;

133 i‡(
u£_mu…ùÀ_c⁄√˘i⁄s
)

134 
pvc⁄n_«me_aux
 = 
¨gv
[
i
 + 1];

136 
pvc⁄n
 *pvc⁄n, *
pvc⁄n_aux
 = 
NULL
;

137 
ªtvÆ
, 
ªtvÆ_aux
;

139 
ªtvÆ
 = 
	`pvc⁄n_›í
(
pvc⁄n_«me
, &
pvc⁄n
);

140 i‡(!
ªtvÆ
 ||ÑëvÆ =
EAGAIN
) {

142 i‡(
u£_mu…ùÀ_c⁄√˘i⁄s
) {

143 
ªtvÆ_aux
 = 
	`pvc⁄n_›í
(
pvc⁄n_«me_aux
, &
pvc⁄n_aux
);

144 i‡(
ªtvÆ_aux
 &&ÑëvÆ_aux !
EAGAIN
) {

145 
	`oÂ_îr‹
(
ªtvÆ_aux
, "›íögáuxûüry %s", 
pvc⁄n_«me_aux
);

146 
pvc⁄n_aux
 = 
NULL
;

149 
	`dp_add_pvc⁄n
(
dp
, 
pvc⁄n
, 
pvc⁄n_aux
);

150 
n_li°íîs
++;

152 
	`oÂ_îr‹
(
ªtvÆ
, "›íög %s", 
pvc⁄n_«me
);

155 i‡(
n_li°íîs
 == 0) {

156 
	`OFP_FATAL
(0, "couldÇotÜisten forány connections");

159 i‡(
p‹t_li°
 !
NULL
) {

160 
	`add_p‹ts
(
dp
, 
p‹t_li°
);

162 i‡(
loˇl_p‹t
 !
NULL
) {

163 
îr‹
 = 
	`dp_p‹ts_add_loˇl
(
dp
, 
loˇl_p‹t
);

164 i‡(
îr‹
) {

165 
	`OFP_FATAL
(
îr‹
, "ÁûedÅÿaddÜoˇ»p‹à%s", 
loˇl_p‹t
);

169 
îr‹
 = 
	`vlog_£rvî_li°í
(
NULL
, NULL);

170 i‡(
îr‹
) {

171 
	`OFP_FATAL
(
îr‹
, "couldÇotÜisten for vlog connections");

174 
	`dõ_if_Æªady_ru¬ög
();

175 
	`d´m⁄ize
();

178 
	`dp_run
(
dp
);

179 
	`dp_waô
(
dp
);

180 
	`pﬁl_block
();

184 
	}
}

187 
	$add_p‹ts
(
d©≠©h
 *
dp
, *
p‹t_li°
)

189 *
p‹t
, *
ßve_±r
;

195 
p‹t
 = 
	`°πok_r
(
p‹t_li°
, ",,", &
ßve_±r
);Öort;

196 
p‹t
 = 
	`°πok_r
(
NULL
, ",,", &
ßve_±r
)) {

197 
îr‹
 = 
	`dp_p‹ts_add
(
dp
, 
p‹t
);

198 i‡(
îr‹
) {

199 
	`oÂ_Áèl
(
îr‹
, "ÁûedÅÿaddÖ‹à%s", 
p‹t
);

202 
	}
}

205 
	$∑r£_›ti⁄s
(
d©≠©h
 *
dp
, 
¨gc
, *
¨gv
[])

208 
OPT_MFR_DESC
 = 
UCHAR_MAX
 + 1,

209 
OPT_HW_DESC
,

210 
OPT_SW_DESC
,

211 
OPT_DP_DESC
,

212 
OPT_SERIAL_NUM
,

213 
OPT_BOOTSTRAP_CA_CERT
,

214 
OPT_NO_LOCAL_PORT
,

215 
OPT_NO_SLICING


218 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

219 {"öãrÁ˚s", 
ªquúed_¨gumít
, 0, 'i'},

220 {"loˇl-p‹t", 
ªquúed_¨gumít
, 0, 'L'},

221 {"no-loˇl-p‹t", 
no_¨gumít
, 0, 
OPT_NO_LOCAL_PORT
},

222 {"d©≠©h-id", 
ªquúed_¨gumít
, 0, 'd'},

223 {"mu…ic⁄n", 
no_¨gumít
, 0, 'm'},

224 {"vîbo£", 
›ti⁄Æ_¨gumít
, 0, 'v'},

225 {"hñp", 
no_¨gumít
, 0, 'h'},

226 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

227 {"no-¶icög", 
no_¨gumít
, 0, 
OPT_NO_SLICING
},

228 {"m‰-desc", 
ªquúed_¨gumít
, 0, 
OPT_MFR_DESC
},

229 {"hw-desc", 
ªquúed_¨gumít
, 0, 
OPT_HW_DESC
},

230 {"sw-desc", 
ªquúed_¨gumít
, 0, 
OPT_SW_DESC
},

231 {"dp_desc", 
ªquúed_¨gumít
, 0, 
OPT_DP_DESC
},

232 {"£rül_num", 
ªquúed_¨gumít
, 0, 
OPT_SERIAL_NUM
},

233 
DAEMON_LONG_OPTIONS
,

234 #ifde‡
HAVE_OPENSSL


235 
VCONN_SSL_LONG_OPTIONS


236 {"boŸ°øp-ˇ-˚π", 
ªquúed_¨gumít
, 0, 
OPT_BOOTSTRAP_CA_CERT
},

240 *
sh‹t_›ti⁄s
 = 
	`l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(
l⁄g_›ti⁄s
);

243 
ödex±r
;

244 
c
;

246 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, &
ödex±r
);

247 i‡(
c
 == -1) {

251 
c
) {

253 
uöt64_t
 
dpid
;

254 i‡(
	`°æí
(
›èrg
) != 12

255 || 
	`°r•n
(
›èrg
, "0123456789abcdefABCDEF") != 12) {

256 
	`oÂ_Áèl
(0, "argumentÅo -d or --datapath-id must be "

259 
dpid
 = 
	`°πﬁl
(
›èrg
, 
NULL
, 16);

260 i‡(!
dpid
) {

261 
	`oÂ_Áèl
(0, "argumentÅo -d or --datapath-id must "

264 
	`dp_£t_dpid
(
dp
, 
dpid
);

269 
u£_mu…ùÀ_c⁄√˘i⁄s
 = 
åue
;

274 
	`ußge
();

277 
	`¥ötf
("%†%†compûed "
__DATE__
" "
__TIME__
"\n",

278 
¥ogøm_«me
, 
VERSION
 
BUILDNR
);

279 
	`exô
(
EXIT_SUCCESS
);

282 
	`vlog_£t_vîbosôy
(
›èrg
);

286 i‡(!
p‹t_li°
) {

287 
p‹t_li°
 = 
›èrg
;

289 
p‹t_li°
 = 
	`xa•rötf
("%s,%s",Ö‹t_li°, 
›èrg
);

294 
loˇl_p‹t
 = 
›èrg
;

297 
OPT_NO_LOCAL_PORT
:

298 
loˇl_p‹t
 = 
NULL
;

301 
OPT_MFR_DESC
:

302 
	`dp_£t_m‰_desc
(
dp
, 
›èrg
);

305 
OPT_HW_DESC
:

306 
	`dp_£t_hw_desc
(
dp
, 
›èrg
);

309 
OPT_SW_DESC
:

310 
	`dp_£t_sw_desc
(
dp
, 
›èrg
);

313 
OPT_DP_DESC
:

314 
	`dp_£t_dp_desc
(
dp
, 
›èrg
);

317 
OPT_SERIAL_NUM
:

318 
	`dp_£t_£rül_num
(
dp
, 
›èrg
);

321 
OPT_NO_SLICING
:

322 
	`dp_£t_max_queues
(
dp
, 0);

325 
DAEMON_OPTION_HANDLERS


327 #ifde‡
HAVE_OPENSSL


328 
VCONN_SSL_OPTION_HANDLERS


330 
OPT_BOOTSTRAP_CA_CERT
:

331 
	`vc⁄n_s¶_£t_ˇ_˚π_fûe
(
›èrg
, 
åue
);

336 
	`exô
(
EXIT_FAILURE
);

339 
	`ab‹t
();

342 
	`‰ì
(
sh‹t_›ti⁄s
);

343 
	}
}

346 
	$ußge
()

348 
	`¥ötf
("%s: userspace OpenFlow datapath\n"

352 
¥ogøm_«me
,Örogram_name);

353 
	`vc⁄n_ußge
(
Ál£
, 
åue
, false);

354 
	`¥ötf
("\nConfiguration options:\n"

372 
oÂ_rundú
);

373 
	`exô
(
EXIT_SUCCESS
);

374 
	}
}

	@utilities/dpctl.c

32 
	~<c⁄fig.h
>

33 
	~<¨∑/öë.h
>

34 
	~<î∫o.h
>

35 
	~<gë›t.h
>

36 
	~<öây≥s.h
>

37 
	~<√töë/ö.h
>

38 
	~<sig«l.h
>

39 
	~<°d¨g.h
>

40 
	~<°dboﬁ.h
>

41 
	~<°dlib.h
>

42 
	~<°rög.h
>

43 
	~<uni°d.h
>

44 
	~<sys/time.h
>

46 
	~"dp˘l.h
"

47 
	~"oÊib/oÊ-mesßges.h
"

48 
	~"oÊib/oÊ-°ru˘s.h
"

49 
	~"oÊib/oÊ-a˘i⁄s.h
"

50 
	~"oÊib/oÊ-¥öt.h
"

51 
	~"oÊib/oÊ.h
"

52 
	~"oÊib-exp/oÊ-exp.h
"

53 
	~"oÊib-exp/oÊ-exp-›íÊow.h
"

54 
	~"oÊib/oxm-m©ch.h
"

56 
	~"comm™d-löe.h
"

57 
	~"compûî.h
"

58 
	~"dpif.h
"

59 
	~"›íÊow/nicúa-ext.h
"

60 
	~"›íÊow/›íÊow-ext.h
"

61 
	~"oÂbuf.h
"

62 
	~"›íÊow/›íÊow.h
"

63 
	~"∑ckës.h
"

64 
	~"øndom.h
"

65 
	~"sockë-utû.h
"

66 
	~"timevÆ.h
"

67 
	~"utû.h
"

68 
	~"vc⁄n-s¶.h
"

69 
	~"vc⁄n.h
"

70 
	~"ùv6_utû.h
"

72 
	~"oÂ°©.h
"

73 
	~"›íÊow/¥iv©e-ext.h
"

75 
	~"vlog.h
"

77 
	#LOG_MODULE
 
VLM_dp˘l


	)

83 
	#XID
 0xf0ff00f0

	)

86 
	scomm™d
 {

87 *
	m«me
;

88 
	mmö_¨gs
;

89 
	mmax_¨gs
;

90 (*
	mh™dÀr
)(
vc⁄n
 *
	mvc⁄n
, 
	m¨gc
, *
	m¨gv
[]);

93 
comm™d
 
	gÆl_comm™ds
[];

96 
	$ußge
(Ë
NO_RETURN
;

99 
	`∑r£_›ti⁄s
(
¨gc
, *
¨gv
[]);

101 
uöt8_t
 
mask_Æl
[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	}
};

106 
∑r£_Êow_mod_¨gs
(*
°r
, 
oÊ_msg_Êow_mod
 *
ªq
);

109 
∑r£_group_mod_¨gs
(*
°r
, 
oÊ_msg_group_mod
 *
ªq
);

112 
∑r£_mëî_mod_¨gs
(*
°r
, 
oÊ_msg_mëî_mod
 *
ªq
);

115 
∑r£_buckë
(*
°r
, 
oÊ_buckë
 *
b
);

118 
∑r£_Êow_°©_¨gs
(*
°r
, 
oÊ_msg_mu…ù¨t_ªque°_Êow
 *
ªq
);

121 
∑r£_m©ch
(*
°r
, 
oÊ_m©ch_hódî
 **
m©ch
);

124 
∑r£_ö°
(*
°r
, 
oÊ_ö°ru˘i⁄_hódî
 **
ö°
);

127 
∑r£_a˘i⁄s
(*
°r
, 
size_t
 *
a˘s_num
, 
oÊ_a˘i⁄_hódî
 ***
a˘s
);

130 
∑r£_c⁄fig
(*
°r
, 
oÊ_c⁄fig
 *
c⁄fig
);

133 
∑r£_p‹t_mod
(*
°r
, 
oÊ_msg_p‹t_mod
 *
msg
);

136 
∑r£_èbÀ_mod
(*
°r
, 
oÊ_msg_èbÀ_mod
 *
msg
);

139 
∑r£_b™d
(*
°r
, 
oÊ_msg_mëî_mod
 *
m
, 
oÊ_mëî_b™d_hódî
 **
b
);

142 
make_Æl_m©ch
(
oÊ_m©ch_hódî
 **
m©ch
);

148 
∑r£_p‹t
(*
°r
, 
uöt32_t
 *
p‹t
);

151 
∑r£_queue
(*
°r
, 
uöt32_t
 *
p‹t
);

154 
∑r£_group
(*
°r
, 
uöt32_t
 *
group
);

157 
∑r£_mëî
(*
°r
, 
uöt32_t
 *
mëî
);

160 
∑r£_èbÀ
(*
°r
, 
uöt8_t
 *
èbÀ
);

163 
∑r£_dl_addr
(*
°r
, 
uöt8_t
 *
addr
, uöt8_à**
mask
);

166 
∑r£_nw_addr
(*
°r
, 
uöt32_t
 *
addr
, uöt32_à**
mask
);

169 
∑r£_vœn_vid
(*
°r
, 
uöt16_t
 *
vid
);

172 
∑r£_ext_hdr
(*
°r
, 
uöt16_t
 *
ext_hdr
);

175 
∑r£8
(*
°r
, 
«mes8
 *
«mes
, 
size_t
 
«mes_num
, 
uöt8_t
 
max
, uöt8_à*
vÆ
);

178 
∑r£16
(*
°r
, 
«mes16
 *
«mes
, 
size_t
 
«mes_num
, 
uöt16_t
 
max
, uöt16_à*
vÆ
);

181 
∑r£16m
(*
°r
, 
«mes16
 *
«mes
, 
size_t
 
«mes_num
, 
uöt16_t
 
max
, uöt16_à*
vÆ
, uöt16_à*
mask
);

184 
∑r£32
(*
°r
, 
«mes32
 *
«mes
, 
size_t
 
«mes_num
, 
uöt32_t
 
max
, uöt32_à*
vÆ
);

187 
∑r£32m
(*
°r
, 
«mes32
 *
«mes
, 
size_t
 
«mes_num
, 
uöt32_t
 
max
, uöt32_à*
vÆ
, uöt32_à**
mask
);

189 
oÊ_exp_msg
 
	gdp˘l_exp_msg
 =

190 {.
∑ck
 = 
oÊ_exp_msg_∑ck
,

191 .
	gu≈ack
 = 
oÊ_exp_msg_u≈ack
,

192 .
	g‰ì
 = 
oÊ_exp_msg_‰ì
,

193 .
	gto_°rög
 = 
oÊ_exp_msg_to_°rög
};

195 
oÊ_exp
 
	gdp˘l_exp
 =

196 {.
a˘
 = 
NULL
,

197 .
	gö°
 = 
NULL
,

198 .
	gm©ch
 = 
NULL
,

199 .
	g°©s
 = 
NULL
,

200 .
	gmsg
 = &
dp˘l_exp_msg
};

204 
	$dp˘l_å™ß˘
(
vc⁄n
 *vc⁄n, 
oÊ_msg_hódî
 *
ªq
,

205 
oÊ_msg_hódî
 **
ª∂
) {

206 
oÂbuf
 *
oÂbu‰eq
, *
oÂbu‰ïl
;

207 
uöt8_t
 *
bu‰eq
;

208 
size_t
 
bu‰eq_size
;

209 
îr‹
;

211 
îr‹
 = 
	`oÊ_msg_∑ck
(
ªq
, 
XID
, &
bu‰eq
, &
bu‰eq_size
, &
dp˘l_exp
);

212 i‡(
îr‹
) {

213 
	`oÂ_Áèl
(0, "ErrorÖackingÑequest.");

216 
oÂbu‰eq
 = 
	`oÂbuf_√w
(0);

217 
	`oÂbuf_u£
(
oÂbu‰eq
, 
bu‰eq
, 
bu‰eq_size
);

218 
	`oÂbuf_put_unöô
(
oÂbu‰eq
, 
bu‰eq_size
);

219 
îr‹
 = 
	`vc⁄n_å™ß˘
(
vc⁄n
, 
oÂbu‰eq
, &
oÂbu‰ïl
);

220 i‡(
îr‹
) {

221 
	`oÂ_Áèl
(0, "Error duringÅransaction.");

223 
îr‹
 = 
	`oÊ_msg_u≈ack
(
oÂbu‰ïl
->
d©a
, oÂbu‰ïl->
size
, 
ª∂
, 
NULL
 , &
dp˘l_exp
);

225 i‡(
îr‹
) {

226 
	`oÂ_Áèl
(0, "Error unpackingÑeply.");

232 
oÂbu‰ïl
->
ba£
 = 
NULL
;

233 
oÂbu‰ïl
->
d©a
 = 
NULL
;

234 
	`oÂbuf_dñëe
(
oÂbu‰ïl
);

235 
	}
}

238 
	$dp˘l_å™ß˘_™d_¥öt
(
vc⁄n
 *vc⁄n, 
oÊ_msg_hódî
 *
ªq
,

239 
oÊ_msg_hódî
 **
ª∂
) {

240 
oÊ_msg_hódî
 *
ª∂y
;

241 *
°r
;

243 
°r
 = 
	`oÊ_msg_to_°rög
(
ªq
, &
dp˘l_exp
);

244 
	`¥ötf
("\nSENDING:\n%s\n\n", 
°r
);

245 
	`‰ì
(
°r
);

246 
	`dp˘l_å™ß˘
(
vc⁄n
, 
ªq
, &
ª∂y
);

247 
°r
 = 
	`oÊ_msg_to_°rög
(
ª∂y
, &
dp˘l_exp
);

248 
	`¥ötf
("\nRECEIVED:\n%s\n\n", 
°r
);

249 
	`‰ì
(
°r
);

251 i‡(
ª∂
 !
NULL
) {

252 (*
ª∂
Ë
ª∂y
;

254 
	`oÊ_msg_‰ì
(
ª∂y
, &
dp˘l_exp
);

256 
	}
}

259 
	$dp˘l_b¨rõr
(
vc⁄n
 *vconn) {

260 
oÊ_msg_hódî
 *
ª∂y
;

261 *
°r
;

263 
oÊ_msg_hódî
 
ªq
 =

264 {.
ty≥
 = 
OFPT_BARRIER_REQUEST
};

266 
	`dp˘l_å™ß˘
(
vc⁄n
, &
ªq
, &
ª∂y
);

268 i‡(
ª∂y
->
ty≥
 =
OFPT_BARRIER_REPLY
) {

269 
°r
 = 
	`oÊ_msg_to_°rög
(
ª∂y
, &
dp˘l_exp
);

270 
	`¥ötf
("\nOK.\n\n");

271 
	`‰ì
(
°r
);

273 
°r
 = 
	`oÊ_msg_to_°rög
(
ª∂y
, &
dp˘l_exp
);

274 
	`¥ötf
("\nRECEIVED:\n%s\n\n", 
°r
);

275 
	`‰ì
(
°r
);

278 
	}
}

281 
	$dp˘l_£nd
(
vc⁄n
 *vc⁄n, 
oÊ_msg_hódî
 *
msg
) {

282 
oÂbuf
 *ofpbuf;

283 
uöt8_t
 *
buf
;

284 
size_t
 
buf_size
;

285 
îr‹
;

287 
îr‹
 = 
	`oÊ_msg_∑ck
(
msg
, 
XID
, &
buf
, &
buf_size
, &
dp˘l_exp
);

288 i‡(
îr‹
) {

289 
	`oÂ_Áèl
(0, "ErrorÖackingÑequest.");

292 
oÂbuf
 = 
	`oÂbuf_√w
(0);

293 
	`oÂbuf_u£
(
oÂbuf
, 
buf
, 
buf_size
);

294 
	`oÂbuf_put_unöô
(
oÂbuf
, 
buf_size
);

296 
îr‹
 = 
	`vc⁄n_£nd_block
(
vc⁄n
, 
oÂbuf
);

297 i‡(
îr‹
) {

298 
	`oÂ_Áèl
(0, "Error duringÅransaction.");

301 
	`dp˘l_b¨rõr
(
vc⁄n
);

302 
	}
}

305 
	$dp˘l_£nd_™d_¥öt
(
vc⁄n
 *vc⁄n, 
oÊ_msg_hódî
 *
msg
) {

306 *
°r
;

307 
°r
 = 
	`oÊ_msg_to_°rög
(
msg
, &
dp˘l_exp
);

308 
	`¥ötf
("\nSENDING:\n%s\n\n", 
°r
);

309 
	`‰ì
(
°r
);

311 
	`dp˘l_£nd
(
vc⁄n
, 
msg
);

312 
	}
}

315 
	$pög
(
vc⁄n
 *vc⁄n, 
¨gc
, *
¨gv
[]) {

316 
uöt16_t
 
∑ylﬂd_size
 = 0;

317 
size_t
 
times
 = 0, 
i
;

318 
oÊ_msg_echo
 *
ª∂y
;

320 
oÊ_msg_echo
 
ªq
 =

321 {{.
ty≥
 = 
OFPT_ECHO_REQUEST
},

322 .
d©a_Àngth
 = 0,

323 .
d©a
 = 
NULL
};

325 i‡(
¨gc
 > 0) {

326 
times
 = 
	`©oi
(
¨gv
[0]);

328 i‡(
times
 == 0) {

329 
times
 = 4;

331 i‡(
¨gc
 > 1) {

332 
∑ylﬂd_size
 = 
	`©oi
(
¨gv
[1]);

334 
∑ylﬂd_size
 = 1024;

336 i‡(
∑ylﬂd_size
 > 
UINT16_MAX
 - (
oÂ_hódî
)) {

337 
	`oÂ_Áèl
(0, "∑ylﬂd mu° bêbëwì¿0ánd %zu byãs.", 
UINT16_MAX
 - (
oÂ_hódî
));

340 
ªq
.
d©a_Àngth
 = 
∑ylﬂd_size
;

341 
ªq
.
d©a
 = 
	`xmÆloc
(
∑ylﬂd_size
);

343 
i
=0; i<
times
; i++) {

344 
timevÆ
 
°¨t
, 
íd
;

346 
	`øndom_byãs
(
ªq
.
d©a
, 
∑ylﬂd_size
);

348 
	`gëtimeofday
(&
°¨t
, 
NULL
);

349 
	`dp˘l_å™ß˘
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
ªq
, (oÊ_msg_hódî **)&
ª∂y
);

350 
	`gëtimeofday
(&
íd
, 
NULL
);

352 i‡((
ªq
.
d©a_Àngth
 !
ª∂y
->data_length) ||

353 (
	`memcmp
(
ªq
.
d©a
, 
ª∂y
->d©a,Ñeq.
d©a_Àngth
) != 0)) {

354 
	`oÂ_Áèl
(0, "Reply doesÇot matchÑequest.");

357 
	`¥ötf
("%zu bytes from %s:Åime=%.1f ms\n",

358 (
ª∂y
->
d©a_Àngth
 - (
oÂ_hódî
)),

359 
	`vc⁄n_gë_«me
(
vc⁄n
),

360 (1000*()(
íd
.
tv_£c
 - 
°¨t
.tv_£c)Ë+ (.001*”nd.
tv_u£c
 - start.tv_usec)));

364 
	`‰ì
(
ªq
.
d©a
);

365 
	`oÊ_msg_‰ì
((
oÊ_msg_hódî
 *)
ª∂y
, &
dp˘l_exp
);

366 
	}
}

369 
	$m⁄ô‹
(
vc⁄n
 *vc⁄n, 
¨gc
 
UNUSED
, *
¨gv
[] UNUSED) {

370 
oÂbuf
 *
buf
;

371 
oÊ_msg_hódî
 *
msg
;

372 *
°r
;

373 
îr‹
;

375 
	`¥ötf
("MONITORING %s...\n\n", 
	`vc⁄n_gë_«me
(
vc⁄n
));

378 i‡(
	`vc⁄n_ªcv_block
(
vc⁄n
, &
buf
) == 0) {

380 
îr‹
 = 
	`oÊ_msg_u≈ack
(
buf
->
d©a
, buf->
size
, &
msg
, 
NULL
 , &
dp˘l_exp
);

381 i‡(
îr‹
) {

382 
	`oÂ_Áèl
(0, "Error unpackingÑeply.");

388 
buf
->
ba£
 = 
NULL
;

389 
buf
->
d©a
 = 
NULL
;

390 
	`oÂbuf_dñëe
(
buf
);

392 
°r
 = 
	`oÊ_msg_to_°rög
(
msg
, &
dp˘l_exp
);

393 
	`¥ötf
("\nRECEIVED:\n%s\n\n", 
°r
);

394 
	`‰ì
(
°r
);

396 
	`oÊ_msg_‰ì
(
msg
, &
dp˘l_exp
);

399 
	}
}

402 
	$èbÀ_„©uªs
(
vc⁄n
 *vc⁄n, 
¨gc
 
UNUSED
, *
¨gv
[] UNUSED) {

403 
oÊ_msg_mu…ù¨t_ªque°_èbÀ_„©uªs
 
ªq
 =

404 {{{.
ty≥
 = 
OFPT_MULTIPART_REQUEST
},

405 .
ty≥
 = 
OFPMP_TABLE_FEATURES
, .
Êags
 = 0x0000},

406 .
èbÀs_num
 = 0,

407 .
èbÀ_„©uªs
 = 
NULL
,

410 
	`dp˘l_å™ß˘_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
ªq
, 
NULL
);

411 
	}
}

415 
	$„©uªs
(
vc⁄n
 *vc⁄n, 
¨gc
 
UNUSED
, *
¨gv
[] UNUSED) {

416 
oÊ_msg_hódî
 
ªq
 =

417 {.
ty≥
 = 
OFPT_FEATURES_REQUEST
};

419 
	`dp˘l_å™ß˘_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
ªq
, 
NULL
);

420 
	}
}

423 
	$gë_c⁄fig
(
vc⁄n
 *vc⁄n, 
¨gc
 
UNUSED
, *
¨gv
[] UNUSED) {

424 
oÊ_msg_hódî
 
ªq
 =

425 {.
ty≥
 = 
OFPT_GET_CONFIG_REQUEST
};

427 
	`dp˘l_å™ß˘_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
ªq
, 
NULL
);

428 
	}
}

433 
	$°©s_desc
(
vc⁄n
 *vc⁄n, 
¨gc
 
UNUSED
, *
¨gv
[] UNUSED) {

434 
oÊ_msg_mu…ù¨t_ªque°_hódî
 
ªq
 =

435 {{.
ty≥
 = 
OFPT_MULTIPART_REQUEST
},

436 .
ty≥
 = 
OFPMP_DESC
, .
Êags
 = 0x0000};

438 
	`dp˘l_å™ß˘_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
ªq
, 
NULL
);

439 
	}
}

442 
	$p‹t_desc
(
vc⁄n
 *vc⁄n, 
¨gc
 
UNUSED
, *
¨gv
[] UNUSED) {

443 
oÊ_msg_mu…ù¨t_ªque°_hódî
 
ªq
 =

444 {{.
ty≥
 = 
OFPT_MULTIPART_REQUEST
},

445 .
ty≥
 = 
OFPMP_PORT_DESC
, .
Êags
 = 0x0000};

447 
	`dp˘l_å™ß˘_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
ªq
, 
NULL
);

448 
	}
}

451 
	$°©s_Êow
(
vc⁄n
 *vc⁄n, 
¨gc
, *
¨gv
[]) {

452 
oÊ_msg_mu…ù¨t_ªque°_Êow
 
ªq
 =

453 {{{.
ty≥
 = 
OFPT_MULTIPART_REQUEST
},

454 .
ty≥
 = 
OFPMP_FLOW
, .
Êags
 = 0x0000},

455 .
cookõ
 = 0x0000000000000000ULL,

456 .
cookõ_mask
 = 0x0000000000000000ULL,

457 .
èbÀ_id
 = 0xff,

458 .
out_p‹t
 = 
OFPP_ANY
,

459 .
out_group
 = 
OFPG_ANY
,

460 .
m©ch
 = 
NULL
};

461 i‡(
¨gc
 > 0) {

462 
	`∑r£_Êow_°©_¨gs
(
¨gv
[0], &
ªq
);

464 i‡(
¨gc
 > 1) {

465 
	`∑r£_m©ch
(
¨gv
[1], &(
ªq
.
m©ch
));

467 
	`make_Æl_m©ch
(&(
ªq
.
m©ch
));

470 
	`dp˘l_å™ß˘_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
ªq
, 
NULL
);

471 
	}
}

474 
	$°©s_aggr
(
vc⁄n
 *vc⁄n, 
¨gc
, *
¨gv
[]) {

475 
oÊ_msg_mu…ù¨t_ªque°_Êow
 
ªq
 =

476 {{{.
ty≥
 = 
OFPT_MULTIPART_REQUEST
},

477 .
ty≥
 = 
OFPMP_AGGREGATE
, .
Êags
 = 0x0000},

478 .
cookõ
 = 0x0000000000000000ULL,

479 .
cookõ_mask
 = 0x0000000000000000ULL,

480 .
èbÀ_id
 = 0xff,

481 .
out_p‹t
 = 
OFPP_ANY
,

482 .
out_group
 = 
OFPG_ANY
,

483 .
m©ch
 = 
NULL
};

485 i‡(
¨gc
 > 0) {

486 
	`∑r£_Êow_°©_¨gs
(
¨gv
[0], &
ªq
);

488 i‡(
¨gc
 > 1) {

489 
	`∑r£_m©ch
(
¨gv
[1], &(
ªq
.
m©ch
));

491 
	`make_Æl_m©ch
(&(
ªq
.
m©ch
));

494 
	`dp˘l_å™ß˘_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
ªq
, 
NULL
);

495 
	}
}

498 
	$°©s_èbÀ
(
vc⁄n
 *vc⁄n, 
¨gc
 
UNUSED
, *
¨gv
[] UNUSED) {

499 
oÊ_msg_mu…ù¨t_ªque°_hódî
 
ªq
 =

500 {{.
ty≥
 = 
OFPT_MULTIPART_REQUEST
},

501 .
ty≥
 = 
OFPMP_TABLE
, .
Êags
 = 0x0000};

503 
	`dp˘l_å™ß˘_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
ªq
, 
NULL
);

504 
	}
}

509 
	$°©s_p‹t
(
vc⁄n
 *vc⁄n, 
¨gc
, *
¨gv
[]) {

510 
oÊ_msg_mu…ù¨t_ªque°_p‹t
 
ªq
 =

511 {{{.
ty≥
 = 
OFPT_MULTIPART_REQUEST
},

512 .
ty≥
 = 
OFPMP_PORT_STATS
, .
Êags
 = 0x0000},

513 .
p‹t_no
 = 
OFPP_ANY
};

515 i‡(
¨gc
 > 0 && 
	`∑r£_p‹t
(
¨gv
[0], &
ªq
.
p‹t_no
)) {

516 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÖ‹t: %s.", 
¨gv
[0]);

519 
	`dp˘l_å™ß˘_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
ªq
, 
NULL
);

520 
	}
}

525 
	$°©s_queue
(
vc⁄n
 *vc⁄n, 
¨gc
, *
¨gv
[]) {

526 
oÊ_msg_mu…ù¨t_ªque°_queue
 
ªq
 =

527 {{{.
ty≥
 = 
OFPT_MULTIPART_REQUEST
},

528 .
ty≥
 = 
OFPMP_QUEUE
, .
Êags
 = 0x0000},

529 .
p‹t_no
 = 
OFPP_ANY
,

530 .
queue_id
 = 
OFPQ_ALL
};

532 i‡(
¨gc
 > 0 && 
	`∑r£_p‹t
(
¨gv
[0], &
ªq
.
p‹t_no
)) {

533 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÖ‹t: %s.", 
¨gv
[0]);

535 i‡(
¨gc
 > 1 && 
	`∑r£_queue
(
¨gv
[1], &
ªq
.
queue_id
)) {

536 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög queue: %s.", 
¨gv
[1]);

539 
	`dp˘l_å™ß˘_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
ªq
, 
NULL
);

540 
	}
}

545 
	$°©s_group
(
vc⁄n
 *vc⁄n, 
¨gc
, *
¨gv
[]) {

546 
oÊ_msg_mu…ù¨t_ªque°_group
 
ªq
 =

547 {{{.
ty≥
 = 
OFPT_MULTIPART_REQUEST
},

548 .
ty≥
 = 
OFPMP_GROUP
, .
Êags
 = 0x0000},

549 .
group_id
 = 
OFPG_ALL
};

551 i‡(
¨gc
 > 0 && 
	`∑r£_group
(
¨gv
[0], &
ªq
.
group_id
)) {

552 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög group: %s.", 
¨gv
[0]);

555 
	`dp˘l_å™ß˘_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
ªq
, 
NULL
);

556 
	}
}

561 
	$°©s_group_desc
(
vc⁄n
 *vc⁄n, 
¨gc
, *
¨gv
[]) {

562 
oÊ_msg_mu…ù¨t_ªque°_group
 
ªq
 =

563 {{{.
ty≥
 = 
OFPT_MULTIPART_REQUEST
},

564 .
ty≥
 = 
OFPMP_GROUP_DESC
, .
Êags
 = 0x0000},

565 .
group_id
 = 
OFPG_ALL
};

567 i‡(
¨gc
 > 0 && 
	`∑r£_group
(
¨gv
[0], &
ªq
.
group_id
)) {

568 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög group: %s.", 
¨gv
[0]);

571 
	`dp˘l_å™ß˘_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
ªq
, 
NULL
);

572 
	}
}

575 
	$£t_c⁄fig
(
vc⁄n
 *vc⁄n, 
¨gc
 
UNUSED
, *
¨gv
[]) {

576 
oÊ_msg_£t_c⁄fig
 
msg
 =

577 {{.
ty≥
 = 
OFPT_SET_CONFIG
},

578 .
c⁄fig
 = 
NULL
};

580 
msg
.
c⁄fig
 = 
	`xmÆloc
((
oÊ_c⁄fig
));

581 
msg
.
c⁄fig
->
Êags
 = 
OFPC_FRAG_NORMAL
;

582 
msg
.
c⁄fig
->
miss_£nd_Àn
 = 
OFP_DEFAULT_MISS_SEND_LEN
;

584 
	`∑r£_c⁄fig
(
¨gv
[0], 
msg
.
c⁄fig
);

586 
	`dp˘l_£nd_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
msg
);

587 
	}
}

592 
	$Êow_mod
(
vc⁄n
 *vc⁄n, 
¨gc
, *
¨gv
[]) {

593 
oÊ_msg_Êow_mod
 
msg
 =

594 {{.
ty≥
 = 
OFPT_FLOW_MOD
},

595 .
cookõ
 = 0x0000000000000000ULL,

596 .
cookõ_mask
 = 0x0000000000000000ULL,

597 .
èbÀ_id
 = 0xff,

598 .
comm™d
 = 
OFPFC_ADD
,

599 .
idÀ_timeout
 = 
OFP_FLOW_PERMANENT
,

600 .
h¨d_timeout
 = 
OFP_FLOW_PERMANENT
,

601 .
¥i‹ôy
 = 
OFP_DEFAULT_PRIORITY
,

602 .
buf„r_id
 = 0xffffffff,

603 .
out_p‹t
 = 
OFPP_ANY
,

604 .
out_group
 = 
OFPG_ANY
,

605 .
Êags
 = 0x0000,

606 .
m©ch
 = 
NULL
,

607 .
ö°ru˘i⁄s_num
 = 0,

608 .
ö°ru˘i⁄s
 = 
NULL
};

610 
	`∑r£_Êow_mod_¨gs
(
¨gv
[0], &
msg
);

611 i‡(
¨gc
 > 1) {

612 
size_t
 
i
, 
j
;

613 
size_t
 
ö°_num
 = 0;

614 i‡(
¨gc
 > 2){

615 
ö°_num
 = 
¨gc
 - 2;

616 
j
 = 2;

617 
	`∑r£_m©ch
(
¨gv
[1], &(
msg
.
m©ch
));

620 if(
msg
.
comm™d
 =
OFPFC_DELETE
)

621 
ö°_num
 = 0;

627 *
˝y
 = 
	`mÆloc
(
	`°æí
(
¨gv
[1]));

628 
	`mem˝y
(
˝y
, 
¨gv
[1], 
	`°æí
(argv[1]));

629 
	`∑r£_m©ch
(
˝y
, &(
msg
.
m©ch
));

630 
	`‰ì
(
˝y
);

631 if(
msg
.
m©ch
->
Àngth
 <= 4){

632 
ö°_num
 = 
¨gc
 - 1;

633 
j
 = 1;

638 
msg
.
ö°ru˘i⁄s_num
 = 
ö°_num
;

639 
msg
.
ö°ru˘i⁄s
 = 
	`xmÆloc
((
oÊ_ö°ru˘i⁄_hódî
 *Ë* 
ö°_num
);

640 
i
=0; i < 
ö°_num
; i++) {

641 
	`∑r£_ö°
(
¨gv
[
j
+
i
], &(
msg
.
ö°ru˘i⁄s
[i]));

644 
	`make_Æl_m©ch
(&(
msg
.
m©ch
));

646 
	`dp˘l_£nd_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
msg
);

647 
	}
}

651 
	$group_mod
(
vc⁄n
 *vc⁄n, 
¨gc
, *
¨gv
[]) {

652 
oÊ_msg_group_mod
 
msg
 =

653 {{.
ty≥
 = 
OFPT_GROUP_MOD
},

654 .
comm™d
 = 
OFPGC_ADD
,

655 .
ty≥
 = 
OFPGT_ALL
,

656 .
group_id
 = 
OFPG_ALL
,

657 .
buckës_num
 = 0,

658 .
buckës
 = 
NULL
};

660 
	`∑r£_group_mod_¨gs
(
¨gv
[0], &
msg
);

662 i‡(
¨gc
 > 1) {

663 
size_t
 
i
;

664 
size_t
 
buckës_num
 = (
¨gc
 - 1) / 2;

666 
msg
.
buckës_num
 = buckets_num;

667 
msg
.
buckës
 = 
	`xmÆloc
((
oÊ_buckë
 *Ë* 
buckës_num
);

669 
i
=0; i < 
buckës_num
; i++) {

670 
msg
.
buckës
[
i
] = 
	`xmÆloc
((
oÊ_buckë
));

671 
msg
.
buckës
[
i
]->
weight
 = 0;

672 
msg
.
buckës
[
i
]->
w©ch_p‹t
 = 
OFPP_ANY
;

673 
msg
.
buckës
[
i
]->
w©ch_group
 = 
OFPG_ANY
;

674 
msg
.
buckës
[
i
]->
a˘i⁄s_num
 = 0;

675 
msg
.
buckës
[
i
]->
a˘i⁄s
 = 
NULL
;

677 
	`∑r£_buckë
(
¨gv
[
i
*2+1], 
msg
.
buckës
[i]);

678 
	`∑r£_a˘i⁄s
(
¨gv
[
i
*2+2], &(
msg
.
buckës
[i]->
a˘i⁄s_num
), &(msg.buckës[i]->
a˘i⁄s
));

682 
	`dp˘l_£nd_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
msg
);

683 
	}
}

686 
	$group_„©uªs
(
vc⁄n
 *vc⁄n, 
¨gc
 
UNUSED
, *
¨gv
[] UNUSED){

688 
oÊ_msg_mu…ù¨t_ªque°_hódî
 
ªq
 =

689 {{.
ty≥
 = 
OFPT_MULTIPART_REQUEST
},

690 .
ty≥
 = 
OFPMP_GROUP_FEATURES
, .
Êags
 = 0x0000};

692 
	`dp˘l_å™ß˘_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
ªq
, 
NULL
);

693 
	}
}

695 
	$mëî_mod
(
vc⁄n
 *vc⁄n, 
¨gc
, *
¨gv
[]){

697 
oÊ_msg_mëî_mod
 
msg
 =

698 {{.
ty≥
 = 
OFPT_METER_MOD
},

699 .
comm™d
 = 
OFPMC_ADD
,

700 .
Êags
 = 
OFPMF_KBPS
,

701 .
mëî_id
 = 0,

702 .
mëî_b™ds_num
 = 0,

703 .
b™ds
 = 
NULL
};

705 
	`∑r£_mëî_mod_¨gs
(
¨gv
[0], &
msg
);

707 i‡(
¨gc
 > 1){

708 
size_t
 
i
;

709 
size_t
 
b™ds_num
 = 
¨gc
 - 1;

710 
msg
.
mëî_b™ds_num
 = 
b™ds_num
;

711 
msg
.
b™ds
 = 
	`xmÆloc
((
oÊ_mëî_b™d_hódî
 *Ë* 
b™ds_num
);

712 
i
=0; i < 
b™ds_num
; i++) {

713 
	`∑r£_b™d
(
¨gv
[
i
+1], &
msg
, &msg.
b™ds
[i]);

716 
	`dp˘l_£nd_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
msg
);

718 
	}
}

721 
	$°©s_mëî
(
vc⁄n
 *vc⁄n, 
¨gc
 
UNUSED
, *
¨gv
[]){

723 
oÊ_msg_mu…ù¨t_mëî_ªque°
 
ªq
 =

724 {{{.
ty≥
 = 
OFPT_MULTIPART_REQUEST
},

725 .
ty≥
 = 
OFPMP_METER
, .
Êags
 = 0x0000},

726 .
mëî_id
 = 
OFPM_ALL
};

728 i‡(
¨gc
 > 0 && 
	`∑r£_mëî
(
¨gv
[0], &
ªq
.
mëî_id
)) {

729 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög mëî: %s.", 
¨gv
[0]);

732 
	`dp˘l_å™ß˘_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
ªq
, 
NULL
);

734 
	}
}

737 
	$mëî_c⁄fig
(
vc⁄n
 *vc⁄n, 
¨gc
 
UNUSED
, *
¨gv
[]){

739 
oÊ_msg_mu…ù¨t_mëî_ªque°
 
ªq
 =

740 {{{.
ty≥
 = 
OFPT_MULTIPART_REQUEST
},

741 .
ty≥
 = 
OFPMP_METER_CONFIG
, .
Êags
 = 0x0000},

742 .
mëî_id
 = 
OFPM_ALL
};

744 i‡(
¨gc
 > 0 && 
	`∑r£_mëî
(
¨gv
[0], &
ªq
.
mëî_id
)) {

745 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög mëî: %s.", 
¨gv
[0]);

748 
	`dp˘l_å™ß˘_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
ªq
, 
NULL
);

749 
	}
}

752 
	$mëî_„©uªs
(
vc⁄n
 *vc⁄n, 
¨gc
 
UNUSED
, *
¨gv
[] UNUSED){

754 
oÊ_msg_mu…ù¨t_ªque°_hódî
 
ªq
 =

755 {{.
ty≥
 = 
OFPT_MULTIPART_REQUEST
},

756 .
ty≥
 = 
OFPMP_METER_FEATURES
, .
Êags
 = 0x0000};

758 
	`dp˘l_å™ß˘_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
ªq
, 
NULL
);

759 
	}
}

762 
	$p‹t_mod
(
vc⁄n
 *vc⁄n, 
¨gc
 
UNUSED
, *
¨gv
[]) {

763 
oÊ_msg_p‹t_mod
 
msg
 =

764 {{.
ty≥
 = 
OFPT_PORT_MOD
},

765 .
p‹t_no
 = 
OFPP_ANY
,

766 .
c⁄fig
 = 0x00000000,

767 .
mask
 = 0x00000000,

768 .
advîti£
 = 0x00000000

770 
	`mem˝y
(
msg
.
hw_addr
, 
mask_Æl
, 
OFP_ETH_ALEN
);

772 
	`∑r£_p‹t_mod
(
¨gv
[0], &
msg
);

774 
	`dp˘l_£nd_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
msg
);

775 
	}
}

780 
	$èbÀ_mod
(
vc⁄n
 *vc⁄n, 
¨gc
 
UNUSED
, *
¨gv
[]) {

781 
oÊ_msg_èbÀ_mod
 
msg
 =

782 {{.
ty≥
 = 
OFPT_TABLE_MOD
},

783 .
èbÀ_id
 = 0xff,

784 .
c⁄fig
 = 0x00};

786 
	`∑r£_èbÀ_mod
(
¨gv
[0], &
msg
);

788 
	`dp˘l_£nd_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
msg
);

789 
	}
}

794 
	$queue_gë_c⁄fig
(
vc⁄n
 *vc⁄n, 
¨gc
 
UNUSED
, *
¨gv
[]) {

795 
oÊ_msg_queue_gë_c⁄fig_ªque°
 
msg
 =

796 {{.
ty≥
 = 
OFPT_QUEUE_GET_CONFIG_REQUEST
},

797 .
p‹t
 = 
OFPP_ALL
};

799 i‡(
	`∑r£_p‹t
(
¨gv
[0], &
msg
.
p‹t
)) {

800 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög queue_gë_c⁄figÖ‹t: %s.", 
¨gv
[0]);

803 
	`dp˘l_å™ß˘_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
msg
, 
NULL
);

804 
	}
}

809 
	$£t_desc
(
vc⁄n
 *vc⁄n, 
¨gc
 
UNUSED
, *
¨gv
[]) {

810 
oÊ_exp_›íÊow_msg_£t_dp_desc
 
msg
 =

811 {{{{.
ty≥
 = 
OFPT_EXPERIMENTER
},

812 .
ex≥rimíãr_id
 = 
OPENFLOW_VENDOR_ID
},

813 .
ty≥
 = 
OFP_EXT_SET_DESC
},

814 .
dp_desc
 = 
¨gv
[0]};

816 
	`dp˘l_£nd_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
msg
);

817 
	}
}

822 
	$queue_mod
(
vc⁄n
 *vc⁄n, 
¨gc
 
UNUSED
, *
¨gv
[]) {

823 
oÊ_∑ckë_queue
 *
pq
;

824 
oÊ_queue_¥›_mö_øã
 *
p
;

826 
oÊ_exp_›íÊow_msg_queue
 
msg
 =

827 {{{{.
ty≥
 = 
OFPT_EXPERIMENTER
},

828 .
ex≥rimíãr_id
 = 
OPENFLOW_VENDOR_ID
},

829 .
ty≥
 = 
OFP_EXT_QUEUE_MODIFY
},

830 .
p‹t_id
 = 
OFPP_ANY
,

831 .
queue
 = 
NULL
};

833 i‡(
	`∑r£_p‹t
(
¨gv
[0], &
msg
.
p‹t_id
)) {

834 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög queue_modÖ‹t: %s.", 
¨gv
[0]);

837 
pq
 = 
	`xmÆloc
((
oÊ_∑ckë_queue
));

838 
msg
.
queue
 = 
pq
;

839 i‡(
	`∑r£_queue
(
¨gv
[1], &
pq
->
queue_id
)) {

840 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög queue_mod queue: %s.", 
¨gv
[1]);

843 
pq
->
¥›îtõs_num
 = 1;

844 
pq
->
¥›îtõs
 = 
	`xmÆloc
((
oÊ_queue_¥›_hódî
 *));

846 
p
 = 
	`xmÆloc
((
oÊ_queue_¥›_mö_øã
));

847 
pq
->
¥›îtõs
[0] = (
oÊ_queue_¥›_hódî
 *)
p
;

848 
p
->
hódî
.
ty≥
 = 
OFPQT_MIN_RATE
;

850 i‡(
	`∑r£16
(
¨gv
[2], 
NULL
,0, 
UINT16_MAX
, &
p
->
øã
)) {

851 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög queue_mod bw: %s.", 
¨gv
[2]);

855 
	`dp˘l_£nd_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
msg
);

856 
	}
}

861 
	$queue_dñ
(
vc⁄n
 *vc⁄n, 
¨gc
 
UNUSED
, *
¨gv
[]) {

862 
oÊ_∑ckë_queue
 *
pq
;

864 
oÊ_exp_›íÊow_msg_queue
 
msg
 =

865 {{{{.
ty≥
 = 
OFPT_EXPERIMENTER
},

866 .
ex≥rimíãr_id
 = 
OPENFLOW_VENDOR_ID
},

867 .
ty≥
 = 
OFP_EXT_QUEUE_DELETE
},

868 .
p‹t_id
 = 
OFPP_ANY
,

869 .
queue
 = 
NULL
};

871 i‡(
	`∑r£_p‹t
(
¨gv
[0], &
msg
.
p‹t_id
)) {

872 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög queue_modÖ‹t: %s.", 
¨gv
[0]);

875 
pq
 = 
	`xmÆloc
((
oÊ_∑ckë_queue
));

876 
msg
.
queue
 = 
pq
;

877 i‡(
	`∑r£_queue
(
¨gv
[1], &
pq
->
queue_id
)) {

878 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög queue_mod queue: %s.", 
¨gv
[1]);

881 
pq
->
¥›îtõs_num
 = 0;

882 
pq
->
¥›îtõs
 = 
NULL
;

884 
	`dp˘l_£nd_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
msg
);

885 
	}
}

888 
	$gë_async
(
vc⁄n
 *vc⁄n, 
¨gc
 
UNUSED
, *
¨gv
[] UNUSED){

890 
oÊ_msg_async_c⁄fig
 
msg
 =

891 {{.
ty≥
 = 
OFPT_GET_ASYNC_REQUEST
},

892 .
c⁄fig
 = 
NULL
};

894 
	`dp˘l_å™ß˘_™d_¥öt
(
vc⁄n
, (
oÊ_msg_hódî
 *)&
msg
, 
NULL
);

895 
	}
}

897 
comm™d
 
	gÆl_comm™ds
[] = {

898 {"pög", 0, 2, 
pög
},

899 {"m⁄ô‹", 0, 0, 
m⁄ô‹
},

901 {"„©uªs", 0, 0, 
„©uªs
 },

902 {"gë-c⁄fig", 0, 0, 
gë_c⁄fig
},

903 {"èbÀ-„©uªs", 0, 0, 
èbÀ_„©uªs
},

904 {"group-„©uªs", 0, 0, 
group_„©uªs
},

905 {"mëî-„©uªs", 0, 0, 
mëî_„©uªs
},

906 {"°©s-desc", 0, 0, 
°©s_desc
 },

907 {"°©s-Êow", 0, 2, 
°©s_Êow
},

908 {"°©s-aggr", 0, 2, 
°©s_aggr
},

909 {"°©s-èbÀ", 0, 0, 
°©s_èbÀ
 },

910 {"°©s-p‹t", 0, 1, 
°©s_p‹t
 },

911 {"°©s-queue", 0, 2, 
°©s_queue
 },

912 {"°©s-group", 0, 1, 
°©s_group
 },

913 {"°©s-group-desc", 0, 1, 
°©s_group_desc
 },

914 {"°©s-mëî", 0, 1, 
°©s_mëî
},

915 {"mëî-c⁄fig", 0, 1, 
mëî_c⁄fig
},

916 {"p‹t-desc", 0, 0, 
p‹t_desc
},

917 {"£t-c⁄fig", 1, 1, 
£t_c⁄fig
},

918 {"Êow-mod", 1, 8 , 
Êow_mod
 },

919 {"group-mod", 1, 
UINT8_MAX
, 
group_mod
 },

920 {"mëî-mod", 1, 
UINT8_MAX
, 
mëî_mod
},

921 {"gë-async",0,0, 
gë_async
},

922 {"p‹t-mod", 1, 1, 
p‹t_mod
 },

923 {"èbÀ-mod", 1, 1, 
èbÀ_mod
 },

924 {"queue-gë-c⁄fig", 1, 1, 
queue_gë_c⁄fig
},

925 {"£t-desc", 1, 1, 
£t_desc
},

927 {"queue-mod", 3, 3, 
queue_mod
},

928 {"queue-dñ", 2, 2, 
queue_dñ
}

932 
	$maö
(
¨gc
, *
¨gv
[])

934 
comm™d
 *
p
;

935 
vc⁄n
 *vconn;

936 
size_t
 
i
;

937 
îr‹
;

939 
	`£t_¥ogøm_«me
(
¨gv
[0]);

940 
	`time_öô
();

941 
	`vlog_öô
();

942 
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
);

943 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

945 
¨gc
 -
›töd
;

946 
¨gv
 +
›töd
;

947 i‡(
¨gc
 < 1)

948 
	`oÂ_Áèl
(0, "missing SWITCH; use --help for help");

949 i‡(
¨gc
 < 2)

950 
	`oÂ_Áèl
(0, "missing COMMAND; use --help for help");

952 
îr‹
 = 
	`vc⁄n_›í_block
(
¨gv
[0], 
OFP_VERSION
, &
vc⁄n
);

953 i‡(
îr‹
) {

954 
	`oÂ_Áèl
(
îr‹
, "Eº‹ c⁄√˘ögÅÿswôch %s.", 
¨gv
[0]);

956 
¨gc
 -= 1;

957 
¨gv
 += 1;

959 
i
=0; i<
	`NUM_ELEMS
(
Æl_comm™ds
); i++) {

960 
p
 = &
Æl_comm™ds
[
i
];

961 i‡(
	`°rcmp
(
p
->
«me
, 
¨gv
[0]) == 0) {

962 
¨gc
 -= 1;

963 
¨gv
 += 1;

964 i‡(
¨gc
 < 
p
->
mö_¨gs
)

965 
	`oÂ_Áèl
(0, "'%s' commandÑequiresátÜeast %dárguments",

966 
p
->
«me
,Ö->
mö_¨gs
);

967 i‡(
¨gc
 > 
p
->
max_¨gs
)

968 
	`oÂ_Áèl
(0, "'%s' commandÅakesát most %dárguments",

969 
p
->
«me
,Ö->
max_¨gs
);

971 
p
->
	`h™dÀr
(
vc⁄n
, 
¨gc
, 
¨gv
);

972 i‡(
	`„º‹
(
°dout
)) {

973 
	`oÂ_Áèl
(0, "writeÅo stdout failed");

975 i‡(
	`„º‹
(
°dîr
)) {

976 
	`oÂ_Áèl
(0, "writeÅo stderr failed");

978 
	`vc⁄n_˛o£
(
vc⁄n
);

979 
	`exô
(0);

983 
	`oÂ_Áèl
(0, "unknow¿comm™d '%s'; u£ --hñ∞f‹ hñp", 
¨gv
[0]);

984 
	`vc⁄n_˛o£
(
vc⁄n
);

986 
	}
}

989 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

992 
OPT_STRICT
 = 
UCHAR_MAX
 + 1

994 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

995 {"timeout", 
ªquúed_¨gumít
, 0, 't'},

996 {"vîbo£", 
›ti⁄Æ_¨gumít
, 0, 'v'},

997 {"°ri˘", 
no_¨gumít
, 0, 
OPT_STRICT
},

998 {"hñp", 
no_¨gumít
, 0, 'h'},

999 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

1000 
VCONN_SSL_LONG_OPTIONS


1003 *
sh‹t_›ti⁄s
 = 
	`l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(
l⁄g_›ti⁄s
);

1006 
timeout
;

1007 
c
;

1009 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

1010 i‡(
c
 == -1) {

1014 
c
) {

1016 
timeout
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

1017 i‡(
timeout
 <= 0) {

1018 
	`oÂ_Áèl
(0, "value %s on -t or --timeout isÇotátÜeast 1",

1019 
›èrg
);

1021 
	`time_Æ¨m
(
timeout
);

1026 
	`ußge
();

1029 
	`¥ötf
("%†%†compûed "
__DATE__
" "
__TIME__
"\n",

1030 
¥ogøm_«me
, 
VERSION
 
BUILDNR
);

1031 
	`exô
(
EXIT_SUCCESS
);

1034 
	`vlog_£t_vîbosôy
(
›èrg
);

1037 
VCONN_SSL_OPTION_HANDLERS


1040 
	`exô
(
EXIT_FAILURE
);

1043 
	`ab‹t
();

1046 
	`‰ì
(
sh‹t_›ti⁄s
);

1047 
	}
}

1052 
	$ußge
()

1054 
	`¥ötf
("%s: OpenFlow switch management utility\n"

1086 
¥ogøm_«me
,Örogram_name);

1087 
	`vc⁄n_ußge
(
åue
, 
Ál£
, false);

1088 
	`vlog_ußge
();

1089 
	`¥ötf
("\nOther options:\n"

1094 
	`exô
(
EXIT_SUCCESS
);

1095 
	}
}

1098 
	$∑r£_m©ch
(*
°r
, 
oÊ_m©ch_hódî
 **
m©ch
) {

1100 *
tokí
, *
ßvïå
 = 
NULL
;

1101 
oÊ_m©ch
 *
m
 = 
	`xmÆloc
((ofl_match));

1102 
	`oÊ_°ru˘s_m©ch_öô
(
m
);

1104 
tokí
 = 
	`°πok_r
(
°r
, 
KEY_SEP
, &
ßvïå
);Åokí !
NULL
;Åoken = strtok_r(NULL, KEY_SEP, &saveptr)) {

1105 i‡(
	`°∫cmp
(
tokí
, "≠∂y", 
	`°æí
("apply")) == 0 || strncmp(token, "write", strlen("write")) == 0 ) {

1109 i‡(
	`°∫cmp
(
tokí
, 
MATCH_IN_PORT
 
KEY_VAL
, 
	`°æí
(MATCH_IN_PORT KEY_VAL)) == 0) {

1110 
uöt32_t
 
ö_p‹t
;

1111 i‡(
	`∑r£_p‹t
(
tokí
 + 
	`°æí
(
MATCH_IN_PORT
 
KEY_VAL
), &
ö_p‹t
)) {

1112 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÖ‹t: %s.", 
tokí
);

1114 
	`oÊ_°ru˘s_m©ch_put32
(
m
,
OXM_OF_IN_PORT
,
ö_p‹t
);

1119 i‡(
	`°∫cmp
(
tokí
, 
MATCH_DL_SRC
 
KEY_VAL
, 
	`°æí
(MATCH_DL_SRC KEY_VAL)) == 0) {

1120 
uöt8_t
 
ëh_§c
[6];

1121 
uöt8_t
 *
mask
;

1122 i‡(
	`∑r£_dl_addr
(
tokí
 + 
	`°æí
(
MATCH_DL_SRC
 
KEY_VAL
), 
ëh_§c
, &
mask
)) {

1123 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög dl_§c: %s.", 
tokí
);

1126 i‡(
mask
 =
NULL
)

1127 
	`oÊ_°ru˘s_m©ch_put_ëh
(
m
,
OXM_OF_ETH_SRC
,
ëh_§c
);

1129 
	`oÊ_°ru˘s_m©ch_put_ëh_m
(
m
,
OXM_OF_ETH_SRC_W
,
ëh_§c
,
mask
);

1133 i‡(
	`°∫cmp
(
tokí
, 
MATCH_DL_DST
 
KEY_VAL
, 
	`°æí
(MATCH_DL_DST KEY_VAL)) == 0) {

1134 
uöt8_t
 
ëh_d°
[6];

1135 
uöt8_t
 *
mask
;

1136 i‡(
	`∑r£_dl_addr
(
tokí
 + 
	`°æí
(
MATCH_DL_DST
 
KEY_VAL
), 
ëh_d°
, &
mask
)) {

1137 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög dl_d°: %s.", 
tokí
);

1140 i‡(
mask
 =
NULL
)

1141 
	`oÊ_°ru˘s_m©ch_put_ëh
(
m
,
OXM_OF_ETH_DST
,
ëh_d°
);

1143 
	`oÊ_°ru˘s_m©ch_put_ëh_m
(
m
,
OXM_OF_ETH_DST_W
,
ëh_d°
, 
mask
);

1148 i‡(
	`°∫cmp
(
tokí
, 
MATCH_ARP_SHA
 
KEY_VAL
, 
	`°æí
(MATCH_ARP_SHA KEY_VAL)) == 0) {

1149 
uöt8_t
 
¨p_sha
[6];

1150 
uöt8_t
 *
mask
;

1151 i‡(
	`∑r£_dl_addr
(
tokí
 + 
	`°æí
(
MATCH_ARP_SHA
 
KEY_VAL
), 
¨p_sha
, &
mask
)) {

1152 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögáΩ_sha: %s.", 
tokí
);

1155 i‡(
mask
 =
NULL
)

1156 
	`oÊ_°ru˘s_m©ch_put_ëh
(
m
, 
OXM_OF_ARP_SHA
, 
¨p_sha
);

1158 
	`oÊ_°ru˘s_m©ch_put_ëh_m
(
m
, 
OXM_OF_ARP_SHA_W
, 
¨p_sha
, 
mask
);

1162 i‡(
	`°∫cmp
(
tokí
, 
MATCH_ARP_THA
 
KEY_VAL
, 
	`°æí
(MATCH_ARP_THA KEY_VAL)) == 0) {

1163 
uöt8_t
 
¨p_tha
[6];

1164 
uöt8_t
 *
mask
;

1165 i‡(
	`∑r£_dl_addr
(
tokí
 + 
	`°æí
(
MATCH_ARP_THA
 
KEY_VAL
), 
¨p_tha
, &
mask
)) {

1166 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögáΩ_th®%s.", 
tokí
);

1169 i‡(
mask
 =
NULL
)

1170 
	`oÊ_°ru˘s_m©ch_put_ëh
(
m
,
OXM_OF_ARP_THA
, 
¨p_tha
);

1172 
	`oÊ_°ru˘s_m©ch_put_ëh_m
(
m
,
OXM_OF_ARP_THA_W
, 
¨p_tha
, 
mask
);

1176 i‡(
	`°∫cmp
(
tokí
, 
MATCH_ARP_SPA
 
KEY_VAL
, 
	`°æí
(MATCH_ARP_SPA KEY_VAL)) == 0) {

1177 
uöt32_t
 
¨p_§c
;

1178 
uöt32_t
 *
mask
;

1179 i‡(
	`∑r£_nw_addr
(
tokí
 + 
	`°æí
(
MATCH_ARP_SPA
 
KEY_VAL
), &(
¨p_§c
), &
mask
)) {

1180 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögáΩ_§c: %s.", 
tokí
);

1183 i‡(
mask
 =
NULL
)

1184 
	`oÊ_°ru˘s_m©ch_put32
(
m
, 
OXM_OF_ARP_SPA
,
¨p_§c
);

1186 
	`oÊ_°ru˘s_m©ch_put32m
(
m
, 
OXM_OF_ARP_SPA_W
, 
¨p_§c
, *
mask
);

1190 i‡(
	`°∫cmp
(
tokí
, 
MATCH_ARP_TPA
 
KEY_VAL
, 
	`°æí
(MATCH_ARP_TPA KEY_VAL)) == 0) {

1191 
uöt32_t
 
¨p_èrgë
;

1192 
uöt32_t
 *
mask
;

1193 i‡(
	`∑r£_nw_addr
(
tokí
 + 
	`°æí
(
MATCH_ARP_TPA
 
KEY_VAL
), &(
¨p_èrgë
), &
mask
)) {

1194 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögáΩ_èrgë: %s.", 
tokí
);

1197 i‡(
mask
 =
NULL
)

1198 
	`oÊ_°ru˘s_m©ch_put32
(
m
, 
OXM_OF_ARP_TPA
, 
¨p_èrgë
);

1200 
	`oÊ_°ru˘s_m©ch_put32m
(
m
, 
OXM_OF_ARP_TPA_W
, 
¨p_èrgë
, *
mask
);

1204 i‡(
	`°∫cmp
(
tokí
, 
MATCH_ARP_OP
 
KEY_VAL
, 
	`°æí
(MATCH_ARP_OP KEY_VAL)) == 0) {

1205 
uöt16_t
 
¨p_›
;

1206 i‡(
	`∑r£16
(
tokí
 + 
	`°æí
(
MATCH_ARP_OP
 
KEY_VAL
), 
NULL
, 0, 0x7, &
¨p_›
)){

1207 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögáΩ_›: %s.", 
tokí
);

1209 
	`oÊ_°ru˘s_m©ch_put16
(
m
, 
OXM_OF_ARP_OP
, 
¨p_›
);

1215 i‡(
	`°∫cmp
(
tokí
, 
MATCH_DL_VLAN
 
KEY_VAL
, 
	`°æí
(MATCH_DL_VLAN KEY_VAL)) == 0) {

1216 
uöt16_t
 
dl_vœn
;

1217 *
°r
 = 
tokí
 + 
	`°æí
(
MATCH_DL_VLAN
 
KEY_VAL
);

1219 i‡(
	`°rcmp
(
°r
, "any") == 0)

1220 
	`oÊ_°ru˘s_m©ch_put16m
(
m
,
OXM_OF_VLAN_VID_W
, 
OFPVID_PRESENT
, OFPVID_PRESENT);

1221 i‡(
	`°rcmp
(
°r
, "none") == 0)

1222 
	`oÊ_°ru˘s_m©ch_put16
(
m
,
OXM_OF_VLAN_VID
, 
OFPVID_NONE
);

1223 i‡(
	`∑r£16
(
°r
, 
NULL
, 0, 0xfff, &
dl_vœn
))

1224 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög vœ¿œbñ: %s.", 
tokí
);

1226 
	`oÊ_°ru˘s_m©ch_put16
(
m
,
OXM_OF_VLAN_VID
, 
dl_vœn
 | 
OFPVID_PRESENT
);

1230 i‡(
	`°∫cmp
(
tokí
, 
MATCH_DL_VLAN_PCP
 
KEY_VAL
, 
	`°æí
(MATCH_DL_VLAN_PCP KEY_VAL)) == 0) {

1231 
uöt8_t
 
p˝
;

1232 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
MATCH_DL_VLAN_PCP
 
KEY_VAL
), 
NULL
, 0, 0x7, &
p˝
)) {

1233 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög vœ¿p˝: %s.", 
tokí
);

1235 
	`oÊ_°ru˘s_m©ch_put8
(
m
, 
OXM_OF_VLAN_PCP
, 
p˝
);

1240 i‡(
	`°∫cmp
(
tokí
, 
MATCH_DL_TYPE
 
KEY_VAL
, 
	`°æí
(MATCH_DL_TYPE KEY_VAL)) == 0) {

1241 
uöt16_t
 
dl_ty≥
;

1242 i‡(
	`∑r£16
(
tokí
 + 
	`°æí
(
MATCH_DL_TYPE
 
KEY_VAL
), 
NULL
, 0, 0xffff, &
dl_ty≥
)) {

1243 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÉth_ty≥: %s.", 
tokí
);

1246 
	`oÊ_°ru˘s_m©ch_put16
(
m
, 
OXM_OF_ETH_TYPE
,
dl_ty≥
);

1251 i‡(
	`°∫cmp
(
tokí
, 
MATCH_IP_ECN
 
KEY_VAL
, 
	`°æí
(MATCH_IP_ECN KEY_VAL)) == 0) {

1252 
uöt8_t
 
ù_e˙
;

1253 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
MATCH_IP_ECN
 
KEY_VAL
), 
NULL
, 0, 0x3f, &
ù_e˙
)) {

1254 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÇw_tos: %s.", 
tokí
);

1257 
	`oÊ_°ru˘s_m©ch_put8
(
m
, 
OXM_OF_IP_ECN
, 
ù_e˙
);

1260 i‡(
	`°∫cmp
(
tokí
, 
MATCH_IP_DSCP
 
KEY_VAL
, 
	`°æí
(MATCH_IP_DSCP KEY_VAL)) == 0) {

1261 
uöt8_t
 
ù_ds˝
;

1262 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
MATCH_IP_DSCP
 
KEY_VAL
), 
NULL
, 0, 0x3f, &
ù_ds˝
)) {

1263 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÇw_tos: %s.", 
tokí
);

1266 
	`oÊ_°ru˘s_m©ch_put8
(
m
, 
OXM_OF_IP_DSCP
, 
ù_ds˝
);

1269 i‡(
	`°∫cmp
(
tokí
, 
MATCH_NW_PROTO
 
KEY_VAL
, 
	`°æí
(MATCH_NW_PROTO KEY_VAL)) == 0) {

1270 
uöt8_t
 
nw_¥Ÿo
;

1271 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
MATCH_NW_PROTO
 
KEY_VAL
), 
NULL
, 0, 0xff, &
nw_¥Ÿo
)) {

1272 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög ip_¥Ÿo: %s.", 
tokí
);

1274 
	`oÊ_°ru˘s_m©ch_put8
(
m
,
OXM_OF_IP_PROTO
, 
nw_¥Ÿo
);

1277 i‡(
	`°∫cmp
(
tokí
, 
MATCH_NW_SRC
 
KEY_VAL
, 
	`°æí
(MATCH_NW_SRC KEY_VAL)) == 0) {

1278 
uöt32_t
 
nw_§c
;

1279 
uöt32_t
 *
mask
;

1280 i‡(
	`∑r£_nw_addr
(
tokí
 + 
	`°æí
(
MATCH_NW_SRC
 
KEY_VAL
), &(
nw_§c
), &
mask
)) {

1281 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög ip_§c: %s.", 
tokí
);

1284 i‡(
mask
 =
NULL
)

1285 
	`oÊ_°ru˘s_m©ch_put32
(
m
, 
OXM_OF_IPV4_SRC
,
nw_§c
);

1287 
	`oÊ_°ru˘s_m©ch_put32m
(
m
, 
OXM_OF_IPV4_SRC_W
, 
nw_§c
, *
mask
);

1291 i‡(
	`°∫cmp
(
tokí
, 
MATCH_NW_DST
 
KEY_VAL
, 
	`°æí
(MATCH_NW_DST KEY_VAL)) == 0) {

1292 
uöt32_t
 
nw_d°
;

1293 
uöt32_t
 *
mask
;

1294 i‡(
	`∑r£_nw_addr
(
tokí
 + 
	`°æí
(
MATCH_NW_DST
 
KEY_VAL
), &
nw_d°
, &
mask
)) {

1295 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög ip_d°: %s.", 
tokí
);

1298 i‡(
mask
 =
NULL
)

1299 
	`oÊ_°ru˘s_m©ch_put32
(
m
, 
OXM_OF_IPV4_DST
,
nw_d°
);

1301 
	`oÊ_°ru˘s_m©ch_put32m
(
m
, 
OXM_OF_IPV4_DST_W
,
nw_d°
, *
mask
);

1307 i‡(
	`°∫cmp
(
tokí
, 
MATCH_ICMPV4_CODE
 
KEY_VAL
, 
	`°æí
(MATCH_ICMPV4_CODE KEY_VAL)) == 0) {

1308 
uöt8_t
 
icmpv4_code
;

1309 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
MATCH_ICMPV4_CODE
 
KEY_VAL
), 
NULL
, 0, 0x3f, &
icmpv4_code
)) {

1310 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög icmpv4_code: %s.", 
tokí
);

1313 
	`oÊ_°ru˘s_m©ch_put8
(
m
, 
OXM_OF_ICMPV4_CODE
, 
icmpv4_code
);

1316 i‡(
	`°∫cmp
(
tokí
, 
MATCH_ICMPV4_TYPE
 
KEY_VAL
, 
	`°æí
(MATCH_ICMPV4_TYPE KEY_VAL)) == 0) {

1317 
uöt8_t
 
icmpv4_ty≥
;

1318 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
MATCH_ICMPV4_TYPE
 
KEY_VAL
), 
NULL
, 0, 0x3f, &
icmpv4_ty≥
)) {

1319 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög icmpv4_ty≥: %s.", 
tokí
);

1322 
	`oÊ_°ru˘s_m©ch_put8
(
m
, 
OXM_OF_ICMPV4_TYPE
, 
icmpv4_ty≥
);

1327 i‡(
	`°∫cmp
(
tokí
, 
MATCH_TP_SRC
 
KEY_VAL
, 
	`°æí
(MATCH_TP_SRC KEY_VAL)) == 0) {

1328 
uöt16_t
 
ç_§c
;

1329 i‡(
	`∑r£16
(
tokí
 + 
	`°æí
(
MATCH_TP_SRC
 
KEY_VAL
), 
NULL
, 0, 0xffff, &
ç_§c
)) {

1330 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÅ˝_§c: %s.", 
tokí
);

1332 
	`oÊ_°ru˘s_m©ch_put16
(
m
, 
OXM_OF_TCP_SRC
,
ç_§c
);

1335 i‡(
	`°∫cmp
(
tokí
, 
MATCH_TP_DST
 
KEY_VAL
, 
	`°æí
(MATCH_TP_DST KEY_VAL)) == 0) {

1336 
uöt16_t
 
ç_d°
;

1337 i‡(
	`∑r£16
(
tokí
 + 
	`°æí
(
MATCH_TP_DST
 
KEY_VAL
), 
NULL
, 0, 0xffff, &
ç_d°
)) {

1338 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÅ˝_d°: %s.", 
tokí
);

1340 
	`oÊ_°ru˘s_m©ch_put16
(
m
, 
OXM_OF_TCP_DST
,
ç_d°
);

1345 i‡(
	`°∫cmp
(
tokí
, 
MATCH_UDP_SRC
 
KEY_VAL
, 
	`°æí
(MATCH_UDP_SRC KEY_VAL)) == 0) {

1346 
uöt16_t
 
udp_§c
;

1347 i‡(
	`∑r£16
(
tokí
 + 
	`°æí
(
MATCH_UDP_SRC
 
KEY_VAL
), 
NULL
, 0, 0xffff, &
udp_§c
)) {

1348 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög udp_§c: %s.", 
tokí
);

1350 
	`oÊ_°ru˘s_m©ch_put16
(
m
, 
OXM_OF_UDP_SRC
,
udp_§c
);

1353 i‡(
	`°∫cmp
(
tokí
, 
MATCH_UDP_DST
 
KEY_VAL
, 
	`°æí
(MATCH_UDP_DST KEY_VAL)) == 0) {

1354 
uöt16_t
 
udp_d°
;

1355 i‡(
	`∑r£16
(
tokí
 + 
	`°æí
(
MATCH_UDP_DST
 
KEY_VAL
), 
NULL
, 0, 0xffff, &
udp_d°
)) {

1356 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög udp_d°: %s.", 
tokí
);

1358 
	`oÊ_°ru˘s_m©ch_put16
(
m
, 
OXM_OF_UDP_DST
,
udp_d°
);

1363 i‡(
	`°∫cmp
(
tokí
, 
MATCH_SCTP_SRC
 
KEY_VAL
, 
	`°æí
(MATCH_SCTP_SRC KEY_VAL)) == 0) {

1364 
uöt16_t
 
s˘p_§c
;

1365 i‡(
	`∑r£16
(
tokí
 + 
	`°æí
(
MATCH_SCTP_SRC
 
KEY_VAL
), 
NULL
, 0, 0xffff, &
s˘p_§c
)) {

1366 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög s˘p_§c: %s.", 
tokí
);

1368 
	`oÊ_°ru˘s_m©ch_put16
(
m
, 
OXM_OF_SCTP_SRC
,
s˘p_§c
);

1371 i‡(
	`°∫cmp
(
tokí
, 
MATCH_SCTP_DST
 
KEY_VAL
, 
	`°æí
(MATCH_SCTP_DST KEY_VAL)) == 0) {

1372 
uöt16_t
 
s˘p_d°
;

1373 i‡(
	`∑r£16
(
tokí
 + 
	`°æí
(
MATCH_SCTP_DST
 
KEY_VAL
), 
NULL
, 0, 0xffff, &
s˘p_d°
)) {

1374 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög s˘p_d°: %s.", 
tokí
);

1376 
	`oÊ_°ru˘s_m©ch_put16
(
m
, 
OXM_OF_SCTP_DST
,
s˘p_d°
);

1380 i‡(
	`°∫cmp
(
tokí
, 
MATCH_MPLS_LABEL
 
KEY_VAL
, 
	`°æí
(MATCH_MPLS_LABEL KEY_VAL)) == 0) {

1381 
uöt32_t
 
m∂s_œbñ
;

1382 i‡(
	`∑r£32
(
tokí
 + 
	`°æí
(
MATCH_MPLS_LABEL
 
KEY_VAL
), 
NULL
, 0, 0xfffff, &
m∂s_œbñ
)) {

1383 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög m∂s_œbñ: %s.", 
tokí
);

1385 
	`oÊ_°ru˘s_m©ch_put32
(
m
,
OXM_OF_MPLS_LABEL
,
m∂s_œbñ
);

1388 i‡(
	`°∫cmp
(
tokí
, 
MATCH_MPLS_TC
 
KEY_VAL
, 
	`°æí
(MATCH_MPLS_TC KEY_VAL)) == 0) {

1389 
uöt8_t
 
m∂s_tc
;

1390 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
MATCH_MPLS_TC
 
KEY_VAL
), 
NULL
, 0, 0x07, &
m∂s_tc
)) {

1391 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög m∂s_tc: %s.", 
tokí
);

1394 
	`oÊ_°ru˘s_m©ch_put8
(
m
, 
OXM_OF_MPLS_TC
, 
m∂s_tc
);

1397 i‡(
	`°∫cmp
(
tokí
, 
MATCH_MPLS_BOS
 
KEY_VAL
, 
	`°æí
(MATCH_MPLS_BOS KEY_VAL)) == 0) {

1398 
uöt8_t
 
m∂s_bos
;

1399 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
MATCH_MPLS_BOS
 
KEY_VAL
), 
NULL
, 0, 0x1, &
m∂s_bos
)) {

1400 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög m∂s_tc: %s.", 
tokí
);

1403 
	`oÊ_°ru˘s_m©ch_put8
(
m
, 
OXM_OF_MPLS_BOS
, 
m∂s_bos
);

1407 i‡(
	`°∫cmp
(
tokí
, 
MATCH_NW_SRC_IPV6
 
KEY_VAL
 , 
	`°æí
(MATCH_NW_SRC_IPV6 KEY_VAL)) == 0) {

1408 
ö6_addr
 
addr
, 
mask
;

1409 
ö6_addr
 
ö6addr_zîo
 = 
IN6ADDR_ZERO_INIT
;

1410 i‡(
	`°r_to_ùv6
(
tokí
 + 
	`°æí
(
MATCH_NW_DST_IPV6
)+1, &
addr
, &
mask
) < 0) {

1411 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÇw_§c_ùv6: %s.", 
tokí
);

1414 if(
	`ùv6_addr_equÆs
(&
mask
, &
ö6addr_zîo
)){

1415 
	`oÊ_°ru˘s_m©ch_put_ùv6
(
m
, 
OXM_OF_IPV6_SRC
, 
addr
.
s6_addr
);

1418 
	`oÊ_°ru˘s_m©ch_put_ùv6m
(
m
, 
OXM_OF_IPV6_SRC_W
,
addr
.
s6_addr
, 
mask
.s6_addr);

1423 i‡(
	`°∫cmp
(
tokí
, 
MATCH_NW_DST_IPV6
 
KEY_VAL
 , 
	`°æí
(MATCH_NW_DST_IPV6 KEY_VAL)) == 0) {

1424 
ö6_addr
 
addr
, 
mask
;

1425 
ö6_addr
 
ö6addr_zîo
 = 
IN6ADDR_ZERO_INIT
;

1426 i‡(
	`°r_to_ùv6
(
tokí
 + 
	`°æí
(
MATCH_NW_DST_IPV6
)+1, &
addr
, &
mask
) < 0) {

1427 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÇw_§c_ùv6: %s.", 
tokí
);

1430 if(
	`ùv6_addr_equÆs
(&
mask
, &
ö6addr_zîo
)){

1431 
	`oÊ_°ru˘s_m©ch_put_ùv6
(
m
, 
OXM_OF_IPV6_DST
, 
addr
.
s6_addr
);

1434 
	`oÊ_°ru˘s_m©ch_put_ùv6m
(
m
, 
OXM_OF_IPV6_DST_W
, 
addr
.
s6_addr
, 
mask
.s6_addr);

1439 i‡(
	`°∫cmp
(
tokí
, 
MATCH_IPV6_FLABEL
 
KEY_VAL
, 
	`°æí
(MATCH_IPV6_FLABEL KEY_VAL)) == 0) {

1440 
uöt32_t
 
ùv6_œbñ
;

1441 
uöt32_t
 *
mask
;

1442 i‡(
	`∑r£32m
(
tokí
 + 
	`°æí
(
MATCH_IPV6_FLABEL
 
KEY_VAL
), 
NULL
, 0, 0xfffff, &
ùv6_œbñ
, &
mask
)) {

1443 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög ipv6_œbñ: %s.", 
tokí
);

1446 if(
mask
 =
NULL
)

1447 
	`oÊ_°ru˘s_m©ch_put32
(
m
, 
OXM_OF_IPV6_FLABEL
, 
ùv6_œbñ
);

1449 
	`oÊ_°ru˘s_m©ch_put32m
(
m
, 
OXM_OF_IPV6_FLABEL_W
, 
ùv6_œbñ
, *
mask
);

1454 i‡(
	`°∫cmp
(
tokí
, 
MATCH_ICMPV6_CODE
 
KEY_VAL
, 
	`°æí
(MATCH_ICMPV6_CODE KEY_VAL)) == 0) {

1455 
uöt8_t
 
icmpv6_code
;

1456 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
MATCH_ICMPV6_CODE
 
KEY_VAL
), 
NULL
, 0, 0x3f, &
icmpv6_code
)) {

1457 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög icmpv6_code: %s.", 
tokí
);

1460 
	`oÊ_°ru˘s_m©ch_put8
(
m
, 
OXM_OF_ICMPV6_CODE
, 
icmpv6_code
);

1463 i‡(
	`°∫cmp
(
tokí
, 
MATCH_ICMPV6_TYPE
 
KEY_VAL
, 
	`°æí
(MATCH_ICMPV6_TYPE KEY_VAL)) == 0) {

1464 
uöt8_t
 
icmpv6_ty≥
;

1465 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
MATCH_ICMPV6_TYPE
 
KEY_VAL
), 
NULL
, 0, 0x3f, &
icmpv6_ty≥
)) {

1466 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög icmpv6_ty≥: %s.", 
tokí
);

1469 
	`oÊ_°ru˘s_m©ch_put8
(
m
, 
OXM_OF_ICMPV6_TYPE
, 
icmpv6_ty≥
);

1474 i‡(
	`°∫cmp
(
tokí
, 
MATCH_IPV6_ND_TARGET
 
KEY_VAL
 , 
	`°æí
(MATCH_IPV6_ND_TARGET KEY_VAL)) == 0) {

1475 
ö6_addr
 
addr
, 
mask
;

1476 i‡(
	`°r_to_ùv6
(
tokí
 + 
	`°æí
(
MATCH_IPV6_ND_TARGET
)+1, &
addr
, &
mask
) < 0) {

1477 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög ipv6_nd_èrgë %s.", 
tokí
);

1480 
	`oÊ_°ru˘s_m©ch_put_ùv6
(
m
, 
OXM_OF_IPV6_ND_TARGET
, 
addr
.
s6_addr
);

1484 i‡(
	`°∫cmp
(
tokí
, 
MATCH_IPV6_ND_SLL
 
KEY_VAL
, 
	`°æí
(MATCH_IPV6_ND_SLL KEY_VAL)) == 0) {

1485 
uöt8_t
 
ëh_§c
[6];

1486 
uöt8_t
 *
mask
;

1487 i‡(
	`∑r£_dl_addr
(
tokí
 + 
	`°æí
(
MATCH_IPV6_ND_SLL
 
KEY_VAL
), 
ëh_§c
, &
mask
)) {

1488 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög ipv6_nd_¶l: %s.", 
tokí
);

1491 
	`oÊ_°ru˘s_m©ch_put_ëh
(
m
,
OXM_OF_IPV6_ND_SLL
, 
ëh_§c
);

1495 i‡(
	`°∫cmp
(
tokí
, 
MATCH_IPV6_ND_TLL
 
KEY_VAL
, 
	`°æí
(MATCH_IPV6_ND_TLL KEY_VAL)) == 0) {

1496 
uöt8_t
 
ëh_d°
[6];

1497 
uöt8_t
 *
mask
;

1498 i‡(
	`∑r£_dl_addr
(
tokí
 + 
	`°æí
(
MATCH_IPV6_ND_TLL
 
KEY_VAL
), 
ëh_d°
, &
mask
)) {

1499 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög ipv_nd_él: %s.", 
tokí
);

1502 
	`oÊ_°ru˘s_m©ch_put_ëh
(
m
, 
OXM_OF_IPV6_ND_TLL
,
ëh_d°
);

1508 i‡(
	`°∫cmp
(
tokí
, 
MATCH_METADATA
 
KEY_VAL
, 
	`°æí
(MATCH_METADATA KEY_VAL)) == 0) {

1509 
uöt64_t
 
mëad©a
;

1510 i‡(
	`ssˇnf
(
tokí
, 
MATCH_METADATA
 
KEY_VAL
 "0x%"
SCNx64
"", (&
mëad©a
)) != 1) {

1511 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög %s: %s.", 
MATCH_METADATA
, 
tokí
);

1513 
	`oÊ_°ru˘s_m©ch_put64
(
m
, 
OXM_OF_METADATA
, 
mëad©a
);

1517 i‡(
	`°∫cmp
(
tokí
, 
MATCH_PBB_ISID
 
KEY_VAL
, 
	`°æí
(MATCH_PBB_ISID KEY_VAL)) == 0) {

1518 
uöt32_t
 
pbb_isid
;

1519 i‡(
	`∑r£32
(
tokí
 + 
	`°æí
(
MATCH_PBB_ISID
 
KEY_VAL
), 
NULL
, 0, 0x1000000, &
pbb_isid
)) {

1520 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÖbb_isid: %s.", 
tokí
);

1522 
	`oÊ_°ru˘s_m©ch_put32
(
m
, 
OXM_OF_PBB_ISID
, 
pbb_isid
);

1526 i‡(
	`°∫cmp
(
tokí
, 
MATCH_TUNNEL_ID
 
KEY_VAL
, 
	`°æí
(MATCH_TUNNEL_ID KEY_VAL)) == 0) {

1527 
uöt64_t
 
tu¬_id
;

1528 i‡(
	`ssˇnf
(
tokí
, 
MATCH_TUNNEL_ID
 
KEY_VAL
 "0x%"
SCNx64
"", (&
tu¬_id
)) != 1) {

1529 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög %s: %s.", 
MATCH_TUNNEL_ID
, 
tokí
);

1531 
	`oÊ_°ru˘s_m©ch_put64
(
m
, 
OXM_OF_TUNNEL_ID
, 
tu¬_id
);

1535 i‡(
	`°∫cmp
(
tokí
, 
MATCH_EXT_HDR
 
KEY_VAL
, 
	`°æí
(MATCH_EXT_HDR KEY_VAL)) == 0) {

1536 
uöt16_t
 
ext_hdr
;

1537 i‡(
	`∑r£_ext_hdr
(
tokí
 + 
	`°æí
(
MATCH_EXT_HDR
 
KEY_VAL
), &
ext_hdr
)) {

1538 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÉxt_hd∏%s.", 
tokí
);

1540 
	`oÊ_°ru˘s_m©ch_put16
(
m
, 
OXM_OF_IPV6_EXTHDR
, 
ext_hdr
);

1543 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög m©chárg: %s.", 
tokí
);

1546 (*
m©ch
Ë(
oÊ_m©ch_hódî
 *)
m
;

1547 
	}
}

1550 
	$∑r£_£t_fõld
(*
tokí
, 
oÊ_a˘i⁄_£t_fõld
 *
a˘
) {

1553 i‡(
	`°∫cmp
(
tokí
, 
MATCH_DL_SRC
 
KEY_VAL2
, 
	`°æí
(MATCH_DL_SRC KEY_VAL2)) == 0) {

1554 
uöt8_t
* 
dl_§c
 = 
	`xmÆloc
(6);

1555 
uöt8_t
 *
mask
 = 
NULL
;

1556 i‡(
	`∑r£_dl_addr
(
tokí
 + 
	`°æí
(
MATCH_DL_SRC
 
KEY_VAL2
), 
dl_§c
, &
mask
)) {

1557 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög dl_§c: %s.", 
tokí
);

1559 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1560 
a˘
->
fõld
->
hódî
 = 
OXM_OF_ETH_SRC
;

1561 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
dl_§c
;

1565 i‡(
	`°∫cmp
(
tokí
, 
MATCH_DL_DST
 
KEY_VAL2
, 
	`°æí
(MATCH_DL_DST KEY_VAL2)) == 0) {

1566 
uöt8_t
* 
dl_d°
 = 
	`xmÆloc
(6);

1567 
uöt8_t
 *
mask
 = 
NULL
;

1568 i‡(
	`∑r£_dl_addr
(
tokí
 + 
	`°æí
(
MATCH_DL_DST
 
KEY_VAL2
), 
dl_d°
, &
mask
)) {

1569 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög dl_§c: %s.", 
tokí
);

1571 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1572 
a˘
->
fõld
->
hódî
 = 
OXM_OF_ETH_DST
;

1573 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
dl_d°
;

1577 i‡(
	`°∫cmp
(
tokí
, 
MATCH_DL_TYPE
 
KEY_VAL2
, 
	`°æí
(MATCH_DL_TYPE KEY_VAL2)) == 0) {

1578 
uöt16_t
* 
dl_ty≥
 = 
	`xmÆloc
((uint16_t));

1579 i‡(
	`∑r£16
(
tokí
 + 
	`°æí
(
MATCH_DL_TYPE
 
KEY_VAL2
), 
NULL
, 0, 0xffff, 
dl_ty≥
)) {

1580 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög dl_ty≥: %s.", 
tokí
);

1583 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1584 
a˘
->
fõld
->
hódî
 = 
OXM_OF_ETH_TYPE
;

1585 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
dl_ty≥
;

1591 i‡(
	`°∫cmp
(
tokí
, 
MATCH_ARP_SHA
 
KEY_VAL2
, 
	`°æí
(MATCH_ARP_SHA KEY_VAL2)) == 0) {

1592 
uöt8_t
 
¨p_sha
[6];

1593 
uöt8_t
 *
mask
;

1594 i‡(
	`∑r£_dl_addr
(
tokí
 + 
	`°æí
(
MATCH_ARP_SHA
 
KEY_VAL2
), 
¨p_sha
, &
mask
)) {

1595 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögáΩ_sha: %s.", 
tokí
);

1598 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1599 
a˘
->
fõld
->
hódî
 = 
OXM_OF_ARP_SHA
;

1600 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
¨p_sha
;

1604 i‡(
	`°∫cmp
(
tokí
, 
MATCH_ARP_THA
 
KEY_VAL2
, 
	`°æí
(MATCH_ARP_THA KEY_VAL2)) == 0) {

1605 
uöt8_t
 
¨p_tha
[6];

1606 
uöt8_t
 *
mask
;

1607 i‡(
	`∑r£_dl_addr
(
tokí
 + 
	`°æí
(
MATCH_ARP_THA
 
KEY_VAL2
), 
¨p_tha
, &
mask
)) {

1608 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögáΩ_th®%s.", 
tokí
);

1611 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1612 
a˘
->
fõld
->
hódî
 = 
OXM_OF_ARP_THA
;

1613 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
¨p_tha
;

1617 i‡(
	`°∫cmp
(
tokí
, 
MATCH_ARP_SPA
 
KEY_VAL2
, 
	`°æí
(MATCH_ARP_SPA KEY_VAL2)) == 0) {

1618 
uöt32_t
 *
¨p_§c
 = 
	`mÆloc
((uint32_t));

1619 
uöt32_t
 *
mask
;

1620 i‡(
	`∑r£_nw_addr
(
tokí
 + 
	`°æí
(
MATCH_ARP_SPA
 
KEY_VAL2
), 
¨p_§c
, &
mask
)) {

1621 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögáΩ_§c: %s.", 
tokí
);

1624 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1625 
a˘
->
fõld
->
hódî
 = 
OXM_OF_ARP_SPA
;

1626 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
¨p_§c
;

1630 i‡(
	`°∫cmp
(
tokí
, 
MATCH_ARP_TPA
 
KEY_VAL2
, 
	`°æí
(MATCH_ARP_TPA KEY_VAL2)) == 0) {

1631 
uöt32_t
 *
¨p_èrgë
 = 
	`mÆloc
((uint32_t));

1632 
uöt32_t
 *
mask
;

1633 i‡(
	`∑r£_nw_addr
(
tokí
 + 
	`°æí
(
MATCH_ARP_TPA
 
KEY_VAL2
), 
¨p_èrgë
, &
mask
)) {

1634 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögáΩ_èrgë: %s.", 
tokí
);

1637 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1638 
a˘
->
fõld
->
hódî
 = 
OXM_OF_ARP_TPA
;

1639 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
¨p_èrgë
;

1643 i‡(
	`°∫cmp
(
tokí
, 
MATCH_ARP_OP
 
KEY_VAL2
, 
	`°æí
(MATCH_ARP_OP KEY_VAL2)) == 0) {

1644 
uöt16_t
 *
¨p_›
 = 
	`xmÆloc
((uint16_t));

1645 i‡(
	`∑r£16
(
tokí
 + 
	`°æí
(
MATCH_ARP_OP
 
KEY_VAL2
), 
NULL
, 0, 0x7, 
¨p_›
)){

1646 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögáΩ_›: %s.", 
tokí
);

1649 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1650 
a˘
->
fõld
->
hódî
 = 
OXM_OF_ARP_OP
;

1651 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
¨p_›
;

1655 i‡(
	`°∫cmp
(
tokí
, 
MATCH_DL_VLAN
 
KEY_VAL2
, 
	`°æí
(MATCH_DL_VLAN KEY_VAL2)) == 0) {

1656 
uöt16_t
 *
dl_vœn
 = 
	`mÆloc
((uint16_t));

1657 i‡(
	`∑r£_vœn_vid
(
tokí
 + 
	`°æí
(
MATCH_DL_VLAN
 
KEY_VAL2
), 
dl_vœn
)) {

1658 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög vœ¿œbñ: %s.", 
tokí
);

1661 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1662 
a˘
->
fõld
->
hódî
 = 
OXM_OF_VLAN_VID
;

1663 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
dl_vœn
;

1667 i‡(
	`°∫cmp
(
tokí
, 
MATCH_DL_VLAN_PCP
 
KEY_VAL2
, 
	`°æí
(MATCH_DL_VLAN_PCP KEY_VAL2)) == 0) {

1668 
uöt8_t
 *
p˝
 = 
	`mÆloc
((uint8_t));

1669 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
MATCH_DL_VLAN_PCP
 
KEY_VAL2
), 
NULL
, 0, 0x7, 
p˝
)) {

1670 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög vœ¿p˝: %s.", 
tokí
);

1672 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1673 
a˘
->
fõld
->
hódî
 = 
OXM_OF_VLAN_PCP
;

1674 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
p˝
;

1678 i‡(
	`°∫cmp
(
tokí
, 
MATCH_PBB_ISID
 
KEY_VAL2
, 
	`°æí
(MATCH_PBB_ISID KEY_VAL2)) == 0) {

1679 
uöt32_t
 *
pbb_isid
 = 
	`mÆloc
((uint32_t));

1680 i‡(
	`∑r£32
(
tokí
 + 
	`°æí
(
MATCH_PBB_ISID
 
KEY_VAL2
), 
NULL
, 0, 0x1000000, 
pbb_isid
)) {

1681 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÖbb sîvi˚ id: %s.", 
tokí
);

1684 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1685 
a˘
->
fõld
->
hódî
 = 
OXM_OF_PBB_ISID
;

1686 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
pbb_isid
;

1690 i‡(
	`°∫cmp
(
tokí
, 
MATCH_MPLS_LABEL
 
KEY_VAL2
, 
	`°æí
(MATCH_MPLS_LABEL KEY_VAL2)) == 0) {

1691 
uöt32_t
 *
m∂s_œbñ
 = 
	`mÆloc
((uint32_t));

1692 i‡(
	`∑r£32
(
tokí
 + 
	`°æí
(
MATCH_MPLS_LABEL
 
KEY_VAL2
), 
NULL
, 0, 0x1000000, 
m∂s_œbñ
)) {

1693 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög m∂†œbñ id: %s.", 
tokí
);

1696 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1697 
a˘
->
fõld
->
hódî
 = 
OXM_OF_MPLS_LABEL
;

1698 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
m∂s_œbñ
;

1702 i‡(
	`°∫cmp
(
tokí
, 
MATCH_MPLS_TC
 
KEY_VAL2
, 
	`°æí
(MATCH_MPLS_TC KEY_VAL2)) == 0) {

1703 
uöt8_t
 *
m∂s_tc
 = (uöt8_t*Ë
	`mÆloc
((uint8_t));

1704 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
MATCH_MPLS_TC
 
KEY_VAL2
), 
NULL
, 0, 0x07, 
m∂s_tc
)) {

1705 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög m∂s_tc: %s.", 
tokí
);

1708 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1709 
a˘
->
fõld
->
hódî
 = 
OXM_OF_MPLS_TC
;

1710 
a˘
->
fõld
->
vÆue
 = 
m∂s_tc
;

1714 i‡(
	`°∫cmp
(
tokí
, 
MATCH_MPLS_BOS
 
KEY_VAL2
, 
	`°æí
(MATCH_MPLS_BOS KEY_VAL2)) == 0) {

1715 
uöt8_t
 *
m∂s_bos
 = (uöt8_t*Ë
	`mÆloc
((uint8_t));

1716 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
MATCH_MPLS_BOS
 
KEY_VAL2
), 
NULL
, 0, 0x01, 
m∂s_bos
)) {

1717 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög m∂s_bos: %s.", 
tokí
);

1720 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1721 
a˘
->
fõld
->
hódî
 = 
OXM_OF_MPLS_BOS
;

1722 
a˘
->
fõld
->
vÆue
 = 
m∂s_bos
;

1726 i‡(
	`°∫cmp
(
tokí
, 
MATCH_DL_VLAN_PCP
 
KEY_VAL2
, 
	`°æí
(MATCH_DL_VLAN_PCP KEY_VAL2)) == 0) {

1727 
uöt8_t
* 
vœn_p˝
 = 
	`mÆloc
((uint8_t));

1728 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
MATCH_DL_VLAN_PCP
 
KEY_VAL2
), 
NULL
, 0, 0x7, 
vœn_p˝
)) {

1729 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög vœ¿p˝: %s.", 
tokí
);

1732 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1733 
a˘
->
fõld
->
hódî
 = 
OXM_OF_VLAN_PCP
;

1734 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
vœn_p˝
;

1738 i‡(
	`°∫cmp
(
tokí
, 
MATCH_NW_SRC
 
KEY_VAL2
, 
	`°æí
(MATCH_NW_SRC KEY_VAL2)) == 0) {

1739 
uöt32_t
* 
nw_§c
 = 
	`mÆloc
((uint32_t));

1740 
uöt32_t
 *
mask
;

1742 i‡(
	`∑r£_nw_addr
(
tokí
 + 
	`°æí
(
MATCH_NW_SRC
 
KEY_VAL2
), 
nw_§c
, &
mask
)) {

1743 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög ip_§c: %s.", 
tokí
);

1746 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1747 
a˘
->
fõld
->
hódî
 = 
OXM_OF_IPV4_SRC
;

1748 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
nw_§c
;

1752 i‡(
	`°∫cmp
(
tokí
, 
MATCH_NW_DST
 
KEY_VAL2
, 
	`°æí
(MATCH_NW_DST KEY_VAL2)) == 0) {

1753 
uöt32_t
 * 
nw_d°
 = 
	`mÆloc
((uint32_t));

1754 
uöt32_t
 *
mask
;

1756 i‡(
	`∑r£_nw_addr
(
tokí
 + 
	`°æí
(
MATCH_NW_DST
 
KEY_VAL2
), 
nw_d°
, &
mask
)) {

1757 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög ip_d°: %s.", 
tokí
);

1760 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1761 
a˘
->
fõld
->
hódî
 = 
OXM_OF_IPV4_DST
;

1762 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
nw_d°
;

1766 i‡(
	`°∫cmp
(
tokí
, 
MATCH_IP_ECN
 
KEY_VAL2
, 
	`°æí
(
MATCH_NW_DST
 KEY_VAL2)) == 0) {

1767 
uöt8_t
 *
ù_e˙
 = 
	`mÆloc
((uint8_t));

1768 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
MATCH_IP_ECN
 
KEY_VAL2
), 
NULL
, 0, 0x3, 
ù_e˙
)) {

1769 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÇw_tos: %s.", 
tokí
);

1772 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1773 
a˘
->
fõld
->
hódî
 = 
OXM_OF_IP_ECN
;

1774 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
ù_e˙
;

1778 i‡(
	`°∫cmp
(
tokí
, 
MATCH_IP_DSCP
 
KEY_VAL2
, 
	`°æí
(
MATCH_NW_DST
 KEY_VAL2)) == 0) {

1779 
uöt8_t
 * 
ds˝
 = 
	`mÆloc
((uint8_t));

1781 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
MATCH_IP_DSCP
 
KEY_VAL2
), 
NULL
, 0, 0x40, 
ds˝
)) {

1782 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÇw_tos: %s.", 
tokí
);

1785 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1786 
a˘
->
fõld
->
hódî
 = 
OXM_OF_IP_DSCP
;

1787 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
ds˝
;

1791 i‡(
	`°∫cmp
(
tokí
, 
MATCH_NW_PROTO
 
KEY_VAL2
, 
	`°æí
(MATCH_NW_PROTO KEY_VAL2)) == 0) {

1792 
uöt8_t
 *
nw_¥Ÿo
 = 
	`mÆloc
((uint8_t));

1793 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
MATCH_NW_PROTO
 
KEY_VAL2
), 
NULL
, 0, 0xff, 
nw_¥Ÿo
)) {

1794 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög ip_¥Ÿo: %s.", 
tokí
);

1797 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1798 
a˘
->
fõld
->
hódî
 = 
OXM_OF_IP_PROTO
;

1799 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
nw_¥Ÿo
;

1803 i‡(
	`°∫cmp
(
tokí
, 
MATCH_TP_SRC
 
KEY_VAL2
, 
	`°æí
(MATCH_TP_SRC KEY_VAL2)) == 0) {

1804 
uöt16_t
* 
ç_§c
 = 
	`xmÆloc
(2);

1805 i‡(
	`∑r£16
(
tokí
+ 
	`°æí
(
MATCH_TP_SRC
 
KEY_VAL2
), 
NULL
, 0, 0xffff, 
ç_§c
)) {

1806 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÅ˝_§c: %s.", 
tokí
);

1808 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1809 
a˘
->
fõld
->
hódî
 = 
OXM_OF_TCP_SRC
;

1810 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
ç_§c
;

1814 i‡(
	`°∫cmp
(
tokí
, 
MATCH_TP_DST
 
KEY_VAL2
, 
	`°æí
(MATCH_TP_DST KEY_VAL2)) == 0) {

1815 
uöt16_t
* 
ç_d°
 = 
	`xmÆloc
(2);

1816 i‡(
	`∑r£16
(
tokí
 + 
	`°æí
(
MATCH_TP_SRC
 
KEY_VAL2
), 
NULL
, 0, 0xffff, 
ç_d°
)) {

1817 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÅ˝_§c: %s.", 
tokí
);

1819 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1820 
a˘
->
fõld
->
hódî
 = 
OXM_OF_TCP_DST
;

1821 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
ç_d°
;

1825 i‡(
	`°∫cmp
(
tokí
, 
MATCH_NW_SRC_IPV6
 
KEY_VAL2
 , 
	`°æí
(MATCH_NW_SRC_IPV6 KEY_VAL2)) == 0) {

1826 
ö6_addr
 *
addr
 = (ö6_addr*Ë
	`mÆloc
((in6_addr));

1827 
ö6_addr
 
mask
;

1828 i‡(
	`°r_to_ùv6
(
tokí
 + 
	`°æí
(
MATCH_NW_SRC_IPV6
)+1, 
addr
, &
mask
) < 0) {

1829 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÇw_§c_ùv6: %s.", 
tokí
);

1832 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1833 
a˘
->
fõld
->
hódî
 = 
OXM_OF_IPV6_SRC
;

1834 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
addr
->
s6_addr
;

1838 i‡(
	`°∫cmp
(
tokí
, 
MATCH_NW_DST_IPV6
 
KEY_VAL2
 , 
	`°æí
(MATCH_NW_DST_IPV6 KEY_VAL2)) == 0) {

1839 
ö6_addr
 *
addr
 = (ö6_addr*Ë
	`mÆloc
((in6_addr));

1840 
ö6_addr
 
mask
;

1841 i‡(
	`°r_to_ùv6
(
tokí
 + 
	`°æí
(
MATCH_NW_DST_IPV6
)+1, 
addr
, &
mask
) < 0) {

1842 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÇw_§c_ùv6: %s.", 
tokí
);

1845 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1846 
a˘
->
fõld
->
hódî
 = 
OXM_OF_IPV6_DST
;

1847 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
addr
->
s6_addr
;

1851 i‡(
	`°∫cmp
(
tokí
, 
MATCH_IPV6_FLABEL
 
KEY_VAL2
, 
	`°æí
(MATCH_IPV6_FLABEL KEY_VAL2)) == 0) {

1852 
uöt32_t
 *
ùv6_œbñ
 = 
	`mÆloc
((uint32_t));

1853 i‡(
	`∑r£32
(
tokí
 + 
	`°æí
(
MATCH_IPV6_FLABEL
 
KEY_VAL2
), 
NULL
, 0, 0x000fffff, 
ùv6_œbñ
)) {

1854 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög ipv6_œbñ: %s.", 
tokí
);

1857 
a˘
->
fõld
 = (
oÊ_m©ch_év
*Ë
	`mÆloc
((ofl_match_tlv));

1858 
a˘
->
fõld
->
hódî
 = 
OXM_OF_IPV6_FLABEL
;

1859 
a˘
->
fõld
->
vÆue
 = (
uöt8_t
*Ë
ùv6_œbñ
;

1863 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög së_fõldárg: %s.", 
tokí
);

1864 
	}
}

1867 
	$make_Æl_m©ch
(
oÊ_m©ch_hódî
 **
m©ch
) {

1868 
oÊ_m©ch
 *
m
 = 
	`xmÆloc
((ofl_match));

1870 
	`oÊ_°ru˘s_m©ch_öô
(
m
);

1872 (*
m©ch
Ë(
oÊ_m©ch_hódî
 *)
m
;

1873 
	}
}

1877 
	$∑r£_a˘i⁄
(
uöt16_t
 
ty≥
, *
°r
, 
oÊ_a˘i⁄_hódî
 **
a˘
) {

1878 
ty≥
) {

1879 (
OFPAT_OUTPUT
): {

1880 *
tokí
, *
ßvïå
 = 
NULL
;

1881 
oÊ_a˘i⁄_ouçut
 *
a
 = 
	`xmÆloc
((ofl_action_output));

1883 
tokí
 = 
	`°πok_r
(
°r
, 
KEY_VAL2
, &
ßvïå
);

1884 i‡(
	`∑r£_p‹t
(
tokí
, &(
a
->
p‹t
))) {

1885 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÖ‹àö ouçuàa˘i⁄: %s.", 
°r
);

1887 
tokí
 = 
	`°πok_r
(
NULL
, 
KEY_VAL2
, &
ßvïå
);

1888 i‡(
tokí
 =
NULL
) {

1889 
a
->
max_Àn
 = 0;

1891 i‡(
	`∑r£16
(
tokí
, 
NULL
, 0, 0xfff‡- (
oÂ_hódî
), &(
a
->
max_Àn
))) {

1892 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög max_À¿ö ouçuàa˘i⁄: %s.", 
°r
);

1895 (*
a˘
Ë(
oÊ_a˘i⁄_hódî
 *)
a
;

1898 (
OFPAT_SET_FIELD
):{

1899 
oÊ_a˘i⁄_£t_fõld
 *
a
 = 
	`xmÆloc
( (ofl_action_set_field));

1900 i‡(
	`∑r£_£t_fõld
(
°r
, 
a
)) {

1901 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög fõld i¿£t_fõldá˘i⁄: %s.", 
°r
);

1903 (*
a˘
Ë(
oÊ_a˘i⁄_hódî
 *)
a
;

1906 (
OFPAT_COPY_TTL_OUT
):

1907 (
OFPAT_COPY_TTL_IN
): {

1908 
oÊ_a˘i⁄_hódî
 *
a
 = 
	`xmÆloc
((ofl_action_header));

1909 (*
a˘
Ë
a
;

1912 (
OFPAT_SET_MPLS_TTL
): {

1913 
oÊ_a˘i⁄_m∂s_âl
 *
a
 = 
	`xmÆloc
((ofl_action_mpls_ttl));

1914 i‡(
	`∑r£8
(
°r
, 
NULL
, 0, 255, &(
a
->
m∂s_âl
))) {

1915 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÅé i¿m∂s_â»a˘i⁄: %s.", 
°r
);

1917 (*
a˘
Ë(
oÊ_a˘i⁄_hódî
 *)
a
;

1920 (
OFPAT_DEC_MPLS_TTL
): {

1921 
oÊ_a˘i⁄_hódî
 *
a
 = 
	`xmÆloc
((ofl_action_header));

1922 (*
a˘
Ë
a
;

1925 (
OFPAT_PUSH_VLAN
):

1926 (
OFPAT_PUSH_PBB
):

1927 (
OFPAT_PUSH_MPLS
): {

1928 
oÊ_a˘i⁄_push
 *
a
 = 
	`xmÆloc
((ofl_action_push));

1929 i‡(
	`ssˇnf
(
°r
, "0x%"
SCNx16
"", &(
a
->
ëhîty≥
)) != 1) {

1930 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÉthîty≥ i¿push_m∂s/vœn/pbbá˘i⁄: %s.", 
°r
);

1932 (*
a˘
Ë(
oÊ_a˘i⁄_hódî
 *)
a
;

1935 (
OFPAT_POP_VLAN
):

1936 (
OFPAT_POP_PBB
): {

1937 
oÊ_a˘i⁄_hódî
 *
a
 = 
	`xmÆloc
((ofl_action_header));

1938 (*
a˘
Ë
a
;

1941 (
OFPAT_POP_MPLS
): {

1942 
oÊ_a˘i⁄_p›_m∂s
 *
a
 = 
	`xmÆloc
((ofl_action_pop_mpls));

1943 i‡(
	`ssˇnf
(
°r
, "0x%"
SCNx16
"", &(
a
->
ëhîty≥
)) != 1) {

1944 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÉthîty≥ i¿p›_m∂†a˘i⁄: %s.", 
°r
);

1946 (*
a˘
Ë(
oÊ_a˘i⁄_hódî
 *)
a
;

1949 (
OFPAT_SET_QUEUE
): {

1950 
oÊ_a˘i⁄_£t_queue
 *
a
 = 
	`xmÆloc
((ofl_action_set_queue));

1951 i‡(
	`∑r£32
(
°r
, 
NULL
, 0, 0xffffffff, &(
a
->
queue_id
))) {

1952 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög queuêö queuêa˘i⁄: %s.", 
°r
);

1954 (*
a˘
Ë(
oÊ_a˘i⁄_hódî
 *)
a
;

1957 (
OFPAT_GROUP
): {

1958 
oÊ_a˘i⁄_group
 *
a
 = 
	`xmÆloc
((ofl_action_group));

1959 i‡(
	`∑r£_group
(
°r
, &(
a
->
group_id
))) {

1960 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög grou∞ö grou∞a˘i⁄: %s.", 
°r
);

1962 (*
a˘
Ë(
oÊ_a˘i⁄_hódî
 *)
a
;

1965 (
OFPAT_SET_NW_TTL
): {

1966 
oÊ_a˘i⁄_£t_nw_âl
 *
a
 = 
	`xmÆloc
((ofl_action_set_nw_ttl));

1967 i‡(
	`∑r£8
(
°r
, 
NULL
, 0, 255, &(
a
->
nw_âl
))) {

1968 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÅé i¿m∂s_â»a˘i⁄: %s.", 
°r
);

1970 (*
a˘
Ë(
oÊ_a˘i⁄_hódî
 *)
a
;

1973 (
OFPAT_DEC_NW_TTL
): {

1974 
oÊ_a˘i⁄_hódî
 *
a
 = 
	`xmÆloc
((ofl_action_header));

1975 (*
a˘
Ë
a
;

1979 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögá˘i⁄: %s.", 
°r
);

1982 (*
a˘
)->
ty≥
 =Åype;

1983 
	}
}

1986 
	$∑r£_a˘i⁄s
(*
°r
, 
size_t
 *
a˘s_num
, 
oÊ_a˘i⁄_hódî
 ***
a˘s
) {

1987 *
tokí
, *
ßvïå
 = 
NULL
;

1988 *
s
;

1989 
size_t
 
i
;

1990 
boﬁ
 
found
;

1991 
oÊ_a˘i⁄_hódî
 *
a˘
 = 
NULL
;

1993 
tokí
 = 
	`°πok_r
(
°r
, 
KEY_SEP
, &
ßvïå
);Åokí !
NULL
;Åoken = strtok_r(NULL, KEY_SEP, &saveptr)) {

1994 
found
 = 
Ál£
;

1996 
i
=0; i<
	`NUM_ELEMS
(
a˘i⁄_«mes
); i++) {

1997 i‡(
	`°∫cmp
(
tokí
, 
a˘i⁄_«mes
[
i
].
«me
, 
	`°æí
(action_names[i].name)) == 0) {

1998 
s
 = 
tokí
 + 
	`°æí
(
a˘i⁄_«mes
[
i
].
«me
);

2000 i‡(
	`°∫cmp
(
s
, 
KEY_VAL
, 
	`°æí
(KEY_VAL)) == 0) {

2001 
s
+
	`°æí
(
KEY_VAL
);

2003 
	`∑r£_a˘i⁄
(
a˘i⁄_«mes
[
i
].
code
, 
s
, &
a˘
);

2004 (*
a˘s_num
)++;

2005 (*
a˘s
Ë
	`xªÆloc
((*a˘s), (
oÊ_a˘i⁄_hódî
 *Ë* (*
a˘s_num
));

2006 (*
a˘s
)[(*
a˘s_num
)-1] = 
a˘
;

2007 
found
 = 
åue
;

2011 i‡(!
found
) {

2012 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögá˘i⁄: %s.", 
tokí
);

2016 
	}
}

2021 
	$∑r£_ö°
(*
°r
, 
oÊ_ö°ru˘i⁄_hódî
 **
ö°
) {

2022 
size_t
 
i
;

2023 *
s
;

2024 
i
=0; i<
	`NUM_ELEMS
(
ö°_«mes
); i++) {

2025 i‡(
	`°∫cmp
(
°r
, 
ö°_«mes
[
i
].
«me
, 
	`°æí
(inst_names[i].name)) == 0) {

2027 
s
 = 
°r
 + 
	`°æí
(
ö°_«mes
[
i
].
«me
);

2028 i‡(
	`°∫cmp
(
s
, 
KEY_VAL2
, 
	`°æí
(KEY_VAL2)) != 0) {

2029 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög in°ru˘i⁄: %s.", 
°r
);

2031 
s
+
	`°æí
(
KEY_VAL2
);

2032 
ö°_«mes
[
i
].
code
) {

2033 (
OFPIT_GOTO_TABLE
): {

2034 
oÊ_ö°ru˘i⁄_gŸo_èbÀ
 *
i
 = 
	`xmÆloc
((ofl_instruction_goto_table));

2035 
i
->
hódî
.
ty≥
 = 
OFPIT_GOTO_TABLE
;

2036 i‡(
	`∑r£_èbÀ
(
s
, &(
i
->
èbÀ_id
))) {

2037 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÅabÀ i¿gŸÿö°ru˘i⁄: %s.", 
s
);

2039 (*
ö°
Ë(
oÊ_ö°ru˘i⁄_hódî
 *)
i
;

2042 (
OFPIT_WRITE_METADATA
): {

2043 *
tokí
, *
ßvïå
 = 
NULL
;

2044 
oÊ_ö°ru˘i⁄_wrôe_mëad©a
 *
i
 = 
	`xmÆloc
((ofl_instruction_write_metadata));

2045 
i
->
hódî
.
ty≥
 = 
OFPIT_WRITE_METADATA
;

2046 
tokí
 = 
	`°πok_r
(
s
, 
KEY_SEP
, &
ßvïå
);

2047 i‡(
	`ssˇnf
(
tokí
, "0x%"
SCNx64
"", &(
i
->
mëad©a
)) != 1) {

2048 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög mëad©®ö wrôêmëad©®ö°ru˘i⁄: %s.", 
s
);

2050 
tokí
 = 
	`°πok_r
(
NULL
, 
KEY_SEP
, &
ßvïå
);

2051 i‡(
tokí
 =
NULL
) {

2052 
i
->
mëad©a_mask
 = 0xffffffffffffffffULL;

2054 i‡(
	`ssˇnf
(
tokí
, "0x%"
SCNx64
"", &(
i
->
mëad©a_mask
)) != 1) {

2055 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög mëad©a_mask i¿wrôêmëad©®ö°ru˘i⁄: %s.", 
s
);

2058 (*
ö°
Ë(
oÊ_ö°ru˘i⁄_hódî
 *)
i
;

2061 (
OFPIT_WRITE_ACTIONS
): {

2062 
oÊ_ö°ru˘i⁄_a˘i⁄s
 *
i
 = 
	`xmÆloc
((ofl_instruction_actions));

2063 
i
->
hódî
.
ty≥
 = 
OFPIT_WRITE_ACTIONS
;

2064 
i
->
a˘i⁄s
 = 
NULL
;

2065 
i
->
a˘i⁄s_num
 = 0;

2066 
	`∑r£_a˘i⁄s
(
s
, &(
i
->
a˘i⁄s_num
), &(i->
a˘i⁄s
));

2067 (*
ö°
Ë(
oÊ_ö°ru˘i⁄_hódî
 *)
i
;

2070 (
OFPIT_APPLY_ACTIONS
): {

2071 
oÊ_ö°ru˘i⁄_a˘i⁄s
 *
i
 = 
	`xmÆloc
((ofl_instruction_actions));

2072 
i
->
hódî
.
ty≥
 = 
OFPIT_APPLY_ACTIONS
;

2073 
i
->
a˘i⁄s
 = 
NULL
;

2074 
i
->
a˘i⁄s_num
 = 0;

2075 
	`∑r£_a˘i⁄s
(
s
, &(
i
->
a˘i⁄s_num
), &(i->
a˘i⁄s
));

2076 (*
ö°
Ë(
oÊ_ö°ru˘i⁄_hódî
 *)
i
;

2079 (
OFPIT_METER
): {

2080 
oÊ_ö°ru˘i⁄_mëî
 *
i
 = 
	`xmÆloc
((ofl_instruction_meter));

2081 
i
->
hódî
.
ty≥
 = 
OFPIT_METER
;

2082 if(
	`∑r£32
(
s
, 
NULL
, 0, 
OFPM_MAX
 ,&
i
->
mëî_id
)){

2083 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög mëî in°ru˘i⁄: %s.", 
s
);

2085 (*
ö°
Ë(
oÊ_ö°ru˘i⁄_hódî
 *)
i
;

2088 (
OFPIT_CLEAR_ACTIONS
): {

2089 
oÊ_ö°ru˘i⁄_hódî
 *
i
 = 
	`xmÆloc
((ofl_instruction_header));

2090 
i
->
ty≥
 = 
OFPIT_CLEAR_ACTIONS
;

2091 (*
ö°
Ë(
oÊ_ö°ru˘i⁄_hódî
 *)
i
;

2097 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög in°ru˘i⁄: %s.", 
°r
);

2098 
	}
}

2102 
	$∑r£_Êow_°©_¨gs
(*
°r
, 
oÊ_msg_mu…ù¨t_ªque°_Êow
 *
ªq
) {

2103 *
tokí
, *
ßvïå
 = 
NULL
;

2105 
tokí
 = 
	`°πok_r
(
°r
, 
KEY_SEP
, &
ßvïå
);Åokí !
NULL
;Åoken = strtok_r(NULL, KEY_SEP, &saveptr)) {

2106 i‡(
	`°∫cmp
(
tokí
, 
FLOW_MOD_COOKIE
 
KEY_VAL
, 
	`°æí
(FLOW_MOD_COOKIE KEY_VAL)) == 0) {

2107 i‡(
	`ssˇnf
(
tokí
, 
FLOW_MOD_COOKIE
 
KEY_VAL
 "0x%"
SCNx64
"", &(
ªq
->
cookõ
)) != 1) {

2108 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög flow_°© cookõ: %s.", 
tokí
);

2112 i‡(
	`°∫cmp
(
tokí
, 
FLOW_MOD_COOKIE_MASK
 
KEY_VAL
, 
	`°æí
(FLOW_MOD_COOKIE_MASK KEY_VAL)) == 0) {

2113 i‡(
	`ssˇnf
(
tokí
, 
FLOW_MOD_COOKIE
 
KEY_VAL
 "0x%"
SCNx64
"", &(
ªq
->
cookõ
)) != 1) {

2114 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög flow_°© cookõ mask: %s.", 
tokí
);

2118 i‡(
	`°∫cmp
(
tokí
, 
FLOW_MOD_TABLE_ID
 
KEY_VAL
, 
	`°æí
(FLOW_MOD_TABLE_ID KEY_VAL)) == 0) {

2119 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
FLOW_MOD_TABLE_ID
 
KEY_VAL
), 
èbÀ_«mes
, 
	`NUM_ELEMS
—abÀ_«mes), 254, &
ªq
->
èbÀ_id
)) {

2120 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög flow_°©ÅabÀ: %s.", 
tokí
);

2124 i‡(
	`°∫cmp
(
tokí
, 
FLOW_MOD_OUT_PORT
 
KEY_VAL
, 
	`°æí
(FLOW_MOD_OUT_PORT KEY_VAL)) == 0) {

2125 i‡(
	`∑r£_p‹t
(
tokí
 + 
	`°æí
(
FLOW_MOD_OUT_PORT
 
KEY_VAL
), &
ªq
->
out_p‹t
)) {

2126 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög flow_°©Ö‹t: %s.", 
tokí
);

2130 i‡(
	`°∫cmp
(
tokí
, 
FLOW_MOD_OUT_GROUP
 
KEY_VAL
, 
	`°æí
(FLOW_MOD_OUT_GROUP KEY_VAL)) == 0) {

2131 i‡(
	`∑r£_group
(
tokí
 + 
	`°æí
(
FLOW_MOD_OUT_GROUP
 
KEY_VAL
), &
ªq
->
out_p‹t
)) {

2132 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög flow_°© group: %s.", 
tokí
);

2136 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög flow_°©árg: %s.", 
tokí
);

2138 
	}
}

2143 
	$∑r£_Êow_mod_¨gs
(*
°r
, 
oÊ_msg_Êow_mod
 *
ªq
) {

2144 *
tokí
, *
ßvïå
 = 
NULL
;

2146 
tokí
 = 
	`°πok_r
(
°r
, 
KEY_SEP
, &
ßvïå
);Åokí !
NULL
;Åoken = strtok_r(NULL, KEY_SEP, &saveptr)) {

2147 i‡(
	`°∫cmp
(
tokí
, 
FLOW_MOD_COMMAND
 
KEY_VAL
, 
	`°æí
(FLOW_MOD_COMMAND KEY_VAL)) == 0) {

2148 
uöt8_t
 
comm™d
;

2149 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
FLOW_MOD_COMMAND
 
KEY_VAL
), 
Êow_mod_cmd_«mes
, 
	`NUM_ELEMS
(Êow_mod_cmd_«mes),0, &
comm™d
)) {

2150 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög flow_mod comm™d: %s.", 
tokí
);

2152 
ªq
->
comm™d
 = command;

2155 i‡(
	`°∫cmp
(
tokí
, 
FLOW_MOD_COOKIE
 
KEY_VAL
, 
	`°æí
(FLOW_MOD_COOKIE KEY_VAL)) == 0) {

2156 i‡(
	`ssˇnf
(
tokí
, 
FLOW_MOD_COOKIE
 
KEY_VAL
 "0x%"
SCNx64
"", &(
ªq
->
cookõ
)) != 1) {

2157 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög flow_mod cookõ: %s.", 
tokí
);

2161 i‡(
	`°∫cmp
(
tokí
, 
FLOW_MOD_COOKIE_MASK
 
KEY_VAL
, 
	`°æí
(FLOW_MOD_COOKIE_MASK KEY_VAL)) == 0) {

2162 i‡(
	`ssˇnf
(
tokí
, 
FLOW_MOD_COOKIE
 
KEY_VAL
 "0x%"
SCNx64
"", &(
ªq
->
cookõ
)) != 1) {

2163 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög flow_mod cookõ mask: %s.", 
tokí
);

2167 i‡(
	`°∫cmp
(
tokí
, 
FLOW_MOD_TABLE_ID
 
KEY_VAL
, 
	`°æí
(FLOW_MOD_TABLE_ID KEY_VAL)) == 0) {

2168 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
FLOW_MOD_TABLE_ID
 
KEY_VAL
), 
èbÀ_«mes
, 
	`NUM_ELEMS
—abÀ_«mes), 254, &
ªq
->
èbÀ_id
)) {

2169 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög flow_modÅabÀ: %s.", 
tokí
);

2173 i‡(
	`°∫cmp
(
tokí
, 
FLOW_MOD_IDLE
 
KEY_VAL
, 
	`°æí
(FLOW_MOD_IDLE KEY_VAL)) == 0) {

2174 i‡(
	`ssˇnf
(
tokí
, 
FLOW_MOD_IDLE
 
KEY_VAL
 "%"
SCNu16
"", &(
ªq
->
idÀ_timeout
)) != 1) {

2175 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög %s: %s.", 
FLOW_MOD_IDLE
, 
tokí
);

2179 i‡(
	`°∫cmp
(
tokí
, 
FLOW_MOD_HARD
 
KEY_VAL
, 
	`°æí
(FLOW_MOD_HARD KEY_VAL)) == 0) {

2180 i‡(
	`ssˇnf
(
tokí
, 
FLOW_MOD_HARD
 
KEY_VAL
 "%"
SCNu16
"", &(
ªq
->
h¨d_timeout
)) != 1) {

2181 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög %s: %s.", 
FLOW_MOD_HARD
, 
tokí
);

2185 i‡(
	`°∫cmp
(
tokí
, 
FLOW_MOD_PRIO
 
KEY_VAL
, 
	`°æí
(FLOW_MOD_PRIO KEY_VAL)) == 0) {

2186 i‡(
	`ssˇnf
(
tokí
, 
FLOW_MOD_PRIO
 
KEY_VAL
 "%"
SCNu16
"", &(
ªq
->
¥i‹ôy
)) != 1) {

2187 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög %s: %s.", 
FLOW_MOD_PRIO
, 
tokí
);

2191 i‡(
	`°∫cmp
(
tokí
, 
FLOW_MOD_BUFFER
 
KEY_VAL
, 
	`°æí
(FLOW_MOD_BUFFER KEY_VAL)) == 0) {

2192 i‡(
	`∑r£32
(
tokí
 + 
	`°æí
(
FLOW_MOD_BUFFER
 
KEY_VAL
), 
buf„r_«mes
, 
	`NUM_ELEMS
(buf„r_«mes), 
UINT32_MAX
, &
ªq
->
buf„r_id
)) {

2193 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög flow_mod buf„r: %s.", 
tokí
);

2197 i‡(
	`°∫cmp
(
tokí
, 
FLOW_MOD_OUT_PORT
 
KEY_VAL
, 
	`°æí
(FLOW_MOD_OUT_PORT KEY_VAL)) == 0) {

2198 i‡(
	`∑r£_p‹t
(
tokí
 + 
	`°æí
(
FLOW_MOD_OUT_PORT
 
KEY_VAL
), &
ªq
->
out_p‹t
)) {

2199 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög flow_modÖ‹t: %s.", 
tokí
);

2203 i‡(
	`°∫cmp
(
tokí
, 
FLOW_MOD_OUT_GROUP
 
KEY_VAL
, 
	`°æí
(FLOW_MOD_OUT_GROUP KEY_VAL)) == 0) {

2204 i‡(
	`∑r£_group
(
tokí
 + 
	`°æí
(
FLOW_MOD_OUT_GROUP
 
KEY_VAL
), &
ªq
->
out_p‹t
)) {

2205 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög flow_mod group: %s.", 
tokí
);

2209 i‡(
	`°∫cmp
(
tokí
, 
FLOW_MOD_FLAGS
 
KEY_VAL
, 
	`°æí
(FLOW_MOD_FLAGS KEY_VAL)) == 0) {

2210 i‡(
	`ssˇnf
(
tokí
, 
FLOW_MOD_FLAGS
 
KEY_VAL
 "0x%"
SCNx16
"", &(
ªq
->
Êags
)) != 1) {

2211 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög %s: %s.", 
FLOW_MOD_FLAGS
, 
tokí
);

2215 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög flow_modárg: %s.", 
tokí
);

2217 
	}
}

2220 
	$∑r£_group_mod_¨gs
(*
°r
, 
oÊ_msg_group_mod
 *
ªq
) {

2221 *
tokí
, *
ßvïå
 = 
NULL
;

2223 
tokí
 = 
	`°πok_r
(
°r
, 
KEY_SEP
, &
ßvïå
);Åokí !
NULL
;Åoken = strtok_r(NULL, KEY_SEP, &saveptr)) {

2224 i‡(
	`°∫cmp
(
tokí
, 
GROUP_MOD_COMMAND
 
KEY_VAL
, 
	`°æí
(GROUP_MOD_COMMAND KEY_VAL)) == 0) {

2225 
uöt16_t
 
comm™d
;

2226 i‡(
	`∑r£16
(
tokí
 + 
	`°æí
(
GROUP_MOD_COMMAND
 
KEY_VAL
), 
group_mod_cmd_«mes
, 
	`NUM_ELEMS
(group_mod_cmd_«mes),0, &
comm™d
)) {

2227 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög group_mod comm™d: %s.", 
tokí
);

2229 
ªq
->
comm™d
 = command;

2232 i‡(
	`°∫cmp
(
tokí
, 
GROUP_MOD_GROUP
 
KEY_VAL
, 
	`°æí
(GROUP_MOD_GROUP KEY_VAL)) == 0) {

2233 i‡(
	`∑r£_group
(
tokí
 + 
	`°æí
(
GROUP_MOD_GROUP
 
KEY_VAL
), &
ªq
->
group_id
)) {

2234 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög group_mod group: %s.", 
tokí
);

2238 i‡(
	`°∫cmp
(
tokí
, 
GROUP_MOD_TYPE
 
KEY_VAL
, 
	`°æí
(GROUP_MOD_TYPE KEY_VAL)) == 0) {

2239 
uöt8_t
 
ty≥
;

2240 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
GROUP_MOD_TYPE
 
KEY_VAL
), 
group_ty≥_«mes
, 
	`NUM_ELEMS
(group_ty≥_«mes), 
UINT8_MAX
, &
ty≥
)) {

2241 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög group_modÅy≥: %s.", 
tokí
);

2243 
ªq
->
ty≥
 =Åype;

2246 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög group_modárg: %s.", 
tokí
);

2248 
	}
}

2251 
	$∑r£_buckë
(*
°r
, 
oÊ_buckë
 *
b
) {

2252 *
tokí
, *
ßvïå
 = 
NULL
;

2254 
tokí
 = 
	`°πok_r
(
°r
, 
KEY_SEP
, &
ßvïå
);Åokí !
NULL
;Åoken = strtok_r(NULL, KEY_SEP, &saveptr)) {

2255 i‡(
	`°∫cmp
(
tokí
, 
BUCKET_WEIGHT
 
KEY_VAL
, 
	`°æí
(BUCKET_WEIGHT KEY_VAL)) == 0) {

2256 i‡(
	`∑r£16
(
tokí
 + 
	`°æí
(
BUCKET_WEIGHT
 
KEY_VAL
), 
NULL
, 0, 
UINT16_MAX
, &
b
->
weight
)) {

2257 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög buckë_weight: %s.", 
tokí
);

2261 i‡(
	`°∫cmp
(
tokí
, 
BUCKET_WATCH_PORT
 
KEY_VAL
, 
	`°æí
(BUCKET_WATCH_PORT KEY_VAL)) == 0) {

2262 i‡(
	`∑r£_p‹t
(
tokí
 + 
	`°æí
(
BUCKET_WATCH_PORT
 
KEY_VAL
), &
b
->
w©ch_p‹t
)) {

2263 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög buckë w©chÖ‹t: %s.", 
tokí
);

2267 i‡(
	`°∫cmp
(
tokí
, 
BUCKET_WATCH_GROUP
 
KEY_VAL
, 
	`°æí
(BUCKET_WATCH_GROUP KEY_VAL)) == 0) {

2268 i‡(
	`∑r£_group
(
tokí
 + 
	`°æí
(
BUCKET_WATCH_GROUP
 
KEY_VAL
), &
b
->
w©ch_group
)) {

2269 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög buckë w©ch group: %s.", 
tokí
);

2273 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög buckëárg: %s.", 
tokí
);

2275 
	}
}

2278 
	$∑r£_mëî_mod_¨gs
(*
°r
, 
oÊ_msg_mëî_mod
 *
ªq
){

2279 *
tokí
, *
ßvïå
 = 
NULL
;

2281 
tokí
 = 
	`°πok_r
(
°r
, 
KEY_SEP
, &
ßvïå
);Åokí !
NULL
;Åoken = strtok_r(NULL, KEY_SEP, &saveptr)) {

2282 i‡(
	`°∫cmp
(
tokí
, 
METER_MOD_COMMAND
 
KEY_VAL
, 
	`°æí
(METER_MOD_COMMAND KEY_VAL)) == 0) {

2283 
uöt16_t
 
comm™d
;

2284 i‡(
	`∑r£16
(
tokí
 + 
	`°æí
(
METER_MOD_COMMAND
 
KEY_VAL
), 
mëî_mod_cmd_«mes
, 
	`NUM_ELEMS
(mëî_mod_cmd_«mes),0, &
comm™d
)) {

2285 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög mëî_mod comm™d: %s.", 
tokí
);

2287 
ªq
->
comm™d
 = command;

2290 i‡(
	`°∫cmp
(
tokí
, 
METER_MOD_FLAGS
 
KEY_VAL
, 
	`°æí
(METER_MOD_FLAGS KEY_VAL)) == 0) {

2291 i‡(
	`∑r£16
(
tokí
 + 
	`°æí
(
METER_MOD_FLAGS
 
KEY_VAL
), 
NULL
, 0, 0xffff, &
ªq
->
Êags
)) {

2292 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög mëî_mod fœgs: %s.", 
tokí
);

2296 i‡(
	`°∫cmp
(
tokí
, 
METER_MOD_METER
 
KEY_VAL
, 
	`°æí
(METER_MOD_METER KEY_VAL)) == 0) {

2297 
uöt32_t
 
mëî_id
;

2298 i‡(
	`∑r£32
(
tokí
 + 
	`°æí
(
METER_MOD_METER
 
KEY_VAL
), 
NULL
, 0, 1024, &
mëî_id
)) {

2299 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög mëî_mod id: %s.", 
tokí
);

2301 
ªq
->
mëî_id
 = meter_id;

2304 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög group_modárg: %s.", 
tokí
);

2307 
	}
}

2310 
	$∑r£_b™d_¨gs
(*
°r
, 
oÊ_msg_mëî_mod
 *
m
, 
oÊ_mëî_b™d_hódî
 *
b
){

2311 *
tokí
, *
ßvïå
 = 
NULL
;

2312 
tokí
 = 
	`°πok_r
(
°r
, 
KEY_SEP
, &
ßvïå
);Åokí !
NULL
;Åoken = strtok_r(NULL, KEY_SEP, &saveptr)) {

2313 i‡(
	`°∫cmp
(
tokí
, 
BAND_RATE
 
KEY_VAL
, 
	`°æí
(BAND_RATE KEY_VAL)) == 0) {

2314 i‡(
	`∑r£32
(
tokí
 + 
	`°æí
(
BAND_RATE
 
KEY_VAL
), 
NULL
, 0, 
UINT32_MAX
, &
b
->
øã
)) {

2315 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög b™dÑ©e: %s.", 
tokí
);

2319 i‡(
	`°∫cmp
(
tokí
, 
BAND_BURST_SIZE
 
KEY_VAL
, 
	`°æí
(BAND_BURST_SIZE KEY_VAL)) == 0) {

2320 if(
m
->
Êags
 & 
OFPMF_BURST
){

2321 i‡(
	`∑r£32
(
tokí
 + 
	`°æí
(
BAND_BURST_SIZE
 
KEY_VAL
), 
NULL
, 0, 
UINT32_MAX
, &
b
->
bur°_size
)) {

2322 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög b™d bur°_size: %s.", 
tokí
);

2326 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög bur° size. Mëî fœg†should c⁄èö %x.", 
OFPMF_BURST
);

2328 i‡(
	`°∫cmp
(
tokí
, 
BAND_PREC_LEVEL
 
KEY_VAL
, 
	`°æí
(BAND_PREC_LEVEL KEY_VAL)) == 0) {

2329 
oÊ_mëî_b™d_ds˝_ªm¨k
 *
d
 = (oÊ_mëî_b™d_ds˝_ªm¨k*Ë
b
;

2330 i‡(
	`∑r£8
(
tokí
 + 
	`°æí
(
BAND_PREC_LEVEL
 
KEY_VAL
), 
NULL
, 0, 
UINT8_MAX
, &
d
->
¥ec_Àvñ
)) {

2331 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög b™dÑ©e: %s.", 
tokí
);

2335 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög b™dárg: %s.", 
tokí
);

2337 
	}
}

2340 
	$∑r£_b™d
(*
°r
, 
oÊ_msg_mëî_mod
 *
m
, 
oÊ_mëî_b™d_hódî
 **
b
){

2341 *
s
;

2342 
size_t
 
i
;

2343 
i
=0; i<
	`NUM_ELEMS
(
b™d_«mes
); i++) {

2345 i‡(
	`°∫cmp
(
°r
, 
b™d_«mes
[
i
].
«me
, 
	`°æí
(band_names[i].name)) == 0) {

2346 
s
 = 
°r
 + 
	`°æí
(
b™d_«mes
[
i
].
«me
);

2348 i‡(
	`°∫cmp
(
s
, 
KEY_VAL2
, 
	`°æí
(KEY_VAL2)) != 0) {

2349 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög mëî b™d: %s.", 
°r
);

2352 
s
+
	`°æí
(
KEY_VAL2
);

2353 
b™d_«mes
[
i
].
code
){

2354 (
OFPMBT_DROP
):{

2355 
oÊ_mëî_b™d_dr›
 *
d
 = (oÊ_mëî_b™d_dr›*Ë
	`xmÆloc
((ofl_meter_band_drop));

2356 
d
->
ty≥
 = 
OFPMBT_DROP
;

2357 
d
->
øã
 = 0;

2358 
d
->
bur°_size
 = 0;

2359 
	`∑r£_b™d_¨gs
(
s
, 
m
, (
oÊ_mëî_b™d_hódî
*)
d
);

2360 *
b
 = (
oÊ_mëî_b™d_hódî
*Ë
d
;

2363 (
OFPMBT_DSCP_REMARK
):{

2364 
oÊ_mëî_b™d_ds˝_ªm¨k
 *
d
 = (oÊ_mëî_b™d_ds˝_ªm¨k*Ë
	`xmÆloc
((ofl_meter_band_dscp_remark));

2365 
d
->
ty≥
 = 
OFPMBT_DSCP_REMARK
;

2366 
d
->
øã
 = 0;

2367 
d
->
bur°_size
 = 0;

2368 
d
->
¥ec_Àvñ
 = 0;

2369 
	`∑r£_b™d_¨gs
(
s
, 
m
, (
oÊ_mëî_b™d_hódî
*)
d
);

2370 *
b
 = (
oÊ_mëî_b™d_hódî
*Ë
d
;

2376 
	}
}

2380 
	$∑r£_c⁄fig
(*
°r
, 
oÊ_c⁄fig
 *
c
) {

2381 *
tokí
, *
ßvïå
 = 
NULL
;

2383 
tokí
 = 
	`°πok_r
(
°r
, 
KEY_SEP
, &
ßvïå
);Åokí !
NULL
;Åoken = strtok_r(NULL, KEY_SEP, &saveptr)) {

2384 i‡(
	`°∫cmp
(
tokí
, 
CONFIG_FLAGS
 
KEY_VAL
, 
	`°æí
(CONFIG_FLAGS KEY_VAL)) == 0) {

2385 i‡(
	`ssˇnf
(
tokí
 + 
	`°æí
(
CONFIG_FLAGS
 
KEY_VAL
), "0x%"
SCNx16
"", &
c
->
Êags
) != 1) {

2386 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög c⁄fig fœgs: %s.", 
tokí
);

2390 i‡(
	`°∫cmp
(
tokí
, 
CONFIG_MISS
 
KEY_VAL
, 
	`°æí
(CONFIG_MISS KEY_VAL)) == 0) {

2391 i‡(
	`∑r£16
(
tokí
 + 
	`°æí
(
CONFIG_MISS
 
KEY_VAL
), 
NULL
, 0, 
UINT16_MAX
 - (
oÂ_∑ckë_ö
), &
c
->
miss_£nd_Àn
)) {

2392 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög c⁄fig mis†£ndÜí: %s.", 
tokí
);

2396 
	`oÂ_Áèl
(0, "Eº‹Ö¨sög c⁄figárg: %s.", 
tokí
);

2398 
	}
}

2401 
	$∑r£_p‹t_mod
(*
°r
, 
oÊ_msg_p‹t_mod
 *
msg
) {

2402 *
tokí
, *
ßvïå
 = 
NULL
;

2404 
tokí
 = 
	`°πok_r
(
°r
, 
KEY_SEP
, &
ßvïå
);Åokí !
NULL
;Åoken = strtok_r(NULL, KEY_SEP, &saveptr)) {

2405 i‡(
	`°∫cmp
(
tokí
, 
PORT_MOD_PORT
 
KEY_VAL
, 
	`°æí
(PORT_MOD_PORT KEY_VAL)) == 0) {

2406 i‡(
	`∑r£_p‹t
(
tokí
 + 
	`°æí
(
PORT_MOD_PORT
 
KEY_VAL
), &
msg
->
p‹t_no
)) {

2407 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÖ‹t_modÖ‹t: %s.", 
tokí
);

2411 i‡(
	`°∫cmp
(
tokí
, 
PORT_MOD_HW_ADDR
 
KEY_VAL
, 
	`°æí
(PORT_MOD_HW_ADDR KEY_VAL)) == 0) {

2412 
uöt8_t
 *
mask
 = 
NULL
;

2413 i‡(
	`∑r£_dl_addr
(
tokí
 + 
	`°æí
(
PORT_MOD_HW_ADDR
 
KEY_VAL
), 
msg
->
hw_addr
, &
mask
)) {

2414 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÖ‹t_mod hw_addr: %s.", 
tokí
);

2418 i‡(
	`°∫cmp
(
tokí
, 
PORT_MOD_HW_CONFIG
 
KEY_VAL
, 
	`°æí
(PORT_MOD_HW_CONFIG KEY_VAL)) == 0) {

2419 i‡(
	`ssˇnf
(
tokí
 + 
	`°æí
(
PORT_MOD_HW_CONFIG
 
KEY_VAL
), "0x%"
SCNx32
"", &
msg
->
c⁄fig
) != 1) {

2420 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÖ‹t_mod c⁄f: %s.", 
tokí
);

2424 i‡(
	`°∫cmp
(
tokí
, 
PORT_MOD_MASK
 
KEY_VAL
, 
	`°æí
(PORT_MOD_MASK KEY_VAL)) == 0) {

2425 i‡(
	`ssˇnf
(
tokí
 + 
	`°æí
(
PORT_MOD_MASK
 
KEY_VAL
), "0x%"
SCNx32
"", &
msg
->
mask
) != 1) {

2426 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÖ‹t_mod mask: %s.", 
tokí
);

2430 i‡(
	`°∫cmp
(
tokí
, 
PORT_MOD_ADVERTISE
 
KEY_VAL
, 
	`°æí
(PORT_MOD_ADVERTISE KEY_VAL)) == 0) {

2431 i‡(
	`ssˇnf
(
tokí
 + 
	`°æí
(
PORT_MOD_ADVERTISE
 
KEY_VAL
), "0x%"
SCNx32
"", &
msg
->
advîti£
) != 1) {

2432 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÖ‹t_modádvîti£: %s.", 
tokí
);

2436 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÖ‹t_modárg: %s.", 
tokí
);

2438 
	}
}

2442 
	$∑r£_èbÀ_mod
(*
°r
, 
oÊ_msg_èbÀ_mod
 *
msg
) {

2443 *
tokí
, *
ßvïå
 = 
NULL
;

2445 
tokí
 = 
	`°πok_r
(
°r
, 
KEY_SEP
, &
ßvïå
);Åokí !
NULL
;Åoken = strtok_r(NULL, KEY_SEP, &saveptr)) {

2446 i‡(
	`°∫cmp
(
tokí
, 
TABLE_MOD_TABLE
 
KEY_VAL
, 
	`°æí
(TABLE_MOD_TABLE KEY_VAL)) == 0) {

2447 i‡(
	`∑r£_èbÀ
(
tokí
 + 
	`°æí
(
TABLE_MOD_TABLE
 
KEY_VAL
), &
msg
->
èbÀ_id
)) {

2448 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÅabÀ_modÅabÀ: %s.", 
tokí
);

2452 i‡(
	`°∫cmp
(
tokí
, 
TABLE_MOD_CONFIG
 
KEY_VAL
, 
	`°æí
(TABLE_MOD_CONFIG KEY_VAL)) == 0) {

2453 i‡(
	`ssˇnf
(
tokí
 + 
	`°æí
(
TABLE_MOD_CONFIG
 
KEY_VAL
), "0x%"
SCNx32
"", &
msg
->
c⁄fig
) != 1) {

2454 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÅabÀ_mod c⁄f: %s.", 
tokí
);

2458 
	`oÂ_Áèl
(0, "Eº‹Ö¨sögÅabÀ_modárg: %s.", 
tokí
);

2460 
	}
}

2464 
	$∑r£_p‹t
(*
°r
, 
uöt32_t
 *
p‹t
) {

2465  
	`∑r£32
(
°r
, 
p‹t_«mes
, 
	`NUM_ELEMS
’‹t_«mes), 
OFPP_MAX
, 
p‹t
);

2466 
	}
}

2469 
	$∑r£_queue
(*
°r
, 
uöt32_t
 *
p‹t
) {

2470  
	`∑r£32
(
°r
, 
queue_«mes
, 
	`NUM_ELEMS
(queue_«mes), 0xffffff„, 
p‹t
);

2471 
	}
}

2474 
	$∑r£_group
(*
°r
, 
uöt32_t
 *
group
) {

2475  
	`∑r£32
(
°r
, 
group_«mes
, 
	`NUM_ELEMS
(group_«mes), 
OFPG_MAX
, 
group
);

2476 
	}
}

2479 
	$∑r£_mëî
(*
°r
, 
uöt32_t
 *
mëî
) {

2480  
	`∑r£32
(
°r
, 
NULL
, 0, 
OFPM_MAX
, 
mëî
);

2481 
	}
}

2484 
	$∑r£_èbÀ
(*
°r
, 
uöt8_t
 *
èbÀ
) {

2485  
	`∑r£8
(
°r
, 
èbÀ_«mes
, 
	`NUM_ELEMS
—abÀ_«mes), 0x„, 
èbÀ
);

2486 
	}
}

2489 
	$∑r£_dl_addr
(*
°r
, 
uöt8_t
 *
addr
, uöt8_à**
mask
) {

2490 *
ßvïå
 = 
NULL
;

2491 i‡(
	`ssˇnf
(
°r
, "%"
SCNx8
":%"SCNx8":%"SCNx8":%"SCNx8":%"SCNx8":%"SCNx8,

2492 
addr
,áddr+1,áddr+2,áddr+3,áddr+4,áddr+5) != 6){

2495 
	`°πok_r
(
°r
, 
MASK_SEP
, &
ßvïå
);

2497 if(
	`°rcmp
(
ßvïå
,"") == 0){

2498 *
mask
 = 
NULL
;

2502 *
mask
 = (
uöt8_t
*Ë
	`mÆloc
 ((
OFP_ETH_ALEN
));

2503 i‡(
	`ssˇnf
(
ßvïå
, "%"
SCNx8
":%"SCNx8":%"SCNx8":%"SCNx8":%"SCNx8":%"SCNx8,

2504 *
mask
, *mask+1, *mask+2, *mask+3, *mask+4, *mask+5) != 6){

2509 
	}
}

2512 
	$∑r£_nw_addr
(*
°r
, 
uöt32_t
 *
addr
, uöt32_à**
mask
) {

2514 
uöt8_t
 
a
[4],
b
[4];

2515 
uöt32_t
 
√tmask
;

2516 *
ßvïå
 = 
NULL
;

2518 i‡(
	`ssˇnf
(
°r
, "%"
SCNu8
".%"SCNu8".%"SCNu8".%"SCNu8,

2519 &
a
[0], &a[1], &a[2], &a[3]) == 4) {

2520 *
addr
 = (
a
[3] << 24) | (a[2] << 16) | (a[1] << 8) |á[0];

2525 
	`°πok_r
(
°r
, 
MASK_SEP
, &
ßvïå
);

2526 if(
	`°rcmp
(
ßvïå
,"") == 0){

2527 *
mask
 = 
NULL
;

2530 *
mask
 = (
uöt32_t
*Ë
	`mÆloc
((uint32_t));

2531 
√tmask
 = 0xffffffff;

2532 if(
	`°æí
(
ßvïå
) <= 2){

2534 
uöt8_t
 
sub√t_mask
;

2535 
	`ssˇnf
(
ßvïå
, "%"
SCNu8
"",

2536 &
sub√t_mask
);

2537 i‡(
sub√t_mask
 > 32)

2539 i‡(
sub√t_mask
 == 0)

2540 
√tmask
 = 0x00000000;

2541 
√tmask
 =Çëmask << (32 - 
sub√t_mask
);

2542 **
mask
 = 
	`ht⁄l
(
√tmask
);

2546 i‡(
	`ssˇnf
(
ßvïå
, "%"
SCNu8
".%"SCNu8".%"SCNu8".%"SCNu8,

2547 &
b
[0], &b[1], &b[2], &b[3]) == 4) {

2548 **
mask
 = (
b
[3] << 24) | (b[2] << 16) | (b[1] << 8) | b[0];

2556 
	}
}

2559 
	$∑r£_vœn_vid
(*
°r
, 
uöt16_t
 *
vid
) {

2560  
	`∑r£16
(
°r
, 
vœn_vid_«mes
, 
	`NUM_ELEMS
(vœn_vid_«mes), 0xfff, 
vid
);

2561 
	}
}

2564 
	$∑r£_ext_hdr
(*
°r
, 
uöt16_t
 *
ext_hdr
){

2565 *
tokí
, *
ßvïå
 = 
NULL
;

2566 
size_t
 
i
;

2567 
	`mem£t
(
ext_hdr
, 0x0, (
uöt16_t
));

2568 
tokí
 = 
	`°πok_r
(
°r
, 
ADD
, &
ßvïå
);Åokí !
NULL
;Åoken = strtok_r(NULL, ADD, &saveptr)) {

2569 
i
=0; i < 9; i++) {

2570 i‡(
	`°rcmp
(
tokí
, 
ext_hódî_«mes
[
i
].
«me
) == 0) {

2571 *
ext_hdr
 = *ext_hd∏^ 
ext_hódî_«mes
[
i
].
code
;

2575 if(
i
 == 9)

2579 
	}
}

2582 
	$∑r£8
(*
°r
, 
«mes8
 *
«mes
, 
size_t
 
«mes_num
, 
uöt8_t
 
max
, uöt8_à*
vÆ
) {

2583 
size_t
 
i
;

2585 
i
=0; i<
«mes_num
; i++) {

2586 i‡(
	`°rcmp
(
°r
, 
«mes
[
i
].
«me
) == 0) {

2587 *
vÆ
 = 
«mes
[
i
].
code
;

2592 i‡((
max
 > 0Ë&& (
	`ssˇnf
(
°r
, "%"
SCNu8
"", 
vÆ
)) == 1 && ((*val) <= max)) {

2596 
	}
}

2599 
	$∑r£16
(*
°r
, 
«mes16
 *
«mes
, 
size_t
 
«mes_num
, 
uöt16_t
 
max
, uöt16_à*
vÆ
) {

2600 
size_t
 
i
;

2602 
i
=0; i<
«mes_num
; i++) {

2603 i‡(
	`°rcmp
(
°r
, 
«mes
[
i
].
«me
) == 0) {

2604 *
vÆ
 = 
«mes
[
i
].
code
;

2610 if–
°r
[1] == 'x'){

2611 i‡((
max
 > 0Ë&& (
	`ssˇnf
(
°r
, "%"
SCNx16
"", 
vÆ
)) == 1 && (*val <= max)) {

2616 i‡((
max
 > 0Ë&& (
	`ssˇnf
(
°r
, "%"
SCNu16
"", 
vÆ
)) == 1 && (*val <= max)) {

2621 
	}
}

2624 
	$∑r£16m
(*
°r
, 
«mes16
 *
«mes
, 
size_t
 
«mes_num
, 
uöt16_t
 
max
, uöt16_à*
vÆ
, uöt16_à*
mask
){

2626 
size_t
 
i
;

2627 *
tokí
, *
ßvïå
 = 
NULL
;

2629 
i
=0; i<
«mes_num
; i++) {

2630 i‡(
	`°rcmp
(
°r
, 
«mes
[
i
].
«me
) == 0) {

2631 *
vÆ
 = 
«mes
[
i
].
code
;

2635 i‡((
max
 > 0Ë&& (*
vÆ
 <= max)) {

2636 i‡(!
	`ssˇnf
(
°r
, "%"
SCNu16
"", 
vÆ
))

2640 
tokí
 = 
	`°πok_r
(
°r
, 
MASK_SEP
, &
ßvïå
);

2641 if(
tokí
 =
NULL
)

2642 
mask
 = 
NULL
;

2644 
mask
 = (
uöt16_t
*Ë
	`mÆloc
((uint16_t));

2645 
	`ssˇnf
(
tokí
, "%"
SCNu16
"", 
mask
);

2649 
	}
}

2652 
	$∑r£32
(*
°r
, 
«mes32
 *
«mes
, 
size_t
 
«mes_num
, 
uöt32_t
 
max
, uöt32_à*
vÆ
) {

2653 
size_t
 
i
;

2655 
i
=0; i<
«mes_num
; i++) {

2656 i‡(
	`°rcmp
(
°r
, 
«mes
[
i
].
«me
) == 0) {

2657 *
vÆ
 = 
«mes
[
i
].
code
;

2662 i‡((
max
 > 0Ë&& (
	`ssˇnf
(
°r
, "%"
SCNu32
"", 
vÆ
)) == 1 && ((*val) <= max)) {

2666 
	}
}

2669 
	$∑r£32m
(*
°r
, 
«mes32
 *
«mes
, 
size_t
 
«mes_num
, 
uöt32_t
 
max
, uöt32_à*
vÆ
, uöt32_à**
mask
){

2671 
size_t
 
i
;

2672 *
ßvïå
 = 
NULL
;

2674 
i
=0; i<
«mes_num
; i++) {

2675 i‡(
	`°rcmp
(
°r
, 
«mes
[
i
].
«me
) == 0) {

2676 *
vÆ
 = 
«mes
[
i
].
code
;

2680 i‡((
max
 > 0Ë&& (*
vÆ
 <= max)) {

2681 i‡(!
	`ssˇnf
(
°r
, "%"
SCNu32
"", 
vÆ
))

2685 
	`°πok_r
(
°r
, 
MASK_SEP
, &
ßvïå
);

2687 if(
ßvïå
 =
NULL
)

2688 *
mask
 = 
NULL
;

2690 *
mask
 = (
uöt32_t
*Ë
	`mÆloc
((uint32_t));

2691 
	`ssˇnf
(
ßvïå
, "%"
SCNu32
"", *
mask
);

2694 
	}
}

	@utilities/dpctl.h

32 #i‚de‡
DPCTL_H


33 
	#DPCTL_H
 1

	)

35 
	~"›íÊow/›íÊow.h
"

37 
	s«mes8
 {

38 
uöt8_t
 
	mcode
;

39 *
	m«me
;

42 
	s«mes16
 {

43 
uöt16_t
 
	mcode
;

44 *
	m«me
;

47 
	s«mes32
 {

48 
uöt32_t
 
	mcode
;

49 *
	m«me
;

54 
«mes32
 
	gp‹t_«mes
[] = {

55 {
OFPP_IN_PORT
, "in_port"},

56 {
OFPP_TABLE
, "table"},

57 {
OFPP_NORMAL
, "normal"},

58 {
OFPP_FLOOD
, "flood"},

59 {
OFPP_ALL
, "all"},

60 {
OFPP_CONTROLLER
, "ctrl"},

61 {
OFPP_LOCAL
, "local"},

62 {
OFPP_ANY
, "any"}

65 
«mes32
 
	gqueue_«mes
[] = {

66 {
OFPQ_ALL
, "all"}

69 
«mes32
 
	ggroup_«mes
[] = {

70 {
OFPG_ALL
, "all"},

71 {
OFPG_ANY
, "any"}

74 
«mes16
 
	gext_hódî_«mes
[] = {

75 {
OFPIEH_NONEXT
, "no_next"},

76 {
OFPIEH_ESP
, "esp"},

77 {
OFPIEH_AUTH
, "auth"},

78 {
OFPIEH_DEST
, "dest"},

79 {
OFPIEH_FRAG
, "frag"},

80 {
OFPIEH_ROUTER
, "router"},

81 {
OFPIEH_HOP
, "hop"},

82 {
OFPIEH_UNREP
, "unrep"},

83 {
OFPIEH_UNSEQ
, "unseq"}

86 
«mes8
 
	ggroup_ty≥_«mes
[] = {

87 {
OFPGT_ALL
, "all"},

88 {
OFPGT_SELECT
, "sel"},

89 {
OFPGT_INDIRECT
, "ind"},

90 {
OFPGT_FF
, "ff"}

93 
«mes16
 
	ggroup_mod_cmd_«mes
[] = {

94 {
OFPGC_ADD
, "add"},

95 {
OFPGC_MODIFY
, "mod"},

96 {
OFPGC_DELETE
, "del"}

99 
«mes16
 
	gmëî_mod_cmd_«mes
[] = {

100 {
OFPMC_ADD
, "add"},

101 {
OFPMC_MODIFY
, "mod"},

102 {
OFPMC_DELETE
, "del"}

105 
«mes8
 
	gèbÀ_«mes
[] = {

109 
«mes16
 
	gö°_«mes
[] = {

110 {
OFPIT_GOTO_TABLE
, "goto"},

111 {
OFPIT_WRITE_METADATA
, "meta"},

112 {
OFPIT_WRITE_ACTIONS
, "write"},

113 {
OFPIT_APPLY_ACTIONS
, "apply"},

114 {
OFPIT_CLEAR_ACTIONS
, "clear"},

115 {
OFPIT_METER
, "meter"}

118 
«mes8
 
	gÊow_mod_cmd_«mes
[] = {

119 {
OFPFC_ADD
, "add"},

120 {
OFPFC_MODIFY
, "mod"},

121 {
OFPFC_MODIFY_STRICT
, "mods"},

122 {
OFPFC_DELETE
, "del"},

123 {
OFPFC_DELETE_STRICT
, "dels"}

126 
«mes32
 
	gbuf„r_«mes
[] = {

130 
«mes16
 
	gvœn_vid_«mes
[] = {

131 {
OFPVID_PRESENT
, "any"},

132 {
OFPVID_NONE
, "none"}

136 
«mes16
 
	ga˘i⁄_«mes
[] = {

137 {
OFPAT_OUTPUT
, "output"},

138 {
OFPAT_COPY_TTL_OUT
, "ttl_out"},

139 {
OFPAT_COPY_TTL_IN
, "ttl_in"},

140 {
OFPAT_SET_MPLS_TTL
, "mpls_ttl"},

141 {
OFPAT_DEC_MPLS_TTL
, "mpls_dec"},

142 {
OFPAT_PUSH_VLAN
, "push_vlan"},

143 {
OFPAT_POP_VLAN
, "pop_vlan"},

144 {
OFPAT_PUSH_PBB
, "push_pbb"},

145 {
OFPAT_POP_PBB
, "pop_pbb"},

146 {
OFPAT_PUSH_MPLS
, "push_mpls"},

147 {
OFPAT_POP_MPLS
, "pop_mpls"},

148 {
OFPAT_SET_QUEUE
, "queue"},

149 {
OFPAT_GROUP
, "group"},

150 {
OFPAT_SET_NW_TTL
, "nw_ttl"},

151 {
OFPAT_DEC_NW_TTL
, "nw_dec"},

152 {
OFPAT_SET_FIELD
, "set_field"}

155 
«mes16
 
	gb™d_«mes
[] = {

156 {
OFPMBT_DROP
, "drop"},

157 {
OFPMBT_DSCP_REMARK
, "dscp_remark"}

160 
	#FLOW_MOD_COMMAND
 "cmd"

	)

161 
	#FLOW_MOD_COOKIE
 "cookõ"

	)

162 
	#FLOW_MOD_COOKIE_MASK
 "cookõ_mask"

	)

163 
	#FLOW_MOD_TABLE_ID
 "èbÀ"

	)

164 
	#FLOW_MOD_IDLE
 "idÀ"

	)

165 
	#FLOW_MOD_HARD
 "h¨d"

	)

166 
	#FLOW_MOD_PRIO
 "¥io"

	)

167 
	#FLOW_MOD_BUFFER
 "buf„r"

	)

168 
	#FLOW_MOD_OUT_PORT
 "out_p‹t"

	)

169 
	#FLOW_MOD_OUT_GROUP
 "out_group"

	)

170 
	#FLOW_MOD_FLAGS
 "Êags"

	)

171 
	#FLOW_MOD_MATCH
 "m©ch"

	)

174 
	#MATCH_IN_PORT
 "ö_p‹t"

	)

175 
	#MATCH_DL_SRC
 "ëh_§c"

	)

176 
	#MATCH_DL_SRC_MASK
 "ëh_§c_mask"

	)

177 
	#MATCH_DL_DST
 "ëh_d°"

	)

178 
	#MATCH_DL_DST_MASK
 "ëh_d°_mask"

	)

179 
	#MATCH_DL_VLAN
 "vœn_vid"

	)

180 
	#MATCH_IP_DSCP
 "ù_ds˝"

	)

181 
	#MATCH_IP_ECN
 "ù_e˙"

	)

182 
	#MATCH_DL_VLAN_PCP
 "vœn_p˝"

	)

183 
	#MATCH_DL_TYPE
 "ëh_ty≥"

	)

184 
	#MATCH_NW_PROTO
 "ù_¥Ÿo"

	)

185 
	#MATCH_NW_SRC
 "ù_§c"

	)

186 
	#MATCH_NW_SRC_MASK
 "nw_§c_mask"

	)

187 
	#MATCH_NW_DST
 "ù_d°"

	)

188 
	#MATCH_NW_DST_MASK
 "ùv4_d°_mask"

	)

189 
	#MATCH_TP_SRC
 "t˝_§c"

	)

190 
	#MATCH_TP_DST
 "t˝_d°"

	)

191 
	#MATCH_UDP_SRC
 "udp_§c"

	)

192 
	#MATCH_UDP_DST
 "udp_d°"

	)

193 
	#MATCH_SCTP_SRC
 "s˘p_§c"

	)

194 
	#MATCH_SCTP_DST
 "s˘p_d°"

	)

195 
	#MATCH_ICMPV4_CODE
 "icmp_code"

	)

196 
	#MATCH_ICMPV4_TYPE
 "icmp_ty≥"

	)

197 
	#MATCH_ARP_OP
 "¨p_›"

	)

198 
	#MATCH_ARP_SHA
 "¨p_sha"

	)

199 
	#MATCH_ARP_THA
 "¨p_tha"

	)

200 
	#MATCH_ARP_SPA
 "¨p_•a"

	)

201 
	#MATCH_ARP_TPA
 "¨p_ça"

	)

202 
	#MATCH_NW_SRC_IPV6
 "ùv6_§c"

	)

203 
	#MATCH_NW_DST_IPV6
 "ùv6_d°"

	)

204 
	#MATCH_ICMPV6_CODE
 "icmpv6_code"

	)

205 
	#MATCH_ICMPV6_TYPE
 "icmpv6_ty≥"

	)

206 
	#MATCH_IPV6_FLABEL
 "ùv6_Êabñ"

	)

207 
	#MATCH_IPV6_ND_TARGET
 "ùv6_nd_èrgë"

	)

208 
	#MATCH_IPV6_ND_SLL
 "ùv6_nd_¶l"

	)

209 
	#MATCH_IPV6_ND_TLL
 "ùv6_nd_él"

	)

210 
	#MATCH_MPLS_LABEL
 "m∂s_œbñ"

	)

211 
	#MATCH_MPLS_TC
 "m∂s_tc"

	)

212 
	#MATCH_MPLS_BOS
 "m∂s_bos"

	)

213 
	#MATCH_METADATA
 "mëa"

	)

214 
	#MATCH_METADATA_MASK
 "mëa_mask"

	)

215 
	#MATCH_PBB_ISID
 "pbb_isid"

	)

216 
	#MATCH_TUNNEL_ID
 "tu¬_id"

	)

217 
	#MATCH_EXT_HDR
 "ext_hdr"

	)

219 
	#GROUP_MOD_COMMAND
 "cmd"

	)

220 
	#GROUP_MOD_TYPE
 "ty≥"

	)

221 
	#GROUP_MOD_GROUP
 "group"

	)

223 
	#BUCKET_WEIGHT
 "weight"

	)

224 
	#BUCKET_WATCH_PORT
 "p‹t"

	)

225 
	#BUCKET_WATCH_GROUP
 "group"

	)

227 
	#METER_MOD_COMMAND
 "cmd"

	)

228 
	#METER_MOD_FLAGS
 "Êags"

	)

229 
	#METER_MOD_METER
 "mëî"

	)

231 
	#BAND_RATE
 "øã"

	)

232 
	#BAND_BURST_SIZE
 "bur°"

	)

233 
	#BAND_PREC_LEVEL
 "¥ec_Àvñ"

	)

235 
	#CONFIG_FLAGS
 "Êags"

	)

236 
	#CONFIG_MISS
 "miss"

	)

239 
	#PORT_MOD_PORT
 "p‹t"

	)

240 
	#PORT_MOD_HW_ADDR
 "addr"

	)

241 
	#PORT_MOD_HW_CONFIG
 "c⁄f"

	)

242 
	#PORT_MOD_MASK
 "mask"

	)

243 
	#PORT_MOD_ADVERTISE
 "adv"

	)

246 
	#TABLE_MOD_TABLE
 "èbÀ"

	)

247 
	#TABLE_MOD_CONFIG
 "c⁄f"

	)

249 
	#KEY_VAL
 "="

	)

250 
	#KEY_VAL2
 ":"

	)

251 
	#KEY_SEP
 ","

	)

252 
	#MASK_SEP
 "/"

	)

254 
	#ADD
 "+"

	)

255 
	#WILDCARD_SUB
 '-'

	)

259 
	#NUM_ELEMS
–
x
 ) ((xË/ (x[0]))

	)

	@utilities/ofp-discover.c

34 
	~<c⁄fig.h
>

35 
	~<gë›t.h
>

36 
	~<limôs.h
>

37 
	~<ªgex.h
>

38 
	~<sig«l.h
>

39 
	~<°dlib.h
>

40 
	~<uni°d.h
>

41 
	~"comm™d-löe.h
"

42 
	~"d´m⁄.h
"

43 
	~"dh˝-˛õ¡.h
"

44 
	~"dh˝.h
"

45 
	~"dús.h
"

46 
	~"dy«mic-°rög.h
"

47 
	~"Áèl-sig«l.h
"

48 
	~"√tdev.h
"

49 
	~"pﬁl-lo›.h
"

50 
	~"timevÆ.h
"

51 
	~"utû.h
"

52 
	~"vlog-sockë.h
"

53 
	~"vlog.h
"

55 
	#LOG_MODULE
 
VLM_oÂ_discovî


	)

57 
	siÁ˚
 {

58 c⁄° *
	m«me
;

59 
dh˛õ¡
 *
	mdh˝
;

63 
iÁ˚
 *
	giÁ˚s
;

64 
	gn_iÁ˚s
;

68 c⁄° *
	gac˚±_c⁄åﬁÀr_ª
 = ".*";

69 
ªgex_t
 
	gac˚±_c⁄åﬁÀr_ªgex
;

73 
boﬁ
 
	gexô_wôhout_böd
;

77 
boﬁ
 
	gexô_a·î_böd
;

79 
boﬁ
 
iÁ˚_öô
(
iÁ˚
 *, c⁄° *
√tdev_«me
);

80 
ªÀa£_iÁ˚s
(*
aux
 
UNUSED
);

82 
∑r£_›ti⁄s
(
¨gc
, *
¨gv
[]);

83 
	$ußge
(Ë
NO_RETURN
;

85 
	`modify_dh˝_ªque°
(
dh˝_msg
 *, *
aux
);

86 
boﬁ
 
	`vÆid©e_dh˝_of„r
(c⁄° 
dh˝_msg
 *, *
aux
);

89 
	$maö
(
¨gc
, *
¨gv
[])

91 
ªtvÆ
;

92 
i
;

94 
	`£t_¥ogøm_«me
(
¨gv
[0]);

95 
	`time_öô
();

96 
	`vlog_öô
();

97 
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
);

99 
¨gc
 -
›töd
;

100 
¨gv
 +
›töd
;

101 i‡(
¨gc
 < 1) {

102 
	`oÂ_Áèl
(0, "needátÜeast oneÇon-optionárgument; "

106 
iÁ˚s
 = 
	`xmÆloc
(
¨gc
 *  *ifaces);

107 
n_iÁ˚s
 = 0;

108 
i
 = 0; i < 
¨gc
; i++) {

109 i‡(
	`iÁ˚_öô
(&
iÁ˚s
[
n_iÁ˚s
], 
¨gv
[
i
])) {

110 
n_iÁ˚s
++;

113 i‡(!
n_iÁ˚s
) {

114 
	`oÂ_Áèl
(0, "failedÅo initializeány DHCP clients");

117 
i
 = 0; i < 
n_iÁ˚s
; i++) {

118 
iÁ˚
 *iÁ˚ = &
iÁ˚s
[
i
];

119 
	`dh˛õ¡_öô
(
iÁ˚
->
dh˝
, 0);

121 
	`Áèl_sig«l_add_hook
(
ªÀa£_iÁ˚s
, 
NULL
, 
åue
);

123 
ªtvÆ
 = 
	`ªgcomp
(&
ac˚±_c⁄åﬁÀr_ªgex
, 
ac˚±_c⁄åﬁÀr_ª
,

124 
REG_NOSUB
 | 
REG_EXTENDED
);

125 i‡(
ªtvÆ
) {

126 
size_t
 
Àngth
 = 
	`ªgîr‹
(
ªtvÆ
, &
ac˚±_c⁄åﬁÀr_ªgex
, 
NULL
, 0);

127 *
buf„r
 = 
	`xmÆloc
(
Àngth
);

128 
	`ªgîr‹
(
ªtvÆ
, &
ac˚±_c⁄åﬁÀr_ªgex
, 
buf„r
, 
Àngth
);

129 
	`oÂ_Áèl
(0, "%s: %s", 
ac˚±_c⁄åﬁÀr_ª
, 
buf„r
);

132 
ªtvÆ
 = 
	`vlog_£rvî_li°í
(
NULL
, NULL);

133 i‡(
ªtvÆ
) {

134 
	`oÂ_Áèl
(
ªtvÆ
, "CouldÇotÜisten for vlog connections");

137 
	`dõ_if_Æªady_ru¬ög
();

139 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

141 
	`Áèl_sig«l_block
();

142 
i
 = 0; i < 
n_iÁ˚s
; i++) {

143 
iÁ˚
 *iÁ˚ = &
iÁ˚s
[
i
];

144 
	`dh˛õ¡_run
(
iÁ˚
->
dh˝
);

145 i‡(
	`dh˛õ¡_ch™ged
(
iÁ˚
->
dh˝
)) {

146 
boﬁ
 
is_bound
 = 
	`dh˛õ¡_is_bound
(
iÁ˚
->
dh˝
);

147 
j
;

150 i‡(!
exô_wôhout_böd
) {

151 
	`dh˛õ¡_c⁄figuª_√tdev
(
iÁ˚
->
dh˝
);

152 
	`dh˛õ¡_upd©e_ªsﬁv_c⁄f
(
iÁ˚
->
dh˝
);

155 i‡(
is_bound
) {

156 
boﬁ
 
dëached
 = 
Ál£
;

157 
ds
 ds;

160 
	`time_Æ¨m
(0);

163 
	`ds_öô
(&
ds
);

164 
	`dh˝_msg_to_°rög
(
	`dh˛õ¡_gë_c⁄fig
(
iÁ˚
->
dh˝
),

165 
åue
, &
ds
);

166 
	`Âuts
(
	`ds_c°r
(&
ds
), 
°dout
);

167 
	`putch¨
('\n');

168 
	`fÊush
(
°dout
);

169 
	`ds_de°roy
(&
ds
);

172 i‡(
exô_wôhout_böd
) {

173 
	`VLOG_DBG
(
LOG_MODULE
, "exiting because of successful binding on %s "

175 
iÁ˚
->
«me
);

176 
	`exô
(0);

178 i‡(
exô_a·î_böd
) {

179 
	`VLOG_DBG
(
LOG_MODULE
, "exiting because of successful binding on %s "

181 
iÁ˚
->
«me
);

182 
	`exô
(0);

186 i‡(!
dëached
) {

187 
dëached
 = 
åue
;

188 
	`d´m⁄ize
();

196 
j
 = 0; j < 
n_iÁ˚s
; j++) {

197 
iÁ˚
 *
if2
 = &
iÁ˚s
[
j
];

198 i‡(
iÁ˚
 !
if2
) {

199 i‡(
is_bound
) {

200 
	`dh˛õ¡_ªÀa£
(
if2
->
dh˝
);

202 
	`dh˛õ¡_öô
(
if2
->
dh˝
, 0);

208 
i
 = 0; i < 
n_iÁ˚s
; i++) {

209 
iÁ˚
 *iÁ˚ = &
iÁ˚s
[
i
];

210 
	`dh˛õ¡_waô
(
iÁ˚
->
dh˝
);

212 
	`Áèl_sig«l_unblock
();

213 
	`pﬁl_block
();

217 
	}
}

219 
boﬁ


220 
	$iÁ˚_öô
(
iÁ˚
 *iÁ˚, c⁄° *
√tdev_«me
)

222 
ªtvÆ
;

224 
iÁ˚
->
«me
 = 
√tdev_«me
;

225 
iÁ˚
->
dh˝
 = 
NULL
;

227 i‡(
exô_a·î_böd
) {

230 
√tdev
 *netdev;

232 
ªtvÆ
 = 
	`√tdev_›í
(
iÁ˚
->
«me
, 
NETDEV_ETH_TYPE_NONE
, &
√tdev
);

233 i‡(
ªtvÆ
) {

234 
	`oÂ_îr‹
(
ªtvÆ
, "CouldÇŸ o≥¿%†devi˚", 
iÁ˚
->
«me
);

235  
Ál£
;

237 
ªtvÆ
 = 
	`√tdev_tu∫_Êags_⁄
(
√tdev
, 
NETDEV_UP
, 
åue
);

238 i‡(
ªtvÆ
) {

239 
	`oÂ_îr‹
(
ªtvÆ
, "CouldÇŸ brög %†devi˚ up", 
iÁ˚
->
«me
);

240  
Ál£
;

242 
	`√tdev_˛o£
(
√tdev
);

245 
ªtvÆ
 = 
	`dh˛õ¡_¸óã
(
iÁ˚
->
«me
, 
modify_dh˝_ªque°
,

246 
vÆid©e_dh˝_of„r
, 
NULL
, &
iÁ˚
->
dh˝
);

247 i‡(
ªtvÆ
) {

248 
	`oÂ_îr‹
(
ªtvÆ
, "%s: faûedÅÿöôülizêDHCP clõ¡", 
iÁ˚
->
«me
);

249  
Ál£
;

252  
åue
;

253 
	}
}

256 
	$ªÀa£_iÁ˚s
(*
aux
 
UNUSED
)

258 
i
;

260 
i
 = 0; i < 
n_iÁ˚s
; i++) {

261 
dh˛õ¡
 *
dh˝
 = 
iÁ˚s
[
i
].dhcp;

262 
	`dh˛õ¡_ªÀa£
(
dh˝
);

263 i‡(
	`dh˛õ¡_ch™ged
(
dh˝
)) {

264 
	`dh˛õ¡_c⁄figuª_√tdev
(
dh˝
);

267 
	}
}

270 
	$modify_dh˝_ªque°
(
dh˝_msg
 *
msg
, *
aux
 
UNUSED
)

272 
	`dh˝_msg_put_°rög
(
msg
, 
DHCP_CODE_VENDOR_CLASS
, "OpenFlow");

273 
	}
}

275 
boﬁ


276 
	$vÆid©e_dh˝_of„r
(c⁄° 
dh˝_msg
 *
msg
, *
aux
 
UNUSED
)

278 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(60, 60);

279 *
vc⁄n_«me
;

280 
boﬁ
 
ac˚±
;

282 
vc⁄n_«me
 = 
	`dh˝_msg_gë_°rög
(
msg
, 
DHCP_CODE_OFP_CONTROLLER_VCONN
);

283 i‡(!
vc⁄n_«me
) {

284 
	`VLOG_WARN_RL
(
LOG_MODULE
, &
æ
, "rejecting DHCP offer missing controller vconn");

285  
Ál£
;

287 
ac˚±
 = !
	`ªgexec
(&
ac˚±_c⁄åﬁÀr_ªgex
, 
vc⁄n_«me
, 0, 
NULL
, 0);

288 
	`‰ì
(
vc⁄n_«me
);

289  
ac˚±
;

290 
	}
}

293 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

296 
OPT_ACCEPT_VCONN
 = 
UCHAR_MAX
 + 1,

297 
OPT_EXIT_WITHOUT_BIND
,

298 
OPT_EXIT_AFTER_BIND
,

299 
OPT_NO_DETACH
,

301 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

302 {"ac˚±-vc⁄n", 
ªquúed_¨gumít
, 0, 
OPT_ACCEPT_VCONN
},

303 {"exô-wôhout-böd", 
no_¨gumít
, 0, 
OPT_EXIT_WITHOUT_BIND
},

304 {"exô-a·î-böd", 
no_¨gumít
, 0, 
OPT_EXIT_AFTER_BIND
},

305 {"no-dëach", 
no_¨gumít
, 0, 
OPT_NO_DETACH
},

306 {"timeout", 
ªquúed_¨gumít
, 0, 't'},

307 {"pidfûe", 
›ti⁄Æ_¨gumít
, 0, 'P'},

308 {"f‹˚", 
no_¨gumít
, 0, 'f'},

309 {"vîbo£", 
›ti⁄Æ_¨gumít
, 0, 'v'},

310 {"hñp", 
no_¨gumít
, 0, 'h'},

311 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

314 *
sh‹t_›ti⁄s
 = 
	`l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(
l⁄g_›ti⁄s
);

315 
boﬁ
 
dëach_a·î_böd
 = 
åue
;

318 
timeout
;

319 
c
;

321 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

322 i‡(
c
 == -1) {

326 
c
) {

327 
OPT_ACCEPT_VCONN
:

328 
ac˚±_c⁄åﬁÀr_ª
 = (
›èrg
[0] == '^'

329 ? 
›èrg


330 : 
	`xa•rötf
("^%s", 
›èrg
));

333 
OPT_EXIT_WITHOUT_BIND
:

334 
exô_wôhout_böd
 = 
åue
;

337 
OPT_EXIT_AFTER_BIND
:

338 
exô_a·î_böd
 = 
åue
;

341 
OPT_NO_DETACH
:

342 
dëach_a·î_böd
 = 
Ál£
;

346 
	`£t_pidfûe
(
›èrg
);

350 
	`ign‹e_exi°ög_pidfûe
();

354 
timeout
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

355 i‡(
timeout
 <= 0) {

356 
	`oÂ_Áèl
(0, "value %s on -t or --timeout isÇotátÜeast 1",

357 
›èrg
);

359 
	`time_Æ¨m
(
timeout
);

361 
	`sig«l
(
SIGALRM
, 
SIG_DFL
);

365 
	`ußge
();

368 
	`¥ötf
("%†%†compûed "
__DATE__
" "
__TIME__
"\n",

369 
¥ogøm_«me
, 
VERSION
 
BUILDNR
);

370 
	`exô
(
EXIT_SUCCESS
);

373 
	`vlog_£t_vîbosôy
(
›èrg
);

377 
	`exô
(
EXIT_FAILURE
);

380 
	`ab‹t
();

383 
	`‰ì
(
sh‹t_›ti⁄s
);

385 i‡((
exô_wôhout_böd
 + 
exô_a·î_böd
 + !
dëach_a·î_böd
) > 1) {

386 
	`oÂ_Áèl
(0, "--exit-without-bind, --exit-after-bind,ánd --no-detach "

389 i‡(
dëach_a·î_böd
) {

390 
	`£t_dëach
();

392 
	}
}

395 
	$ußge
()

397 
	`¥ötf
("%s:áÅool for discovering OpenFlow controllers.\n"

410 
¥ogøm_«me
,Örogram_name);

411 
	`vlog_ußge
();

412 
	`¥ötf
("\nOther options:\n"

418 
oÂ_rundú
, 
¥ogøm_«me
);

419 
	`exô
(
EXIT_SUCCESS
);

420 
	}
}

	@utilities/ofp-kill.c

34 
	~<c⁄fig.h
>

35 
	~<î∫o.h
>

36 
	~<f˙é.h
>

37 
	~<gë›t.h
>

38 
	~<sig«l.h
>

39 
	~<°d¨g.h
>

40 
	~<°dlib.h
>

41 
	~<°rög.h
>

42 
	~"comm™d-löe.h
"

43 
	~"d´m⁄.h
"

44 
	~"timevÆ.h
"

45 
	~"utû.h
"

46 
	~"vlog.h
"

49 
	gsig_ƒ
 = 
SIGTERM
;

52 
boﬁ
 
	gf‹˚
;

54 
	$c⁄d_îr‹
(
îr_no
, c⁄° *, ...Ë
	`PRINTF_FORMAT
(2, 3);

56 
	`∑r£_›ti⁄s
(
¨gc
, *
¨gv
[]);

57 
	`ußge
();

60 
	$maö
(
¨gc
, *
¨gv
[])

62 
boﬁ
 
ok
 = 
åue
;

63 
i
;

65 
	`£t_¥ogøm_«me
(
¨gv
[0]);

66 
	`time_öô
();

67 
	`vlog_öô
();

68 
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
);

70 
¨gc
 -
›töd
;

71 
¨gv
 +
›töd
;

72 i‡(
¨gc
 < 1) {

73 i‡(!
f‹˚
) {

74 
	`oÂ_Áèl
(0, "needátÜeast oneÇon-optionárgument; "

79 
i
 = 0; i < 
¨gc
; i++) {

80 *
pidfûe
;

81 
pid_t
 
pid
;

83 
pidfûe
 = 
	`make_pidfûe_«me
(
¨gv
[
i
]);

84 
pid
 = 
	`ªad_pidfûe
(
pidfûe
);

85 i‡(
pid
 >= 0) {

86 i‡(
	`kûl
(
pid
, 
sig_ƒ
) < 0) {

87 
	`c⁄d_îr‹
(
î∫o
, "%s: kûl(%ld)", 
pidfûe
, (Ë
pid
);

90 
	`c⁄d_îr‹
(-
pid
, "couldÇŸÑód %s", 
pidfûe
);

92 
	`‰ì
(
pidfûe
);

95  
ok
 || 
f‹˚
 ? 
EXIT_SUCCESS
 : 
EXIT_FAILURE
;

96 
	}
}

99 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

101 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

102 {"sig«l", 
ªquúed_¨gumít
, 0, 's'},

103 {"f‹˚", 
no_¨gumít
, 0, 'f'},

104 {"hñp", 
no_¨gumít
, 0, 'h'},

105 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

108 *
sh‹t_›ti⁄s
 = 
	`l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(
l⁄g_›ti⁄s
);

111 
c
;

113 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

114 i‡(
c
 == -1) {

118 
c
) {

120 i‡(
	`©oi
(
›èrg
Ë|| !
	`°rcmp
(optarg, "0")) {

121 
sig_ƒ
 = 
	`©oi
(
›èrg
);

123 
	ssig«l_«me
 {

124 c⁄° *
«me
;

125 
numbî
;

128 c⁄° 
sig«l_«me
 
sig«ls
[] = {

129 
	#SIGNAL
(
NAME
Ë{ #NAME, NAME }

	)

130 
	`SIGNAL
(
SIGABRT
),

131 
	`SIGNAL
(
SIGALRM
),

132 
	`SIGNAL
(
SIGBUS
),

133 
	`SIGNAL
(
SIGCHLD
),

134 
	`SIGNAL
(
SIGCONT
),

135 
	`SIGNAL
(
SIGFPE
),

136 
	`SIGNAL
(
SIGHUP
),

137 
	`SIGNAL
(
SIGILL
),

138 
	`SIGNAL
(
SIGINT
),

139 
	`SIGNAL
(
SIGKILL
),

140 
	`SIGNAL
(
SIGPIPE
),

141 
	`SIGNAL
(
SIGQUIT
),

142 
	`SIGNAL
(
SIGSEGV
),

143 
	`SIGNAL
(
SIGSTOP
),

144 
	`SIGNAL
(
SIGTERM
),

145 
	`SIGNAL
(
SIGTSTP
),

146 
	`SIGNAL
(
SIGTTIN
),

147 
	`SIGNAL
(
SIGTTOU
),

148 
	`SIGNAL
(
SIGUSR1
),

149 
	`SIGNAL
(
SIGUSR2
),

150 #ifde‡
SIGPOLL


151 
	`SIGNAL
(
SIGPOLL
),

153 
	`SIGNAL
(
SIGPROF
),

154 
	`SIGNAL
(
SIGSYS
),

155 
	`SIGNAL
(
SIGTRAP
),

156 
	`SIGNAL
(
SIGURG
),

157 
	`SIGNAL
(
SIGVTALRM
),

158 
	`SIGNAL
(
SIGXCPU
),

159 
	`SIGNAL
(
SIGXFSZ
),

160 #unde‡
SIGNAL


162 
i
;

164 
i
 = 0; i < 
	`ARRAY_SIZE
(
sig«ls
); i++) {

165 c⁄° 
sig«l_«me
 *
s
 = &
sig«ls
[
i
];

166 i‡(!
	`°rcmp
(
›èrg
, 
s
->
«me
)

167 || !
	`°rcmp
(
›èrg
, 
s
->
«me
 + 3)) {

168 
sig_ƒ
 = 
s
->
numbî
;

169 
gŸ_«me
;

172 
	`oÂ_Áèl
(0, "unknow¿sig«»\"%s\"", 
›èrg
);

173 
gŸ_«me
: ;

178 
f‹˚
 = 
åue
;

182 
	`ußge
();

185 
	`¥ötf
("%†%†compûed "
__DATE__
" "
__TIME__
"\n",

186 
¥ogøm_«me
, 
VERSION
 
BUILDNR
);

187 
	`exô
(
EXIT_SUCCESS
);

190 
	`exô
(
EXIT_FAILURE
);

193 
	`ab‹t
();

196 
	`‰ì
(
sh‹t_›ti⁄s
);

197 
	}
}

200 
	$ußge
()

202 
	`¥ötf
("%s: killsáÖrogram usingáÖidfile\n"

210 
¥ogøm_«me
,Örogram_name);

211 
	`exô
(
EXIT_SUCCESS
);

212 
	}
}

215 
	$c⁄d_îr‹
(
îr_no
, c⁄° *
f‹m©
, ...)

217 i‡(!
f‹˚
) {

218 
va_li°
 
¨gs
;

220 
	`Ârötf
(
°dîr
, "%s: ", 
¥ogøm_«me
);

221 
	`va_°¨t
(
¨gs
, 
f‹m©
);

222 
	`vÂrötf
(
°dîr
, 
f‹m©
, 
¨gs
);

223 
	`va_íd
(
¨gs
);

224 i‡(
îr_no
 != 0)

225 
	`Ârötf
(
°dîr
, " (%s)", 
	`°ªº‹
(
îr_no
));

226 
	`putc
('\n', 
°dîr
);

228 
	}
}

	@utilities/vlogconf.c

33 
	~<c⁄fig.h
>

34 
	~"vlog.h
"

36 
	~<dúít.h
>

37 
	~<î∫o.h
>

38 
	~<gë›t.h
>

39 
	~<°d¨g.h
>

40 
	~<°dio.h
>

41 
	~<°rög.h
>

42 
	~<°dlib.h
>

44 
	~"comm™d-löe.h
"

45 
	~"compûî.h
"

46 
	~"timevÆ.h
"

47 
	~"utû.h
"

48 
	~"vlog-sockë.h
"

51 
	$ußge
(*
¥og_«me
, 
exô_code
)

53 
	`¥ötf
("Usage: %s [TARGET] [ACTION...]\n"

68 
¥og_«me
);

69 
	`exô
(
exô_code
);

70 
	}
}

73 
	$å™ß˘
(
vlog_˛õ¡
 *
˛õ¡
, c⁄° *
ªque°
, 
boﬁ
 *
ok
)

75 *
ª∂y
;

76 
îr‹
 = 
	`vlog_˛õ¡_å™ß˘
(
˛õ¡
, 
ªque°
, &
ª∂y
);

77 i‡(
îr‹
) {

78 
	`Ârötf
(
°dîr
, "%s:ÅransactionÉrror: %s\n",

79 
	`vlog_˛õ¡_èrgë
(
˛õ¡
), 
	`°ªº‹
(
îr‹
));

80 *
ok
 = 
Ál£
;

82  
ª∂y
 ?Ñïly : 
	`x°rdup
("");

83 
	}
}

86 
	$å™ß˘_ack
(
vlog_˛õ¡
 *
˛õ¡
, c⁄° * 
ªque°
, 
boﬁ
 *
ok
)

88 *
ª∂y
;

89 
îr‹
 = 
	`vlog_˛õ¡_å™ß˘
(
˛õ¡
, 
ªque°
, &
ª∂y
);

90 i‡(
îr‹
) {

91 
	`Ârötf
(
°dîr
, "%s:ÅransactionÉrror: %s\n",

92 
	`vlog_˛õ¡_èrgë
(
˛õ¡
), 
	`°ªº‹
(
îr‹
));

93 *
ok
 = 
Ál£
;

94 } i‡(
	`°rcmp
(
ª∂y
, "ack")) {

95 
	`Ârötf
(
°dîr
, "Received unexpectedÑeply from %s: %s\n",

96 
	`vlog_˛õ¡_èrgë
(
˛õ¡
), 
ª∂y
);

97 *
ok
 = 
Ál£
;

99 
	`‰ì
(
ª∂y
);

100 
	}
}

103 
	$add_èrgë
(
vlog_˛õ¡
 ***
˛õ¡s
, 
size_t
 *
n_˛õ¡s
,

104 c⁄° *
∑th
, 
boﬁ
 *
ok
)

106 
vlog_˛õ¡
 *
˛õ¡
;

107 
îr‹
 = 
	`vlog_˛õ¡_c⁄√˘
(
∑th
, &
˛õ¡
);

108 i‡(
îr‹
) {

109 
	`Ârötf
(
°dîr
, "Error connectingÅo \"%s\": %s\n",

110 
∑th
, 
	`°ªº‹
(
îr‹
));

111 *
ok
 = 
Ál£
;

113 *
˛õ¡s
 = 
	`xªÆloc
(*˛õ¡s,  *˛õ¡†* (*
n_˛õ¡s
 + 1));

114 (*
˛õ¡s
)[*
n_˛õ¡s
] = 
˛õ¡
;

115 ++*
n_˛õ¡s
;

117 
	}
}

120 
	$add_Æl_èrgës
(
vlog_˛õ¡
 ***
˛õ¡s
, 
size_t
 *
n_˛õ¡s
, 
boﬁ
 *
ok
)

122 
DIR
 *
dúe˘‹y
;

123 
dúít
* 
de
;

125 
dúe˘‹y
 = 
	`›ídú
("/tmp");

126 i‡(!
dúe˘‹y
) {

127 
	`Ârötf
(
°dîr
, "/tmp: o≥ndú: %s\n", 
	`°ªº‹
(
î∫o
));

130 (
de
 = 
	`ªaddú
(
dúe˘‹y
)Ë!
NULL
) {

131 i‡(!
	`°∫cmp
(
de
->
d_«me
, "vlogs.", 5)) {

132 *
∑th
 = 
	`xa•rötf
("/tmp/%s", 
de
->
d_«me
);

133 
	`add_èrgë
(
˛õ¡s
, 
n_˛õ¡s
, 
∑th
, 
ok
);

134 
	`‰ì
(
∑th
);

138 
	`˛o£dú
(
dúe˘‹y
);

139 
	}
}

141 
	$maö
(
¨gc
, *
¨gv
[])

143 c⁄° 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

145 {"Æl", 
no_¨gumít
, 
NULL
, 'a'},

146 {"èrgë", 
ªquúed_¨gumít
, 
NULL
, 't'},

147 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

150 {"li°", 
no_¨gumít
, 
NULL
, 'l'},

151 {"£t", 
ªquúed_¨gumít
, 
NULL
, 's'},

152 {"ª›í", 
no_¨gumít
, 
NULL
, 'r'},

155 *
sh‹t_›ti⁄s
;

158 
boﬁ
 
ok
 = 
åue
;

159 
n_a˘i⁄s
 = 0;

160 
vlog_˛õ¡
 **
˛õ¡s
 = 
NULL
;

161 
size_t
 
n_˛õ¡s
 = 0;

163 
	`£t_¥ogøm_«me
(
¨gv
[0]);

164 
	`time_öô
();

166 
sh‹t_›ti⁄s
 = 
	`l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(
l⁄g_›ti⁄s
);

168 
›ti⁄
;

169 
size_t
 
i
;

171 
›ti⁄
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

172 i‡(
›ti⁄
 == -1) {

175 i‡(!
	`°rchr
("©h", 
›ti⁄
Ë&& 
n_˛õ¡s
 == 0) {

176 
	`oÂ_Áèl
(0, "noÅargets specified (use --help for help)");

178 ++
n_a˘i⁄s
;

180 
›ti⁄
) {

182 
	`add_Æl_èrgës
(&
˛õ¡s
, &
n_˛õ¡s
, &
ok
);

186 
	`add_èrgë
(&
˛õ¡s
, &
n_˛õ¡s
, 
›èrg
, &
ok
);

190 
i
 = 0; i < 
n_˛õ¡s
; i++) {

191 
vlog_˛õ¡
 *
˛õ¡
 = 
˛õ¡s
[
i
];

192 *
ª∂y
;

194 
	`¥ötf
("%s:\n", 
	`vlog_˛õ¡_èrgë
(
˛õ¡
));

195 
ª∂y
 = 
	`å™ß˘
(
˛õ¡
, "li°", &
ok
);

196 
	`Âuts
(
ª∂y
, 
°dout
);

197 
	`‰ì
(
ª∂y
);

202 
i
 = 0; i < 
n_˛õ¡s
; i++) {

203 
vlog_˛õ¡
 *
˛õ¡
 = 
˛õ¡s
[
i
];

204 *
ªque°
 = 
	`xa•rötf
("£à%s", 
›èrg
);

205 
	`å™ß˘_ack
(
˛õ¡
, 
ªque°
, &
ok
);

206 
	`‰ì
(
ªque°
);

211 
i
 = 0; i < 
n_˛õ¡s
; i++) {

212 
vlog_˛õ¡
 *
˛õ¡
 = 
˛õ¡s
[
i
];

213 *
ªque°
 = 
	`x°rdup
("reopen");

214 
	`å™ß˘_ack
(
˛õ¡
, 
ªque°
, &
ok
);

215 
	`‰ì
(
ªque°
);

220 
	`ußge
(
¨gv
[0], 
EXIT_SUCCESS
);

224 
	`exô
(
EXIT_FAILURE
);

227 
	`NOT_REACHED
();

230 i‡(!
n_a˘i⁄s
) {

231 
	`Ârötf
(
°dîr
,

234 
	`exô
(
ok
 ? 0 : 1);

235 
	}
}

	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/boost/static_assert.hpp

14 #i‚de‡
BOOST_STATIC_ASSERT_HPP


15 
	#BOOST_STATIC_ASSERT_HPP


	)

17 
	~<boo°/c⁄fig.hµ
>

18 
	~<boo°/dëaû/w‹k¨ound.hµ
>

20 #i‚de‡
BOOST_NO_STATIC_ASSERT


21 
	#BOOST_STATIC_ASSERT_MSG
–
B
, 
Msg
 ) 
	`°©ic_as£π
(B, Msg)

	)

23 
	#BOOST_STATIC_ASSERT_MSG
–
B
, 
Msg
 ) 
	`BOOST_STATIC_ASSERT
–B )

	)

26 #ifde‡
__BORLANDC__


29 
	#BOOST_BUGGY_INTEGRAL_CONSTANT_EXPRESSIONS


	)

32 #i‡
deföed
(
__GNUC__
Ë&& (__GNUC__ =3Ë&& ((
__GNUC_MINOR__
 == 3) || (__GNUC_MINOR__ == 4))

34 
	#BOOST_SA_GCC_WORKAROUND


	)

41 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ > 3Ë|| ((__GNUC__ =3Ë&& (
__GNUC_MINOR__
 >= 4)))

42 
	#BOOST_STATIC_ASSERT_BOOL_CAST
–
x
 ) ((xË=0 ? 
Ál£
 : 
åue
)

	)

44 
	#BOOST_STATIC_ASSERT_BOOL_CAST
(
x
Ë(
boﬁ
)(x)

	)

47 #i‚de‡
BOOST_NO_STATIC_ASSERT


48 
	#BOOST_STATIC_ASSERT
–
B
 ) 
	`°©ic_as£π
(B, #B)

	)

51 
«me•a˚
 
	gboo°
{

54 
	gãm∂©e
 <
boﬁ
 
	gx
> 
	gSTATIC_ASSERTION_FAILURE
;

56 
	gãm∂©e
 <> 
	gSTATIC_ASSERTION_FAILURE
<
	gåue
> {Énum { 
	gvÆue
 = 1 }; };

59 
	gãm∂©e
<
	gx
> 
	s°©ic_as£π_ã°
{};

85 #i‡!
deföed
(
BOOST_BUGGY_INTEGRAL_CONSTANT_EXPRESSIONS
)

87 #i‡
deföed
(
BOOST_MSVC
) && (BOOST_MSVC < 1300)

90 
	#BOOST_STATIC_ASSERT
–
B
 ) \

91 ::
boo°
::
	t°©ic_as£π_ã°
<\

92 (::
	tboo°
::
	tSTATIC_ASSERTION_FAILURE
< (
	tboﬁ
)–
	tB
 ) >)\

93 > 
	tboo°_°©ic_as£π_ty≥def_


	)

94 #ñi‡
	tdeföed
(
	tBOOST_MSVC
)

95 
	tBOOST_STATIC_ASSERT
–
	tB
 ) \

96 ::
boo°
::
	t°©ic_as£π_ã°
<\

97 (::
	tboo°
::
	tSTATIC_ASSERTION_FAILURE
< 
	tBOOST_STATIC_ASSERT_BOOL_CAST
 ( 
	tB
 ) >)>\

98 
	tBOOST_JOIN
(
	tboo°_°©ic_as£π_ty≥def_
, 
	t__COUNTER__
)

	)

99 #ñi‡
	tdeföed
(
	tBOOST_INTEL_CXX_VERSION
Ë|| deföed(
	tBOOST_SA_GCC_WORKAROUND
)

102 
	tBOOST_STATIC_ASSERT
–
	tB
 ) \

103 
	tBOOST_JOIN
(
	tboo°_°©ic_as£π_ty≥def_
, 
	t__LINE__
) \

104 [ ::
boo°
::
STATIC_ASSERTION_FAILURE
< 
	`BOOST_STATIC_ASSERT_BOOL_CAST
–
B
 ) >::
vÆue
 ]

	)

105 #ñi‡
	tdeföed
(
	t__sgi
)

107 
	tBOOST_STATIC_ASSERT
–
	tB
 ) \

108 
	tBOOST_STATIC_CONSTANT
(
	tboﬁ
, \

109 
	tBOOST_JOIN
(
	tboo°_°©ic_as£π_ã°_
, 
	t__LINE__
Ë–
	tB
 )); \

110 ::
boo°
::
	t°©ic_as£π_ã°
<\

111 (::
	tboo°
::
	tSTATIC_ASSERTION_FAILURE
< \

112 
	tBOOST_JOIN
(
	tboo°_°©ic_as£π_ã°_
, 
	t__LINE__
) >)>\

113 
	tBOOST_JOIN
(
	tboo°_°©ic_as£π_ty≥def_
, 
	t__LINE__
)

	)

114 #ñi‡
	tBOOST_WORKAROUND
(
	t__MWERKS__
, <= 0x3003)

116 
	tBOOST_STATIC_ASSERT
–
	tB
 ) \

117 
	tBOOST_STATIC_CONSTANT
(, \

118 
	tBOOST_JOIN
(
	tboo°_°©ic_as£π_ã°_
, 
	t__LINE__
) = \

119 (::
	tboo°
::
	tSTATIC_ASSERTION_FAILURE
< 
	tBOOST_STATIC_ASSERT_BOOL_CAST
–
	tB
 ) >Ë)

	)

122 
	tBOOST_STATIC_ASSERT
–
	tB
 ) \

123 ::
boo°
::
	t°©ic_as£π_ã°
<\

124 (::
	tboo°
::
	tSTATIC_ASSERTION_FAILURE
< 
	tBOOST_STATIC_ASSERT_BOOL_CAST
–
	tB
 ) >)>\

125 
	tBOOST_JOIN
(
	tboo°_°©ic_as£π_ty≥def_
, 
	t__LINE__
)

	)

130 
	tBOOST_STATIC_ASSERT
–
	tB
 ) \

131 íum { 
	`BOOST_JOIN
(
boo°_°©ic_as£π_íum_
, 
__LINE__
) \

132 (::
boo°
::
STATIC_ASSERTION_FAILURE
< (
boﬁ
)–
B
 ) >Ë}

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

89 #i‚de‡
__˝lu•lus


90 
	#__is˘y≥
(
c
, 
ty≥
) \

91 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

92 #ñi‡
deföed
 
__USE_EXTERN_INLINES


93 
	#__is˘y≥_f
(
ty≥
) \

94 
__exã∫_ölöe
 \

95 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

97  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

98 
	}

	)
}

101 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

102 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

104 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

106 
__BEGIN_NAMESPACE_STD


112 
__ex˘y≥
 (
iß um
);

113 
__ex˘y≥
 (
ißÕha
);

114 
__ex˘y≥
 (
is˙ål
);

115 
__ex˘y≥
 (
isdigô
);

116 
__ex˘y≥
 (
i¶owî
);

117 
__ex˘y≥
 (
isgøph
);

118 
__ex˘y≥
 (
i•röt
);

119 
__ex˘y≥
 (
i•un˘
);

120 
__ex˘y≥
 (
is•a˚
);

121 
__ex˘y≥
 (
isuµî
);

122 
__ex˘y≥
 (
isxdigô
);

126 
	$tﬁowî
 (
__c
Ë
__THROW
;

129 
	$touµî
 (
__c
Ë
__THROW
;

131 
__END_NAMESPACE_STD


135 #ifdef 
__USE_ISOC99


136 
__BEGIN_NAMESPACE_C99


138 
	`__ex˘y≥
 (
isbœnk
);

140 
__END_NAMESPACE_C99


143 #ifde‡
__USE_GNU


145 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

148 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


152 
	$ißscii
 (
__c
Ë
__THROW
;

156 
	$tﬂscii
 (
__c
Ë
__THROW
;

160 
	`__ex˘y≥
 (
_touµî
);

161 
	`__ex˘y≥
 (
_tﬁowî
);

165 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

166 (
__exãnsi⁄__
 \

167 ({ 
__ªs
; \

168 i‡( (
c
) > 1) \

170 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

172 
__c
 = (
c
); \

173 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

176 
__ªs
 = 
f
 
¨gs
; \

179 
__ªs
 = (
a
)[(Ë(
c
)]; \

180 
__ªs
; 
	}
}))

	)

182 #i‡!
deföed
 
__NO_CTYPE


183 #ifde‡
__is˘y≥_f


184 
	$__is˘y≥_f
 (
Ænum
)

185 
	$__is˘y≥_f
 (
Æpha
)

186 
	$__is˘y≥_f
 (
˙ål
)

187 
	$__is˘y≥_f
 (
digô
)

188 
	$__is˘y≥_f
 (
lowî
)

189 
	$__is˘y≥_f
 (
gøph
)

190 
	$__is˘y≥_f
 (
¥öt
)

191 
	$__is˘y≥_f
 (
pun˘
)

192 
	$__is˘y≥_f
 (
•a˚
)

193 
	$__is˘y≥_f
 (
uµî
)

194 
	$__is˘y≥_f
 (
xdigô
)

195 #ifde‡
__USE_ISOC99


196 
	$__is˘y≥_f
 (
bœnk
)

198 #ñi‡
deföed
 
__is˘y≥


199 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

200 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

201 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

202 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

203 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

204 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

205 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

206 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

207 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

208 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

209 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

210 #ifde‡
__USE_ISOC99


211 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

215 #ifde‡
__USE_EXTERN_INLINES


216 
__exã∫_ölöe
 

217 
	`__NTH
 (
	$tﬁowî
 (
__c
))

219  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

220 
	}
}

222 
__exã∫_ölöe
 

223 
__NTH
 (
	$touµî
 (
__c
))

225  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

226 
	}
}

229 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


230 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

231 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

234 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

236 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

238 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

239 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

245 #ifde‡
__USE_XOPEN2K8


259 
	~<xloˇÀ.h
>

263 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

264 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

266 
	#__ex˘y≥_l
(
«me
) \

267 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

273 
__ex˘y≥_l
 (
iß um_l
);

274 
__ex˘y≥_l
 (
ißÕha_l
);

275 
__ex˘y≥_l
 (
is˙ål_l
);

276 
__ex˘y≥_l
 (
isdigô_l
);

277 
__ex˘y≥_l
 (
i¶owî_l
);

278 
__ex˘y≥_l
 (
isgøph_l
);

279 
__ex˘y≥_l
 (
i•röt_l
);

280 
__ex˘y≥_l
 (
i•un˘_l
);

281 
__ex˘y≥_l
 (
is•a˚_l
);

282 
__ex˘y≥_l
 (
isuµî_l
);

283 
__ex˘y≥_l
 (
isxdigô_l
);

285 
__ex˘y≥_l
 (
isbœnk_l
);

289 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

290 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

296 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


297 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

299 
	#__touµî_l
(
c
, 
loˇÀ
) \

300 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

301 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

302 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

306 #i‚de‡
__NO_CTYPE


307 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

308 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

309 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

310 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

311 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

312 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

313 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

314 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

315 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

316 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

317 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

319 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

321 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


322 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

323 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

326 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

327 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

328 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

329 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

330 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

331 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

332 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

333 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

334 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

335 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

336 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

338 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

340 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


341 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

342 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

349 
__END_DECLS


	@/usr/include/dirent.h

24 #i‚def 
_DIRENT_H


25 
	#_DIRENT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifde‡
__USE_XOPEN


34 #i‚de‡
__öo_t_deföed


35 #i‚de‡
__USE_FILE_OFFSET64


36 
__öo_t
 
	töo_t
;

38 
__öo64_t
 
	töo_t
;

40 
	#__öo_t_deföed


	)

42 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


43 
__öo64_t
 
	töo64_t
;

44 
	#__öo64_t_deföed


	)

63 
	~<bôs/dúít.h
>

65 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


66 
	#d_öo
 
d_fûío


	)

83 #ifde‡
_DIRENT_HAVE_D_NAMLEN


84 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

85 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

87 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

88 #ifde‡
_DIRENT_HAVE_D_RECLEN


89 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

91 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

92 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

97 #ifde‡
__USE_BSD


101 
	mDT_UNKNOWN
 = 0,

102 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

103 
	mDT_FIFO
 = 1,

104 
	#DT_FIFO
 
DT_FIFO


	)

105 
	mDT_CHR
 = 2,

106 
	#DT_CHR
 
DT_CHR


	)

107 
	mDT_DIR
 = 4,

108 
	#DT_DIR
 
DT_DIR


	)

109 
	mDT_BLK
 = 6,

110 
	#DT_BLK
 
DT_BLK


	)

111 
	mDT_REG
 = 8,

112 
	#DT_REG
 
DT_REG


	)

113 
	mDT_LNK
 = 10,

114 
	#DT_LNK
 
DT_LNK


	)

115 
	mDT_SOCK
 = 12,

116 
	#DT_SOCK
 
DT_SOCK


	)

117 
	mDT_WHT
 = 14

118 
	#DT_WHT
 
DT_WHT


	)

122 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

123 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

129 
__dú°ªam
 
	tDIR
;

136 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

138 #ifde‡
__USE_XOPEN2K8


143 
DIR
 *
	`fd›ídú
 (
__fd
);

151 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

163 #i‚de‡
__USE_FILE_OFFSET64


164 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

166 #ifde‡
__REDIRECT


167 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

168 
	`__n⁄nuŒ
 ((1));

170 
	#ªaddú
 
ªaddú64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


184 #i‚de‡
__USE_FILE_OFFSET64


185 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

186 
dúít
 *
__ª°ri˘
 
__íåy
,

187 
dúít
 **
__ª°ri˘
 
__ªsu…
)

188 
	`__n⁄nuŒ
 ((1, 2, 3));

190 #ifde‡
__REDIRECT


191 
	`__REDIRECT
 (
ªaddú_r
,

192 (
DIR
 *
__ª°ri˘
 
__dúp
,

193 
dúít
 *
__ª°ri˘
 
__íåy
,

194 
dúít
 **
__ª°ri˘
 
__ªsu…
),

195 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

197 
	#ªaddú_r
 
ªaddú64_r


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

203 
dúít64
 *
__ª°ri˘
 
__íåy
,

204 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

205 
	`__n⁄nuŒ
 ((1, 2, 3));

210 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

212 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


213 
	~<bôs/ty≥s.h
>

216 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


225 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


228 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

231 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


232 #i‚de‡
MAXNAMLEN


234 
	~<bôs/posix1_lim.h
>

237 #ifde‡
NAME_MAX


238 
	#MAXNAMLEN
 
NAME_MAX


	)

240 
	#MAXNAMLEN
 255

	)

245 
	#__√ed_size_t


	)

246 
	~<°ddef.h
>

255 #i‚de‡
__USE_FILE_OFFSET64


256 
	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

257 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

258 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

259 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

260 
__c⁄°
 
dúít
 **))

261 
	`__n⁄nuŒ
 ((1, 2));

263 #ifde‡
__REDIRECT


264 
	`__REDIRECT
 (
sˇndú
,

265 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

266 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

267 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

268 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

269 
__c⁄°
 
dúít
 **)),

270 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

272 
	#sˇndú
 
sˇndú64


	)

276 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


279 
	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

280 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

281 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

282 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

283 
__c⁄°
 
dúít64
 **))

284 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__USE_GNU


293 #i‚de‡
__USE_FILE_OFFSET64


294 
	`sˇndú©
 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

295 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

296 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

297 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

298 
__c⁄°
 
dúít
 **))

299 
	`__n⁄nuŒ
 ((2, 3));

301 #ifde‡
__REDIRECT


302 
	`__REDIRECT
 (
sˇndú©
,

303 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

304 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

305 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

306 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

307 
__c⁄°
 
dúít
 **)),

308 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

310 
	#sˇndú©
 
sˇndú©64


	)

316 
	`sˇndú©64
 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

317 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

318 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

319 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

320 
__c⁄°
 
dúít64
 **))

321 
	`__n⁄nuŒ
 ((2, 3));

325 #i‚de‡
__USE_FILE_OFFSET64


326 
	$Æphas‹t
 (
__c⁄°
 
dúít
 **
__e1
,

327 
__c⁄°
 
dúít
 **
__e2
)

328 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

330 #ifde‡
__REDIRECT


331 
	`__REDIRECT_NTH
 (
Æphas‹t
,

332 (
__c⁄°
 
dúít
 **
__e1
,

333 
__c⁄°
 
dúít
 **
__e2
),

334 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

336 
	#Æphas‹t
 
Æphas‹t64


	)

340 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


341 
	$Æphas‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

342 
__c⁄°
 
dúít64
 **
__e2
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


353 #i‚de‡
__USE_FILE_OFFSET64


354 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

355 
size_t
 
__nbyãs
,

356 
__off_t
 *
__ª°ri˘
 
__ba£p
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

359 #ifde‡
__REDIRECT


360 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

361 (
__fd
, *
__ª°ri˘
 
__buf
,

362 
size_t
 
__nbyãs
,

363 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

364 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

366 
	#gëdúíåõs
 
gëdúíåõs64


	)

370 #ifde‡
__USE_LARGEFILE64


371 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

372 
size_t
 
__nbyãs
,

373 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

374 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

378 #ifde‡
__USE_GNU


380 #i‚de‡
__USE_FILE_OFFSET64


381 
	$vîsi⁄s‹t
 (
__c⁄°
 
dúít
 **
__e1
,

382 
__c⁄°
 
dúít
 **
__e2
)

383 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

385 #ifde‡
__REDIRECT


386 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

387 (
__c⁄°
 
dúít
 **
__e1
,

388 
__c⁄°
 
dúít
 **
__e2
),

389 
vîsi⁄s‹t64
)

390 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

392 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

396 #ifde‡
__USE_LARGEFILE64


397 
	$vîsi⁄s‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

398 
__c⁄°
 
dúít64
 **
__e2
)

399 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

403 
__END_DECLS


	@/usr/include/dlfcn.h

20 #i‚def 
_DLFCN_H


21 
	#_DLFCN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

28 
	~<bôs/dlf˙.h
>

31 #ifde‡
__USE_GNU


36 
	#RTLD_NEXT
 ((*Ë-1l)

	)

41 
	#RTLD_DEFAULT
 ((*Ë0)

	)

45 
	tLmid_t
;

48 
	#LM_ID_BASE
 0

	)

49 
	#LM_ID_NEWLM
 -1

	)

53 
__BEGIN_DECLS


57 *
	$dl›í
 (
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

61 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

66 
__c⁄°
 *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

68 #ifde‡
__USE_GNU


70 *
	$dlm›í
 (
Lmid_t
 
__nsid
, 
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

74 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

75 
__c⁄°
 *
__ª°ri˘
 
__«me
,

76 
__c⁄°
 *
__ª°ri˘
 
__vîsi⁄
)

77 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

83 *
	$dÀº‹
 (Ë
__THROW
;

86 #ifde‡
__USE_GNU


91 
__c⁄°
 *
dli_‚ame
;

92 *
dli_fba£
;

93 
__c⁄°
 *
dli_¢ame
;

94 *
dli_ßddr
;

95 } 
	tDl_öfo
;

99 
	$dœddr
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
)

100 
__THROW
 
	`__n⁄nuŒ
 ((2));

103 
	$dœddr1
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
,

104 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

112 
RTLD_DL_SYMENT
 = 1,

115 
RTLD_DL_LINKMAP
 = 2

124 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

125 
__ªque°
, *
__ª°ri˘
 
__¨g
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

132 
RTLD_DI_LMID
 = 1,

136 
RTLD_DI_LINKMAP
 = 2,

138 
RTLD_DI_CONFIGADDR
 = 3,

145 
RTLD_DI_SERINFO
 = 4,

146 
RTLD_DI_SERINFOSIZE
 = 5,

150 
RTLD_DI_ORIGIN
 = 6,

152 
RTLD_DI_PROFILENAME
 = 7,

153 
RTLD_DI_PROFILEOUT
 = 8,

158 
RTLD_DI_TLS_MODID
 = 9,

164 
RTLD_DI_TLS_DATA
 = 10,

166 
RTLD_DI_MAX
 = 10

174 *
dls_«me
;

175 
dls_Êags
;

176 } 
	tDl_£Ω©h
;

182 
size_t
 
dls_size
;

183 
dls_˙t
;

184 
Dl_£Ω©h
 
dls_£Ω©h
[1];

185 } 
	tDl_£röfo
;

189 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

110 
f˙é
 (
__fd
, 
__cmd
, ...);

118 #i‚de‡
__USE_FILE_OFFSET64


119 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

121 #ifde‡
__REDIRECT


122 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

123 
	`__n⁄nuŒ
 ((1));

125 
	#›í
 
›í64


	)

128 #ifde‡
__USE_LARGEFILE64


129 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__USE_ATFILE


142 #i‚de‡
__USE_FILE_OFFSET64


143 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

144 
	`__n⁄nuŒ
 ((2));

146 #ifde‡
__REDIRECT


147 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

148 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

150 
	#›í©
 
›í©64


	)

153 #ifde‡
__USE_LARGEFILE64


154 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

155 
	`__n⁄nuŒ
 ((2));

164 #i‚de‡
__USE_FILE_OFFSET64


165 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

167 #ifde‡
__REDIRECT


168 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

169 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

171 
	#¸ót
 
¸ót64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

179 && !
deföed
 
__USE_POSIX
))

188 
	#F_ULOCK
 0

	)

189 
	#F_LOCK
 1

	)

190 
	#F_TLOCK
 2

	)

191 
	#F_TEST
 3

	)

193 #i‚de‡
__USE_FILE_OFFSET64


194 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

196 #ifde‡
__REDIRECT


197 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

199 
	#lockf
 
lockf64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

207 #ifde‡
__USE_XOPEN2K


210 #i‚de‡
__USE_FILE_OFFSET64


211 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

212 
__advi£
Ë
__THROW
;

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

216 
__off64_t
 
__Àn
, 
__advi£
),

217 
posix_Ádvi£64
);

219 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

222 #ifde‡
__USE_LARGEFILE64


223 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

224 
__advi£
Ë
__THROW
;

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

237 
__off64_t
 
__Àn
),

238 
posix_ÁŒoˇã64
);

240 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

243 #ifde‡
__USE_LARGEFILE64


244 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

251 && 
deföed
 
__va_¨g_∑ck_Àn


252 
	~<bôs/f˙é2.h
>

255 
__END_DECLS


	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/ethtool.h

13 #i‚de‡
_LINUX_ETHTOOL_H


14 
	#_LINUX_ETHTOOL_H


	)

16 
	~<löux/ty≥s.h
>

17 
	~<löux/if_ëhî.h
>

20 
	sëhtoﬁ_cmd
 {

21 
__u32
 
	mcmd
;

22 
__u32
 
	msuµ‹ãd
;

23 
__u32
 
	madvîtisög
;

24 
__u16
 
	m•ìd
;

28 
__u8
 
	mdu∂ex
;

29 
__u8
 
	mp‹t
;

30 
__u8
 
	mphy_addªss
;

34 
__u8
 
	må™s˚ivî
;

35 
__u8
 
	maut⁄eg
;

36 
__u8
 
	mmdio_suµ‹t
;

39 
__u32
 
	mmaxtxpkt
;

40 
__u32
 
	mmaxrxpkt
;

41 
__u16
 
	m•ìd_hi
;

45 
__u8
 
	mëh_ç_mdix
;

46 
__u8
 
	mª£rved2
;

47 
__u32
 
	mÕ_advîtisög
;

48 
__u32
 
	mª£rved
[2];

51 
__ölöe__
 
	$ëhtoﬁ_cmd_•ìd_£t
(
ëhtoﬁ_cmd
 *
ï
,

52 
__u32
 
•ìd
)

55 
ï
->
•ìd
 = (
__u16
)speed;

56 
ï
->
•ìd_hi
 = (
__u16
)(
•ìd
 >> 16);

57 
	}
}

59 
__ölöe__
 
__u32
 
	$ëhtoﬁ_cmd_•ìd
(c⁄° 
ëhtoﬁ_cmd
 *
ï
)

61  (
ï
->
•ìd_hi
 << 16Ë|Ép->
•ìd
;

62 
	}
}

69 
	#ETH_MDIO_SUPPORTS_C22
 1

	)

76 
	#ETH_MDIO_SUPPORTS_C45
 2

	)

78 
	#ETHTOOL_FWVERS_LEN
 32

	)

79 
	#ETHTOOL_BUSINFO_LEN
 32

	)

81 
	sëhtoﬁ_drvöfo
 {

82 
__u32
 
	mcmd
;

83 
	mdrivî
[32];

84 
	mvîsi⁄
[32];

85 
	mfw_vîsi⁄
[
ETHTOOL_FWVERS_LEN
];

86 
	mbus_öfo
[
ETHTOOL_BUSINFO_LEN
];

88 
	mª£rved1
[32];

89 
	mª£rved2
[12];

97 
__u32
 
	mn_¥iv_Êags
;

98 
__u32
 
	mn_°©s
;

99 
__u32
 
	mã°öfo_Àn
;

100 
__u32
 
	mìdump_Àn
;

101 
__u32
 
	mªgdump_Àn
;

104 
	#SOPASS_MAX
 6

	)

106 
	sëhtoﬁ_wﬁöfo
 {

107 
__u32
 
	mcmd
;

108 
__u32
 
	msuµ‹ãd
;

109 
__u32
 
	mwﬁ›ts
;

110 
__u8
 
	ms›ass
[
SOPASS_MAX
];

114 
	sëhtoﬁ_vÆue
 {

115 
__u32
 
	mcmd
;

116 
__u32
 
	md©a
;

120 
	sëhtoﬁ_ªgs
 {

121 
__u32
 
	mcmd
;

122 
__u32
 
	mvîsi⁄
;

123 
__u32
 
	mÀn
;

124 
__u8
 
	md©a
[0];

128 
	sëhtoﬁ_ì¥om
 {

129 
__u32
 
	mcmd
;

130 
__u32
 
	mmagic
;

131 
__u32
 
	moff£t
;

132 
__u32
 
	mÀn
;

133 
__u8
 
	md©a
[0];

146 
	sëhtoﬁ_modöfo
 {

147 
__u32
 
	mcmd
;

148 
__u32
 
	mty≥
;

149 
__u32
 
	mì¥om_Àn
;

150 
__u32
 
	mª£rved
[8];

225 
	sëhtoﬁ_cﬂÀs˚
 {

226 
__u32
 
	mcmd
;

227 
__u32
 
	mrx_cﬂÀs˚_u£cs
;

228 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames
;

229 
__u32
 
	mrx_cﬂÀs˚_u£cs_úq
;

230 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_úq
;

231 
__u32
 
	mtx_cﬂÀs˚_u£cs
;

232 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames
;

233 
__u32
 
	mtx_cﬂÀs˚_u£cs_úq
;

234 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_úq
;

235 
__u32
 
	m°©s_block_cﬂÀs˚_u£cs
;

236 
__u32
 
	mu£_ad≠tive_rx_cﬂÀs˚
;

237 
__u32
 
	mu£_ad≠tive_tx_cﬂÀs˚
;

238 
__u32
 
	mpkt_øã_low
;

239 
__u32
 
	mrx_cﬂÀs˚_u£cs_low
;

240 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_low
;

241 
__u32
 
	mtx_cﬂÀs˚_u£cs_low
;

242 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_low
;

243 
__u32
 
	mpkt_øã_high
;

244 
__u32
 
	mrx_cﬂÀs˚_u£cs_high
;

245 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_high
;

246 
__u32
 
	mtx_cﬂÀs˚_u£cs_high
;

247 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_high
;

248 
__u32
 
	møã_ßm∂e_öãrvÆ
;

252 
	sëhtoﬁ_rög∑øm
 {

253 
__u32
 
	mcmd
;

259 
__u32
 
	mrx_max_≥ndög
;

260 
__u32
 
	mrx_möi_max_≥ndög
;

261 
__u32
 
	mrx_jumbo_max_≥ndög
;

262 
__u32
 
	mtx_max_≥ndög
;

267 
__u32
 
	mrx_≥ndög
;

268 
__u32
 
	mrx_möi_≥ndög
;

269 
__u32
 
	mrx_jumbo_≥ndög
;

270 
__u32
 
	mtx_≥ndög
;

289 
	sëhtoﬁ_ch™√ls
 {

290 
__u32
 
	mcmd
;

291 
__u32
 
	mmax_rx
;

292 
__u32
 
	mmax_tx
;

293 
__u32
 
	mmax_Ÿhî
;

294 
__u32
 
	mmax_comböed
;

295 
__u32
 
	mrx_cou¡
;

296 
__u32
 
	mtx_cou¡
;

297 
__u32
 
	mŸhî_cou¡
;

298 
__u32
 
	mcomböed_cou¡
;

302 
	sëhtoﬁ_∑u£∑øm
 {

303 
__u32
 
	mcmd
;

315 
__u32
 
	maut⁄eg
;

316 
__u32
 
	mrx_∑u£
;

317 
__u32
 
	mtx_∑u£
;

320 
	#ETH_GSTRING_LEN
 32

	)

321 
	eëhtoﬁ_°rög£t
 {

322 
	mETH_SS_TEST
 = 0,

323 
	mETH_SS_STATS
,

324 
	mETH_SS_PRIV_FLAGS
,

325 
	mETH_SS_NTUPLE_FILTERS
,

326 
	mETH_SS_FEATURES
,

330 
	sëhtoﬁ_g°rögs
 {

331 
__u32
 
	mcmd
;

332 
__u32
 
	m°rög_£t
;

333 
__u32
 
	mÀn
;

334 
__u8
 
	md©a
[0];

337 
	sëhtoﬁ_s£t_öfo
 {

338 
__u32
 
	mcmd
;

339 
__u32
 
	mª£rved
;

340 
__u64
 
	ms£t_mask
;

342 
__u32
 
	md©a
[0];

358 
	eëhtoﬁ_ã°_Êags
 {

359 
	mETH_TEST_FL_OFFLINE
 = (1 << 0),

360 
	mETH_TEST_FL_FAILED
 = (1 << 1),

361 
	mETH_TEST_FL_EXTERNAL_LB
 = (1 << 2),

362 
	mETH_TEST_FL_EXTERNAL_LB_DONE
 = (1 << 3),

366 
	sëhtoﬁ_ã°
 {

367 
__u32
 
	mcmd
;

368 
__u32
 
	mÊags
;

369 
__u32
 
	mª£rved
;

370 
__u32
 
	mÀn
;

371 
__u64
 
	md©a
[0];

375 
	sëhtoﬁ_°©s
 {

376 
__u32
 
	mcmd
;

377 
__u32
 
	mn_°©s
;

378 
__u64
 
	md©a
[0];

381 
	sëhtoﬁ_≥rm_addr
 {

382 
__u32
 
	mcmd
;

383 
__u32
 
	msize
;

384 
__u8
 
	md©a
[0];

396 
	eëhtoﬁ_Êags
 {

397 
	mETH_FLAG_TXVLAN
 = (1 << 7),

398 
	mETH_FLAG_RXVLAN
 = (1 << 8),

399 
	mETH_FLAG_LRO
 = (1 << 15),

400 
	mETH_FLAG_NTUPLE
 = (1 << 27),

401 
	mETH_FLAG_RXHASH
 = (1 << 28),

420 
	sëhtoﬁ_t˝ù4_•ec
 {

421 
__be32
 
	mù4§c
;

422 
__be32
 
	mù4d°
;

423 
__be16
 
	mp§c
;

424 
__be16
 
	mpd°
;

425 
__u8
 
	mtos
;

437 
	sëhtoﬁ_ah_e•ù4_•ec
 {

438 
__be32
 
	mù4§c
;

439 
__be32
 
	mù4d°
;

440 
__be32
 
	m•i
;

441 
__u8
 
	mtos
;

444 
	#ETH_RX_NFC_IP4
 1

	)

455 
	sëhtoﬁ_u§ù4_•ec
 {

456 
__be32
 
	mù4§c
;

457 
__be32
 
	mù4d°
;

458 
__be32
 
	ml4_4_byãs
;

459 
__u8
 
	mtos
;

460 
__u8
 
	mù_vî
;

461 
__u8
 
	m¥Ÿo
;

464 
	uëhtoﬁ_Êow_uni⁄
 {

465 
ëhtoﬁ_t˝ù4_•ec
 
	mt˝_ù4_•ec
;

466 
ëhtoﬁ_t˝ù4_•ec
 
	mudp_ù4_•ec
;

467 
ëhtoﬁ_t˝ù4_•ec
 
	ms˘p_ù4_•ec
;

468 
ëhtoﬁ_ah_e•ù4_•ec
 
	mah_ù4_•ec
;

469 
ëhtoﬁ_ah_e•ù4_•ec
 
	me•_ù4_•ec
;

470 
ëhtoﬁ_u§ù4_•ec
 
	mu§_ù4_•ec
;

471 
ëhhdr
 
	mëhî_•ec
;

472 
__u8
 
	mhd©a
[60];

475 
	sëhtoﬁ_Êow_ext
 {

476 
__be16
 
	mvœn_ëy≥
;

477 
__be16
 
	mvœn_tci
;

478 
__be32
 
	md©a
[2];

496 
	sëhtoﬁ_rx_Êow_•ec
 {

497 
__u32
 
	mÊow_ty≥
;

498 
ëhtoﬁ_Êow_uni⁄
 
	mh_u
;

499 
ëhtoﬁ_Êow_ext
 
	mh_ext
;

500 
ëhtoﬁ_Êow_uni⁄
 
	mm_u
;

501 
ëhtoﬁ_Êow_ext
 
	mm_ext
;

502 
__u64
 
	mrög_cookõ
;

503 
__u32
 
	mloˇti⁄
;

558 
	sëhtoﬁ_rxnfc
 {

559 
__u32
 
	mcmd
;

560 
__u32
 
	mÊow_ty≥
;

561 
__u64
 
	md©a
;

562 
ëhtoﬁ_rx_Êow_•ec
 
	mfs
;

563 
__u32
 
	mruÀ_˙t
;

564 
__u32
 
	mruÀ_locs
[0];

581 
	sëhtoﬁ_rxfh_ödú
 {

582 
__u32
 
	mcmd
;

583 
__u32
 
	msize
;

584 
__u32
 
	mrög_ödex
[0];

603 
	sëhtoﬁ_rx_¡u∂e_Êow_•ec
 {

604 
__u32
 
	mÊow_ty≥
;

606 
ëhtoﬁ_t˝ù4_•ec
 
	mt˝_ù4_•ec
;

607 
ëhtoﬁ_t˝ù4_•ec
 
	mudp_ù4_•ec
;

608 
ëhtoﬁ_t˝ù4_•ec
 
	ms˘p_ù4_•ec
;

609 
ëhtoﬁ_ah_e•ù4_•ec
 
	mah_ù4_•ec
;

610 
ëhtoﬁ_ah_e•ù4_•ec
 
	me•_ù4_•ec
;

611 
ëhtoﬁ_u§ù4_•ec
 
	mu§_ù4_•ec
;

612 
ëhhdr
 
	mëhî_•ec
;

613 
__u8
 
	mhd©a
[72];

614 } 
	mh_u
, 
	mm_u
;

616 
__u16
 
	mvœn_èg
;

617 
__u16
 
	mvœn_èg_mask
;

618 
__u64
 
	md©a
;

619 
__u64
 
	md©a_mask
;

621 
__s32
 
	ma˘i⁄
;

622 
	#ETHTOOL_RXNTUPLE_ACTION_DROP
 (-1Ë

	)

623 
	#ETHTOOL_RXNTUPLE_ACTION_CLEAR
 (-2Ë

	)

631 
	sëhtoﬁ_rx_¡u∂e
 {

632 
__u32
 
	mcmd
;

633 
ëhtoﬁ_rx_¡u∂e_Êow_•ec
 
	mfs
;

636 
	#ETHTOOL_FLASH_MAX_FILENAME
 128

	)

637 
	eëhtoﬁ_Êash_›_ty≥
 {

638 
	mETHTOOL_FLASH_ALL_REGIONS
 = 0,

642 
	sëhtoﬁ_Êash
 {

643 
__u32
 
	mcmd
;

644 
__u32
 
	mªgi⁄
;

645 
	md©a
[
ETHTOOL_FLASH_MAX_FILENAME
];

663 
	#ETH_FW_DUMP_DISABLE
 0

	)

665 
	sëhtoﬁ_dump
 {

666 
__u32
 
	mcmd
;

667 
__u32
 
	mvîsi⁄
;

668 
__u32
 
	mÊag
;

669 
__u32
 
	mÀn
;

670 
__u8
 
	md©a
[0];

682 
	sëhtoﬁ_gë_„©uªs_block
 {

683 
__u32
 
	mavaûabÀ
;

684 
__u32
 
	mªque°ed
;

685 
__u32
 
	ma˘ive
;

686 
__u32
 
	m√vî_ch™ged
;

696 
	sëhtoﬁ_g„©uªs
 {

697 
__u32
 
	mcmd
;

698 
__u32
 
	msize
;

699 
ëhtoﬁ_gë_„©uªs_block
 
	m„©uªs
[0];

707 
	sëhtoﬁ_£t_„©uªs_block
 {

708 
__u32
 
	mvÆid
;

709 
__u32
 
	mªque°ed
;

718 
	sëhtoﬁ_s„©uªs
 {

719 
__u32
 
	mcmd
;

720 
__u32
 
	msize
;

721 
ëhtoﬁ_£t_„©uªs_block
 
	m„©uªs
[0];

737 
	sëhtoﬁ_ts_öfo
 {

738 
__u32
 
	mcmd
;

739 
__u32
 
	mso_time°ampög
;

740 
__s32
 
	mphc_ödex
;

741 
__u32
 
	mtx_ty≥s
;

742 
__u32
 
	mtx_ª£rved
[3];

743 
__u32
 
	mrx_fûãrs
;

744 
__u32
 
	mrx_ª£rved
[3];

772 
	eëhtoﬁ_s„©uªs_ªtvÆ_bôs
 {

773 
	mETHTOOL_F_UNSUPPORTED__BIT
,

774 
	mETHTOOL_F_WISH__BIT
,

775 
	mETHTOOL_F_COMPAT__BIT
,

778 
	#ETHTOOL_F_UNSUPPORTED
 (1 << 
ETHTOOL_F_UNSUPPORTED__BIT
)

	)

779 
	#ETHTOOL_F_WISH
 (1 << 
ETHTOOL_F_WISH__BIT
)

	)

780 
	#ETHTOOL_F_COMPAT
 (1 << 
ETHTOOL_F_COMPAT__BIT
)

	)

784 
	#ETHTOOL_GSET
 0x00000001

	)

785 
	#ETHTOOL_SSET
 0x00000002

	)

786 
	#ETHTOOL_GDRVINFO
 0x00000003

	)

787 
	#ETHTOOL_GREGS
 0x00000004

	)

788 
	#ETHTOOL_GWOL
 0x00000005

	)

789 
	#ETHTOOL_SWOL
 0x00000006

	)

790 
	#ETHTOOL_GMSGLVL
 0x00000007

	)

791 
	#ETHTOOL_SMSGLVL
 0x00000008

	)

792 
	#ETHTOOL_NWAY_RST
 0x00000009

	)

795 
	#ETHTOOL_GLINK
 0x0000000a

	)

796 
	#ETHTOOL_GEEPROM
 0x0000000b

	)

797 
	#ETHTOOL_SEEPROM
 0x0000000¯

	)

798 
	#ETHTOOL_GCOALESCE
 0x0000000ê

	)

799 
	#ETHTOOL_SCOALESCE
 0x0000000‡

	)

800 
	#ETHTOOL_GRINGPARAM
 0x00000010

	)

801 
	#ETHTOOL_SRINGPARAM
 0x00000011

	)

802 
	#ETHTOOL_GPAUSEPARAM
 0x00000012

	)

803 
	#ETHTOOL_SPAUSEPARAM
 0x00000013

	)

804 
	#ETHTOOL_GRXCSUM
 0x00000014

	)

805 
	#ETHTOOL_SRXCSUM
 0x00000015

	)

806 
	#ETHTOOL_GTXCSUM
 0x00000016

	)

807 
	#ETHTOOL_STXCSUM
 0x00000017

	)

808 
	#ETHTOOL_GSG
 0x00000018

	)

810 
	#ETHTOOL_SSG
 0x00000019

	)

812 
	#ETHTOOL_TEST
 0x0000001®

	)

813 
	#ETHTOOL_GSTRINGS
 0x0000001b

	)

814 
	#ETHTOOL_PHYS_ID
 0x0000001¯

	)

815 
	#ETHTOOL_GSTATS
 0x0000001d

	)

816 
	#ETHTOOL_GTSO
 0x0000001ê

	)

817 
	#ETHTOOL_STSO
 0x0000001‡

	)

818 
	#ETHTOOL_GPERMADDR
 0x00000020

	)

819 
	#ETHTOOL_GUFO
 0x00000021

	)

820 
	#ETHTOOL_SUFO
 0x00000022

	)

821 
	#ETHTOOL_GGSO
 0x00000023

	)

822 
	#ETHTOOL_SGSO
 0x00000024

	)

823 
	#ETHTOOL_GFLAGS
 0x00000025

	)

824 
	#ETHTOOL_SFLAGS
 0x00000026

	)

825 
	#ETHTOOL_GPFLAGS
 0x00000027

	)

826 
	#ETHTOOL_SPFLAGS
 0x00000028

	)

828 
	#ETHTOOL_GRXFH
 0x00000029

	)

829 
	#ETHTOOL_SRXFH
 0x0000002®

	)

830 
	#ETHTOOL_GGRO
 0x0000002b

	)

831 
	#ETHTOOL_SGRO
 0x0000002¯

	)

832 
	#ETHTOOL_GRXRINGS
 0x0000002d

	)

833 
	#ETHTOOL_GRXCLSRLCNT
 0x0000002ê

	)

834 
	#ETHTOOL_GRXCLSRULE
 0x0000002‡

	)

835 
	#ETHTOOL_GRXCLSRLALL
 0x00000030

	)

836 
	#ETHTOOL_SRXCLSRLDEL
 0x00000031

	)

837 
	#ETHTOOL_SRXCLSRLINS
 0x00000032

	)

838 
	#ETHTOOL_FLASHDEV
 0x00000033

	)

839 
	#ETHTOOL_RESET
 0x00000034

	)

840 
	#ETHTOOL_SRXNTUPLE
 0x00000035

	)

841 
	#ETHTOOL_GRXNTUPLE
 0x00000036

	)

842 
	#ETHTOOL_GSSET_INFO
 0x00000037

	)

843 
	#ETHTOOL_GRXFHINDIR
 0x00000038

	)

844 
	#ETHTOOL_SRXFHINDIR
 0x00000039

	)

846 
	#ETHTOOL_GFEATURES
 0x0000003®

	)

847 
	#ETHTOOL_SFEATURES
 0x0000003b

	)

848 
	#ETHTOOL_GCHANNELS
 0x0000003¯

	)

849 
	#ETHTOOL_SCHANNELS
 0x0000003d

	)

850 
	#ETHTOOL_SET_DUMP
 0x0000003ê

	)

851 
	#ETHTOOL_GET_DUMP_FLAG
 0x0000003‡

	)

852 
	#ETHTOOL_GET_DUMP_DATA
 0x00000040

	)

853 
	#ETHTOOL_GET_TS_INFO
 0x00000041

	)

854 
	#ETHTOOL_GMODULEINFO
 0x00000042

	)

855 
	#ETHTOOL_GMODULEEEPROM
 0x00000043

	)

858 
	#SPARC_ETH_GSET
 
ETHTOOL_GSET


	)

859 
	#SPARC_ETH_SSET
 
ETHTOOL_SSET


	)

862 
	#SUPPORTED_10ba£T_HÆf
 (1 << 0)

	)

863 
	#SUPPORTED_10ba£T_FuŒ
 (1 << 1)

	)

864 
	#SUPPORTED_100ba£T_HÆf
 (1 << 2)

	)

865 
	#SUPPORTED_100ba£T_FuŒ
 (1 << 3)

	)

866 
	#SUPPORTED_1000ba£T_HÆf
 (1 << 4)

	)

867 
	#SUPPORTED_1000ba£T_FuŒ
 (1 << 5)

	)

868 
	#SUPPORTED_Aut⁄eg
 (1 << 6)

	)

869 
	#SUPPORTED_TP
 (1 << 7)

	)

870 
	#SUPPORTED_AUI
 (1 << 8)

	)

871 
	#SUPPORTED_MII
 (1 << 9)

	)

872 
	#SUPPORTED_FIBRE
 (1 << 10)

	)

873 
	#SUPPORTED_BNC
 (1 << 11)

	)

874 
	#SUPPORTED_10000ba£T_FuŒ
 (1 << 12)

	)

875 
	#SUPPORTED_Pau£
 (1 << 13)

	)

876 
	#SUPPORTED_Asym_Pau£
 (1 << 14)

	)

877 
	#SUPPORTED_2500ba£X_FuŒ
 (1 << 15)

	)

878 
	#SUPPORTED_Back∂™e
 (1 << 16)

	)

879 
	#SUPPORTED_1000ba£KX_FuŒ
 (1 << 17)

	)

880 
	#SUPPORTED_10000ba£KX4_FuŒ
 (1 << 18)

	)

881 
	#SUPPORTED_10000ba£KR_FuŒ
 (1 << 19)

	)

882 
	#SUPPORTED_10000ba£R_FEC
 (1 << 20)

	)

883 
	#SUPPORTED_20000ba£MLD2_FuŒ
 (1 << 21)

	)

884 
	#SUPPORTED_20000ba£KR2_FuŒ
 (1 << 22)

	)

887 
	#ADVERTISED_10ba£T_HÆf
 (1 << 0)

	)

888 
	#ADVERTISED_10ba£T_FuŒ
 (1 << 1)

	)

889 
	#ADVERTISED_100ba£T_HÆf
 (1 << 2)

	)

890 
	#ADVERTISED_100ba£T_FuŒ
 (1 << 3)

	)

891 
	#ADVERTISED_1000ba£T_HÆf
 (1 << 4)

	)

892 
	#ADVERTISED_1000ba£T_FuŒ
 (1 << 5)

	)

893 
	#ADVERTISED_Aut⁄eg
 (1 << 6)

	)

894 
	#ADVERTISED_TP
 (1 << 7)

	)

895 
	#ADVERTISED_AUI
 (1 << 8)

	)

896 
	#ADVERTISED_MII
 (1 << 9)

	)

897 
	#ADVERTISED_FIBRE
 (1 << 10)

	)

898 
	#ADVERTISED_BNC
 (1 << 11)

	)

899 
	#ADVERTISED_10000ba£T_FuŒ
 (1 << 12)

	)

900 
	#ADVERTISED_Pau£
 (1 << 13)

	)

901 
	#ADVERTISED_Asym_Pau£
 (1 << 14)

	)

902 
	#ADVERTISED_2500ba£X_FuŒ
 (1 << 15)

	)

903 
	#ADVERTISED_Back∂™e
 (1 << 16)

	)

904 
	#ADVERTISED_1000ba£KX_FuŒ
 (1 << 17)

	)

905 
	#ADVERTISED_10000ba£KX4_FuŒ
 (1 << 18)

	)

906 
	#ADVERTISED_10000ba£KR_FuŒ
 (1 << 19)

	)

907 
	#ADVERTISED_10000ba£R_FEC
 (1 << 20)

	)

908 
	#ADVERTISED_20000ba£MLD2_FuŒ
 (1 << 21)

	)

909 
	#ADVERTISED_20000ba£KR2_FuŒ
 (1 << 22)

	)

918 
	#SPEED_10
 10

	)

919 
	#SPEED_100
 100

	)

920 
	#SPEED_1000
 1000

	)

921 
	#SPEED_2500
 2500

	)

922 
	#SPEED_10000
 10000

	)

923 
	#SPEED_UNKNOWN
 -1

	)

926 
	#DUPLEX_HALF
 0x00

	)

927 
	#DUPLEX_FULL
 0x01

	)

928 
	#DUPLEX_UNKNOWN
 0xff

	)

931 
	#PORT_TP
 0x00

	)

932 
	#PORT_AUI
 0x01

	)

933 
	#PORT_MII
 0x02

	)

934 
	#PORT_FIBRE
 0x03

	)

935 
	#PORT_BNC
 0x04

	)

936 
	#PORT_DA
 0x05

	)

937 
	#PORT_NONE
 0xef

	)

938 
	#PORT_OTHER
 0xff

	)

941 
	#XCVR_INTERNAL
 0x00

	)

942 
	#XCVR_EXTERNAL
 0x01

	)

943 
	#XCVR_DUMMY1
 0x02

	)

944 
	#XCVR_DUMMY2
 0x03

	)

945 
	#XCVR_DUMMY3
 0x04

	)

950 
	#AUTONEG_DISABLE
 0x00

	)

951 
	#AUTONEG_ENABLE
 0x01

	)

954 
	#ETH_TP_MDI_INVALID
 0x00

	)

955 
	#ETH_TP_MDI
 0x01

	)

956 
	#ETH_TP_MDI_X
 0x02

	)

959 
	#WAKE_PHY
 (1 << 0)

	)

960 
	#WAKE_UCAST
 (1 << 1)

	)

961 
	#WAKE_MCAST
 (1 << 2)

	)

962 
	#WAKE_BCAST
 (1 << 3)

	)

963 
	#WAKE_ARP
 (1 << 4)

	)

964 
	#WAKE_MAGIC
 (1 << 5)

	)

965 
	#WAKE_MAGICSECURE
 (1 << 6Ë

	)

968 
	#TCP_V4_FLOW
 0x01

	)

969 
	#UDP_V4_FLOW
 0x02

	)

970 
	#SCTP_V4_FLOW
 0x03

	)

971 
	#AH_ESP_V4_FLOW
 0x04

	)

972 
	#TCP_V6_FLOW
 0x05

	)

973 
	#UDP_V6_FLOW
 0x06

	)

974 
	#SCTP_V6_FLOW
 0x07

	)

975 
	#AH_ESP_V6_FLOW
 0x08

	)

976 
	#AH_V4_FLOW
 0x09

	)

977 
	#ESP_V4_FLOW
 0x0®

	)

978 
	#AH_V6_FLOW
 0x0b

	)

979 
	#ESP_V6_FLOW
 0x0¯

	)

980 
	#IP_USER_FLOW
 0x0d

	)

981 
	#IPV4_FLOW
 0x10

	)

982 
	#IPV6_FLOW
 0x11

	)

983 
	#ETHER_FLOW
 0x12

	)

985 
	#FLOW_EXT
 0x80000000

	)

988 
	#RXH_L2DA
 (1 << 1)

	)

989 
	#RXH_VLAN
 (1 << 2)

	)

990 
	#RXH_L3_PROTO
 (1 << 3)

	)

991 
	#RXH_IP_SRC
 (1 << 4)

	)

992 
	#RXH_IP_DST
 (1 << 5)

	)

993 
	#RXH_L4_B_0_1
 (1 << 6Ë

	)

994 
	#RXH_L4_B_2_3
 (1 << 7Ë

	)

995 
	#RXH_DISCARD
 (1 << 31)

	)

997 
	#RX_CLS_FLOW_DISC
 0xffffffffffffffffULL

	)

1000 
	#RX_CLS_LOC_SPECIAL
 0x80000000

	)

1001 
	#RX_CLS_LOC_ANY
 0xffffffff

	)

1002 
	#RX_CLS_LOC_FIRST
 0xffffff„

	)

1003 
	#RX_CLS_LOC_LAST
 0xfffffffd

	)

1006 
	#ETH_MODULE_SFF_8079
 0x1

	)

1007 
	#ETH_MODULE_SFF_8079_LEN
 256

	)

1008 
	#ETH_MODULE_SFF_8472
 0x2

	)

1009 
	#ETH_MODULE_SFF_8472_LEN
 512

	)

1018 
	eëhtoﬁ_ª£t_Êags
 {

1024 
	mETH_RESET_MGMT
 = 1 << 0,

1025 
	mETH_RESET_IRQ
 = 1 << 1,

1026 
	mETH_RESET_DMA
 = 1 << 2,

1027 
	mETH_RESET_FILTER
 = 1 << 3,

1028 
	mETH_RESET_OFFLOAD
 = 1 << 4,

1029 
	mETH_RESET_MAC
 = 1 << 5,

1030 
	mETH_RESET_PHY
 = 1 << 6,

1031 
	mETH_RESET_RAM
 = 1 << 7,

1034 
	mETH_RESET_DEDICATED
 = 0x0000ffff,

1036 
	mETH_RESET_ALL
 = 0xffffffff,

1039 
	#ETH_RESET_SHARED_SHIFT
 16

	)

	@/usr/include/linux/if_packet.h

1 #i‚de‡
__LINUX_IF_PACKET_H


2 
	#__LINUX_IF_PACKET_H


	)

4 
	~<löux/ty≥s.h
>

6 
	ssockaddr_pkt
 {

7 
	m•kt_Ámûy
;

8 
	m•kt_devi˚
[14];

9 
__be16
 
	m•kt_¥Ÿocﬁ
;

12 
	ssockaddr_Œ
 {

13 
	m¶l_Ámûy
;

14 
__be16
 
	m¶l_¥Ÿocﬁ
;

15 
	m¶l_ifödex
;

16 
	m¶l_h©y≥
;

17 
	m¶l_pkây≥
;

18 
	m¶l_hÆí
;

19 
	m¶l_addr
[8];

24 
	#PACKET_HOST
 0

	)

25 
	#PACKET_BROADCAST
 1

	)

26 
	#PACKET_MULTICAST
 2

	)

27 
	#PACKET_OTHERHOST
 3

	)

28 
	#PACKET_OUTGOING
 4

	)

30 
	#PACKET_LOOPBACK
 5

	)

31 
	#PACKET_FASTROUTE
 6

	)

35 
	#PACKET_ADD_MEMBERSHIP
 1

	)

36 
	#PACKET_DROP_MEMBERSHIP
 2

	)

37 
	#PACKET_RECV_OUTPUT
 3

	)

39 
	#PACKET_RX_RING
 5

	)

40 
	#PACKET_STATISTICS
 6

	)

41 
	#PACKET_COPY_THRESH
 7

	)

42 
	#PACKET_AUXDATA
 8

	)

43 
	#PACKET_ORIGDEV
 9

	)

44 
	#PACKET_VERSION
 10

	)

45 
	#PACKET_HDRLEN
 11

	)

46 
	#PACKET_RESERVE
 12

	)

47 
	#PACKET_TX_RING
 13

	)

48 
	#PACKET_LOSS
 14

	)

49 
	#PACKET_VNET_HDR
 15

	)

50 
	#PACKET_TX_TIMESTAMP
 16

	)

51 
	#PACKET_TIMESTAMP
 17

	)

52 
	#PACKET_FANOUT
 18

	)

54 
	#PACKET_FANOUT_HASH
 0

	)

55 
	#PACKET_FANOUT_LB
 1

	)

56 
	#PACKET_FANOUT_CPU
 2

	)

57 
	#PACKET_FANOUT_FLAG_DEFRAG
 0x8000

	)

59 
	sçackë_°©s
 {

60 
	mç_∑ckës
;

61 
	mç_dr›s
;

64 
	sçackë_°©s_v3
 {

65 
	mç_∑ckës
;

66 
	mç_dr›s
;

67 
	mç_‰ìze_q_˙t
;

70 
	uçackë_°©s_u
 {

71 
çackë_°©s
 
	m°©s1
;

72 
çackë_°©s_v3
 
	m°©s3
;

75 
	sçackë_auxd©a
 {

76 
__u32
 
	mç_°©us
;

77 
__u32
 
	mç_Àn
;

78 
__u32
 
	mç_¢≠Àn
;

79 
__u16
 
	mç_mac
;

80 
__u16
 
	mç_√t
;

81 
__u16
 
	mç_vœn_tci
;

82 
__u16
 
	mç_∑ddög
;

86 
	#TP_STATUS_KERNEL
 0x0

	)

87 
	#TP_STATUS_USER
 0x1

	)

88 
	#TP_STATUS_COPY
 0x2

	)

89 
	#TP_STATUS_LOSING
 0x4

	)

90 
	#TP_STATUS_CSUMNOTREADY
 0x8

	)

91 
	#TP_STATUS_VLAN_VALID
 0x10

	)

92 
	#TP_STATUS_BLK_TMO
 0x20

	)

95 
	#TP_STATUS_AVAILABLE
 0x0

	)

96 
	#TP_STATUS_SEND_REQUEST
 0x1

	)

97 
	#TP_STATUS_SENDING
 0x2

	)

98 
	#TP_STATUS_WRONG_FORMAT
 0x4

	)

101 
	#TP_FT_REQ_FILL_RXHASH
 0x1

	)

103 
	sçackë_hdr
 {

104 
	mç_°©us
;

105 
	mç_Àn
;

106 
	mç_¢≠Àn
;

107 
	mç_mac
;

108 
	mç_√t
;

109 
	mç_£c
;

110 
	mç_u£c
;

113 
	#TPACKET_ALIGNMENT
 16

	)

114 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

115 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

117 
	sçackë2_hdr
 {

118 
__u32
 
	mç_°©us
;

119 
__u32
 
	mç_Àn
;

120 
__u32
 
	mç_¢≠Àn
;

121 
__u16
 
	mç_mac
;

122 
__u16
 
	mç_√t
;

123 
__u32
 
	mç_£c
;

124 
__u32
 
	mç_n£c
;

125 
__u16
 
	mç_vœn_tci
;

126 
__u16
 
	mç_∑ddög
;

129 
	sçackë_hdr_v¨ü¡1
 {

130 
__u32
 
	mç_rxhash
;

131 
__u32
 
	mç_vœn_tci
;

134 
	sçackë3_hdr
 {

135 
__u32
 
	mç_√xt_off£t
;

136 
__u32
 
	mç_£c
;

137 
__u32
 
	mç_n£c
;

138 
__u32
 
	mç_¢≠Àn
;

139 
__u32
 
	mç_Àn
;

140 
__u32
 
	mç_°©us
;

141 
__u16
 
	mç_mac
;

142 
__u16
 
	mç_√t
;

145 
çackë_hdr_v¨ü¡1
 
	mhv1
;

149 
	sçackë_bd_ts
 {

150 
	mts_£c
;

152 
	mts_u£c
;

153 
	mts_n£c
;

157 
	sçackë_hdr_v1
 {

158 
__u32
 
	mblock_°©us
;

159 
__u32
 
	mnum_pkts
;

160 
__u32
 
	moff£t_to_fú°_pkt
;

165 
__u32
 
	mblk_Àn
;

176 
__Æig√d_u64
 
	m£q_num
;

203 
çackë_bd_ts
 
	mts_fú°_pkt
, 
	mts_œ°_pkt
;

206 
	uçackë_bd_hódî_u
 {

207 
çackë_hdr_v1
 
	mbh1
;

210 
	sçackë_block_desc
 {

211 
__u32
 
	mvîsi⁄
;

212 
__u32
 
	moff£t_to_¥iv
;

213 
çackë_bd_hódî_u
 
	mhdr
;

216 
	#TPACKET2_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë2_hdr
)Ë+ (
sockaddr_Œ
))

	)

217 
	#TPACKET3_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë3_hdr
)Ë+ (
sockaddr_Œ
))

	)

219 
	eçackë_vîsi⁄s
 {

220 
	mTPACKET_V1
,

221 
	mTPACKET_V2
,

222 
	mTPACKET_V3


238 
	sçackë_ªq
 {

239 
	mç_block_size
;

240 
	mç_block_ƒ
;

241 
	mç_‰ame_size
;

242 
	mç_‰ame_ƒ
;

245 
	sçackë_ªq3
 {

246 
	mç_block_size
;

247 
	mç_block_ƒ
;

248 
	mç_‰ame_size
;

249 
	mç_‰ame_ƒ
;

250 
	mç_ªtúe_blk_tov
;

251 
	mç_sizeof_¥iv
;

252 
	mç_„©uª_ªq_w‹d
;

255 
	uçackë_ªq_u
 {

256 
çackë_ªq
 
	mªq
;

257 
çackë_ªq3
 
	mªq3
;

260 
	s∑ckë_mªq
 {

261 
	mmr_ifödex
;

262 
	mmr_ty≥
;

263 
	mmr_Æí
;

264 
	mmr_addªss
[8];

267 
	#PACKET_MR_MULTICAST
 0

	)

268 
	#PACKET_MR_PROMISC
 1

	)

269 
	#PACKET_MR_ALLMULTI
 2

	)

270 
	#PACKET_MR_UNICAST
 3

	)

	@/usr/include/linux/if_tun.h

16 #i‚de‡
__IF_TUN_H


17 
	#__IF_TUN_H


	)

19 
	~<löux/ty≥s.h
>

20 
	~<löux/if_ëhî.h
>

21 
	~<löux/fûãr.h
>

24 
	#TUN_READQ_SIZE
 500

	)

27 
	#TUN_TUN_DEV
 0x0001

	)

28 
	#TUN_TAP_DEV
 0x0002

	)

29 
	#TUN_TYPE_MASK
 0x000f

	)

31 
	#TUN_FASYNC
 0x0010

	)

32 
	#TUN_NOCHECKSUM
 0x0020

	)

33 
	#TUN_NO_PI
 0x0040

	)

34 
	#TUN_ONE_QUEUE
 0x0080

	)

35 
	#TUN_PERSIST
 0x0100

	)

36 
	#TUN_VNET_HDR
 0x0200

	)

39 
	#TUNSETNOCSUM
 
	`_IOW
('T', 200, )

	)

40 
	#TUNSETDEBUG
 
	`_IOW
('T', 201, )

	)

41 
	#TUNSETIFF
 
	`_IOW
('T', 202, )

	)

42 
	#TUNSETPERSIST
 
	`_IOW
('T', 203, )

	)

43 
	#TUNSETOWNER
 
	`_IOW
('T', 204, )

	)

44 
	#TUNSETLINK
 
	`_IOW
('T', 205, )

	)

45 
	#TUNSETGROUP
 
	`_IOW
('T', 206, )

	)

46 
	#TUNGETFEATURES
 
	`_IOR
('T', 207, )

	)

47 
	#TUNSETOFFLOAD
 
	`_IOW
('T', 208, )

	)

48 
	#TUNSETTXFILTER
 
	`_IOW
('T', 209, )

	)

49 
	#TUNGETIFF
 
	`_IOR
('T', 210, )

	)

50 
	#TUNGETSNDBUF
 
	`_IOR
('T', 211, )

	)

51 
	#TUNSETSNDBUF
 
	`_IOW
('T', 212, )

	)

52 
	#TUNATTACHFILTER
 
	`_IOW
('T', 213, 
sock_Ârog
)

	)

53 
	#TUNDETACHFILTER
 
	`_IOW
('T', 214, 
sock_Ârog
)

	)

54 
	#TUNGETVNETHDRSZ
 
	`_IOR
('T', 215, )

	)

55 
	#TUNSETVNETHDRSZ
 
	`_IOW
('T', 216, )

	)

58 
	#IFF_TUN
 0x0001

	)

59 
	#IFF_TAP
 0x0002

	)

60 
	#IFF_NO_PI
 0x1000

	)

61 
	#IFF_ONE_QUEUE
 0x2000

	)

62 
	#IFF_VNET_HDR
 0x4000

	)

63 
	#IFF_TUN_EXCL
 0x8000

	)

66 
	#TUN_F_CSUM
 0x01

	)

67 
	#TUN_F_TSO4
 0x02

	)

68 
	#TUN_F_TSO6
 0x04

	)

69 
	#TUN_F_TSO_ECN
 0x08

	)

70 
	#TUN_F_UFO
 0x10

	)

73 
	#TUN_PKT_STRIP
 0x0001

	)

74 
	stun_pi
 {

75 
__u16
 
	mÊags
;

76 
__be16
 
	m¥Ÿo
;

87 
	#TUN_FLT_ALLMULTI
 0x0001

	)

88 
	stun_fûãr
 {

89 
__u16
 
	mÊags
;

90 
__u16
 
	mcou¡
;

91 
__u8
 
	maddr
[0][
ETH_ALEN
];

	@/usr/include/linux/rtnetlink.h

1 #i‚de‡
__LINUX_RTNETLINK_H


2 
	#__LINUX_RTNETLINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

6 
	~<löux/if_lök.h
>

7 
	~<löux/if_addr.h
>

8 
	~<löux/√ighbour.h
>

13 
	#RTNL_FAMILY_IPMR
 128

	)

14 
	#RTNL_FAMILY_IP6MR
 129

	)

15 
	#RTNL_FAMILY_MAX
 129

	)

24 
	mRTM_BASE
 = 16,

25 
	#RTM_BASE
 
RTM_BASE


	)

27 
	mRTM_NEWLINK
 = 16,

28 
	#RTM_NEWLINK
 
RTM_NEWLINK


	)

29 
	mRTM_DELLINK
,

30 
	#RTM_DELLINK
 
RTM_DELLINK


	)

31 
	mRTM_GETLINK
,

32 
	#RTM_GETLINK
 
RTM_GETLINK


	)

33 
	mRTM_SETLINK
,

34 
	#RTM_SETLINK
 
RTM_SETLINK


	)

36 
	mRTM_NEWADDR
 = 20,

37 
	#RTM_NEWADDR
 
RTM_NEWADDR


	)

38 
	mRTM_DELADDR
,

39 
	#RTM_DELADDR
 
RTM_DELADDR


	)

40 
	mRTM_GETADDR
,

41 
	#RTM_GETADDR
 
RTM_GETADDR


	)

43 
	mRTM_NEWROUTE
 = 24,

44 
	#RTM_NEWROUTE
 
RTM_NEWROUTE


	)

45 
	mRTM_DELROUTE
,

46 
	#RTM_DELROUTE
 
RTM_DELROUTE


	)

47 
	mRTM_GETROUTE
,

48 
	#RTM_GETROUTE
 
RTM_GETROUTE


	)

50 
	mRTM_NEWNEIGH
 = 28,

51 
	#RTM_NEWNEIGH
 
RTM_NEWNEIGH


	)

52 
	mRTM_DELNEIGH
,

53 
	#RTM_DELNEIGH
 
RTM_DELNEIGH


	)

54 
	mRTM_GETNEIGH
,

55 
	#RTM_GETNEIGH
 
RTM_GETNEIGH


	)

57 
	mRTM_NEWRULE
 = 32,

58 
	#RTM_NEWRULE
 
RTM_NEWRULE


	)

59 
	mRTM_DELRULE
,

60 
	#RTM_DELRULE
 
RTM_DELRULE


	)

61 
	mRTM_GETRULE
,

62 
	#RTM_GETRULE
 
RTM_GETRULE


	)

64 
	mRTM_NEWQDISC
 = 36,

65 
	#RTM_NEWQDISC
 
RTM_NEWQDISC


	)

66 
	mRTM_DELQDISC
,

67 
	#RTM_DELQDISC
 
RTM_DELQDISC


	)

68 
	mRTM_GETQDISC
,

69 
	#RTM_GETQDISC
 
RTM_GETQDISC


	)

71 
	mRTM_NEWTCLASS
 = 40,

72 
	#RTM_NEWTCLASS
 
RTM_NEWTCLASS


	)

73 
	mRTM_DELTCLASS
,

74 
	#RTM_DELTCLASS
 
RTM_DELTCLASS


	)

75 
	mRTM_GETTCLASS
,

76 
	#RTM_GETTCLASS
 
RTM_GETTCLASS


	)

78 
	mRTM_NEWTFILTER
 = 44,

79 
	#RTM_NEWTFILTER
 
RTM_NEWTFILTER


	)

80 
	mRTM_DELTFILTER
,

81 
	#RTM_DELTFILTER
 
RTM_DELTFILTER


	)

82 
	mRTM_GETTFILTER
,

83 
	#RTM_GETTFILTER
 
RTM_GETTFILTER


	)

85 
	mRTM_NEWACTION
 = 48,

86 
	#RTM_NEWACTION
 
RTM_NEWACTION


	)

87 
	mRTM_DELACTION
,

88 
	#RTM_DELACTION
 
RTM_DELACTION


	)

89 
	mRTM_GETACTION
,

90 
	#RTM_GETACTION
 
RTM_GETACTION


	)

92 
	mRTM_NEWPREFIX
 = 52,

93 
	#RTM_NEWPREFIX
 
RTM_NEWPREFIX


	)

95 
	mRTM_GETMULTICAST
 = 58,

96 
	#RTM_GETMULTICAST
 
RTM_GETMULTICAST


	)

98 
	mRTM_GETANYCAST
 = 62,

99 
	#RTM_GETANYCAST
 
RTM_GETANYCAST


	)

101 
	mRTM_NEWNEIGHTBL
 = 64,

102 
	#RTM_NEWNEIGHTBL
 
RTM_NEWNEIGHTBL


	)

103 
	mRTM_GETNEIGHTBL
 = 66,

104 
	#RTM_GETNEIGHTBL
 
RTM_GETNEIGHTBL


	)

105 
	mRTM_SETNEIGHTBL
,

106 
	#RTM_SETNEIGHTBL
 
RTM_SETNEIGHTBL


	)

108 
	mRTM_NEWNDUSEROPT
 = 68,

109 
	#RTM_NEWNDUSEROPT
 
RTM_NEWNDUSEROPT


	)

111 
	mRTM_NEWADDRLABEL
 = 72,

112 
	#RTM_NEWADDRLABEL
 
RTM_NEWADDRLABEL


	)

113 
	mRTM_DELADDRLABEL
,

114 
	#RTM_DELADDRLABEL
 
RTM_DELADDRLABEL


	)

115 
	mRTM_GETADDRLABEL
,

116 
	#RTM_GETADDRLABEL
 
RTM_GETADDRLABEL


	)

118 
	mRTM_GETDCB
 = 78,

119 
	#RTM_GETDCB
 
RTM_GETDCB


	)

120 
	mRTM_SETDCB
,

121 
	#RTM_SETDCB
 
RTM_SETDCB


	)

123 
	m__RTM_MAX
,

124 
	#RTM_MAX
 (((
__RTM_MAX
 + 3Ë& ~3Ë- 1)

	)

127 
	#RTM_NR_MSGTYPES
 (
RTM_MAX
 + 1 - 
RTM_BASE
)

	)

128 
	#RTM_NR_FAMILIES
 (
RTM_NR_MSGTYPES
 >> 2)

	)

129 
	#RTM_FAM
(
cmd
Ë(((cmdË- 
RTM_BASE
Ë>> 2)

	)

137 
	sπ©å
 {

138 
	mπa_Àn
;

139 
	mπa_ty≥
;

144 
	#RTA_ALIGNTO
 4

	)

145 
	#RTA_ALIGN
(
Àn
Ë–(÷í)+
RTA_ALIGNTO
-1Ë& ~(RTA_ALIGNTO-1Ë)

	)

146 
	#RTA_OK
(
πa
,
Àn
Ë(÷íË>()(
π©å
) && \

147 (
πa
)->
πa_Àn
 >(
π©å
) && \

148 (
πa
)->
πa_Àn
 <(
Àn
))

	)

149 
	#RTA_NEXT
(
πa
,
©åÀn
Ë(◊âæíË-
	`RTA_ALIGN
(‘è)->
πa_Àn
), \

150 (
π©å
*)(((*)(
πa
)Ë+ 
	`RTA_ALIGN
(‘è)->
πa_Àn
)))

	)

151 
	#RTA_LENGTH
(
Àn
Ë(
	`RTA_ALIGN
((
π©å
)Ë+ (Àn))

	)

152 
	#RTA_SPACE
(
Àn
Ë
	`RTA_ALIGN
(
	`RTA_LENGTH
÷í))

	)

153 
	#RTA_DATA
(
πa
Ë((*)(((*)‘è)Ë+ 
	`RTA_LENGTH
(0)))

	)

154 
	#RTA_PAYLOAD
(
πa
Ë(()(‘è)->
πa_Àn
Ë- 
	`RTA_LENGTH
(0))

	)

163 
	sπmsg
 {

164 
	mπm_Ámûy
;

165 
	mπm_d°_Àn
;

166 
	mπm_§c_Àn
;

167 
	mπm_tos
;

169 
	mπm_èbÀ
;

170 
	mπm_¥Ÿocﬁ
;

171 
	mπm_sc›e
;

172 
	mπm_ty≥
;

174 
	mπm_Êags
;

180 
	mRTN_UNSPEC
,

181 
	mRTN_UNICAST
,

182 
	mRTN_LOCAL
,

183 
	mRTN_BROADCAST
,

185 
	mRTN_ANYCAST
,

187 
	mRTN_MULTICAST
,

188 
	mRTN_BLACKHOLE
,

189 
	mRTN_UNREACHABLE
,

190 
	mRTN_PROHIBIT
,

191 
	mRTN_THROW
,

192 
	mRTN_NAT
,

193 
	mRTN_XRESOLVE
,

194 
	m__RTN_MAX


197 
	#RTN_MAX
 (
__RTN_MAX
 - 1)

	)

202 
	#RTPROT_UNSPEC
 0

	)

203 
	#RTPROT_REDIRECT
 1

	)

205 
	#RTPROT_KERNEL
 2

	)

206 
	#RTPROT_BOOT
 3

	)

207 
	#RTPROT_STATIC
 4

	)

216 
	#RTPROT_GATED
 8

	)

217 
	#RTPROT_RA
 9

	)

218 
	#RTPROT_MRT
 10

	)

219 
	#RTPROT_ZEBRA
 11

	)

220 
	#RTPROT_BIRD
 12

	)

221 
	#RTPROT_DNROUTED
 13

	)

222 
	#RTPROT_XORP
 14

	)

223 
	#RTPROT_NTK
 15

	)

224 
	#RTPROT_DHCP
 16

	)

237 
	eπ_sc›e_t
 {

238 
	mRT_SCOPE_UNIVERSE
=0,

240 
	mRT_SCOPE_SITE
=200,

241 
	mRT_SCOPE_LINK
=253,

242 
	mRT_SCOPE_HOST
=254,

243 
	mRT_SCOPE_NOWHERE
=255

248 
	#RTM_F_NOTIFY
 0x100

	)

249 
	#RTM_F_CLONED
 0x200

	)

250 
	#RTM_F_EQUALIZE
 0x400

	)

251 
	#RTM_F_PREFIX
 0x800

	)

255 
	eπ_˛ass_t
 {

256 
	mRT_TABLE_UNSPEC
=0,

258 
	mRT_TABLE_COMPAT
=252,

259 
	mRT_TABLE_DEFAULT
=253,

260 
	mRT_TABLE_MAIN
=254,

261 
	mRT_TABLE_LOCAL
=255,

262 
	mRT_TABLE_MAX
=0xFFFFFFFF

268 
	eπ©å_ty≥_t
 {

269 
	mRTA_UNSPEC
,

270 
	mRTA_DST
,

271 
	mRTA_SRC
,

272 
	mRTA_IIF
,

273 
	mRTA_OIF
,

274 
	mRTA_GATEWAY
,

275 
	mRTA_PRIORITY
,

276 
	mRTA_PREFSRC
,

277 
	mRTA_METRICS
,

278 
	mRTA_MULTIPATH
,

279 
	mRTA_PROTOINFO
,

280 
	mRTA_FLOW
,

281 
	mRTA_CACHEINFO
,

282 
	mRTA_SESSION
,

283 
	mRTA_MP_ALGO
,

284 
	mRTA_TABLE
,

285 
	mRTA_MARK
,

286 
	m__RTA_MAX


289 
	#RTA_MAX
 (
__RTA_MAX
 - 1)

	)

291 
	#RTM_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
πmsg
))))

	)

292 
	#RTM_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
πmsg
))

	)

303 
	sπ√xth›
 {

304 
	mπnh_Àn
;

305 
	mπnh_Êags
;

306 
	mπnh_h›s
;

307 
	mπnh_ifödex
;

312 
	#RTNH_F_DEAD
 1

	)

313 
	#RTNH_F_PERVASIVE
 2

	)

314 
	#RTNH_F_ONLINK
 4

	)

318 
	#RTNH_ALIGNTO
 4

	)

319 
	#RTNH_ALIGN
(
Àn
Ë–(÷í)+
RTNH_ALIGNTO
-1Ë& ~(RTNH_ALIGNTO-1Ë)

	)

320 
	#RTNH_OK
(
πnh
,
Àn
Ë(‘äh)->
πnh_Àn
 >(
π√xth›
) && \

321 (()(
πnh
)->
πnh_Àn
Ë<(
Àn
))

	)

322 
	#RTNH_NEXT
(
πnh
Ë((
π√xth›
*)(((*)‘äh)Ë+ 
	`RTNH_ALIGN
(‘äh)->
πnh_Àn
)))

	)

323 
	#RTNH_LENGTH
(
Àn
Ë(
	`RTNH_ALIGN
((
π√xth›
)Ë+ (Àn))

	)

324 
	#RTNH_SPACE
(
Àn
Ë
	`RTNH_ALIGN
(
	`RTNH_LENGTH
÷í))

	)

325 
	#RTNH_DATA
(
πnh
Ë((
π©å
*)(((*)‘äh)Ë+ 
	`RTNH_LENGTH
(0)))

	)

329 
	sπa_ˇcheöfo
 {

330 
__u32
 
	mπa_˛¡ªf
;

331 
__u32
 
	mπa_œ°u£
;

332 
__s32
 
	mπa_expúes
;

333 
__u32
 
	mπa_îr‹
;

334 
__u32
 
	mπa_u£d
;

336 
	#RTNETLINK_HAVE_PEERINFO
 1

	)

337 
__u32
 
	mπa_id
;

338 
__u32
 
	mπa_ts
;

339 
__u32
 
	mπa_tßge
;

345 
	mRTAX_UNSPEC
,

346 
	#RTAX_UNSPEC
 
RTAX_UNSPEC


	)

347 
	mRTAX_LOCK
,

348 
	#RTAX_LOCK
 
RTAX_LOCK


	)

349 
	mRTAX_MTU
,

350 
	#RTAX_MTU
 
RTAX_MTU


	)

351 
	mRTAX_WINDOW
,

352 
	#RTAX_WINDOW
 
RTAX_WINDOW


	)

353 
	mRTAX_RTT
,

354 
	#RTAX_RTT
 
RTAX_RTT


	)

355 
	mRTAX_RTTVAR
,

356 
	#RTAX_RTTVAR
 
RTAX_RTTVAR


	)

357 
	mRTAX_SSTHRESH
,

358 
	#RTAX_SSTHRESH
 
RTAX_SSTHRESH


	)

359 
	mRTAX_CWND
,

360 
	#RTAX_CWND
 
RTAX_CWND


	)

361 
	mRTAX_ADVMSS
,

362 
	#RTAX_ADVMSS
 
RTAX_ADVMSS


	)

363 
	mRTAX_REORDERING
,

364 
	#RTAX_REORDERING
 
RTAX_REORDERING


	)

365 
	mRTAX_HOPLIMIT
,

366 
	#RTAX_HOPLIMIT
 
RTAX_HOPLIMIT


	)

367 
	mRTAX_INITCWND
,

368 
	#RTAX_INITCWND
 
RTAX_INITCWND


	)

369 
	mRTAX_FEATURES
,

370 
	#RTAX_FEATURES
 
RTAX_FEATURES


	)

371 
	mRTAX_RTO_MIN
,

372 
	#RTAX_RTO_MIN
 
RTAX_RTO_MIN


	)

373 
	mRTAX_INITRWND
,

374 
	#RTAX_INITRWND
 
RTAX_INITRWND


	)

375 
	m__RTAX_MAX


378 
	#RTAX_MAX
 (
__RTAX_MAX
 - 1)

	)

380 
	#RTAX_FEATURE_ECN
 0x00000001

	)

381 
	#RTAX_FEATURE_SACK
 0x00000002

	)

382 
	#RTAX_FEATURE_TIMESTAMP
 0x00000004

	)

383 
	#RTAX_FEATURE_ALLFRAG
 0x00000008

	)

385 
	sπa_£ssi⁄
 {

386 
__u8
 
	m¥Ÿo
;

387 
__u8
 
	m∑d1
;

388 
__u16
 
	m∑d2
;

392 
__u16
 
	m•‹t
;

393 
__u16
 
	mdp‹t
;

394 } 
	mp‹ts
;

397 
__u8
 
	mty≥
;

398 
__u8
 
	mcode
;

399 
__u16
 
	midít
;

400 } 
	micm±
;

402 
__u32
 
	m•i
;

403 } 
	mu
;

410 
	sπgímsg
 {

411 
	mπgí_Ámûy
;

423 
	siföfomsg
 {

424 
	mifi_Ámûy
;

425 
	m__ifi_∑d
;

426 
	mifi_ty≥
;

427 
	mifi_ödex
;

428 
	mifi_Êags
;

429 
	mifi_ch™ge
;

436 
	s¥efixmsg
 {

437 
	m¥efix_Ámûy
;

438 
	m¥efix_∑d1
;

439 
	m¥efix_∑d2
;

440 
	m¥efix_ifödex
;

441 
	m¥efix_ty≥
;

442 
	m¥efix_Àn
;

443 
	m¥efix_Êags
;

444 
	m¥efix_∑d3
;

449 
	mPREFIX_UNSPEC
,

450 
	mPREFIX_ADDRESS
,

451 
	mPREFIX_CACHEINFO
,

452 
	m__PREFIX_MAX


455 
	#PREFIX_MAX
 (
__PREFIX_MAX
 - 1)

	)

457 
	s¥efix_ˇcheöfo
 {

458 
__u32
 
	m¥e„ºed_time
;

459 
__u32
 
	mvÆid_time
;

467 
	stcmsg
 {

468 
	mtcm_Ámûy
;

469 
	mtcm__∑d1
;

470 
	mtcm__∑d2
;

471 
	mtcm_ifödex
;

472 
__u32
 
	mtcm_h™dÀ
;

473 
__u32
 
	mtcm_∑ª¡
;

474 
__u32
 
	mtcm_öfo
;

478 
	mTCA_UNSPEC
,

479 
	mTCA_KIND
,

480 
	mTCA_OPTIONS
,

481 
	mTCA_STATS
,

482 
	mTCA_XSTATS
,

483 
	mTCA_RATE
,

484 
	mTCA_FCNT
,

485 
	mTCA_STATS2
,

486 
	mTCA_STAB
,

487 
	m__TCA_MAX


490 
	#TCA_MAX
 (
__TCA_MAX
 - 1)

	)

492 
	#TCA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tcmsg
))))

	)

493 
	#TCA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tcmsg
))

	)

499 
	sndu£r›tmsg
 {

500 
	mndu£r›t_Ámûy
;

501 
	mndu£r›t_∑d1
;

502 
	mndu£r›t_›ts_Àn
;

503 
	mndu£r›t_ifödex
;

504 
__u8
 
	mndu£r›t_icmp_ty≥
;

505 
__u8
 
	mndu£r›t_icmp_code
;

506 
	mndu£r›t_∑d2
;

507 
	mndu£r›t_∑d3
;

512 
	mNDUSEROPT_UNSPEC
,

513 
	mNDUSEROPT_SRCADDR
,

514 
	m__NDUSEROPT_MAX


517 
	#NDUSEROPT_MAX
 (
__NDUSEROPT_MAX
 - 1)

	)

520 
	#RTMGRP_LINK
 1

	)

521 
	#RTMGRP_NOTIFY
 2

	)

522 
	#RTMGRP_NEIGH
 4

	)

523 
	#RTMGRP_TC
 8

	)

525 
	#RTMGRP_IPV4_IFADDR
 0x10

	)

526 
	#RTMGRP_IPV4_MROUTE
 0x20

	)

527 
	#RTMGRP_IPV4_ROUTE
 0x40

	)

528 
	#RTMGRP_IPV4_RULE
 0x80

	)

530 
	#RTMGRP_IPV6_IFADDR
 0x100

	)

531 
	#RTMGRP_IPV6_MROUTE
 0x200

	)

532 
	#RTMGRP_IPV6_ROUTE
 0x400

	)

533 
	#RTMGRP_IPV6_IFINFO
 0x800

	)

535 
	#RTMGRP_DEC√t_IFADDR
 0x1000

	)

536 
	#RTMGRP_DEC√t_ROUTE
 0x4000

	)

538 
	#RTMGRP_IPV6_PREFIX
 0x20000

	)

541 
	eπ√éök_groups
 {

542 
	mRTNLGRP_NONE
,

543 
	#RTNLGRP_NONE
 
RTNLGRP_NONE


	)

544 
	mRTNLGRP_LINK
,

545 
	#RTNLGRP_LINK
 
RTNLGRP_LINK


	)

546 
	mRTNLGRP_NOTIFY
,

547 
	#RTNLGRP_NOTIFY
 
RTNLGRP_NOTIFY


	)

548 
	mRTNLGRP_NEIGH
,

549 
	#RTNLGRP_NEIGH
 
RTNLGRP_NEIGH


	)

550 
	mRTNLGRP_TC
,

551 
	#RTNLGRP_TC
 
RTNLGRP_TC


	)

552 
	mRTNLGRP_IPV4_IFADDR
,

553 
	#RTNLGRP_IPV4_IFADDR
 
RTNLGRP_IPV4_IFADDR


	)

554 
	mRTNLGRP_IPV4_MROUTE
,

555 
	#RTNLGRP_IPV4_MROUTE
 
RTNLGRP_IPV4_MROUTE


	)

556 
	mRTNLGRP_IPV4_ROUTE
,

557 
	#RTNLGRP_IPV4_ROUTE
 
RTNLGRP_IPV4_ROUTE


	)

558 
	mRTNLGRP_IPV4_RULE
,

559 
	#RTNLGRP_IPV4_RULE
 
RTNLGRP_IPV4_RULE


	)

560 
	mRTNLGRP_IPV6_IFADDR
,

561 
	#RTNLGRP_IPV6_IFADDR
 
RTNLGRP_IPV6_IFADDR


	)

562 
	mRTNLGRP_IPV6_MROUTE
,

563 
	#RTNLGRP_IPV6_MROUTE
 
RTNLGRP_IPV6_MROUTE


	)

564 
	mRTNLGRP_IPV6_ROUTE
,

565 
	#RTNLGRP_IPV6_ROUTE
 
RTNLGRP_IPV6_ROUTE


	)

566 
	mRTNLGRP_IPV6_IFINFO
,

567 
	#RTNLGRP_IPV6_IFINFO
 
RTNLGRP_IPV6_IFINFO


	)

568 
	mRTNLGRP_DEC√t_IFADDR
,

569 
	#RTNLGRP_DEC√t_IFADDR
 
RTNLGRP_DEC√t_IFADDR


	)

570 
	mRTNLGRP_NOP2
,

571 
	mRTNLGRP_DEC√t_ROUTE
,

572 
	#RTNLGRP_DEC√t_ROUTE
 
RTNLGRP_DEC√t_ROUTE


	)

573 
	mRTNLGRP_DEC√t_RULE
,

574 
	#RTNLGRP_DEC√t_RULE
 
RTNLGRP_DEC√t_RULE


	)

575 
	mRTNLGRP_NOP4
,

576 
	mRTNLGRP_IPV6_PREFIX
,

577 
	#RTNLGRP_IPV6_PREFIX
 
RTNLGRP_IPV6_PREFIX


	)

578 
	mRTNLGRP_IPV6_RULE
,

579 
	#RTNLGRP_IPV6_RULE
 
RTNLGRP_IPV6_RULE


	)

580 
	mRTNLGRP_ND_USEROPT
,

581 
	#RTNLGRP_ND_USEROPT
 
RTNLGRP_ND_USEROPT


	)

582 
	mRTNLGRP_PHONET_IFADDR
,

583 
	#RTNLGRP_PHONET_IFADDR
 
RTNLGRP_PHONET_IFADDR


	)

584 
	mRTNLGRP_PHONET_ROUTE
,

585 
	#RTNLGRP_PHONET_ROUTE
 
RTNLGRP_PHONET_ROUTE


	)

586 
	mRTNLGRP_DCB
,

587 
	#RTNLGRP_DCB
 
RTNLGRP_DCB


	)

588 
	m__RTNLGRP_MAX


590 
	#RTNLGRP_MAX
 (
__RTNLGRP_MAX
 - 1)

	)

593 
	stˇmsg
 {

594 
	mtˇ_Ámûy
;

595 
	mtˇ__∑d1
;

596 
	mtˇ__∑d2
;

598 
	#TA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tˇmsg
))))

	)

599 
	#TA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tˇmsg
))

	)

600 
	#TCA_ACT_TAB
 1

	)

601 
	#TCAA_MAX
 1

	)

604 
	#RTEXT_FILTER_VF
 (1 << 0)

	)

	@/usr/include/linux/sockios.h

18 #i‚de‡
_LINUX_SOCKIOS_H


19 
	#_LINUX_SOCKIOS_H


	)

21 
	~<asm/sockios.h
>

24 
	#SIOCINQ
 
FIONREAD


	)

25 
	#SIOCOUTQ
 
TIOCOUTQ


	)

28 
	#SIOCADDRT
 0x890B

	)

29 
	#SIOCDELRT
 0x890C

	)

30 
	#SIOCRTMSG
 0x890D

	)

33 
	#SIOCGIFNAME
 0x8910

	)

34 
	#SIOCSIFLINK
 0x8911

	)

35 
	#SIOCGIFCONF
 0x8912

	)

36 
	#SIOCGIFFLAGS
 0x8913

	)

37 
	#SIOCSIFFLAGS
 0x8914

	)

38 
	#SIOCGIFADDR
 0x8915

	)

39 
	#SIOCSIFADDR
 0x8916

	)

40 
	#SIOCGIFDSTADDR
 0x8917

	)

41 
	#SIOCSIFDSTADDR
 0x8918

	)

42 
	#SIOCGIFBRDADDR
 0x8919

	)

43 
	#SIOCSIFBRDADDR
 0x891®

	)

44 
	#SIOCGIFNETMASK
 0x891b

	)

45 
	#SIOCSIFNETMASK
 0x891¯

	)

46 
	#SIOCGIFMETRIC
 0x891d

	)

47 
	#SIOCSIFMETRIC
 0x891ê

	)

48 
	#SIOCGIFMEM
 0x891‡

	)

49 
	#SIOCSIFMEM
 0x8920

	)

50 
	#SIOCGIFMTU
 0x8921

	)

51 
	#SIOCSIFMTU
 0x8922

	)

52 
	#SIOCSIFNAME
 0x8923

	)

53 
	#SIOCSIFHWADDR
 0x8924

	)

54 
	#SIOCGIFENCAP
 0x8925

	)

55 
	#SIOCSIFENCAP
 0x8926

	)

56 
	#SIOCGIFHWADDR
 0x8927

	)

57 
	#SIOCGIFSLAVE
 0x8929

	)

58 
	#SIOCSIFSLAVE
 0x8930

	)

59 
	#SIOCADDMULTI
 0x8931

	)

60 
	#SIOCDELMULTI
 0x8932

	)

61 
	#SIOCGIFINDEX
 0x8933

	)

62 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

63 
	#SIOCSIFPFLAGS
 0x8934

	)

64 
	#SIOCGIFPFLAGS
 0x8935

	)

65 
	#SIOCDIFADDR
 0x8936

	)

66 
	#SIOCSIFHWBROADCAST
 0x8937

	)

67 
	#SIOCGIFCOUNT
 0x8938

	)

69 
	#SIOCGIFBR
 0x8940

	)

70 
	#SIOCSIFBR
 0x8941

	)

72 
	#SIOCGIFTXQLEN
 0x8942

	)

73 
	#SIOCSIFTXQLEN
 0x8943

	)

78 
	#SIOCETHTOOL
 0x8946

	)

80 
	#SIOCGMIIPHY
 0x8947

	)

81 
	#SIOCGMIIREG
 0x8948

	)

82 
	#SIOCSMIIREG
 0x8949

	)

84 
	#SIOCWANDEV
 0x894A

	)

86 
	#SIOCOUTQNSD
 0x894B

	)

90 
	#SIOCDARP
 0x8953

	)

91 
	#SIOCGARP
 0x8954

	)

92 
	#SIOCSARP
 0x8955

	)

95 
	#SIOCDRARP
 0x8960

	)

96 
	#SIOCGRARP
 0x8961

	)

97 
	#SIOCSRARP
 0x8962

	)

101 
	#SIOCGIFMAP
 0x8970

	)

102 
	#SIOCSIFMAP
 0x8971

	)

106 
	#SIOCADDDLCI
 0x8980

	)

107 
	#SIOCDELDLCI
 0x8981

	)

109 
	#SIOCGIFVLAN
 0x8982

	)

110 
	#SIOCSIFVLAN
 0x8983

	)

114 
	#SIOCBONDENSLAVE
 0x8990

	)

115 
	#SIOCBONDRELEASE
 0x8991

	)

116 
	#SIOCBONDSETHWADDR
 0x8992

	)

117 
	#SIOCBONDSLAVEINFOQUERY
 0x8993

	)

118 
	#SIOCBONDINFOQUERY
 0x8994

	)

119 
	#SIOCBONDCHANGEACTIVE
 0x8995

	)

122 
	#SIOCBRADDBR
 0x89a0

	)

123 
	#SIOCBRDELBR
 0x89a1

	)

124 
	#SIOCBRADDIF
 0x89a2

	)

125 
	#SIOCBRDELIF
 0x89a3

	)

128 
	#SIOCSHWTSTAMP
 0x89b0

	)

141 
	#SIOCDEVPRIVATE
 0x89F0

	)

147 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 197895

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/malloc.h

21 #i‚de‡
_MALLOC_H


22 
	#_MALLOC_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	~<°dio.h
>

27 
	#__mÆloc_±r_t
 *

	)

30 
	#__mÆloc_size_t
 
size_t


	)

31 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

33 #ifde‡
__GNUC__


35 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

38 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

40 #ifde‡
_LIBC


41 
	#__MALLOC_HOOK_VOLATILE


	)

42 
	#__MALLOC_DEPRECATED


	)

44 
	#__MALLOC_HOOK_VOLATILE
 
__vﬁ©ûe


	)

45 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

50 
	#__MALLOC_P
(
¨gs
Ë
	)
args

51 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

52 
	#__MALLOC_HOOK_VOLATILE


	)

53 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

58 
__BEGIN_DECLS


61 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

64 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

65 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

72 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

73 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

76 
	$‰ì
 (*
__±r
Ë
__THROW
;

79 
	$c‰ì
 (*
__±r
Ë
__THROW
;

82 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

83 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

86 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

90 * 
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

94 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

97 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

98 
__THROW
 
__©åibuã_mÆloc__
;

102 
	smÆlöfo


104 
¨ía
;

105 
‹dblks
;

106 
smblks
;

107 
hblks
;

108 
hblkhd
;

109 
usmblks
;

110 
fsmblks
;

111 
u‹dblks
;

112 
f‹dblks
;

113 
kìpco°
;

117 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

120 #i‚de‡
M_MXFAST


121 
	#M_MXFAST
 1

	)

123 #i‚de‡
M_NLBLKS


124 
	#M_NLBLKS
 2

	)

126 #i‚de‡
M_GRAIN


127 
	#M_GRAIN
 3

	)

129 #i‚de‡
M_KEEP


130 
	#M_KEEP
 4

	)

134 
	#M_TRIM_THRESHOLD
 -1

	)

135 
	#M_TOP_PAD
 -2

	)

136 
	#M_MMAP_THRESHOLD
 -3

	)

137 
	#M_MMAP_MAX
 -4

	)

138 
	#M_CHECK_ACTION
 -5

	)

139 
	#M_PERTURB
 -6

	)

140 
	#M_ARENA_TEST
 -7

	)

141 
	#M_ARENA_MAX
 -8

	)

144 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

148 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

152 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

155 
	$mÆloc_°©s
 (Ë
__THROW
;

158 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

161 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

165 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

170 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

171 
__MALLOC_DEPRECATED
;

173 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

174 
__c⁄°
 
__mÆloc_±r_t
)

175 
__MALLOC_DEPRECATED
;

176 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
Ë(
size_t
 
__size
,

177 
__c⁄°
 
__mÆloc_±r_t
)

178 
__MALLOC_DEPRECATED
;

179 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
Ë(*
__±r
,

180 
size_t
 
__size
,

181 
__c⁄°
 
__mÆloc_±r_t
)

182 
__MALLOC_DEPRECATED
;

183 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
Ë(
size_t
 
__Æignmít
,

184 
size_t
 
__size
,

185 
__c⁄°
 
__mÆloc_±r_t
)

186 
__MALLOC_DEPRECATED
;

187 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

190 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

193 
__END_DECLS


	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

102 || 
deföed
 
__LDBL_COMPAT
)

103 #ifde‡
__LDBL_COMPAT


105 #ifde‡
__USE_ISOC99


106 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

107 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

108 #ifde‡
__REDIRECT_NTH


109 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

110 
__∆dbl_√xâow¨df
)

111 
	`__©åibuã__
 ((
__c⁄°__
));

112 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

113 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

114 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

115 (
__x
, 
__y
),

116 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

121 #i‡
deföed
 
__LDBL_COMPAT
 || deföed 
__NO_LONG_DOUBLE_MATH


123 #unde‡
__MATHDECL_1


124 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

125 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

126 
¨gs
, 
Æüs
)

	)

127 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

128 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

134 #i‚de‡
_Ml⁄g_doubÀ_


135 
	#_Ml⁄g_doubÀ_
 

	)

137 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

138 #ifde‡
__STDC__


139 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

141 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

143 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

144 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

145 
	#__MATH_DECLARE_LDOUBLE
 1

	)

146 
	~<bôs/m©hˇŒs.h
>

147 #unde‡
_MdoubÀ_


148 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


149 #unde‡
_MdoubÀ_END_NAMESPACE


150 #unde‡
__MATH_PRECNAME


155 #unde‡
__MATHDECL_1


156 #unde‡
__MATHDECL


157 #unde‡
__MATHCALL


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


162 
signgam
;

167 #ifde‡
__USE_ISOC99


205 
FP_NAN
,

206 
	#FP_NAN
 
FP_NAN


	)

207 
FP_INFINITE
,

208 
	#FP_INFINITE
 
FP_INFINITE


	)

209 
FP_ZERO
,

210 
	#FP_ZERO
 
FP_ZERO


	)

211 
FP_SUBNORMAL
,

212 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

213 
FP_NORMAL


214 
	#FP_NORMAL
 
FP_NORMAL


	)

218 #ifde‡
__NO_LONG_DOUBLE_MATH


219 
	#Â˛assify
(
x
) \

220 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

222 
	#Â˛assify
(
x
) \

223 ( (
x
) ==  () \

224 ? 
	`__Â˛assifyf
 (
x
) \

225 :  (
x
) ==  () \

226 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

230 #ifde‡
__NO_LONG_DOUBLE_MATH


231 
	#signbô
(
x
) \

232 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

234 
	#signbô
(
x
) \

235 ( (
x
) ==  () \

236 ? 
	`__signbôf
 (
x
) \

237 :  (
x
) ==  () \

238 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

242 #ifde‡
__NO_LONG_DOUBLE_MATH


243 
	#isföôe
(
x
) \

244 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

246 
	#isföôe
(
x
) \

247 ( (
x
) ==  () \

248 ? 
	`__föôef
 (
x
) \

249 :  (
x
) ==  () \

250 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

254 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

258 #ifde‡
__NO_LONG_DOUBLE_MATH


259 
	#i¢™
(
x
) \

260 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

262 
	#i¢™
(
x
) \

263 ( (
x
) ==  () \

264 ? 
	`__i¢™f
 (
x
) \

265 :  (
x
) ==  () \

266 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

270 #ifde‡
__NO_LONG_DOUBLE_MATH


271 
	#isöf
(
x
) \

272 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

274 
	#isöf
(
x
) \

275 ( (
x
) ==  () \

276 ? 
	`__isöff
 (
x
) \

277 :  (
x
) ==  () \

278 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

282 
	#MATH_ERRNO
 1

	)

283 
	#MATH_ERREXCEPT
 2

	)

288 #i‚de‡
__FAST_MATH__


289 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

294 #ifdef 
__USE_MISC


298 
_IEEE_
 = -1,

299 
_SVID_
,

300 
_XOPEN_
,

301 
_POSIX_
,

302 
_ISOC_


303 } 
	t_LIB_VERSION_TYPE
;

308 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

312 #ifde‡
__USE_SVID


318 #ifde‡
__˝lu•lus


319 
__ex˚±i⁄


321 
ex˚±i⁄


324 
ty≥
;

325 *
«me
;

326 
¨g1
;

327 
¨g2
;

328 
ªtvÆ
;

329 
	}
};

331 #ifde‡
__˝lu•lus


332 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

334 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

337 
	#X_TLOSS
 1.41484755040568800000e+16

	)

340 
	#DOMAIN
 1

	)

341 
	#SING
 2

	)

342 
	#OVERFLOW
 3

	)

343 
	#UNDERFLOW
 4

	)

344 
	#TLOSS
 5

	)

345 
	#PLOSS
 6

	)

348 
	#HUGE
 3.40282347e+38F

	)

352 #ifde‡
__USE_XOPEN


354 
	#MAXFLOAT
 3.40282347e+38F

	)

361 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


362 
	#M_E
 2.7182818284590452354

	)

363 
	#M_LOG2E
 1.4426950408889634074

	)

364 
	#M_LOG10E
 0.43429448190325182765

	)

365 
	#M_LN2
 0.69314718055994530942

	)

366 
	#M_LN10
 2.30258509299404568402

	)

367 
	#M_PI
 3.14159265358979323846

	)

368 
	#M_PI_2
 1.57079632679489661923

	)

369 
	#M_PI_4
 0.78539816339744830962

	)

370 
	#M_1_PI
 0.31830988618379067154

	)

371 
	#M_2_PI
 0.63661977236758134308

	)

372 
	#M_2_SQRTPI
 1.12837916709551257390

	)

373 
	#M_SQRT2
 1.41421356237309504880

	)

374 
	#M_SQRT1_2
 0.70710678118654752440

	)

380 #ifde‡
__USE_GNU


381 
	#M_El
 2.7182818284590452353602874713526625L

	)

382 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

383 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

384 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

385 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

386 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

387 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

388 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

389 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

390 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

391 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

392 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

393 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

400 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


401 
	#__NO_MATH_INLINES
 1

	)

404 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

411 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

412 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

413 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

414 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

415 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

416 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

420 #ifde‡
__USE_EXTERN_INLINES


421 
	~<bôs/m©hölöe.h
>

426 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

427 
	~<bôs/m©h-föôe.h
>

430 #ifde‡
__USE_ISOC99


434 #i‚de‡
isgª©î


435 
	#isgª©î
(
x
, 
y
) \

436 (
__exãnsi⁄__
 \

437 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

438 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

442 #i‚de‡
isgª©îequÆ


443 
	#isgª©îequÆ
(
x
, 
y
) \

444 (
__exãnsi⁄__
 \

445 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

446 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

450 #i‚de‡
i¶ess


451 
	#i¶ess
(
x
, 
y
) \

452 (
__exãnsi⁄__
 \

453 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

454 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

458 #i‚de‡
i¶es£quÆ


459 
	#i¶es£quÆ
(
x
, 
y
) \

460 (
__exãnsi⁄__
 \

461 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

462 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

466 #i‚de‡
i¶essgª©î


467 
	#i¶essgª©î
(
x
, 
y
) \

468 (
__exãnsi⁄__
 \

469 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

470 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

474 #i‚de‡
isun‹dîed


475 
	#isun‹dîed
(
u
, 
v
) \

476 (
__exãnsi⁄__
 \

477 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

478 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

483 
	g__END_DECLS


	@/usr/include/nbee.h

9 #¥agm®
⁄˚


22 #i‚de‡
nbSUCCESS


23 
	#nbSUCCESS
 0

24 
	#nbFAILURE
 -1

25 
	#nbWARNING
 -2

27 

	)

31 #i‡
deföed
(
_DEBUG
Ë&& deföed(
_MSC_VER
Ë&& deföed (
_CRTDBG_MAP_ALLOC
)

32 #¥agm®
mesßge
( "MemoryÜeaks checkingÅurned on" )

37 
	~<nbì_öô˛ónup.h
>

38 
	~<nbì_∑ckëdecodî.h
>

39 
	~<nbì_∑ckëdumpfûes.h
>

40 
	~<nbì_pxmÃódî.h
>

41 
	~<nbì_√çdlutûs.h
>

42 
	~<nbì_∑ckëígöe.h
>

43 
	~<nbì_¥ofûî.h
>

48 
	~<nb¥Ÿodb.h
>

49 
	~<nbpÊcompûî.h
>

50 
	~<nbsockutûs.h
>

52 
	~<nbì_exåa˘edfõldªadî.h
>

	@/usr/include/net/ethernet.h

22 #i‚de‡
__NET_ETHERNET_H


23 
	#__NET_ETHERNET_H
 1

	)

25 
	~<sys/cdefs.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<löux/if_ëhî.h
>

29 
__BEGIN_DECLS


33 
	sëhî_addr


35 
u_öt8_t
 
	mëhî_addr_o˘ë
[
ETH_ALEN
];

36 } 
__©åibuã__
 ((
__∑cked__
));

39 
	sëhî_hódî


41 
u_öt8_t
 
	mëhî_dho°
[
ETH_ALEN
];

42 
u_öt8_t
 
	mëhî_sho°
[
ETH_ALEN
];

43 
u_öt16_t
 
	mëhî_ty≥
;

44 } 
__©åibuã__
 ((
__∑cked__
));

47 
	#ETHERTYPE_PUP
 0x0200

	)

48 
	#ETHERTYPE_SPRITE
 0x0500

	)

49 
	#ETHERTYPE_IP
 0x0800

	)

50 
	#ETHERTYPE_ARP
 0x0806

	)

51 
	#ETHERTYPE_REVARP
 0x8035

	)

52 
	#ETHERTYPE_AT
 0x809B

	)

53 
	#ETHERTYPE_AARP
 0x80F3

	)

54 
	#ETHERTYPE_VLAN
 0x8100

	)

55 
	#ETHERTYPE_IPX
 0x8137

	)

56 
	#ETHERTYPE_IPV6
 0x86dd

	)

57 
	#ETHERTYPE_LOOPBACK
 0x9000

	)

60 
	#ETHER_ADDR_LEN
 
ETH_ALEN


	)

61 
	#ETHER_TYPE_LEN
 2

	)

62 
	#ETHER_CRC_LEN
 4

	)

63 
	#ETHER_HDR_LEN
 
ETH_HLEN


	)

64 
	#ETHER_MIN_LEN
 (
ETH_ZLEN
 + 
ETHER_CRC_LEN
Ë

	)

65 
	#ETHER_MAX_LEN
 (
ETH_FRAME_LEN
 + 
ETHER_CRC_LEN
Ë

	)

68 
	#ETHER_IS_VALID_LEN
(
foo
) \

69 ((
foo
Ë>
ETHER_MIN_LEN
 && (fooË<
ETHER_MAX_LEN
)

	)

76 
	#ETHERTYPE_TRAIL
 0x1000

	)

77 
	#ETHERTYPE_NTRAILER
 16

	)

79 
	#ETHERMTU
 
ETH_DATA_LEN


	)

80 
	#ETHERMIN
 (
ETHER_MIN_LEN
 - 
ETHER_HDR_LEN
 - 
ETHER_CRC_LEN
)

	)

82 
	g__END_DECLS


	@/usr/include/net/if.h

20 #i‚de‡
_NET_IF_H


21 
	#_NET_IF_H
 1

	)

23 
	~<„©uªs.h
>

25 #ifde‡
__USE_MISC


26 
	~<sys/ty≥s.h
>

27 
	~<sys/sockë.h
>

32 
	#IF_NAMESIZE
 16

	)

34 
	sif_«meödex


36 
	mif_ödex
;

37 *
	mif_«me
;

41 #ifde‡
__USE_MISC


45 
	mIFF_UP
 = 0x1,

46 
	#IFF_UP
 
IFF_UP


	)

47 
	mIFF_BROADCAST
 = 0x2,

48 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

49 
	mIFF_DEBUG
 = 0x4,

50 
	#IFF_DEBUG
 
IFF_DEBUG


	)

51 
	mIFF_LOOPBACK
 = 0x8,

52 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

53 
	mIFF_POINTOPOINT
 = 0x10,

54 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

55 
	mIFF_NOTRAILERS
 = 0x20,

56 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

57 
	mIFF_RUNNING
 = 0x40,

58 
	#IFF_RUNNING
 
IFF_RUNNING


	)

59 
	mIFF_NOARP
 = 0x80,

60 
	#IFF_NOARP
 
IFF_NOARP


	)

61 
	mIFF_PROMISC
 = 0x100,

62 
	#IFF_PROMISC
 
IFF_PROMISC


	)

65 
	mIFF_ALLMULTI
 = 0x200,

66 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

68 
	mIFF_MASTER
 = 0x400,

69 
	#IFF_MASTER
 
IFF_MASTER


	)

70 
	mIFF_SLAVE
 = 0x800,

71 
	#IFF_SLAVE
 
IFF_SLAVE


	)

73 
	mIFF_MULTICAST
 = 0x1000,

74 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

76 
	mIFF_PORTSEL
 = 0x2000,

77 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

78 
	mIFF_AUTOMEDIA
 = 0x4000,

79 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

80 
	mIFF_DYNAMIC
 = 0x8000

81 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

89 
	siÁddr


91 
sockaddr
 
	miÁ_addr
;

94 
sockaddr
 
	mifu_brﬂdaddr
;

95 
sockaddr
 
	mifu_d°addr
;

96 } 
	miÁ_ifu
;

97 
iÁ˚
 *
	miÁ_iÂ
;

98 
iÁddr
 *
	miÁ_√xt
;

101 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

102 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

112 
	sifm≠


114 
	mmem_°¨t
;

115 
	mmem_íd
;

116 
	mba£_addr
;

117 
	múq
;

118 
	mdma
;

119 
	mp‹t
;

127 
	si‰eq


129 
	#IFHWADDRLEN
 6

	)

130 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

133 
	mi‰n_«me
[
IFNAMSIZ
];

134 } 
	mi‰_i‰n
;

138 
sockaddr
 
	mi‰u_addr
;

139 
sockaddr
 
	mi‰u_d°addr
;

140 
sockaddr
 
	mi‰u_brﬂdaddr
;

141 
sockaddr
 
	mi‰u_√tmask
;

142 
sockaddr
 
	mi‰u_hwaddr
;

143 
	mi‰u_Êags
;

144 
	mi‰u_ivÆue
;

145 
	mi‰u_mtu
;

146 
ifm≠
 
	mi‰u_m≠
;

147 
	mi‰u_¶ave
[
IFNAMSIZ
];

148 
	mi‰u_√w«me
[
IFNAMSIZ
];

149 
__ˇddr_t
 
	mi‰u_d©a
;

150 } 
	mi‰_i‰u
;

152 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

153 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

154 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

155 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

156 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

157 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

158 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

159 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

160 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

161 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

162 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

163 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

164 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

167 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

168 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

169 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

170 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

177 
	sifc⁄f


179 
	mifc_Àn
;

182 
__ˇddr_t
 
	mifcu_buf
;

183 
i‰eq
 *
	mifcu_ªq
;

184 } 
	mifc_ifcu
;

186 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

187 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

188 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

191 
__BEGIN_DECLS


194 
	$if_«mëoödex
 (
__c⁄°
 *
__i‚ame
Ë
__THROW
;

195 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

198 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

201 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

203 
__END_DECLS


	@/usr/include/net/if_arp.h

23 #i‚de‡
_NET_IF_ARP_H


25 
	#_NET_IF_ARP_H
 1

	)

26 
	~<sys/cdefs.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<sys/sockë.h
>

31 
	g__BEGIN_DECLS


34 
	#MAX_ADDR_LEN
 7

	)

40 
	#ARPOP_REQUEST
 1

	)

41 
	#ARPOP_REPLY
 2

	)

42 
	#ARPOP_RREQUEST
 3

	)

43 
	#ARPOP_RREPLY
 4

	)

44 
	#ARPOP_InREQUEST
 8

	)

45 
	#ARPOP_InREPLY
 9

	)

46 
	#ARPOP_NAK
 10

	)

55 
	s¨phdr


57 
	m¨_hrd
;

58 
	m¨_¥o
;

59 
	m¨_h 
;

60 
	m¨_∂n
;

61 
	m¨_›
;

65 
	m__¨_sha
[
ETH_ALEN
];

66 
	m__¨_sù
[4];

67 
	m__¨_tha
[
ETH_ALEN
];

68 
	m__¨_tù
[4];

74 
	#ARPHRD_NETROM
 0

	)

75 
	#ARPHRD_ETHER
 1

	)

76 
	#ARPHRD_EETHER
 2

	)

77 
	#ARPHRD_AX25
 3

	)

78 
	#ARPHRD_PRONET
 4

	)

79 
	#ARPHRD_CHAOS
 5

	)

80 
	#ARPHRD_IEEE802
 6

	)

81 
	#ARPHRD_ARCNET
 7

	)

82 
	#ARPHRD_APPLETLK
 8

	)

83 
	#ARPHRD_DLCI
 15

	)

84 
	#ARPHRD_ATM
 19

	)

85 
	#ARPHRD_METRICOM
 23

	)

86 
	#ARPHRD_IEEE1394
 24

	)

87 
	#ARPHRD_EUI64
 27

	)

88 
	#ARPHRD_INFINIBAND
 32

	)

91 
	#ARPHRD_SLIP
 256

	)

92 
	#ARPHRD_CSLIP
 257

	)

93 
	#ARPHRD_SLIP6
 258

	)

94 
	#ARPHRD_CSLIP6
 259

	)

95 
	#ARPHRD_RSRVD
 260

	)

96 
	#ARPHRD_ADAPT
 264

	)

97 
	#ARPHRD_ROSE
 270

	)

98 
	#ARPHRD_X25
 271

	)

99 
	#ARPHRD_HWX25
 272

	)

100 
	#ARPHRD_PPP
 512

	)

101 
	#ARPHRD_CISCO
 513

	)

102 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

103 
	#ARPHRD_LAPB
 516

	)

104 
	#ARPHRD_DDCMP
 517

	)

105 
	#ARPHRD_RAWHDLC
 518

	)

107 
	#ARPHRD_TUNNEL
 768

	)

108 
	#ARPHRD_TUNNEL6
 769

	)

109 
	#ARPHRD_FRAD
 770

	)

110 
	#ARPHRD_SKIP
 771

	)

111 
	#ARPHRD_LOOPBACK
 772

	)

112 
	#ARPHRD_LOCALTLK
 773

	)

113 
	#ARPHRD_FDDI
 774

	)

114 
	#ARPHRD_BIF
 775

	)

115 
	#ARPHRD_SIT
 776

	)

116 
	#ARPHRD_IPDDP
 777

	)

117 
	#ARPHRD_IPGRE
 778

	)

118 
	#ARPHRD_PIMREG
 779

	)

119 
	#ARPHRD_HIPPI
 780

	)

120 
	#ARPHRD_ASH
 781

	)

121 
	#ARPHRD_ECONET
 782

	)

122 
	#ARPHRD_IRDA
 783

	)

123 
	#ARPHRD_FCPP
 784

	)

124 
	#ARPHRD_FCAL
 785

	)

125 
	#ARPHRD_FCPL
 786

	)

126 
	#ARPHRD_FCFABRIC
 787

	)

127 
	#ARPHRD_IEEE802_TR
 800

	)

128 
	#ARPHRD_IEEE80211
 801

	)

129 
	#ARPHRD_IEEE80211_PRISM
 802

	)

130 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

131 
	#ARPHRD_IEEE802154
 804

	)

132 
	#ARPHRD_IEEE802154_PHY
 805

	)

134 
	#ARPHRD_VOID
 0xFFFF

	)

135 
	#ARPHRD_NONE
 0xFFFE

	)

139 
	s¨¥eq


141 
sockaddr
 
	m¨p_∑
;

142 
sockaddr
 
	m¨p_ha
;

143 
	m¨p_Êags
;

144 
sockaddr
 
	m¨p_√tmask
;

145 
	m¨p_dev
[16];

148 
	s¨¥eq_ﬁd


150 
sockaddr
 
	m¨p_∑
;

151 
sockaddr
 
	m¨p_ha
;

152 
	m¨p_Êags
;

153 
sockaddr
 
	m¨p_√tmask
;

157 
	#ATF_COM
 0x02

	)

158 
	#ATF_PERM
 0x04

	)

159 
	#ATF_PUBL
 0x08

	)

160 
	#ATF_USETRAILERS
 0x10

	)

161 
	#ATF_NETMASK
 0x20

	)

163 
	#ATF_DONTPUB
 0x40

	)

164 
	#ATF_MAGIC
 0x80

	)

168 
	#ARPD_UPDATE
 0x01

	)

169 
	#ARPD_LOOKUP
 0x02

	)

170 
	#ARPD_FLUSH
 0x03

	)

172 
	s¨pd_ªque°


174 
	mªq
;

175 
u_öt32_t
 
	mù
;

176 
	mdev
;

177 
	m°amp
;

178 
	mupd©ed
;

179 
	mha
[
MAX_ADDR_LEN
];

182 
	g__END_DECLS


	@/usr/include/net/route.h

21 #i‚de‡
_NET_ROUTE_H


22 
	#_NET_ROUTE_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<sys/sockë.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<√töë/ö.h
>

28 
	~<bôs/w‹dsize.h
>

32 
	sπíåy


34 
	mπ_∑d1
;

35 
sockaddr
 
	mπ_d°
;

36 
sockaddr
 
	mπ_g©eway
;

37 
sockaddr
 
	mπ_gímask
;

38 
	mπ_Êags
;

39 
	mπ_∑d2
;

40 
	mπ_∑d3
;

41 
	mπ_tos
;

42 
	mπ_˛ass
;

43 #i‡
__WORDSIZE
 == 64

44 
	mπ_∑d4
[3];

46 
	mπ_∑d4
;

48 
	mπ_mëric
;

49 *
	mπ_dev
;

50 
	mπ_mtu
;

51 
	mπ_wödow
;

52 
	mπ_úâ
;

55 
	#π_mss
 
π_mtu


	)

58 
	sö6_πmsg


60 
ö6_addr
 
	mπmsg_d°
;

61 
ö6_addr
 
	mπmsg_§c
;

62 
ö6_addr
 
	mπmsg_g©eway
;

63 
u_öt32_t
 
	mπmsg_ty≥
;

64 
u_öt16_t
 
	mπmsg_d°_Àn
;

65 
u_öt16_t
 
	mπmsg_§c_Àn
;

66 
u_öt32_t
 
	mπmsg_mëric
;

67 
	mπmsg_öfo
;

68 
u_öt32_t
 
	mπmsg_Êags
;

69 
	mπmsg_ifödex
;

73 
	#RTF_UP
 0x0001

	)

74 
	#RTF_GATEWAY
 0x0002

	)

76 
	#RTF_HOST
 0x0004

	)

77 
	#RTF_REINSTATE
 0x0008

	)

78 
	#RTF_DYNAMIC
 0x0010

	)

79 
	#RTF_MODIFIED
 0x0020

	)

80 
	#RTF_MTU
 0x0040

	)

81 
	#RTF_MSS
 
RTF_MTU


	)

82 
	#RTF_WINDOW
 0x0080

	)

83 
	#RTF_IRTT
 0x0100

	)

84 
	#RTF_REJECT
 0x0200

	)

85 
	#RTF_STATIC
 0x0400

	)

86 
	#RTF_XRESOLVE
 0x0800

	)

87 
	#RTF_NOFORWARD
 0x1000

	)

88 
	#RTF_THROW
 0x2000

	)

89 
	#RTF_NOPMTUDISC
 0x4000

	)

92 
	#RTF_DEFAULT
 0x00010000

	)

93 
	#RTF_ALLONLINK
 0x00020000

	)

94 
	#RTF_ADDRCONF
 0x00040000

	)

96 
	#RTF_LINKRT
 0x00100000

	)

97 
	#RTF_NONEXTHOP
 0x00200000

	)

99 
	#RTF_CACHE
 0x01000000

	)

100 
	#RTF_FLOW
 0x02000000

	)

101 
	#RTF_POLICY
 0x04000000

	)

103 
	#RTCF_VALVE
 0x00200000

	)

104 
	#RTCF_MASQ
 0x00400000

	)

105 
	#RTCF_NAT
 0x00800000

	)

106 
	#RTCF_DOREDIRECT
 0x01000000

	)

107 
	#RTCF_LOG
 0x02000000

	)

108 
	#RTCF_DIRECTSRC
 0x04000000

	)

110 
	#RTF_LOCAL
 0x80000000

	)

111 
	#RTF_INTERFACE
 0x40000000

	)

112 
	#RTF_MULTICAST
 0x20000000

	)

113 
	#RTF_BROADCAST
 0x10000000

	)

114 
	#RTF_NAT
 0x08000000

	)

116 
	#RTF_ADDRCLASSMASK
 0xF8000000

	)

117 
	#RT_ADDRCLASS
(
Êags
Ë((
__u_öt32_t
ËÊag†>> 23)

	)

119 
	#RT_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

121 
	#RT_LOCALADDR
(
Êags
Ë((Êag†& 
RTF_ADDRCLASSMASK
) \

122 =(
RTF_LOCAL
|
RTF_INTERFACE
))

	)

124 
	#RT_CLASS_UNSPEC
 0

	)

125 
	#RT_CLASS_DEFAULT
 253

	)

127 
	#RT_CLASS_MAIN
 254

	)

128 
	#RT_CLASS_LOCAL
 255

	)

129 
	#RT_CLASS_MAX
 255

	)

132 
	#RTMSG_ACK
 
NLMSG_ACK


	)

133 
	#RTMSG_OVERRUN
 
NLMSG_OVERRUN


	)

135 
	#RTMSG_NEWDEVICE
 0x11

	)

136 
	#RTMSG_DELDEVICE
 0x12

	)

137 
	#RTMSG_NEWROUTE
 0x21

	)

138 
	#RTMSG_DELROUTE
 0x22

	)

139 
	#RTMSG_NEWRULE
 0x31

	)

140 
	#RTMSG_DELRULE
 0x32

	)

141 
	#RTMSG_CONTROL
 0x40

	)

143 
	#RTMSG_AR_FAILED
 0x51

	)

	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


56 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


59 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

62 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

66 
	#HOST_NOT_FOUND
 1

	)

67 
	#TRY_AGAIN
 2

	)

69 
	#NO_RECOVERY
 3

	)

71 
	#NO_DATA
 4

	)

74 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


75 
	#NETDB_INTERNAL
 -1

	)

76 
	#NETDB_SUCCESS
 0

	)

77 
	#NO_ADDRESS
 
NO_DATA


	)

80 #ifde‡
__USE_XOPEN2K


82 
	#IPPORT_RESERVED
 1024

	)

85 #ifde‡
__USE_GNU


87 
	#SCOPE_DELIMITER
 '%'

	)

90 #ifde‡
__USE_MISC


93 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

96 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

101 
	sho°ít


103 *
h_«me
;

104 **
h_Æü£s
;

105 
h_addπy≥
;

106 
h_Àngth
;

107 **
h_addr_li°
;

108 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


109 
	#h_addr
 
h_addr_li°
[0]

	)

118 
	`£tho°ít
 (
__°ay_›í
);

124 
	`ídho°ít
 ();

131 
ho°ít
 *
	`gëho°ít
 ();

138 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

139 
__ty≥
);

145 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

147 #ifde‡
__USE_MISC


156 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

168 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

169 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

170 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

171 *
__ª°ri˘
 
__h_î∫›
);

173 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

174 
__ty≥
,

175 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

176 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

177 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

178 *
__ª°ri˘
 
__h_î∫›
);

180 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

181 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

182 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

183 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

184 *
__ª°ri˘
 
__h_î∫›
);

186 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

187 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

188 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

189 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

190 *
__ª°ri˘
 
__h_î∫›
);

199 
	`£äëít
 (
__°ay_›í
);

205 
	`íd√ã¡
 ();

212 
√ã¡
 *
	`gë√ã¡
 ();

219 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

225 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

227 #ifdef 
__USE_MISC


238 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

239 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

240 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

241 *
__ª°ri˘
 
__h_î∫›
);

243 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

244 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

245 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

246 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

247 *
__ª°ri˘
 
__h_î∫›
);

249 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

250 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

251 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

252 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

253 *
__ª°ri˘
 
__h_î∫›
);

258 
	s£rvít


260 *
s_«me
;

261 **
s_Æü£s
;

262 
s_p‹t
;

263 *
s_¥Ÿo
;

271 
	`£t£rvít
 (
__°ay_›í
);

277 
	`íd£rvít
 ();

284 
£rvít
 *
	`gë£rvít
 ();

291 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

292 
__c⁄°
 *
__¥Ÿo
);

299 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

302 #ifdef 
__USE_MISC


310 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

311 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

312 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

314 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

315 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

316 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

317 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

318 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

320 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

321 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

322 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

323 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

328 
	s¥Ÿ€¡


330 *
p_«me
;

331 **
p_Æü£s
;

332 
p_¥Ÿo
;

340 
	`£çrŸ€¡
 (
__°ay_›í
);

346 
	`íd¥Ÿ€¡
 ();

353 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

359 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

365 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

368 #ifdef 
__USE_MISC


376 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

377 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

378 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

380 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

381 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

382 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

383 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

385 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

386 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

387 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

388 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

397 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

405 
	`íd√tgª¡
 ();

414 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

415 **
__ª°ri˘
 
__u£Ω
,

416 **
__ª°ri˘
 
__domaöp
);

425 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

426 
__c⁄°
 *
__u£r
, __c⁄° *
__domaö
);

434 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

435 **
__ª°ri˘
 
__u£Ω
,

436 **
__ª°ri˘
 
__domaöp
,

437 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

441 #ifde‡
__USE_BSD


453 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

454 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

455 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

456 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

465 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

466 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

467 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

468 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

469 
ß_Ámûy_t
 
__af
);

481 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

482 
__c⁄°
 *
__ª°ri˘
 
__«me
,

483 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

484 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

493 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

494 
__c⁄°
 *
__ª°ri˘
 
__«me
,

495 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

496 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

497 
ß_Ámûy_t
 
__af
);

507 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

508 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

517 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

518 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

519 
ß_Ámûy_t
 
__af
);

530 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

531 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

541 
	`úu£rok_af
 (
__c⁄°
 *
__øddr
, 
__su£r
,

542 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

543 
ß_Ámûy_t
 
__af
);

553 
	`ºesvp‹t
 (*
__Æp‹t
);

562 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

567 #ifdef 
__USE_POSIX


569 
	saddröfo


571 
ai_Êags
;

572 
ai_Ámûy
;

573 
ai_sockty≥
;

574 
ai_¥Ÿocﬁ
;

575 
sockÀn_t
 
ai_addæí
;

576 
sockaddr
 *
ai_addr
;

577 *
ai_ˇn⁄«me
;

578 
addröfo
 *
ai_√xt
;

581 #ifde‡
__USE_GNU


583 
	sgaicb


585 c⁄° *
¨_«me
;

586 c⁄° *
¨_£rvi˚
;

587 c⁄° 
addröfo
 *
¨_ªque°
;

588 
addröfo
 *
¨_ªsu…
;

590 
__ªtu∫
;

591 
__unu£d
[5];

595 
	#GAI_WAIT
 0

	)

596 
	#GAI_NOWAIT
 1

	)

600 
	#AI_PASSIVE
 0x0001

	)

601 
	#AI_CANONNAME
 0x0002

	)

602 
	#AI_NUMERICHOST
 0x0004

	)

603 
	#AI_V4MAPPED
 0x0008

	)

604 
	#AI_ALL
 0x0010

	)

605 
	#AI_ADDRCONFIG
 0x0020

	)

607 #ifde‡
__USE_GNU


608 
	#AI_IDN
 0x0040

	)

611 
	#AI_CANONIDN
 0x0080

	)

612 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

614 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

617 
	#AI_NUMERICSERV
 0x0400

	)

620 
	#EAI_BADFLAGS
 -1

	)

621 
	#EAI_NONAME
 -2

	)

622 
	#EAI_AGAIN
 -3

	)

623 
	#EAI_FAIL
 -4

	)

624 
	#EAI_FAMILY
 -6

	)

625 
	#EAI_SOCKTYPE
 -7

	)

626 
	#EAI_SERVICE
 -8

	)

627 
	#EAI_MEMORY
 -10

	)

628 
	#EAI_SYSTEM
 -11

	)

629 
	#EAI_OVERFLOW
 -12

	)

630 #ifde‡
__USE_GNU


631 
	#EAI_NODATA
 -5

	)

632 
	#EAI_ADDRFAMILY
 -9

	)

633 
	#EAI_INPROGRESS
 -100

	)

634 
	#EAI_CANCELED
 -101

	)

635 
	#EAI_NOTCANCELED
 -102

	)

636 
	#EAI_ALLDONE
 -103

	)

637 
	#EAI_INTR
 -104

	)

638 
	#EAI_IDN_ENCODE
 -105

	)

641 #ifde‡
__USE_MISC


642 
	#NI_MAXHOST
 1025

	)

643 
	#NI_MAXSERV
 32

	)

646 
	#NI_NUMERICHOST
 1

	)

647 
	#NI_NUMERICSERV
 2

	)

648 
	#NI_NOFQDN
 4

	)

649 
	#NI_NAMEREQD
 8

	)

650 
	#NI_DGRAM
 16

	)

651 #ifde‡
__USE_GNU


652 
	#NI_IDN
 32

	)

653 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

655 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

664 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

665 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

666 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

667 
addröfo
 **
__ª°ri˘
 
__∑i
);

670 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

673 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

679 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

680 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

681 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

682 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

685 #ifde‡
__USE_GNU


694 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

695 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

705 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

706 
__c⁄°
 
time•ec
 *
__timeout
);

709 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

712 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

715 
__END_DECLS


	@/usr/include/netinet/icmp6.h

19 #i‚de‡
_NETINET_ICMP6_H


20 
	#_NETINET_ICMP6_H
 1

	)

22 
	~<öây≥s.h
>

23 
	~<°rög.h
>

24 
	~<sys/ty≥s.h
>

25 
	~<√töë/ö.h
>

27 
	#ICMP6_FILTER
 1

	)

29 
	#ICMP6_FILTER_BLOCK
 1

	)

30 
	#ICMP6_FILTER_PASS
 2

	)

31 
	#ICMP6_FILTER_BLOCKOTHERS
 3

	)

32 
	#ICMP6_FILTER_PASSONLY
 4

	)

34 
	sicmp6_fûãr


36 
uöt32_t
 
	micmp6_fût
[8];

39 
	sicmp6_hdr


41 
uöt8_t
 
	micmp6_ty≥
;

42 
uöt8_t
 
	micmp6_code
;

43 
uöt16_t
 
	micmp6_cksum
;

46 
uöt32_t
 
	micmp6_un_d©a32
[1];

47 
uöt16_t
 
	micmp6_un_d©a16
[2];

48 
uöt8_t
 
	micmp6_un_d©a8
[4];

49 } 
	micmp6_d©aun
;

52 
	#icmp6_d©a32
 
icmp6_d©aun
.
icmp6_un_d©a32


	)

53 
	#icmp6_d©a16
 
icmp6_d©aun
.
icmp6_un_d©a16


	)

54 
	#icmp6_d©a8
 
icmp6_d©aun
.
icmp6_un_d©a8


	)

55 
	#icmp6_µå
 
icmp6_d©a32
[0]

	)

56 
	#icmp6_mtu
 
icmp6_d©a32
[0]

	)

57 
	#icmp6_id
 
icmp6_d©a16
[0]

	)

58 
	#icmp6_£q
 
icmp6_d©a16
[1]

	)

59 
	#icmp6_maxdñay
 
icmp6_d©a16
[0]

	)

61 
	#ICMP6_DST_UNREACH
 1

	)

62 
	#ICMP6_PACKET_TOO_BIG
 2

	)

63 
	#ICMP6_TIME_EXCEEDED
 3

	)

64 
	#ICMP6_PARAM_PROB
 4

	)

66 
	#ICMP6_INFOMSG_MASK
 0x80

	)

68 
	#ICMP6_ECHO_REQUEST
 128

	)

69 
	#ICMP6_ECHO_REPLY
 129

	)

70 
	#MLD_LISTENER_QUERY
 130

	)

71 
	#MLD_LISTENER_REPORT
 131

	)

72 
	#MLD_LISTENER_REDUCTION
 132

	)

74 
	#ICMP6_DST_UNREACH_NOROUTE
 0

	)

75 
	#ICMP6_DST_UNREACH_ADMIN
 1

	)

77 
	#ICMP6_DST_UNREACH_BEYONDSCOPE
 2

	)

78 
	#ICMP6_DST_UNREACH_ADDR
 3

	)

79 
	#ICMP6_DST_UNREACH_NOPORT
 4

	)

81 
	#ICMP6_TIME_EXCEED_TRANSIT
 0

	)

82 
	#ICMP6_TIME_EXCEED_REASSEMBLY
 1

	)

84 
	#ICMP6_PARAMPROB_HEADER
 0

	)

85 
	#ICMP6_PARAMPROB_NEXTHEADER
 1

	)

86 
	#ICMP6_PARAMPROB_OPTION
 2

	)

88 
	#ICMP6_FILTER_WILLPASS
(
ty≥
, 
fûãΩ
) \

89 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë& (1 << (—y≥Ë& 31))Ë=0)

	)

91 
	#ICMP6_FILTER_WILLBLOCK
(
ty≥
, 
fûãΩ
) \

92 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë& (1 << (—y≥Ë& 31))Ë!0)

	)

94 
	#ICMP6_FILTER_SETPASS
(
ty≥
, 
fûãΩ
) \

95 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë&~(1 << (—y≥Ë& 31))))

	)

97 
	#ICMP6_FILTER_SETBLOCK
(
ty≥
, 
fûãΩ
) \

98 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë|(1 << (—y≥Ë& 31))))

	)

100 
	#ICMP6_FILTER_SETPASSALL
(
fûãΩ
) \

101 
	`mem£t
 (
fûãΩ
, 0,  (
icmp6_fûãr
));

	)

103 
	#ICMP6_FILTER_SETBLOCKALL
(
fûãΩ
) \

104 
	`mem£t
 (
fûãΩ
, 0xFF,  (
icmp6_fûãr
));

	)

106 
	#ND_ROUTER_SOLICIT
 133

	)

107 
	#ND_ROUTER_ADVERT
 134

	)

108 
	#ND_NEIGHBOR_SOLICIT
 135

	)

109 
	#ND_NEIGHBOR_ADVERT
 136

	)

110 
	#ND_REDIRECT
 137

	)

112 
	snd_rouãr_sﬁicô


114 
icmp6_hdr
 
	mnd_rs_hdr
;

118 
	#nd_rs_ty≥
 
nd_rs_hdr
.
icmp6_ty≥


	)

119 
	#nd_rs_code
 
nd_rs_hdr
.
icmp6_code


	)

120 
	#nd_rs_cksum
 
nd_rs_hdr
.
icmp6_cksum


	)

121 
	#nd_rs_ª£rved
 
nd_rs_hdr
.
icmp6_d©a32
[0]

	)

123 
	snd_rouãr_advît


125 
icmp6_hdr
 
	mnd_ø_hdr
;

126 
uöt32_t
 
	mnd_ø_ªachabÀ
;

127 
uöt32_t
 
	mnd_ø_ªå™smô
;

131 
	#nd_ø_ty≥
 
nd_ø_hdr
.
icmp6_ty≥


	)

132 
	#nd_ø_code
 
nd_ø_hdr
.
icmp6_code


	)

133 
	#nd_ø_cksum
 
nd_ø_hdr
.
icmp6_cksum


	)

134 
	#nd_ø_curh›limô
 
nd_ø_hdr
.
icmp6_d©a8
[0]

	)

135 
	#nd_ø_Êags_ª£rved
 
nd_ø_hdr
.
icmp6_d©a8
[1]

	)

136 
	#ND_RA_FLAG_MANAGED
 0x80

	)

137 
	#ND_RA_FLAG_OTHER
 0x40

	)

138 
	#ND_RA_FLAG_HOME_AGENT
 0x20

	)

139 
	#nd_ø_rouãr_li„time
 
nd_ø_hdr
.
icmp6_d©a16
[1]

	)

141 
	snd_√ighb‹_sﬁicô


143 
icmp6_hdr
 
	mnd_ns_hdr
;

144 
ö6_addr
 
	mnd_ns_èrgë
;

148 
	#nd_ns_ty≥
 
nd_ns_hdr
.
icmp6_ty≥


	)

149 
	#nd_ns_code
 
nd_ns_hdr
.
icmp6_code


	)

150 
	#nd_ns_cksum
 
nd_ns_hdr
.
icmp6_cksum


	)

151 
	#nd_ns_ª£rved
 
nd_ns_hdr
.
icmp6_d©a32
[0]

	)

153 
	snd_√ighb‹_advît


155 
icmp6_hdr
 
	mnd_«_hdr
;

156 
ö6_addr
 
	mnd_«_èrgë
;

160 
	#nd_«_ty≥
 
nd_«_hdr
.
icmp6_ty≥


	)

161 
	#nd_«_code
 
nd_«_hdr
.
icmp6_code


	)

162 
	#nd_«_cksum
 
nd_«_hdr
.
icmp6_cksum


	)

163 
	#nd_«_Êags_ª£rved
 
nd_«_hdr
.
icmp6_d©a32
[0]

	)

164 #i‡ 
BYTE_ORDER
 =
BIG_ENDIAN


165 
	#ND_NA_FLAG_ROUTER
 0x80000000

	)

166 
	#ND_NA_FLAG_SOLICITED
 0x40000000

	)

167 
	#ND_NA_FLAG_OVERRIDE
 0x20000000

	)

169 
	#ND_NA_FLAG_ROUTER
 0x00000080

	)

170 
	#ND_NA_FLAG_SOLICITED
 0x00000040

	)

171 
	#ND_NA_FLAG_OVERRIDE
 0x00000020

	)

174 
	snd_ªdúe˘


176 
icmp6_hdr
 
	mnd_rd_hdr
;

177 
ö6_addr
 
	mnd_rd_èrgë
;

178 
ö6_addr
 
	mnd_rd_d°
;

182 
	#nd_rd_ty≥
 
nd_rd_hdr
.
icmp6_ty≥


	)

183 
	#nd_rd_code
 
nd_rd_hdr
.
icmp6_code


	)

184 
	#nd_rd_cksum
 
nd_rd_hdr
.
icmp6_cksum


	)

185 
	#nd_rd_ª£rved
 
nd_rd_hdr
.
icmp6_d©a32
[0]

	)

187 
	snd_›t_hdr


189 
uöt8_t
 
	mnd_›t_ty≥
;

190 
uöt8_t
 
	mnd_›t_Àn
;

194 
	#ND_OPT_SOURCE_LINKADDR
 1

	)

195 
	#ND_OPT_TARGET_LINKADDR
 2

	)

196 
	#ND_OPT_PREFIX_INFORMATION
 3

	)

197 
	#ND_OPT_REDIRECTED_HEADER
 4

	)

198 
	#ND_OPT_MTU
 5

	)

199 
	#ND_OPT_RTR_ADV_INTERVAL
 7

	)

200 
	#ND_OPT_HOME_AGENT_INFO
 8

	)

202 
	snd_›t_¥efix_öfo


204 
uöt8_t
 
	mnd_›t_pi_ty≥
;

205 
uöt8_t
 
	mnd_›t_pi_Àn
;

206 
uöt8_t
 
	mnd_›t_pi_¥efix_Àn
;

207 
uöt8_t
 
	mnd_›t_pi_Êags_ª£rved
;

208 
uöt32_t
 
	mnd_›t_pi_vÆid_time
;

209 
uöt32_t
 
	mnd_›t_pi_¥e„ºed_time
;

210 
uöt32_t
 
	mnd_›t_pi_ª£rved2
;

211 
ö6_addr
 
	mnd_›t_pi_¥efix
;

214 
	#ND_OPT_PI_FLAG_ONLINK
 0x80

	)

215 
	#ND_OPT_PI_FLAG_AUTO
 0x40

	)

216 
	#ND_OPT_PI_FLAG_RADDR
 0x20

	)

218 
	snd_›t_rd_hdr


220 
uöt8_t
 
	mnd_›t_rh_ty≥
;

221 
uöt8_t
 
	mnd_›t_rh_Àn
;

222 
uöt16_t
 
	mnd_›t_rh_ª£rved1
;

223 
uöt32_t
 
	mnd_›t_rh_ª£rved2
;

227 
	snd_›t_mtu


229 
uöt8_t
 
	mnd_›t_mtu_ty≥
;

230 
uöt8_t
 
	mnd_›t_mtu_Àn
;

231 
uöt16_t
 
	mnd_›t_mtu_ª£rved
;

232 
uöt32_t
 
	mnd_›t_mtu_mtu
;

235 
	smld_hdr


237 
icmp6_hdr
 
	mmld_icmp6_hdr
;

238 
ö6_addr
 
	mmld_addr
;

241 
	#mld_ty≥
 
mld_icmp6_hdr
.
icmp6_ty≥


	)

242 
	#mld_code
 
mld_icmp6_hdr
.
icmp6_code


	)

243 
	#mld_cksum
 
mld_icmp6_hdr
.
icmp6_cksum


	)

244 
	#mld_maxdñay
 
mld_icmp6_hdr
.
icmp6_d©a16
[0]

	)

245 
	#mld_ª£rved
 
mld_icmp6_hdr
.
icmp6_d©a16
[1]

	)

247 
	#ICMP6_ROUTER_RENUMBERING
 138

	)

249 
	sicmp6_rouãr_ªnum


251 
icmp6_hdr
 
	mº_hdr
;

252 
uöt8_t
 
	mº_£gnum
;

253 
uöt8_t
 
	mº_Êags
;

254 
uöt16_t
 
	mº_maxdñay
;

255 
uöt32_t
 
	mº_ª£rved
;

258 
	#º_ty≥
 
º_hdr
.
icmp6_ty≥


	)

259 
	#º_code
 
º_hdr
.
icmp6_code


	)

260 
	#º_cksum
 
º_hdr
.
icmp6_cksum


	)

261 
	#º_£qnum
 
º_hdr
.
icmp6_d©a32
[0]

	)

264 
	#ICMP6_RR_FLAGS_TEST
 0x80

	)

265 
	#ICMP6_RR_FLAGS_REQRESULT
 0x40

	)

266 
	#ICMP6_RR_FLAGS_FORCEAPPLY
 0x20

	)

267 
	#ICMP6_RR_FLAGS_SPECSITE
 0x10

	)

268 
	#ICMP6_RR_FLAGS_PREVDONE
 0x08

	)

270 
	sº_pco_m©ch


272 
uöt8_t
 
	mΩm_code
;

273 
uöt8_t
 
	mΩm_Àn
;

274 
uöt8_t
 
	mΩm_‹döÆ
;

275 
uöt8_t
 
	mΩm_m©chÀn
;

276 
uöt8_t
 
	mΩm_möÀn
;

277 
uöt8_t
 
	mΩm_maxÀn
;

278 
uöt16_t
 
	mΩm_ª£rved
;

279 
ö6_addr
 
	mΩm_¥efix
;

283 
	#RPM_PCO_ADD
 1

	)

284 
	#RPM_PCO_CHANGE
 2

	)

285 
	#RPM_PCO_SETGLOBAL
 3

	)

287 
	sº_pco_u£


289 
uöt8_t
 
	mΩu_u£Àn
;

290 
uöt8_t
 
	mΩu_kì∂í
;

291 
uöt8_t
 
	mΩu_ømask
;

292 
uöt8_t
 
	mΩu_øÊags
;

293 
uöt32_t
 
	mΩu_v…ime
;

294 
uöt32_t
 
	mΩu_∂time
;

295 
uöt32_t
 
	mΩu_Êags
;

296 
ö6_addr
 
	mΩu_¥efix
;

299 
	#ICMP6_RR_PCOUSE_RAFLAGS_ONLINK
 0x20

	)

300 
	#ICMP6_RR_PCOUSE_RAFLAGS_AUTO
 0x10

	)

302 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


303 
	#ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME
 0x80000000

	)

304 
	#ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME
 0x40000000

	)

305 #ñi‡
BYTE_ORDER
 =
LITTLE_ENDIAN


306 
	#ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME
 0x80

	)

307 
	#ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME
 0x40

	)

310 
	sº_ªsu…


312 
uöt16_t
 
	mºr_Êags
;

313 
uöt8_t
 
	mºr_‹döÆ
;

314 
uöt8_t
 
	mºr_m©chedÀn
;

315 
uöt32_t
 
	mºr_ifid
;

316 
ö6_addr
 
	mºr_¥efix
;

319 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


320 
	#ICMP6_RR_RESULT_FLAGS_OOB
 0x0002

	)

321 
	#ICMP6_RR_RESULT_FLAGS_FORBIDDEN
 0x0001

	)

322 #ñi‡
BYTE_ORDER
 =
LITTLE_ENDIAN


323 
	#ICMP6_RR_RESULT_FLAGS_OOB
 0x0200

	)

324 
	#ICMP6_RR_RESULT_FLAGS_FORBIDDEN
 0x0100

	)

328 
	snd_›t_adv_öãrvÆ


330 
uöt8_t
 
	mnd_›t_adv_öãrvÆ_ty≥
;

331 
uöt8_t
 
	mnd_›t_adv_öãrvÆ_Àn
;

332 
uöt16_t
 
	mnd_›t_adv_öãrvÆ_ª£rved
;

333 
uöt32_t
 
	mnd_›t_adv_öãrvÆ_ivÆ
;

337 
	snd_›t_home_agít_öfo


339 
uöt8_t
 
	mnd_›t_home_agít_öfo_ty≥
;

340 
uöt8_t
 
	mnd_›t_home_agít_öfo_Àn
;

341 
uöt16_t
 
	mnd_›t_home_agít_öfo_ª£rved
;

342 
uöt16_t
 
	mnd_›t_home_agít_öfo_¥e„ªn˚
;

343 
uöt16_t
 
	mnd_›t_home_agít_öfo_li„time
;

	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 #ifde‡
__GNUC__


400 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

401 (
__exãnsi⁄__
 \

402 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

403 
__a
->
s6_addr32
[0] == 0 \

404 && 
__a
->
s6_addr32
[1] == 0 \

405 && 
__a
->
s6_addr32
[2] == 0 \

406 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

408 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

409 (
__exãnsi⁄__
 \

410 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

411 
__a
->
s6_addr32
[0] == 0 \

412 && 
__a
->
s6_addr32
[1] == 0 \

413 && 
__a
->
s6_addr32
[2] == 0 \

414 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

416 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

417 (
__exãnsi⁄__
 \

418 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

419 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

421 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

422 (
__exãnsi⁄__
 \

423 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

424 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

426 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

427 (
__exãnsi⁄__
 \

428 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

429 
__a
->
s6_addr32
[0] == 0 \

430 && 
__a
->
s6_addr32
[1] == 0 \

431 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

433 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

434 (
__exãnsi⁄__
 \

435 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

436 
__a
->
s6_addr32
[0] == 0 \

437 && 
__a
->
s6_addr32
[1] == 0 \

438 && 
__a
->
s6_addr32
[2] == 0 \

439 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

441 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

442 (
__exãnsi⁄__
 \

443 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

444 
__c⁄°
 
ö6_addr
 *
__b
 = (__c⁄° ö6_add∏*Ë(
b
); \

445 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

446 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

447 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

448 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

450 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

451 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

452 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

453 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

454 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

456 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

457 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

458 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

459 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

460 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

462 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

463 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

464 =
	`ht⁄l
 (0x„800000))

	)

466 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

467 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

468 =
	`ht⁄l
 (0x„c00000))

	)

470 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

471 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

472 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

473 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

475 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

476 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

477 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

478 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

479 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

481 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

482 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

483 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

484 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

485 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

488 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

490 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


492 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

495 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

496 
__THROW
;

500 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

501 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

502 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

504 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

505 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

506 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

508 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

509 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

510 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

512 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

513 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

514 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

516 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

517 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

518 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

521 #ifde‡
__USE_GNU


523 
	sö6_pktöfo


525 
ö6_addr
 
ùi6_addr
;

526 
ùi6_ifödex
;

530 
	sù6_mtuöfo


532 
sockaddr_ö6
 
ù6m_addr
;

533 
uöt32_t
 
ù6m_mtu
;

538 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

539 
__THROW
 
__©åibuã_dïªˇãd__
;

540 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

541 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

542 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

543 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

544 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

545 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

546 
__mu…x
, 
__∂usy
)

547 
__THROW
 
__©åibuã_dïªˇãd__
;

548 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

549 
uöt8_t
 **
__çåp
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

552 
uöt8_t
 **
__çåp
, 
__ty≥
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

557 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

558 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

559 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

560 **
__d©abuÂ
Ë
__THROW
;

561 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

562 
__THROW
;

563 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

564 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

565 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

566 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

567 **
__d©abuÂ
Ë
__THROW
;

568 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

569 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

570 **
__d©abuÂ
Ë
__THROW
;

571 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

572 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

577 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

578 
__£gmíts
Ë
__THROW
;

579 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

580 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

581 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

582 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

583 
__THROW
;

589 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

590 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

591 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

592 
__THROW
;

595 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

596 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

597 
uöt32_t
 
__num§c
,

598 
__c⁄°
 
ö_addr
 *
__¶i°
)

599 
__THROW
;

603 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

604 
__c⁄°
 
sockaddr
 *
__group
,

605 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

606 
uöt32_t
 *
__num§c
,

607 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

610 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

611 
__c⁄°
 
sockaddr
 *
__group
,

612 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

613 
uöt32_t
 
__num§c
,

614 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

617 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

55 #ifde‡
__USE_MISC


56 
	~<sys/ty≥s.h
>

57 
	~<sys/sockë.h
>

59 #ifde‡
__FAVOR_BSD


60 
u_öt32_t
 
	tt˝_£q
;

65 
	st˝hdr


67 
u_öt16_t
 
	mth_•‹t
;

68 
u_öt16_t
 
	mth_dp‹t
;

69 
t˝_£q
 
	mth_£q
;

70 
t˝_£q
 
	mth_ack
;

71 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
u_öt8_t
 
	mth_x2
:4;

73 
u_öt8_t
 
	mth_off
:4;

75 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


76 
u_öt8_t
 
	mth_off
:4;

77 
u_öt8_t
 
	mth_x2
:4;

79 
u_öt8_t
 
	mth_Êags
;

80 
	#TH_FIN
 0x01

	)

81 
	#TH_SYN
 0x02

	)

82 
	#TH_RST
 0x04

	)

83 
	#TH_PUSH
 0x08

	)

84 
	#TH_ACK
 0x10

	)

85 
	#TH_URG
 0x20

	)

86 
u_öt16_t
 
	mth_wö
;

87 
u_öt16_t
 
	mth_sum
;

88 
u_öt16_t
 
	mth_uΩ
;

92 
	st˝hdr


94 
u_öt16_t
 
	msour˚
;

95 
u_öt16_t
 
	mde°
;

96 
u_öt32_t
 
	m£q
;

97 
u_öt32_t
 
	mack_£q
;

98 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


99 
u_öt16_t
 
	mªs1
:4;

100 
u_öt16_t
 
	mdoff
:4;

101 
u_öt16_t
 
	mfö
:1;

102 
u_öt16_t
 
	msyn
:1;

103 
u_öt16_t
 
	mr°
:1;

104 
u_öt16_t
 
	mpsh
:1;

105 
u_öt16_t
 
	mack
:1;

106 
u_öt16_t
 
	murg
:1;

107 
u_öt16_t
 
	mªs2
:2;

108 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


109 
u_öt16_t
 
	mdoff
:4;

110 
u_öt16_t
 
	mªs1
:4;

111 
u_öt16_t
 
	mªs2
:2;

112 
u_öt16_t
 
	murg
:1;

113 
u_öt16_t
 
	mack
:1;

114 
u_öt16_t
 
	mpsh
:1;

115 
u_öt16_t
 
	mr°
:1;

116 
u_öt16_t
 
	msyn
:1;

117 
u_öt16_t
 
	mfö
:1;

121 
u_öt16_t
 
	mwödow
;

122 
u_öt16_t
 
	mcheck
;

123 
u_öt16_t
 
	murg_±r
;

129 
	mTCP_ESTABLISHED
 = 1,

130 
	mTCP_SYN_SENT
,

131 
	mTCP_SYN_RECV
,

132 
	mTCP_FIN_WAIT1
,

133 
	mTCP_FIN_WAIT2
,

134 
	mTCP_TIME_WAIT
,

135 
	mTCP_CLOSE
,

136 
	mTCP_CLOSE_WAIT
,

137 
	mTCP_LAST_ACK
,

138 
	mTCP_LISTEN
,

139 
	mTCP_CLOSING


142 
	#TCPOPT_EOL
 0

	)

143 
	#TCPOPT_NOP
 1

	)

144 
	#TCPOPT_MAXSEG
 2

	)

145 
	#TCPOLEN_MAXSEG
 4

	)

146 
	#TCPOPT_WINDOW
 3

	)

147 
	#TCPOLEN_WINDOW
 3

	)

148 
	#TCPOPT_SACK_PERMITTED
 4

	)

149 
	#TCPOLEN_SACK_PERMITTED
 2

	)

150 
	#TCPOPT_SACK
 5

	)

151 
	#TCPOPT_TIMESTAMP
 8

	)

152 
	#TCPOLEN_TIMESTAMP
 10

	)

153 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

155 
	#TCPOPT_TSTAMP_HDR
 \

156 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

164 
	#TCP_MSS
 512

	)

166 
	#TCP_MAXWIN
 65535

	)

168 
	#TCP_MAX_WINSHIFT
 14

	)

170 
	#SOL_TCP
 6

	)

173 
	#TCPI_OPT_TIMESTAMPS
 1

	)

174 
	#TCPI_OPT_SACK
 2

	)

175 
	#TCPI_OPT_WSCALE
 4

	)

176 
	#TCPI_OPT_ECN
 8

	)

179 
	et˝_ˇ_°©e


181 
	mTCP_CA_O≥n
 = 0,

182 
	mTCP_CA_Dis‹dî
 = 1,

183 
	mTCP_CA_CWR
 = 2,

184 
	mTCP_CA_Recovîy
 = 3,

185 
	mTCP_CA_Loss
 = 4

188 
	st˝_öfo


190 
u_öt8_t
 
	mt˝i_°©e
;

191 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

192 
u_öt8_t
 
	mt˝i_ªå™smôs
;

193 
u_öt8_t
 
	mt˝i_¥obes
;

194 
u_öt8_t
 
	mt˝i_backoff
;

195 
u_öt8_t
 
	mt˝i_›ti⁄s
;

196 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

198 
u_öt32_t
 
	mt˝i_πo
;

199 
u_öt32_t
 
	mt˝i_©o
;

200 
u_öt32_t
 
	mt˝i_¢d_mss
;

201 
u_öt32_t
 
	mt˝i_rcv_mss
;

203 
u_öt32_t
 
	mt˝i_u«cked
;

204 
u_öt32_t
 
	mt˝i_ßcked
;

205 
u_öt32_t
 
	mt˝i_lo°
;

206 
u_öt32_t
 
	mt˝i_ªå™s
;

207 
u_öt32_t
 
	mt˝i_Áckës
;

210 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

211 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

212 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

213 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

216 
u_öt32_t
 
	mt˝i_pmtu
;

217 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

218 
u_öt32_t
 
	mt˝i_πt
;

219 
u_öt32_t
 
	mt˝i_πtv¨
;

220 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

221 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

222 
u_öt32_t
 
	mt˝i_advmss
;

223 
u_öt32_t
 
	mt˝i_ª‹dîög
;

225 
u_öt32_t
 
	mt˝i_rcv_πt
;

226 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

228 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

233 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

235 
	st˝_md5sig


237 
sockaddr_°‹age
 
	mt˝m_addr
;

238 
u_öt16_t
 
	m__t˝m_∑d1
;

239 
u_öt16_t
 
	mt˝m_keyÀn
;

240 
u_öt32_t
 
	m__t˝m_∑d2
;

241 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

	@/usr/include/openssl/dh.h

59 #i‚de‡
HEADER_DH_H


60 
	#HEADER_DH_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #ifde‡
OPENSSL_NO_DH


65 #îr‹ 
DH
 
is
 
dißbÀd
.

68 #i‚de‡
OPENSSL_NO_BIO


69 
	~<›ís¶/bio.h
>

71 
	~<›ís¶/os¶_typ.h
>

72 #i‚de‡
OPENSSL_NO_DEPRECATED


73 
	~<›ís¶/bn.h
>

76 #i‚de‡
OPENSSL_DH_MAX_MODULUS_BITS


77 
	#OPENSSL_DH_MAX_MODULUS_BITS
 10000

	)

80 
	#DH_FLAG_CACHE_MONT_P
 0x01

	)

81 
	#DH_FLAG_NO_EXP_CONSTTIME
 0x02

	)

95 
	#DH_FLAG_FIPS_METHOD
 0x0400

	)

102 
	#DH_FLAG_NON_FIPS_ALLOW
 0x0400

	)

104 #ifde‡ 
__˝lu•lus


112 
	sdh_mëhod


114 c⁄° *
«me
;

116 (*
gíî©e_key
)(
DH
 *
dh
);

117 (*
compuã_key
)(*
key
,c⁄° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

118 (*
bn_mod_exp
)(c⁄° 
DH
 *
dh
, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

119 c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
,

120 
BN_MONT_CTX
 *
m_˘x
);

122 (*
öô
)(
DH
 *
dh
);

123 (*
föish
)(
DH
 *
dh
);

124 
Êags
;

125 *
≠p_d©a
;

127 (*
gíî©e_∑øms
)(
DH
 *
dh
, 
¥ime_Àn
, 
gíî©‹
, 
BN_GENCB
 *
cb
);

130 
	sdh_°


134 
∑d
;

135 
vîsi⁄
;

136 
BIGNUM
 *
p
;

137 
BIGNUM
 *
g
;

138 
Àngth
;

139 
BIGNUM
 *
pub_key
;

140 
BIGNUM
 *
¥iv_key
;

142 
Êags
;

143 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

145 
BIGNUM
 *
q
;

146 
BIGNUM
 *
j
;

147 *
£ed
;

148 
£edÀn
;

149 
BIGNUM
 *
cou¡î
;

151 
ª„ªn˚s
;

152 
CRYPTO_EX_DATA
 
ex_d©a
;

153 c⁄° 
DH_METHOD
 *
mëh
;

154 
ENGINE
 *
ígöe
;

157 
	#DH_GENERATOR_2
 2

	)

159 
	#DH_GENERATOR_5
 5

	)

162 
	#DH_CHECK_P_NOT_PRIME
 0x01

	)

163 
	#DH_CHECK_P_NOT_SAFE_PRIME
 0x02

	)

164 
	#DH_UNABLE_TO_CHECK_GENERATOR
 0x04

	)

165 
	#DH_NOT_SUITABLE_GENERATOR
 0x08

	)

168 
	#DH_CHECK_PUBKEY_TOO_SMALL
 0x01

	)

169 
	#DH_CHECK_PUBKEY_TOO_LARGE
 0x02

	)

173 
	#DH_CHECK_P_NOT_STRONG_PRIME
 
DH_CHECK_P_NOT_SAFE_PRIME


	)

175 
	#d2i_DH∑øms_Â
(
Â
,
x
Ë(
DH
 *)
	`ASN1_d2i_Â
((*(*)())
DH_√w
, \

176 (*(*)())
d2i_DH∑øms
,(
Â
),(**)(
x
))

	)

177 
	#i2d_DH∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DH∑øms
,(fp), \

178 (*)(
x
))

	)

179 
	#d2i_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DH
,
DH_√w
,
d2i_DH∑øms
,bp,x)

	)

180 
	#i2d_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DH
,
i2d_DH∑øms
,bp,x)

	)

182 
DH
 *
DH∑øms_dup
(DH *);

184 c⁄° 
DH_METHOD
 *
DH_O≥nSSL
();

186 
DH_£t_deÁu…_mëhod
(c⁄° 
DH_METHOD
 *
mëh
);

187 c⁄° 
DH_METHOD
 *
DH_gë_deÁu…_mëhod
();

188 
DH_£t_mëhod
(
DH
 *
dh
, c⁄° 
DH_METHOD
 *
mëh
);

189 
DH
 *
DH_√w_mëhod
(
ENGINE
 *
ígöe
);

191 
DH
 * 
DH_√w
();

192 
DH_‰ì
(
DH
 *
dh
);

193 
DH_up_ªf
(
DH
 *
dh
);

194 
DH_size
(c⁄° 
DH
 *
dh
);

195 
DH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

196 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

197 
DH_£t_ex_d©a
(
DH
 *
d
, 
idx
, *
¨g
);

198 *
DH_gë_ex_d©a
(
DH
 *
d
, 
idx
);

201 #i‚de‡
OPENSSL_NO_DEPRECATED


202 
DH
 * 
DH_gíî©e_∑ømëîs
(
¥ime_Àn
,
gíî©‹
,

203 (*
ˇŒback
)(,,*),*
cb_¨g
);

207 
DH_gíî©e_∑ømëîs_ex
(
DH
 *
dh
, 
¥ime_Àn
,
gíî©‹
, 
BN_GENCB
 *
cb
);

209 
DH_check
(c⁄° 
DH
 *
dh
,*
codes
);

210 
DH_check_pub_key
(c⁄° 
DH
 *
dh
,c⁄° 
BIGNUM
 *
pub_key
, *
codes
);

211 
DH_gíî©e_key
(
DH
 *
dh
);

212 
DH_compuã_key
(*
key
,c⁄° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

213 
DH
 * 
d2i_DH∑øms
(DH **
a
,c⁄° **
µ
, 
Àngth
);

214 
i2d_DH∑øms
(c⁄° 
DH
 *
a
,**
µ
);

215 #i‚de‡
OPENSSL_NO_FP_API


216 
DH∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DH
 *
x
);

218 #i‚de‡
OPENSSL_NO_BIO


219 
DH∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DH
 *
x
);

221 
DH∑øms_¥öt
(*
bp
, c⁄° 
DH
 *
x
);

224 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_¥ime_Àn
(
˘x
, 
Àn
) \

225 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

226 
EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
, 
Àn
, 
NULL
)

	)

228 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_gíî©‹
(
˘x
, 
gí
) \

229 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

230 
EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
, 
gí
, 
NULL
)

	)

232 
	#EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

233 
	#EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

240 
ERR_lﬂd_DH_°rögs
();

245 
	#DH_F_COMPUTE_KEY
 102

	)

246 
	#DH_F_DHPARAMS_PRINT_FP
 101

	)

247 
	#DH_F_DH_BUILTIN_GENPARAMS
 106

	)

248 
	#DH_F_DH_COMPUTE_KEY
 114

	)

249 
	#DH_F_DH_GENERATE_KEY
 115

	)

250 
	#DH_F_DH_GENERATE_PARAMETERS_EX
 116

	)

251 
	#DH_F_DH_NEW_METHOD
 105

	)

252 
	#DH_F_DH_PARAM_DECODE
 107

	)

253 
	#DH_F_DH_PRIV_DECODE
 110

	)

254 
	#DH_F_DH_PRIV_ENCODE
 111

	)

255 
	#DH_F_DH_PUB_DECODE
 108

	)

256 
	#DH_F_DH_PUB_ENCODE
 109

	)

257 
	#DH_F_DO_DH_PRINT
 100

	)

258 
	#DH_F_GENERATE_KEY
 103

	)

259 
	#DH_F_GENERATE_PARAMETERS
 104

	)

260 
	#DH_F_PKEY_DH_DERIVE
 112

	)

261 
	#DH_F_PKEY_DH_KEYGEN
 113

	)

264 
	#DH_R_BAD_GENERATOR
 101

	)

265 
	#DH_R_BN_DECODE_ERROR
 109

	)

266 
	#DH_R_BN_ERROR
 106

	)

267 
	#DH_R_DECODE_ERROR
 104

	)

268 
	#DH_R_INVALID_PUBKEY
 102

	)

269 
	#DH_R_KEYS_NOT_SET
 108

	)

270 
	#DH_R_KEY_SIZE_TOO_SMALL
 110

	)

271 
	#DH_R_MODULUS_TOO_LARGE
 103

	)

272 
	#DH_R_NON_FIPS_METHOD
 111

	)

273 
	#DH_R_NO_PARAMETERS_SET
 107

	)

274 
	#DH_R_NO_PRIVATE_VALUE
 100

	)

275 
	#DH_R_PARAMETER_ENCODING_ERROR
 105

	)

277 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/err.h

112 #i‚de‡
HEADER_ERR_H


113 
	#HEADER_ERR_H


	)

115 
	~<›ís¶/e_os2.h
>

117 #i‚de‡
OPENSSL_NO_FP_API


118 
	~<°dio.h
>

119 
	~<°dlib.h
>

122 
	~<›ís¶/os¶_typ.h
>

123 #i‚de‡
OPENSSL_NO_BIO


124 
	~<›ís¶/bio.h
>

126 #i‚de‡
OPENSSL_NO_LHASH


127 
	~<›ís¶/lhash.h
>

130 #ifdef 
__˝lu•lus


134 #i‚de‡
OPENSSL_NO_ERR


135 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,d,e)

	)

137 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,
NULL
,0)

	)

140 
	~<î∫o.h
>

142 
	#ERR_TXT_MALLOCED
 0x01

	)

143 
	#ERR_TXT_STRING
 0x02

	)

145 
	#ERR_FLAG_MARK
 0x01

	)

147 
	#ERR_NUM_ERRORS
 16

	)

148 
	sîr_°©e_°


150 
CRYPTO_THREADID
 
tid
;

151 
îr_Êags
[
ERR_NUM_ERRORS
];

152 
îr_buf„r
[
ERR_NUM_ERRORS
];

153 *
îr_d©a
[
ERR_NUM_ERRORS
];

154 
îr_d©a_Êags
[
ERR_NUM_ERRORS
];

155 c⁄° *
îr_fûe
[
ERR_NUM_ERRORS
];

156 
îr_löe
[
ERR_NUM_ERRORS
];

157 
t›
,
bŸtom
;

158 } 
	tERR_STATE
;

161 
	#ERR_LIB_NONE
 1

	)

162 
	#ERR_LIB_SYS
 2

	)

163 
	#ERR_LIB_BN
 3

	)

164 
	#ERR_LIB_RSA
 4

	)

165 
	#ERR_LIB_DH
 5

	)

166 
	#ERR_LIB_EVP
 6

	)

167 
	#ERR_LIB_BUF
 7

	)

168 
	#ERR_LIB_OBJ
 8

	)

169 
	#ERR_LIB_PEM
 9

	)

170 
	#ERR_LIB_DSA
 10

	)

171 
	#ERR_LIB_X509
 11

	)

173 
	#ERR_LIB_ASN1
 13

	)

174 
	#ERR_LIB_CONF
 14

	)

175 
	#ERR_LIB_CRYPTO
 15

	)

176 
	#ERR_LIB_EC
 16

	)

177 
	#ERR_LIB_SSL
 20

	)

183 
	#ERR_LIB_BIO
 32

	)

184 
	#ERR_LIB_PKCS7
 33

	)

185 
	#ERR_LIB_X509V3
 34

	)

186 
	#ERR_LIB_PKCS12
 35

	)

187 
	#ERR_LIB_RAND
 36

	)

188 
	#ERR_LIB_DSO
 37

	)

189 
	#ERR_LIB_ENGINE
 38

	)

190 
	#ERR_LIB_OCSP
 39

	)

191 
	#ERR_LIB_UI
 40

	)

192 
	#ERR_LIB_COMP
 41

	)

193 
	#ERR_LIB_ECDSA
 42

	)

194 
	#ERR_LIB_ECDH
 43

	)

195 
	#ERR_LIB_STORE
 44

	)

196 
	#ERR_LIB_FIPS
 45

	)

197 
	#ERR_LIB_CMS
 46

	)

198 
	#ERR_LIB_TS
 47

	)

199 
	#ERR_LIB_HMAC
 48

	)

200 
	#ERR_LIB_JPAKE
 49

	)

202 
	#ERR_LIB_USER
 128

	)

204 
	#SYSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SYS
,(f),‘),
__FILE__
,
__LINE__
)

	)

205 
	#BNîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BN
,(f),‘),
__FILE__
,
__LINE__
)

	)

206 
	#RSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

207 
	#DHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DH
,(f),‘),
__FILE__
,
__LINE__
)

	)

208 
	#EVPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EVP
,(f),‘),
__FILE__
,
__LINE__
)

	)

209 
	#BUFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BUF
,(f),‘),
__FILE__
,
__LINE__
)

	)

210 
	#OBJîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OBJ
,(f),‘),
__FILE__
,
__LINE__
)

	)

211 
	#PEMîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PEM
,(f),‘),
__FILE__
,
__LINE__
)

	)

212 
	#DSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

213 
	#X509îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509
,(f),‘),
__FILE__
,
__LINE__
)

	)

214 
	#ASN1îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ASN1
,(f),‘),
__FILE__
,
__LINE__
)

	)

215 
	#CONFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CONF
,(f),‘),
__FILE__
,
__LINE__
)

	)

216 
	#CRYPTOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CRYPTO
,(f),‘),
__FILE__
,
__LINE__
)

	)

217 
	#ECîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EC
,(f),‘),
__FILE__
,
__LINE__
)

	)

218 
	#SSLîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SSL
,(f),‘),
__FILE__
,
__LINE__
)

	)

219 
	#BIOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BIO
,(f),‘),
__FILE__
,
__LINE__
)

	)

220 
	#PKCS7îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS7
,(f),‘),
__FILE__
,
__LINE__
)

	)

221 
	#X509V3îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509V3
,(f),‘),
__FILE__
,
__LINE__
)

	)

222 
	#PKCS12îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS12
,(f),‘),
__FILE__
,
__LINE__
)

	)

223 
	#RANDîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RAND
,(f),‘),
__FILE__
,
__LINE__
)

	)

224 
	#DSOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSO
,(f),‘),
__FILE__
,
__LINE__
)

	)

225 
	#ENGINEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ENGINE
,(f),‘),
__FILE__
,
__LINE__
)

	)

226 
	#OCSPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OCSP
,(f),‘),
__FILE__
,
__LINE__
)

	)

227 
	#UIîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_UI
,(f),‘),
__FILE__
,
__LINE__
)

	)

228 
	#COMPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_COMP
,(f),‘),
__FILE__
,
__LINE__
)

	)

229 
	#ECDSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

230 
	#ECDHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDH
,(f),‘),
__FILE__
,
__LINE__
)

	)

231 
	#STOREîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_STORE
,(f),‘),
__FILE__
,
__LINE__
)

	)

232 
	#FIPSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_FIPS
,(f),‘),
__FILE__
,
__LINE__
)

	)

233 
	#CMSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CMS
,(f),‘),
__FILE__
,
__LINE__
)

	)

234 
	#TSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_TS
,(f),‘),
__FILE__
,
__LINE__
)

	)

235 
	#HMACîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_HMAC
,(f),‘),
__FILE__
,
__LINE__
)

	)

236 
	#JPAKEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_JPAKE
,(f),‘),
__FILE__
,
__LINE__
)

	)

240 
	#ERR_PACK
(
l
,
f
,
r
) ((((()l)&0xffL)*0x1000000)| \

241 (((()
f
)&0xfffL)*0x1000)| \

242 (((()
r
)&0xfffL)))

	)

243 
	#ERR_GET_LIB
(
l
Ë()((((Ó)>>24L)&0xffL)

	)

244 
	#ERR_GET_FUNC
(
l
Ë()((((Ó)>>12L)&0xfffL)

	)

245 
	#ERR_GET_REASON
(
l
Ë()(÷)&0xfffL)

	)

246 
	#ERR_FATAL_ERROR
(
l
Ë()(÷)&
ERR_R_FATAL
)

	)

250 
	#SYS_F_FOPEN
 1

	)

251 
	#SYS_F_CONNECT
 2

	)

252 
	#SYS_F_GETSERVBYNAME
 3

	)

253 
	#SYS_F_SOCKET
 4

	)

254 
	#SYS_F_IOCTLSOCKET
 5

	)

255 
	#SYS_F_BIND
 6

	)

256 
	#SYS_F_LISTEN
 7

	)

257 
	#SYS_F_ACCEPT
 8

	)

258 
	#SYS_F_WSASTARTUP
 9

	)

259 
	#SYS_F_OPENDIR
 10

	)

260 
	#SYS_F_FREAD
 11

	)

264 
	#ERR_R_SYS_LIB
 
ERR_LIB_SYS


	)

265 
	#ERR_R_BN_LIB
 
ERR_LIB_BN


	)

266 
	#ERR_R_RSA_LIB
 
ERR_LIB_RSA


	)

267 
	#ERR_R_DH_LIB
 
ERR_LIB_DH


	)

268 
	#ERR_R_EVP_LIB
 
ERR_LIB_EVP


	)

269 
	#ERR_R_BUF_LIB
 
ERR_LIB_BUF


	)

270 
	#ERR_R_OBJ_LIB
 
ERR_LIB_OBJ


	)

271 
	#ERR_R_PEM_LIB
 
ERR_LIB_PEM


	)

272 
	#ERR_R_DSA_LIB
 
ERR_LIB_DSA


	)

273 
	#ERR_R_X509_LIB
 
ERR_LIB_X509


	)

274 
	#ERR_R_ASN1_LIB
 
ERR_LIB_ASN1


	)

275 
	#ERR_R_CONF_LIB
 
ERR_LIB_CONF


	)

276 
	#ERR_R_CRYPTO_LIB
 
ERR_LIB_CRYPTO


	)

277 
	#ERR_R_EC_LIB
 
ERR_LIB_EC


	)

278 
	#ERR_R_SSL_LIB
 
ERR_LIB_SSL


	)

279 
	#ERR_R_BIO_LIB
 
ERR_LIB_BIO


	)

280 
	#ERR_R_PKCS7_LIB
 
ERR_LIB_PKCS7


	)

281 
	#ERR_R_X509V3_LIB
 
ERR_LIB_X509V3


	)

282 
	#ERR_R_PKCS12_LIB
 
ERR_LIB_PKCS12


	)

283 
	#ERR_R_RAND_LIB
 
ERR_LIB_RAND


	)

284 
	#ERR_R_DSO_LIB
 
ERR_LIB_DSO


	)

285 
	#ERR_R_ENGINE_LIB
 
ERR_LIB_ENGINE


	)

286 
	#ERR_R_OCSP_LIB
 
ERR_LIB_OCSP


	)

287 
	#ERR_R_UI_LIB
 
ERR_LIB_UI


	)

288 
	#ERR_R_COMP_LIB
 
ERR_LIB_COMP


	)

289 
	#ERR_R_ECDSA_LIB
 
ERR_LIB_ECDSA


	)

290 
	#ERR_R_ECDH_LIB
 
ERR_LIB_ECDH


	)

291 
	#ERR_R_STORE_LIB
 
ERR_LIB_STORE


	)

292 
	#ERR_R_TS_LIB
 
ERR_LIB_TS


	)

294 
	#ERR_R_NESTED_ASN1_ERROR
 58

	)

295 
	#ERR_R_BAD_ASN1_OBJECT_HEADER
 59

	)

296 
	#ERR_R_BAD_GET_ASN1_OBJECT_CALL
 60

	)

297 
	#ERR_R_EXPECTING_AN_ASN1_SEQUENCE
 61

	)

298 
	#ERR_R_ASN1_LENGTH_MISMATCH
 62

	)

299 
	#ERR_R_MISSING_ASN1_EOS
 63

	)

302 
	#ERR_R_FATAL
 64

	)

303 
	#ERR_R_MALLOC_FAILURE
 (1|
ERR_R_FATAL
)

	)

304 
	#ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED
 (2|
ERR_R_FATAL
)

	)

305 
	#ERR_R_PASSED_NULL_PARAMETER
 (3|
ERR_R_FATAL
)

	)

306 
	#ERR_R_INTERNAL_ERROR
 (4|
ERR_R_FATAL
)

	)

307 
	#ERR_R_DISABLED
 (5|
ERR_R_FATAL
)

	)

313 
	sERR_°rög_d©a_°


315 
îr‹
;

316 c⁄° *
°rög
;

317 } 
	tERR_STRING_DATA
;

319 
ERR_put_îr‹
(
lib
, 
func
,
ªas⁄
,c⁄° *
fûe
,
löe
);

320 
ERR_£t_îr‹_d©a
(*
d©a
,
Êags
);

322 
ERR_gë_îr‹
();

323 
ERR_gë_îr‹_löe
(c⁄° **
fûe
,*
löe
);

324 
ERR_gë_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

325 c⁄° **
d©a
, *
Êags
);

326 
ERR_≥ek_îr‹
();

327 
ERR_≥ek_îr‹_löe
(c⁄° **
fûe
,*
löe
);

328 
ERR_≥ek_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

329 c⁄° **
d©a
,*
Êags
);

330 
ERR_≥ek_œ°_îr‹
();

331 
ERR_≥ek_œ°_îr‹_löe
(c⁄° **
fûe
,*
löe
);

332 
ERR_≥ek_œ°_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

333 c⁄° **
d©a
,*
Êags
);

334 
ERR_˛ór_îr‹
();

335 *
ERR_îr‹_°rög
(
e
,*
buf
);

336 
ERR_îr‹_°rög_n
(
e
, *
buf
, 
size_t
 
Àn
);

337 c⁄° *
ERR_lib_îr‹_°rög
(
e
);

338 c⁄° *
ERR_func_îr‹_°rög
(
e
);

339 c⁄° *
ERR_ªas⁄_îr‹_°rög
(
e
);

340 
ERR_¥öt_îr‹s_cb
((*
cb
)(c⁄° *
°r
, 
size_t
 
Àn
, *
u
),

341 *
u
);

342 #i‚de‡
OPENSSL_NO_FP_API


343 
ERR_¥öt_îr‹s_Â
(
FILE
 *
Â
);

345 #i‚de‡
OPENSSL_NO_BIO


346 
ERR_¥öt_îr‹s
(
BIO
 *
bp
);

348 
ERR_add_îr‹_d©a
(
num
, ...);

349 
ERR_add_îr‹_vd©a
(
num
, 
va_li°
 
¨gs
);

350 
ERR_lﬂd_°rögs
(
lib
,
ERR_STRING_DATA
 
°r
[]);

351 
ERR_u∆ﬂd_°rögs
(
lib
,
ERR_STRING_DATA
 
°r
[]);

352 
ERR_lﬂd_ERR_°rögs
();

353 
ERR_lﬂd_¸y±o_°rögs
();

354 
ERR_‰ì_°rögs
();

356 
ERR_ªmove_thªad_°©e
(c⁄° 
CRYPTO_THREADID
 *
tid
);

357 #i‚de‡
OPENSSL_NO_DEPRECATED


358 
ERR_ªmove_°©e
(
pid
);

360 
ERR_STATE
 *
ERR_gë_°©e
();

362 #i‚de‡
OPENSSL_NO_LHASH


363 
LHASH_OF
(
ERR_STRING_DATA
Ë*
ERR_gë_°rög_èbÀ
();

364 
LHASH_OF
(
ERR_STATE
Ë*
ERR_gë_îr_°©e_èbÀ
();

365 
ERR_ªÀa£_îr_°©e_èbÀ
(
LHASH_OF
(
ERR_STATE
Ë**
hash
);

368 
ERR_gë_√xt_îr‹_libøry
();

370 
ERR_£t_m¨k
();

371 
ERR_p›_to_m¨k
();

377 c⁄° 
ERR_FNS
 *
ERR_gë_im∂emíèti⁄
();

380 
ERR_£t_im∂emíèti⁄
(c⁄° 
ERR_FNS
 *
‚s
);

382 #ifdef 
__˝lu•lus


	@/usr/include/openssl/ssl.h

143 #i‚de‡
HEADER_SSL_H


144 
	#HEADER_SSL_H


	)

146 
	~<›ís¶/e_os2.h
>

148 #i‚de‡
OPENSSL_NO_COMP


149 
	~<›ís¶/comp.h
>

151 #i‚de‡
OPENSSL_NO_BIO


152 
	~<›ís¶/bio.h
>

154 #i‚de‡
OPENSSL_NO_DEPRECATED


155 #i‚de‡
OPENSSL_NO_X509


156 
	~<›ís¶/x509.h
>

158 
	~<›ís¶/¸y±o.h
>

159 
	~<›ís¶/lhash.h
>

160 
	~<›ís¶/buf„r.h
>

162 
	~<›ís¶/≥m.h
>

163 
	~<›ís¶/hmac.h
>

165 
	~<›ís¶/ks¶.h
>

166 
	~<›ís¶/ß„°ack.h
>

167 
	~<›ís¶/symhacks.h
>

169 #ifde‡ 
__˝lu•lus


177 
	#SSL_SESSION_ASN1_VERSION
 0x0001

	)

180 
	#SSL_TXT_NULL_WITH_MD5
 
SSL2_TXT_NULL_WITH_MD5


	)

181 
	#SSL_TXT_RC4_128_WITH_MD5
 
SSL2_TXT_RC4_128_WITH_MD5


	)

182 
	#SSL_TXT_RC4_128_EXPORT40_WITH_MD5
 
SSL2_TXT_RC4_128_EXPORT40_WITH_MD5


	)

183 
	#SSL_TXT_RC2_128_CBC_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_WITH_MD5


	)

184 
	#SSL_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5


	)

185 
	#SSL_TXT_IDEA_128_CBC_WITH_MD5
 
SSL2_TXT_IDEA_128_CBC_WITH_MD5


	)

186 
	#SSL_TXT_DES_64_CBC_WITH_MD5
 
SSL2_TXT_DES_64_CBC_WITH_MD5


	)

187 
	#SSL_TXT_DES_64_CBC_WITH_SHA
 
SSL2_TXT_DES_64_CBC_WITH_SHA


	)

188 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_MD5
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5


	)

189 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_SHA
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA


	)

193 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

194 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

195 
	#SSL_TXT_KRB5_RC4_128_SHA
 
SSL3_TXT_KRB5_RC4_128_SHA


	)

196 
	#SSL_TXT_KRB5_IDEA_128_CBC_SHA
 
SSL3_TXT_KRB5_IDEA_128_CBC_SHA


	)

197 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

198 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

199 
	#SSL_TXT_KRB5_RC4_128_MD5
 
SSL3_TXT_KRB5_RC4_128_MD5


	)

200 
	#SSL_TXT_KRB5_IDEA_128_CBC_MD5
 
SSL3_TXT_KRB5_IDEA_128_CBC_MD5


	)

202 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

203 
	#SSL_TXT_KRB5_RC2_40_CBC_SHA
 
SSL3_TXT_KRB5_RC2_40_CBC_SHA


	)

204 
	#SSL_TXT_KRB5_RC4_40_SHA
 
SSL3_TXT_KRB5_RC4_40_SHA


	)

205 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

206 
	#SSL_TXT_KRB5_RC2_40_CBC_MD5
 
SSL3_TXT_KRB5_RC2_40_CBC_MD5


	)

207 
	#SSL_TXT_KRB5_RC4_40_MD5
 
SSL3_TXT_KRB5_RC4_40_MD5


	)

209 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

210 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

211 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

212 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

213 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

214 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

215 
	#SSL_MAX_KRB5_PRINCIPAL_LENGTH
 256

	)

217 
	#SSL_MAX_SSL_SESSION_ID_LENGTH
 32

	)

218 
	#SSL_MAX_SID_CTX_LENGTH
 32

	)

220 
	#SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES
 (512/8)

	)

221 
	#SSL_MAX_KEY_ARG_LENGTH
 8

	)

222 
	#SSL_MAX_MASTER_KEY_LENGTH
 48

	)

227 
	#SSL_TXT_EXP40
 "EXPORT40"

	)

228 
	#SSL_TXT_EXP56
 "EXPORT56"

	)

229 
	#SSL_TXT_LOW
 "LOW"

	)

230 
	#SSL_TXT_MEDIUM
 "MEDIUM"

	)

231 
	#SSL_TXT_HIGH
 "HIGH"

	)

232 
	#SSL_TXT_FIPS
 "FIPS"

	)

234 
	#SSL_TXT_kFZA
 "kFZA"

	)

235 
	#SSL_TXT_aFZA
 "aFZA"

	)

236 
	#SSL_TXT_eFZA
 "eFZA"

	)

237 
	#SSL_TXT_FZA
 "FZA"

	)

239 
	#SSL_TXT_aNULL
 "aNULL"

	)

240 
	#SSL_TXT_eNULL
 "eNULL"

	)

241 
	#SSL_TXT_NULL
 "NULL"

	)

243 
	#SSL_TXT_kRSA
 "kRSA"

	)

244 
	#SSL_TXT_kDHr
 "kDHr"

	)

245 
	#SSL_TXT_kDHd
 "kDHd"

	)

246 
	#SSL_TXT_kDH
 "kDH"

	)

247 
	#SSL_TXT_kEDH
 "kEDH"

	)

248 
	#SSL_TXT_kKRB5
 "kKRB5"

	)

249 
	#SSL_TXT_kECDHr
 "kECDHr"

	)

250 
	#SSL_TXT_kECDHe
 "kECDHe"

	)

251 
	#SSL_TXT_kECDH
 "kECDH"

	)

252 
	#SSL_TXT_kEECDH
 "kEECDH"

	)

253 
	#SSL_TXT_kPSK
 "kPSK"

	)

254 
	#SSL_TXT_kGOST
 "kGOST"

	)

255 
	#SSL_TXT_kSRP
 "kSRP"

	)

257 
	#SSL_TXT_aRSA
 "aRSA"

	)

258 
	#SSL_TXT_aDSS
 "aDSS"

	)

259 
	#SSL_TXT_aDH
 "aDH"

	)

260 
	#SSL_TXT_aECDH
 "aECDH"

	)

261 
	#SSL_TXT_aKRB5
 "aKRB5"

	)

262 
	#SSL_TXT_aECDSA
 "aECDSA"

	)

263 
	#SSL_TXT_aPSK
 "aPSK"

	)

264 
	#SSL_TXT_aGOST94
 "aGOST94"

	)

265 
	#SSL_TXT_aGOST01
 "aGOST01"

	)

266 
	#SSL_TXT_aGOST
 "aGOST"

	)

268 
	#SSL_TXT_DSS
 "DSS"

	)

269 
	#SSL_TXT_DH
 "DH"

	)

270 
	#SSL_TXT_EDH
 "EDH"

	)

271 
	#SSL_TXT_ADH
 "ADH"

	)

272 
	#SSL_TXT_RSA
 "RSA"

	)

273 
	#SSL_TXT_ECDH
 "ECDH"

	)

274 
	#SSL_TXT_EECDH
 "EECDH"

	)

275 
	#SSL_TXT_AECDH
 "AECDH"

	)

276 
	#SSL_TXT_ECDSA
 "ECDSA"

	)

277 
	#SSL_TXT_KRB5
 "KRB5"

	)

278 
	#SSL_TXT_PSK
 "PSK"

	)

279 
	#SSL_TXT_SRP
 "SRP"

	)

281 
	#SSL_TXT_DES
 "DES"

	)

282 
	#SSL_TXT_3DES
 "3DES"

	)

283 
	#SSL_TXT_RC4
 "RC4"

	)

284 
	#SSL_TXT_RC2
 "RC2"

	)

285 
	#SSL_TXT_IDEA
 "IDEA"

	)

286 
	#SSL_TXT_SEED
 "SEED"

	)

287 
	#SSL_TXT_AES128
 "AES128"

	)

288 
	#SSL_TXT_AES256
 "AES256"

	)

289 
	#SSL_TXT_AES
 "AES"

	)

290 
	#SSL_TXT_AES_GCM
 "AESGCM"

	)

291 
	#SSL_TXT_CAMELLIA128
 "CAMELLIA128"

	)

292 
	#SSL_TXT_CAMELLIA256
 "CAMELLIA256"

	)

293 
	#SSL_TXT_CAMELLIA
 "CAMELLIA"

	)

295 
	#SSL_TXT_MD5
 "MD5"

	)

296 
	#SSL_TXT_SHA1
 "SHA1"

	)

297 
	#SSL_TXT_SHA
 "SHA"

	)

298 
	#SSL_TXT_GOST94
 "GOST94"

	)

299 
	#SSL_TXT_GOST89MAC
 "GOST89MAC"

	)

300 
	#SSL_TXT_SHA256
 "SHA256"

	)

301 
	#SSL_TXT_SHA384
 "SHA384"

	)

303 
	#SSL_TXT_SSLV2
 "SSLv2"

	)

304 
	#SSL_TXT_SSLV3
 "SSLv3"

	)

305 
	#SSL_TXT_TLSV1
 "TLSv1"

	)

306 
	#SSL_TXT_TLSV1_1
 "TLSv1.1"

	)

307 
	#SSL_TXT_TLSV1_2
 "TLSv1.2"

	)

309 
	#SSL_TXT_EXP
 "EXP"

	)

310 
	#SSL_TXT_EXPORT
 "EXPORT"

	)

312 
	#SSL_TXT_ALL
 "ALL"

	)

328 
	#SSL_TXT_CMPALL
 "COMPLEMENTOFALL"

	)

329 
	#SSL_TXT_CMPDEF
 "COMPLEMENTOFDEFAULT"

	)

334 
	#SSL_DEFAULT_CIPHER_LIST
 "ALL:!aNULL:!eNULL:!SSLv2"

	)

343 
	#SSL_SENT_SHUTDOWN
 1

	)

344 
	#SSL_RECEIVED_SHUTDOWN
 2

	)

346 #ifde‡
__˝lu•lus


350 #ifde‡ 
__˝lu•lus


354 #i‡(
deföed
(
OPENSSL_NO_RSA
Ë|| deföed(
OPENSSL_NO_MD5
)Ë&& !deföed(
OPENSSL_NO_SSL2
)

355 
	#OPENSSL_NO_SSL2


	)

358 
	#SSL_FILETYPE_ASN1
 
X509_FILETYPE_ASN1


	)

359 
	#SSL_FILETYPE_PEM
 
X509_FILETYPE_PEM


	)

364 
s¶_°
 *
	ts¶_¸ock_°
;

365 
és_£ssi⁄_tickë_ext_°
 
	tTLS_SESSION_TICKET_EXT
;

366 
s¶_mëhod_°
 
	tSSL_METHOD
;

367 
s¶_cùhî_°
 
	tSSL_CIPHER
;

368 
s¶_£ssi⁄_°
 
	tSSL_SESSION
;

370 
DECLARE_STACK_OF
(
SSL_CIPHER
)

373 
	s§ç_¥Ÿe˘i⁄_¥ofûe_°


375 c⁄° *
«me
;

376 
id
;

377 } 
	tSRTP_PROTECTION_PROFILE
;

379 
DECLARE_STACK_OF
(
SRTP_PROTECTION_PROFILE
)

381 (*
és_£ssi⁄_tickë_ext_cb_‚
)(
	tSSL
 *
	ts
, c⁄° *
	td©a
, 
	tÀn
, *
	t¨g
);

382 (*
és_£ssi⁄_£¸ë_cb_‚
)(
	tSSL
 *
	ts
, *
	t£¸ë
, *
	t£¸ë_Àn
, 
	tSTACK_OF
(
	tSSL_CIPHER
Ë*
	t≥î_cùhîs
, SSL_CIPHER **
	tcùhî
, *
	t¨g
);

385 #i‚de‡
OPENSSL_NO_SSL_INTERN


388 
	ss¶_cùhî_°


390 
vÆid
;

391 c⁄° *
«me
;

392 
id
;

395 
Æg‹ôhm_mkey
;

396 
Æg‹ôhm_auth
;

397 
Æg‹ôhm_íc
;

398 
Æg‹ôhm_mac
;

399 
Æg‹ôhm_s¶
;

401 
Ægo_°ªngth
;

402 
Æg‹ôhm2
;

403 
°ªngth_bôs
;

404 
Æg_bôs
;

409 
	ss¶_mëhod_°


411 
vîsi⁄
;

412 (*
s¶_√w
)(
SSL
 *
s
);

413 (*
s¶_˛ór
)(
SSL
 *
s
);

414 (*
s¶_‰ì
)(
SSL
 *
s
);

415 (*
s¶_ac˚±
)(
SSL
 *
s
);

416 (*
s¶_c⁄√˘
)(
SSL
 *
s
);

417 (*
s¶_ªad
)(
SSL
 *
s
,*
buf
,
Àn
);

418 (*
s¶_≥ek
)(
SSL
 *
s
,*
buf
,
Àn
);

419 (*
s¶_wrôe
)(
SSL
 *
s
,c⁄° *
buf
,
Àn
);

420 (*
s¶_shutdown
)(
SSL
 *
s
);

421 (*
s¶_ª√gŸüã
)(
SSL
 *
s
);

422 (*
s¶_ª√gŸüã_check
)(
SSL
 *
s
);

423 (*
s¶_gë_mesßge
)(
SSL
 *
s
, 
°1
, 
°n
, 
mt
, 

424 
max
, *
ok
);

425 (*
s¶_ªad_byãs
)(
SSL
 *
s
, 
ty≥
, *
buf
, 
Àn
,

426 
≥ek
);

427 (*
s¶_wrôe_byãs
)(
SSL
 *
s
, 
ty≥
, c⁄° *
buf_
, 
Àn
);

428 (*
s¶_di•©ch_Æît
)(
SSL
 *
s
);

429 (*
s¶_˘æ
)(
SSL
 *
s
,
cmd
,
œrg
,*
∑rg
);

430 (*
s¶_˘x_˘æ
)(
SSL_CTX
 *
˘x
,
cmd
,
œrg
,*
∑rg
);

431 c⁄° 
SSL_CIPHER
 *(*
gë_cùhî_by_ch¨
)(c⁄° *
±r
);

432 (*
put_cùhî_by_ch¨
)(c⁄° 
SSL_CIPHER
 *
cùhî
,*
±r
);

433 (*
s¶_≥ndög
)(c⁄° 
SSL
 *
s
);

434 (*
num_cùhîs
)();

435 c⁄° 
SSL_CIPHER
 *(*
gë_cùhî
)(
ncùhî
);

436 c⁄° 
s¶_mëhod_°
 *(*
gë_s¶_mëhod
)(
vîsi⁄
);

437 (*
gë_timeout
)();

438 
s¶3_íc_mëhod
 *
s¶3_íc
;

439 (*
s¶_vîsi⁄
)();

440 (*
s¶_ˇŒback_˘æ
)(
SSL
 *
s
, 
cb_id
, (*
Â
)());

441 (*
s¶_˘x_ˇŒback_˘æ
)(
SSL_CTX
 *
s
, 
cb_id
, (*
Â
)());

469 
	ss¶_£ssi⁄_°


471 
s¶_vîsi⁄
;

475 
key_¨g_Àngth
;

476 
key_¨g
[
SSL_MAX_KEY_ARG_LENGTH
];

477 
ma°î_key_Àngth
;

478 
ma°î_key
[
SSL_MAX_MASTER_KEY_LENGTH
];

480 
£ssi⁄_id_Àngth
;

481 
£ssi⁄_id
[
SSL_MAX_SSL_SESSION_ID_LENGTH
];

485 
sid_˘x_Àngth
;

486 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

488 #i‚de‡
OPENSSL_NO_KRB5


489 
krb5_˛õ¡_¥öc_Àn
;

490 
krb5_˛õ¡_¥öc
[
SSL_MAX_KRB5_PRINCIPAL_LENGTH
];

492 #i‚de‡
OPENSSL_NO_PSK


493 *
psk_idítôy_höt
;

494 *
psk_idítôy
;

496 
nŸ_ªsumabÀ
;

499 
£ss_˚π_°
 *
£ss_˚π
;

505 
X509
 *
≥î
;

508 
vîify_ªsu…
;

510 
ª„ªn˚s
;

511 
timeout
;

512 
time
;

514 
com¥ess_mëh
;

516 c⁄° 
SSL_CIPHER
 *
cùhî
;

517 
cùhî_id
;

521 
STACK_OF
(
SSL_CIPHER
Ë*
cùhîs
;

523 
CRYPTO_EX_DATA
 
ex_d©a
;

527 
s¶_£ssi⁄_°
 *
¥ev
,*
√xt
;

528 #i‚de‡
OPENSSL_NO_TLSEXT


529 *
é£xt_ho°«me
;

530 #i‚de‡
OPENSSL_NO_EC


531 
size_t
 
é£xt_e˝oötf‹m©li°_Àngth
;

532 *
é£xt_e˝oötf‹m©li°
;

533 
size_t
 
é£xt_ñlùticcurvñi°_Àngth
;

534 *
é£xt_ñlùticcurvñi°
;

537 *
é£xt_tick
;

538 
size_t
 
é£xt_tickÀn
;

539 
é£xt_tick_li„time_höt
;

541 #i‚de‡
OPENSSL_NO_SRP


542 *
§p_u£∫ame
;

548 
	#SSL_OP_MICROSOFT_SESS_ID_BUG
 0x00000001L

	)

549 
	#SSL_OP_NETSCAPE_CHALLENGE_BUG
 0x00000002L

	)

551 
	#SSL_OP_LEGACY_SERVER_CONNECT
 0x00000004L

	)

552 
	#SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
 0x00000008L

	)

553 
	#SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
 0x00000010L

	)

554 
	#SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
 0x00000020L

	)

555 
	#SSL_OP_MSIE_SSLV2_RSA_PADDING
 0x00000040L

	)

556 
	#SSL_OP_SSLEAY_080_CLIENT_DH_BUG
 0x00000080L

	)

557 
	#SSL_OP_TLS_D5_BUG
 0x00000100L

	)

558 
	#SSL_OP_TLS_BLOCK_PADDING_BUG
 0x00000200L

	)

565 
	#SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
 0x00000800L

	)

569 
	#SSL_OP_ALL
 0x80000BFFL

	)

572 
	#SSL_OP_NO_QUERY_MTU
 0x00001000L

	)

574 
	#SSL_OP_COOKIE_EXCHANGE
 0x00002000L

	)

576 
	#SSL_OP_NO_TICKET
 0x00004000L

	)

578 
	#SSL_OP_CISCO_ANYCONNECT
 0x00008000L

	)

581 
	#SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
 0x00010000L

	)

583 
	#SSL_OP_NO_COMPRESSION
 0x00020000L

	)

585 
	#SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
 0x00040000L

	)

587 
	#SSL_OP_SINGLE_ECDH_USE
 0x00080000L

	)

589 
	#SSL_OP_SINGLE_DH_USE
 0x00100000L

	)

592 
	#SSL_OP_EPHEMERAL_RSA
 0x00200000L

	)

595 
	#SSL_OP_CIPHER_SERVER_PREFERENCE
 0x00400000L

	)

600 
	#SSL_OP_TLS_ROLLBACK_BUG
 0x00800000L

	)

602 
	#SSL_OP_NO_SSLv2
 0x01000000L

	)

603 
	#SSL_OP_NO_SSLv3
 0x02000000L

	)

604 
	#SSL_OP_NO_TLSv1
 0x04000000L

	)

605 
	#SSL_OP_NO_TLSv1_2
 0x08000000L

	)

606 
	#SSL_OP_NO_TLSv1_1
 0x10000000L

	)

613 
	#SSL_OP_PKCS1_CHECK_1
 0x0

	)

614 
	#SSL_OP_PKCS1_CHECK_2
 0x0

	)

616 
	#SSL_OP_NETSCAPE_CA_DN_BUG
 0x20000000L

	)

617 
	#SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
 0x40000000L

	)

622 
	#SSL_OP_CRYPTOPRO_TLSEXT_BUG
 0x80000000L

	)

626 
	#SSL_MODE_ENABLE_PARTIAL_WRITE
 0x00000001L

	)

631 
	#SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
 0x00000002L

	)

634 
	#SSL_MODE_AUTO_RETRY
 0x00000004L

	)

636 
	#SSL_MODE_NO_AUTO_CHAIN
 0x00000008L

	)

640 
	#SSL_MODE_RELEASE_BUFFERS
 0x00000010L

	)

645 
	#SSL_CTX_£t_›ti⁄s
(
˘x
,
›
) \

646 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_OPTIONS
,(
›
),
NULL
)

	)

647 
	#SSL_CTX_˛ór_›ti⁄s
(
˘x
,
›
) \

648 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_OPTIONS
,(
›
),
NULL
)

	)

649 
	#SSL_CTX_gë_›ti⁄s
(
˘x
) \

650 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

651 
	#SSL_£t_›ti⁄s
(
s¶
,
›
) \

652 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_OPTIONS
,(
›
),
NULL
)

	)

653 
	#SSL_˛ór_›ti⁄s
(
s¶
,
›
) \

654 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_OPTIONS
,(
›
),
NULL
)

	)

655 
	#SSL_gë_›ti⁄s
(
s¶
) \

656 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

658 
	#SSL_CTX_£t_mode
(
˘x
,
›
) \

659 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

660 
	#SSL_CTX_˛ór_mode
(
˘x
,
›
) \

661 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

662 
	#SSL_CTX_gë_mode
(
˘x
) \

663 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,0,
NULL
)

	)

664 
	#SSL_˛ór_mode
(
s¶
,
›
) \

665 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

666 
	#SSL_£t_mode
(
s¶
,
›
) \

667 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

668 
	#SSL_gë_mode
(
s¶
) \

669 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,0,
NULL
)

	)

670 
	#SSL_£t_mtu
(
s¶
, 
mtu
) \

671 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_MTU
,(
mtu
),
NULL
)

	)

673 
	#SSL_gë_£cuª_ª√gŸüti⁄_suµ‹t
(
s¶
) \

674 
	`SSL_˘æ
((
s¶
), 
SSL_CTRL_GET_RI_SUPPORT
, 0, 
NULL
)

	)

676 #i‚de‡
OPENSSL_NO_HEARTBEATS


677 
	#SSL_hóπbót
(
s¶
) \

678 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_TLS_EXT_SEND_HEARTBEAT
,0,
NULL
)

	)

681 
SSL_CTX_£t_msg_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
));

682 
SSL_£t_msg_ˇŒback
(
SSL
 *
s¶
, (*
cb
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, SSL *s¶, *
¨g
));

683 
	#SSL_CTX_£t_msg_ˇŒback_¨g
(
˘x
, 
¨g
Ë
	`SSL_CTX_˘æ
((˘x), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

684 
	#SSL_£t_msg_ˇŒback_¨g
(
s¶
, 
¨g
Ë
	`SSL_˘æ
((s¶), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

686 #i‚de‡
OPENSSL_NO_SRP


688 #i‚de‡
OPENSSL_NO_SSL_INTERN


690 
	s§p_˘x_°


693 *
SRP_cb_¨g
;

695 (*
TLS_ext_§p_u£∫ame_ˇŒback
)(
SSL
 *, *, *);

697 (*
SRP_vîify_∑øm_ˇŒback
)(
SSL
 *, *);

699 *(*
SRP_give_§p_˛õ¡_pwd_ˇŒback
)(
SSL
 *, *);

701 *
logö
;

702 
BIGNUM
 *
N
,*
g
,*
s
,*
B
,*
A
;

703 
BIGNUM
 *
a
,*
b
,*
v
;

704 *
öfo
;

705 
°ªngth
;

707 
§p_Mask
;

708 } 
	tSRP_CTX
;

713 
SSL_SRP_CTX_öô
(
SSL
 *
s
);

714 
SSL_CTX_SRP_CTX_öô
(
SSL_CTX
 *
˘x
);

715 
SSL_SRP_CTX_‰ì
(
SSL
 *
˘x
);

716 
SSL_CTX_SRP_CTX_‰ì
(
SSL_CTX
 *
˘x
);

717 
SSL_§p_£rvî_∑øm_wôh_u£∫ame
(
SSL
 *
s
, *
ad
);

718 
SRP_gíî©e_£rvî_ma°î_£¸ë
(
SSL
 *
s
,*
ma°î_key
);

719 
SRP_CÆc_A_∑øm
(
SSL
 *
s
);

720 
SRP_gíî©e_˛õ¡_ma°î_£¸ë
(
SSL
 *
s
,*
ma°î_key
);

724 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë&& !deföed(
OPENSSL_SYS_WIN32
)

725 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*30

	)

727 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*100

	)

730 
	#SSL_SESSION_CACHE_MAX_SIZE_DEFAULT
 (1024*20)

	)

745 (*
GEN_SESSION_CB
)(c⁄° 
	tSSL
 *
	ts¶
, *
	tid
,

746 *
	tid_Àn
);

748 
s¶_comp_°
 
	tSSL_COMP
;

750 #i‚de‡
OPENSSL_NO_SSL_INTERN


752 
	ss¶_comp_°


754 
id
;

755 c⁄° *
«me
;

756 #i‚de‡
OPENSSL_NO_COMP


757 
COMP_METHOD
 *
mëhod
;

759 *
mëhod
;

763 
DECLARE_STACK_OF
(
SSL_COMP
)

764 
DECLARE_LHASH_OF
(
SSL_SESSION
);

766 
	ss¶_˘x_°


768 c⁄° 
SSL_METHOD
 *
mëhod
;

770 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°
;

772 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°_by_id
;

774 
x509_°‹e_°
 *
˚π_°‹e
;

775 
LHASH_OF
(
SSL_SESSION
Ë*
£ssi⁄s
;

778 
£ssi⁄_ˇche_size
;

779 
s¶_£ssi⁄_°
 *
£ssi⁄_ˇche_hód
;

780 
s¶_£ssi⁄_°
 *
£ssi⁄_ˇche_èû
;

787 
£ssi⁄_ˇche_mode
;

792 
£ssi⁄_timeout
;

802 (*
√w_£ssi⁄_cb
)(
s¶_°
 *
s¶
,
SSL_SESSION
 *
£ss
);

803 (*
ªmove_£ssi⁄_cb
)(
s¶_˘x_°
 *
˘x
,
SSL_SESSION
 *
£ss
);

804 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
)(
s¶_°
 *
s¶
,

805 *
d©a
,
Àn
,*
c›y
);

809 
£ss_c⁄√˘
;

810 
£ss_c⁄√˘_ª√gŸüã
;

811 
£ss_c⁄√˘_good
;

812 
£ss_ac˚±
;

813 
£ss_ac˚±_ª√gŸüã
;

814 
£ss_ac˚±_good
;

815 
£ss_miss
;

816 
£ss_timeout
;

817 
£ss_ˇche_fuŒ
;

818 
£ss_hô
;

819 
£ss_cb_hô
;

825 } 
°©s
;

827 
ª„ªn˚s
;

830 (*
≠p_vîify_ˇŒback
)(
X509_STORE_CTX
 *, *);

831 *
≠p_vîify_¨g
;

836 
≥m_∑ssw‹d_cb
 *
deÁu…_∑sswd_ˇŒback
;

839 *
deÁu…_∑sswd_ˇŒback_u£rd©a
;

842 (*
˛õ¡_˚π_cb
)(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
);

845 (*
≠p_gí_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
,

846 *
cookõ_Àn
);

849 (*
≠p_vîify_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
,

850 
cookõ_Àn
);

852 
CRYPTO_EX_DATA
 
ex_d©a
;

854 c⁄° 
EVP_MD
 *
rß_md5
;

855 c⁄° 
EVP_MD
 *
md5
;

856 c⁄° 
EVP_MD
 *
sha1
;

858 
STACK_OF
(
X509
Ë*
exåa_˚πs
;

859 
STACK_OF
(
SSL_COMP
Ë*
comp_mëhods
;

864 (*
öfo_ˇŒback
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

867 
STACK_OF
(
X509_NAME
Ë*
˛õ¡_CA
;

872 
›ti⁄s
;

873 
mode
;

874 
max_˚π_li°
;

876 
˚π_°
 *
˚π
;

877 
ªad_ahód
;

880 (*
msg_ˇŒback
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

881 *
msg_ˇŒback_¨g
;

883 
vîify_mode
;

884 
sid_˘x_Àngth
;

885 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

886 (*
deÁu…_vîify_ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
);

889 
GEN_SESSION_CB
 
gíî©e_£ssi⁄_id
;

891 
X509_VERIFY_PARAM
 *
∑øm
;

894 
puΩo£
;

895 
åu°
;

898 
quõt_shutdown
;

904 
max_£nd_‰agmít
;

906 #i‚de‡
OPENSSL_ENGINE


909 
ENGINE
 *
˛õ¡_˚π_ígöe
;

912 #i‚de‡
OPENSSL_NO_TLSEXT


914 (*
é£xt_£rvî«me_ˇŒback
)(
SSL
*, *, *);

915 *
é£xt_£rvî«me_¨g
;

917 
é£xt_tick_key_«me
[16];

918 
é£xt_tick_hmac_key
[16];

919 
é£xt_tick_´s_key
[16];

921 (*
é£xt_tickë_key_cb
)(
SSL
 *
s¶
,

922 *
«me
, *
iv
,

923 
EVP_CIPHER_CTX
 *
e˘x
,

924 
HMAC_CTX
 *
h˘x
, 
íc
);

928 (*
é£xt_°©us_cb
)(
SSL
 *
s¶
, *
¨g
);

929 *
é£xt_°©us_¨g
;

931 (*
é£xt_›aque_¥f_öput_ˇŒback
)(
SSL
 *, *
≥îöput
, 
size_t
 
Àn
, *
¨g
);

932 *
é£xt_›aque_¥f_öput_ˇŒback_¨g
;

935 #i‚de‡
OPENSSL_NO_PSK


936 *
psk_idítôy_höt
;

937 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
, *
idítôy
,

938 
max_idítôy_Àn
, *
psk
,

939 
max_psk_Àn
);

940 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

941 *
psk
, 
max_psk_Àn
);

944 #i‚de‡
OPENSSL_NO_BUF_FREELISTS


945 
	#SSL_MAX_BUF_FREELIST_LEN_DEFAULT
 32

	)

946 
‰ìli°_max_Àn
;

947 
s¶3_buf_‰ìli°_°
 *
wbuf_‰ìli°
;

948 
s¶3_buf_‰ìli°_°
 *
rbuf_‰ìli°
;

950 #i‚de‡
OPENSSL_NO_SRP


951 
SRP_CTX
 
§p_˘x
;

954 #i‚de‡
OPENSSL_NO_TLSEXT


955 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


961 (*
√xt_¥Ÿos_advîti£d_cb
)(
SSL
 *
s
, c⁄° **
buf
,

962 *
Àn
, *
¨g
);

963 *
√xt_¥Ÿos_advîti£d_cb_¨g
;

966 (*
√xt_¥Ÿo_£À˘_cb
)(
SSL
 *
s
, **
out
,

967 *
ouéí
,

968 c⁄° *
ö
,

969 
öÀn
,

970 *
¨g
);

971 *
√xt_¥Ÿo_£À˘_cb_¨g
;

974 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
§ç_¥ofûes
;

980 
	#SSL_SESS_CACHE_OFF
 0x0000

	)

981 
	#SSL_SESS_CACHE_CLIENT
 0x0001

	)

982 
	#SSL_SESS_CACHE_SERVER
 0x0002

	)

983 
	#SSL_SESS_CACHE_BOTH
 (
SSL_SESS_CACHE_CLIENT
|
SSL_SESS_CACHE_SERVER
)

	)

984 
	#SSL_SESS_CACHE_NO_AUTO_CLEAR
 0x0080

	)

986 
	#SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
 0x0100

	)

987 
	#SSL_SESS_CACHE_NO_INTERNAL_STORE
 0x0200

	)

988 
	#SSL_SESS_CACHE_NO_INTERNAL
 \

989 (
SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
|
SSL_SESS_CACHE_NO_INTERNAL_STORE
)

	)

991 
LHASH_OF
(
SSL_SESSION
Ë*
SSL_CTX_£ssi⁄s
(
SSL_CTX
 *
˘x
);

992 
	#SSL_CTX_£ss_numbî
(
˘x
) \

993 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_NUMBER
,0,
NULL
)

	)

994 
	#SSL_CTX_£ss_c⁄√˘
(
˘x
) \

995 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT
,0,
NULL
)

	)

996 
	#SSL_CTX_£ss_c⁄√˘_good
(
˘x
) \

997 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_GOOD
,0,
NULL
)

	)

998 
	#SSL_CTX_£ss_c⁄√˘_ª√gŸüã
(
˘x
) \

999 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_RENEGOTIATE
,0,
NULL
)

	)

1000 
	#SSL_CTX_£ss_ac˚±
(
˘x
) \

1001 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT
,0,
NULL
)

	)

1002 
	#SSL_CTX_£ss_ac˚±_ª√gŸüã
(
˘x
) \

1003 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
,0,
NULL
)

	)

1004 
	#SSL_CTX_£ss_ac˚±_good
(
˘x
) \

1005 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_GOOD
,0,
NULL
)

	)

1006 
	#SSL_CTX_£ss_hôs
(
˘x
) \

1007 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_HIT
,0,
NULL
)

	)

1008 
	#SSL_CTX_£ss_cb_hôs
(
˘x
) \

1009 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CB_HIT
,0,
NULL
)

	)

1010 
	#SSL_CTX_£ss_mis£s
(
˘x
) \

1011 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_MISSES
,0,
NULL
)

	)

1012 
	#SSL_CTX_£ss_timeouts
(
˘x
) \

1013 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_TIMEOUTS
,0,
NULL
)

	)

1014 
	#SSL_CTX_£ss_ˇche_fuŒ
(
˘x
) \

1015 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CACHE_FULL
,0,
NULL
)

	)

1017 
SSL_CTX_£ss_£t_√w_cb
(
SSL_CTX
 *
˘x
, (*
√w_£ssi⁄_cb
)(
s¶_°
 *
s¶
,
SSL_SESSION
 *
£ss
));

1018 (*
SSL_CTX_£ss_gë_√w_cb
(
SSL_CTX
 *
˘x
))(
s¶_°
 *
s¶
, 
SSL_SESSION
 *
£ss
);

1019 
SSL_CTX_£ss_£t_ªmove_cb
(
SSL_CTX
 *
˘x
, (*
ªmove_£ssi⁄_cb
)(
s¶_˘x_°
 *˘x,
SSL_SESSION
 *
£ss
));

1020 (*
SSL_CTX_£ss_gë_ªmove_cb
(
SSL_CTX
 *
˘x
))(
s¶_˘x_°
 *˘x, 
SSL_SESSION
 *
£ss
);

1021 
SSL_CTX_£ss_£t_gë_cb
(
SSL_CTX
 *
˘x
, 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
)(
s¶_°
 *
s¶
, *
d©a
,
Àn
,*
c›y
));

1022 
SSL_SESSION
 *(*
SSL_CTX_£ss_gë_gë_cb
(
SSL_CTX
 *
˘x
))(
s¶_°
 *
s¶
, *
D©a
, 
Àn
, *
c›y
);

1023 
SSL_CTX_£t_öfo_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
));

1024 (*
SSL_CTX_gë_öfo_ˇŒback
(
SSL_CTX
 *
˘x
))(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

1025 
SSL_CTX_£t_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
, (*
˛õ¡_˚π_cb
)(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
));

1026 (*
SSL_CTX_gë_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
))(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
);

1027 #i‚de‡
OPENSSL_NO_ENGINE


1028 
SSL_CTX_£t_˛õ¡_˚π_ígöe
(
SSL_CTX
 *
˘x
, 
ENGINE
 *
e
);

1030 
SSL_CTX_£t_cookõ_gíî©e_cb
(
SSL_CTX
 *
˘x
, (*
≠p_gí_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
, *
cookõ_Àn
));

1031 
SSL_CTX_£t_cookõ_vîify_cb
(
SSL_CTX
 *
˘x
, (*
≠p_vîify_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
, 
cookõ_Àn
));

1032 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


1033 
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
(
SSL_CTX
 *
s
,

1034 (*
cb
Ë(
SSL
 *
s¶
,

1035 c⁄° **
out
,

1036 *
ouéí
,

1037 *
¨g
),

1038 *
¨g
);

1039 
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb
(
SSL_CTX
 *
s
,

1040 (*
cb
Ë(
SSL
 *
s¶
,

1041 **
out
,

1042 *
ouéí
,

1043 c⁄° *
ö
,

1044 
öÀn
,

1045 *
¨g
),

1046 *
¨g
);

1048 
SSL_£À˘_√xt_¥Ÿo
(**
out
, *
ouéí
,

1049 c⁄° *
ö
, 
öÀn
,

1050 c⁄° *
˛õ¡
, 
˛õ¡_Àn
);

1051 
SSL_gë0_√xt_¥Ÿo_√gŸüãd
(c⁄° 
SSL
 *
s
,

1052 c⁄° **
d©a
, *
Àn
);

1054 
	#OPENSSL_NPN_UNSUPPORTED
 0

	)

1055 
	#OPENSSL_NPN_NEGOTIATED
 1

	)

1056 
	#OPENSSL_NPN_NO_OVERLAP
 2

	)

1059 #i‚de‡
OPENSSL_NO_PSK


1062 
	#PSK_MAX_IDENTITY_LEN
 128

	)

1063 
	#PSK_MAX_PSK_LEN
 256

	)

1064 
SSL_CTX_£t_psk_˛õ¡_ˇŒback
(
SSL_CTX
 *
˘x
,

1065 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
,

1066 *
idítôy
, 
max_idítôy_Àn
, *
psk
,

1067 
max_psk_Àn
));

1068 
SSL_£t_psk_˛õ¡_ˇŒback
(
SSL
 *
s¶
,

1069 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
,

1070 *
idítôy
, 
max_idítôy_Àn
, *
psk
,

1071 
max_psk_Àn
));

1072 
SSL_CTX_£t_psk_£rvî_ˇŒback
(
SSL_CTX
 *
˘x
,

1073 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

1074 *
psk
, 
max_psk_Àn
));

1075 
SSL_£t_psk_£rvî_ˇŒback
(
SSL
 *
s¶
,

1076 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

1077 *
psk
, 
max_psk_Àn
));

1078 
SSL_CTX_u£_psk_idítôy_höt
(
SSL_CTX
 *
˘x
, c⁄° *
idítôy_höt
);

1079 
SSL_u£_psk_idítôy_höt
(
SSL
 *
s
, c⁄° *
idítôy_höt
);

1080 c⁄° *
SSL_gë_psk_idítôy_höt
(c⁄° 
SSL
 *
s
);

1081 c⁄° *
SSL_gë_psk_idítôy
(c⁄° 
SSL
 *
s
);

1084 
	#SSL_NOTHING
 1

	)

1085 
	#SSL_WRITING
 2

	)

1086 
	#SSL_READING
 3

	)

1087 
	#SSL_X509_LOOKUP
 4

	)

1090 
	#SSL_w™t_nŸhög
(
s
Ë(
	`SSL_w™t
(sË=
SSL_NOTHING
)

	)

1091 
	#SSL_w™t_ªad
(
s
Ë(
	`SSL_w™t
(sË=
SSL_READING
)

	)

1092 
	#SSL_w™t_wrôe
(
s
Ë(
	`SSL_w™t
(sË=
SSL_WRITING
)

	)

1093 
	#SSL_w™t_x509_lookup
(
s
Ë(
	`SSL_w™t
(sË=
SSL_X509_LOOKUP
)

	)

1095 
	#SSL_MAC_FLAG_READ_MAC_STREAM
 1

	)

1096 
	#SSL_MAC_FLAG_WRITE_MAC_STREAM
 2

	)

1098 #i‚de‡
OPENSSL_NO_SSL_INTERN


1100 
	ss¶_°


1105 
vîsi⁄
;

1106 
ty≥
;

1108 c⁄° 
SSL_METHOD
 *
mëhod
;

1114 #i‚de‡
OPENSSL_NO_BIO


1115 
BIO
 *
rbio
;

1116 
BIO
 *
wbio
;

1117 
BIO
 *
bbio
;

1120 *
rbio
;

1121 *
wbio
;

1122 *
bbio
;

1128 
rw°©e
;

1131 
ö_h™dshake
;

1132 (*
h™dshake_func
)(
SSL
 *);

1142 
£rvî
;

1144 
√w_£ssi⁄
;

1148 
quõt_shutdown
;

1149 
shutdown
;

1151 
°©e
;

1152 
r°©e
;

1154 
BUF_MEM
 *
öô_buf
;

1155 *
öô_msg
;

1156 
öô_num
;

1157 
öô_off
;

1160 *
∑ckë
;

1161 
∑ckë_Àngth
;

1163 
s¶2_°©e_°
 *
s2
;

1164 
s¶3_°©e_°
 *
s3
;

1165 
dés1_°©e_°
 *
d1
;

1167 
ªad_ahód
;

1171 (*
msg_ˇŒback
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

1172 *
msg_ˇŒback_¨g
;

1174 
hô
;

1176 
X509_VERIFY_PARAM
 *
∑øm
;

1179 
puΩo£
;

1180 
åu°
;

1184 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°
;

1185 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°_by_id
;

1189 
mac_Êags
;

1190 
EVP_CIPHER_CTX
 *
íc_ªad_˘x
;

1191 
EVP_MD_CTX
 *
ªad_hash
;

1192 #i‚de‡
OPENSSL_NO_COMP


1193 
COMP_CTX
 *
ex∑nd
;

1195 *
ex∑nd
;

1198 
EVP_CIPHER_CTX
 *
íc_wrôe_˘x
;

1199 
EVP_MD_CTX
 *
wrôe_hash
;

1200 #i‚de‡
OPENSSL_NO_COMP


1201 
COMP_CTX
 *
com¥ess
;

1203 *
com¥ess
;

1210 
˚π_°
 *
˚π
;

1214 
sid_˘x_Àngth
;

1215 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

1218 
SSL_SESSION
 *
£ssi⁄
;

1221 
GEN_SESSION_CB
 
gíî©e_£ssi⁄_id
;

1224 
vîify_mode
;

1226 (*
vîify_ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
);

1228 (*
öfo_ˇŒback
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

1230 
îr‹
;

1231 
îr‹_code
;

1233 #i‚de‡
OPENSSL_NO_KRB5


1234 
KSSL_CTX
 *
ks¶_˘x
;

1237 #i‚de‡
OPENSSL_NO_PSK


1238 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
, *
idítôy
,

1239 
max_idítôy_Àn
, *
psk
,

1240 
max_psk_Àn
);

1241 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

1242 *
psk
, 
max_psk_Àn
);

1245 
SSL_CTX
 *
˘x
;

1248 
debug
;

1251 
vîify_ªsu…
;

1252 
CRYPTO_EX_DATA
 
ex_d©a
;

1255 
STACK_OF
(
X509_NAME
Ë*
˛õ¡_CA
;

1257 
ª„ªn˚s
;

1258 
›ti⁄s
;

1259 
mode
;

1260 
max_˚π_li°
;

1261 
fú°_∑ckë
;

1262 
˛õ¡_vîsi⁄
;

1264 
max_£nd_‰agmít
;

1265 #i‚de‡
OPENSSL_NO_TLSEXT


1267 (*
é£xt_debug_cb
)(
SSL
 *
s
, 
˛õ¡_£rvî
, 
ty≥
,

1268 *
d©a
, 
Àn
,

1269 *
¨g
);

1270 *
é£xt_debug_¨g
;

1271 *
é£xt_ho°«me
;

1272 
£rvî«me_d⁄e
;

1279 
é£xt_°©us_ty≥
;

1281 
é£xt_°©us_ex≥˘ed
;

1283 
STACK_OF
(
OCSP_RESPID
Ë*
é£xt_oc•_ids
;

1284 
X509_EXTENSIONS
 *
é£xt_oc•_exts
;

1286 *
é£xt_oc•_ª•
;

1287 
é£xt_oc•_ª•Àn
;

1290 
é£xt_tickë_ex≥˘ed
;

1291 #i‚de‡
OPENSSL_NO_EC


1292 
size_t
 
é£xt_e˝oötf‹m©li°_Àngth
;

1293 *
é£xt_e˝oötf‹m©li°
;

1294 
size_t
 
é£xt_ñlùticcurvñi°_Àngth
;

1295 *
é£xt_ñlùticcurvñi°
;

1299 *
é£xt_›aque_¥f_öput
;

1300 
size_t
 
é£xt_›aque_¥f_öput_Àn
;

1303 
TLS_SESSION_TICKET_EXT
 *
é£xt_£ssi⁄_tickë
;

1306 
és_£ssi⁄_tickë_ext_cb_‚
 
és_£ssi⁄_tickë_ext_cb
;

1307 *
és_£ssi⁄_tickë_ext_cb_¨g
;

1310 
és_£ssi⁄_£¸ë_cb_‚
 
és_£ssi⁄_£¸ë_cb
;

1311 *
és_£ssi⁄_£¸ë_cb_¨g
;

1313 
SSL_CTX
 * 
öôül_˘x
;

1315 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


1323 *
√xt_¥Ÿo_√gŸüãd
;

1324 
√xt_¥Ÿo_√gŸüãd_Àn
;

1327 
	#£ssi⁄_˘x
 
öôül_˘x


	)

1329 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
§ç_¥ofûes
;

1330 
SRTP_PROTECTION_PROFILE
 *
§ç_¥ofûe
;

1332 
é£xt_hóπbót
;

1337 
é£xt_hb_≥ndög
;

1338 
é£xt_hb_£q
;

1340 
	#£ssi⁄_˘x
 
˘x


	)

1343 
ª√gŸüã
;

1347 #i‚de‡
OPENSSL_NO_SRP


1348 
SRP_CTX
 
§p_˘x
;

1354 #ifde‡
__˝lu•lus


1358 
	~<›ís¶/s¶2.h
>

1359 
	~<›ís¶/s¶3.h
>

1360 
	~<›ís¶/és1.h
>

1361 
	~<›ís¶/dés1.h
>

1362 
	~<›ís¶/s¶23.h
>

1363 
	~<›ís¶/§ç.h
>

1365 #ifde‡ 
__˝lu•lus


1370 
	#SSL_£t_≠p_d©a
(
s
,
¨g
Ë(
	`SSL_£t_ex_d©a
(s,0,(*Ôrg))

	)

1371 
	#SSL_gë_≠p_d©a
(
s
Ë(
	`SSL_gë_ex_d©a
(s,0))

	)

1372 
	#SSL_SESSION_£t_≠p_d©a
(
s
,
a
Ë(
	`SSL_SESSION_£t_ex_d©a
(s,0,(*Ô))

	)

1373 
	#SSL_SESSION_gë_≠p_d©a
(
s
Ë(
	`SSL_SESSION_gë_ex_d©a
(s,0))

	)

1374 
	#SSL_CTX_gë_≠p_d©a
(
˘x
Ë(
	`SSL_CTX_gë_ex_d©a
(˘x,0))

	)

1375 
	#SSL_CTX_£t_≠p_d©a
(
˘x
,
¨g
Ë(
	`SSL_CTX_£t_ex_d©a
(˘x,0,(*Ôrg))

	)

1384 
	#SSL_ST_CONNECT
 0x1000

	)

1385 
	#SSL_ST_ACCEPT
 0x2000

	)

1386 
	#SSL_ST_MASK
 0x0FFF

	)

1387 
	#SSL_ST_INIT
 (
SSL_ST_CONNECT
|
SSL_ST_ACCEPT
)

	)

1388 
	#SSL_ST_BEFORE
 0x4000

	)

1389 
	#SSL_ST_OK
 0x03

	)

1390 
	#SSL_ST_RENEGOTIATE
 (0x04|
SSL_ST_INIT
)

	)

1392 
	#SSL_CB_LOOP
 0x01

	)

1393 
	#SSL_CB_EXIT
 0x02

	)

1394 
	#SSL_CB_READ
 0x04

	)

1395 
	#SSL_CB_WRITE
 0x08

	)

1396 
	#SSL_CB_ALERT
 0x4000

	)

1397 
	#SSL_CB_READ_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_READ
)

	)

1398 
	#SSL_CB_WRITE_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_WRITE
)

	)

1399 
	#SSL_CB_ACCEPT_LOOP
 (
SSL_ST_ACCEPT
|
SSL_CB_LOOP
)

	)

1400 
	#SSL_CB_ACCEPT_EXIT
 (
SSL_ST_ACCEPT
|
SSL_CB_EXIT
)

	)

1401 
	#SSL_CB_CONNECT_LOOP
 (
SSL_ST_CONNECT
|
SSL_CB_LOOP
)

	)

1402 
	#SSL_CB_CONNECT_EXIT
 (
SSL_ST_CONNECT
|
SSL_CB_EXIT
)

	)

1403 
	#SSL_CB_HANDSHAKE_START
 0x10

	)

1404 
	#SSL_CB_HANDSHAKE_DONE
 0x20

	)

1407 
	#SSL_gë_°©e
(
a
Ë
	`SSL_°©e
◊)

	)

1408 
	#SSL_is_öô_föished
(
a
Ë(
	`SSL_°©e
◊Ë=
SSL_ST_OK
)

	)

1409 
	#SSL_ö_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_INIT
)

	)

1410 
	#SSL_ö_bef‹e
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_BEFORE
)

	)

1411 
	#SSL_ö_c⁄√˘_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_CONNECT
)

	)

1412 
	#SSL_ö_ac˚±_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_ACCEPT
)

	)

1416 
	#SSL_ST_READ_HEADER
 0xF0

	)

1417 
	#SSL_ST_READ_BODY
 0xF1

	)

1418 
	#SSL_ST_READ_DONE
 0xF2

	)

1424 
size_t
 
SSL_gë_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1425 
size_t
 
SSL_gë_≥î_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1429 
	#SSL_VERIFY_NONE
 0x00

	)

1430 
	#SSL_VERIFY_PEER
 0x01

	)

1431 
	#SSL_VERIFY_FAIL_IF_NO_PEER_CERT
 0x02

	)

1432 
	#SSL_VERIFY_CLIENT_ONCE
 0x04

	)

1434 
	#O≥nSSL_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1435 
	#SSLóy_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1439 
	#SSL_CTX_£t_deÁu…_vîify
(
a
,
b
,
c
Ë
	`SSL_CTX_£t_vîify
◊,b,c)

	)

1440 
	#SSL_£t_¥ef_cùhî
(
c
,
n
Ë
	`SSL_£t_cùhî_li°
(c,n)

	)

1441 
	#SSL_add_£ssi⁄
(
a
,
b
Ë
	`SSL_CTX_add_£ssi⁄
(◊),(b))

	)

1442 
	#SSL_ªmove_£ssi⁄
(
a
,
b
Ë
	`SSL_CTX_ªmove_£ssi⁄
(◊),(b))

	)

1443 
	#SSL_Êush_£ssi⁄s
(
a
,
b
Ë
	`SSL_CTX_Êush_£ssi⁄s
(◊),(b))

	)

1446 
	#SSL_gë_cùhî
(
s
) \

1447 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1448 
	#SSL_gë_cùhî_bôs
(
s
,
≈
) \

1449 
	`SSL_CIPHER_gë_bôs
(
	`SSL_gë_cuºít_cùhî
(
s
),
≈
)

	)

1450 
	#SSL_gë_cùhî_vîsi⁄
(
s
) \

1451 
	`SSL_CIPHER_gë_vîsi⁄
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1452 
	#SSL_gë_cùhî_«me
(
s
) \

1453 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1454 
	#SSL_gë_time
(
a
Ë
	`SSL_SESSION_gë_time
◊)

	)

1455 
	#SSL_£t_time
(
a
,
b
Ë
	`SSL_SESSION_£t_time
(◊),(b))

	)

1456 
	#SSL_gë_timeout
(
a
Ë
	`SSL_SESSION_gë_timeout
◊)

	)

1457 
	#SSL_£t_timeout
(
a
,
b
Ë
	`SSL_SESSION_£t_timeout
(◊),(b))

	)

1459 
	#d2i_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_d2i_bio_of
(
SSL_SESSION
,
SSL_SESSION_√w
,
d2i_SSL_SESSION
,bp,s_id)

	)

1460 
	#i2d_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_i2d_bio_of
(
SSL_SESSION
,
i2d_SSL_SESSION
,bp,s_id)

	)

1462 
DECLARE_PEM_rw
(
SSL_SESSION
, SSL_SESSION)

1464 
	#SSL_AD_REASON_OFFSET
 1000

	)

1467 
	#SSL_AD_CLOSE_NOTIFY
 
SSL3_AD_CLOSE_NOTIFY


	)

1468 
	#SSL_AD_UNEXPECTED_MESSAGE
 
SSL3_AD_UNEXPECTED_MESSAGE


	)

1469 
	#SSL_AD_BAD_RECORD_MAC
 
SSL3_AD_BAD_RECORD_MAC


	)

1470 
	#SSL_AD_DECRYPTION_FAILED
 
TLS1_AD_DECRYPTION_FAILED


	)

1471 
	#SSL_AD_RECORD_OVERFLOW
 
TLS1_AD_RECORD_OVERFLOW


	)

1472 
	#SSL_AD_DECOMPRESSION_FAILURE
 
SSL3_AD_DECOMPRESSION_FAILURE


	)

1473 
	#SSL_AD_HANDSHAKE_FAILURE
 
SSL3_AD_HANDSHAKE_FAILURE


	)

1474 
	#SSL_AD_NO_CERTIFICATE
 
SSL3_AD_NO_CERTIFICATE


	)

1475 
	#SSL_AD_BAD_CERTIFICATE
 
SSL3_AD_BAD_CERTIFICATE


	)

1476 
	#SSL_AD_UNSUPPORTED_CERTIFICATE
 
SSL3_AD_UNSUPPORTED_CERTIFICATE


	)

1477 
	#SSL_AD_CERTIFICATE_REVOKED
 
SSL3_AD_CERTIFICATE_REVOKED


	)

1478 
	#SSL_AD_CERTIFICATE_EXPIRED
 
SSL3_AD_CERTIFICATE_EXPIRED


	)

1479 
	#SSL_AD_CERTIFICATE_UNKNOWN
 
SSL3_AD_CERTIFICATE_UNKNOWN


	)

1480 
	#SSL_AD_ILLEGAL_PARAMETER
 
SSL3_AD_ILLEGAL_PARAMETER


	)

1481 
	#SSL_AD_UNKNOWN_CA
 
TLS1_AD_UNKNOWN_CA


	)

1482 
	#SSL_AD_ACCESS_DENIED
 
TLS1_AD_ACCESS_DENIED


	)

1483 
	#SSL_AD_DECODE_ERROR
 
TLS1_AD_DECODE_ERROR


	)

1484 
	#SSL_AD_DECRYPT_ERROR
 
TLS1_AD_DECRYPT_ERROR


	)

1485 
	#SSL_AD_EXPORT_RESTRICTION
 
TLS1_AD_EXPORT_RESTRICTION


	)

1486 
	#SSL_AD_PROTOCOL_VERSION
 
TLS1_AD_PROTOCOL_VERSION


	)

1487 
	#SSL_AD_INSUFFICIENT_SECURITY
 
TLS1_AD_INSUFFICIENT_SECURITY


	)

1488 
	#SSL_AD_INTERNAL_ERROR
 
TLS1_AD_INTERNAL_ERROR


	)

1489 
	#SSL_AD_USER_CANCELLED
 
TLS1_AD_USER_CANCELLED


	)

1490 
	#SSL_AD_NO_RENEGOTIATION
 
TLS1_AD_NO_RENEGOTIATION


	)

1491 
	#SSL_AD_UNSUPPORTED_EXTENSION
 
TLS1_AD_UNSUPPORTED_EXTENSION


	)

1492 
	#SSL_AD_CERTIFICATE_UNOBTAINABLE
 
TLS1_AD_CERTIFICATE_UNOBTAINABLE


	)

1493 
	#SSL_AD_UNRECOGNIZED_NAME
 
TLS1_AD_UNRECOGNIZED_NAME


	)

1494 
	#SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 
TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE


	)

1495 
	#SSL_AD_BAD_CERTIFICATE_HASH_VALUE
 
TLS1_AD_BAD_CERTIFICATE_HASH_VALUE


	)

1496 
	#SSL_AD_UNKNOWN_PSK_IDENTITY
 
TLS1_AD_UNKNOWN_PSK_IDENTITY


	)

1498 
	#SSL_ERROR_NONE
 0

	)

1499 
	#SSL_ERROR_SSL
 1

	)

1500 
	#SSL_ERROR_WANT_READ
 2

	)

1501 
	#SSL_ERROR_WANT_WRITE
 3

	)

1502 
	#SSL_ERROR_WANT_X509_LOOKUP
 4

	)

1503 
	#SSL_ERROR_SYSCALL
 5

	)

1504 
	#SSL_ERROR_ZERO_RETURN
 6

	)

1505 
	#SSL_ERROR_WANT_CONNECT
 7

	)

1506 
	#SSL_ERROR_WANT_ACCEPT
 8

	)

1508 
	#SSL_CTRL_NEED_TMP_RSA
 1

	)

1509 
	#SSL_CTRL_SET_TMP_RSA
 2

	)

1510 
	#SSL_CTRL_SET_TMP_DH
 3

	)

1511 
	#SSL_CTRL_SET_TMP_ECDH
 4

	)

1512 
	#SSL_CTRL_SET_TMP_RSA_CB
 5

	)

1513 
	#SSL_CTRL_SET_TMP_DH_CB
 6

	)

1514 
	#SSL_CTRL_SET_TMP_ECDH_CB
 7

	)

1516 
	#SSL_CTRL_GET_SESSION_REUSED
 8

	)

1517 
	#SSL_CTRL_GET_CLIENT_CERT_REQUEST
 9

	)

1518 
	#SSL_CTRL_GET_NUM_RENEGOTIATIONS
 10

	)

1519 
	#SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
 11

	)

1520 
	#SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
 12

	)

1521 
	#SSL_CTRL_GET_FLAGS
 13

	)

1522 
	#SSL_CTRL_EXTRA_CHAIN_CERT
 14

	)

1524 
	#SSL_CTRL_SET_MSG_CALLBACK
 15

	)

1525 
	#SSL_CTRL_SET_MSG_CALLBACK_ARG
 16

	)

1528 
	#SSL_CTRL_SET_MTU
 17

	)

1530 
	#SSL_CTRL_SESS_NUMBER
 20

	)

1531 
	#SSL_CTRL_SESS_CONNECT
 21

	)

1532 
	#SSL_CTRL_SESS_CONNECT_GOOD
 22

	)

1533 
	#SSL_CTRL_SESS_CONNECT_RENEGOTIATE
 23

	)

1534 
	#SSL_CTRL_SESS_ACCEPT
 24

	)

1535 
	#SSL_CTRL_SESS_ACCEPT_GOOD
 25

	)

1536 
	#SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
 26

	)

1537 
	#SSL_CTRL_SESS_HIT
 27

	)

1538 
	#SSL_CTRL_SESS_CB_HIT
 28

	)

1539 
	#SSL_CTRL_SESS_MISSES
 29

	)

1540 
	#SSL_CTRL_SESS_TIMEOUTS
 30

	)

1541 
	#SSL_CTRL_SESS_CACHE_FULL
 31

	)

1542 
	#SSL_CTRL_OPTIONS
 32

	)

1543 
	#SSL_CTRL_MODE
 33

	)

1545 
	#SSL_CTRL_GET_READ_AHEAD
 40

	)

1546 
	#SSL_CTRL_SET_READ_AHEAD
 41

	)

1547 
	#SSL_CTRL_SET_SESS_CACHE_SIZE
 42

	)

1548 
	#SSL_CTRL_GET_SESS_CACHE_SIZE
 43

	)

1549 
	#SSL_CTRL_SET_SESS_CACHE_MODE
 44

	)

1550 
	#SSL_CTRL_GET_SESS_CACHE_MODE
 45

	)

1552 
	#SSL_CTRL_GET_MAX_CERT_LIST
 50

	)

1553 
	#SSL_CTRL_SET_MAX_CERT_LIST
 51

	)

1555 
	#SSL_CTRL_SET_MAX_SEND_FRAGMENT
 52

	)

1558 #i‚de‡
OPENSSL_NO_TLSEXT


1559 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
 53

	)

1560 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
 54

	)

1561 
	#SSL_CTRL_SET_TLSEXT_HOSTNAME
 55

	)

1562 
	#SSL_CTRL_SET_TLSEXT_DEBUG_CB
 56

	)

1563 
	#SSL_CTRL_SET_TLSEXT_DEBUG_ARG
 57

	)

1564 
	#SSL_CTRL_GET_TLSEXT_TICKET_KEYS
 58

	)

1565 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEYS
 59

	)

1566 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
 60

	)

1567 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
 61

	)

1568 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
 62

	)

1569 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
 63

	)

1570 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
 64

	)

1571 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
 65

	)

1572 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
 66

	)

1573 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
 67

	)

1574 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
 68

	)

1575 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
 69

	)

1576 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
 70

	)

1577 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
 71

	)

1579 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
 72

	)

1581 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB
 75

	)

1582 
	#SSL_CTRL_SET_SRP_VERIFY_PARAM_CB
 76

	)

1583 
	#SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB
 77

	)

1585 
	#SSL_CTRL_SET_SRP_ARG
 78

	)

1586 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME
 79

	)

1587 
	#SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH
 80

	)

1588 
	#SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD
 81

	)

1589 #i‚de‡
OPENSSL_NO_HEARTBEATS


1590 
	#SSL_CTRL_TLS_EXT_SEND_HEARTBEAT
 85

	)

1591 
	#SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING
 86

	)

1592 
	#SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS
 87

	)

1596 
	#DTLS_CTRL_GET_TIMEOUT
 73

	)

1597 
	#DTLS_CTRL_HANDLE_TIMEOUT
 74

	)

1598 
	#DTLS_CTRL_LISTEN
 75

	)

1600 
	#SSL_CTRL_GET_RI_SUPPORT
 76

	)

1601 
	#SSL_CTRL_CLEAR_OPTIONS
 77

	)

1602 
	#SSL_CTRL_CLEAR_MODE
 78

	)

1604 
	#SSL_CTRL_GET_EXTRA_CHAIN_CERTS
 82

	)

1605 
	#SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
 83

	)

1607 
	#DTLSv1_gë_timeout
(
s¶
, 
¨g
) \

1608 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_GET_TIMEOUT
,0, (*)
¨g
)

	)

1609 
	#DTLSv1_h™dÀ_timeout
(
s¶
) \

1610 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_HANDLE_TIMEOUT
,0, 
NULL
)

	)

1611 
	#DTLSv1_li°í
(
s¶
, 
≥î
) \

1612 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_LISTEN
,0, (*)
≥î
)

	)

1614 
	#SSL_£ssi⁄_ªu£d
(
s¶
) \

1615 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_SESSION_REUSED
,0,
NULL
)

	)

1616 
	#SSL_num_ª√gŸüti⁄s
(
s¶
) \

1617 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1618 
	#SSL_˛ór_num_ª√gŸüti⁄s
(
s¶
) \

1619 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1620 
	#SSL_tŸÆ_ª√gŸüti⁄s
(
s¶
) \

1621 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
,0,
NULL
)

	)

1623 
	#SSL_CTX_√ed_tmp_RSA
(
˘x
) \

1624 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

1625 
	#SSL_CTX_£t_tmp_rß
(
˘x
,
rß
) \

1626 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rß
)

	)

1627 
	#SSL_CTX_£t_tmp_dh
(
˘x
,
dh
) \

1628 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

1629 
	#SSL_CTX_£t_tmp_ecdh
(
˘x
,
ecdh
) \

1630 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

1632 
	#SSL_√ed_tmp_RSA
(
s¶
) \

1633 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

1634 
	#SSL_£t_tmp_rß
(
s¶
,
rß
) \

1635 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rß
)

	)

1636 
	#SSL_£t_tmp_dh
(
s¶
,
dh
) \

1637 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

1638 
	#SSL_£t_tmp_ecdh
(
s¶
,
ecdh
) \

1639 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

1641 
	#SSL_CTX_add_exåa_chaö_˚π
(
˘x
,
x509
) \

1642 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_EXTRA_CHAIN_CERT
,0,(*)
x509
)

	)

1643 
	#SSL_CTX_gë_exåa_chaö_˚πs
(
˘x
,
px509
) \

1644 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_EXTRA_CHAIN_CERTS
,0,
px509
)

	)

1645 
	#SSL_CTX_˛ór_exåa_chaö_˚πs
(
˘x
) \

1646 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
,0,
NULL
)

	)

1648 #i‚de‡
OPENSSL_NO_BIO


1649 
BIO_METHOD
 *
BIO_f_s¶
();

1650 
BIO
 *
BIO_√w_s¶
(
SSL_CTX
 *
˘x
,
˛õ¡
);

1651 
BIO
 *
BIO_√w_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1652 
BIO
 *
BIO_√w_buf„r_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1653 
BIO_s¶_c›y_£ssi⁄_id
(
BIO
 *
to
,BIO *
‰om
);

1654 
BIO_s¶_shutdown
(
BIO
 *
s¶_bio
);

1658 
SSL_CTX_£t_cùhî_li°
(
SSL_CTX
 *,c⁄° *
°r
);

1659 
SSL_CTX
 *
SSL_CTX_√w
(c⁄° 
SSL_METHOD
 *
mëh
);

1660 
SSL_CTX_‰ì
(
SSL_CTX
 *);

1661 
SSL_CTX_£t_timeout
(
SSL_CTX
 *
˘x
,
t
);

1662 
SSL_CTX_gë_timeout
(c⁄° 
SSL_CTX
 *
˘x
);

1663 
X509_STORE
 *
SSL_CTX_gë_˚π_°‹e
(c⁄° 
SSL_CTX
 *);

1664 
SSL_CTX_£t_˚π_°‹e
(
SSL_CTX
 *,
X509_STORE
 *);

1665 
SSL_w™t
(c⁄° 
SSL
 *
s
);

1666 
SSL_˛ór
(
SSL
 *
s
);

1668 
SSL_CTX_Êush_£ssi⁄s
(
SSL_CTX
 *
˘x
,
tm
);

1670 c⁄° 
SSL_CIPHER
 *
SSL_gë_cuºít_cùhî
(c⁄° 
SSL
 *
s
);

1671 
SSL_CIPHER_gë_bôs
(c⁄° 
SSL_CIPHER
 *
c
,*
Æg_bôs
);

1672 * 
SSL_CIPHER_gë_vîsi⁄
(c⁄° 
SSL_CIPHER
 *
c
);

1673 c⁄° * 
SSL_CIPHER_gë_«me
(c⁄° 
SSL_CIPHER
 *
c
);

1674 
SSL_CIPHER_gë_id
(c⁄° 
SSL_CIPHER
 *
c
);

1676 
SSL_gë_fd
(c⁄° 
SSL
 *
s
);

1677 
SSL_gë_rfd
(c⁄° 
SSL
 *
s
);

1678 
SSL_gë_wfd
(c⁄° 
SSL
 *
s
);

1679 c⁄° * 
SSL_gë_cùhî_li°
(c⁄° 
SSL
 *
s
,
n
);

1680 * 
SSL_gë_sh¨ed_cùhîs
(c⁄° 
SSL
 *
s
, *
buf
, 
Àn
);

1681 
SSL_gë_ªad_ahód
(c⁄° 
SSL
 * 
s
);

1682 
SSL_≥ndög
(c⁄° 
SSL
 *
s
);

1683 #i‚de‡
OPENSSL_NO_SOCK


1684 
SSL_£t_fd
(
SSL
 *
s
, 
fd
);

1685 
SSL_£t_rfd
(
SSL
 *
s
, 
fd
);

1686 
SSL_£t_wfd
(
SSL
 *
s
, 
fd
);

1688 #i‚de‡
OPENSSL_NO_BIO


1689 
SSL_£t_bio
(
SSL
 *
s
, 
BIO
 *
rbio
,BIO *
wbio
);

1690 
BIO
 * 
SSL_gë_rbio
(c⁄° 
SSL
 *
s
);

1691 
BIO
 * 
SSL_gë_wbio
(c⁄° 
SSL
 *
s
);

1693 
SSL_£t_cùhî_li°
(
SSL
 *
s
, c⁄° *
°r
);

1694 
SSL_£t_ªad_ahód
(
SSL
 *
s
, 
yes
);

1695 
SSL_gë_vîify_mode
(c⁄° 
SSL
 *
s
);

1696 
SSL_gë_vîify_dïth
(c⁄° 
SSL
 *
s
);

1697 (*
SSL_gë_vîify_ˇŒback
(c⁄° 
SSL
 *
s
))(,
X509_STORE_CTX
 *);

1698 
SSL_£t_vîify
(
SSL
 *
s
, 
mode
,

1699 (*
ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
));

1700 
SSL_£t_vîify_dïth
(
SSL
 *
s
, 
dïth
);

1701 #i‚de‡
OPENSSL_NO_RSA


1702 
SSL_u£_RSAPriv©eKey
(
SSL
 *
s¶
, 
RSA
 *
rß
);

1704 
SSL_u£_RSAPriv©eKey_ASN1
(
SSL
 *
s¶
, *
d
, 
Àn
);

1705 
SSL_u£_Priv©eKey
(
SSL
 *
s¶
, 
EVP_PKEY
 *
pkey
);

1706 
SSL_u£_Priv©eKey_ASN1
(
pk
,
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

1707 
SSL_u£_˚πifiˇã
(
SSL
 *
s¶
, 
X509
 *
x
);

1708 
SSL_u£_˚πifiˇã_ASN1
(
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

1710 #i‚de‡
OPENSSL_NO_STDIO


1711 
SSL_u£_RSAPriv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1712 
SSL_u£_Priv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1713 
SSL_u£_˚πifiˇã_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1714 
SSL_CTX_u£_RSAPriv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1715 
SSL_CTX_u£_Priv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1716 
SSL_CTX_u£_˚πifiˇã_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1717 
SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
);

1718 
STACK_OF
(
X509_NAME
Ë*
SSL_lﬂd_˛õ¡_CA_fûe
(c⁄° *
fûe
);

1719 
SSL_add_fûe_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1720 c⁄° *
fûe
);

1721 #i‚de‡
OPENSSL_SYS_VMS


1722 #i‚de‡
OPENSSL_SYS_MACINTOSH_CLASSIC


1723 
SSL_add_dú_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1724 c⁄° *
dú
);

1730 
SSL_lﬂd_îr‹_°rögs
();

1731 c⁄° *
SSL_°©e_°rög
(c⁄° 
SSL
 *
s
);

1732 c⁄° *
SSL_r°©e_°rög
(c⁄° 
SSL
 *
s
);

1733 c⁄° *
SSL_°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1734 c⁄° *
SSL_r°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1735 
SSL_SESSION_gë_time
(c⁄° 
SSL_SESSION
 *
s
);

1736 
SSL_SESSION_£t_time
(
SSL_SESSION
 *
s
, 
t
);

1737 
SSL_SESSION_gë_timeout
(c⁄° 
SSL_SESSION
 *
s
);

1738 
SSL_SESSION_£t_timeout
(
SSL_SESSION
 *
s
, 
t
);

1739 
SSL_c›y_£ssi⁄_id
(
SSL
 *
to
,c⁄° SSL *
‰om
);

1740 
X509
 *
SSL_SESSION_gë0_≥î
(
SSL_SESSION
 *
s
);

1741 
SSL_SESSION_£t1_id_c⁄ãxt
(
SSL_SESSION
 *
s
,c⁄° *
sid_˘x
,

1742 
sid_˘x_Àn
);

1744 
SSL_SESSION
 *
SSL_SESSION_√w
();

1745 c⁄° *
SSL_SESSION_gë_id
(c⁄° 
SSL_SESSION
 *
s
,

1746 *
Àn
);

1747 
SSL_SESSION_gë_com¥ess_id
(c⁄° 
SSL_SESSION
 *
s
);

1748 #i‚de‡
OPENSSL_NO_FP_API


1749 
SSL_SESSION_¥öt_Â
(
FILE
 *
Â
,c⁄° 
SSL_SESSION
 *
£s
);

1751 #i‚de‡
OPENSSL_NO_BIO


1752 
SSL_SESSION_¥öt
(
BIO
 *
Â
,c⁄° 
SSL_SESSION
 *
£s
);

1754 
SSL_SESSION_‰ì
(
SSL_SESSION
 *
£s
);

1755 
i2d_SSL_SESSION
(
SSL_SESSION
 *
ö
,**
µ
);

1756 
SSL_£t_£ssi⁄
(
SSL
 *
to
, 
SSL_SESSION
 *
£ssi⁄
);

1757 
SSL_CTX_add_£ssi⁄
(
SSL_CTX
 *
s
, 
SSL_SESSION
 *
c
);

1758 
SSL_CTX_ªmove_£ssi⁄
(
SSL_CTX
 *,
SSL_SESSION
 *
c
);

1759 
SSL_CTX_£t_gíî©e_£ssi⁄_id
(
SSL_CTX
 *, 
GEN_SESSION_CB
);

1760 
SSL_£t_gíî©e_£ssi⁄_id
(
SSL
 *, 
GEN_SESSION_CB
);

1761 
SSL_has_m©chög_£ssi⁄_id
(c⁄° 
SSL
 *
s¶
, c⁄° *
id
,

1762 
id_Àn
);

1763 
SSL_SESSION
 *
d2i_SSL_SESSION
(SSL_SESSION **
a
,c⁄° **
µ
,

1764 
Àngth
);

1766 #ifde‡
HEADER_X509_H


1767 
X509
 * 
SSL_gë_≥î_˚πifiˇã
(c⁄° 
SSL
 *
s
);

1770 
STACK_OF
(
X509
Ë*
SSL_gë_≥î_˚π_chaö
(c⁄° 
SSL
 *
s
);

1772 
SSL_CTX_gë_vîify_mode
(c⁄° 
SSL_CTX
 *
˘x
);

1773 
SSL_CTX_gë_vîify_dïth
(c⁄° 
SSL_CTX
 *
˘x
);

1774 (*
SSL_CTX_gë_vîify_ˇŒback
(c⁄° 
SSL_CTX
 *
˘x
))(,
X509_STORE_CTX
 *);

1775 
SSL_CTX_£t_vîify
(
SSL_CTX
 *
˘x
,
mode
,

1776 (*
ˇŒback
)(, 
X509_STORE_CTX
 *));

1777 
SSL_CTX_£t_vîify_dïth
(
SSL_CTX
 *
˘x
,
dïth
);

1778 
SSL_CTX_£t_˚π_vîify_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(
X509_STORE_CTX
 *,*), *
¨g
);

1779 #i‚de‡
OPENSSL_NO_RSA


1780 
SSL_CTX_u£_RSAPriv©eKey
(
SSL_CTX
 *
˘x
, 
RSA
 *
rß
);

1782 
SSL_CTX_u£_RSAPriv©eKey_ASN1
(
SSL_CTX
 *
˘x
, c⁄° *
d
, 
Àn
);

1783 
SSL_CTX_u£_Priv©eKey
(
SSL_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
);

1784 
SSL_CTX_u£_Priv©eKey_ASN1
(
pk
,
SSL_CTX
 *
˘x
,

1785 c⁄° *
d
, 
Àn
);

1786 
SSL_CTX_u£_˚πifiˇã
(
SSL_CTX
 *
˘x
, 
X509
 *
x
);

1787 
SSL_CTX_u£_˚πifiˇã_ASN1
(
SSL_CTX
 *
˘x
, 
Àn
, c⁄° *
d
);

1789 
SSL_CTX_£t_deÁu…_∑sswd_cb
(
SSL_CTX
 *
˘x
, 
≥m_∑ssw‹d_cb
 *
cb
);

1790 
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
(
SSL_CTX
 *
˘x
, *
u
);

1792 
SSL_CTX_check_¥iv©e_key
(c⁄° 
SSL_CTX
 *
˘x
);

1793 
SSL_check_¥iv©e_key
(c⁄° 
SSL
 *
˘x
);

1795 
SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
SSL_CTX
 *
˘x
,c⁄° *
sid_˘x
,

1796 
sid_˘x_Àn
);

1798 
SSL
 * 
SSL_√w
(
SSL_CTX
 *
˘x
);

1799 
SSL_£t_£ssi⁄_id_c⁄ãxt
(
SSL
 *
s¶
,c⁄° *
sid_˘x
,

1800 
sid_˘x_Àn
);

1802 
SSL_CTX_£t_puΩo£
(
SSL_CTX
 *
s
, 
puΩo£
);

1803 
SSL_£t_puΩo£
(
SSL
 *
s
, 
puΩo£
);

1804 
SSL_CTX_£t_åu°
(
SSL_CTX
 *
s
, 
åu°
);

1805 
SSL_£t_åu°
(
SSL
 *
s
, 
åu°
);

1807 
SSL_CTX_£t1_∑øm
(
SSL_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
vpm
);

1808 
SSL_£t1_∑øm
(
SSL
 *
s¶
, 
X509_VERIFY_PARAM
 *
vpm
);

1810 #i‚de‡
OPENSSL_NO_SRP


1811 
SSL_CTX_£t_§p_u£∫ame
(
SSL_CTX
 *
˘x
,*
«me
);

1812 
SSL_CTX_£t_§p_∑ssw‹d
(
SSL_CTX
 *
˘x
,*
∑ssw‹d
);

1813 
SSL_CTX_£t_§p_°ªngth
(
SSL_CTX
 *
˘x
, 
°ªngth
);

1814 
SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback
(
SSL_CTX
 *
˘x
,

1815 *(*
cb
)(
SSL
 *,*));

1816 
SSL_CTX_£t_§p_vîify_∑øm_ˇŒback
(
SSL_CTX
 *
˘x
,

1817 (*
cb
)(
SSL
 *,*));

1818 
SSL_CTX_£t_§p_u£∫ame_ˇŒback
(
SSL_CTX
 *
˘x
,

1819 (*
cb
)(
SSL
 *,*,*));

1820 
SSL_CTX_£t_§p_cb_¨g
(
SSL_CTX
 *
˘x
, *
¨g
);

1822 
SSL_£t_§p_£rvî_∑øm
(
SSL
 *
s
, c⁄° 
BIGNUM
 *
N
, c⁄° BIGNUM *
g
,

1823 
BIGNUM
 *
ß
, BIGNUM *
v
, *
öfo
);

1824 
SSL_£t_§p_£rvî_∑øm_pw
(
SSL
 *
s
, c⁄° *
u£r
, c⁄° *
∑ss
,

1825 c⁄° *
gΩ
);

1827 
BIGNUM
 *
SSL_gë_§p_g
(
SSL
 *
s
);

1828 
BIGNUM
 *
SSL_gë_§p_N
(
SSL
 *
s
);

1830 *
SSL_gë_§p_u£∫ame
(
SSL
 *
s
);

1831 *
SSL_gë_§p_u£röfo
(
SSL
 *
s
);

1834 
SSL_‰ì
(
SSL
 *
s¶
);

1835 
SSL_ac˚±
(
SSL
 *
s¶
);

1836 
SSL_c⁄√˘
(
SSL
 *
s¶
);

1837 
SSL_ªad
(
SSL
 *
s¶
,*
buf
,
num
);

1838 
SSL_≥ek
(
SSL
 *
s¶
,*
buf
,
num
);

1839 
SSL_wrôe
(
SSL
 *
s¶
,c⁄° *
buf
,
num
);

1840 
SSL_˘æ
(
SSL
 *
s¶
,
cmd
, 
œrg
, *
∑rg
);

1841 
SSL_ˇŒback_˘æ
(
SSL
 *, , (*)());

1842 
SSL_CTX_˘æ
(
SSL_CTX
 *
˘x
,
cmd
, 
œrg
, *
∑rg
);

1843 
SSL_CTX_ˇŒback_˘æ
(
SSL_CTX
 *, , (*)());

1845 
SSL_gë_îr‹
(c⁄° 
SSL
 *
s
,
ªt_code
);

1846 c⁄° *
SSL_gë_vîsi⁄
(c⁄° 
SSL
 *
s
);

1849 
SSL_CTX_£t_s¶_vîsi⁄
(
SSL_CTX
 *
˘x
, c⁄° 
SSL_METHOD
 *
mëh
);

1851 #i‚de‡
OPENSSL_NO_SSL2


1852 c⁄° 
SSL_METHOD
 *
SSLv2_mëhod
();

1853 c⁄° 
SSL_METHOD
 *
SSLv2_£rvî_mëhod
();

1854 c⁄° 
SSL_METHOD
 *
SSLv2_˛õ¡_mëhod
();

1857 c⁄° 
SSL_METHOD
 *
SSLv3_mëhod
();

1858 c⁄° 
SSL_METHOD
 *
SSLv3_£rvî_mëhod
();

1859 c⁄° 
SSL_METHOD
 *
SSLv3_˛õ¡_mëhod
();

1861 c⁄° 
SSL_METHOD
 *
SSLv23_mëhod
();

1862 c⁄° 
SSL_METHOD
 *
SSLv23_£rvî_mëhod
();

1863 c⁄° 
SSL_METHOD
 *
SSLv23_˛õ¡_mëhod
();

1865 c⁄° 
SSL_METHOD
 *
TLSv1_mëhod
();

1866 c⁄° 
SSL_METHOD
 *
TLSv1_£rvî_mëhod
();

1867 c⁄° 
SSL_METHOD
 *
TLSv1_˛õ¡_mëhod
();

1869 c⁄° 
SSL_METHOD
 *
TLSv1_1_mëhod
();

1870 c⁄° 
SSL_METHOD
 *
TLSv1_1_£rvî_mëhod
();

1871 c⁄° 
SSL_METHOD
 *
TLSv1_1_˛õ¡_mëhod
();

1873 c⁄° 
SSL_METHOD
 *
TLSv1_2_mëhod
();

1874 c⁄° 
SSL_METHOD
 *
TLSv1_2_£rvî_mëhod
();

1875 c⁄° 
SSL_METHOD
 *
TLSv1_2_˛õ¡_mëhod
();

1878 c⁄° 
SSL_METHOD
 *
DTLSv1_mëhod
();

1879 c⁄° 
SSL_METHOD
 *
DTLSv1_£rvî_mëhod
();

1880 c⁄° 
SSL_METHOD
 *
DTLSv1_˛õ¡_mëhod
();

1882 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_gë_cùhîs
(c⁄° 
SSL
 *
s
);

1884 
SSL_do_h™dshake
(
SSL
 *
s
);

1885 
SSL_ª√gŸüã
(
SSL
 *
s
);

1886 
SSL_ª√gŸüã_abbªvüãd
(
SSL
 *
s
);

1887 
SSL_ª√gŸüã_≥ndög
(
SSL
 *
s
);

1888 
SSL_shutdown
(
SSL
 *
s
);

1890 c⁄° 
SSL_METHOD
 *
SSL_gë_s¶_mëhod
(
SSL
 *
s
);

1891 
SSL_£t_s¶_mëhod
(
SSL
 *
s
, c⁄° 
SSL_METHOD
 *
mëhod
);

1892 c⁄° *
SSL_Æît_ty≥_°rög_l⁄g
(
vÆue
);

1893 c⁄° *
SSL_Æît_ty≥_°rög
(
vÆue
);

1894 c⁄° *
SSL_Æît_desc_°rög_l⁄g
(
vÆue
);

1895 c⁄° *
SSL_Æît_desc_°rög
(
vÆue
);

1897 
SSL_£t_˛õ¡_CA_li°
(
SSL
 *
s
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1898 
SSL_CTX_£t_˛õ¡_CA_li°
(
SSL_CTX
 *
˘x
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1899 
STACK_OF
(
X509_NAME
Ë*
SSL_gë_˛õ¡_CA_li°
(c⁄° 
SSL
 *
s
);

1900 
STACK_OF
(
X509_NAME
Ë*
SSL_CTX_gë_˛õ¡_CA_li°
(c⁄° 
SSL_CTX
 *
s
);

1901 
SSL_add_˛õ¡_CA
(
SSL
 *
s¶
,
X509
 *
x
);

1902 
SSL_CTX_add_˛õ¡_CA
(
SSL_CTX
 *
˘x
,
X509
 *
x
);

1904 
SSL_£t_c⁄√˘_°©e
(
SSL
 *
s
);

1905 
SSL_£t_ac˚±_°©e
(
SSL
 *
s
);

1907 
SSL_gë_deÁu…_timeout
(c⁄° 
SSL
 *
s
);

1909 
SSL_libøry_öô
();

1911 *
SSL_CIPHER_des¸ùti⁄
(c⁄° 
SSL_CIPHER
 *,*
buf
,
size
);

1912 
STACK_OF
(
X509_NAME
Ë*
SSL_dup_CA_li°
(STACK_OF(X509_NAMEË*
sk
);

1914 
SSL
 *
SSL_dup
(SSL *
s¶
);

1916 
X509
 *
SSL_gë_˚πifiˇã
(c⁄° 
SSL
 *
s¶
);

1917  
evp_pkey_°
 *
SSL_gë_¥iv©ekey
(
SSL
 *
s¶
);

1919 
SSL_CTX_£t_quõt_shutdown
(
SSL_CTX
 *
˘x
,
mode
);

1920 
SSL_CTX_gë_quõt_shutdown
(c⁄° 
SSL_CTX
 *
˘x
);

1921 
SSL_£t_quõt_shutdown
(
SSL
 *
s¶
,
mode
);

1922 
SSL_gë_quõt_shutdown
(c⁄° 
SSL
 *
s¶
);

1923 
SSL_£t_shutdown
(
SSL
 *
s¶
,
mode
);

1924 
SSL_gë_shutdown
(c⁄° 
SSL
 *
s¶
);

1925 
SSL_vîsi⁄
(c⁄° 
SSL
 *
s¶
);

1926 
SSL_CTX_£t_deÁu…_vîify_∑ths
(
SSL_CTX
 *
˘x
);

1927 
SSL_CTX_lﬂd_vîify_loˇti⁄s
(
SSL_CTX
 *
˘x
, c⁄° *
CAfûe
,

1928 c⁄° *
CA∑th
);

1929 
	#SSL_gë0_£ssi⁄
 
SSL_gë_£ssi⁄


	)

1930 
SSL_SESSION
 *
SSL_gë_£ssi⁄
(c⁄° 
SSL
 *
s¶
);

1931 
SSL_SESSION
 *
SSL_gë1_£ssi⁄
(
SSL
 *
s¶
);

1932 
SSL_CTX
 *
SSL_gë_SSL_CTX
(c⁄° 
SSL
 *
s¶
);

1933 
SSL_CTX
 *
SSL_£t_SSL_CTX
(
SSL
 *
s¶
, SSL_CTX* 
˘x
);

1934 
SSL_£t_öfo_ˇŒback
(
SSL
 *
s¶
,

1935 (*
cb
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
));

1936 (*
SSL_gë_öfo_ˇŒback
(c⁄° 
SSL
 *
s¶
))(c⁄° SSL *s¶,
ty≥
,
vÆ
);

1937 
SSL_°©e
(c⁄° 
SSL
 *
s¶
);

1938 
SSL_£t_°©e
(
SSL
 *
s¶
, 
°©e
);

1940 
SSL_£t_vîify_ªsu…
(
SSL
 *
s¶
,
v
);

1941 
SSL_gë_vîify_ªsu…
(c⁄° 
SSL
 *
s¶
);

1943 
SSL_£t_ex_d©a
(
SSL
 *
s¶
,
idx
,*
d©a
);

1944 *
SSL_gë_ex_d©a
(c⁄° 
SSL
 *
s¶
,
idx
);

1945 
SSL_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1946 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1948 
SSL_SESSION_£t_ex_d©a
(
SSL_SESSION
 *
ss
,
idx
,*
d©a
);

1949 *
SSL_SESSION_gë_ex_d©a
(c⁄° 
SSL_SESSION
 *
ss
,
idx
);

1950 
SSL_SESSION_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1951 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1953 
SSL_CTX_£t_ex_d©a
(
SSL_CTX
 *
s¶
,
idx
,*
d©a
);

1954 *
SSL_CTX_gë_ex_d©a
(c⁄° 
SSL_CTX
 *
s¶
,
idx
);

1955 
SSL_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1956 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1958 
SSL_gë_ex_d©a_X509_STORE_CTX_idx
();

1960 
	#SSL_CTX_£ss_£t_ˇche_size
(
˘x
,
t
) \

1961 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_SIZE
,
t
,
NULL
)

	)

1962 
	#SSL_CTX_£ss_gë_ˇche_size
(
˘x
) \

1963 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_SIZE
,0,
NULL
)

	)

1964 
	#SSL_CTX_£t_£ssi⁄_ˇche_mode
(
˘x
,
m
) \

1965 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_MODE
,
m
,
NULL
)

	)

1966 
	#SSL_CTX_gë_£ssi⁄_ˇche_mode
(
˘x
) \

1967 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_MODE
,0,
NULL
)

	)

1969 
	#SSL_CTX_gë_deÁu…_ªad_ahód
(
˘x
Ë
	`SSL_CTX_gë_ªad_ahód
(˘x)

	)

1970 
	#SSL_CTX_£t_deÁu…_ªad_ahód
(
˘x
,
m
Ë
	`SSL_CTX_£t_ªad_ahód
(˘x,m)

	)

1971 
	#SSL_CTX_gë_ªad_ahód
(
˘x
) \

1972 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_READ_AHEAD
,0,
NULL
)

	)

1973 
	#SSL_CTX_£t_ªad_ahód
(
˘x
,
m
) \

1974 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_READ_AHEAD
,
m
,
NULL
)

	)

1975 
	#SSL_CTX_gë_max_˚π_li°
(
˘x
) \

1976 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

1977 
	#SSL_CTX_£t_max_˚π_li°
(
˘x
,
m
) \

1978 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

1979 
	#SSL_gë_max_˚π_li°
(
s¶
) \

1980 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

1981 
	#SSL_£t_max_˚π_li°
(
s¶
,
m
) \

1982 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

1984 
	#SSL_CTX_£t_max_£nd_‰agmít
(
˘x
,
m
) \

1985 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

1986 
	#SSL_£t_max_£nd_‰agmít
(
s¶
,
m
) \

1987 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

1990 #i‚de‡
OPENSSL_NO_RSA


1991 
SSL_CTX_£t_tmp_rß_ˇŒback
(
SSL_CTX
 *
˘x
,

1992 
RSA
 *(*
cb
)(
SSL
 *
s¶
,
is_exp‹t
,

1993 
keyÀngth
));

1995 
SSL_£t_tmp_rß_ˇŒback
(
SSL
 *
s¶
,

1996 
RSA
 *(*
cb
)(
SSL
 *
s¶
,
is_exp‹t
,

1997 
keyÀngth
));

1999 #i‚de‡
OPENSSL_NO_DH


2000 
SSL_CTX_£t_tmp_dh_ˇŒback
(
SSL_CTX
 *
˘x
,

2001 
DH
 *(*
dh
)(
SSL
 *
s¶
,
is_exp‹t
,

2002 
keyÀngth
));

2003 
SSL_£t_tmp_dh_ˇŒback
(
SSL
 *
s¶
,

2004 
DH
 *(*
dh
)(
SSL
 *
s¶
,
is_exp‹t
,

2005 
keyÀngth
));

2007 #i‚de‡
OPENSSL_NO_ECDH


2008 
SSL_CTX_£t_tmp_ecdh_ˇŒback
(
SSL_CTX
 *
˘x
,

2009 
EC_KEY
 *(*
ecdh
)(
SSL
 *
s¶
,
is_exp‹t
,

2010 
keyÀngth
));

2011 
SSL_£t_tmp_ecdh_ˇŒback
(
SSL
 *
s¶
,

2012 
EC_KEY
 *(*
ecdh
)(
SSL
 *
s¶
,
is_exp‹t
,

2013 
keyÀngth
));

2016 #i‚de‡
OPENSSL_NO_COMP


2017 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_com¥essi⁄
(
SSL
 *
s
);

2018 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_ex∑nsi⁄
(
SSL
 *
s
);

2019 c⁄° *
SSL_COMP_gë_«me
(c⁄° 
COMP_METHOD
 *
comp
);

2020 
STACK_OF
(
SSL_COMP
Ë*
SSL_COMP_gë_com¥essi⁄_mëhods
();

2021 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
,
COMP_METHOD
 *
cm
);

2023 c⁄° *
SSL_gë_cuºít_com¥essi⁄
(
SSL
 *
s
);

2024 c⁄° *
SSL_gë_cuºít_ex∑nsi⁄
(
SSL
 *
s
);

2025 c⁄° *
SSL_COMP_gë_«me
(c⁄° *
comp
);

2026 *
SSL_COMP_gë_com¥essi⁄_mëhods
();

2027 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
,*
cm
);

2031 
SSL_£t_£ssi⁄_tickë_ext
(
SSL
 *
s
, *
ext_d©a
, 
ext_Àn
);

2033 
SSL_£t_£ssi⁄_tickë_ext_cb
(
SSL
 *
s
, 
és_£ssi⁄_tickë_ext_cb_‚
 
cb
,

2034 *
¨g
);

2037 
SSL_£t_£ssi⁄_£¸ë_cb
(
SSL
 *
s
, 
és_£ssi⁄_£¸ë_cb_‚
 
és_£ssi⁄_£¸ë_cb
, *
¨g
);

2039 
SSL_£t_debug
(
SSL
 *
s
, 
debug
);

2040 
SSL_ˇche_hô
(
SSL
 *
s
);

2046 
ERR_lﬂd_SSL_°rögs
();

2051 
	#SSL_F_CLIENT_CERTIFICATE
 100

	)

2052 
	#SSL_F_CLIENT_FINISHED
 167

	)

2053 
	#SSL_F_CLIENT_HELLO
 101

	)

2054 
	#SSL_F_CLIENT_MASTER_KEY
 102

	)

2055 
	#SSL_F_D2I_SSL_SESSION
 103

	)

2056 
	#SSL_F_DO_DTLS1_WRITE
 245

	)

2057 
	#SSL_F_DO_SSL3_WRITE
 104

	)

2058 
	#SSL_F_DTLS1_ACCEPT
 246

	)

2059 
	#SSL_F_DTLS1_ADD_CERT_TO_BUF
 295

	)

2060 
	#SSL_F_DTLS1_BUFFER_RECORD
 247

	)

2061 
	#SSL_F_DTLS1_CHECK_TIMEOUT_NUM
 316

	)

2062 
	#SSL_F_DTLS1_CLIENT_HELLO
 248

	)

2063 
	#SSL_F_DTLS1_CONNECT
 249

	)

2064 
	#SSL_F_DTLS1_ENC
 250

	)

2065 
	#SSL_F_DTLS1_GET_HELLO_VERIFY
 251

	)

2066 
	#SSL_F_DTLS1_GET_MESSAGE
 252

	)

2067 
	#SSL_F_DTLS1_GET_MESSAGE_FRAGMENT
 253

	)

2068 
	#SSL_F_DTLS1_GET_RECORD
 254

	)

2069 
	#SSL_F_DTLS1_HANDLE_TIMEOUT
 297

	)

2070 
	#SSL_F_DTLS1_HEARTBEAT
 305

	)

2071 
	#SSL_F_DTLS1_OUTPUT_CERT_CHAIN
 255

	)

2072 
	#SSL_F_DTLS1_PREPROCESS_FRAGMENT
 288

	)

2073 
	#SSL_F_DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE
 256

	)

2074 
	#SSL_F_DTLS1_PROCESS_RECORD
 257

	)

2075 
	#SSL_F_DTLS1_READ_BYTES
 258

	)

2076 
	#SSL_F_DTLS1_READ_FAILED
 259

	)

2077 
	#SSL_F_DTLS1_SEND_CERTIFICATE_REQUEST
 260

	)

2078 
	#SSL_F_DTLS1_SEND_CLIENT_CERTIFICATE
 261

	)

2079 
	#SSL_F_DTLS1_SEND_CLIENT_KEY_EXCHANGE
 262

	)

2080 
	#SSL_F_DTLS1_SEND_CLIENT_VERIFY
 263

	)

2081 
	#SSL_F_DTLS1_SEND_HELLO_VERIFY_REQUEST
 264

	)

2082 
	#SSL_F_DTLS1_SEND_SERVER_CERTIFICATE
 265

	)

2083 
	#SSL_F_DTLS1_SEND_SERVER_HELLO
 266

	)

2084 
	#SSL_F_DTLS1_SEND_SERVER_KEY_EXCHANGE
 267

	)

2085 
	#SSL_F_DTLS1_WRITE_APP_DATA_BYTES
 268

	)

2086 
	#SSL_F_GET_CLIENT_FINISHED
 105

	)

2087 
	#SSL_F_GET_CLIENT_HELLO
 106

	)

2088 
	#SSL_F_GET_CLIENT_MASTER_KEY
 107

	)

2089 
	#SSL_F_GET_SERVER_FINISHED
 108

	)

2090 
	#SSL_F_GET_SERVER_HELLO
 109

	)

2091 
	#SSL_F_GET_SERVER_VERIFY
 110

	)

2092 
	#SSL_F_I2D_SSL_SESSION
 111

	)

2093 
	#SSL_F_READ_N
 112

	)

2094 
	#SSL_F_REQUEST_CERTIFICATE
 113

	)

2095 
	#SSL_F_SERVER_FINISH
 239

	)

2096 
	#SSL_F_SERVER_HELLO
 114

	)

2097 
	#SSL_F_SERVER_VERIFY
 240

	)

2098 
	#SSL_F_SSL23_ACCEPT
 115

	)

2099 
	#SSL_F_SSL23_CLIENT_HELLO
 116

	)

2100 
	#SSL_F_SSL23_CONNECT
 117

	)

2101 
	#SSL_F_SSL23_GET_CLIENT_HELLO
 118

	)

2102 
	#SSL_F_SSL23_GET_SERVER_HELLO
 119

	)

2103 
	#SSL_F_SSL23_PEEK
 237

	)

2104 
	#SSL_F_SSL23_READ
 120

	)

2105 
	#SSL_F_SSL23_WRITE
 121

	)

2106 
	#SSL_F_SSL2_ACCEPT
 122

	)

2107 
	#SSL_F_SSL2_CONNECT
 123

	)

2108 
	#SSL_F_SSL2_ENC_INIT
 124

	)

2109 
	#SSL_F_SSL2_GENERATE_KEY_MATERIAL
 241

	)

2110 
	#SSL_F_SSL2_PEEK
 234

	)

2111 
	#SSL_F_SSL2_READ
 125

	)

2112 
	#SSL_F_SSL2_READ_INTERNAL
 236

	)

2113 
	#SSL_F_SSL2_SET_CERTIFICATE
 126

	)

2114 
	#SSL_F_SSL2_WRITE
 127

	)

2115 
	#SSL_F_SSL3_ACCEPT
 128

	)

2116 
	#SSL_F_SSL3_ADD_CERT_TO_BUF
 296

	)

2117 
	#SSL_F_SSL3_CALLBACK_CTRL
 233

	)

2118 
	#SSL_F_SSL3_CHANGE_CIPHER_STATE
 129

	)

2119 
	#SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM
 130

	)

2120 
	#SSL_F_SSL3_CHECK_CLIENT_HELLO
 304

	)

2121 
	#SSL_F_SSL3_CLIENT_HELLO
 131

	)

2122 
	#SSL_F_SSL3_CONNECT
 132

	)

2123 
	#SSL_F_SSL3_CTRL
 213

	)

2124 
	#SSL_F_SSL3_CTX_CTRL
 133

	)

2125 
	#SSL_F_SSL3_DIGEST_CACHED_RECORDS
 293

	)

2126 
	#SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC
 292

	)

2127 
	#SSL_F_SSL3_ENC
 134

	)

2128 
	#SSL_F_SSL3_GENERATE_KEY_BLOCK
 238

	)

2129 
	#SSL_F_SSL3_GET_CERTIFICATE_REQUEST
 135

	)

2130 
	#SSL_F_SSL3_GET_CERT_STATUS
 289

	)

2131 
	#SSL_F_SSL3_GET_CERT_VERIFY
 136

	)

2132 
	#SSL_F_SSL3_GET_CLIENT_CERTIFICATE
 137

	)

2133 
	#SSL_F_SSL3_GET_CLIENT_HELLO
 138

	)

2134 
	#SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE
 139

	)

2135 
	#SSL_F_SSL3_GET_FINISHED
 140

	)

2136 
	#SSL_F_SSL3_GET_KEY_EXCHANGE
 141

	)

2137 
	#SSL_F_SSL3_GET_MESSAGE
 142

	)

2138 
	#SSL_F_SSL3_GET_NEW_SESSION_TICKET
 283

	)

2139 
	#SSL_F_SSL3_GET_NEXT_PROTO
 306

	)

2140 
	#SSL_F_SSL3_GET_RECORD
 143

	)

2141 
	#SSL_F_SSL3_GET_SERVER_CERTIFICATE
 144

	)

2142 
	#SSL_F_SSL3_GET_SERVER_DONE
 145

	)

2143 
	#SSL_F_SSL3_GET_SERVER_HELLO
 146

	)

2144 
	#SSL_F_SSL3_HANDSHAKE_MAC
 285

	)

2145 
	#SSL_F_SSL3_NEW_SESSION_TICKET
 287

	)

2146 
	#SSL_F_SSL3_OUTPUT_CERT_CHAIN
 147

	)

2147 
	#SSL_F_SSL3_PEEK
 235

	)

2148 
	#SSL_F_SSL3_READ_BYTES
 148

	)

2149 
	#SSL_F_SSL3_READ_N
 149

	)

2150 
	#SSL_F_SSL3_SEND_CERTIFICATE_REQUEST
 150

	)

2151 
	#SSL_F_SSL3_SEND_CLIENT_CERTIFICATE
 151

	)

2152 
	#SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE
 152

	)

2153 
	#SSL_F_SSL3_SEND_CLIENT_VERIFY
 153

	)

2154 
	#SSL_F_SSL3_SEND_SERVER_CERTIFICATE
 154

	)

2155 
	#SSL_F_SSL3_SEND_SERVER_HELLO
 242

	)

2156 
	#SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE
 155

	)

2157 
	#SSL_F_SSL3_SETUP_KEY_BLOCK
 157

	)

2158 
	#SSL_F_SSL3_SETUP_READ_BUFFER
 156

	)

2159 
	#SSL_F_SSL3_SETUP_WRITE_BUFFER
 291

	)

2160 
	#SSL_F_SSL3_WRITE_BYTES
 158

	)

2161 
	#SSL_F_SSL3_WRITE_PENDING
 159

	)

2162 
	#SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT
 298

	)

2163 
	#SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT
 277

	)

2164 
	#SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT
 307

	)

2165 
	#SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK
 215

	)

2166 
	#SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK
 216

	)

2167 
	#SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT
 299

	)

2168 
	#SSL_F_SSL_ADD_SERVERHELLO_TLSEXT
 278

	)

2169 
	#SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT
 308

	)

2170 
	#SSL_F_SSL_BAD_METHOD
 160

	)

2171 
	#SSL_F_SSL_BYTES_TO_CIPHER_LIST
 161

	)

2172 
	#SSL_F_SSL_CERT_DUP
 221

	)

2173 
	#SSL_F_SSL_CERT_INST
 222

	)

2174 
	#SSL_F_SSL_CERT_INSTANTIATE
 214

	)

2175 
	#SSL_F_SSL_CERT_NEW
 162

	)

2176 
	#SSL_F_SSL_CHECK_PRIVATE_KEY
 163

	)

2177 
	#SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT
 280

	)

2178 
	#SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG
 279

	)

2179 
	#SSL_F_SSL_CIPHER_PROCESS_RULESTR
 230

	)

2180 
	#SSL_F_SSL_CIPHER_STRENGTH_SORT
 231

	)

2181 
	#SSL_F_SSL_CLEAR
 164

	)

2182 
	#SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD
 165

	)

2183 
	#SSL_F_SSL_CREATE_CIPHER_LIST
 166

	)

2184 
	#SSL_F_SSL_CTRL
 232

	)

2185 
	#SSL_F_SSL_CTX_CHECK_PRIVATE_KEY
 168

	)

2186 
	#SSL_F_SSL_CTX_MAKE_PROFILES
 309

	)

2187 
	#SSL_F_SSL_CTX_NEW
 169

	)

2188 
	#SSL_F_SSL_CTX_SET_CIPHER_LIST
 269

	)

2189 
	#SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE
 290

	)

2190 
	#SSL_F_SSL_CTX_SET_PURPOSE
 226

	)

2191 
	#SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT
 219

	)

2192 
	#SSL_F_SSL_CTX_SET_SSL_VERSION
 170

	)

2193 
	#SSL_F_SSL_CTX_SET_TRUST
 229

	)

2194 
	#SSL_F_SSL_CTX_USE_CERTIFICATE
 171

	)

2195 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1
 172

	)

2196 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_CHAIN_FILE
 220

	)

2197 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_FILE
 173

	)

2198 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY
 174

	)

2199 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1
 175

	)

2200 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE
 176

	)

2201 
	#SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT
 272

	)

2202 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY
 177

	)

2203 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1
 178

	)

2204 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE
 179

	)

2205 
	#SSL_F_SSL_DO_HANDSHAKE
 180

	)

2206 
	#SSL_F_SSL_GET_NEW_SESSION
 181

	)

2207 
	#SSL_F_SSL_GET_PREV_SESSION
 217

	)

2208 
	#SSL_F_SSL_GET_SERVER_SEND_CERT
 182

	)

2209 
	#SSL_F_SSL_GET_SIGN_PKEY
 183

	)

2210 
	#SSL_F_SSL_INIT_WBIO_BUFFER
 184

	)

2211 
	#SSL_F_SSL_LOAD_CLIENT_CA_FILE
 185

	)

2212 
	#SSL_F_SSL_NEW
 186

	)

2213 
	#SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT
 300

	)

2214 
	#SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT
 302

	)

2215 
	#SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT
 310

	)

2216 
	#SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT
 301

	)

2217 
	#SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT
 303

	)

2218 
	#SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT
 311

	)

2219 
	#SSL_F_SSL_PEEK
 270

	)

2220 
	#SSL_F_SSL_PREPARE_CLIENTHELLO_TLSEXT
 281

	)

2221 
	#SSL_F_SSL_PREPARE_SERVERHELLO_TLSEXT
 282

	)

2222 
	#SSL_F_SSL_READ
 223

	)

2223 
	#SSL_F_SSL_RSA_PRIVATE_DECRYPT
 187

	)

2224 
	#SSL_F_SSL_RSA_PUBLIC_ENCRYPT
 188

	)

2225 
	#SSL_F_SSL_SESSION_NEW
 189

	)

2226 
	#SSL_F_SSL_SESSION_PRINT_FP
 190

	)

2227 
	#SSL_F_SSL_SESSION_SET1_ID_CONTEXT
 312

	)

2228 
	#SSL_F_SSL_SESS_CERT_NEW
 225

	)

2229 
	#SSL_F_SSL_SET_CERT
 191

	)

2230 
	#SSL_F_SSL_SET_CIPHER_LIST
 271

	)

2231 
	#SSL_F_SSL_SET_FD
 192

	)

2232 
	#SSL_F_SSL_SET_PKEY
 193

	)

2233 
	#SSL_F_SSL_SET_PURPOSE
 227

	)

2234 
	#SSL_F_SSL_SET_RFD
 194

	)

2235 
	#SSL_F_SSL_SET_SESSION
 195

	)

2236 
	#SSL_F_SSL_SET_SESSION_ID_CONTEXT
 218

	)

2237 
	#SSL_F_SSL_SET_SESSION_TICKET_EXT
 294

	)

2238 
	#SSL_F_SSL_SET_TRUST
 228

	)

2239 
	#SSL_F_SSL_SET_WFD
 196

	)

2240 
	#SSL_F_SSL_SHUTDOWN
 224

	)

2241 
	#SSL_F_SSL_SRP_CTX_INIT
 313

	)

2242 
	#SSL_F_SSL_UNDEFINED_CONST_FUNCTION
 243

	)

2243 
	#SSL_F_SSL_UNDEFINED_FUNCTION
 197

	)

2244 
	#SSL_F_SSL_UNDEFINED_VOID_FUNCTION
 244

	)

2245 
	#SSL_F_SSL_USE_CERTIFICATE
 198

	)

2246 
	#SSL_F_SSL_USE_CERTIFICATE_ASN1
 199

	)

2247 
	#SSL_F_SSL_USE_CERTIFICATE_FILE
 200

	)

2248 
	#SSL_F_SSL_USE_PRIVATEKEY
 201

	)

2249 
	#SSL_F_SSL_USE_PRIVATEKEY_ASN1
 202

	)

2250 
	#SSL_F_SSL_USE_PRIVATEKEY_FILE
 203

	)

2251 
	#SSL_F_SSL_USE_PSK_IDENTITY_HINT
 273

	)

2252 
	#SSL_F_SSL_USE_RSAPRIVATEKEY
 204

	)

2253 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1
 205

	)

2254 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_FILE
 206

	)

2255 
	#SSL_F_SSL_VERIFY_CERT_CHAIN
 207

	)

2256 
	#SSL_F_SSL_WRITE
 208

	)

2257 
	#SSL_F_TLS1_CERT_VERIFY_MAC
 286

	)

2258 
	#SSL_F_TLS1_CHANGE_CIPHER_STATE
 209

	)

2259 
	#SSL_F_TLS1_CHECK_SERVERHELLO_TLSEXT
 274

	)

2260 
	#SSL_F_TLS1_ENC
 210

	)

2261 
	#SSL_F_TLS1_EXPORT_KEYING_MATERIAL
 314

	)

2262 
	#SSL_F_TLS1_HEARTBEAT
 315

	)

2263 
	#SSL_F_TLS1_PREPARE_CLIENTHELLO_TLSEXT
 275

	)

2264 
	#SSL_F_TLS1_PREPARE_SERVERHELLO_TLSEXT
 276

	)

2265 
	#SSL_F_TLS1_PRF
 284

	)

2266 
	#SSL_F_TLS1_SETUP_KEY_BLOCK
 211

	)

2267 
	#SSL_F_WRITE_PENDING
 212

	)

2270 
	#SSL_R_APP_DATA_IN_HANDSHAKE
 100

	)

2271 
	#SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT
 272

	)

2272 
	#SSL_R_BAD_ALERT_RECORD
 101

	)

2273 
	#SSL_R_BAD_AUTHENTICATION_TYPE
 102

	)

2274 
	#SSL_R_BAD_CHANGE_CIPHER_SPEC
 103

	)

2275 
	#SSL_R_BAD_CHECKSUM
 104

	)

2276 
	#SSL_R_BAD_DATA_RETURNED_BY_CALLBACK
 106

	)

2277 
	#SSL_R_BAD_DECOMPRESSION
 107

	)

2278 
	#SSL_R_BAD_DH_G_LENGTH
 108

	)

2279 
	#SSL_R_BAD_DH_PUB_KEY_LENGTH
 109

	)

2280 
	#SSL_R_BAD_DH_P_LENGTH
 110

	)

2281 
	#SSL_R_BAD_DIGEST_LENGTH
 111

	)

2282 
	#SSL_R_BAD_DSA_SIGNATURE
 112

	)

2283 
	#SSL_R_BAD_ECC_CERT
 304

	)

2284 
	#SSL_R_BAD_ECDSA_SIGNATURE
 305

	)

2285 
	#SSL_R_BAD_ECPOINT
 306

	)

2286 
	#SSL_R_BAD_HANDSHAKE_LENGTH
 332

	)

2287 
	#SSL_R_BAD_HELLO_REQUEST
 105

	)

2288 
	#SSL_R_BAD_LENGTH
 271

	)

2289 
	#SSL_R_BAD_MAC_DECODE
 113

	)

2290 
	#SSL_R_BAD_MAC_LENGTH
 333

	)

2291 
	#SSL_R_BAD_MESSAGE_TYPE
 114

	)

2292 
	#SSL_R_BAD_PACKET_LENGTH
 115

	)

2293 
	#SSL_R_BAD_PROTOCOL_VERSION_NUMBER
 116

	)

2294 
	#SSL_R_BAD_PSK_IDENTITY_HINT_LENGTH
 316

	)

2295 
	#SSL_R_BAD_RESPONSE_ARGUMENT
 117

	)

2296 
	#SSL_R_BAD_RSA_DECRYPT
 118

	)

2297 
	#SSL_R_BAD_RSA_ENCRYPT
 119

	)

2298 
	#SSL_R_BAD_RSA_E_LENGTH
 120

	)

2299 
	#SSL_R_BAD_RSA_MODULUS_LENGTH
 121

	)

2300 
	#SSL_R_BAD_RSA_SIGNATURE
 122

	)

2301 
	#SSL_R_BAD_SIGNATURE
 123

	)

2302 
	#SSL_R_BAD_SRP_A_LENGTH
 347

	)

2303 
	#SSL_R_BAD_SRP_B_LENGTH
 348

	)

2304 
	#SSL_R_BAD_SRP_G_LENGTH
 349

	)

2305 
	#SSL_R_BAD_SRP_N_LENGTH
 350

	)

2306 
	#SSL_R_BAD_SRP_S_LENGTH
 351

	)

2307 
	#SSL_R_BAD_SRTP_MKI_VALUE
 352

	)

2308 
	#SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST
 353

	)

2309 
	#SSL_R_BAD_SSL_FILETYPE
 124

	)

2310 
	#SSL_R_BAD_SSL_SESSION_ID_LENGTH
 125

	)

2311 
	#SSL_R_BAD_STATE
 126

	)

2312 
	#SSL_R_BAD_WRITE_RETRY
 127

	)

2313 
	#SSL_R_BIO_NOT_SET
 128

	)

2314 
	#SSL_R_BLOCK_CIPHER_PAD_IS_WRONG
 129

	)

2315 
	#SSL_R_BN_LIB
 130

	)

2316 
	#SSL_R_CA_DN_LENGTH_MISMATCH
 131

	)

2317 
	#SSL_R_CA_DN_TOO_LONG
 132

	)

2318 
	#SSL_R_CCS_RECEIVED_EARLY
 133

	)

2319 
	#SSL_R_CERTIFICATE_VERIFY_FAILED
 134

	)

2320 
	#SSL_R_CERT_LENGTH_MISMATCH
 135

	)

2321 
	#SSL_R_CHALLENGE_IS_DIFFERENT
 136

	)

2322 
	#SSL_R_CIPHER_CODE_WRONG_LENGTH
 137

	)

2323 
	#SSL_R_CIPHER_OR_HASH_UNAVAILABLE
 138

	)

2324 
	#SSL_R_CIPHER_TABLE_SRC_ERROR
 139

	)

2325 
	#SSL_R_CLIENTHELLO_TLSEXT
 226

	)

2326 
	#SSL_R_COMPRESSED_LENGTH_TOO_LONG
 140

	)

2327 
	#SSL_R_COMPRESSION_DISABLED
 343

	)

2328 
	#SSL_R_COMPRESSION_FAILURE
 141

	)

2329 
	#SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE
 307

	)

2330 
	#SSL_R_COMPRESSION_LIBRARY_ERROR
 142

	)

2331 
	#SSL_R_CONNECTION_ID_IS_DIFFERENT
 143

	)

2332 
	#SSL_R_CONNECTION_TYPE_NOT_SET
 144

	)

2333 
	#SSL_R_COOKIE_MISMATCH
 308

	)

2334 
	#SSL_R_DATA_BETWEEN_CCS_AND_FINISHED
 145

	)

2335 
	#SSL_R_DATA_LENGTH_TOO_LONG
 146

	)

2336 
	#SSL_R_DECRYPTION_FAILED
 147

	)

2337 
	#SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC
 281

	)

2338 
	#SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG
 148

	)

2339 
	#SSL_R_DIGEST_CHECK_FAILED
 149

	)

2340 
	#SSL_R_DTLS_MESSAGE_TOO_BIG
 334

	)

2341 
	#SSL_R_DUPLICATE_COMPRESSION_ID
 309

	)

2342 
	#SSL_R_ECC_CERT_NOT_FOR_KEY_AGREEMENT
 317

	)

2343 
	#SSL_R_ECC_CERT_NOT_FOR_SIGNING
 318

	)

2344 
	#SSL_R_ECC_CERT_SHOULD_HAVE_RSA_SIGNATURE
 322

	)

2345 
	#SSL_R_ECC_CERT_SHOULD_HAVE_SHA1_SIGNATURE
 323

	)

2346 
	#SSL_R_ECGROUP_TOO_LARGE_FOR_CIPHER
 310

	)

2347 
	#SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST
 354

	)

2348 
	#SSL_R_ENCRYPTED_LENGTH_TOO_LONG
 150

	)

2349 
	#SSL_R_ERROR_GENERATING_TMP_RSA_KEY
 282

	)

2350 
	#SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST
 151

	)

2351 
	#SSL_R_EXCESSIVE_MESSAGE_SIZE
 152

	)

2352 
	#SSL_R_EXTRA_DATA_IN_MESSAGE
 153

	)

2353 
	#SSL_R_GOT_A_FIN_BEFORE_A_CCS
 154

	)

2354 
	#SSL_R_GOT_NEXT_PROTO_BEFORE_A_CCS
 355

	)

2355 
	#SSL_R_GOT_NEXT_PROTO_WITHOUT_EXTENSION
 356

	)

2356 
	#SSL_R_HTTPS_PROXY_REQUEST
 155

	)

2357 
	#SSL_R_HTTP_REQUEST
 156

	)

2358 
	#SSL_R_ILLEGAL_PADDING
 283

	)

2359 
	#SSL_R_INCONSISTENT_COMPRESSION
 340

	)

2360 
	#SSL_R_INVALID_CHALLENGE_LENGTH
 158

	)

2361 
	#SSL_R_INVALID_COMMAND
 280

	)

2362 
	#SSL_R_INVALID_COMPRESSION_ALGORITHM
 341

	)

2363 
	#SSL_R_INVALID_PURPOSE
 278

	)

2364 
	#SSL_R_INVALID_SRP_USERNAME
 357

	)

2365 
	#SSL_R_INVALID_STATUS_RESPONSE
 328

	)

2366 
	#SSL_R_INVALID_TICKET_KEYS_LENGTH
 325

	)

2367 
	#SSL_R_INVALID_TRUST
 279

	)

2368 
	#SSL_R_KEY_ARG_TOO_LONG
 284

	)

2369 
	#SSL_R_KRB5
 285

	)

2370 
	#SSL_R_KRB5_C_CC_PRINC
 286

	)

2371 
	#SSL_R_KRB5_C_GET_CRED
 287

	)

2372 
	#SSL_R_KRB5_C_INIT
 288

	)

2373 
	#SSL_R_KRB5_C_MK_REQ
 289

	)

2374 
	#SSL_R_KRB5_S_BAD_TICKET
 290

	)

2375 
	#SSL_R_KRB5_S_INIT
 291

	)

2376 
	#SSL_R_KRB5_S_RD_REQ
 292

	)

2377 
	#SSL_R_KRB5_S_TKT_EXPIRED
 293

	)

2378 
	#SSL_R_KRB5_S_TKT_NYV
 294

	)

2379 
	#SSL_R_KRB5_S_TKT_SKEW
 295

	)

2380 
	#SSL_R_LENGTH_MISMATCH
 159

	)

2381 
	#SSL_R_LENGTH_TOO_SHORT
 160

	)

2382 
	#SSL_R_LIBRARY_BUG
 274

	)

2383 
	#SSL_R_LIBRARY_HAS_NO_CIPHERS
 161

	)

2384 
	#SSL_R_MESSAGE_TOO_LONG
 296

	)

2385 
	#SSL_R_MISSING_DH_DSA_CERT
 162

	)

2386 
	#SSL_R_MISSING_DH_KEY
 163

	)

2387 
	#SSL_R_MISSING_DH_RSA_CERT
 164

	)

2388 
	#SSL_R_MISSING_DSA_SIGNING_CERT
 165

	)

2389 
	#SSL_R_MISSING_EXPORT_TMP_DH_KEY
 166

	)

2390 
	#SSL_R_MISSING_EXPORT_TMP_RSA_KEY
 167

	)

2391 
	#SSL_R_MISSING_RSA_CERTIFICATE
 168

	)

2392 
	#SSL_R_MISSING_RSA_ENCRYPTING_CERT
 169

	)

2393 
	#SSL_R_MISSING_RSA_SIGNING_CERT
 170

	)

2394 
	#SSL_R_MISSING_SRP_PARAM
 358

	)

2395 
	#SSL_R_MISSING_TMP_DH_KEY
 171

	)

2396 
	#SSL_R_MISSING_TMP_ECDH_KEY
 311

	)

2397 
	#SSL_R_MISSING_TMP_RSA_KEY
 172

	)

2398 
	#SSL_R_MISSING_TMP_RSA_PKEY
 173

	)

2399 
	#SSL_R_MISSING_VERIFY_MESSAGE
 174

	)

2400 
	#SSL_R_MULTIPLE_SGC_RESTARTS
 346

	)

2401 
	#SSL_R_NON_SSLV2_INITIAL_PACKET
 175

	)

2402 
	#SSL_R_NO_CERTIFICATES_RETURNED
 176

	)

2403 
	#SSL_R_NO_CERTIFICATE_ASSIGNED
 177

	)

2404 
	#SSL_R_NO_CERTIFICATE_RETURNED
 178

	)

2405 
	#SSL_R_NO_CERTIFICATE_SET
 179

	)

2406 
	#SSL_R_NO_CERTIFICATE_SPECIFIED
 180

	)

2407 
	#SSL_R_NO_CIPHERS_AVAILABLE
 181

	)

2408 
	#SSL_R_NO_CIPHERS_PASSED
 182

	)

2409 
	#SSL_R_NO_CIPHERS_SPECIFIED
 183

	)

2410 
	#SSL_R_NO_CIPHER_LIST
 184

	)

2411 
	#SSL_R_NO_CIPHER_MATCH
 185

	)

2412 
	#SSL_R_NO_CLIENT_CERT_METHOD
 331

	)

2413 
	#SSL_R_NO_CLIENT_CERT_RECEIVED
 186

	)

2414 
	#SSL_R_NO_COMPRESSION_SPECIFIED
 187

	)

2415 
	#SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER
 330

	)

2416 
	#SSL_R_NO_METHOD_SPECIFIED
 188

	)

2417 
	#SSL_R_NO_PRIVATEKEY
 189

	)

2418 
	#SSL_R_NO_PRIVATE_KEY_ASSIGNED
 190

	)

2419 
	#SSL_R_NO_PROTOCOLS_AVAILABLE
 191

	)

2420 
	#SSL_R_NO_PUBLICKEY
 192

	)

2421 
	#SSL_R_NO_RENEGOTIATION
 339

	)

2422 
	#SSL_R_NO_REQUIRED_DIGEST
 324

	)

2423 
	#SSL_R_NO_SHARED_CIPHER
 193

	)

2424 
	#SSL_R_NO_SRTP_PROFILES
 359

	)

2425 
	#SSL_R_NO_VERIFY_CALLBACK
 194

	)

2426 
	#SSL_R_NULL_SSL_CTX
 195

	)

2427 
	#SSL_R_NULL_SSL_METHOD_PASSED
 196

	)

2428 
	#SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED
 197

	)

2429 
	#SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED
 344

	)

2430 
	#SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE
 297

	)

2431 
	#SSL_R_OPAQUE_PRF_INPUT_TOO_LONG
 327

	)

2432 
	#SSL_R_PACKET_LENGTH_TOO_LONG
 198

	)

2433 
	#SSL_R_PARSE_TLSEXT
 227

	)

2434 
	#SSL_R_PATH_TOO_LONG
 270

	)

2435 
	#SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE
 199

	)

2436 
	#SSL_R_PEER_ERROR
 200

	)

2437 
	#SSL_R_PEER_ERROR_CERTIFICATE
 201

	)

2438 
	#SSL_R_PEER_ERROR_NO_CERTIFICATE
 202

	)

2439 
	#SSL_R_PEER_ERROR_NO_CIPHER
 203

	)

2440 
	#SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE
 204

	)

2441 
	#SSL_R_PRE_MAC_LENGTH_TOO_LONG
 205

	)

2442 
	#SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS
 206

	)

2443 
	#SSL_R_PROTOCOL_IS_SHUTDOWN
 207

	)

2444 
	#SSL_R_PSK_IDENTITY_NOT_FOUND
 223

	)

2445 
	#SSL_R_PSK_NO_CLIENT_CB
 224

	)

2446 
	#SSL_R_PSK_NO_SERVER_CB
 225

	)

2447 
	#SSL_R_PUBLIC_KEY_ENCRYPT_ERROR
 208

	)

2448 
	#SSL_R_PUBLIC_KEY_IS_NOT_RSA
 209

	)

2449 
	#SSL_R_PUBLIC_KEY_NOT_RSA
 210

	)

2450 
	#SSL_R_READ_BIO_NOT_SET
 211

	)

2451 
	#SSL_R_READ_TIMEOUT_EXPIRED
 312

	)

2452 
	#SSL_R_READ_WRONG_PACKET_TYPE
 212

	)

2453 
	#SSL_R_RECORD_LENGTH_MISMATCH
 213

	)

2454 
	#SSL_R_RECORD_TOO_LARGE
 214

	)

2455 
	#SSL_R_RECORD_TOO_SMALL
 298

	)

2456 
	#SSL_R_RENEGOTIATE_EXT_TOO_LONG
 335

	)

2457 
	#SSL_R_RENEGOTIATION_ENCODING_ERR
 336

	)

2458 
	#SSL_R_RENEGOTIATION_MISMATCH
 337

	)

2459 
	#SSL_R_REQUIRED_CIPHER_MISSING
 215

	)

2460 
	#SSL_R_REQUIRED_COMPRESSSION_ALGORITHM_MISSING
 342

	)

2461 
	#SSL_R_REUSE_CERT_LENGTH_NOT_ZERO
 216

	)

2462 
	#SSL_R_REUSE_CERT_TYPE_NOT_ZERO
 217

	)

2463 
	#SSL_R_REUSE_CIPHER_LIST_NOT_ZERO
 218

	)

2464 
	#SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING
 345

	)

2465 
	#SSL_R_SERVERHELLO_TLSEXT
 275

	)

2466 
	#SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED
 277

	)

2467 
	#SSL_R_SHORT_READ
 219

	)

2468 
	#SSL_R_SIGNATURE_ALGORITHMS_ERROR
 360

	)

2469 
	#SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE
 220

	)

2470 
	#SSL_R_SRP_A_CALC
 361

	)

2471 
	#SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES
 362

	)

2472 
	#SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG
 363

	)

2473 
	#SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE
 364

	)

2474 
	#SSL_R_SSL23_DOING_SESSION_ID_REUSE
 221

	)

2475 
	#SSL_R_SSL2_CONNECTION_ID_TOO_LONG
 299

	)

2476 
	#SSL_R_SSL3_EXT_INVALID_ECPOINTFORMAT
 321

	)

2477 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME
 319

	)

2478 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE
 320

	)

2479 
	#SSL_R_SSL3_SESSION_ID_TOO_LONG
 300

	)

2480 
	#SSL_R_SSL3_SESSION_ID_TOO_SHORT
 222

	)

2481 
	#SSL_R_SSLV3_ALERT_BAD_CERTIFICATE
 1042

	)

2482 
	#SSL_R_SSLV3_ALERT_BAD_RECORD_MAC
 1020

	)

2483 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED
 1045

	)

2484 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED
 1044

	)

2485 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN
 1046

	)

2486 
	#SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE
 1030

	)

2487 
	#SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE
 1040

	)

2488 
	#SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER
 1047

	)

2489 
	#SSL_R_SSLV3_ALERT_NO_CERTIFICATE
 1041

	)

2490 
	#SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE
 1010

	)

2491 
	#SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE
 1043

	)

2492 
	#SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION
 228

	)

2493 
	#SSL_R_SSL_HANDSHAKE_FAILURE
 229

	)

2494 
	#SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS
 230

	)

2495 
	#SSL_R_SSL_SESSION_ID_CALLBACK_FAILED
 301

	)

2496 
	#SSL_R_SSL_SESSION_ID_CONFLICT
 302

	)

2497 
	#SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG
 273

	)

2498 
	#SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH
 303

	)

2499 
	#SSL_R_SSL_SESSION_ID_IS_DIFFERENT
 231

	)

2500 
	#SSL_R_TLSV1_ALERT_ACCESS_DENIED
 1049

	)

2501 
	#SSL_R_TLSV1_ALERT_DECODE_ERROR
 1050

	)

2502 
	#SSL_R_TLSV1_ALERT_DECRYPTION_FAILED
 1021

	)

2503 
	#SSL_R_TLSV1_ALERT_DECRYPT_ERROR
 1051

	)

2504 
	#SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION
 1060

	)

2505 
	#SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY
 1071

	)

2506 
	#SSL_R_TLSV1_ALERT_INTERNAL_ERROR
 1080

	)

2507 
	#SSL_R_TLSV1_ALERT_NO_RENEGOTIATION
 1100

	)

2508 
	#SSL_R_TLSV1_ALERT_PROTOCOL_VERSION
 1070

	)

2509 
	#SSL_R_TLSV1_ALERT_RECORD_OVERFLOW
 1022

	)

2510 
	#SSL_R_TLSV1_ALERT_UNKNOWN_CA
 1048

	)

2511 
	#SSL_R_TLSV1_ALERT_USER_CANCELLED
 1090

	)

2512 
	#SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE
 1114

	)

2513 
	#SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE
 1113

	)

2514 
	#SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE
 1111

	)

2515 
	#SSL_R_TLSV1_UNRECOGNIZED_NAME
 1112

	)

2516 
	#SSL_R_TLSV1_UNSUPPORTED_EXTENSION
 1110

	)

2517 
	#SSL_R_TLS_CLIENT_CERT_REQ_WITH_ANON_CIPHER
 232

	)

2518 
	#SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT
 365

	)

2519 
	#SSL_R_TLS_HEARTBEAT_PENDING
 366

	)

2520 
	#SSL_R_TLS_ILLEGAL_EXPORTER_LABEL
 367

	)

2521 
	#SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST
 157

	)

2522 
	#SSL_R_TLS_PEER_DID_NOT_RESPOND_WITH_CERTIFICATE_LIST
 233

	)

2523 
	#SSL_R_TLS_RSA_ENCRYPTED_VALUE_LENGTH_IS_WRONG
 234

	)

2524 
	#SSL_R_TRIED_TO_USE_UNSUPPORTED_CIPHER
 235

	)

2525 
	#SSL_R_UNABLE_TO_DECODE_DH_CERTS
 236

	)

2526 
	#SSL_R_UNABLE_TO_DECODE_ECDH_CERTS
 313

	)

2527 
	#SSL_R_UNABLE_TO_EXTRACT_PUBLIC_KEY
 237

	)

2528 
	#SSL_R_UNABLE_TO_FIND_DH_PARAMETERS
 238

	)

2529 
	#SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS
 314

	)

2530 
	#SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS
 239

	)

2531 
	#SSL_R_UNABLE_TO_FIND_SSL_METHOD
 240

	)

2532 
	#SSL_R_UNABLE_TO_LOAD_SSL2_MD5_ROUTINES
 241

	)

2533 
	#SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES
 242

	)

2534 
	#SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES
 243

	)

2535 
	#SSL_R_UNEXPECTED_MESSAGE
 244

	)

2536 
	#SSL_R_UNEXPECTED_RECORD
 245

	)

2537 
	#SSL_R_UNINITIALIZED
 276

	)

2538 
	#SSL_R_UNKNOWN_ALERT_TYPE
 246

	)

2539 
	#SSL_R_UNKNOWN_CERTIFICATE_TYPE
 247

	)

2540 
	#SSL_R_UNKNOWN_CIPHER_RETURNED
 248

	)

2541 
	#SSL_R_UNKNOWN_CIPHER_TYPE
 249

	)

2542 
	#SSL_R_UNKNOWN_DIGEST
 368

	)

2543 
	#SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE
 250

	)

2544 
	#SSL_R_UNKNOWN_PKEY_TYPE
 251

	)

2545 
	#SSL_R_UNKNOWN_PROTOCOL
 252

	)

2546 
	#SSL_R_UNKNOWN_REMOTE_ERROR_TYPE
 253

	)

2547 
	#SSL_R_UNKNOWN_SSL_VERSION
 254

	)

2548 
	#SSL_R_UNKNOWN_STATE
 255

	)

2549 
	#SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED
 338

	)

2550 
	#SSL_R_UNSUPPORTED_CIPHER
 256

	)

2551 
	#SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM
 257

	)

2552 
	#SSL_R_UNSUPPORTED_DIGEST_TYPE
 326

	)

2553 
	#SSL_R_UNSUPPORTED_ELLIPTIC_CURVE
 315

	)

2554 
	#SSL_R_UNSUPPORTED_PROTOCOL
 258

	)

2555 
	#SSL_R_UNSUPPORTED_SSL_VERSION
 259

	)

2556 
	#SSL_R_UNSUPPORTED_STATUS_TYPE
 329

	)

2557 
	#SSL_R_USE_SRTP_NOT_NEGOTIATED
 369

	)

2558 
	#SSL_R_WRITE_BIO_NOT_SET
 260

	)

2559 
	#SSL_R_WRONG_CIPHER_RETURNED
 261

	)

2560 
	#SSL_R_WRONG_MESSAGE_TYPE
 262

	)

2561 
	#SSL_R_WRONG_NUMBER_OF_KEY_BITS
 263

	)

2562 
	#SSL_R_WRONG_SIGNATURE_LENGTH
 264

	)

2563 
	#SSL_R_WRONG_SIGNATURE_SIZE
 265

	)

2564 
	#SSL_R_WRONG_SIGNATURE_TYPE
 370

	)

2565 
	#SSL_R_WRONG_SSL_VERSION
 266

	)

2566 
	#SSL_R_WRONG_VERSION_NUMBER
 267

	)

2567 
	#SSL_R_X509_LIB
 268

	)

2568 
	#SSL_R_X509_VERIFICATION_SETUP_PROBLEMS
 269

	)

2570 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509v3.h

58 #i‚de‡
HEADER_X509V3_H


59 
	#HEADER_X509V3_H


	)

61 
	~<›ís¶/bio.h
>

62 
	~<›ís¶/x509.h
>

63 
	~<›ís¶/c⁄f.h
>

65 #ifde‡
__˝lu•lus


70 
v3_ext_mëhod
;

71 
v3_ext_˘x
;

75 * (*
	tX509V3_EXT_NEW
)();

76 (*
X509V3_EXT_FREE
)(*);

77 * (*
	tX509V3_EXT_D2I
)(*, const ** , );

78 (*
X509V3_EXT_I2D
)(*, **);

79 
STACK_OF
(
	tCONF_VALUE
) *

80 (*
	tX509V3_EXT_I2V
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
,

81 
	tSTACK_OF
(
	tCONF_VALUE
Ë*
	texéi°
);

82 * (*
	tX509V3_EXT_V2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

83 
	tv3_ext_˘x
 *
	t˘x
,

84 
	tSTACK_OF
(
	tCONF_VALUE
Ë*
	tvÆues
);

85 * (*
	tX509V3_EXT_I2S
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
);

86 * (*
	tX509V3_EXT_S2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

87 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

88 (*
X509V3_EXT_I2R
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
,

89 
	tBIO
 *
	tout
, 
	tödít
);

90 * (*
	tX509V3_EXT_R2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

91 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

95 
	sv3_ext_mëhod
 {

96 
ext_nid
;

97 
ext_Êags
;

99 
ASN1_ITEM_EXP
 *
ô
;

101 
X509V3_EXT_NEW
 
ext_√w
;

102 
X509V3_EXT_FREE
 
ext_‰ì
;

103 
X509V3_EXT_D2I
 
d2i
;

104 
X509V3_EXT_I2D
 
i2d
;

107 
X509V3_EXT_I2S
 
i2s
;

108 
X509V3_EXT_S2I
 
s2i
;

111 
X509V3_EXT_I2V
 
i2v
;

112 
X509V3_EXT_V2I
 
v2i
;

115 
X509V3_EXT_I2R
 
i2r
;

116 
X509V3_EXT_R2I
 
r2i
;

118 *
u§_d©a
;

121 
	sX509V3_CONF_METHOD_°
 {

122 * (*
gë_°rög
)(*
db
, *
£˘i⁄
, *
vÆue
);

123 
STACK_OF
(
CONF_VALUE
Ë* (*
gë_£˘i⁄
)(*
db
, *
£˘i⁄
);

124 (*
‰ì_°rög
)(*
db
, * 
°rög
);

125 (*
‰ì_£˘i⁄
)(*
db
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

126 } 
	tX509V3_CONF_METHOD
;

129 
	sv3_ext_˘x
 {

130 
	#CTX_TEST
 0x1

	)

131 
Êags
;

132 
X509
 *
issuî_˚π
;

133 
X509
 *
subje˘_˚π
;

134 
X509_REQ
 *
subje˘_ªq
;

135 
X509_CRL
 *
¸l
;

136 
X509V3_CONF_METHOD
 *
db_mëh
;

137 *
db
;

141 
v3_ext_mëhod
 
	tX509V3_EXT_METHOD
;

143 
DECLARE_STACK_OF
(
X509V3_EXT_METHOD
)

146 
	#X509V3_EXT_DYNAMIC
 0x1

	)

147 
	#X509V3_EXT_CTX_DEP
 0x2

	)

148 
	#X509V3_EXT_MULTILINE
 0x4

	)

150 
BIT_STRING_BITNAME
 
	tENUMERATED_NAMES
;

152 
	sBASIC_CONSTRAINTS_°
 {

153 
ˇ
;

154 
ASN1_INTEGER
 *
∑thÀn
;

155 } 
	tBASIC_CONSTRAINTS
;

158 
	sPKEY_USAGE_PERIOD_°
 {

159 
ASN1_GENERALIZEDTIME
 *
nŸBef‹e
;

160 
ASN1_GENERALIZEDTIME
 *
nŸA·î
;

161 } 
	tPKEY_USAGE_PERIOD
;

163 
	sŸhîName_°
 {

164 
ASN1_OBJECT
 *
ty≥_id
;

165 
ASN1_TYPE
 *
vÆue
;

166 } 
	tOTHERNAME
;

168 
	sEDIP¨tyName_°
 {

169 
ASN1_STRING
 *
«meAssig√r
;

170 
ASN1_STRING
 *
∑πyName
;

171 } 
	tEDIPARTYNAME
;

173 
	sGENERAL_NAME_°
 {

175 
	#GEN_OTHERNAME
 0

	)

176 
	#GEN_EMAIL
 1

	)

177 
	#GEN_DNS
 2

	)

178 
	#GEN_X400
 3

	)

179 
	#GEN_DIRNAME
 4

	)

180 
	#GEN_EDIPARTY
 5

	)

181 
	#GEN_URI
 6

	)

182 
	#GEN_IPADD
 7

	)

183 
	#GEN_RID
 8

	)

185 
ty≥
;

187 *
±r
;

188 
OTHERNAME
 *
ŸhîName
;

189 
ASN1_IA5STRING
 *
rfc822Name
;

190 
ASN1_IA5STRING
 *
dNSName
;

191 
ASN1_TYPE
 *
x400Addªss
;

192 
X509_NAME
 *
dúe˘‹yName
;

193 
EDIPARTYNAME
 *
ediP¨tyName
;

194 
ASN1_IA5STRING
 *
unif‹mResour˚Idítifõr
;

195 
ASN1_OCTET_STRING
 *
iPAddªss
;

196 
ASN1_OBJECT
 *
ªgi°îedID
;

199 
ASN1_OCTET_STRING
 *
ù
;

200 
X509_NAME
 *
dún
;

201 
ASN1_IA5STRING
 *
ü5
;

202 
ASN1_OBJECT
 *
rid
;

203 
ASN1_TYPE
 *
Ÿhî
;

204 } 
d
;

205 } 
	tGENERAL_NAME
;

207 
STACK_OF
(
	tGENERAL_NAME
Ë
	tGENERAL_NAMES
;

209 
	sACCESS_DESCRIPTION_°
 {

210 
ASN1_OBJECT
 *
mëhod
;

211 
GENERAL_NAME
 *
loˇti⁄
;

212 } 
	tACCESS_DESCRIPTION
;

214 
STACK_OF
(
	tACCESS_DESCRIPTION
Ë
	tAUTHORITY_INFO_ACCESS
;

216 
STACK_OF
(
	tASN1_OBJECT
Ë
	tEXTENDED_KEY_USAGE
;

218 
DECLARE_STACK_OF
(
GENERAL_NAME
)

219 
DECLARE_ASN1_SET_OF
(
GENERAL_NAME
)

221 
DECLARE_STACK_OF
(
ACCESS_DESCRIPTION
)

222 
DECLARE_ASN1_SET_OF
(
ACCESS_DESCRIPTION
)

224 
	sDIST_POINT_NAME_°
 {

225 
ty≥
;

227 
GENERAL_NAMES
 *
fuŒ«me
;

228 
STACK_OF
(
X509_NAME_ENTRY
Ë*
ªœtivíame
;

229 } 
«me
;

231 
X509_NAME
 *
d≤ame
;

232 } 
	tDIST_POINT_NAME
;

234 
	#CRLDP_ALL_REASONS
 0x807f

	)

236 
	#CRL_REASON_NONE
 -1

	)

237 
	#CRL_REASON_UNSPECIFIED
 0

	)

238 
	#CRL_REASON_KEY_COMPROMISE
 1

	)

239 
	#CRL_REASON_CA_COMPROMISE
 2

	)

240 
	#CRL_REASON_AFFILIATION_CHANGED
 3

	)

241 
	#CRL_REASON_SUPERSEDED
 4

	)

242 
	#CRL_REASON_CESSATION_OF_OPERATION
 5

	)

243 
	#CRL_REASON_CERTIFICATE_HOLD
 6

	)

244 
	#CRL_REASON_REMOVE_FROM_CRL
 8

	)

245 
	#CRL_REASON_PRIVILEGE_WITHDRAWN
 9

	)

246 
	#CRL_REASON_AA_COMPROMISE
 10

	)

248 
	sDIST_POINT_°
 {

249 
DIST_POINT_NAME
 *
di°poöt
;

250 
ASN1_BIT_STRING
 *
ªas⁄s
;

251 
GENERAL_NAMES
 *
CRLissuî
;

252 
dp_ªas⁄s
;

255 
STACK_OF
(
	tDIST_POINT
Ë
	tCRL_DIST_POINTS
;

257 
DECLARE_STACK_OF
(
DIST_POINT
)

258 
DECLARE_ASN1_SET_OF
(
DIST_POINT
)

260 
	sAUTHORITY_KEYID_°
 {

261 
ASN1_OCTET_STRING
 *
keyid
;

262 
GENERAL_NAMES
 *
issuî
;

263 
ASN1_INTEGER
 *
£rül
;

268 
	sSXNET_ID_°
 {

269 
ASN1_INTEGER
 *
z⁄e
;

270 
ASN1_OCTET_STRING
 *
u£r
;

271 } 
	tSXNETID
;

273 
DECLARE_STACK_OF
(
SXNETID
)

274 
DECLARE_ASN1_SET_OF
(
SXNETID
)

276 
	sSXNET_°
 {

277 
ASN1_INTEGER
 *
vîsi⁄
;

278 
STACK_OF
(
SXNETID
Ë*
ids
;

279 } 
	tSXNET
;

281 
	sNOTICEREF_°
 {

282 
ASN1_STRING
 *
‹g™iz©i⁄
;

283 
STACK_OF
(
ASN1_INTEGER
Ë*
nŸi˚nos
;

284 } 
	tNOTICEREF
;

286 
	sUSERNOTICE_°
 {

287 
NOTICEREF
 *
nŸi˚ªf
;

288 
ASN1_STRING
 *
ex±ext
;

289 } 
	tUSERNOTICE
;

291 
	sPOLICYQUALINFO_°
 {

292 
ASN1_OBJECT
 *
pquÆid
;

294 
ASN1_IA5STRING
 *
˝suri
;

295 
USERNOTICE
 *
u£∫Ÿi˚
;

296 
ASN1_TYPE
 *
Ÿhî
;

297 } 
d
;

298 } 
	tPOLICYQUALINFO
;

300 
DECLARE_STACK_OF
(
POLICYQUALINFO
)

301 
DECLARE_ASN1_SET_OF
(
POLICYQUALINFO
)

303 
	sPOLICYINFO_°
 {

304 
ASN1_OBJECT
 *
pﬁicyid
;

305 
STACK_OF
(
POLICYQUALINFO
Ë*
quÆifõrs
;

306 } 
	tPOLICYINFO
;

308 
STACK_OF
(
	tPOLICYINFO
Ë
	tCERTIFICATEPOLICIES
;

310 
DECLARE_STACK_OF
(
POLICYINFO
)

311 
DECLARE_ASN1_SET_OF
(
POLICYINFO
)

313 
	sPOLICY_MAPPING_°
 {

314 
ASN1_OBJECT
 *
issuîDomaöPﬁicy
;

315 
ASN1_OBJECT
 *
subje˘DomaöPﬁicy
;

316 } 
	tPOLICY_MAPPING
;

318 
DECLARE_STACK_OF
(
POLICY_MAPPING
)

320 
STACK_OF
(
	tPOLICY_MAPPING
Ë
	tPOLICY_MAPPINGS
;

322 
	sGENERAL_SUBTREE_°
 {

323 
GENERAL_NAME
 *
ba£
;

324 
ASN1_INTEGER
 *
möimum
;

325 
ASN1_INTEGER
 *
maximum
;

326 } 
	tGENERAL_SUBTREE
;

328 
DECLARE_STACK_OF
(
GENERAL_SUBTREE
)

330 
	sNAME_CONSTRAINTS_°
 {

331 
STACK_OF
(
GENERAL_SUBTREE
Ë*
≥rmôãdSubåìs
;

332 
STACK_OF
(
GENERAL_SUBTREE
Ë*
ex˛udedSubåìs
;

335 
	sPOLICY_CONSTRAINTS_°
 {

336 
ASN1_INTEGER
 *
ªquúeEx∂icôPﬁicy
;

337 
ASN1_INTEGER
 *
öhibôPﬁicyM≠pög
;

338 } 
	tPOLICY_CONSTRAINTS
;

341 
	sPROXY_POLICY_°


343 
ASN1_OBJECT
 *
pﬁicyL™guage
;

344 
ASN1_OCTET_STRING
 *
pﬁicy
;

345 } 
	tPROXY_POLICY
;

347 
	sPROXY_CERT_INFO_EXTENSION_°


349 
ASN1_INTEGER
 *
pcP©hLígthC⁄°øöt
;

350 
PROXY_POLICY
 *
¥oxyPﬁicy
;

351 } 
	tPROXY_CERT_INFO_EXTENSION
;

353 
DECLARE_ASN1_FUNCTIONS
(
PROXY_POLICY
)

354 
DECLARE_ASN1_FUNCTIONS
(
PROXY_CERT_INFO_EXTENSION
)

356 
	sISSUING_DIST_POINT_°


358 
DIST_POINT_NAME
 *
di°poöt
;

359 
⁄lyu£r
;

360 
⁄lyCA
;

361 
ASN1_BIT_STRING
 *
⁄lysomîós⁄s
;

362 
ödúe˘CRL
;

363 
⁄ly©å
;

368 
	#IDP_PRESENT
 0x1

	)

370 
	#IDP_INVALID
 0x2

	)

372 
	#IDP_ONLYUSER
 0x4

	)

374 
	#IDP_ONLYCA
 0x8

	)

376 
	#IDP_ONLYATTR
 0x10

	)

378 
	#IDP_INDIRECT
 0x20

	)

380 
	#IDP_REASONS
 0x40

	)

382 
	#X509V3_c⁄f_îr
(
vÆ
Ë
	`ERR_add_îr‹_d©a
(6, "£˘i⁄:", vÆ->
£˘i⁄
, \

383 ",«me:", 
vÆ
->
«me
, ",vÆue:", vÆ->
vÆue
);

	)

385 
	#X509V3_£t_˘x_ã°
(
˘x
) \

386 
	`X509V3_£t_˘x
(
˘x
, 
NULL
, NULL, NULL, NULL, 
CTX_TEST
)

	)

387 
	#X509V3_£t_˘x_nodb
(
˘x
Ë(˘x)->
db
 = 
NULL
;

	)

389 
	#EXT_BITSTRING
(
nid
, 
èbÀ
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_BIT_STRING
), \

392 (
X509V3_EXT_I2V
)
i2v_ASN1_BIT_STRING
, \

393 (
X509V3_EXT_V2I
)
v2i_ASN1_BIT_STRING
, \

394 
NULL
, NULL, \

395 
èbÀ
}

	)

397 
	#EXT_IA5STRING
(
nid
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_IA5STRING
), \

399 (
X509V3_EXT_I2S
)
i2s_ASN1_IA5STRING
, \

400 (
X509V3_EXT_S2I
)
s2i_ASN1_IA5STRING
, \

402 
NULL
}

	)

404 
	#EXT_END
 { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	)

409 
	#EXFLAG_BCONS
 0x1

	)

410 
	#EXFLAG_KUSAGE
 0x2

	)

411 
	#EXFLAG_XKUSAGE
 0x4

	)

412 
	#EXFLAG_NSCERT
 0x8

	)

414 
	#EXFLAG_CA
 0x10

	)

416 
	#EXFLAG_SI
 0x20

	)

417 
	#EXFLAG_SS
 0x20

	)

418 
	#EXFLAG_V1
 0x40

	)

419 
	#EXFLAG_INVALID
 0x80

	)

420 
	#EXFLAG_SET
 0x100

	)

421 
	#EXFLAG_CRITICAL
 0x200

	)

422 
	#EXFLAG_PROXY
 0x400

	)

424 
	#EXFLAG_INVALID_POLICY
 0x800

	)

425 
	#EXFLAG_FRESHEST
 0x1000

	)

427 
	#KU_DIGITAL_SIGNATURE
 0x0080

	)

428 
	#KU_NON_REPUDIATION
 0x0040

	)

429 
	#KU_KEY_ENCIPHERMENT
 0x0020

	)

430 
	#KU_DATA_ENCIPHERMENT
 0x0010

	)

431 
	#KU_KEY_AGREEMENT
 0x0008

	)

432 
	#KU_KEY_CERT_SIGN
 0x0004

	)

433 
	#KU_CRL_SIGN
 0x0002

	)

434 
	#KU_ENCIPHER_ONLY
 0x0001

	)

435 
	#KU_DECIPHER_ONLY
 0x8000

	)

437 
	#NS_SSL_CLIENT
 0x80

	)

438 
	#NS_SSL_SERVER
 0x40

	)

439 
	#NS_SMIME
 0x20

	)

440 
	#NS_OBJSIGN
 0x10

	)

441 
	#NS_SSL_CA
 0x04

	)

442 
	#NS_SMIME_CA
 0x02

	)

443 
	#NS_OBJSIGN_CA
 0x01

	)

444 
	#NS_ANY_CA
 (
NS_SSL_CA
|
NS_SMIME_CA
|
NS_OBJSIGN_CA
)

	)

446 
	#XKU_SSL_SERVER
 0x1

	)

447 
	#XKU_SSL_CLIENT
 0x2

	)

448 
	#XKU_SMIME
 0x4

	)

449 
	#XKU_CODE_SIGN
 0x8

	)

450 
	#XKU_SGC
 0x10

	)

451 
	#XKU_OCSP_SIGN
 0x20

	)

452 
	#XKU_TIMESTAMP
 0x40

	)

453 
	#XKU_DVCS
 0x80

	)

455 
	#X509_PURPOSE_DYNAMIC
 0x1

	)

456 
	#X509_PURPOSE_DYNAMIC_NAME
 0x2

	)

458 
	sx509_puΩo£_°
 {

459 
puΩo£
;

460 
åu°
;

461 
Êags
;

462 (*
check_puΩo£
)(c⁄° 
x509_puΩo£_°
 *,

463 c⁄° 
X509
 *, );

464 *
«me
;

465 *
¢ame
;

466 *
u§_d©a
;

467 } 
	tX509_PURPOSE
;

469 
	#X509_PURPOSE_SSL_CLIENT
 1

	)

470 
	#X509_PURPOSE_SSL_SERVER
 2

	)

471 
	#X509_PURPOSE_NS_SSL_SERVER
 3

	)

472 
	#X509_PURPOSE_SMIME_SIGN
 4

	)

473 
	#X509_PURPOSE_SMIME_ENCRYPT
 5

	)

474 
	#X509_PURPOSE_CRL_SIGN
 6

	)

475 
	#X509_PURPOSE_ANY
 7

	)

476 
	#X509_PURPOSE_OCSP_HELPER
 8

	)

477 
	#X509_PURPOSE_TIMESTAMP_SIGN
 9

	)

479 
	#X509_PURPOSE_MIN
 1

	)

480 
	#X509_PURPOSE_MAX
 9

	)

484 
	#X509V3_EXT_UNKNOWN_MASK
 (0xfL << 16)

	)

486 
	#X509V3_EXT_DEFAULT
 0

	)

488 
	#X509V3_EXT_ERROR_UNKNOWN
 (1L << 16)

	)

490 
	#X509V3_EXT_PARSE_UNKNOWN
 (2L << 16)

	)

492 
	#X509V3_EXT_DUMP_UNKNOWN
 (3L << 16)

	)

496 
	#X509V3_ADD_OP_MASK
 0xfL

	)

497 
	#X509V3_ADD_DEFAULT
 0L

	)

498 
	#X509V3_ADD_APPEND
 1L

	)

499 
	#X509V3_ADD_REPLACE
 2L

	)

500 
	#X509V3_ADD_REPLACE_EXISTING
 3L

	)

501 
	#X509V3_ADD_KEEP_EXISTING
 4L

	)

502 
	#X509V3_ADD_DELETE
 5L

	)

503 
	#X509V3_ADD_SILENT
 0x10

	)

505 
DECLARE_STACK_OF
(
X509_PURPOSE
)

507 
DECLARE_ASN1_FUNCTIONS
(
BASIC_CONSTRAINTS
)

509 
DECLARE_ASN1_FUNCTIONS
(
SXNET
)

510 
DECLARE_ASN1_FUNCTIONS
(
SXNETID
)

512 
SXNET_add_id_asc
(
SXNET
 **
psx
, *
z⁄e
, *
u£r
, 
u£æí
);

513 
SXNET_add_id_ul⁄g
(
SXNET
 **
psx
, 
lz⁄e
, *
u£r
, 
u£æí
);

514 
SXNET_add_id_INTEGER
(
SXNET
 **
psx
, 
ASN1_INTEGER
 *
iz⁄e
, *
u£r
, 
u£æí
);

516 
ASN1_OCTET_STRING
 *
SXNET_gë_id_asc
(
SXNET
 *
sx
, *
z⁄e
);

517 
ASN1_OCTET_STRING
 *
SXNET_gë_id_ul⁄g
(
SXNET
 *
sx
, 
lz⁄e
);

518 
ASN1_OCTET_STRING
 *
SXNET_gë_id_INTEGER
(
SXNET
 *
sx
, 
ASN1_INTEGER
 *
z⁄e
);

520 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_KEYID
)

522 
DECLARE_ASN1_FUNCTIONS
(
PKEY_USAGE_PERIOD
)

524 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAME
)

525 
GENERAL_NAME
 *
GENERAL_NAME_dup
(GENERAL_NAME *
a
);

526 
GENERAL_NAME_cmp
(
GENERAL_NAME
 *
a
, GENERAL_NAME *
b
);

530 
ASN1_BIT_STRING
 *
v2i_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

531 
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

532 
STACK_OF
(
CONF_VALUE
Ë*
i2v_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

533 
ASN1_BIT_STRING
 *
bôs
,

534 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

536 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAME
(
X509V3_EXT_METHOD
 *
mëhod
, 
GENERAL_NAME
 *
gí
, STACK_OF(CONF_VALUEË*
ªt
);

537 
GENERAL_NAME_¥öt
(
BIO
 *
out
, 
GENERAL_NAME
 *
gí
);

539 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAMES
)

541 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAMES
(
X509V3_EXT_METHOD
 *
mëhod
,

542 
GENERAL_NAMES
 *
gí
, 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

543 
GENERAL_NAMES
 *
v2i_GENERAL_NAMES
(c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

544 
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

546 
DECLARE_ASN1_FUNCTIONS
(
OTHERNAME
)

547 
DECLARE_ASN1_FUNCTIONS
(
EDIPARTYNAME
)

548 
OTHERNAME_cmp
(
OTHERNAME
 *
a
, OTHERNAME *
b
);

549 
GENERAL_NAME_£t0_vÆue
(
GENERAL_NAME
 *
a
, 
ty≥
, *
vÆue
);

550 *
GENERAL_NAME_gë0_vÆue
(
GENERAL_NAME
 *
a
, *
±y≥
);

551 
GENERAL_NAME_£t0_Ÿhî«me
(
GENERAL_NAME
 *
gí
,

552 
ASN1_OBJECT
 *
oid
, 
ASN1_TYPE
 *
vÆue
);

553 
GENERAL_NAME_gë0_ŸhîName
(
GENERAL_NAME
 *
gí
,

554 
ASN1_OBJECT
 **
poid
, 
ASN1_TYPE
 **
pvÆue
);

556 *
i2s_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
, 
ASN1_OCTET_STRING
 *
ü5
);

557 
ASN1_OCTET_STRING
 *
s2i_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
, 
X509V3_CTX
 *
˘x
, *
°r
);

559 
DECLARE_ASN1_FUNCTIONS
(
EXTENDED_KEY_USAGE
)

560 
i2a_ACCESS_DESCRIPTION
(
BIO
 *
bp
, 
ACCESS_DESCRIPTION
* 
a
);

562 
DECLARE_ASN1_FUNCTIONS
(
CERTIFICATEPOLICIES
)

563 
DECLARE_ASN1_FUNCTIONS
(
POLICYINFO
)

564 
DECLARE_ASN1_FUNCTIONS
(
POLICYQUALINFO
)

565 
DECLARE_ASN1_FUNCTIONS
(
USERNOTICE
)

566 
DECLARE_ASN1_FUNCTIONS
(
NOTICEREF
)

568 
DECLARE_ASN1_FUNCTIONS
(
CRL_DIST_POINTS
)

569 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT
)

570 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT_NAME
)

571 
DECLARE_ASN1_FUNCTIONS
(
ISSUING_DIST_POINT
)

573 
DIST_POINT_£t_d≤ame
(
DIST_POINT_NAME
 *
d≤
, 
X509_NAME
 *
öame
);

575 
NAME_CONSTRAINTS_check
(
X509
 *
x
, 
NAME_CONSTRAINTS
 *
nc
);

577 
DECLARE_ASN1_FUNCTIONS
(
ACCESS_DESCRIPTION
)

578 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_INFO_ACCESS
)

580 
DECLARE_ASN1_ITEM
(
POLICY_MAPPING
)

581 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_MAPPING
)

582 
DECLARE_ASN1_ITEM
(
POLICY_MAPPINGS
)

584 
DECLARE_ASN1_ITEM
(
GENERAL_SUBTREE
)

585 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
GENERAL_SUBTREE
)

587 
DECLARE_ASN1_ITEM
(
NAME_CONSTRAINTS
)

588 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
NAME_CONSTRAINTS
)

590 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_CONSTRAINTS
)

591 
DECLARE_ASN1_ITEM
(
POLICY_CONSTRAINTS
)

593 
GENERAL_NAME
 *
a2i_GENERAL_NAME
(GENERAL_NAME *
out
,

594 c⁄° 
X509V3_EXT_METHOD
 *
mëhod
, 
X509V3_CTX
 *
˘x
,

595 
gí_ty≥
, *
vÆue
, 
is_nc
);

597 #ifde‡
HEADER_CONF_H


598 
GENERAL_NAME
 *
v2i_GENERAL_NAME
(c⁄° 
X509V3_EXT_METHOD
 *
mëhod
, 
X509V3_CTX
 *
˘x
,

599 
CONF_VALUE
 *
˙f
);

600 
GENERAL_NAME
 *
v2i_GENERAL_NAME_ex
(GENERAL_NAME *
out
,

601 c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

602 
X509V3_CTX
 *
˘x
, 
CONF_VALUE
 *
˙f
, 
is_nc
);

603 
X509V3_c⁄f_‰ì
(
CONF_VALUE
 *
vÆ
);

605 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f_nid
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, 
ext_nid
, *
vÆue
);

606 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
«me
, *
vÆue
);

607 
X509V3_EXT_add_nc⁄f_sk
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
STACK_OF
(
X509_EXTENSION
Ë**
sk
);

608 
X509V3_EXT_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509
 *
˚π
);

609 
X509V3_EXT_REQ_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509_REQ
 *
ªq
);

610 
X509V3_EXT_CRL_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509_CRL
 *
¸l
);

612 
X509_EXTENSION
 *
X509V3_EXT_c⁄f_nid
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

613 
ext_nid
, *
vÆue
);

614 
X509_EXTENSION
 *
X509V3_EXT_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

615 *
«me
, *
vÆue
);

616 
X509V3_EXT_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

617 *
£˘i⁄
, 
X509
 *
˚π
);

618 
X509V3_EXT_REQ_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

619 *
£˘i⁄
, 
X509_REQ
 *
ªq
);

620 
X509V3_EXT_CRL_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

621 *
£˘i⁄
, 
X509_CRL
 *
¸l
);

623 
X509V3_add_vÆue_boﬁ_nf
(*
«me
, 
a¢1_boﬁ
,

624 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

625 
X509V3_gë_vÆue_boﬁ
(
CONF_VALUE
 *
vÆue
, *
a¢1_boﬁ
);

626 
X509V3_gë_vÆue_öt
(
CONF_VALUE
 *
vÆue
, 
ASN1_INTEGER
 **
aöt
);

627 
X509V3_£t_nc⁄f
(
X509V3_CTX
 *
˘x
, 
CONF
 *
c⁄f
);

628 
X509V3_£t_c⁄f_lhash
(
X509V3_CTX
 *
˘x
, 
LHASH_OF
(
CONF_VALUE
Ë*
lhash
);

631 * 
X509V3_gë_°rög
(
X509V3_CTX
 *
˘x
, *
«me
, *
£˘i⁄
);

632 
STACK_OF
(
CONF_VALUE
Ë* 
X509V3_gë_£˘i⁄
(
X509V3_CTX
 *
˘x
, *
£˘i⁄
);

633 
X509V3_°rög_‰ì
(
X509V3_CTX
 *
˘x
, *
°r
);

634 
X509V3_£˘i⁄_‰ì
–
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

635 
X509V3_£t_˘x
(
X509V3_CTX
 *
˘x
, 
X509
 *
issuî
, X509 *
subje˘
,

636 
X509_REQ
 *
ªq
, 
X509_CRL
 *
¸l
, 
Êags
);

638 
X509V3_add_vÆue
(c⁄° *
«me
, c⁄° *
vÆue
,

639 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

640 
X509V3_add_vÆue_uch¨
(c⁄° *
«me
, c⁄° *
vÆue
,

641 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

642 
X509V3_add_vÆue_boﬁ
(c⁄° *
«me
, 
a¢1_boﬁ
,

643 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

644 
X509V3_add_vÆue_öt
(c⁄° *
«me
, 
ASN1_INTEGER
 *
aöt
,

645 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

646 * 
i2s_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_INTEGER
 *
aöt
);

647 
ASN1_INTEGER
 * 
s2i_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, *
vÆue
);

648 * 
i2s_ASN1_ENUMERATED
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_ENUMERATED
 *
aöt
);

649 * 
i2s_ASN1_ENUMERATED_TABLE
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_ENUMERATED
 *
aöt
);

650 
X509V3_EXT_add
(
X509V3_EXT_METHOD
 *
ext
);

651 
X509V3_EXT_add_li°
(
X509V3_EXT_METHOD
 *
exéi°
);

652 
X509V3_EXT_add_Æüs
(
nid_to
, 
nid_‰om
);

653 
X509V3_EXT_˛ónup
();

655 c⁄° 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë
(
X509_EXTENSION
 *
ext
);

656 c⁄° 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë_nid
(
nid
);

657 
X509V3_add_°™d¨d_exãnsi⁄s
();

658 
STACK_OF
(
CONF_VALUE
Ë*
X509V3_∑r£_li°
(c⁄° *
löe
);

659 *
X509V3_EXT_d2i
(
X509_EXTENSION
 *
ext
);

660 *
X509V3_gë_d2i
(
STACK_OF
(
X509_EXTENSION
Ë*
x
, 
nid
, *
¸ô
, *
idx
);

663 
X509_EXTENSION
 *
X509V3_EXT_i2d
(
ext_nid
, 
¸ô
, *
ext_°ruc
);

664 
X509V3_add1_i2d
(
STACK_OF
(
X509_EXTENSION
Ë**
x
, 
nid
, *
vÆue
, 
¸ô
, 
Êags
);

666 *
hex_to_°rög
(c⁄° *
buf„r
, 
Àn
);

667 *
°rög_to_hex
(c⁄° *
°r
, *
Àn
);

668 
«me_cmp
(c⁄° *
«me
, c⁄° *
cmp
);

670 
X509V3_EXT_vÆ_¥n
(
BIO
 *
out
, 
STACK_OF
(
CONF_VALUE
Ë*
vÆ
, 
ödít
,

671 
ml
);

672 
X509V3_EXT_¥öt
(
BIO
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
, 
ödít
);

673 
X509V3_EXT_¥öt_Â
(
FILE
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
, 
ödít
);

675 
X509V3_exãnsi⁄s_¥öt
(
BIO
 *
out
, *
tôÀ
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
, 
Êag
, 
ödít
);

677 
X509_check_ˇ
(
X509
 *
x
);

678 
X509_check_puΩo£
(
X509
 *
x
, 
id
, 
ˇ
);

679 
X509_suµ‹ãd_exãnsi⁄
(
X509_EXTENSION
 *
ex
);

680 
X509_PURPOSE_£t
(*
p
, 
puΩo£
);

681 
X509_check_issued
(
X509
 *
issuî
, X509 *
subje˘
);

682 
X509_check_akid
(
X509
 *
issuî
, 
AUTHORITY_KEYID
 *
akid
);

683 
X509_PURPOSE_gë_cou¡
();

684 
X509_PURPOSE
 * 
X509_PURPOSE_gë0
(
idx
);

685 
X509_PURPOSE_gë_by_¢ame
(*
¢ame
);

686 
X509_PURPOSE_gë_by_id
(
id
);

687 
X509_PURPOSE_add
(
id
, 
åu°
, 
Êags
,

688 (*
ck
)(c⁄° 
X509_PURPOSE
 *, c⁄° 
X509
 *, ),

689 *
«me
, *
¢ame
, *
¨g
);

690 *
X509_PURPOSE_gë0_«me
(
X509_PURPOSE
 *
xp
);

691 *
X509_PURPOSE_gë0_¢ame
(
X509_PURPOSE
 *
xp
);

692 
X509_PURPOSE_gë_åu°
(
X509_PURPOSE
 *
xp
);

693 
X509_PURPOSE_˛ónup
();

694 
X509_PURPOSE_gë_id
(
X509_PURPOSE
 *);

696 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_gë1_emaû
(
X509
 *
x
);

697 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_REQ_gë1_emaû
(
X509_REQ
 *
x
);

698 
X509_emaû_‰ì
(
STACK_OF
(
OPENSSL_STRING
Ë*
sk
);

699 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_gë1_oc•
(
X509
 *
x
);

701 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS
(c⁄° *
ùasc
);

702 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS_NC
(c⁄° *
ùasc
);

703 
a2i_ùadd
(*
ùout
, c⁄° *
ùasc
);

704 
X509V3_NAME_‰om_£˘i⁄
(
X509_NAME
 *
nm
, 
STACK_OF
(
CONF_VALUE
)*
dn_sk
,

705 
chty≥
);

707 
X509_POLICY_NODE_¥öt
(
BIO
 *
out
, 
X509_POLICY_NODE
 *
node
, 
ödít
);

708 
DECLARE_STACK_OF
(
X509_POLICY_NODE
)

710 #i‚de‡
OPENSSL_NO_RFC3779


712 
	sASR™ge_°
 {

713 
ASN1_INTEGER
 *
mö
, *
max
;

714 } 
	tASR™ge
;

716 
	#ASIdOrR™ge_id
 0

	)

717 
	#ASIdOrR™ge_ønge
 1

	)

719 
	sASIdOrR™ge_°
 {

720 
ty≥
;

722 
ASN1_INTEGER
 *
id
;

723 
ASR™ge
 *
ønge
;

724 } 
u
;

725 } 
	tASIdOrR™ge
;

727 
STACK_OF
(
	tASIdOrR™ge
Ë
	tASIdOrR™ges
;

728 
DECLARE_STACK_OF
(
ASIdOrR™ge
)

730 
	#ASIdítifõrChoi˚_öhîô
 0

	)

731 
	#ASIdítifõrChoi˚_asIdsOrR™ges
 1

	)

733 
	sASIdítifõrChoi˚_°
 {

734 
ty≥
;

736 
ASN1_NULL
 *
öhîô
;

737 
ASIdOrR™ges
 *
asIdsOrR™ges
;

738 } 
u
;

739 } 
	tASIdítifõrChoi˚
;

741 
	sASIdítifõrs_°
 {

742 
ASIdítifõrChoi˚
 *
a¢um
, *
rdi
;

743 } 
	tASIdítifõrs
;

745 
DECLARE_ASN1_FUNCTIONS
(
ASR™ge
)

746 
DECLARE_ASN1_FUNCTIONS
(
ASIdOrR™ge
)

747 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrChoi˚
)

748 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrs
)

751 
	sIPAddªssR™ge_°
 {

752 
ASN1_BIT_STRING
 *
mö
, *
max
;

753 } 
	tIPAddªssR™ge
;

755 
	#IPAddªssOrR™ge_addªssPªfix
 0

	)

756 
	#IPAddªssOrR™ge_addªssR™ge
 1

	)

758 
	sIPAddªssOrR™ge_°
 {

759 
ty≥
;

761 
ASN1_BIT_STRING
 *
addªssPªfix
;

762 
IPAddªssR™ge
 *
addªssR™ge
;

763 } 
u
;

764 } 
	tIPAddªssOrR™ge
;

766 
STACK_OF
(
	tIPAddªssOrR™ge
Ë
	tIPAddªssOrR™ges
;

767 
DECLARE_STACK_OF
(
IPAddªssOrR™ge
)

769 
	#IPAddªssChoi˚_öhîô
 0

	)

770 
	#IPAddªssChoi˚_addªs£sOrR™ges
 1

	)

772 
	sIPAddªssChoi˚_°
 {

773 
ty≥
;

775 
ASN1_NULL
 *
öhîô
;

776 
IPAddªssOrR™ges
 *
addªs£sOrR™ges
;

777 } 
u
;

778 } 
	tIPAddªssChoi˚
;

780 
	sIPAddªssFamûy_°
 {

781 
ASN1_OCTET_STRING
 *
addªssFamûy
;

782 
IPAddªssChoi˚
 *
ùAddªssChoi˚
;

783 } 
	tIPAddªssFamûy
;

785 
STACK_OF
(
	tIPAddªssFamûy
Ë
	tIPAddrBlocks
;

786 
DECLARE_STACK_OF
(
IPAddªssFamûy
)

788 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssR™ge
)

789 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssOrR™ge
)

790 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssChoi˚
)

791 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssFamûy
)

796 
	#V3_ASID_ASNUM
 0

	)

797 
	#V3_ASID_RDI
 1

	)

805 
	#IANA_AFI_IPV4
 1

	)

806 
	#IANA_AFI_IPV6
 2

	)

813 
v3_asid_add_öhîô
(
ASIdítifõrs
 *
asid
, 
which
);

814 
v3_asid_add_id_‹_ønge
(
ASIdítifõrs
 *
asid
, 
which
,

815 
ASN1_INTEGER
 *
mö
, ASN1_INTEGER *
max
);

816 
v3_addr_add_öhîô
(
IPAddrBlocks
 *
addr
,

817 c⁄° 
afi
, c⁄° *
ßfi
);

818 
v3_addr_add_¥efix
(
IPAddrBlocks
 *
addr
,

819 c⁄° 
afi
, c⁄° *
ßfi
,

820 *
a
, c⁄° 
¥efixÀn
);

821 
v3_addr_add_ønge
(
IPAddrBlocks
 *
addr
,

822 c⁄° 
afi
, c⁄° *
ßfi
,

823 *
mö
, *
max
);

824 
v3_addr_gë_afi
(c⁄° 
IPAddªssFamûy
 *
f
);

825 
v3_addr_gë_ønge
(
IPAddªssOrR™ge
 *
a‹
, c⁄° 
afi
,

826 *
mö
, *
max
,

827 c⁄° 
Àngth
);

832 
v3_asid_is_ˇn⁄iˇl
(
ASIdítifõrs
 *
asid
);

833 
v3_addr_is_ˇn⁄iˇl
(
IPAddrBlocks
 *
addr
);

834 
v3_asid_ˇn⁄ize
(
ASIdítifõrs
 *
asid
);

835 
v3_addr_ˇn⁄ize
(
IPAddrBlocks
 *
addr
);

840 
v3_asid_öhîôs
(
ASIdítifõrs
 *
asid
);

841 
v3_addr_öhîôs
(
IPAddrBlocks
 *
addr
);

842 
v3_asid_sub£t
(
ASIdítifõrs
 *
a
, ASIdítifõr†*
b
);

843 
v3_addr_sub£t
(
IPAddrBlocks
 *
a
, IPAddrBlock†*
b
);

848 
v3_asid_vÆid©e_∑th
(
X509_STORE_CTX
 *);

849 
v3_addr_vÆid©e_∑th
(
X509_STORE_CTX
 *);

850 
v3_asid_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

851 
ASIdítifõrs
 *
ext
,

852 
Ælow_öhîô™˚
);

853 
v3_addr_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

854 
IPAddrBlocks
 *
ext
,

855 
Ælow_öhîô™˚
);

863 
ERR_lﬂd_X509V3_°rögs
();

868 
	#X509V3_F_A2I_GENERAL_NAME
 164

	)

869 
	#X509V3_F_ASIDENTIFIERCHOICE_CANONIZE
 161

	)

870 
	#X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL
 162

	)

871 
	#X509V3_F_COPY_EMAIL
 122

	)

872 
	#X509V3_F_COPY_ISSUER
 123

	)

873 
	#X509V3_F_DO_DIRNAME
 144

	)

874 
	#X509V3_F_DO_EXT_CONF
 124

	)

875 
	#X509V3_F_DO_EXT_I2D
 135

	)

876 
	#X509V3_F_DO_EXT_NCONF
 151

	)

877 
	#X509V3_F_DO_I2V_NAME_CONSTRAINTS
 148

	)

878 
	#X509V3_F_GNAMES_FROM_SECTNAME
 156

	)

879 
	#X509V3_F_HEX_TO_STRING
 111

	)

880 
	#X509V3_F_I2S_ASN1_ENUMERATED
 121

	)

881 
	#X509V3_F_I2S_ASN1_IA5STRING
 149

	)

882 
	#X509V3_F_I2S_ASN1_INTEGER
 120

	)

883 
	#X509V3_F_I2V_AUTHORITY_INFO_ACCESS
 138

	)

884 
	#X509V3_F_NOTICE_SECTION
 132

	)

885 
	#X509V3_F_NREF_NOS
 133

	)

886 
	#X509V3_F_POLICY_SECTION
 131

	)

887 
	#X509V3_F_PROCESS_PCI_VALUE
 150

	)

888 
	#X509V3_F_R2I_CERTPOL
 130

	)

889 
	#X509V3_F_R2I_PCI
 155

	)

890 
	#X509V3_F_S2I_ASN1_IA5STRING
 100

	)

891 
	#X509V3_F_S2I_ASN1_INTEGER
 108

	)

892 
	#X509V3_F_S2I_ASN1_OCTET_STRING
 112

	)

893 
	#X509V3_F_S2I_ASN1_SKEY_ID
 114

	)

894 
	#X509V3_F_S2I_SKEY_ID
 115

	)

895 
	#X509V3_F_SET_DIST_POINT_NAME
 158

	)

896 
	#X509V3_F_STRING_TO_HEX
 113

	)

897 
	#X509V3_F_SXNET_ADD_ID_ASC
 125

	)

898 
	#X509V3_F_SXNET_ADD_ID_INTEGER
 126

	)

899 
	#X509V3_F_SXNET_ADD_ID_ULONG
 127

	)

900 
	#X509V3_F_SXNET_GET_ID_ASC
 128

	)

901 
	#X509V3_F_SXNET_GET_ID_ULONG
 129

	)

902 
	#X509V3_F_V2I_ASIDENTIFIERS
 163

	)

903 
	#X509V3_F_V2I_ASN1_BIT_STRING
 101

	)

904 
	#X509V3_F_V2I_AUTHORITY_INFO_ACCESS
 139

	)

905 
	#X509V3_F_V2I_AUTHORITY_KEYID
 119

	)

906 
	#X509V3_F_V2I_BASIC_CONSTRAINTS
 102

	)

907 
	#X509V3_F_V2I_CRLD
 134

	)

908 
	#X509V3_F_V2I_EXTENDED_KEY_USAGE
 103

	)

909 
	#X509V3_F_V2I_GENERAL_NAMES
 118

	)

910 
	#X509V3_F_V2I_GENERAL_NAME_EX
 117

	)

911 
	#X509V3_F_V2I_IDP
 157

	)

912 
	#X509V3_F_V2I_IPADDRBLOCKS
 159

	)

913 
	#X509V3_F_V2I_ISSUER_ALT
 153

	)

914 
	#X509V3_F_V2I_NAME_CONSTRAINTS
 147

	)

915 
	#X509V3_F_V2I_POLICY_CONSTRAINTS
 146

	)

916 
	#X509V3_F_V2I_POLICY_MAPPINGS
 145

	)

917 
	#X509V3_F_V2I_SUBJECT_ALT
 154

	)

918 
	#X509V3_F_V3_ADDR_VALIDATE_PATH_INTERNAL
 160

	)

919 
	#X509V3_F_V3_GENERIC_EXTENSION
 116

	)

920 
	#X509V3_F_X509V3_ADD1_I2D
 140

	)

921 
	#X509V3_F_X509V3_ADD_VALUE
 105

	)

922 
	#X509V3_F_X509V3_EXT_ADD
 104

	)

923 
	#X509V3_F_X509V3_EXT_ADD_ALIAS
 106

	)

924 
	#X509V3_F_X509V3_EXT_CONF
 107

	)

925 
	#X509V3_F_X509V3_EXT_I2D
 136

	)

926 
	#X509V3_F_X509V3_EXT_NCONF
 152

	)

927 
	#X509V3_F_X509V3_GET_SECTION
 142

	)

928 
	#X509V3_F_X509V3_GET_STRING
 143

	)

929 
	#X509V3_F_X509V3_GET_VALUE_BOOL
 110

	)

930 
	#X509V3_F_X509V3_PARSE_LIST
 109

	)

931 
	#X509V3_F_X509_PURPOSE_ADD
 137

	)

932 
	#X509V3_F_X509_PURPOSE_SET
 141

	)

935 
	#X509V3_R_BAD_IP_ADDRESS
 118

	)

936 
	#X509V3_R_BAD_OBJECT
 119

	)

937 
	#X509V3_R_BN_DEC2BN_ERROR
 100

	)

938 
	#X509V3_R_BN_TO_ASN1_INTEGER_ERROR
 101

	)

939 
	#X509V3_R_DIRNAME_ERROR
 149

	)

940 
	#X509V3_R_DISTPOINT_ALREADY_SET
 160

	)

941 
	#X509V3_R_DUPLICATE_ZONE_ID
 133

	)

942 
	#X509V3_R_ERROR_CONVERTING_ZONE
 131

	)

943 
	#X509V3_R_ERROR_CREATING_EXTENSION
 144

	)

944 
	#X509V3_R_ERROR_IN_EXTENSION
 128

	)

945 
	#X509V3_R_EXPECTED_A_SECTION_NAME
 137

	)

946 
	#X509V3_R_EXTENSION_EXISTS
 145

	)

947 
	#X509V3_R_EXTENSION_NAME_ERROR
 115

	)

948 
	#X509V3_R_EXTENSION_NOT_FOUND
 102

	)

949 
	#X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED
 103

	)

950 
	#X509V3_R_EXTENSION_VALUE_ERROR
 116

	)

951 
	#X509V3_R_ILLEGAL_EMPTY_EXTENSION
 151

	)

952 
	#X509V3_R_ILLEGAL_HEX_DIGIT
 113

	)

953 
	#X509V3_R_INCORRECT_POLICY_SYNTAX_TAG
 152

	)

954 
	#X509V3_R_INVALID_MULTIPLE_RDNS
 161

	)

955 
	#X509V3_R_INVALID_ASNUMBER
 162

	)

956 
	#X509V3_R_INVALID_ASRANGE
 163

	)

957 
	#X509V3_R_INVALID_BOOLEAN_STRING
 104

	)

958 
	#X509V3_R_INVALID_EXTENSION_STRING
 105

	)

959 
	#X509V3_R_INVALID_INHERITANCE
 165

	)

960 
	#X509V3_R_INVALID_IPADDRESS
 166

	)

961 
	#X509V3_R_INVALID_NAME
 106

	)

962 
	#X509V3_R_INVALID_NULL_ARGUMENT
 107

	)

963 
	#X509V3_R_INVALID_NULL_NAME
 108

	)

964 
	#X509V3_R_INVALID_NULL_VALUE
 109

	)

965 
	#X509V3_R_INVALID_NUMBER
 140

	)

966 
	#X509V3_R_INVALID_NUMBERS
 141

	)

967 
	#X509V3_R_INVALID_OBJECT_IDENTIFIER
 110

	)

968 
	#X509V3_R_INVALID_OPTION
 138

	)

969 
	#X509V3_R_INVALID_POLICY_IDENTIFIER
 134

	)

970 
	#X509V3_R_INVALID_PROXY_POLICY_SETTING
 153

	)

971 
	#X509V3_R_INVALID_PURPOSE
 146

	)

972 
	#X509V3_R_INVALID_SAFI
 164

	)

973 
	#X509V3_R_INVALID_SECTION
 135

	)

974 
	#X509V3_R_INVALID_SYNTAX
 143

	)

975 
	#X509V3_R_ISSUER_DECODE_ERROR
 126

	)

976 
	#X509V3_R_MISSING_VALUE
 124

	)

977 
	#X509V3_R_NEED_ORGANIZATION_AND_NUMBERS
 142

	)

978 
	#X509V3_R_NO_CONFIG_DATABASE
 136

	)

979 
	#X509V3_R_NO_ISSUER_CERTIFICATE
 121

	)

980 
	#X509V3_R_NO_ISSUER_DETAILS
 127

	)

981 
	#X509V3_R_NO_POLICY_IDENTIFIER
 139

	)

982 
	#X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED
 154

	)

983 
	#X509V3_R_NO_PUBLIC_KEY
 114

	)

984 
	#X509V3_R_NO_SUBJECT_DETAILS
 125

	)

985 
	#X509V3_R_ODD_NUMBER_OF_DIGITS
 112

	)

986 
	#X509V3_R_OPERATION_NOT_DEFINED
 148

	)

987 
	#X509V3_R_OTHERNAME_ERROR
 147

	)

988 
	#X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED
 155

	)

989 
	#X509V3_R_POLICY_PATH_LENGTH
 156

	)

990 
	#X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED
 157

	)

991 
	#X509V3_R_POLICY_SYNTAX_NOT_CURRENTLY_SUPPORTED
 158

	)

992 
	#X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY
 159

	)

993 
	#X509V3_R_SECTION_NOT_FOUND
 150

	)

994 
	#X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS
 122

	)

995 
	#X509V3_R_UNABLE_TO_GET_ISSUER_KEYID
 123

	)

996 
	#X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT
 111

	)

997 
	#X509V3_R_UNKNOWN_EXTENSION
 129

	)

998 
	#X509V3_R_UNKNOWN_EXTENSION_NAME
 130

	)

999 
	#X509V3_R_UNKNOWN_OPTION
 120

	)

1000 
	#X509V3_R_UNSUPPORTED_OPTION
 117

	)

1001 
	#X509V3_R_UNSUPPORTED_TYPE
 167

	)

1002 
	#X509V3_R_USER_TOO_LONG
 132

	)

1004 #ifde‡ 
__˝lu•lus


	@/usr/include/pcap.h

45 
	~<pˇp/pˇp.h
>

	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/regex.h

22 #i‚de‡
_REGEX_H


23 
	#_REGEX_H
 1

	)

25 
	~<sys/ty≥s.h
>

26 
	~<gnu/›ti⁄-groups.h
>

29 #ifde‡
__˝lu•lus


37 
	ts_ªg_t
;

38 
	ta˘ive_ªg_t
;

45 
	tªg_sy¡ax_t
;

47 #ifde‡
__USE_GNU


50 
	#RE_BACKSLASH_ESCAPE_IN_LISTS
 ((Ë1)

	)

55 
	#RE_BK_PLUS_QM
 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 << 1)

	)

61 
	#RE_CHAR_CLASSES
 (
RE_BK_PLUS_QM
 << 1)

	)

75 
	#RE_CONTEXT_INDEP_ANCHORS
 (
RE_CHAR_CLASSES
 << 1)

	)

83 
	#RE_CONTEXT_INDEP_OPS
 (
RE_CONTEXT_INDEP_ANCHORS
 << 1)

	)

87 
	#RE_CONTEXT_INVALID_OPS
 (
RE_CONTEXT_INDEP_OPS
 << 1)

	)

91 
	#RE_DOT_NEWLINE
 (
RE_CONTEXT_INVALID_OPS
 << 1)

	)

95 
	#RE_DOT_NOT_NULL
 (
RE_DOT_NEWLINE
 << 1)

	)

99 
	#RE_HAT_LISTS_NOT_NEWLINE
 (
RE_DOT_NOT_NULL
 << 1)

	)

104 
	#RE_INTERVALS
 (
RE_HAT_LISTS_NOT_NEWLINE
 << 1)

	)

108 
	#RE_LIMITED_OPS
 (
RE_INTERVALS
 << 1)

	)

112 
	#RE_NEWLINE_ALT
 (
RE_LIMITED_OPS
 << 1)

	)

117 
	#RE_NO_BK_BRACES
 (
RE_NEWLINE_ALT
 << 1)

	)

121 
	#RE_NO_BK_PARENS
 (
RE_NO_BK_BRACES
 << 1)

	)

125 
	#RE_NO_BK_REFS
 (
RE_NO_BK_PARENS
 << 1)

	)

129 
	#RE_NO_BK_VBAR
 (
RE_NO_BK_REFS
 << 1)

	)

135 
	#RE_NO_EMPTY_RANGES
 (
RE_NO_BK_VBAR
 << 1)

	)

139 
	#RE_UNMATCHED_RIGHT_PAREN_ORD
 (
RE_NO_EMPTY_RANGES
 << 1)

	)

143 
	#RE_NO_POSIX_BACKTRACKING
 (
RE_UNMATCHED_RIGHT_PAREN_ORD
 << 1)

	)

147 
	#RE_NO_GNU_OPS
 (
RE_NO_POSIX_BACKTRACKING
 << 1)

	)

155 
	#RE_DEBUG
 (
RE_NO_GNU_OPS
 << 1)

	)

160 
	#RE_INVALID_INTERVAL_ORD
 (
RE_DEBUG
 << 1)

	)

163 #ifde‡
__OPTION_POSIX_REGEXP_GLIBC


166 
	#RE_ICASE
 (
RE_INVALID_INTERVAL_ORD
 << 1)

	)

171 
	#RE_CARET_ANCHORS_HERE
 (
RE_ICASE
 << 1)

	)

175 
	#RE_CONTEXT_INVALID_DUP
 (
RE_CARET_ANCHORS_HERE
 << 1)

	)

179 
	#RE_NO_SUB
 (
RE_CONTEXT_INVALID_DUP
 << 1)

	)

187 
ªg_sy¡ax_t
 
ª_sy¡ax_›ti⁄s
;

189 #ifde‡
__USE_GNU


194 
	#RE_SYNTAX_EMACS
 0

	)

196 
	#RE_SYNTAX_AWK
 \

197 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 | 
RE_DOT_NOT_NULL
 \

198 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

199 | 
RE_NO_BK_VBAR
 | 
RE_NO_EMPTY_RANGES
 \

200 | 
RE_DOT_NEWLINE
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

201 | 
RE_CHAR_CLASSES
 \

202 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
 | 
RE_NO_GNU_OPS
)

	)

204 
	#RE_SYNTAX_GNU_AWK
 \

205 ((
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 \

206 | 
RE_INVALID_INTERVAL_ORD
) \

207 & ~(
RE_DOT_NOT_NULL
 | 
RE_CONTEXT_INDEP_OPS
 \

208 | 
RE_CONTEXT_INVALID_OPS
 ))

	)

210 
	#RE_SYNTAX_POSIX_AWK
 \

211 (
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 \

212 | 
RE_INTERVALS
 | 
RE_NO_GNU_OPS
 \

213 | 
RE_INVALID_INTERVAL_ORD
)

	)

215 
	#RE_SYNTAX_GREP
 \

216 (
RE_BK_PLUS_QM
 | 
RE_CHAR_CLASSES
 \

217 | 
RE_HAT_LISTS_NOT_NEWLINE
 | 
RE_INTERVALS
 \

218 | 
RE_NEWLINE_ALT
)

	)

220 
	#RE_SYNTAX_EGREP
 \

221 (
RE_CHAR_CLASSES
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

222 | 
RE_CONTEXT_INDEP_OPS
 | 
RE_HAT_LISTS_NOT_NEWLINE
 \

223 | 
RE_NEWLINE_ALT
 | 
RE_NO_BK_PARENS
 \

224 | 
RE_NO_BK_VBAR
)

	)

226 
	#RE_SYNTAX_POSIX_EGREP
 \

227 (
RE_SYNTAX_EGREP
 | 
RE_INTERVALS
 | 
RE_NO_BK_BRACES
 \

228 | 
RE_INVALID_INTERVAL_ORD
)

	)

231 
	#RE_SYNTAX_ED
 
RE_SYNTAX_POSIX_BASIC


	)

233 
	#RE_SYNTAX_SED
 
RE_SYNTAX_POSIX_BASIC


	)

236 
	#_RE_SYNTAX_POSIX_COMMON
 \

237 (
RE_CHAR_CLASSES
 | 
RE_DOT_NEWLINE
 | 
RE_DOT_NOT_NULL
 \

238 | 
RE_INTERVALS
 | 
RE_NO_EMPTY_RANGES
)

	)

240 #ifde‡
__OPTION_POSIX_REGEXP_GLIBC


241 
	#RE_SYNTAX_POSIX_BASIC
 \

242 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_BK_PLUS_QM
 | 
RE_CONTEXT_INVALID_DUP
)

	)

244 
	#RE_SYNTAX_POSIX_BASIC
 \

245 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_BK_PLUS_QM
)

	)

251 
	#RE_SYNTAX_POSIX_MINIMAL_BASIC
 \

252 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_LIMITED_OPS
)

	)

254 
	#RE_SYNTAX_POSIX_EXTENDED
 \

255 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

256 | 
RE_CONTEXT_INDEP_OPS
 | 
RE_NO_BK_BRACES
 \

257 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_VBAR
 \

258 | 
RE_CONTEXT_INVALID_OPS
 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

262 
	#RE_SYNTAX_POSIX_MINIMAL_EXTENDED
 \

263 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

264 | 
RE_CONTEXT_INVALID_OPS
 | 
RE_NO_BK_BRACES
 \

265 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

266 | 
RE_NO_BK_VBAR
 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

272 #ifde‡
RE_DUP_MAX


273 #unde‡
RE_DUP_MAX


276 
	#RE_DUP_MAX
 (0x7fff)

	)

284 
	#REG_EXTENDED
 1

	)

288 
	#REG_ICASE
 (
REG_EXTENDED
 << 1)

	)

293 
	#REG_NEWLINE
 (
REG_ICASE
 << 1)

	)

297 
	#REG_NOSUB
 (
REG_NEWLINE
 << 1)

	)

307 
	#REG_NOTBOL
 1

	)

310 
	#REG_NOTEOL
 (1 << 1)

	)

312 #ifde‡
__OPTION_POSIX_REGEXP_GLIBC


315 
	#REG_STARTEND
 (1 << 2)

	)

323 #i‡
deföed
 
_XOPEN_SOURCE
 || deföed 
__USE_XOPEN2K


324 
	gREG_ENOSYS
 = -1,

327 
	gREG_NOERROR
 = 0,

328 
	gREG_NOMATCH
,

332 
	gREG_BADPAT
,

333 
	gREG_ECOLLATE
,

334 
	gREG_ECTYPE
,

335 
	gREG_EESCAPE
,

336 
	gREG_ESUBREG
,

337 
	gREG_EBRACK
,

338 
	gREG_EPAREN
,

339 
	gREG_EBRACE
,

340 
	gREG_BADBR
,

341 
	gREG_ERANGE
,

342 
	gREG_ESPACE
,

343 
	gREG_BADRPT
,

346 
	gREG_EEND
,

347 
	gREG_ESIZE
,

348 
	gREG_ERPAREN


349 } 
	tªg_îrcode_t
;

357 #i‚de‡
RE_TRANSLATE_TYPE


358 
	#__RE_TRANSLATE_TYPE
 *

	)

359 #ifde‡
__USE_GNU


360 
	#RE_TRANSLATE_TYPE
 
__RE_TRANSLATE_TYPE


	)

364 #ifde‡
__USE_GNU


365 
	#__REPB_PREFIX
(
«me
Ë
	)
name

367 
	#__REPB_PREFIX
(
«me
Ë
__
##
	)
name

370 
	sª_∑âîn_buf„r


375 *
__REPB_PREFIX
(
buf„r
);

378 
__REPB_PREFIX
(
Æloˇãd
);

381 
__REPB_PREFIX
(
u£d
);

384 
ªg_sy¡ax_t
 
__REPB_PREFIX
(
sy¡ax
);

389 *
__REPB_PREFIX
(
Á°m≠
);

395 
__RE_TRANSLATE_TYPE
 
__REPB_PREFIX
(
å™¶©e
);

398 
size_t
 
	gª_nsub
;

404 
__REPB_PREFIX
(
ˇn_be_nuŒ
) : 1;

410 #ifde‡
__USE_GNU


411 
	#REGS_UNALLOCATED
 0

	)

412 
	#REGS_REALLOCATE
 1

	)

413 
	#REGS_FIXED
 2

	)

415 
__REPB_PREFIX
(
ªgs_Æloˇãd
) : 2;

419 
__REPB_PREFIX
(
Á°m≠_accuøã
) : 1;

423 
__REPB_PREFIX
(
no_sub
) : 1;

427 
__REPB_PREFIX
(
nŸ_bﬁ
) : 1;

430 
__REPB_PREFIX
(
nŸ_eﬁ
) : 1;

433 
__REPB_PREFIX
(
√wlöe_™ch‹
) : 1;

436 
ª_∑âîn_buf„r
 
	tªgex_t
;

439 
	tªgoff_t
;

442 #ifde‡
__USE_GNU


445 
	sª_ªgi°îs


447 
	gnum_ªgs
;

448 
ªgoff_t
 *
	g°¨t
;

449 
ªgoff_t
 *
	gíd
;

456 #i‚de‡
RE_NREGS


457 
	#RE_NREGS
 30

	)

467 
ªgoff_t
 
	grm_so
;

468 
ªgoff_t
 
	grm_eo
;

469 } 
	tªgm©ch_t
;

473 #ifde‡
__USE_GNU


476 
ªg_sy¡ax_t
 
ª_£t_sy¡ax
 (ªg_sy¡ax_à
__sy¡ax
);

486 c⁄° *
ª_compûe_∑âîn
 (c⁄° *
__∑âîn
, 
size_t
 
__Àngth
,

487 
ª_∑âîn_buf„r
 *
__buf„r
);

493 
ª_compûe_Á°m≠
 (
ª_∑âîn_buf„r
 *
__buf„r
);

501 
ª_£¨ch
 (
ª_∑âîn_buf„r
 *
__buf„r
, c⁄° *
__°rög
,

502 
__Àngth
, 
__°¨t
, 
__ønge
,

503 
ª_ªgi°îs
 *
__ªgs
);

508 
ª_£¨ch_2
 (
ª_∑âîn_buf„r
 *
__buf„r
,

509 c⁄° *
__°rög1
, 
__Àngth1
,

510 c⁄° *
__°rög2
, 
__Àngth2
, 
__°¨t
,

511 
__ønge
, 
ª_ªgi°îs
 *
__ªgs
, 
__°›
);

516 
ª_m©ch
 (
ª_∑âîn_buf„r
 *
__buf„r
, c⁄° *
__°rög
,

517 
__Àngth
, 
__°¨t
, 
ª_ªgi°îs
 *
__ªgs
);

521 
ª_m©ch_2
 (
ª_∑âîn_buf„r
 *
__buf„r
,

522 c⁄° *
__°rög1
, 
__Àngth1
,

523 c⁄° *
__°rög2
, 
__Àngth2
, 
__°¨t
,

524 
ª_ªgi°îs
 *
__ªgs
, 
__°›
);

539 
ª_£t_ªgi°îs
 (
ª_∑âîn_buf„r
 *
__buf„r
,

540 
ª_ªgi°îs
 *
__ªgs
,

541 
__num_ªgs
,

542 
ªgoff_t
 *
__°¨ts
,Ñegoff_à*
__íds
);

545 #i‡
deföed
 
_REGEX_RE_COMP
 || (deföed 
_LIBC
 && deföed 
__USE_BSD
)

546 #i‚de‡
_CRAY


548 *
ª_comp
 (const *);

549 
ª_exec
 (const *);

555 #i‚de‡
__ª°ri˘


556 #i‡! (2 < 
__GNUC__
 || (2 =__GNUC__ && 95 <
__GNUC_MINOR__
))

557 #i‡
deföed
 
ª°ri˘
 || 199901L <
__STDC_VERSION__


558 
	#__ª°ri˘
 
ª°ri˘


	)

560 
	#__ª°ri˘


	)

565 #i‚de‡
__ª°ri˘_¨r


566 #i‡(
__GNUC__
 > 3 || (__GNUC__ =3 && 
__GNUC_MINOR__
 >= 1)) \

567 && !
deföed
 
	g__GNUG__


568 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

570 
	#__ª°ri˘_¨r


	)

575 
ªgcomp
 (
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

576 c⁄° *
__ª°ri˘
 
__∑âîn
,

577 
__cÊags
);

579 
ªgexec
 (c⁄° 
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

580 c⁄° *
__ª°ri˘
 
__°rög
, 
size_t
 
__nm©ch
,

581 
ªgm©ch_t
 
__pm©ch
[
__ª°ri˘_¨r
],

582 
__eÊags
);

584 
size_t
 
ªgîr‹
 (
__îrcode
, c⁄° 
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

585 *
__ª°ri˘
 
__îrbuf
, 
size_t
 
__îrbuf_size
);

587 
ªg‰ì
 (
ªgex_t
 *
__¥eg
);

590 #ifde‡
__˝lu•lus


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

144 #ifde‡
__USE_GNU


145 
	#SEEK_DATA
 3

	)

146 
	#SEEK_HOLE
 4

	)

150 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


152 
	#P_tmpdú
 "/tmp"

	)

165 
	~<bôs/°dio_lim.h
>

169 
_IO_FILE
 *
°dö
;

170 
_IO_FILE
 *
°dout
;

171 
_IO_FILE
 *
°dîr
;

173 
	#°dö
 
°dö


	)

174 
	#°dout
 
°dout


	)

175 
	#°dîr
 
°dîr


	)

177 
__BEGIN_NAMESPACE_STD


179 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

181 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

182 
__END_NAMESPACE_STD


184 #ifde‡
__USE_ATFILE


186 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

187 
__c⁄°
 *
__√w
Ë
__THROW
;

190 
__BEGIN_NAMESPACE_STD


195 #i‚de‡
__USE_FILE_OFFSET64


196 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

198 #ifde‡
__REDIRECT


199 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

201 
	#tmpfûe
 
tmpfûe64


	)

205 #ifde‡
__USE_LARGEFILE64


206 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

210 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

211 
__END_NAMESPACE_STD


213 #ifde‡
__USE_MISC


216 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

220 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


228 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

229 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

233 
__BEGIN_NAMESPACE_STD


238 
	`f˛o£
 (
FILE
 *
__°ªam
);

243 
	`fÊush
 (
FILE
 *
__°ªam
);

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_MISC


253 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

256 #ifde‡
__USE_GNU


263 
	`f˛o£Æl
 ();

267 
__BEGIN_NAMESPACE_STD


268 #i‚de‡
__USE_FILE_OFFSET64


273 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

279 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

283 #ifde‡
__REDIRECT


284 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

285 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

286 
__wur
;

287 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

288 
__c⁄°
 *
__ª°ri˘
 
__modes
,

289 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

290 
__wur
;

292 
	#f›í
 
f›í64


	)

293 
	#‰e›í
 
‰e›í64


	)

296 
__END_NAMESPACE_STD


297 #ifde‡
__USE_LARGEFILE64


298 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

300 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

301 
__c⁄°
 *
__ª°ri˘
 
__modes
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

305 #ifdef 
__USE_POSIX


307 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

310 #ifdef 
__USE_GNU


313 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

314 
__c⁄°
 *
__ª°ri˘
 
__modes
,

315 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

318 #ifde‡
__USE_XOPEN2K8


320 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

321 
__THROW
 
__wur
;

326 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

330 
__BEGIN_NAMESPACE_STD


333 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

337 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

338 
__modes
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_BSD


344 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

345 
size_t
 
__size
Ë
__THROW
;

348 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

352 
__BEGIN_NAMESPACE_STD


357 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

365 
	$•rötf
 (*
__ª°ri˘
 
__s
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

372 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

373 
_G_va_li°
 
__¨g
);

378 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

380 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

381 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

382 
__END_NAMESPACE_STD


384 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


385 
__BEGIN_NAMESPACE_C99


387 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

389 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

391 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

392 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

393 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

394 
__END_NAMESPACE_C99


397 #ifde‡
__USE_GNU


400 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

401 
_G_va_li°
 
__¨g
)

402 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

403 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

404 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

405 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

406 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

407 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

408 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

411 #ifde‡
__USE_XOPEN2K8


418 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

419 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

421 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

422 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

426 
__BEGIN_NAMESPACE_STD


431 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

432 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

440 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

442 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

443 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

444 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

445 #ifde‡
__REDIRECT


449 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

450 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_fsˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

453 
__isoc99_sˇnf
Ë
__wur
;

454 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

456 
__isoc99_ssˇnf
);

458 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

459 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

460 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

461 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

463 
	#fsˇnf
 
__isoc99_fsˇnf


	)

464 
	#sˇnf
 
__isoc99_sˇnf


	)

465 
	#ssˇnf
 
__isoc99_ssˇnf


	)

469 
__END_NAMESPACE_STD


471 #ifdef 
__USE_ISOC99


472 
__BEGIN_NAMESPACE_C99


477 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

478 
_G_va_li°
 
__¨g
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

485 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

489 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

490 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

491 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

493 #i‡!
deföed
 
__USE_GNU
 \

494 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

495 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

496 #ifde‡
__REDIRECT


500 
	`__REDIRECT
 (
vfsˇnf
,

501 (
FILE
 *
__ª°ri˘
 
__s
,

502 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

503 
__isoc99_vfsˇnf
)

504 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

505 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

506 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

507 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

508 
	`__REDIRECT_NTH
 (
vssˇnf
,

509 (
__c⁄°
 *
__ª°ri˘
 
__s
,

510 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

511 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

512 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

514 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

515 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

518 
_G_va_li°
 
__¨g
Ë
__wur
;

519 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

520 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

521 
_G_va_li°
 
__¨g
Ë
__THROW
;

522 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

523 
	#vsˇnf
 
__isoc99_vsˇnf


	)

524 
	#vssˇnf
 
__isoc99_vssˇnf


	)

528 
__END_NAMESPACE_C99


532 
__BEGIN_NAMESPACE_STD


537 
	`fgëc
 (
FILE
 *
__°ªam
);

538 
	`gëc
 (
FILE
 *
__°ªam
);

544 
	`gëch¨
 ();

545 
__END_NAMESPACE_STD


549 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

551 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


556 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

557 
	`gëch¨_u∆ocked
 ();

560 #ifde‡
__USE_MISC


567 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

571 
__BEGIN_NAMESPACE_STD


579 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

586 
	`putch¨
 (
__c
);

587 
__END_NAMESPACE_STD


591 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

593 #ifde‡
__USE_MISC


600 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


608 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

609 
	`putch¨_u∆ocked
 (
__c
);

613 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

614 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

616 
	`gëw
 (
FILE
 *
__°ªam
);

619 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

623 
__BEGIN_NAMESPACE_STD


628 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

629 
__wur
;

636 *
	$gës
 (*
__s
Ë
__wur
;

637 
__END_NAMESPACE_STD


639 #ifde‡
__USE_GNU


646 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 #ifdef 
__USE_XOPEN2K8


662 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

663 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

664 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

665 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

676 
size_t
 *
__ª°ri˘
 
__n
,

677 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
__BEGIN_NAMESPACE_STD


686 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

692 
	`puts
 (
__c⁄°
 *
__s
);

699 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

706 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

714 
__END_NAMESPACE_STD


716 #ifde‡
__USE_GNU


723 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

724 
FILE
 *
__ª°ri˘
 
__°ªam
);

727 #ifde‡
__USE_MISC


734 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

736 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

737 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

741 
__BEGIN_NAMESPACE_STD


746 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

751 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

756 
	`ªwöd
 (
FILE
 *
__°ªam
);

757 
__END_NAMESPACE_STD


764 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


765 #i‚de‡
__USE_FILE_OFFSET64


770 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

775 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

777 #ifde‡
__REDIRECT


778 
	`__REDIRECT
 (
f£eko
,

779 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

780 
f£eko64
);

781 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

783 
	#f£eko
 
f£eko64


	)

784 
	#·ñlo
 
·ñlo64


	)

789 
__BEGIN_NAMESPACE_STD


790 #i‚de‡
__USE_FILE_OFFSET64


795 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

800 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

802 #ifde‡
__REDIRECT


803 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

804 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

805 
	`__REDIRECT
 (
f£ços
,

806 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

808 
	#fgëpos
 
fgëpos64


	)

809 
	#f£ços
 
f£ços64


	)

812 
__END_NAMESPACE_STD


814 #ifde‡
__USE_LARGEFILE64


815 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

816 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

817 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

818 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

821 
__BEGIN_NAMESPACE_STD


823 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

825 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

827 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

828 
__END_NAMESPACE_STD


830 #ifde‡
__USE_MISC


832 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

833 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

838 
__BEGIN_NAMESPACE_STD


843 
	`≥º‹
 (
__c⁄°
 *
__s
);

844 
__END_NAMESPACE_STD


850 
	~<bôs/sys_îæi°.h
>

853 #ifdef 
__USE_POSIX


855 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

858 #ifde‡
__USE_MISC


860 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

864 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

865 
deföed
 
__USE_MISC
)

870 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

876 
	`p˛o£
 (
FILE
 *
__°ªam
);

880 #ifdef 
__USE_POSIX


882 *
	$˘îmid
 (*
__s
Ë
__THROW
;

886 #ifde‡
__USE_XOPEN


888 *
	`cu£rid
 (*
__s
);

892 #ifdef 
__USE_GNU


893 
ob°ack
;

896 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

897 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

898 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

899 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

901 
_G_va_li°
 
__¨gs
)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

906 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


910 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

914 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

917 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

920 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


924 
	#__√ed_gë›t


	)

925 
	~<gë›t.h
>

930 #ifde‡
__USE_EXTERN_INLINES


931 
	~<bôs/°dio.h
>

933 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


934 
	~<bôs/°dio2.h
>

936 #ifde‡
__LDBL_COMPAT


937 
	~<bôs/°dio-ldbl.h
>

940 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

315 #ifde‡
__USE_GNU


316 
	#SEEK_DATA
 3

	)

317 
	#SEEK_HOLE
 4

	)

321 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


323 
	#L_SET
 
SEEK_SET


	)

324 
	#L_INCR
 
SEEK_CUR


	)

325 
	#L_XTND
 
SEEK_END


	)

334 #i‚de‡
__USE_FILE_OFFSET64


335 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

337 #ifde‡
__REDIRECT_NTH


338 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

339 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

340 
l£ek64
);

342 
	#l£ek
 
l£ek64


	)

345 #ifde‡
__USE_LARGEFILE64


346 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

347 
__THROW
;

354 
	`˛o£
 (
__fd
);

361 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

367 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

369 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


370 #i‚de‡
__USE_FILE_OFFSET64


377 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

378 
__off_t
 
__off£t
Ë
__wur
;

385 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

386 
__off_t
 
__off£t
Ë
__wur
;

388 #ifde‡
__REDIRECT


389 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off64_t
 
__off£t
),

391 
¥ód64
Ë
__wur
;

392 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

393 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

394 
pwrôe64
Ë
__wur
;

396 
	#¥ód
 
¥ód64


	)

397 
	#pwrôe
 
pwrôe64


	)

401 #ifde‡
__USE_LARGEFILE64


405 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

406 
__off64_t
 
__off£t
Ë
__wur
;

409 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

410 
__off64_t
 
__off£t
Ë
__wur
;

418 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

420 #ifde‡
__USE_GNU


423 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

433 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

445 
	`¶ìp
 (
__£c⁄ds
);

447 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

448 || 
deföed
 
__USE_BSD


453 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

454 
__THROW
;

461 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

470 
	`∑u£
 ();

474 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

475 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

477 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


479 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

484 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

489 #ifde‡
__USE_ATFILE


492 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

493 
__gid_t
 
__group
, 
__Êag
)

494 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

498 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


502 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

512 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

514 #ifdef 
__USE_GNU


518 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

521 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

522 || 
deföed
 
__USE_BSD


526 *
	$gëwd
 (*
__buf
)

527 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

532 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

535 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

537 #ifde‡
__USE_GNU


540 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

544 **
__ívú⁄
;

545 #ifde‡
__USE_GNU


546 **
ívú⁄
;

552 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

553 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

555 #ifde‡
__USE_XOPEN2K8


558 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((2));

564 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

580 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

585 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

586 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

588 #ifde‡
__USE_GNU


591 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

592 *
__c⁄°
 
__ívp
[])

593 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

597 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


599 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

604 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

610 
	~<bôs/c⁄‚ame.h
>

613 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

614 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

620 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

622 #ifdef 
__USE_POSIX2


624 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

629 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

632 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

636 #i‚de‡
__FAVOR_BSD


637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

639 #ifde‡
__REDIRECT_NTH


640 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

642 
	#gëpgΩ
 
__gëpgid


	)

647 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


649 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

656 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

658 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


669 #i‚de‡
__FAVOR_BSD


673 
	$£çgΩ
 (Ë
__THROW
;

678 #ifde‡
__REDIRECT_NTH


679 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

681 
	#£çgΩ
 
£çgid


	)

690 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

692 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

698 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

701 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

704 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

707 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

712 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

714 #ifdef 
__USE_GNU


716 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

723 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


728 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

731 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


733 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

740 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


745 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

748 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


750 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

753 #ifde‡
__USE_GNU


756 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

757 
__THROW
;

761 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

762 
__THROW
;

766 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

767 
__THROW
;

771 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

772 
__THROW
;

779 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

781 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

782 || 
deföed
 
__USE_BSD


787 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

793 *
	$ây«me
 (
__fd
Ë
__THROW
;

797 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

802 
	$ißây
 (
__fd
Ë
__THROW
;

804 #i‡
deföed
 
__USE_BSD
 \

805 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

808 
	$ây¶Ÿ
 (Ë
__THROW
;

813 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


819 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

820 
__c⁄°
 *
__to
, 
__Êags
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

824 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


826 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

832 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

833 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

837 #ifde‡
__USE_ATFILE


839 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

840 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

843 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

844 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

845 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

849 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_ATFILE


853 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

854 
__THROW
 
	`__n⁄nuŒ
 ((2));

858 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

862 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

865 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

872 *
	`gëlogö
 ();

873 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


880 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

883 #ifdef 
__USE_BSD


885 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

889 #ifdef 
__USE_POSIX2


893 
	#__√ed_gë›t


	)

894 
	~<gë›t.h
>

898 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


902 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

906 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

909 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

920 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

929 
	$vh™gup
 (Ë
__THROW
;

932 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

940 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

941 
size_t
 
__off£t
, 
__sˇÀ
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

952 *
	$gëu£rshñl
 (Ë
__THROW
;

953 
	$ídu£rshñl
 (Ë
__THROW
;

954 
	$£tu£rshñl
 (Ë
__THROW
;

960 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

964 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

967 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

971 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

975 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


980 
	`fsync
 (
__fd
);

984 #ifde‡
__USE_GNU


987 
	$syncfs
 (
__fd
Ë
__THROW
;

991 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


994 
	`gëho°id
 ();

997 
	$sync
 (Ë
__THROW
;

1000 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1003 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1008 
	$gëdèbÀsize
 (Ë
__THROW
;

1014 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
åunˇã
,

1023 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1024 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1026 
	#åunˇã
 
åunˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1036 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1039 #i‚de‡
__USE_FILE_OFFSET64


1040 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #ifde‡
__REDIRECT_NTH


1043 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1044 
·runˇã64
Ë
__wur
;

1046 
	#·runˇã
 
·runˇã64


	)

1049 #ifde‡
__USE_LARGEFILE64


1050 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1056 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1057 || 
deföed
 
__USE_MISC


1061 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1067 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1071 #ifde‡
__USE_MISC


1082 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1087 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1099 
	#F_ULOCK
 0

	)

1100 
	#F_LOCK
 1

	)

1101 
	#F_TLOCK
 2

	)

1102 
	#F_TEST
 3

	)

1104 #i‚de‡
__USE_FILE_OFFSET64


1105 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1107 #ifde‡
__REDIRECT


1108 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1109 
lockf64
Ë
__wur
;

1111 
	#lockf
 
lockf64


	)

1114 #ifde‡
__USE_LARGEFILE64


1115 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1120 #ifde‡
__USE_GNU


1125 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1126 (
__exãnsi⁄__
 \

1127 ({ 
__ªsu…
; \

1128 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1129 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1130 
__ªsu…
; 
	}
}))

	)

1133 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1136 
fd©async
 (
__fûdes
);

1142 #ifdef 
__USE_XOPEN


1144 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1145 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1156 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1157 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1165 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1170 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1171 
	~<bôs/uni°d.h
>

1174 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/boost/config.hpp

17 #i‚de‡
BOOST_CONFIG_HPP


18 
	#BOOST_CONFIG_HPP


	)

21 #i‡!
deföed
(
BOOST_USER_CONFIG
Ë&& !deföed(
BOOST_NO_USER_CONFIG
)

22 
	#BOOST_USER_CONFIG
 <
boo°
/
c⁄fig
/
u£r
.
hµ
>

	)

25 #ifde‡
BOOST_USER_CONFIG


26 #ö˛udê
BOOST_USER_CONFIG


30 #i‡!
deföed
(
BOOST_COMPILER_CONFIG
Ë&& !deföed(
BOOST_NO_COMPILER_CONFIG
Ë&& !deföed(
BOOST_NO_CONFIG
)

31 
	~<boo°/c⁄fig/£À˘_compûî_c⁄fig.hµ
>

34 #ifde‡
BOOST_COMPILER_CONFIG


35 #ö˛udê
BOOST_COMPILER_CONFIG


39 #i‡!
deföed
(
BOOST_STDLIB_CONFIG
Ë&& !deföed(
BOOST_NO_STDLIB_CONFIG
Ë&& !deföed(
BOOST_NO_CONFIG
Ë&& deföed(
__˝lu•lus
)

40 
	~<boo°/c⁄fig/£À˘_°dlib_c⁄fig.hµ
>

43 #ifde‡
BOOST_STDLIB_CONFIG


44 #ö˛udê
BOOST_STDLIB_CONFIG


48 #i‡!
deföed
(
BOOST_PLATFORM_CONFIG
Ë&& !deföed(
BOOST_NO_PLATFORM_CONFIG
Ë&& !deföed(
BOOST_NO_CONFIG
)

49 
	~<boo°/c⁄fig/£À˘_∂©f‹m_c⁄fig.hµ
>

52 #ifde‡
BOOST_PLATFORM_CONFIG


53 #ö˛udê
BOOST_PLATFORM_CONFIG


57 
	~<boo°/c⁄fig/suffix.hµ
>

	@/usr/include/boost/detail/workaround.hpp

5 #i‚de‡
WORKAROUND_DWA2002126_HPP


6 
	#WORKAROUND_DWA2002126_HPP


	)

39 #i‚de‡
BOOST_STRICT_CONFIG


41 
	~<boo°/c⁄fig.hµ
>

43 #i‚de‡
__BORLANDC__


44 
	#__BORLANDC___WORKAROUND_GUARD
 1

	)

46 
	#__BORLANDC___WORKAROUND_GUARD
 0

	)

48 #i‚de‡
__CODEGEARC__


49 
	#__CODEGEARC___WORKAROUND_GUARD
 1

	)

51 
	#__CODEGEARC___WORKAROUND_GUARD
 0

	)

53 #i‚de‡
_MSC_VER


54 
	#_MSC_VER_WORKAROUND_GUARD
 1

	)

56 
	#_MSC_VER_WORKAROUND_GUARD
 0

	)

58 #i‚de‡
_MSC_FULL_VER


59 
	#_MSC_FULL_VER_WORKAROUND_GUARD
 1

	)

61 
	#_MSC_FULL_VER_WORKAROUND_GUARD
 0

	)

63 #i‚de‡
BOOST_MSVC


64 
	#BOOST_MSVC_WORKAROUND_GUARD
 1

	)

66 
	#BOOST_MSVC_WORKAROUND_GUARD
 0

	)

68 #i‚de‡
BOOST_MSVC_FULL_VER


69 
	#BOOST_MSVC_FULL_VER_WORKAROUND_GUARD
 1

	)

71 
	#BOOST_MSVC_FULL_VER_WORKAROUND_GUARD
 0

	)

73 #i‚de‡
__GNUC__


74 
	#__GNUC___WORKAROUND_GUARD
 1

	)

76 
	#__GNUC___WORKAROUND_GUARD
 0

	)

78 #i‚de‡
__GNUC_MINOR__


79 
	#__GNUC_MINOR___WORKAROUND_GUARD
 1

	)

81 
	#__GNUC_MINOR___WORKAROUND_GUARD
 0

	)

83 #i‚de‡
__GNUC_PATCHLEVEL__


84 
	#__GNUC_PATCHLEVEL___WORKAROUND_GUARD
 1

	)

86 
	#__GNUC_PATCHLEVEL___WORKAROUND_GUARD
 0

	)

88 #i‚de‡
__IBMCPP__


89 
	#__IBMCPP___WORKAROUND_GUARD
 1

	)

91 
	#__IBMCPP___WORKAROUND_GUARD
 0

	)

93 #i‚de‡
__SUNPRO_CC


94 
	#__SUNPRO_CC_WORKAROUND_GUARD
 1

	)

96 
	#__SUNPRO_CC_WORKAROUND_GUARD
 0

	)

98 #i‚de‡
__DECCXX_VER


99 
	#__DECCXX_VER_WORKAROUND_GUARD
 1

	)

101 
	#__DECCXX_VER_WORKAROUND_GUARD
 0

	)

103 #i‚de‡
__MWERKS__


104 
	#__MWERKS___WORKAROUND_GUARD
 1

	)

106 
	#__MWERKS___WORKAROUND_GUARD
 0

	)

108 #i‚de‡
__EDG__


109 
	#__EDG___WORKAROUND_GUARD
 1

	)

111 
	#__EDG___WORKAROUND_GUARD
 0

	)

113 #i‚de‡
__EDG_VERSION__


114 
	#__EDG_VERSION___WORKAROUND_GUARD
 1

	)

116 
	#__EDG_VERSION___WORKAROUND_GUARD
 0

	)

118 #i‚de‡
__HP_aCC


119 
	#__HP_aCC_WORKAROUND_GUARD
 1

	)

121 
	#__HP_aCC_WORKAROUND_GUARD
 0

	)

123 #i‚de‡
__hpx°d98


124 
	#__hpx°d98_WORKAROUND_GUARD
 1

	)

126 
	#__hpx°d98_WORKAROUND_GUARD
 0

	)

128 #i‚de‡
_CRAYC


129 
	#_CRAYC_WORKAROUND_GUARD
 1

	)

131 
	#_CRAYC_WORKAROUND_GUARD
 0

	)

133 #i‚de‡
__DMC__


134 
	#__DMC___WORKAROUND_GUARD
 1

	)

136 
	#__DMC___WORKAROUND_GUARD
 0

	)

138 #i‚de‡
MPW_CPLUS


139 
	#MPW_CPLUS_WORKAROUND_GUARD
 1

	)

141 
	#MPW_CPLUS_WORKAROUND_GUARD
 0

	)

143 #i‚de‡
__COMO__


144 
	#__COMO___WORKAROUND_GUARD
 1

	)

146 
	#__COMO___WORKAROUND_GUARD
 0

	)

148 #i‚de‡
__COMO_VERSION__


149 
	#__COMO_VERSION___WORKAROUND_GUARD
 1

	)

151 
	#__COMO_VERSION___WORKAROUND_GUARD
 0

	)

153 #i‚de‡
__INTEL_COMPILER


154 
	#__INTEL_COMPILER_WORKAROUND_GUARD
 1

	)

156 
	#__INTEL_COMPILER_WORKAROUND_GUARD
 0

	)

158 #i‚de‡
__ICL


159 
	#__ICL_WORKAROUND_GUARD
 1

	)

161 
	#__ICL_WORKAROUND_GUARD
 0

	)

163 #i‚de‡
_COMPILER_VERSION


164 
	#_COMPILER_VERSION_WORKAROUND_GUARD
 1

	)

166 
	#_COMPILER_VERSION_WORKAROUND_GUARD
 0

	)

169 #i‚de‡
_RWSTD_VER


170 
	#_RWSTD_VER_WORKAROUND_GUARD
 1

	)

172 
	#_RWSTD_VER_WORKAROUND_GUARD
 0

	)

174 #i‚de‡
BOOST_RWSTD_VER


175 
	#BOOST_RWSTD_VER_WORKAROUND_GUARD
 1

	)

177 
	#BOOST_RWSTD_VER_WORKAROUND_GUARD
 0

	)

179 #i‚de‡
__GLIBCPP__


180 
	#__GLIBCPP___WORKAROUND_GUARD
 1

	)

182 
	#__GLIBCPP___WORKAROUND_GUARD
 0

	)

184 #i‚de‡
_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC


185 
	#_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC_WORKAROUND_GUARD
 1

	)

187 
	#_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC_WORKAROUND_GUARD
 0

	)

189 #i‚de‡
__SGI_STL_PORT


190 
	#__SGI_STL_PORT_WORKAROUND_GUARD
 1

	)

192 
	#__SGI_STL_PORT_WORKAROUND_GUARD
 0

	)

194 #i‚de‡
_STLPORT_VERSION


195 
	#_STLPORT_VERSION_WORKAROUND_GUARD
 1

	)

197 
	#_STLPORT_VERSION_WORKAROUND_GUARD
 0

	)

199 #i‚de‡
__LIBCOMO_VERSION__


200 
	#__LIBCOMO_VERSION___WORKAROUND_GUARD
 1

	)

202 
	#__LIBCOMO_VERSION___WORKAROUND_GUARD
 0

	)

204 #i‚de‡
_CPPLIB_VER


205 
	#_CPPLIB_VER_WORKAROUND_GUARD
 1

	)

207 
	#_CPPLIB_VER_WORKAROUND_GUARD
 0

	)

210 #i‚de‡
BOOST_INTEL_CXX_VERSION


211 
	#BOOST_INTEL_CXX_VERSION_WORKAROUND_GUARD
 1

	)

213 
	#BOOST_INTEL_CXX_VERSION_WORKAROUND_GUARD
 0

	)

215 #i‚de‡
BOOST_INTEL_WIN


216 
	#BOOST_INTEL_WIN_WORKAROUND_GUARD
 1

	)

218 
	#BOOST_INTEL_WIN_WORKAROUND_GUARD
 0

	)

220 #i‚de‡
BOOST_DINKUMWARE_STDLIB


221 
	#BOOST_DINKUMWARE_STDLIB_WORKAROUND_GUARD
 1

	)

223 
	#BOOST_DINKUMWARE_STDLIB_WORKAROUND_GUARD
 0

	)

225 #i‚de‡
BOOST_INTEL


226 
	#BOOST_INTEL_WORKAROUND_GUARD
 1

	)

228 
	#BOOST_INTEL_WORKAROUND_GUARD
 0

	)

231 
	#BOOST_MPL_CFG_GCC_WORKAROUND_GUARD
 0

	)

233 
	#BOOST_WORKAROUND
(
symbﬁ
, 
ã°
) \

234 ((
symbﬁ
 ## 
_WORKAROUND_GUARD
 + 0 == 0) && \

235 (
symbﬁ
 !0Ë&& (1 % (–(symbﬁ 
ã°
ËË+ 1)))

	)

254 #ifde‡
BOOST_DETECT_OUTDATED_WORKAROUNDS


255 
	#BOOST_OPEN_PAREN
 (

	)

256 
	#BOOST_TESTED_AT
(
vÆue
Ë> vÆueË?(-1): 
BOOST_OPEN_PAREN
 1

	)

258 
	#BOOST_TESTED_AT
(
vÆue
Ë!((vÆue)-(vÆue))

	)

263 
	#BOOST_WORKAROUND
(
symbﬁ
, 
ã°
Ë0

	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

148 
	#_IO_FLAGS2_NOCLOSE
 32

	)

149 
	#_IO_FLAGS2_CLOEXEC
 64

	)

153 
	#_IO_SKIPWS
 01

	)

154 
	#_IO_LEFT
 02

	)

155 
	#_IO_RIGHT
 04

	)

156 
	#_IO_INTERNAL
 010

	)

157 
	#_IO_DEC
 020

	)

158 
	#_IO_OCT
 040

	)

159 
	#_IO_HEX
 0100

	)

160 
	#_IO_SHOWBASE
 0200

	)

161 
	#_IO_SHOWPOINT
 0400

	)

162 
	#_IO_UPPERCASE
 01000

	)

163 
	#_IO_SHOWPOS
 02000

	)

164 
	#_IO_SCIENTIFIC
 04000

	)

165 
	#_IO_FIXED
 010000

	)

166 
	#_IO_UNITBUF
 020000

	)

167 
	#_IO_STDIO
 040000

	)

168 
	#_IO_DONT_CLOSE
 0100000

	)

169 
	#_IO_BOOLALPHA
 0200000

	)

172 
_IO_jump_t
; 
	g_IO_FILE
;

175 #ifde‡
_IO_MTSAFE_IO


176 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

177 
	~<bôs/°dio-lock.h
>

182 
	t_IO_lock_t
;

188 
	s_IO_m¨kî
 {

189 
_IO_m¨kî
 *
	m_√xt
;

190 
_IO_FILE
 *
	m_sbuf
;

194 
	m_pos
;

196 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

197 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

198 
	mpublic
:

199 
°ªamm¨kî
(
°ªambuf
 *
sb
);

200 ~
°ªamm¨kî
();

201 
ßvög
(Ë{  
	m_•os
 == -2; }

202 
dñè
(
°ªamm¨kî
&);

203 
dñè
();

208 
	e__codecvt_ªsu…


210 
	m__codecvt_ok
,

211 
	m__codecvt_∑πül
,

212 
	m__codecvt_îr‹
,

213 
	m__codecvt_noc⁄v


216 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


219 
	s_IO_codecvt


221 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

222 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *,

224 c⁄° 
	mwch¨_t
 *,

225 c⁄° 
	mwch¨_t
 *,

226 c⁄° 
	mwch¨_t
 **, *,

228 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

229 
	m__mb°©e_t
 *, *,

231 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

232 
	m__mb°©e_t
 *,

234 c⁄° **, 
	mwch¨_t
 *,

235 
	mwch¨_t
 *, wchar_t **);

236 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

237 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

238 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

239 c⁄° *, c⁄° *, 
	m_IO_size_t
);

240 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

242 
_IO_ic⁄v_t
 
	m__cd_ö
;

243 
_IO_ic⁄v_t
 
	m__cd_out
;

247 
	s_IO_wide_d©a


249 
wch¨_t
 *
	m_IO_ªad_±r
;

250 
wch¨_t
 *
	m_IO_ªad_íd
;

251 
wch¨_t
 *
	m_IO_ªad_ba£
;

252 
wch¨_t
 *
	m_IO_wrôe_ba£
;

253 
wch¨_t
 *
	m_IO_wrôe_±r
;

254 
wch¨_t
 *
	m_IO_wrôe_íd
;

255 
wch¨_t
 *
	m_IO_buf_ba£
;

256 
wch¨_t
 *
	m_IO_buf_íd
;

258 
wch¨_t
 *
	m_IO_ßve_ba£
;

259 
wch¨_t
 *
	m_IO_backup_ba£
;

261 
wch¨_t
 *
	m_IO_ßve_íd
;

263 
__mb°©e_t
 
	m_IO_°©e
;

264 
__mb°©e_t
 
	m_IO_œ°_°©e
;

265 
_IO_codecvt
 
	m_codecvt
;

267 
wch¨_t
 
	m_sh‹tbuf
[1];

269 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

273 
	s_IO_FILE
 {

274 
	m_Êags
;

275 
	#_IO_fûe_Êags
 
_Êags


	)

279 * 
	m_IO_ªad_±r
;

280 * 
	m_IO_ªad_íd
;

281 * 
	m_IO_ªad_ba£
;

282 * 
	m_IO_wrôe_ba£
;

283 * 
	m_IO_wrôe_±r
;

284 * 
	m_IO_wrôe_íd
;

285 * 
	m_IO_buf_ba£
;

286 * 
	m_IO_buf_íd
;

288 *
	m_IO_ßve_ba£
;

289 *
	m_IO_backup_ba£
;

290 *
	m_IO_ßve_íd
;

292 
_IO_m¨kî
 *
	m_m¨kîs
;

294 
_IO_FILE
 *
	m_chaö
;

296 
	m_fûío
;

298 
	m_blksize
;

300 
	m_Êags2
;

302 
_IO_off_t
 
	m_ﬁd_off£t
;

304 
	#__HAVE_COLUMN


	)

306 
	m_cur_cﬁumn
;

307 sig√d 
	m_vèbÀ_off£t
;

308 
	m_sh‹tbuf
[1];

312 
_IO_lock_t
 *
	m_lock
;

313 #ifde‡
_IO_USE_OLD_IO_FILE


316 
	s_IO_FILE_com∂ëe


318 
_IO_FILE
 
	m_fûe
;

320 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

321 
_IO_off64_t
 
	m_off£t
;

322 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


324 
_IO_codecvt
 *
	m_codecvt
;

325 
_IO_wide_d©a
 *
	m_wide_d©a
;

326 
_IO_FILE
 *
	m_‰ìªs_li°
;

327 *
	m_‰ìªs_buf
;

328 
size_t
 
	m_‰ìªs_size
;

330 *
	m__∑d1
;

331 *
	m__∑d2
;

332 *
	m__∑d3
;

333 *
	m__∑d4
;

334 
size_t
 
	m__∑d5
;

336 
	m_mode
;

338 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

342 #i‚de‡
__˝lu•lus


343 
_IO_FILE
 
	t_IO_FILE
;

346 
	g_IO_FILE_∂us
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

349 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

350 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

351 #i‚de‡
_LIBC


352 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

353 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

354 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

356 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

357 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

358 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

366 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

374 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

375 
	tsize_t
 
	t__n
);

383 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

386 
	t__io_˛o£_‚
 (*
	t__cookõ
);

389 #ifde‡
_GNU_SOURCE


391 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

392 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

393 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

394 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

399 
__io_ªad_‚
 *
	mªad
;

400 
__io_wrôe_‚
 *
	mwrôe
;

401 
__io_£ek_‚
 *
	m£ek
;

402 
__io_˛o£_‚
 *
	m˛o£
;

403 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

404 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

406 
	g_IO_cookõ_fûe
;

409 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

410 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

414 #ifde‡
__˝lu•lus


418 
__undîÊow
 (
_IO_FILE
 *);

419 
__uÊow
 (
_IO_FILE
 *);

420 
__ovîÊow
 (
_IO_FILE
 *, );

421 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


422 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

423 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

424 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

427 #i‡ 
__GNUC__
 >= 3

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

430 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

433 
	#_IO_gëc_u∆ocked
(
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

435 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

436 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

437 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

438 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

439 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

440 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

441 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

442 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

443 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

445 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


446 
	#_IO_gëwc_u∆ocked
(
_Â
) \

447 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

448 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

449 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

450 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

451 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

452 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

453 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

454 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

455 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

456 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

459 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

460 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

462 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

463 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

464 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

467 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

470 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

471 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

473 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

474 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

477 #ifde‡
_IO_MTSAFE_IO


478 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

479 
	#_IO_Êockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

481 
	#_IO_fu∆ockfûe
(
_Â
) \

482 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

484 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

485 
	#_IO_Êockfûe
(
_Â
Ë

	)

486 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

487 
	#_IO_·rylockfûe
(
_Â
Ë

	)

488 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

489 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

492 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

493 
_IO_va_li°
, *
__ª°ri˘
);

494 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

495 
_IO_va_li°
);

496 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

497 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

499 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

500 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

502 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

504 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


505 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

506 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

507 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

508 #i‡
__GNUC__
 >= 2

511 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


512 
	~<shlib-com∑t.h
>

513 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

514 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

515 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

516 c⁄° 
_IO_°dö_u£d
;

517 
wók_exã∫
 (
_IO_°dö_u£d
);

520 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


521 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

525 
	#_IO_fwide
(
__Â
, 
__mode
) \

526 ({ 
__ªsu…
 = (
__mode
); \

527 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

529 i‡((
__Â
)->
_mode
 == 0) \

531 (
__Â
)->
_mode
 = -1; \

532 
__ªsu…
 = (
__Â
)->
_mode
; \

534 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

535 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

537 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

538 
__ªsu…
; })

	)

541 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

542 
_IO_va_li°
, *
__ª°ri˘
);

543 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

544 
_IO_va_li°
);

545 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

546 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

549 #ifde‡
__LDBL_COMPAT


550 
	~<bôs/libio-ldbl.h
>

553 #ifde‡
__˝lu•lus


	@/usr/include/linux/filter.h

5 #i‚de‡
__LINUX_FILTER_H__


6 
	#__LINUX_FILTER_H__


	)

9 
	~<löux/ty≥s.h
>

15 
	#BPF_MAJOR_VERSION
 1

	)

16 
	#BPF_MINOR_VERSION
 1

	)

23 
	ssock_fûãr
 {

24 
__u16
 
	mcode
;

25 
__u8
 
	mjt
;

26 
__u8
 
	mjf
;

27 
__u32
 
	mk
;

30 
	ssock_Ârog
 {

31 
	mÀn
;

32 
sock_fûãr
 *
	mfûãr
;

39 
	#BPF_CLASS
(
code
Ë((codeË& 0x07)

	)

40 
	#BPF_LD
 0x00

	)

41 
	#BPF_LDX
 0x01

	)

42 
	#BPF_ST
 0x02

	)

43 
	#BPF_STX
 0x03

	)

44 
	#BPF_ALU
 0x04

	)

45 
	#BPF_JMP
 0x05

	)

46 
	#BPF_RET
 0x06

	)

47 
	#BPF_MISC
 0x07

	)

50 
	#BPF_SIZE
(
code
Ë((codeË& 0x18)

	)

51 
	#BPF_W
 0x00

	)

52 
	#BPF_H
 0x08

	)

53 
	#BPF_B
 0x10

	)

54 
	#BPF_MODE
(
code
Ë((codeË& 0xe0)

	)

55 
	#BPF_IMM
 0x00

	)

56 
	#BPF_ABS
 0x20

	)

57 
	#BPF_IND
 0x40

	)

58 
	#BPF_MEM
 0x60

	)

59 
	#BPF_LEN
 0x80

	)

60 
	#BPF_MSH
 0xa0

	)

63 
	#BPF_OP
(
code
Ë((codeË& 0xf0)

	)

64 
	#BPF_ADD
 0x00

	)

65 
	#BPF_SUB
 0x10

	)

66 
	#BPF_MUL
 0x20

	)

67 
	#BPF_DIV
 0x30

	)

68 
	#BPF_OR
 0x40

	)

69 
	#BPF_AND
 0x50

	)

70 
	#BPF_LSH
 0x60

	)

71 
	#BPF_RSH
 0x70

	)

72 
	#BPF_NEG
 0x80

	)

73 
	#BPF_JA
 0x00

	)

74 
	#BPF_JEQ
 0x10

	)

75 
	#BPF_JGT
 0x20

	)

76 
	#BPF_JGE
 0x30

	)

77 
	#BPF_JSET
 0x40

	)

78 
	#BPF_SRC
(
code
Ë((codeË& 0x08)

	)

79 
	#BPF_K
 0x00

	)

80 
	#BPF_X
 0x08

	)

83 
	#BPF_RVAL
(
code
Ë((codeË& 0x18)

	)

84 
	#BPF_A
 0x10

	)

87 
	#BPF_MISCOP
(
code
Ë((codeË& 0xf8)

	)

88 
	#BPF_TAX
 0x00

	)

89 
	#BPF_TXA
 0x80

	)

91 #i‚de‡
BPF_MAXINSNS


92 
	#BPF_MAXINSNS
 4096

	)

98 #i‚de‡
BPF_STMT


99 
	#BPF_STMT
(
code
, 
k
Ë{ ()(code), 0, 0, k }

	)

101 #i‚de‡
BPF_JUMP


102 
	#BPF_JUMP
(
code
, 
k
, 
jt
, 
jf
Ë{ ()(code), jt, jf, k }

	)

108 
	#BPF_MEMWORDS
 16

	)

115 
	#SKF_AD_OFF
 (-0x1000)

	)

116 
	#SKF_AD_PROTOCOL
 0

	)

117 
	#SKF_AD_PKTTYPE
 4

	)

118 
	#SKF_AD_IFINDEX
 8

	)

119 
	#SKF_AD_NLATTR
 12

	)

120 
	#SKF_AD_NLATTR_NEST
 16

	)

121 
	#SKF_AD_MARK
 20

	)

122 
	#SKF_AD_QUEUE
 24

	)

123 
	#SKF_AD_HATYPE
 28

	)

124 
	#SKF_AD_RXHASH
 32

	)

125 
	#SKF_AD_CPU
 36

	)

126 
	#SKF_AD_ALU_XOR_X
 40

	)

127 
	#SKF_AD_MAX
 44

	)

128 
	#SKF_NET_OFF
 (-0x100000)

	)

129 
	#SKF_LL_OFF
 (-0x200000)

	)

	@/usr/include/linux/if_addr.h

1 #i‚de‡
__LINUX_IF_ADDR_H


2 
	#__LINUX_IF_ADDR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	siÁddrmsg
 {

8 
__u8
 
	miÁ_Ámûy
;

9 
__u8
 
	miÁ_¥efixÀn
;

10 
__u8
 
	miÁ_Êags
;

11 
__u8
 
	miÁ_sc›e
;

12 
__u32
 
	miÁ_ödex
;

23 
	mIFA_UNSPEC
,

24 
	mIFA_ADDRESS
,

25 
	mIFA_LOCAL
,

26 
	mIFA_LABEL
,

27 
	mIFA_BROADCAST
,

28 
	mIFA_ANYCAST
,

29 
	mIFA_CACHEINFO
,

30 
	mIFA_MULTICAST
,

31 
	m__IFA_MAX
,

34 
	#IFA_MAX
 (
__IFA_MAX
 - 1)

	)

37 
	#IFA_F_SECONDARY
 0x01

	)

38 
	#IFA_F_TEMPORARY
 
IFA_F_SECONDARY


	)

40 
	#IFA_F_NODAD
 0x02

	)

41 
	#IFA_F_OPTIMISTIC
 0x04

	)

42 
	#IFA_F_DADFAILED
 0x08

	)

43 
	#IFA_F_HOMEADDRESS
 0x10

	)

44 
	#IFA_F_DEPRECATED
 0x20

	)

45 
	#IFA_F_TENTATIVE
 0x40

	)

46 
	#IFA_F_PERMANENT
 0x80

	)

48 
	siÁ_ˇcheöfo
 {

49 
__u32
 
	miÁ_¥e„ªd
;

50 
__u32
 
	miÁ_vÆid
;

51 
__u32
 
	mc°amp
;

52 
__u32
 
	mt°amp
;

56 
	#IFA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iÁddrmsg
))))

	)

57 
	#IFA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iÁddrmsg
))

	)

	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_IP
 0x0800

	)

46 
	#ETH_P_X25
 0x0805

	)

47 
	#ETH_P_ARP
 0x0806

	)

48 
	#ETH_P_BPQ
 0x08FF

	)

49 
	#ETH_P_IEEEPUP
 0x0a00

	)

50 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

51 
	#ETH_P_DEC
 0x6000

	)

52 
	#ETH_P_DNA_DL
 0x6001

	)

53 
	#ETH_P_DNA_RC
 0x6002

	)

54 
	#ETH_P_DNA_RT
 0x6003

	)

55 
	#ETH_P_LAT
 0x6004

	)

56 
	#ETH_P_DIAG
 0x6005

	)

57 
	#ETH_P_CUST
 0x6006

	)

58 
	#ETH_P_SCA
 0x6007

	)

59 
	#ETH_P_TEB
 0x6558

	)

60 
	#ETH_P_RARP
 0x8035

	)

61 
	#ETH_P_ATALK
 0x809B

	)

62 
	#ETH_P_AARP
 0x80F3

	)

63 
	#ETH_P_8021Q
 0x8100

	)

64 
	#ETH_P_IPX
 0x8137

	)

65 
	#ETH_P_IPV6
 0x86DD

	)

66 
	#ETH_P_PAUSE
 0x8808

	)

67 
	#ETH_P_SLOW
 0x8809

	)

68 
	#ETH_P_WCCP
 0x883E

	)

70 
	#ETH_P_PPP_DISC
 0x8863

	)

71 
	#ETH_P_PPP_SES
 0x8864

	)

72 
	#ETH_P_MPLS_UC
 0x8847

	)

73 
	#ETH_P_MPLS_MC
 0x8848

	)

74 
	#ETH_P_ATMMPOA
 0x884¯

	)

75 
	#ETH_P_LINK_CTL
 0x886¯

	)

76 
	#ETH_P_ATMFATE
 0x8884

	)

79 
	#ETH_P_PAE
 0x888E

	)

80 
	#ETH_P_AOE
 0x88A2

	)

81 
	#ETH_P_8021AD
 0x88A8

	)

82 
	#ETH_P_802_EX1
 0x88B5

	)

83 
	#ETH_P_TIPC
 0x88CA

	)

84 
	#ETH_P_8021AH
 0x88E7

	)

85 
	#ETH_P_1588
 0x88F7

	)

86 
	#ETH_P_FCOE
 0x8906

	)

87 
	#ETH_P_TDLS
 0x890D

	)

88 
	#ETH_P_FIP
 0x8914

	)

89 
	#ETH_P_QINQ1
 0x9100

	)

90 
	#ETH_P_QINQ2
 0x9200

	)

91 
	#ETH_P_QINQ3
 0x9300

	)

92 
	#ETH_P_EDSA
 0xDADA

	)

93 
	#ETH_P_AF_IUCV
 0xFBFB

	)

99 
	#ETH_P_802_3
 0x0001

	)

100 
	#ETH_P_AX25
 0x0002

	)

101 
	#ETH_P_ALL
 0x0003

	)

102 
	#ETH_P_802_2
 0x0004

	)

103 
	#ETH_P_SNAP
 0x0005

	)

104 
	#ETH_P_DDCMP
 0x0006

	)

105 
	#ETH_P_WAN_PPP
 0x0007

	)

106 
	#ETH_P_PPP_MP
 0x0008

	)

107 
	#ETH_P_LOCALTALK
 0x0009

	)

108 
	#ETH_P_CAN
 0x000C

	)

109 
	#ETH_P_PPPTALK
 0x0010

	)

110 
	#ETH_P_TR_802_2
 0x0011

	)

111 
	#ETH_P_MOBITEX
 0x0015

	)

112 
	#ETH_P_CONTROL
 0x0016

	)

113 
	#ETH_P_IRDA
 0x0017

	)

114 
	#ETH_P_ECONET
 0x0018

	)

115 
	#ETH_P_HDLC
 0x0019

	)

116 
	#ETH_P_ARCNET
 0x001A

	)

117 
	#ETH_P_DSA
 0x001B

	)

118 
	#ETH_P_TRAILER
 0x001C

	)

119 
	#ETH_P_PHONET
 0x00F5

	)

120 
	#ETH_P_IEEE802154
 0x00F6

	)

121 
	#ETH_P_CAIF
 0x00F7

	)

127 
	sëhhdr
 {

128 
	mh_de°
[
ETH_ALEN
];

129 
	mh_sour˚
[
ETH_ALEN
];

130 
__be16
 
	mh_¥Ÿo
;

131 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/if_link.h

1 #i‚de‡
_LINUX_IF_LINK_H


2 
	#_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s
 {

9 
__u32
 
	mrx_∑ckës
;

10 
__u32
 
	mtx_∑ckës
;

11 
__u32
 
	mrx_byãs
;

12 
__u32
 
	mtx_byãs
;

13 
__u32
 
	mrx_îr‹s
;

14 
__u32
 
	mtx_îr‹s
;

15 
__u32
 
	mrx_dr›≥d
;

16 
__u32
 
	mtx_dr›≥d
;

17 
__u32
 
	mmu…iˇ°
;

18 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

41 
	sπ∆_lök_°©s64
 {

42 
__u64
 
	mrx_∑ckës
;

43 
__u64
 
	mtx_∑ckës
;

44 
__u64
 
	mrx_byãs
;

45 
__u64
 
	mtx_byãs
;

46 
__u64
 
	mrx_îr‹s
;

47 
__u64
 
	mtx_îr‹s
;

48 
__u64
 
	mrx_dr›≥d
;

49 
__u64
 
	mtx_dr›≥d
;

50 
__u64
 
	mmu…iˇ°
;

51 
__u64
 
	mcﬁlisi⁄s
;

54 
__u64
 
	mrx_Àngth_îr‹s
;

55 
__u64
 
	mrx_ovî_îr‹s
;

56 
__u64
 
	mrx_¸c_îr‹s
;

57 
__u64
 
	mrx_‰ame_îr‹s
;

58 
__u64
 
	mrx_fifo_îr‹s
;

59 
__u64
 
	mrx_mis£d_îr‹s
;

62 
__u64
 
	mtx_ab‹ãd_îr‹s
;

63 
__u64
 
	mtx_ˇºõr_îr‹s
;

64 
__u64
 
	mtx_fifo_îr‹s
;

65 
__u64
 
	mtx_hóπbót_îr‹s
;

66 
__u64
 
	mtx_wödow_îr‹s
;

69 
__u64
 
	mrx_com¥es£d
;

70 
__u64
 
	mtx_com¥es£d
;

74 
	sπ∆_lök_ifm≠
 {

75 
__u64
 
	mmem_°¨t
;

76 
__u64
 
	mmem_íd
;

77 
__u64
 
	mba£_addr
;

78 
__u16
 
	múq
;

79 
__u8
 
	mdma
;

80 
__u8
 
	mp‹t
;

102 
	mIFLA_UNSPEC
,

103 
	mIFLA_ADDRESS
,

104 
	mIFLA_BROADCAST
,

105 
	mIFLA_IFNAME
,

106 
	mIFLA_MTU
,

107 
	mIFLA_LINK
,

108 
	mIFLA_QDISC
,

109 
	mIFLA_STATS
,

110 
	mIFLA_COST
,

111 
	#IFLA_COST
 
IFLA_COST


	)

112 
	mIFLA_PRIORITY
,

113 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

114 
	mIFLA_MASTER
,

115 
	#IFLA_MASTER
 
IFLA_MASTER


	)

116 
	mIFLA_WIRELESS
,

117 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

118 
	mIFLA_PROTINFO
,

119 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

120 
	mIFLA_TXQLEN
,

121 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

122 
	mIFLA_MAP
,

123 
	#IFLA_MAP
 
IFLA_MAP


	)

124 
	mIFLA_WEIGHT
,

125 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

126 
	mIFLA_OPERSTATE
,

127 
	mIFLA_LINKMODE
,

128 
	mIFLA_LINKINFO
,

129 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

130 
	mIFLA_NET_NS_PID
,

131 
	mIFLA_IFALIAS
,

132 
	mIFLA_NUM_VF
,

133 
	mIFLA_VFINFO_LIST
,

134 
	mIFLA_STATS64
,

135 
	mIFLA_VF_PORTS
,

136 
	mIFLA_PORT_SELF
,

137 
	mIFLA_AF_SPEC
,

138 
	mIFLA_GROUP
,

139 
	mIFLA_NET_NS_FD
,

140 
	mIFLA_EXT_MASK
,

141 
	mIFLA_PROMISCUITY
,

142 
	#IFLA_PROMISCUITY
 
IFLA_PROMISCUITY


	)

143 
	m__IFLA_MAX


147 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

150 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

151 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

154 
	mIFLA_INET_UNSPEC
,

155 
	mIFLA_INET_CONF
,

156 
	m__IFLA_INET_MAX
,

159 
	#IFLA_INET_MAX
 (
__IFLA_INET_MAX
 - 1)

	)

192 
	mIFLA_INET6_UNSPEC
,

193 
	mIFLA_INET6_FLAGS
,

194 
	mIFLA_INET6_CONF
,

195 
	mIFLA_INET6_STATS
,

196 
	mIFLA_INET6_MCAST
,

197 
	mIFLA_INET6_CACHEINFO
,

198 
	mIFLA_INET6_ICMP6STATS
,

199 
	m__IFLA_INET6_MAX


202 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

204 
	siÊa_ˇcheöfo
 {

205 
__u32
 
	mmax_ªasm_Àn
;

206 
__u32
 
	mt°amp
;

207 
__u32
 
	mªachabÀ_time
;

208 
__u32
 
	mªå™s_time
;

212 
	mIFLA_INFO_UNSPEC
,

213 
	mIFLA_INFO_KIND
,

214 
	mIFLA_INFO_DATA
,

215 
	mIFLA_INFO_XSTATS
,

216 
	m__IFLA_INFO_MAX
,

219 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

224 
	mIFLA_VLAN_UNSPEC
,

225 
	mIFLA_VLAN_ID
,

226 
	mIFLA_VLAN_FLAGS
,

227 
	mIFLA_VLAN_EGRESS_QOS
,

228 
	mIFLA_VLAN_INGRESS_QOS
,

229 
	m__IFLA_VLAN_MAX
,

232 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

234 
	siÊa_vœn_Êags
 {

235 
__u32
 
	mÊags
;

236 
__u32
 
	mmask
;

240 
	mIFLA_VLAN_QOS_UNSPEC
,

241 
	mIFLA_VLAN_QOS_MAPPING
,

242 
	m__IFLA_VLAN_QOS_MAX


245 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

247 
	siÊa_vœn_qos_m≠pög
 {

248 
__u32
 
	m‰om
;

249 
__u32
 
	mto
;

254 
	mIFLA_MACVLAN_UNSPEC
,

255 
	mIFLA_MACVLAN_MODE
,

256 
	mIFLA_MACVLAN_FLAGS
,

257 
	m__IFLA_MACVLAN_MAX
,

260 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

262 
	emacvœn_mode
 {

263 
	mMACVLAN_MODE_PRIVATE
 = 1,

264 
	mMACVLAN_MODE_VEPA
 = 2,

265 
	mMACVLAN_MODE_BRIDGE
 = 4,

266 
	mMACVLAN_MODE_PASSTHRU
 = 8,

269 
	#MACVLAN_FLAG_NOPROMISC
 1

	)

274 
	mIFLA_VF_INFO_UNSPEC
,

275 
	mIFLA_VF_INFO
,

276 
	m__IFLA_VF_INFO_MAX
,

279 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

282 
	mIFLA_VF_UNSPEC
,

283 
	mIFLA_VF_MAC
,

284 
	mIFLA_VF_VLAN
,

285 
	mIFLA_VF_TX_RATE
,

286 
	mIFLA_VF_SPOOFCHK
,

287 
	m__IFLA_VF_MAX
,

290 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

292 
	siÊa_vf_mac
 {

293 
__u32
 
	mvf
;

294 
__u8
 
	mmac
[32];

297 
	siÊa_vf_vœn
 {

298 
__u32
 
	mvf
;

299 
__u32
 
	mvœn
;

300 
__u32
 
	mqos
;

303 
	siÊa_vf_tx_øã
 {

304 
__u32
 
	mvf
;

305 
__u32
 
	møã
;

308 
	siÊa_vf_•oofchk
 {

309 
__u32
 
	mvf
;

310 
__u32
 
	m£âög
;

329 
	mIFLA_VF_PORT_UNSPEC
,

330 
	mIFLA_VF_PORT
,

331 
	m__IFLA_VF_PORT_MAX
,

334 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

337 
	mIFLA_PORT_UNSPEC
,

338 
	mIFLA_PORT_VF
,

339 
	mIFLA_PORT_PROFILE
,

340 
	mIFLA_PORT_VSI_TYPE
,

341 
	mIFLA_PORT_INSTANCE_UUID
,

342 
	mIFLA_PORT_HOST_UUID
,

343 
	mIFLA_PORT_REQUEST
,

344 
	mIFLA_PORT_RESPONSE
,

345 
	m__IFLA_PORT_MAX
,

348 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

350 
	#PORT_PROFILE_MAX
 40

	)

351 
	#PORT_UUID_MAX
 16

	)

352 
	#PORT_SELF_VF
 -1

	)

355 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

356 
	mPORT_REQUEST_PREASSOCIATE_RR
,

357 
	mPORT_REQUEST_ASSOCIATE
,

358 
	mPORT_REQUEST_DISASSOCIATE
,

362 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

363 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

364 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

365 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

366 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

367 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

368 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

370 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

371 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

372 
	mPORT_PROFILE_RESPONSE_INVALID
,

373 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

374 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

375 
	mPORT_PROFILE_RESPONSE_ERROR
,

378 
	siÊa_p‹t_vsi
 {

379 
__u8
 
	mvsi_mgr_id
;

380 
__u8
 
	mvsi_ty≥_id
[3];

381 
__u8
 
	mvsi_ty≥_vîsi⁄
;

382 
__u8
 
	m∑d
[3];

	@/usr/include/linux/neighbour.h

1 #i‚de‡
__LINUX_NEIGHBOUR_H


2 
	#__LINUX_NEIGHBOUR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	sndmsg
 {

8 
__u8
 
	mndm_Ámûy
;

9 
__u8
 
	mndm_∑d1
;

10 
__u16
 
	mndm_∑d2
;

11 
__s32
 
	mndm_ifödex
;

12 
__u16
 
	mndm_°©e
;

13 
__u8
 
	mndm_Êags
;

14 
__u8
 
	mndm_ty≥
;

18 
	mNDA_UNSPEC
,

19 
	mNDA_DST
,

20 
	mNDA_LLADDR
,

21 
	mNDA_CACHEINFO
,

22 
	mNDA_PROBES
,

23 
	m__NDA_MAX


26 
	#NDA_MAX
 (
__NDA_MAX
 - 1)

	)

32 
	#NTF_USE
 0x01

	)

33 
	#NTF_PROXY
 0x08

	)

34 
	#NTF_ROUTER
 0x80

	)

36 
	#NTF_SELF
 0x02

	)

37 
	#NTF_MASTER
 0x04

	)

43 
	#NUD_INCOMPLETE
 0x01

	)

44 
	#NUD_REACHABLE
 0x02

	)

45 
	#NUD_STALE
 0x04

	)

46 
	#NUD_DELAY
 0x08

	)

47 
	#NUD_PROBE
 0x10

	)

48 
	#NUD_FAILED
 0x20

	)

51 
	#NUD_NOARP
 0x40

	)

52 
	#NUD_PERMANENT
 0x80

	)

53 
	#NUD_NONE
 0x00

	)

60 
	snda_ˇcheöfo
 {

61 
__u32
 
	mndm_c⁄fúmed
;

62 
__u32
 
	mndm_u£d
;

63 
__u32
 
	mndm_upd©ed
;

64 
__u32
 
	mndm_ªf˙t
;

92 
	sndt_°©s
 {

93 
__u64
 
	mndts_Ælocs
;

94 
__u64
 
	mndts_de°roys
;

95 
__u64
 
	mndts_hash_grows
;

96 
__u64
 
	mndts_ªs_Áûed
;

97 
__u64
 
	mndts_lookups
;

98 
__u64
 
	mndts_hôs
;

99 
__u64
 
	mndts_rcv_¥obes_mˇ°
;

100 
__u64
 
	mndts_rcv_¥obes_uˇ°
;

101 
__u64
 
	mndts_≥riodic_gc_runs
;

102 
__u64
 
	mndts_f‹˚d_gc_runs
;

106 
	mNDTPA_UNSPEC
,

107 
	mNDTPA_IFINDEX
,

108 
	mNDTPA_REFCNT
,

109 
	mNDTPA_REACHABLE_TIME
,

110 
	mNDTPA_BASE_REACHABLE_TIME
,

111 
	mNDTPA_RETRANS_TIME
,

112 
	mNDTPA_GC_STALETIME
,

113 
	mNDTPA_DELAY_PROBE_TIME
,

114 
	mNDTPA_QUEUE_LEN
,

115 
	mNDTPA_APP_PROBES
,

116 
	mNDTPA_UCAST_PROBES
,

117 
	mNDTPA_MCAST_PROBES
,

118 
	mNDTPA_ANYCAST_DELAY
,

119 
	mNDTPA_PROXY_DELAY
,

120 
	mNDTPA_PROXY_QLEN
,

121 
	mNDTPA_LOCKTIME
,

122 
	mNDTPA_QUEUE_LENBYTES
,

123 
	m__NDTPA_MAX


125 
	#NDTPA_MAX
 (
__NDTPA_MAX
 - 1)

	)

127 
	sndtmsg
 {

128 
__u8
 
	mndtm_Ámûy
;

129 
__u8
 
	mndtm_∑d1
;

130 
__u16
 
	mndtm_∑d2
;

133 
	sndt_c⁄fig
 {

134 
__u16
 
	mndtc_key_Àn
;

135 
__u16
 
	mndtc_íåy_size
;

136 
__u32
 
	mndtc_íåõs
;

137 
__u32
 
	mndtc_œ°_Êush
;

138 
__u32
 
	mndtc_œ°_ønd
;

139 
__u32
 
	mndtc_hash_∫d
;

140 
__u32
 
	mndtc_hash_mask
;

141 
__u32
 
	mndtc_hash_chaö_gc
;

142 
__u32
 
	mndtc_¥oxy_qÀn
;

146 
	mNDTA_UNSPEC
,

147 
	mNDTA_NAME
,

148 
	mNDTA_THRESH1
,

149 
	mNDTA_THRESH2
,

150 
	mNDTA_THRESH3
,

151 
	mNDTA_CONFIG
,

152 
	mNDTA_PARMS
,

153 
	mNDTA_STATS
,

154 
	mNDTA_GC_INTERVAL
,

155 
	m__NDTA_MAX


157 
	#NDTA_MAX
 (
__NDTA_MAX
 - 1)

	)

	@/usr/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/sockë.h
>

5 
	~<löux/ty≥s.h
>

7 
	#NETLINK_ROUTE
 0

	)

8 
	#NETLINK_UNUSED
 1

	)

9 
	#NETLINK_USERSOCK
 2

	)

10 
	#NETLINK_FIREWALL
 3

	)

11 
	#NETLINK_SOCK_DIAG
 4

	)

12 
	#NETLINK_NFLOG
 5

	)

13 
	#NETLINK_XFRM
 6

	)

14 
	#NETLINK_SELINUX
 7

	)

15 
	#NETLINK_ISCSI
 8

	)

16 
	#NETLINK_AUDIT
 9

	)

17 
	#NETLINK_FIB_LOOKUP
 10

	)

18 
	#NETLINK_CONNECTOR
 11

	)

19 
	#NETLINK_NETFILTER
 12

	)

20 
	#NETLINK_IP6_FW
 13

	)

21 
	#NETLINK_DNRTMSG
 14

	)

22 
	#NETLINK_KOBJECT_UEVENT
 15

	)

23 
	#NETLINK_GENERIC
 16

	)

25 
	#NETLINK_SCSITRANSPORT
 18

	)

26 
	#NETLINK_ECRYPTFS
 19

	)

27 
	#NETLINK_RDMA
 20

	)

28 
	#NETLINK_CRYPTO
 21

	)

30 
	#NETLINK_INET_DIAG
 
NETLINK_SOCK_DIAG


	)

32 
	#MAX_LINKS
 32

	)

34 
	ssockaddr_∆
 {

35 
__kî√l_ß_Ámûy_t
 
	m∆_Ámûy
;

36 
	m∆_∑d
;

37 
__u32
 
	m∆_pid
;

38 
__u32
 
	m∆_groups
;

41 
	s∆msghdr
 {

42 
__u32
 
	m∆msg_Àn
;

43 
__u16
 
	m∆msg_ty≥
;

44 
__u16
 
	m∆msg_Êags
;

45 
__u32
 
	m∆msg_£q
;

46 
__u32
 
	m∆msg_pid
;

51 
	#NLM_F_REQUEST
 1

	)

52 
	#NLM_F_MULTI
 2

	)

53 
	#NLM_F_ACK
 4

	)

54 
	#NLM_F_ECHO
 8

	)

55 
	#NLM_F_DUMP_INTR
 16

	)

58 
	#NLM_F_ROOT
 0x100

	)

59 
	#NLM_F_MATCH
 0x200

	)

60 
	#NLM_F_ATOMIC
 0x400

	)

61 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

64 
	#NLM_F_REPLACE
 0x100

	)

65 
	#NLM_F_EXCL
 0x200

	)

66 
	#NLM_F_CREATE
 0x400

	)

67 
	#NLM_F_APPEND
 0x800

	)

78 
	#NLMSG_ALIGNTO
 4U

	)

79 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

80 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

81 
	#NLMSG_LENGTH
(
Àn
Ë(÷í)+
	`NLMSG_ALIGN
(
NLMSG_HDRLEN
))

	)

82 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

83 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

84 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

85 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

86 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

87 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

88 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

89 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

91 
	#NLMSG_NOOP
 0x1

	)

92 
	#NLMSG_ERROR
 0x2

	)

93 
	#NLMSG_DONE
 0x3

	)

94 
	#NLMSG_OVERRUN
 0x4

	)

96 
	#NLMSG_MIN_TYPE
 0x10

	)

98 
	s∆msgîr
 {

99 
	mîr‹
;

100 
∆msghdr
 
	mmsg
;

103 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

104 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

105 
	#NETLINK_PKTINFO
 3

	)

106 
	#NETLINK_BROADCAST_ERROR
 4

	)

107 
	#NETLINK_NO_ENOBUFS
 5

	)

109 
	s∆_pktöfo
 {

110 
__u32
 
	mgroup
;

113 
	#NET_MAJOR
 36

	)

116 
	mNETLINK_UNCONNECTED
 = 0,

117 
	mNETLINK_CONNECTED
,

129 
	s∆©å
 {

130 
__u16
 
	m∆a_Àn
;

131 
__u16
 
	m∆a_ty≥
;

144 
	#NLA_F_NESTED
 (1 << 15)

	)

145 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

146 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

148 
	#NLA_ALIGNTO
 4

	)

149 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

150 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/nbee_extractedfieldreader.h

7 #¥agm®
⁄˚


18 #ifde‡
NBEE_EXPORTS


21 #¥agm®
w¨nög
(
dißbÀ
: 4005)

22 
	#DLL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

24 #i‚de‡
DLL_EXPORT


25 
	#DLL_EXPORT


	)

29 
	~<nbpÊcompûî.h
>

31 
	~<°rög
>

32 
	~<li°
>

33 
usög
 
«me•a˚
 
	g°d
;

45 
	gli°
<
	t°rög
> 
	t_nbExåa˘edFõldsNameLi°
;

81 ˛as†
	cDLL_EXPORT
 
	mnbExåa˘edFõldsRódî


83 
‰õnd
 
˛ass
 
	mnbìPackëEngöe
;

85 
	mpublic
:

90 
	$nbExåa˘edFõldsRódî
(){};

95 
vútuÆ
 ~
	$nbExåa˘edFõldsRódî
(){
	}
};

107 
vútuÆ
 
_nbExåa˘edFõldsDes¸ùt‹
 *
GëFõld
(
°rög
 
FõldName
)=0;

118 
vútuÆ
 
_nbExåa˘edFõldsDes¸ùt‹
* 
GëFõld
(
Index
)=0;

127 
vútuÆ
 
_nbExåa˘edFõldsDes¸ùt‹Ve˘‹
* 
GëFõlds
()=0;

138 
vútuÆ
 
_nbExåa˘edFõldsNameLi°
 
GëFõldNames
()=0;

159 
vútuÆ
 
IsVÆid
(
_nbExåa˘edFõldsDes¸ùt‹
 *
FõldDes¸ùt‹
)=0;

169 
vútuÆ
 
IsCom∂ëe
()=0;

172 
	g¥Ÿe˘ed
:

184 
vútuÆ
 
FûlDes¸ùt‹s
()=0;

	@/usr/include/nbee_initcleanup.h

9 #¥agm®
⁄˚


19 #ifde‡
NBEE_EXPORTS


22 #¥agm®
w¨nög
(
dißbÀ
: 4005)

23 
	#DLL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

25 #i‚de‡
DLL_EXPORT


26 
	#DLL_EXPORT


	)

46 
	#NETPDL_VERSION_MAJOR
 0

	)

48 
	#NETPDL_VERSION_MINOR
 2

	)

50 
	#NETBEE_VERSION_MAJOR
 0

	)

52 
	#NETBEE_VERSION_MINOR
 2

	)

54 
	#NETBEE_VERSION_REVCODE
 13

	)

56 
	#NETBEE_VERSION_DATE
 "22-08-2012"

	)

61 
	s_nbVîsi⁄


64 
	mMaj‹
;

66 
	mMö‹
;

68 
	mRevCode
;

70 c⁄° * 
	mD©e
;

72 
	mSuµ‹ãdNëPDLMaj‹
;

74 
	mSuµ‹ãdNëPDLMö‹
;

76 * 
	mNëPDLCª©‹
;

78 * 
	mNëPDLD©e
;

80 
	mNëPDLMaj‹
;

82 
	mNëPDLMö‹
;

83 } 
	t_nbVîsi⁄
;

118 
DLL_EXPORT
 
nbInôülize
(c⁄° *
NëPDLFûeLoˇti⁄
, 
Fœgs
, *
EºBuf
, 
EºBufSize
);

128 
DLL_EXPORT
 
nbIsInôülized
();

140 
DLL_EXPORT
 
nbCÀ™up
();

148 
DLL_EXPORT
 
_nbVîsi⁄
* 
nbGëVîsi⁄
();

174 
DLL_EXPORT
 
nbUpd©eNëPDLDes¸ùti⁄
(c⁄° *
NëPDLFûeLoˇti⁄
, *
EºBuf
, 
EºBufSize
);

199 
DLL_EXPORT
 
nbDow∆ﬂdNewNëPDLFûe
(** 
NëPDLD©aBuf„r
, * 
EºBuf
, 
EºBufSize
);

228 
DLL_EXPORT
 
nbDow∆ﬂdNewNëPDLSchemaFûe
(** 
NëPDLSchemaD©aBuf„r
, ** 
NëPDLSchemaMöD©aBuf„r
, * 
EºBuf
, 
EºBufSize
);

263 
DLL_EXPORT
 
nbDow∆ﬂdAndUpd©eNëPDLFûe
(c⁄° * 
NëPDLFûeLoˇti⁄
, * 
EºBuf
, 
EºBufSize
);

293 
DLL_EXPORT
 
nbDow∆ﬂdAndUpd©eNëPDLSchemaFûe
(c⁄° * 
NëPDLSchemaFûeLoˇti⁄
, * 
EºBuf
, 
EºBufSize
);

317 
DLL_EXPORT
 
_nbNëPDLD©aba£
* 
nbGëNëPDLD©aba£
(*
EºBuf
, 
EºBufSize
);

	@/usr/include/nbee_netpdlutils.h

9 #¥agm®
⁄˚


20 #ifde‡
NBEE_EXPORTS


23 #¥agm®
w¨nög
(
dißbÀ
: 4005)

24 
	#DLL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

26 #i‚de‡
DLL_EXPORT


27 
	#DLL_EXPORT


	)

50 ˛as†
	cDLL_EXPORT
 
	mnbNëPDLUtûs


52 
	mpublic
:

53 
	$nbNëPDLUtûs
() {};

54 
vútuÆ
 ~
	$nbNëPDLUtûs
(Ë{
	}
};

97 
vútuÆ
 
F‹m©NëPDLFõld
(c⁄° *
PrŸoName
, c⁄° *
FõldName
, c⁄° *
FõldDumpPå
,

98 
FõldSize
, *
F‹m©ãdFõld
, 
F‹m©ãdFõldSize
)= 0;

143 
vútuÆ
 
F‹m©NëPDLFõld
(c⁄° *
Tem∂©eName
, c⁄° *
FõldDumpPå
,

144 
FõldSize
, 
FõldIsInNëw‹kByãOrdî
, *
F‹m©ãdFõld
, 
F‹m©ãdFõldSize
)= 0;

184 
vútuÆ
 
F‹m©NëPDLFõld
(
Fa°PrötögFun˘i⁄Code
, c⁄° *
FõldDumpPå
,

185 
FõldSize
, *
F‹m©ãdFõld
, 
F‹m©ãdFõldSize
)= 0;

207 
vútuÆ
 
GëFa°PrötögFun˘i⁄Code
(c⁄° *
PrŸoName
, c⁄° *
FõldName
, *
Fa°PrötögFun˘i⁄Code
)= 0;

266 
vútuÆ
 
GëHexVÆueNëPDLFõld
(c⁄° *
PrŸoName
, c⁄° *
FõldName
, c⁄° *
F‹m©ãdFõld
,

267 *
FõldHexVÆue
, *
FõldHexSize
, 
boﬁ
 
Bö¨yEncodög
)= 0;

323 
vútuÆ
 
GëHexVÆueNëPDLFõld
(c⁄° *
Tem∂©eName
, c⁄° *
F‹m©ãdFõld
,

324 *
FõldHexVÆue
, *
FõldHexSize
, 
boﬁ
 
Bö¨yEncodög
)= 0;

337 
HexCh¨ToDec
(
HexCh¨
);

357 
HexDumpAsciiToHexDumpBö
(*
HexDumpAscii
, *
HexDumpBö
, 
HexDumpBöSize
);

386 
HexDumpBöToHexDumpAscii
(*
HexDumpBö
, 
HexDumpBöSize
, 
HexDumpIsInNëw‹kByãOrdî
, *
HexDumpAscii
, 
HexDumpAsciiSize
);

395 *
	$GëLa°Eº‹
(Ë{  
m_îrbuf
; 
	}
}

397 
	g¥Ÿe˘ed
:

399 
m_îrbuf
[2048];

423 
DLL_EXPORT
 
nbNëPDLUtûs
* 
nbAŒoˇãNëPDLUtûs
(*
EºBuf
, 
EºBufSize
);

431 
DLL_EXPORT
 
nbDóŒoˇãNëPDLUtûs
(
nbNëPDLUtûs
* 
NëPDLUtûs
);

	@/usr/include/nbee_packetdecoder.h

9 #¥agm®
⁄˚


19 #ifde‡
NBEE_EXPORTS


22 #¥agm®
w¨nög
(
dißbÀ
: 4005)

23 
	#DLL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

25 #i‚de‡
DLL_EXPORT


26 
	#DLL_EXPORT


	)

32 
	~<nbì_pxmÃódî.h
>

33 
	~<nbì_∑ckëdecodîutûs.h
>

75 
	enbPackëDecodîFœgs


83 
	mnbDECODER_GENERATEPDML
= 1,

91 
	mnbDECODER_GENERATEPDML_COMPLETE
= 2,

102 
	mnbDECODER_GENERATEPDML_RAWDUMP
= 4,

109 
	mnbDECODER_GENERATEPSML
= 8,

122 
	mnbDECODER_KEEPALLPDML
= 16,

135 
	mnbDECODER_KEEPALLPSML
= 32

162 ˛as†
	cDLL_EXPORT
 
	mnbPackëDecodî


164 
	mpublic
:

165 
	$nbPackëDecodî
() {};

166 
vútuÆ
 ~
	$nbPackëDecodî
(Ë{
	}
};

202 
vútuÆ
 
DecodePackë
(
nbNëPDLLökLayî_t
 
LökLayîTy≥
, 
PackëCou¡î
,

203 c⁄° 
pˇp_pkthdr
 *
PˇpHódî
, c⁄° *
PˇpPktD©a
)= 0;

220 
vútuÆ
 
nbPSMLRódî
 *
GëPSMLRódî
()= 0;

237 
vútuÆ
 
nbPDMLRódî
 *
GëPDMLRódî
()= 0;

252 
vútuÆ
 
nbPackëDecodîV¨s
* 
GëPackëDecodîV¨s
()= 0;

270 
vútuÆ
 
nbPackëDecodîLookupTabÀs
* 
GëPackëDecodîLookupTabÀs
()= 0;

279 *
	$GëLa°Eº‹
(Ë{  
m_îrbuf
; 
	}
}

281 
	g¥Ÿe˘ed
:

282 
m_îrbuf
[2048];

313 
DLL_EXPORT
 
nbPackëDecodî
* 
nbAŒoˇãPackëDecodî
(
Fœgs
, *
EºBuf
, 
EºBufSize
);

321 
DLL_EXPORT
 
nbDóŒoˇãPackëDecodî
(
nbPackëDecodî
* 
PackëDecodî
);

332 (
	tnbPackëDecodîExã∫ÆCÆlH™dÀr
)(
	t_nbNëPDLEÀmítBa£
 *);

354 
	`nbRegi°îPackëDecodîCÆlH™dÀ
(* 
Name•a˚
, * 
Fun˘i⁄
, 
nbPackëDecodîExã∫ÆCÆlH™dÀr
* 
Exã∫ÆH™dÀr
, *
EºBuf
, 
EºBufSize
);

	@/usr/include/nbee_packetdumpfiles.h

9 #¥agm®
⁄˚


19 #ifde‡
NBEE_EXPORTS


22 #¥agm®
w¨nög
(
dißbÀ
: 4005)

23 
	#DLL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

25 #i‚de‡
DLL_EXPORT


26 
	#DLL_EXPORT


	)

64 ˛as†
	cDLL_EXPORT
 
	mnbPackëDumpFûePˇp


66 
	mpublic
:

67 
	$nbPackëDumpFûePˇp
() {};

68 
vútuÆ
 ~
	$nbPackëDumpFûePˇp
(Ë{
	}
};

85 
vútuÆ
 
O≥nDumpFûe
(c⁄° * 
FûeName
, 
boﬁ
 
Cª©eIndexög

Ál£
)= 0;

107 
vútuÆ
 
Cª©eDumpFûe
(c⁄° * 
FûeName
, 
LökLayîTy≥
, 
boﬁ
 
Cª©eIndexög

Ál£
)= 0;

115 
vútuÆ
 
Clo£DumpFûe
()= 0;

129 
vútuÆ
 
GëLökLayîTy≥
(
nbNëPDLLökLayî_t
 &
LökLayîTy≥
)= 0;

147 
vútuÆ
 
AµídPackë
(c⁄° 
pˇp_pkthdr
* 
PktHódî
, c⁄° * 
PktD©a
, 
boﬁ
 
FlushD©a

Ál£
)= 0;

165 
vútuÆ
 
GëPackë
(
PackëNumbî
, 
pˇp_pkthdr
** 
PktHódî
, c⁄° ** 
PktD©a
)= 0;

179 
vútuÆ
 
GëNextPackë
(
pˇp_pkthdr
** 
PktHódî
, c⁄° ** 
PktD©a
)= 0;

197 
vútuÆ
 
RemovePackë
(
PackëNumbî
)= 0;

200 
vútuÆ
 *
GëLa°Eº‹
()= 0;

224 
DLL_EXPORT
 
nbPackëDumpFûePˇp
* 
nbAŒoˇãPackëDumpFûePˇp
(*
EºBuf
, 
EºBufSize
);

232 
DLL_EXPORT
 
nbDóŒoˇãPackëDumpFûePˇp
(
nbPackëDumpFûePˇp
* 
PackëDumpFûePˇp
);

	@/usr/include/nbee_packetengine.h

7 #¥agm®
⁄˚


17 #ifde‡
NBEE_EXPORTS


20 #¥agm®
w¨nög
(
dißbÀ
: 4005)

21 
	#DLL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

23 #i‚de‡
DLL_EXPORT


24 
	#DLL_EXPORT


	)

29 
	~<nb¥Ÿodb_exp‹ts.h
>

30 
	~<nbpÊcompûî.h
>

34 
˛ass
 
	gnbExåa˘edFõldsRódî
;

35 
	g_nvmTSèmp
;

36 
	g_nvmRu¡imeEnvú⁄mít
;

56 
	enbNëVMCª©i⁄Fœg_t


58 
	mnbNETVM_CREATION_FLAG_COMPILEANDEXECUTE
,

59 
	mnbNETVM_CREATION_FLAG_COMPILEONLY


60 } 
	tnbNëVMCª©i⁄Fœg_t
;

90 ˛as†
	cDLL_EXPORT
 
	mnbPackëEngöe


93 
	mpublic
:

99 
	$nbPackëEngöe
() {};

104 
vútuÆ
 ~
	$nbPackëEngöe
(Ë{
	}
};

127 
vútuÆ
 
Compûe
(c⁄° * 
NëPFLFûãrSåög
, 
nbNëPDLLökLayî_t
 
LökLayî
, 
boﬁ
 
O±
 = 
åue
)=0;

145 
vútuÆ
 
InôNëVM
(
nbNëVMCª©i⁄Fœg_t
 
Cª©i⁄Fœg
)=0;

159 
vútuÆ
 
nbExåa˘edFõldsRódî
* 
GëExåa˘edFõldsRódî
()=0;

182 
vútuÆ
 
Pro˚ssPackë
(c⁄° *
PktD©a
, 
PktLí
)=0;

190 
vútuÆ
 
_nbNëPFLCompûîMesßges
 *
GëCompMesßgeLi°
()=0;

198 
vútuÆ
 *
GëLa°Eº‹
()=0;

217 
vútuÆ
 
Inje˘Code
(
nbNëPDLLökLayî_t
 
LökLayî
, *
NëILCode
, 
_nbExåa˘edFõldsDes¸ùt‹Ve˘‹
* 
Exåa˘edFõldsDes¸ùt‹Ve˘‹
)=0;

227 
vútuÆ
 * 
GëCompûedCode
()=0;

241 
vútuÆ
 
Gíî©eBackídCode
(
BackídId
, 
boﬁ
 
O±
, boﬁ 
I∆öe
, c⁄° * 
DumpFûeName
)=0;

248 
vútuÆ
 * 
GëAs£mblyCode
() = 0;

259 
vútuÆ
 
SëDebugLevñ
(c⁄° 
DebugLevñ
)=0;

265 
vútuÆ
 
SëNëILCodeFûíame
(c⁄° *
dumpNëILCodeFûíame
)=0;

271 
vútuÆ
 
SëHIRCodeFûíame
(c⁄° *
dumpHIRCodeFûíame
)=0;

277 
vútuÆ
 
SëLIRCodeFûíame
(c⁄° *
dumpLIRCodeFûíame
)=0;

283 
vútuÆ
 
SëLIRGøphFûíame
(c⁄° *
dumpLIRGøphFûíame
)=0;

289 
vútuÆ
 
SëLIRNoO±GøphFûíame
(c⁄° *
dumpLIRNoO±GøphFûíame
)=0;

295 
vútuÆ
 
SëNoCodeGøphFûíame
(c⁄° *
dumpNoCodeGøphFûíame
)=0;

301 
vútuÆ
 
SëNëILGøphFûíame
(c⁄° *
dumpNëILGøphFûíame
)=0;

307 
vútuÆ
 
SëPrŸoGøphFûíame
(c⁄° *
dumpPrŸoGøphFûíame
)=0;

313 
vútuÆ
 
SëFûãrAutom©⁄Fûíame
(c⁄° *
dumpFûãrAutom©⁄Fûíame
)=0;

320 
vútuÆ
 
_nvmRu¡imeEnvú⁄mít
 *
GëNëVMRu¡imeEnvú⁄mít
()=0;

336 
DLL_EXPORT
 
nbPackëEngöe
 *
nbAŒoˇãPackëEngöe
(
boﬁ
 
U£Jô
, *
EºBuf
, 
EºBufSize
);

344 
DLL_EXPORT
 
nbDóŒoˇãPackëEngöe
(
nbPackëEngöe
 *
PackëEngöe
);

	@/usr/include/nbee_profiler.h

7 #¥agm®
⁄˚


10 #ifde‡
NBEE_EXPORTS


13 #¥agm®
w¨nög
(
dißbÀ
: 4005)

14 
	#DLL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

16 #i‚de‡
DLL_EXPORT


17 
	#DLL_EXPORT


	)

22 
	~<°döt.h
>

24 #ifde‡
_MSC_VER


25 
	~<öåö.h
>

60 #ifde‡
__˝lu•lus


67 
DLL_EXPORT
 
uöt64_t
 
nbProfûîGëTime
();

80 
DLL_EXPORT
 
öt64_t
 
nbProfûîGëMósuªCo°
();

99 
DLL_EXPORT
 
uöt64_t
 
nbProfûîGëMi¸o
();

103 
	s_nbProfûîResu…s


105 
öt64_t
 
Avîage
;

106 
StdDev
;

107 
öt64_t
 
Medün
;

108 
öt64_t
 
Mode
;

109 
ModeFªquícy
;

111 
öt64_t
 
AvîageWôhoutOuéõrs
;

112 
StdDevWôhoutOuéõrs
;

113 
öt64_t
 
MedünWôhoutOuéõrs
;

114 
öt64_t
 
ModeWôhoutOuéõrs
;

115 
ModeFªquícyWôhoutOuéõrs
;

117 
VÆidSam∂es
;

118 
ChavíëOuéõrs
;

119 } 
	t_nbProfûîResu…s
;

145 ˛as†
	cDLL_EXPORT
 
nbProfûî


147 
public
:

148 
nbProfûî
() {};

149 
vútuÆ
 ~
nbProfûî
() {};

173 
vútuÆ
 
Inôülize
(
MaxNumSam∂es
, 
NumRunsPîSam∂e
1, 
DisˇrdFú°
0, 
DisˇrdSmÆÀ°
0, 
DisˇrdBigge°
= 0)= 0;

186 
vútuÆ
 
St‹eSam∂e
(
öt64_t
 
SèπögTime
, i¡64_à
EndögTime
)= 0;

200 
vútuÆ
 
Pro˚ssProfûîD©a
()= 0;

214 
vútuÆ
 
_nbProfûîResu…s
* 
GëRawResu…s
()= 0;

230 
vútuÆ
 
GëRawSam∂es
(
öt64_t
* &
Sam∂eSèπTicks
, i¡64_t* &
Sam∂eEndTicks
)= 0;

233 
vútuÆ
 
GëNumbîOfSam∂es
() = 0;

242 
vútuÆ
 
GëNumbîOfMónögfulSam∂es
() = 0;

255 
vútuÆ
 
F‹m©Resu…s
(* 
Resu…Buf„r
, 
Resu…Buf„rSize
, 
boﬁ
 
PrötCom∑˘
=
Ál£
)= 0;

264 
vútuÆ
 *
GëLa°Eº‹
()= 0;

287 
DLL_EXPORT
 
nbProfûî
* 
nbAŒoˇãProfûî
(*
EºBuf
, 
EºBufSize
);

295 
DLL_EXPORT
 
nbDóŒoˇãProfûî
(
nbProfûî
* 
Profûî
);

298 #ifde‡
__˝lu•lus


	@/usr/include/nbee_pxmlreader.h

9 #¥agm®
⁄˚


19 #ifde‡
NBEE_EXPORTS


22 #¥agm®
w¨nög
(
dißbÀ
: 4005)

23 
	#DLL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

25 #i‚de‡
DLL_EXPORT


26 
	#DLL_EXPORT


	)

53 ˛as†
	cDLL_EXPORT
 
	mnbPSMLRódî


55 
	mpublic
:

56 
	$nbPSMLRódî
() {};

57 
vútuÆ
 ~
	$nbPSMLRódî
(Ë{
	}
};

79 
vútuÆ
 
GëSumm¨y
(**
Summ¨yPå
) = 0;

96 
vútuÆ
 
GëSumm¨yXML
(* &
Summ¨yPå
, &
Summ¨yLígth
) = 0;

122 
vútuÆ
 
GëCuºítPackë
(**
PackëPå
) = 0;

139 
vútuÆ
 
GëCuºítPackëXML
(* &
PackëPå
, &
PackëLígth
) = 0;

168 
vútuÆ
 
GëPackë
(
PackëNumbî
, **
PackëPå
) = 0;

188 
vútuÆ
 
GëPackëXML
(
PackëNumbî
, * &
PackëPå
, &
PackëLígth
) = 0;

206 
vútuÆ
 
RemovePackë
(
PackëNumbî
) = 0;

225 
vútuÆ
 
SaveDocumítAs
(c⁄° *
Fûíame
) = 0;

233 
vútuÆ
 *
GëLa°Eº‹
() = 0;

240 
	g_nbPDMLFõld
;

241 
	g_nbPDMLPrŸo
;

242 
	g_nbPDMLPackë
;

252 
	s_nbPDMLPackë


254 
	mNumbî
;

255 
	mLígth
;

256 
	mC≠tuªdLígth
;

257 
	mTime°ampSec
;

258 
	mTime°ampUSec
;

259 
_nbPDMLPrŸo
 *
	mFú°PrŸo
;

260 c⁄° * 
	mPackëDump
;

261 } 
	t_nbPDMLPackë
;

270 
	s_nbPDMLPrŸo


272 *
	mName
;

273 *
	mL⁄gName
;

274 
	mPosôi⁄
;

275 
	mSize
;

276 
_nbPDMLPackë
 *
	mPackëSumm¨y
;

277 
_nbPDMLPrŸo
 *
	mPªviousPrŸo
;

278 
_nbPDMLPrŸo
 *
	mNextPrŸo
;

279 
_nbPDMLFõld
 *
	mFú°Fõld
;

280 } 
	t_nbPDMLPrŸo
;

293 
	s_nbPDMLFõld


295 *
	mName
;

296 *
	mL⁄gName
;

297 *
	mShowVÆue
;

298 *
	mShowDëaûs
;

299 *
	mShowM≠
;

300 *
	mVÆue
;

301 *
	mMask
;

302 
	mPosôi⁄
;

303 
	mSize
;

304 
boﬁ
 
	misFõld
;

305 
_nbPDMLPrŸo
 *
	mP¨ítPrŸo
;

306 
_nbPDMLFõld
 *
	mP¨ítFõld
;

307 
_nbPDMLFõld
 *
	mPªviousFõld
;

308 
_nbPDMLFõld
 *
	mNextFõld
;

309 
_nbPDMLFõld
 *
	mFú°Chûd
;

310 } 
	t_nbPDMLFõld
;

327 ˛as†
	cDLL_EXPORT
 
	mnbPDMLRódî


329 
	mpublic
:

330 
	$nbPDMLRódî
() {};

331 
vútuÆ
 ~
	$nbPDMLRódî
(Ë{
	}
};

350 
vútuÆ
 
GëCuºítPackë
(
_nbPDMLPackë
 **
PDMLPackë
) = 0;

373 
vútuÆ
 
GëCuºítPackëXML
(* &
PackëPå
, &
PackëLígth
) = 0;

397 
vútuÆ
 
GëPackë
(
PackëNumbî
, 
_nbPDMLPackë
 **
PDMLPackë
) = 0;

420 
vútuÆ
 
GëPackëXML
(
PackëNumbî
, * &
PackëPå
, &
PackëLígth
) = 0;

438 
vútuÆ
 
RemovePackë
(
PackëNumbî
) = 0;

457 
vútuÆ
 
SaveDocumítAs
(c⁄° *
Fûíame
) = 0;

510 
vútuÆ
 
GëPDMLFõld
(*
PrŸoName
, *
FõldName
, 
_nbPDMLFõld
 *
Fú°Fõld
, _nbPDMLFõld **
Exåa˘edFõld
) = 0;

570 
vútuÆ
 
GëPDMLFõld
(
PackëNumbî
, *
PrŸoName
, *
FõldName
, 
_nbPDMLFõld
 *
Fú°Fõld
, _nbPDMLFõld **
Exåa˘edFõld
) = 0;

578 
vútuÆ
 *
GëLa°Eº‹
() = 0;

601 
DLL_EXPORT
 
nbPSMLRódî
* 
nbAŒoˇãPSMLRódî
(*
FûeName
, *
EºBuf
, 
EºBufSize
);

609 
DLL_EXPORT
 
nbDóŒoˇãPSMLRódî
(
nbPSMLRódî
* 
PSMLRódî
);

631 
DLL_EXPORT
 
nbPDMLRódî
* 
nbAŒoˇãPDMLRódî
(*
FûeName
, *
EºBuf
, 
EºBufSize
);

639 
DLL_EXPORT
 
nbDóŒoˇãPDMLRódî
(
nbPDMLRódî
* 
PDMLRódî
);

	@/usr/include/nbpflcompiler.h

8 #¥agm®
⁄˚


38 
	~<nb¥Ÿodb_exp‹ts.h
>

39 
	~<nbpÊcompûî_exp‹ts.h
>

42 
	~<°rög
>

43 
	~<li°
>

44 
usög
 
«me•a˚
 
	g°d
;

54 
˛ass
 
	gNëPFLFr⁄tEnd
;

55 
˛ass
 
	gEº‹Rec‹dî
;

58 
	#N_ALLFIELDS
 128

59 
	#INFO_FIELDS_SIZE
 4

60 
	#INFO_FIELDS_SIZE_ALL
 6

61 

	)

63 
	#nbNETPFLCOMPILER_MAX_ALLFIELDS
 128

64 
	#nbNETPFLCOMPILER_INFO_FIELDS_SIZE
 4

65 
	#nbNETPFLCOMPILER_INFO_FIELDS_SIZE_ALL
 6

66 

	)

67 
	#nbNETPFLCOMPILER_MAX_PROTO_INSTANCES
 5

68 
	#nbNETPFLCOMPILER_MAX_FIELD_INSTANCES
 5

69 

	)

75 #i‚de‡
nbSUCCESS


76 
	#nbSUCCESS
 0

77 
	#nbFAILURE
 -1

78 
	#nbWARNING
 -2

80 

	)

82 #ifde‡
PFLCOMPILER_EXPORTS


85 #¥agm®
w¨nög
(
dißbÀ
: 4005)

86 
	#DLL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

88 #i‚de‡
DLL_EXPORT


89 
	#DLL_EXPORT


	)

94 #ifde‡
WIN32


95 #¥agm®
w¨nög
(
dißbÀ
: 4251)

99 
	gSymbﬁFõld
;

101 
	gli°
<
	tSymbﬁFõld
*> 
	tFõldsLi°_t
;

112 ˛as†
	cDLL_EXPORT
 
	mnbNëPFLCompûî


115 
	m¥iv©e
:

116 
NumMsg
;

117 
_nbNëPFLCompûîMesßges
 *
	mMsgLi°
;

118 
boﬁ
 
	mPDLInôed
;

119 
	m_nbNëPDLD©aba£
 &
	mPrŸoDB
;

120 
NëPFLFr⁄tEnd
 *
	mPFLFr⁄tEnd
;

121 *
	mGíCode
;

122 
	mCodeSize
;

123 
	mm_îrbuf
[2048];

125 
FõldsLi°_t
 
	mexFõldLi°
;

126 
_nbExåa˘edFõldsDes¸ùt‹Ve˘‹
* 
	mDes¸ùt‹s
;

136 
FûlMsgLi°
(
Eº‹Rec‹dî
 &
îrRec‹dî
);

141 
CÀ¨MsgLi°
();

146 
NëPDLCÀ™up
();

149 
IsInôülized
();

152 
	mm_debugLevñ
;

153 *
	mdumpHIRCodeFûíame
;

154 *
	mdumpLIRCodeFûíame
;

155 *
	mdumpNëILCodeFûíame
;

156 *
	mdumpLIRGøphFûíame
;

157 *
	mdumpLIRNoO±GøphFûíame
;

158 *
	mdumpNëILGøphFûíame
;

159 *
	mdumpNoCodeGøphFûíame
;

160 *
	mdumpPrŸoGøphFûíame
;

161 *
	mdumpFûãrAutom©⁄Fûíame
;

163 
	mpublic
:

172 
nbNëPFLCompûî
(
_nbNëPDLD©aba£
 &
¥ŸoDB
);

179 ~
nbNëPFLCompûî
();

187 *
	$GëLa°Eº‹
()

189  
m_îrbuf
;

206 
	`NëPDLInô
(
nbNëPDLLökLayî_t
 
LökLayî
);

218 
	`CheckFûãr
(c⁄° *
NëPFLFûãrSåög
);

227 
	`PrötFSA
(c⁄° *
Autom©⁄Fûíame
);

238 
	`CompûeFûãr
(c⁄° *
NëPFLFûãrSåög
, **
NëILCode
, 
boﬁ
 
›timiz©i⁄Cy˛es
=
åue
);

246 
	`Cª©eAutom©⁄FromFûãr
(c⁄° *
NëPFLFûãrSåög
);

252 
	$GëCodeSize
()

254  
CodeSize
;

255 
	}
}

262 
_nbNëPFLCompûîMesßges
 *
GëCompMesßgeLi°
();

274 
_nbExåa˘edFõldsDes¸ùt‹Ve˘‹
* 
GëExåa˘Fõld
();

285 
GëFõldInfo
(c⁄° 
°rög
 
¥ŸoName
, 
uöt32_t
 
id
, 
_nbExåa˘edFõldsDes¸ùt‹
* 
des
);

291 
SëDebugLevñ
(c⁄° 
DebugLevñ

nbNETPFLCOMPILER_DEBUG_DETAIL_LEVEL
);

297 
SëNëILCodeFûíame
(c⁄° *
DumpNëILCodeFûíame

nbNETPFLCOMPILER_DEBUG_NETIL_CODE_FILENAME
);

303 
SëHIRCodeFûíame
(c⁄° *
DumpHIRCodeFûíame

nbNETPFLCOMPILER_DEBUG_HIR_CODE_FILENAME
);

309 
SëLIRCodeFûíame
(c⁄° *
DumpLIRCodeFûíame

nbNETPFLCOMPILER_DEBUG_LIR_CODE_FILENAME
);

315 
SëLIRGøphFûíame
(c⁄° *
dumpLIRGøphFûíame

nbNETPFLCOMPILER_DEBUG_LIR_GRAPH_FILENAME
);

321 
SëLIRNoO±GøphFûíame
(c⁄° *
DumpLIRNoO±GøphFûíame

nbNETPFLCOMPILER_DEBUG_LIR_NOOPT_GRAPH_FILENAME
);

327 
SëNoCodeGøphFûíame
(c⁄° *
DumpNoCodeGøphFûíame

nbNETPFLCOMPILER_DEBUG_NO_CODE_GRAPH_FILENAME
);

333 
SëNëILGøphFûíame
(c⁄° *
DumpNëILGøphFûíame

nbNETPFLCOMPILER_DEBUG_NETIL_GRAPH_FILENAME
);

339 
SëPrŸoGøphFûíame
(c⁄° *
dumpPrŸoGøphFûíame

nbNETPFLCOMPILER_DEBUG_PROTOGRAH_DUMP_FILENAME
);

345 
SëFûãrAutom©⁄Fûíame
(c⁄° *
dumpFûãrAutom©⁄Fûíame

nbNETPFLCOMPILER_DEBUG_FILTERAUTOMATON_DUMP_FILENAME
);

355 
DLL_EXPORT
 
nbNëPFLCompûî
 *
nbAŒoˇãNëPFLCompûî
(
_nbNëPDLD©aba£
 *
NëPDLPrŸoDB
);

362 
DLL_EXPORT
 
nbDóŒoˇãNëPFLCompûî
(
nbNëPFLCompûî
 *
NëPFLCompûî
);

	@/usr/include/nbprotodb.h

17 #¥agm®
⁄˚


20 #ifde‡
PROTODB_EXPORTS


23 #¥agm®
w¨nög
(
dißbÀ
: 4005)

24 
	#DLL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

26 #i‚de‡
DLL_EXPORT


27 
	#DLL_EXPORT


	)

33 
	~"nb¥Ÿodb_exp‹ts.h
"

34 
	~"nb¥Ÿodb_defs.h
"

81 #i‚de‡
NBNETPDLELEMENTLIST


82 
	enbNëPDLEÀmítLi°
 {

83 
	mnbNETPDL_EL_DUMMYFIRST
= -1,

84 
	#nbNETPDL_ELEMENT
(
EÀmítName
, 
EÀmítSåögID
, 
EÀmítCodeID
, 
PåToAŒoˇti⁄Fun˘i⁄
, 
PåToCrossLökFun˘i⁄
, 
PåToCÀ™upFun˘i⁄
, 
PåToSîülizeFun˘i⁄
ËEÀmítCodeID,

	)

85 
	~"nb¥Ÿodb_ñemíts_xml.h
"

86 #unde‡
nbNETPDL_ELEMENT


88 
	#NBNETPDLELEMENTLIST


	)

104 
	#nbNETPDL_ELEMENT
(
EÀmítName
, 
EÀmítSåögID
, 
EÀmítCodeID
, 
PåToAŒoˇti⁄Fun˘i⁄
, 
PåToCrossLökFun˘i⁄
, 
PåToCÀ™upFun˘i⁄
, 
PåToSîülizeFun˘i⁄
Ëc⁄° * c⁄° EÀmítSåögID=EÀmítName;

	)

105 
	~"nb¥Ÿodb_ñemíts_xml.h
"

106 #unde‡
nbNETPDL_ELEMENT


137 
DLL_EXPORT
 
_nbNëPDLD©aba£
 *
nbPrŸoDBXMLLﬂd
(c⁄° *
FûeName
, 
Fœgs
, *
EºBuf
, 
EºBufSize
);

148 
DLL_EXPORT
 
nbPrŸoDBXMLCÀ™up
();

	@/usr/include/nbsockutils.h

9 #¥agm®
⁄˚


11 #ifde‡
SOCKUTILS_EXPORTS


14 #¥agm®
w¨nög
(
dißbÀ
: 4005)

15 
	#DLL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

17 #i‚de‡
DLL_EXPORT


18 
	#DLL_EXPORT


	)

23 #ifde‡
WIN32


26 #ifde‡
_WINSOCKAPI_


27 #unde‡
_WINSOCKAPI_


29 
	~<wösock2.h
>

30 
	~<ws2t˝ù.h
>

32 
	~<°dio.h
>

33 
	~<°rög.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<sys/sockë.h
>

36 
	~<√tdb.h
>

37 
	~<uni°d.h
>

38 
	~<î∫o.h
>

39 
	~<√töë/ö.h
>

40 
	~<¨∑/öë.h
>

41 
	~<√t/if.h
>

45 #i‚de‡
sockSUCCESS


46 
	#sockSUCCESS
 0

47 
	#sockFAILURE
 -1

48 
	#sockWARNING
 -2

50 

	)

96 #i‚de‡
WIN32


102 
	#˛o£sockë
(
a
Ë
	`˛o£
◊)

	)

125 #ifde‡
NDEBUG


126 
	#sockASSERT
(
msg
, 
ex¥
Ë(()0)

	)

128 
	~<as£π.h
>

129 #i‡(
deföed
(
WIN32
Ë&& deföed(
_MSC_VER
))

130 
	~<¸tdbg.h
>

133 
	#sockASSERT
(
msg
, 
ex¥
Ë{ 
	`_CπDbgRï‹t
(
_CRT_WARN
, 
NULL
, 0, NULL, "%s\n", msg); 
	`Ârötf
(
°dîr
, "%s\n", msg); 
	`as£π
”x¥); }

	)

135 
	#sockASSERT
(
msg
, 
ex¥
Ë{ 
	`Ârötf
(
°dîr
, "%s\n", msg); 
	`as£π
”x¥); }

	)

149 
	#SOCKBUF_CHECKONLY
 1

	)

151 
	#SOCKBUF_BUFFERIZE
 0

	)

154 
	#SOCKOPEN_CLIENT
 0

	)

156 
	#SOCKOPEN_SERVER
 1

	)

159 
	#SOCK_RECEIVEALL_NO
 0

	)

161 
	#SOCK_RECEIVEALL_YES
 1

	)

170 #ifde‡
__˝lu•lus


203 
DLL_EXPORT
 
sock_öô
(*
îrbuf
, 
îrbuÊí
);

214 
DLL_EXPORT
 
sock_˛ónup
();

266 
DLL_EXPORT
 
sock_öôaddªss
(c⁄° *
addªss
, c⁄° *
p‹t
,

267 
addröfo
 *
höts
, addröfÿ**addröfo, *
îrbuf
, 
îrbuÊí
);

282 
DLL_EXPORT
 
sock_‰ìaddröfo
(
addröfo
 *addrinfo);

327 
DLL_EXPORT
 
sock_›í
(
addröfo
 *addröfo, 
£rvî
, 
nc⁄n
, *
îrbuf
, 
îrbuÊí
);

349 
DLL_EXPORT
 
sock_ac˚±
(
sockë
, 
sockaddr_°‹age
 *
sockaddr_‰om
, *
îrbuf
, 
îrbuÊí
);

383 
DLL_EXPORT
 
sock_˛o£
(
sockë
, *
îrbuf
, 
îrbuÊí
);

411 
DLL_EXPORT
 
sock_£nd
(
sockë
, c⁄° *
buf„r
, 
size
, *
îrbuf
, 
îrbuÊí
);

463 
DLL_EXPORT
 
sock_ªcv
(
sockë
, *
buf„r
, 
size
, 
ª˚ivóŒ
, 
maxtimeout
, *
îrbuf
, 
îrbuÊí
);

515 
DLL_EXPORT
 
sock_ªcvdgøm
(
sockë
, *
buf„r
, 
size
, 
ª˚ivóŒ
, 
maxtimeout
, *
îrbuf
, 
îrbuÊí
);

545 
DLL_EXPORT
 
sock_check4waôögd©a
(
sockë
, 
maxtimeout
, *
îrbuf
, 
îrbuÊí
);

603 
DLL_EXPORT
 
sock_buf„rize
(c⁄° *
buf„r
, 
size
, *
ãmpbuf
, *
off£t
, 
tŸsize
, 
check⁄ly
, *
îrbuf
, 
îrbuÊí
);

631 
DLL_EXPORT
 
sock_disˇrd
(
sockë
, 
size
, *
îrbuf
, 
îrbuÊí
);

661 
DLL_EXPORT
 
sock_check_ho°li°
(*
ho°li°
, c⁄° *
£p
, 
sockaddr_°‹age
 *
‰om
, *
îrbuf
, 
îrbuÊí
);

682 
DLL_EXPORT
 
sock_cm∑ddr
(
sockaddr_°‹age
 *
fú°
, sockaddr_°‹agê*
£c⁄d
);

746 
DLL_EXPORT
 
sock_gëmyöfo
(
sock
, *
addªss
, 
addæí
, *
p‹t
, 
p‹éí
, 
Êags
, *
îrbuf
, 
îrbuÊí
);

807 
DLL_EXPORT
 
sock_gë≥îöfo
(
sock
, *
addªss
, 
addæí
, *
p‹t
, 
p‹éí
, 
Êags
, *
îrbuf
, 
îrbuÊí
);

876 
DLL_EXPORT
 
sock_gëascii_addΩ‹t
(c⁄° 
sockaddr_°‹age
 *
sockaddr
, *
addªss
, 
addæí
, *
p‹t
, 
p‹éí
, 
Êags
, *
îrbuf
, 
îrbuÊí
);

915 
DLL_EXPORT
 
sock_¥e£¡2√tw‹k
(c⁄° *
addªss
, 
sockaddr_°‹age
 *
sockaddr
, 
addr_Ámûy
, *
îrbuf
, 
îrbuÊí
);

918 #ifde‡
__˝lu•lus


	@/usr/include/openssl/bio.h

59 #i‚de‡
HEADER_BIO_H


60 
	#HEADER_BIO_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_FP_API


65 
	~<°dio.h
>

67 
	~<°d¨g.h
>

69 
	~<›ís¶/¸y±o.h
>

71 #i‚de‡
OPENSSL_NO_SCTP


72 #i‚de‡
OPENSSL_SYS_VMS


73 
	~<°döt.h
>

75 
	~<öây≥s.h
>

79 #ifde‡ 
__˝lu•lus


84 
	#BIO_TYPE_NONE
 0

	)

85 
	#BIO_TYPE_MEM
 (1|0x0400)

	)

86 
	#BIO_TYPE_FILE
 (2|0x0400)

	)

88 
	#BIO_TYPE_FD
 (4|0x0400|0x0100)

	)

89 
	#BIO_TYPE_SOCKET
 (5|0x0400|0x0100)

	)

90 
	#BIO_TYPE_NULL
 (6|0x0400)

	)

91 
	#BIO_TYPE_SSL
 (7|0x0200)

	)

92 
	#BIO_TYPE_MD
 (8|0x0200Ë

	)

93 
	#BIO_TYPE_BUFFER
 (9|0x0200Ë

	)

94 
	#BIO_TYPE_CIPHER
 (10|0x0200Ë

	)

95 
	#BIO_TYPE_BASE64
 (11|0x0200Ë

	)

96 
	#BIO_TYPE_CONNECT
 (12|0x0400|0x0100Ë

	)

97 
	#BIO_TYPE_ACCEPT
 (13|0x0400|0x0100Ë

	)

98 
	#BIO_TYPE_PROXY_CLIENT
 (14|0x0200Ë

	)

99 
	#BIO_TYPE_PROXY_SERVER
 (15|0x0200Ë

	)

100 
	#BIO_TYPE_NBIO_TEST
 (16|0x0200Ë

	)

101 
	#BIO_TYPE_NULL_FILTER
 (17|0x0200)

	)

102 
	#BIO_TYPE_BER
 (18|0x0200Ë

	)

103 
	#BIO_TYPE_BIO
 (19|0x0400Ë

	)

104 
	#BIO_TYPE_LINEBUFFER
 (20|0x0200Ë

	)

105 
	#BIO_TYPE_DGRAM
 (21|0x0400|0x0100)

	)

106 #i‚de‡
OPENSSL_NO_SCTP


107 
	#BIO_TYPE_DGRAM_SCTP
 (24|0x0400|0x0100)

	)

109 
	#BIO_TYPE_ASN1
 (22|0x0200Ë

	)

110 
	#BIO_TYPE_COMP
 (23|0x0200Ë

	)

112 
	#BIO_TYPE_DESCRIPTOR
 0x0100

	)

113 
	#BIO_TYPE_FILTER
 0x0200

	)

114 
	#BIO_TYPE_SOURCE_SINK
 0x0400

	)

118 
	#BIO_NOCLOSE
 0x00

	)

119 
	#BIO_CLOSE
 0x01

	)

123 
	#BIO_CTRL_RESET
 1

	)

124 
	#BIO_CTRL_EOF
 2

	)

125 
	#BIO_CTRL_INFO
 3

	)

126 
	#BIO_CTRL_SET
 4

	)

127 
	#BIO_CTRL_GET
 5

	)

128 
	#BIO_CTRL_PUSH
 6

	)

129 
	#BIO_CTRL_POP
 7

	)

130 
	#BIO_CTRL_GET_CLOSE
 8

	)

131 
	#BIO_CTRL_SET_CLOSE
 9

	)

132 
	#BIO_CTRL_PENDING
 10

	)

133 
	#BIO_CTRL_FLUSH
 11

	)

134 
	#BIO_CTRL_DUP
 12

	)

135 
	#BIO_CTRL_WPENDING
 13

	)

137 
	#BIO_CTRL_SET_CALLBACK
 14

	)

138 
	#BIO_CTRL_GET_CALLBACK
 15

	)

140 
	#BIO_CTRL_SET_FILENAME
 30

	)

143 
	#BIO_CTRL_DGRAM_CONNECT
 31

	)

144 
	#BIO_CTRL_DGRAM_SET_CONNECTED
 32

	)

147 
	#BIO_CTRL_DGRAM_SET_RECV_TIMEOUT
 33

	)

148 
	#BIO_CTRL_DGRAM_GET_RECV_TIMEOUT
 34

	)

149 
	#BIO_CTRL_DGRAM_SET_SEND_TIMEOUT
 35

	)

150 
	#BIO_CTRL_DGRAM_GET_SEND_TIMEOUT
 36

	)

152 
	#BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
 37

	)

153 
	#BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
 38

	)

156 
	#BIO_CTRL_DGRAM_MTU_DISCOVER
 39

	)

159 
	#BIO_CTRL_DGRAM_QUERY_MTU
 40

	)

160 
	#BIO_CTRL_DGRAM_GET_FALLBACK_MTU
 47

	)

161 
	#BIO_CTRL_DGRAM_GET_MTU
 41

	)

162 
	#BIO_CTRL_DGRAM_SET_MTU
 42

	)

167 
	#BIO_CTRL_DGRAM_MTU_EXCEEDED
 43

	)

172 
	#BIO_CTRL_DGRAM_GET_PEER
 46

	)

173 
	#BIO_CTRL_DGRAM_SET_PEER
 44

	)

175 
	#BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT
 45

	)

178 #i‚de‡
OPENSSL_NO_SCTP


180 
	#BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE
 50

	)

181 
	#BIO_CTRL_DGRAM_SCTP_ADD_AUTH_KEY
 51

	)

182 
	#BIO_CTRL_DGRAM_SCTP_NEXT_AUTH_KEY
 52

	)

183 
	#BIO_CTRL_DGRAM_SCTP_AUTH_CCS_RCVD
 53

	)

184 
	#BIO_CTRL_DGRAM_SCTP_GET_SNDINFO
 60

	)

185 
	#BIO_CTRL_DGRAM_SCTP_SET_SNDINFO
 61

	)

186 
	#BIO_CTRL_DGRAM_SCTP_GET_RCVINFO
 62

	)

187 
	#BIO_CTRL_DGRAM_SCTP_SET_RCVINFO
 63

	)

188 
	#BIO_CTRL_DGRAM_SCTP_GET_PRINFO
 64

	)

189 
	#BIO_CTRL_DGRAM_SCTP_SET_PRINFO
 65

	)

190 
	#BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN
 70

	)

194 
	#BIO_FP_READ
 0x02

	)

195 
	#BIO_FP_WRITE
 0x04

	)

196 
	#BIO_FP_APPEND
 0x08

	)

197 
	#BIO_FP_TEXT
 0x10

	)

199 
	#BIO_FLAGS_READ
 0x01

	)

200 
	#BIO_FLAGS_WRITE
 0x02

	)

201 
	#BIO_FLAGS_IO_SPECIAL
 0x04

	)

202 
	#BIO_FLAGS_RWS
 (
BIO_FLAGS_READ
|
BIO_FLAGS_WRITE
|
BIO_FLAGS_IO_SPECIAL
)

	)

203 
	#BIO_FLAGS_SHOULD_RETRY
 0x08

	)

204 #i‚def 
BIO_FLAGS_UPLINK


207 
	#BIO_FLAGS_UPLINK
 0

	)

211 
	#BIO_GHBN_CTRL_HITS
 1

	)

212 
	#BIO_GHBN_CTRL_MISSES
 2

	)

213 
	#BIO_GHBN_CTRL_CACHE_SIZE
 3

	)

214 
	#BIO_GHBN_CTRL_GET_ENTRY
 4

	)

215 
	#BIO_GHBN_CTRL_FLUSH
 5

	)

224 
	#BIO_FLAGS_BASE64_NO_NL
 0x100

	)

229 
	#BIO_FLAGS_MEM_RDONLY
 0x200

	)

231 
bio_°
 
	tBIO
;

233 
BIO_£t_Êags
(
BIO
 *
b
, 
Êags
);

234 
BIO_ã°_Êags
(c⁄° 
BIO
 *
b
, 
Êags
);

235 
BIO_˛ór_Êags
(
BIO
 *
b
, 
Êags
);

237 
	#BIO_gë_Êags
(
b
Ë
	`BIO_ã°_Êags
(b, ~(0x0))

	)

238 
	#BIO_£t_ªåy_•ecül
(
b
) \

239 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_IO_SPECIAL
|
BIO_FLAGS_SHOULD_RETRY
))

	)

240 
	#BIO_£t_ªåy_ªad
(
b
) \

241 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_READ
|
BIO_FLAGS_SHOULD_RETRY
))

	)

242 
	#BIO_£t_ªåy_wrôe
(
b
) \

243 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_WRITE
|
BIO_FLAGS_SHOULD_RETRY
))

	)

246 
	#BIO_˛ór_ªåy_Êags
(
b
) \

247 
	`BIO_˛ór_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

248 
	#BIO_gë_ªåy_Êags
(
b
) \

249 
	`BIO_ã°_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

252 
	#BIO_should_ªad
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_READ
)

	)

253 
	#BIO_should_wrôe
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_WRITE
)

	)

254 
	#BIO_should_io_•ecül
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_IO_SPECIAL
)

	)

255 
	#BIO_ªåy_ty≥
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_RWS
)

	)

256 
	#BIO_should_ªåy
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_SHOULD_RETRY
)

	)

264 
	#BIO_RR_SSL_X509_LOOKUP
 0x01

	)

266 
	#BIO_RR_CONNECT
 0x02

	)

268 
	#BIO_RR_ACCEPT
 0x03

	)

271 
	#BIO_CB_FREE
 0x01

	)

272 
	#BIO_CB_READ
 0x02

	)

273 
	#BIO_CB_WRITE
 0x03

	)

274 
	#BIO_CB_PUTS
 0x04

	)

275 
	#BIO_CB_GETS
 0x05

	)

276 
	#BIO_CB_CTRL
 0x06

	)

280 
	#BIO_CB_RETURN
 0x80

	)

281 
	#BIO_CB_ªtu∫
(
a
Ë(◊)|
BIO_CB_RETURN
))

	)

282 
	#BIO_cb_¥e
(
a
Ë(!(◊)&
BIO_CB_RETURN
))

	)

283 
	#BIO_cb_po°
(
a
Ë(◊)&
BIO_CB_RETURN
)

	)

285 (*
BIO_gë_ˇŒback
(c⁄° 
BIO
 *
b
)Ë(
bio_°
 *,,const *,, ,);

286 
BIO_£t_ˇŒback
(
BIO
 *
b
,

287 (*
ˇŒback
)(
bio_°
 *,,const *,, ,));

288 *
BIO_gë_ˇŒback_¨g
(c⁄° 
BIO
 *
b
);

289 
BIO_£t_ˇŒback_¨g
(
BIO
 *
b
, *
¨g
);

291 c⁄° * 
BIO_mëhod_«me
(c⁄° 
BIO
 *
b
);

292 
BIO_mëhod_ty≥
(c⁄° 
BIO
 *
b
);

294 
	tbio_öfo_cb
(
	tbio_°
 *, , const *, , , );

296 
	sbio_mëhod_°


298 
ty≥
;

299 c⁄° *
«me
;

300 (*
bwrôe
)(
BIO
 *, const *, );

301 (*
bªad
)(
BIO
 *, *, );

302 (*
bputs
)(
BIO
 *, const *);

303 (*
bgës
)(
BIO
 *, *, );

304 (*
˘æ
)(
BIO
 *, , , *);

305 (*
¸óã
)(
BIO
 *);

306 (*
de°roy
)(
BIO
 *);

307 (*
ˇŒback_˘æ
)(
BIO
 *, , 
bio_öfo_cb
 *);

308 } 
	tBIO_METHOD
;

310 
	sbio_°


312 
BIO_METHOD
 *
mëhod
;

314 (*
ˇŒback
)(
bio_°
 *,,const *,, ,);

315 *
cb_¨g
;

317 
öô
;

318 
shutdown
;

319 
Êags
;

320 
ªåy_ªas⁄
;

321 
num
;

322 *
±r
;

323 
bio_°
 *
√xt_bio
;

324 
bio_°
 *
¥ev_bio
;

325 
ª„ªn˚s
;

326 
num_ªad
;

327 
num_wrôe
;

329 
CRYPTO_EX_DATA
 
ex_d©a
;

332 
DECLARE_STACK_OF
(
BIO
)

334 
	sbio_f_buf„r_˘x_°ru˘


346 
ibuf_size
;

347 
obuf_size
;

349 *
ibuf
;

350 
ibuf_Àn
;

351 
ibuf_off
;

353 *
obuf
;

354 
obuf_Àn
;

355 
obuf_off
;

356 } 
	tBIO_F_BUFFER_CTX
;

359 
	ta¢1_ps_func
(
	tBIO
 *
	tb
, **
	tpbuf
, *
	t∂í
, *
	t∑rg
);

361 #i‚de‡
OPENSSL_NO_SCTP


363 
	sbio_dgøm_s˘p_¢döfo


365 
uöt16_t
 
¢d_sid
;

366 
uöt16_t
 
¢d_Êags
;

367 
uöt32_t
 
¢d_µid
;

368 
uöt32_t
 
¢d_c⁄ãxt
;

371 
	sbio_dgøm_s˘p_rcvöfo


373 
uöt16_t
 
rcv_sid
;

374 
uöt16_t
 
rcv_s¢
;

375 
uöt16_t
 
rcv_Êags
;

376 
uöt32_t
 
rcv_µid
;

377 
uöt32_t
 
rcv_t¢
;

378 
uöt32_t
 
rcv_cumt¢
;

379 
uöt32_t
 
rcv_c⁄ãxt
;

382 
	sbio_dgøm_s˘p_¥öfo


384 
uöt16_t
 
¥_pﬁicy
;

385 
uöt32_t
 
¥_vÆue
;

390 
	#BIO_CONN_S_BEFORE
 1

	)

391 
	#BIO_CONN_S_GET_IP
 2

	)

392 
	#BIO_CONN_S_GET_PORT
 3

	)

393 
	#BIO_CONN_S_CREATE_SOCKET
 4

	)

394 
	#BIO_CONN_S_CONNECT
 5

	)

395 
	#BIO_CONN_S_OK
 6

	)

396 
	#BIO_CONN_S_BLOCKED_CONNECT
 7

	)

397 
	#BIO_CONN_S_NBIO
 8

	)

400 
	#BIO_C_SET_CONNECT
 100

	)

401 
	#BIO_C_DO_STATE_MACHINE
 101

	)

402 
	#BIO_C_SET_NBIO
 102

	)

403 
	#BIO_C_SET_PROXY_PARAM
 103

	)

404 
	#BIO_C_SET_FD
 104

	)

405 
	#BIO_C_GET_FD
 105

	)

406 
	#BIO_C_SET_FILE_PTR
 106

	)

407 
	#BIO_C_GET_FILE_PTR
 107

	)

408 
	#BIO_C_SET_FILENAME
 108

	)

409 
	#BIO_C_SET_SSL
 109

	)

410 
	#BIO_C_GET_SSL
 110

	)

411 
	#BIO_C_SET_MD
 111

	)

412 
	#BIO_C_GET_MD
 112

	)

413 
	#BIO_C_GET_CIPHER_STATUS
 113

	)

414 
	#BIO_C_SET_BUF_MEM
 114

	)

415 
	#BIO_C_GET_BUF_MEM_PTR
 115

	)

416 
	#BIO_C_GET_BUFF_NUM_LINES
 116

	)

417 
	#BIO_C_SET_BUFF_SIZE
 117

	)

418 
	#BIO_C_SET_ACCEPT
 118

	)

419 
	#BIO_C_SSL_MODE
 119

	)

420 
	#BIO_C_GET_MD_CTX
 120

	)

421 
	#BIO_C_GET_PROXY_PARAM
 121

	)

422 
	#BIO_C_SET_BUFF_READ_DATA
 122

	)

423 
	#BIO_C_GET_CONNECT
 123

	)

424 
	#BIO_C_GET_ACCEPT
 124

	)

425 
	#BIO_C_SET_SSL_RENEGOTIATE_BYTES
 125

	)

426 
	#BIO_C_GET_SSL_NUM_RENEGOTIATES
 126

	)

427 
	#BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
 127

	)

428 
	#BIO_C_FILE_SEEK
 128

	)

429 
	#BIO_C_GET_CIPHER_CTX
 129

	)

430 
	#BIO_C_SET_BUF_MEM_EOF_RETURN
 130

	)

431 
	#BIO_C_SET_BIND_MODE
 131

	)

432 
	#BIO_C_GET_BIND_MODE
 132

	)

433 
	#BIO_C_FILE_TELL
 133

	)

434 
	#BIO_C_GET_SOCKS
 134

	)

435 
	#BIO_C_SET_SOCKS
 135

	)

437 
	#BIO_C_SET_WRITE_BUF_SIZE
 136

	)

438 
	#BIO_C_GET_WRITE_BUF_SIZE
 137

	)

439 
	#BIO_C_MAKE_BIO_PAIR
 138

	)

440 
	#BIO_C_DESTROY_BIO_PAIR
 139

	)

441 
	#BIO_C_GET_WRITE_GUARANTEE
 140

	)

442 
	#BIO_C_GET_READ_REQUEST
 141

	)

443 
	#BIO_C_SHUTDOWN_WR
 142

	)

444 
	#BIO_C_NREAD0
 143

	)

445 
	#BIO_C_NREAD
 144

	)

446 
	#BIO_C_NWRITE0
 145

	)

447 
	#BIO_C_NWRITE
 146

	)

448 
	#BIO_C_RESET_READ_REQUEST
 147

	)

449 
	#BIO_C_SET_MD_CTX
 148

	)

451 
	#BIO_C_SET_PREFIX
 149

	)

452 
	#BIO_C_GET_PREFIX
 150

	)

453 
	#BIO_C_SET_SUFFIX
 151

	)

454 
	#BIO_C_GET_SUFFIX
 152

	)

456 
	#BIO_C_SET_EX_ARG
 153

	)

457 
	#BIO_C_GET_EX_ARG
 154

	)

459 
	#BIO_£t_≠p_d©a
(
s
,
¨g
Ë
	`BIO_£t_ex_d©a
(s,0,¨g)

	)

460 
	#BIO_gë_≠p_d©a
(
s
Ë
	`BIO_gë_ex_d©a
(s,0)

	)

463 
	#BIO_£t_c⁄n_ho°«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,0,(*Íame)

	)

464 
	#BIO_£t_c⁄n_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,1,(*Ì‹t)

	)

465 
	#BIO_£t_c⁄n_ù
(
b
,
ù
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,2,(*)ù)

	)

466 
	#BIO_£t_c⁄n_öt_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,3,(*Ì‹t)

	)

467 
	#BIO_gë_c⁄n_ho°«me
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,0)

	)

468 
	#BIO_gë_c⁄n_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,1)

	)

469 
	#BIO_gë_c⁄n_ù
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,2)

	)

470 
	#BIO_gë_c⁄n_öt_p‹t
(
b
Ë
	`BIO_öt_˘æ
(b,
BIO_C_GET_CONNECT
,3,0)

	)

473 
	#BIO_£t_nbio
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_NBIO
,“),
NULL
)

	)

476 
	#BIO_£t_ac˚±_p‹t
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,0,(*Íame)

	)

477 
	#BIO_gë_ac˚±_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,0)

	)

479 
	#BIO_£t_nbio_ac˚±
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,1,“)?(*)"a":
NULL
)

	)

480 
	#BIO_£t_ac˚±_bios
(
b
,
bio
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,2,(*)bio)

	)

482 
	#BIO_BIND_NORMAL
 0

	)

483 
	#BIO_BIND_REUSEADDR_IF_UNUSED
 1

	)

484 
	#BIO_BIND_REUSEADDR
 2

	)

485 
	#BIO_£t_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BIND_MODE
,mode,
NULL
)

	)

486 
	#BIO_gë_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BIND_MODE
,0,
NULL
)

	)

488 
	#BIO_do_c⁄√˘
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

489 
	#BIO_do_ac˚±
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

490 
	#BIO_do_h™dshake
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_DO_STATE_MACHINE
,0,
NULL
)

	)

493 
	#BIO_£t_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,0,(*)(uæ))

	)

494 
	#BIO_£t_¥oxõs
(
b
,
p
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,1,(*)’))

	)

496 
	#BIO_£t_fûãr_bio
(
b
,
s
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,2,(*)(s))

	)

498 
	#BIO_£t_¥oxy_cb
(
b
,
cb
Ë
	`BIO_ˇŒback_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,3,(*(*cb)()))

	)

499 
	#BIO_£t_¥oxy_hódî
(
b
,
sk
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,4,(*)sk)

	)

500 
	#BIO_£t_no_c⁄√˘_ªtu∫
(
b
,
boﬁ
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,5,boﬁ)

	)

502 
	#BIO_gë_¥oxy_hódî
(
b
,
skp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,0,(*)skp)

	)

503 
	#BIO_gë_¥oxõs
(
b
,
pxy_p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,1,(*)’xy_p))

	)

504 
	#BIO_gë_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,2,(*)(uæ))

	)

505 
	#BIO_gë_no_c⁄√˘_ªtu∫
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,5,
NULL
)

	)

507 
	#BIO_£t_fd
(
b
,
fd
,
c
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_FD
,c,fd)

	)

508 
	#BIO_gë_fd
(
b
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FD
,0,(*)c)

	)

510 
	#BIO_£t_Â
(
b
,
Â
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILE_PTR
,c,(*)Â)

	)

511 
	#BIO_gë_Â
(
b
,
Âp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FILE_PTR
,0,(*)Âp)

	)

513 
	#BIO_£ek
(
b
,
ofs
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_SEEK
,ofs,
NULL
)

	)

514 
	#BIO_ãŒ
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_TELL
,0,
NULL
)

	)

518 #ifde‡
CONST_STRICT


522 
BIO_ªad_fûíame
(
BIO
 *
b
,c⁄° *
«me
);

524 
	#BIO_ªad_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

525 
BIO_CLOSE
|
BIO_FP_READ
,(*)
«me
)

	)

527 
	#BIO_wrôe_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

528 
BIO_CLOSE
|
BIO_FP_WRITE
,
«me
)

	)

529 
	#BIO_≠≥nd_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

530 
BIO_CLOSE
|
BIO_FP_APPEND
,
«me
)

	)

531 
	#BIO_rw_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

532 
BIO_CLOSE
|
BIO_FP_READ
|
BIO_FP_WRITE
,
«me
)

	)

538 
	#BIO_£t_s¶
(
b
,
s¶
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_SSL
,c,(*)s¶)

	)

539 
	#BIO_gë_s¶
(
b
,
s¶p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_SSL
,0,(*)s¶p)

	)

540 
	#BIO_£t_s¶_mode
(
b
,
˛õ¡
Ë
	`BIO_˘æ
(b,
BIO_C_SSL_MODE
,˛õ¡,
NULL
)

	)

541 
	#BIO_£t_s¶_ª√gŸüã_byãs
(
b
,
num
) \

542 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_BYTES
,
num
,
NULL
);

	)

543 
	#BIO_gë_num_ª√gŸüãs
(
b
) \

544 
	`BIO_˘æ
(
b
,
BIO_C_GET_SSL_NUM_RENEGOTIATES
,0,
NULL
);

	)

545 
	#BIO_£t_s¶_ª√gŸüã_timeout
(
b
,
£c⁄ds
) \

546 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
,
£c⁄ds
,
NULL
);

	)

551 
	#BIO_gë_mem_d©a
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_CTRL_INFO
,0,(*Ìp)

	)

552 
	#BIO_£t_mem_buf
(
b
,
bm
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUF_MEM
,c,(*)bm)

	)

553 
	#BIO_gë_mem_±r
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUF_MEM_PTR
,0,(*Ìp)

	)

554 
	#BIO_£t_mem_eof_ªtu∫
(
b
,
v
) \

555 
	`BIO_˘æ
(
b
,
BIO_C_SET_BUF_MEM_EOF_RETURN
,
v
,
NULL
)

	)

558 
	#BIO_gë_buf„r_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUFF_NUM_LINES
,0,
NULL
)

	)

559 
	#BIO_£t_buf„r_size
(
b
,
size
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,
NULL
)

	)

560 
	#BIO_£t_ªad_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,0)

	)

561 
	#BIO_£t_wrôe_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,1)

	)

562 
	#BIO_£t_buf„r_ªad_d©a
(
b
,
buf
,
num
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_READ_DATA
,num,buf)

	)

565 
	#BIO_dup_°©e
(
b
,
ªt
Ë
	`BIO_˘æ
(b,
BIO_CTRL_DUP
,0,(*)‘ë))

	)

567 
	#BIO_ª£t
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_RESET
,0,
NULL
)

	)

568 
	#BIO_eof
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_EOF
,0,
NULL
)

	)

569 
	#BIO_£t_˛o£
(
b
,
c
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_SET_CLOSE
,(c),
NULL
)

	)

570 
	#BIO_gë_˛o£
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CLOSE
,0,
NULL
)

	)

571 
	#BIO_≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_PENDING
,0,
NULL
)

	)

572 
	#BIO_w≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_WPENDING
,0,
NULL
)

	)

574 
size_t
 
BIO_˘æ_≥ndög
(
BIO
 *
b
);

575 
size_t
 
BIO_˘æ_w≥ndög
(
BIO
 *
b
);

576 
	#BIO_Êush
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_FLUSH
,0,
NULL
)

	)

577 
	#BIO_gë_öfo_ˇŒback
(
b
,
cbp
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CALLBACK
,0, \

578 
cbp
)

	)

579 
	#BIO_£t_öfo_ˇŒback
(
b
,
cb
Ë()
	`BIO_ˇŒback_˘æ
(b,
BIO_CTRL_SET_CALLBACK
,cb)

	)

582 
	#BIO_buf„r_gë_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_CTRL_GET
,0,
NULL
)

	)

585 
	#BIO_£t_wrôe_buf_size
(
b
,
size
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_WRITE_BUF_SIZE
,size,
NULL
)

	)

586 
	#BIO_gë_wrôe_buf_size
(
b
,
size
Ë(
size_t
)
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_BUF_SIZE
,size,
NULL
)

	)

587 
	#BIO_make_bio_∑ú
(
b1
,
b2
Ë()
	`BIO_˘æ
(b1,
BIO_C_MAKE_BIO_PAIR
,0,b2)

	)

588 
	#BIO_de°roy_bio_∑ú
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_DESTROY_BIO_PAIR
,0,
NULL
)

	)

589 
	#BIO_shutdown_wr
(
b
Ë()
	`BIO_˘æ
(b, 
BIO_C_SHUTDOWN_WR
, 0, 
NULL
)

	)

591 
	#BIO_gë_wrôe_gu¨™ãe
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_GUARANTEE
,0,
NULL
)

	)

592 
	#BIO_gë_ªad_ªque°
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_READ_REQUEST
,0,
NULL
)

	)

593 
size_t
 
BIO_˘æ_gë_wrôe_gu¨™ãe
(
BIO
 *
b
);

594 
size_t
 
BIO_˘æ_gë_ªad_ªque°
(
BIO
 *
b
);

595 
BIO_˘æ_ª£t_ªad_ªque°
(
BIO
 *
b
);

598 
	#BIO_˘æ_dgøm_c⁄√˘
(
b
,
≥î
) \

599 ()
	`BIO_˘æ
(
b
,
BIO_CTRL_DGRAM_CONNECT
,0, (*)
≥î
)

	)

600 
	#BIO_˘æ_£t_c⁄√˘ed
(
b
, 
°©e
, 
≥î
) \

601 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_CONNECTED
, 
°©e
, (*)
≥î
)

	)

602 
	#BIO_dgøm_ªcv_timedout
(
b
) \

603 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
, 0, 
NULL
)

	)

604 
	#BIO_dgøm_£nd_timedout
(
b
) \

605 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
, 0, 
NULL
)

	)

606 
	#BIO_dgøm_gë_≥î
(
b
,
≥î
) \

607 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_PEER
, 0, (*)
≥î
)

	)

608 
	#BIO_dgøm_£t_≥î
(
b
,
≥î
) \

609 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*)
≥î
)

	)

614 
BIO_£t_ex_d©a
(
BIO
 *
bio
,
idx
,*
d©a
);

615 *
BIO_gë_ex_d©a
(
BIO
 *
bio
,
idx
);

616 
BIO_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

617 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

618 
BIO_numbî_ªad
(
BIO
 *
bio
);

619 
BIO_numbî_wrôãn
(
BIO
 *
bio
);

622 
BIO_a¢1_£t_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 *
¥efix
,

623 
a¢1_ps_func
 *
¥efix_‰ì
);

624 
BIO_a¢1_gë_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 **
µªfix
,

625 
a¢1_ps_func
 **
µªfix_‰ì
);

626 
BIO_a¢1_£t_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 *
suffix
,

627 
a¢1_ps_func
 *
suffix_‰ì
);

628 
BIO_a¢1_gë_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 **
psuffix
,

629 
a¢1_ps_func
 **
psuffix_‰ì
);

631 #i‚de‡
OPENSSL_NO_FP_API


632 
BIO_METHOD
 *
BIO_s_fûe
();

633 
BIO
 *
BIO_√w_fûe
(c⁄° *
fûíame
, c⁄° *
mode
);

634 
BIO
 *
BIO_√w_Â
(
FILE
 *
°ªam
, 
˛o£_Êag
);

635 
	#BIO_s_fûe_öã∫Æ
 
BIO_s_fûe


	)

637 
BIO
 * 
BIO_√w
(
BIO_METHOD
 *
ty≥
);

638 
BIO_£t
(
BIO
 *
a
,
BIO_METHOD
 *
ty≥
);

639 
BIO_‰ì
(
BIO
 *
a
);

640 
BIO_v‰ì
(
BIO
 *
a
);

641 
BIO_ªad
(
BIO
 *
b
, *
d©a
, 
Àn
);

642 
BIO_gës
(
BIO
 *
bp
,*
buf
, 
size
);

643 
BIO_wrôe
(
BIO
 *
b
, c⁄° *
d©a
, 
Àn
);

644 
BIO_puts
(
BIO
 *
bp
,c⁄° *
buf
);

645 
BIO_ödít
(
BIO
 *
b
,
ödít
,
max
);

646 
BIO_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
,*
∑rg
);

647 
BIO_ˇŒback_˘æ
(
BIO
 *
b
, 
cmd
, (*
Â
)(
bio_°
 *, , const *, , , ));

648 * 
BIO_±r_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
);

649 
BIO_öt_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
,
ürg
);

650 
BIO
 * 
BIO_push
(BIO *
b
,BIO *
≠≥nd
);

651 
BIO
 * 
BIO_p›
(BIO *
b
);

652 
BIO_‰ì_Æl
(
BIO
 *
a
);

653 
BIO
 * 
BIO_föd_ty≥
(BIO *
b
,
bio_ty≥
);

654 
BIO
 * 
BIO_√xt
(BIO *
b
);

655 
BIO
 * 
BIO_gë_ªåy_BIO
(BIO *
bio
, *
ªas⁄
);

656 
BIO_gë_ªåy_ªas⁄
(
BIO
 *
bio
);

657 
BIO
 * 
BIO_dup_chaö
(BIO *
ö
);

659 
BIO_ƒód0
(
BIO
 *
bio
, **
buf
);

660 
BIO_ƒód
(
BIO
 *
bio
, **
buf
, 
num
);

661 
BIO_nwrôe0
(
BIO
 *
bio
, **
buf
);

662 
BIO_nwrôe
(
BIO
 *
bio
, **
buf
, 
num
);

664 
BIO_debug_ˇŒback
(
BIO
 *
bio
,
cmd
,c⁄° *
¨gp
,
¨gi
,

665 
¨gl
,
ªt
);

667 
BIO_METHOD
 *
BIO_s_mem
();

668 
BIO
 *
BIO_√w_mem_buf
(*
buf
, 
Àn
);

669 
BIO_METHOD
 *
BIO_s_sockë
();

670 
BIO_METHOD
 *
BIO_s_c⁄√˘
();

671 
BIO_METHOD
 *
BIO_s_ac˚±
();

672 
BIO_METHOD
 *
BIO_s_fd
();

673 #i‚de‡
OPENSSL_SYS_OS2


674 
BIO_METHOD
 *
BIO_s_log
();

676 
BIO_METHOD
 *
BIO_s_bio
();

677 
BIO_METHOD
 *
BIO_s_nuŒ
();

678 
BIO_METHOD
 *
BIO_f_nuŒ
();

679 
BIO_METHOD
 *
BIO_f_buf„r
();

680 #ifde‡
OPENSSL_SYS_VMS


681 
BIO_METHOD
 *
BIO_f_löebuf„r
();

683 
BIO_METHOD
 *
BIO_f_nbio_ã°
();

684 #i‚de‡
OPENSSL_NO_DGRAM


685 
BIO_METHOD
 *
BIO_s_d©agøm
();

686 #i‚de‡
OPENSSL_NO_SCTP


687 
BIO_METHOD
 *
BIO_s_d©agøm_s˘p
();

693 
BIO_sock_should_ªåy
(
i
);

694 
BIO_sock_n⁄_Áèl_îr‹
(
îr‹
);

695 
BIO_dgøm_n⁄_Áèl_îr‹
(
îr‹
);

697 
BIO_fd_should_ªåy
(
i
);

698 
BIO_fd_n⁄_Áèl_îr‹
(
îr‹
);

699 
BIO_dump_cb
((*
cb
)(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

700 *
u
, c⁄° *
s
, 
Àn
);

701 
BIO_dump_ödít_cb
((*
cb
)(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

702 *
u
, c⁄° *
s
, 
Àn
, 
ödít
);

703 
BIO_dump
(
BIO
 *
b
,c⁄° *
byãs
,
Àn
);

704 
BIO_dump_ödít
(
BIO
 *
b
,c⁄° *
byãs
,
Àn
,
ödít
);

705 #i‚de‡
OPENSSL_NO_FP_API


706 
BIO_dump_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
);

707 
BIO_dump_ödít_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
, 
ödít
);

709 
ho°ít
 *
BIO_gëho°by«me
(c⁄° *
«me
);

718 
BIO_sock_îr‹
(
sock
);

719 
BIO_sockë_io˘l
(
fd
, 
ty≥
, *
¨g
);

720 
BIO_sockë_nbio
(
fd
,
mode
);

721 
BIO_gë_p‹t
(c⁄° *
°r
, *
p‹t_±r
);

722 
BIO_gë_ho°_ù
(c⁄° *
°r
, *
ù
);

723 
BIO_gë_ac˚±_sockë
(*
ho°_p‹t
,
mode
);

724 
BIO_ac˚±
(
sock
,**
ù_p‹t
);

725 
BIO_sock_öô
();

726 
BIO_sock_˛ónup
();

727 
BIO_£t_t˝_ndñay
(
sock
,
tu∫_⁄
);

729 
BIO
 *
BIO_√w_sockë
(
sock
, 
˛o£_Êag
);

730 
BIO
 *
BIO_√w_dgøm
(
fd
, 
˛o£_Êag
);

731 #i‚de‡
OPENSSL_NO_SCTP


732 
BIO
 *
BIO_√w_dgøm_s˘p
(
fd
, 
˛o£_Êag
);

733 
BIO_dgøm_is_s˘p
(
BIO
 *
bio
);

734 
BIO_dgøm_s˘p_nŸifiˇti⁄_cb
(
BIO
 *
b
,

735 (*
h™dÀ_nŸifiˇti⁄s
)(
BIO
 *
bio
, *
c⁄ãxt
, *
buf
),

736 *
c⁄ãxt
);

737 
BIO_dgøm_s˘p_waô_f‹_dry
(
BIO
 *
b
);

738 
BIO_dgøm_s˘p_msg_waôög
(
BIO
 *
b
);

740 
BIO
 *
BIO_√w_fd
(
fd
, 
˛o£_Êag
);

741 
BIO
 *
BIO_√w_c⁄√˘
(*
ho°_p‹t
);

742 
BIO
 *
BIO_√w_ac˚±
(*
ho°_p‹t
);

744 
BIO_√w_bio_∑ú
(
BIO
 **
bio1
, 
size_t
 
wrôebuf1
,

745 
BIO
 **
bio2
, 
size_t
 
wrôebuf2
);

751 
BIO_c›y_√xt_ªåy
(
BIO
 *
b
);

755 #ifde‡
__GNUC__


756 
	#__bio_h__©å__
 
__©åibuã__


	)

758 
	#__bio_h__©å__
(
x
)

	)

760 
BIO_¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, ...)

761 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,2,3)));

762 
BIO_v¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

763 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,2,0)));

764 
BIO_¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, ...)

765 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,3,4)));

766 
BIO_v¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

767 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,3,0)));

768 #unde‡
__bio_h__©å__


774 
ERR_lﬂd_BIO_°rögs
();

779 
	#BIO_F_ACPT_STATE
 100

	)

780 
	#BIO_F_BIO_ACCEPT
 101

	)

781 
	#BIO_F_BIO_BER_GET_HEADER
 102

	)

782 
	#BIO_F_BIO_CALLBACK_CTRL
 131

	)

783 
	#BIO_F_BIO_CTRL
 103

	)

784 
	#BIO_F_BIO_GETHOSTBYNAME
 120

	)

785 
	#BIO_F_BIO_GETS
 104

	)

786 
	#BIO_F_BIO_GET_ACCEPT_SOCKET
 105

	)

787 
	#BIO_F_BIO_GET_HOST_IP
 106

	)

788 
	#BIO_F_BIO_GET_PORT
 107

	)

789 
	#BIO_F_BIO_MAKE_PAIR
 121

	)

790 
	#BIO_F_BIO_NEW
 108

	)

791 
	#BIO_F_BIO_NEW_FILE
 109

	)

792 
	#BIO_F_BIO_NEW_MEM_BUF
 126

	)

793 
	#BIO_F_BIO_NREAD
 123

	)

794 
	#BIO_F_BIO_NREAD0
 124

	)

795 
	#BIO_F_BIO_NWRITE
 125

	)

796 
	#BIO_F_BIO_NWRITE0
 122

	)

797 
	#BIO_F_BIO_PUTS
 110

	)

798 
	#BIO_F_BIO_READ
 111

	)

799 
	#BIO_F_BIO_SOCK_INIT
 112

	)

800 
	#BIO_F_BIO_WRITE
 113

	)

801 
	#BIO_F_BUFFER_CTRL
 114

	)

802 
	#BIO_F_CONN_CTRL
 127

	)

803 
	#BIO_F_CONN_STATE
 115

	)

804 
	#BIO_F_DGRAM_SCTP_READ
 132

	)

805 
	#BIO_F_FILE_CTRL
 116

	)

806 
	#BIO_F_FILE_READ
 130

	)

807 
	#BIO_F_LINEBUFFER_CTRL
 129

	)

808 
	#BIO_F_MEM_READ
 128

	)

809 
	#BIO_F_MEM_WRITE
 117

	)

810 
	#BIO_F_SSL_NEW
 118

	)

811 
	#BIO_F_WSASTARTUP
 119

	)

814 
	#BIO_R_ACCEPT_ERROR
 100

	)

815 
	#BIO_R_BAD_FOPEN_MODE
 101

	)

816 
	#BIO_R_BAD_HOSTNAME_LOOKUP
 102

	)

817 
	#BIO_R_BROKEN_PIPE
 124

	)

818 
	#BIO_R_CONNECT_ERROR
 103

	)

819 
	#BIO_R_EOF_ON_MEMORY_BIO
 127

	)

820 
	#BIO_R_ERROR_SETTING_NBIO
 104

	)

821 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPTED_SOCKET
 105

	)

822 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPT_SOCKET
 106

	)

823 
	#BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET
 107

	)

824 
	#BIO_R_INVALID_ARGUMENT
 125

	)

825 
	#BIO_R_INVALID_IP_ADDRESS
 108

	)

826 
	#BIO_R_IN_USE
 123

	)

827 
	#BIO_R_KEEPALIVE
 109

	)

828 
	#BIO_R_NBIO_CONNECT_ERROR
 110

	)

829 
	#BIO_R_NO_ACCEPT_PORT_SPECIFIED
 111

	)

830 
	#BIO_R_NO_HOSTNAME_SPECIFIED
 112

	)

831 
	#BIO_R_NO_PORT_DEFINED
 113

	)

832 
	#BIO_R_NO_PORT_SPECIFIED
 114

	)

833 
	#BIO_R_NO_SUCH_FILE
 128

	)

834 
	#BIO_R_NULL_PARAMETER
 115

	)

835 
	#BIO_R_TAG_MISMATCH
 116

	)

836 
	#BIO_R_UNABLE_TO_BIND_SOCKET
 117

	)

837 
	#BIO_R_UNABLE_TO_CREATE_SOCKET
 118

	)

838 
	#BIO_R_UNABLE_TO_LISTEN_SOCKET
 119

	)

839 
	#BIO_R_UNINITIALIZED
 120

	)

840 
	#BIO_R_UNSUPPORTED_METHOD
 121

	)

841 
	#BIO_R_WRITE_TO_READ_ONLY_BIO
 126

	)

842 
	#BIO_R_WSASTARTUP
 122

	)

844 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/bn.h

125 #i‚de‡
HEADER_BN_H


126 
	#HEADER_BN_H


	)

128 
	~<›ís¶/e_os2.h
>

129 #i‚de‡
OPENSSL_NO_FP_API


130 
	~<°dio.h
>

132 
	~<›ís¶/os¶_typ.h
>

133 
	~<›ís¶/¸y±o.h
>

135 #ifde‡ 
__˝lu•lus


151 #i‚de‡
OPENSSL_SMALL_FOOTPRINT


152 
	#BN_MUL_COMBA


	)

153 
	#BN_SQR_COMBA


	)

154 
	#BN_RECURSION


	)

168 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë|| deföed(
OPENSSL_SYS_WINDOWS
) || \

169 
deföed
(
OPENSSL_SYS_WIN32
Ë|| 
	$deföed
(
löux
)

170 #i‚de‡
BN_DIV2W


171 
	#BN_DIV2W


	)

178 #ifde‡
SIXTY_FOUR_BIT_LONG


179 
	#BN_ULLONG
 

	)

180 
	#BN_ULONG
 

	)

181 
	#BN_LONG
 

	)

182 
	#BN_BITS
 128

	)

183 
	#BN_BYTES
 8

	)

184 
	#BN_BITS2
 64

	)

185 
	#BN_BITS4
 32

	)

186 
	#BN_MASK
 (0xffffffffffffffffffffffffffffffffLL)

	)

187 
	#BN_MASK2
 (0xffffffffffffffffL)

	)

188 
	#BN_MASK2l
 (0xffffffffL)

	)

189 
	#BN_MASK2h
 (0xffffffff00000000L)

	)

190 
	#BN_MASK2h1
 (0xffffffff80000000L)

	)

191 
	#BN_TBIT
 (0x8000000000000000L)

	)

192 
	#BN_DEC_CONV
 (10000000000000000000UL)

	)

193 
	#BN_DEC_FMT1
 "%lu"

	)

194 
	#BN_DEC_FMT2
 "%019lu"

	)

195 
	#BN_DEC_NUM
 19

	)

196 
	#BN_HEX_FMT1
 "%lX"

	)

197 
	#BN_HEX_FMT2
 "%016lX"

	)

205 #ifde‡
SIXTY_FOUR_BIT


206 #unde‡
BN_LLONG


207 #unde‡
BN_ULLONG


208 
	#BN_ULONG
 

	)

209 
	#BN_LONG
 

	)

210 
	#BN_BITS
 128

	)

211 
	#BN_BYTES
 8

	)

212 
	#BN_BITS2
 64

	)

213 
	#BN_BITS4
 32

	)

214 
	#BN_MASK2
 (0xffffffffffffffffLL)

	)

215 
	#BN_MASK2l
 (0xffffffffL)

	)

216 
	#BN_MASK2h
 (0xffffffff00000000LL)

	)

217 
	#BN_MASK2h1
 (0xffffffff80000000LL)

	)

218 
	#BN_TBIT
 (0x8000000000000000LL)

	)

219 
	#BN_DEC_CONV
 (10000000000000000000ULL)

	)

220 
	#BN_DEC_FMT1
 "%Œu"

	)

221 
	#BN_DEC_FMT2
 "%019Œu"

	)

222 
	#BN_DEC_NUM
 19

	)

223 
	#BN_HEX_FMT1
 "%ŒX"

	)

224 
	#BN_HEX_FMT2
 "%016ŒX"

	)

227 #ifde‡
THIRTY_TWO_BIT


228 #ifde‡
BN_LLONG


229 #i‡
	`deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
)

230 
	#BN_ULLONG
 
__öt64


	)

231 
	#BN_MASK
 (0xffffffffffffffff
I64
)

	)

233 
	#BN_ULLONG
 

	)

234 
	#BN_MASK
 (0xffffffffffffffffLL)

	)

237 
	#BN_ULONG
 

	)

238 
	#BN_LONG
 

	)

239 
	#BN_BITS
 64

	)

240 
	#BN_BYTES
 4

	)

241 
	#BN_BITS2
 32

	)

242 
	#BN_BITS4
 16

	)

243 
	#BN_MASK2
 (0xffffffffL)

	)

244 
	#BN_MASK2l
 (0xffff)

	)

245 
	#BN_MASK2h1
 (0xffff8000L)

	)

246 
	#BN_MASK2h
 (0xffff0000L)

	)

247 
	#BN_TBIT
 (0x80000000L)

	)

248 
	#BN_DEC_CONV
 (1000000000L)

	)

249 
	#BN_DEC_FMT1
 "%u"

	)

250 
	#BN_DEC_FMT2
 "%09u"

	)

251 
	#BN_DEC_NUM
 9

	)

252 
	#BN_HEX_FMT1
 "%X"

	)

253 
	#BN_HEX_FMT2
 "%08X"

	)

264 #i‡
	`deföed
(
OPENSSL_SYS_VMS
)

265 #i‡
__INITIAL_POINTER_SIZE
 == 64

266 
	#PTR_SIZE_INT
 

	)

268 
	#PTR_SIZE_INT
 

	)

271 
	#PTR_SIZE_INT
 
size_t


	)

274 
	#BN_DEFAULT_BITS
 1280

	)

276 
	#BN_FLG_MALLOCED
 0x01

	)

277 
	#BN_FLG_STATIC_DATA
 0x02

	)

278 
	#BN_FLG_CONSTTIME
 0x04

	)

284 #i‚de‡
OPENSSL_NO_DEPRECATED


285 
	#BN_FLG_EXP_CONSTTIME
 
BN_FLG_CONSTTIME


	)

290 #i‚de‡
OPENSSL_NO_DEPRECATED


291 
	#BN_FLG_FREE
 0x8000

	)

293 
	#BN_£t_Êags
(
b
,
n
Ë((b)->
Êags
|=“))

	)

294 
	#BN_gë_Êags
(
b
,
n
Ë((b)->
Êags
&“))

	)

298 
	#BN_wôh_Êags
(
de°
,
b
,
n
Ë((de°)->
d
=(b)->d, \

299 (
de°
)->
t›
=(
b
)->top, \

300 (
de°
)->
dmax
=(
b
)->dmax, \

301 (
de°
)->
√g
=(
b
)->neg, \

302 (
de°
)->
Êags
=(((de°)->Êag†& 
BN_FLG_MALLOCED
) \

303 | ((
b
)->
Êags
 & ~
BN_FLG_MALLOCED
) \

304 | 
BN_FLG_STATIC_DATA
 \

305 | (
n
)))

	)

309 
bignum_°
 
	tBIGNUM
;

311 
bignum_˘x
 
	tBN_CTX
;

312 
bn_blödög_°
 
	tBN_BLINDING
;

313 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

314 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

315 
bn_gícb_°
 
	tBN_GENCB
;

318 
	sbignum_°


320 
BN_ULONG
 *
d
;

321 
t›
;

323 
dmax
;

324 
√g
;

325 
Êags
;

329 
	sbn_m⁄t_˘x_°


331 
ri
;

332 
BIGNUM
 
RR
;

333 
BIGNUM
 
N
;

334 
BIGNUM
 
Ni
;

336 
BN_ULONG
 
n0
[2];

338 
Êags
;

344 
	sbn_ª˝_˘x_°


346 
BIGNUM
 
N
;

347 
BIGNUM
 
Nr
;

348 
num_bôs
;

349 
shi·
;

350 
Êags
;

354 
	sbn_gícb_°


356 
vî
;

357 *
¨g
;

361 (*
cb_1
)(, , *);

363 (*
cb_2
)(, , 
BN_GENCB
 *);

364 } 
cb
;

367 
	`BN_GENCB_ˇŒ
(
BN_GENCB
 *
cb
, 
a
, 
b
);

369 
	#BN_GENCB_£t_ﬁd
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

370 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

371 
tmp_gícb
->
vî
 = 1; \

372 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

373 
tmp_gícb
->
cb
.
cb_1
 = (
ˇŒback
); }

	)

375 
	#BN_GENCB_£t
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

376 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

377 
tmp_gícb
->
vî
 = 2; \

378 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

379 
tmp_gícb
->
cb
.
cb_2
 = (
ˇŒback
); }

	)

381 
	#BN_¥ime_checks
 0

	)

389 
	#BN_¥ime_checks_f‹_size
(
b
) ((b) >= 1300 ? 2 : \

390 (
b
) >= 850 ? 3 : \

391 (
b
) >= 650 ? 4 : \

392 (
b
) >= 550 ? 5 : \

393 (
b
) >= 450 ? 6 : \

394 (
b
) >= 400 ? 7 : \

395 (
b
) >= 350 ? 8 : \

396 (
b
) >= 300 ? 9 : \

397 (
b
) >= 250 ? 12 : \

398 (
b
) >= 200 ? 15 : \

399 (
b
) >= 150 ? 18 : \

400  27)

	)

402 
	#BN_num_byãs
(
a
Ë((
	`BN_num_bôs
◊)+7)/8)

	)

405 
	#BN_abs_is_w‹d
(
a
,
w
Ë(((◊)->
t›
 =1Ë&& (◊)->
d
[0] =(
BN_ULONG
)(w))) || \

406 (((
w
Ë=0Ë&& ((
a
)->
t›
 =0)))

	)

407 
	#BN_is_zîo
(
a
Ë(◊)->
t›
 =0)

	)

408 
	#BN_is_⁄e
(
a
Ë(
	`BN_abs_is_w‹d
(◊),1Ë&& !◊)->
√g
)

	)

409 
	#BN_is_w‹d
(
a
,
w
Ë(
	`BN_abs_is_w‹d
(◊),(w)Ë&& (!(wË|| !◊)->
√g
))

	)

410 
	#BN_is_odd
(
a
Ë((◊)->
t›
 > 0Ë&& (◊)->
d
[0] & 1))

	)

412 
	#BN_⁄e
(
a
Ë(
	`BN_£t_w‹d
(◊),1))

	)

413 
	#BN_zîo_ex
(
a
) \

415 
BIGNUM
 *
_tmp_bn
 = (
a
); \

416 
_tmp_bn
->
t›
 = 0; \

417 
_tmp_bn
->
√g
 = 0; \

418 } 0)

	)

419 #ifde‡
OPENSSL_NO_DEPRECATED


420 
	#BN_zîo
(
a
Ë
	`BN_zîo_ex
◊)

	)

422 
	#BN_zîo
(
a
Ë(
	`BN_£t_w‹d
(◊),0))

	)

425 c⁄° 
BIGNUM
 *
	`BN_vÆue_⁄e
();

426 * 
	`BN_›ti⁄s
();

427 
BN_CTX
 *
	`BN_CTX_√w
();

428 #i‚de‡
OPENSSL_NO_DEPRECATED


429 
	`BN_CTX_öô
(
BN_CTX
 *
c
);

431 
	`BN_CTX_‰ì
(
BN_CTX
 *
c
);

432 
	`BN_CTX_°¨t
(
BN_CTX
 *
˘x
);

433 
BIGNUM
 *
	`BN_CTX_gë
(
BN_CTX
 *
˘x
);

434 
	`BN_CTX_íd
(
BN_CTX
 *
˘x
);

435 
	`BN_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

436 
	`BN_p£udo_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

437 
	`BN_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

438 
	`BN_p£udo_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

439 
	`BN_num_bôs
(c⁄° 
BIGNUM
 *
a
);

440 
	`BN_num_bôs_w‹d
(
BN_ULONG
);

441 
BIGNUM
 *
	`BN_√w
();

442 
	`BN_öô
(
BIGNUM
 *);

443 
	`BN_˛ór_‰ì
(
BIGNUM
 *
a
);

444 
BIGNUM
 *
	`BN_c›y
(BIGNUM *
a
, c⁄° BIGNUM *
b
);

445 
	`BN_sw≠
(
BIGNUM
 *
a
, BIGNUM *
b
);

446 
BIGNUM
 *
	`BN_bö2bn
(c⁄° *
s
,
Àn
,BIGNUM *
ªt
);

447 
	`BN_bn2bö
(c⁄° 
BIGNUM
 *
a
, *
to
);

448 
BIGNUM
 *
	`BN_mpi2bn
(c⁄° *
s
,
Àn
,BIGNUM *
ªt
);

449 
	`BN_bn2mpi
(c⁄° 
BIGNUM
 *
a
, *
to
);

450 
	`BN_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

451 
	`BN_usub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

452 
	`BN_uadd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

453 
	`BN_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

454 
	`BN_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

455 
	`BN_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,
BN_CTX
 *
˘x
);

460 
	`BN_£t_√g©ive
(
BIGNUM
 *
b
, 
n
);

465 
	#BN_is_√g©ive
(
a
Ë(◊)->
√g
 !0)

	)

467 
	`BN_div
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
,

468 
BN_CTX
 *
˘x
);

469 
	#BN_mod
(
ªm
,
m
,
d
,
˘x
Ë
	`BN_div
(
NULL
,‘em),(m),(d),(˘x))

	)

470 
	`BN_¬mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
, 
BN_CTX
 *
˘x
);

471 
	`BN_mod_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

472 
	`BN_mod_add_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
);

473 
	`BN_mod_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

474 
	`BN_mod_sub_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
);

475 
	`BN_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

476 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

477 
	`BN_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

478 
	`BN_mod_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

479 
	`BN_mod_lshi·1_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
);

480 
	`BN_mod_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

481 
	`BN_mod_lshi·_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
);

483 
BN_ULONG
 
	`BN_mod_w‹d
(c⁄° 
BIGNUM
 *
a
, BN_ULONG 
w
);

484 
BN_ULONG
 
	`BN_div_w‹d
(
BIGNUM
 *
a
, BN_ULONG 
w
);

485 
	`BN_mul_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

486 
	`BN_add_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

487 
	`BN_sub_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

488 
	`BN_£t_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

489 
BN_ULONG
 
	`BN_gë_w‹d
(c⁄° 
BIGNUM
 *
a
);

491 
	`BN_cmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

492 
	`BN_‰ì
(
BIGNUM
 *
a
);

493 
	`BN_is_bô_£t
(c⁄° 
BIGNUM
 *
a
, 
n
);

494 
	`BN_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

495 
	`BN_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

496 
	`BN_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,
BN_CTX
 *
˘x
);

498 
	`BN_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

499 c⁄° 
BIGNUM
 *
m
,
BN_CTX
 *
˘x
);

500 
	`BN_mod_exp_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

501 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

502 
	`BN_mod_exp_m⁄t_c⁄°time
(
BIGNUM
 *
º
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

503 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
ö_m⁄t
);

504 
	`BN_mod_exp_m⁄t_w‹d
(
BIGNUM
 *
r
, 
BN_ULONG
 
a
, c⁄° BIGNUM *
p
,

505 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

506 
	`BN_mod_exp2_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a1
, c⁄° BIGNUM *
p1
,

507 c⁄° 
BIGNUM
 *
a2
, c⁄° BIGNUM *
p2
,c⁄° BIGNUM *
m
,

508 
BN_CTX
 *
˘x
,
BN_MONT_CTX
 *
m_˘x
);

509 
	`BN_mod_exp_sim∂e
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

510 c⁄° 
BIGNUM
 *
m
,
BN_CTX
 *
˘x
);

512 
	`BN_mask_bôs
(
BIGNUM
 *
a
,
n
);

513 #i‚de‡
OPENSSL_NO_FP_API


514 
	`BN_¥öt_Â
(
FILE
 *
Â
, c⁄° 
BIGNUM
 *
a
);

516 #ifde‡
HEADER_BIO_H


517 
	`BN_¥öt
(
BIO
 *
Â
, c⁄° 
BIGNUM
 *
a
);

519 
	`BN_¥öt
(*
Â
, c⁄° 
BIGNUM
 *
a
);

521 
	`BN_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, 
Àn
, 
BN_CTX
 *
˘x
);

522 
	`BN_rshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

523 
	`BN_rshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

524 
	`BN_˛ór
(
BIGNUM
 *
a
);

525 
BIGNUM
 *
	`BN_dup
(c⁄° BIGNUM *
a
);

526 
	`BN_ucmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

527 
	`BN_£t_bô
(
BIGNUM
 *
a
, 
n
);

528 
	`BN_˛ór_bô
(
BIGNUM
 *
a
, 
n
);

529 * 
	`BN_bn2hex
(c⁄° 
BIGNUM
 *
a
);

530 * 
	`BN_bn2dec
(c⁄° 
BIGNUM
 *
a
);

531 
	`BN_hex2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

532 
	`BN_dec2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

533 
	`BN_asc2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

534 
	`BN_gcd
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,c⁄° BIGNUM *
b
,
BN_CTX
 *
˘x
);

535 
	`BN_kr⁄eckî
(c⁄° 
BIGNUM
 *
a
,c⁄° BIGNUM *
b
,
BN_CTX
 *
˘x
);

536 
BIGNUM
 *
	`BN_mod_övî£
(BIGNUM *
ªt
,

537 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
,
BN_CTX
 *
˘x
);

538 
BIGNUM
 *
	`BN_mod_sqπ
(BIGNUM *
ªt
,

539 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
,
BN_CTX
 *
˘x
);

542 #i‚de‡
OPENSSL_NO_DEPRECATED


543 
BIGNUM
 *
	`BN_gíî©e_¥ime
(BIGNUM *
ªt
,
bôs
,
ß„
,

544 c⁄° 
BIGNUM
 *
add
, c⁄° BIGNUM *
ªm
,

545 (*
ˇŒback
)(,,*),*
cb_¨g
);

546 
	`BN_is_¥ime
(c⁄° 
BIGNUM
 *
p
,
nchecks
,

547 (*
ˇŒback
)(,,*),

548 
BN_CTX
 *
˘x
,*
cb_¨g
);

549 
	`BN_is_¥ime_Á°ã°
(c⁄° 
BIGNUM
 *
p
,
nchecks
,

550 (*
ˇŒback
)(,,*),
BN_CTX
 *
˘x
,*
cb_¨g
,

551 
do_åül_divisi⁄
);

555 
	`BN_gíî©e_¥ime_ex
(
BIGNUM
 *
ªt
,
bôs
,
ß„
, c⁄° BIGNUM *
add
,

556 c⁄° 
BIGNUM
 *
ªm
, 
BN_GENCB
 *
cb
);

557 
	`BN_is_¥ime_ex
(c⁄° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

558 
	`BN_is_¥ime_Á°ã°_ex
(c⁄° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
˘x
,

559 
do_åül_divisi⁄
, 
BN_GENCB
 *
cb
);

561 
	`BN_X931_gíî©e_Xpq
(
BIGNUM
 *
Xp
, BIGNUM *
Xq
, 
nbôs
, 
BN_CTX
 *
˘x
);

563 
	`BN_X931_dîive_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

564 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xp1
, c⁄° BIGNUM *
Xp2
,

565 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

566 
	`BN_X931_gíî©e_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

567 
BIGNUM
 *
Xp1
, BIGNUM *
Xp2
,

568 c⁄° 
BIGNUM
 *
Xp
,

569 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
,

570 
BN_GENCB
 *
cb
);

572 
BN_MONT_CTX
 *
	`BN_MONT_CTX_√w
();

573 
	`BN_MONT_CTX_öô
(
BN_MONT_CTX
 *
˘x
);

574 
	`BN_mod_mul_m⁄tgomîy
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,c⁄° BIGNUM *
b
,

575 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

576 
	#BN_to_m⁄tgomîy
(
r
,
a
,
m⁄t
,
˘x
Ë
	`BN_mod_mul_m⁄tgomîy
(\

577 (
r
),(
a
),&((
m⁄t
)->
RR
),(m⁄t),(
˘x
))

	)

578 
	`BN_‰om_m⁄tgomîy
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,

579 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

580 
	`BN_MONT_CTX_‰ì
(
BN_MONT_CTX
 *
m⁄t
);

581 
	`BN_MONT_CTX_£t
(
BN_MONT_CTX
 *
m⁄t
,c⁄° 
BIGNUM
 *
mod
,
BN_CTX
 *
˘x
);

582 
BN_MONT_CTX
 *
	`BN_MONT_CTX_c›y
(BN_MONT_CTX *
to
,BN_MONT_CTX *
‰om
);

583 
BN_MONT_CTX
 *
	`BN_MONT_CTX_£t_locked
(BN_MONT_CTX **
pm⁄t
, 
lock
,

584 c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

587 
	#BN_BLINDING_NO_UPDATE
 0x00000001

	)

588 
	#BN_BLINDING_NO_RECREATE
 0x00000002

	)

590 
BN_BLINDING
 *
	`BN_BLINDING_√w
(c⁄° 
BIGNUM
 *
A
, c⁄° BIGNUM *
Ai
, BIGNUM *
mod
);

591 
	`BN_BLINDING_‰ì
(
BN_BLINDING
 *
b
);

592 
	`BN_BLINDING_upd©e
(
BN_BLINDING
 *
b
,
BN_CTX
 *
˘x
);

593 
	`BN_BLINDING_c⁄vît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

594 
	`BN_BLINDING_övît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

595 
	`BN_BLINDING_c⁄vît_ex
(
BIGNUM
 *
n
, BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

596 
	`BN_BLINDING_övît_ex
(
BIGNUM
 *
n
, c⁄° BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

597 #i‚de‡
OPENSSL_NO_DEPRECATED


598 
	`BN_BLINDING_gë_thªad_id
(c⁄° 
BN_BLINDING
 *);

599 
	`BN_BLINDING_£t_thªad_id
(
BN_BLINDING
 *, );

601 
CRYPTO_THREADID
 *
	`BN_BLINDING_thªad_id
(
BN_BLINDING
 *);

602 
	`BN_BLINDING_gë_Êags
(c⁄° 
BN_BLINDING
 *);

603 
	`BN_BLINDING_£t_Êags
(
BN_BLINDING
 *, );

604 
BN_BLINDING
 *
	`BN_BLINDING_¸óã_∑øm
(BN_BLINDING *
b
,

605 c⁄° 
BIGNUM
 *
e
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

606 (*
bn_mod_exp
)(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

607 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
),

608 
BN_MONT_CTX
 *
m_˘x
);

610 #i‚de‡
OPENSSL_NO_DEPRECATED


611 
	`BN_£t_∑øms
(
mul
,
high
,
low
,
m⁄t
);

612 
	`BN_gë_∑øms
(
which
);

615 
	`BN_RECP_CTX_öô
(
BN_RECP_CTX
 *
ª˝
);

616 
BN_RECP_CTX
 *
	`BN_RECP_CTX_√w
();

617 
	`BN_RECP_CTX_‰ì
(
BN_RECP_CTX
 *
ª˝
);

618 
	`BN_RECP_CTX_£t
(
BN_RECP_CTX
 *
ª˝
,c⁄° 
BIGNUM
 *
rdiv
,
BN_CTX
 *
˘x
);

619 
	`BN_mod_mul_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
x
, c⁄° BIGNUM *
y
,

620 
BN_RECP_CTX
 *
ª˝
,
BN_CTX
 *
˘x
);

621 
	`BN_mod_exp_ª˝
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

622 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

623 
	`BN_div_ª˝
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
,

624 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

626 #i‚de‡
OPENSSL_NO_EC2M


637 
	`BN_GF2m_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

638 
	#BN_GF2m_sub
(
r
, 
a
, 
b
Ë
	`BN_GF2m_add
‘,á, b)

	)

639 
	`BN_GF2m_mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
);

640 
	`BN_GF2m_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

641 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

642 
	`BN_GF2m_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

643 
BN_CTX
 *
˘x
);

644 
	`BN_GF2m_mod_öv
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
p
,

645 
BN_CTX
 *
˘x
);

646 
	`BN_GF2m_mod_div
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

647 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

648 
	`BN_GF2m_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

649 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

650 
	`BN_GF2m_mod_sqπ
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

651 
BN_CTX
 *
˘x
);

652 
	`BN_GF2m_mod_sﬁve_quad
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

653 
BN_CTX
 *
˘x
);

654 
	#BN_GF2m_cmp
(
a
, 
b
Ë
	`BN_ucmp
(◊), (b))

	)

660 
	`BN_GF2m_mod_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[]);

662 
	`BN_GF2m_mod_mul_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

663 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

664 
	`BN_GF2m_mod_sqr_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[],

665 
BN_CTX
 *
˘x
);

666 
	`BN_GF2m_mod_öv_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° 
p
[],

667 
BN_CTX
 *
˘x
);

668 
	`BN_GF2m_mod_div_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

669 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

670 
	`BN_GF2m_mod_exp_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

671 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

672 
	`BN_GF2m_mod_sqπ_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

673 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

674 
	`BN_GF2m_mod_sﬁve_quad_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

675 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

676 
	`BN_GF2m_pﬁy2¨r
(c⁄° 
BIGNUM
 *
a
, 
p
[], 
max
);

677 
	`BN_GF2m_¨r2pﬁy
(c⁄° 
p
[], 
BIGNUM
 *
a
);

683 
	`BN_ni°_mod_192
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

684 
	`BN_ni°_mod_224
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

685 
	`BN_ni°_mod_256
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

686 
	`BN_ni°_mod_384
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

687 
	`BN_ni°_mod_521
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

689 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_192
();

690 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_224
();

691 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_256
();

692 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_384
();

693 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_521
();

697 
	#bn_ex∑nd
(
a
,
bôs
Ë((((((bôs+
BN_BITS2
-1))/BN_BITS2)Ë<◊)->
dmax
)?\

698 (
a
):
	`bn_ex∑nd2
(◊),(
bôs
+
BN_BITS2
-1)/BN_BITS2))

	)

699 
	#bn_wex∑nd
(
a
,
w‹ds
Ë(((w‹dsË<◊)->
dmax
)?◊):
	`bn_ex∑nd2
(◊),(w‹ds)))

	)

700 
BIGNUM
 *
	`bn_ex∑nd2
(BIGNUM *
a
, 
w‹ds
);

701 #i‚de‡
OPENSSL_NO_DEPRECATED


702 
BIGNUM
 *
	`bn_dup_ex∑nd
(c⁄° BIGNUM *
a
, 
w‹ds
);

733 #ifde‡
BN_DEBUG


736 
	~<as£π.h
>

738 #ifde‡
BN_DEBUG_RAND


740 #i‚de‡
RAND_p£udo_byãs


741 
	`RAND_p£udo_byãs
(*
buf
,
num
);

742 
	#BN_DEBUG_TRIX


	)

744 
	#bn_pﬁluã
(
a
) \

746 c⁄° 
BIGNUM
 *
_bnum1
 = (
a
); \

747 if(
_bnum1
->
t›
 < _bnum1->
dmax
) { \

748 
_tmp_ch¨
; \

752 
BN_ULONG
 *
_nŸ_c⁄°
; \

753 
	`mem˝y
(&
_nŸ_c⁄°
, &
_bnum1
->
d
, (
BN_ULONG
*)); \

754 
	`RAND_p£udo_byãs
(&
_tmp_ch¨
, 1); \

755 
	`mem£t
((*)(
_nŸ_c⁄°
 + 
_bnum1
->
t›
), 
_tmp_ch¨
, \

756 (
_bnum1
->
dmax
 - _bnum1->
t›
Ë* (
BN_ULONG
)); \

758 } 0)

	)

759 #ifde‡
BN_DEBUG_TRIX


760 #unde‡
RAND_p£udo_byãs


763 
	#bn_pﬁluã
(
a
)

	)

765 
	#bn_check_t›
(
a
) \

767 c⁄° 
BIGNUM
 *
_bnum2
 = (
a
); \

768 i‡(
_bnum2
 !
NULL
) { \

769 
	`as£π
((
_bnum2
->
t›
 == 0) || \

770 (
_bnum2
->
d
[_bnum2->
t›
 - 1] != 0)); \

771 
	`bn_pﬁluã
(
_bnum2
); \

773 } 0)

	)

775 
	#bn_fix_t›
(
a
Ë
	`bn_check_t›
◊)

	)

779 
	#bn_pﬁluã
(
a
)

	)

780 
	#bn_check_t›
(
a
)

	)

781 
	#bn_fix_t›
(
a
Ë
	`bn_c‹ª˘_t›
◊)

	)

785 
	#bn_c‹ª˘_t›
(
a
) \

787 
BN_ULONG
 *
·l
; \

788 
tmp_t›
 = (
a
)->
t›
; \

789 i‡(
tmp_t›
 > 0) \

791 
·l
&((
a
)->
d
[
tmp_t›
-1]);Åmp_top > 0;Åmp_top--) \

792 i‡(*(
·l
--)) ; \

793 (
a
)->
t›
 = 
tmp_t›
; \

795 
	`bn_pﬁluã
(
a
); \

796 }

	)

798 
BN_ULONG
 
	`bn_mul_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

799 
BN_ULONG
 
	`bn_mul_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

800 
	`bn_sqr_w‹ds
(
BN_ULONG
 *
Ω
, c⁄° BN_ULONG *
≠
, 
num
);

801 
BN_ULONG
 
	`bn_div_w‹ds
(BN_ULONG 
h
, BN_ULONG 
l
, BN_ULONG 
d
);

802 
BN_ULONG
 
	`bn_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,
num
);

803 
BN_ULONG
 
	`bn_sub_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,
num
);

806 
BIGNUM
 *
	`gë_rfc2409_¥ime_768
(BIGNUM *
bn
);

807 
BIGNUM
 *
	`gë_rfc2409_¥ime_1024
(BIGNUM *
bn
);

810 
BIGNUM
 *
	`gë_rfc3526_¥ime_1536
(BIGNUM *
bn
);

811 
BIGNUM
 *
	`gë_rfc3526_¥ime_2048
(BIGNUM *
bn
);

812 
BIGNUM
 *
	`gë_rfc3526_¥ime_3072
(BIGNUM *
bn
);

813 
BIGNUM
 *
	`gë_rfc3526_¥ime_4096
(BIGNUM *
bn
);

814 
BIGNUM
 *
	`gë_rfc3526_¥ime_6144
(BIGNUM *
bn
);

815 
BIGNUM
 *
	`gë_rfc3526_¥ime_8192
(BIGNUM *
bn
);

817 
	`BN_b¡e°_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

823 
	`ERR_lﬂd_BN_°rögs
();

828 
	#BN_F_BNRAND
 127

	)

829 
	#BN_F_BN_BLINDING_CONVERT_EX
 100

	)

830 
	#BN_F_BN_BLINDING_CREATE_PARAM
 128

	)

831 
	#BN_F_BN_BLINDING_INVERT_EX
 101

	)

832 
	#BN_F_BN_BLINDING_NEW
 102

	)

833 
	#BN_F_BN_BLINDING_UPDATE
 103

	)

834 
	#BN_F_BN_BN2DEC
 104

	)

835 
	#BN_F_BN_BN2HEX
 105

	)

836 
	#BN_F_BN_CTX_GET
 116

	)

837 
	#BN_F_BN_CTX_NEW
 106

	)

838 
	#BN_F_BN_CTX_START
 129

	)

839 
	#BN_F_BN_DIV
 107

	)

840 
	#BN_F_BN_DIV_NO_BRANCH
 138

	)

841 
	#BN_F_BN_DIV_RECP
 130

	)

842 
	#BN_F_BN_EXP
 123

	)

843 
	#BN_F_BN_EXPAND2
 108

	)

844 
	#BN_F_BN_EXPAND_INTERNAL
 120

	)

845 
	#BN_F_BN_GF2M_MOD
 131

	)

846 
	#BN_F_BN_GF2M_MOD_EXP
 132

	)

847 
	#BN_F_BN_GF2M_MOD_MUL
 133

	)

848 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD
 134

	)

849 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR
 135

	)

850 
	#BN_F_BN_GF2M_MOD_SQR
 136

	)

851 
	#BN_F_BN_GF2M_MOD_SQRT
 137

	)

852 
	#BN_F_BN_MOD_EXP2_MONT
 118

	)

853 
	#BN_F_BN_MOD_EXP_MONT
 109

	)

854 
	#BN_F_BN_MOD_EXP_MONT_CONSTTIME
 124

	)

855 
	#BN_F_BN_MOD_EXP_MONT_WORD
 117

	)

856 
	#BN_F_BN_MOD_EXP_RECP
 125

	)

857 
	#BN_F_BN_MOD_EXP_SIMPLE
 126

	)

858 
	#BN_F_BN_MOD_INVERSE
 110

	)

859 
	#BN_F_BN_MOD_INVERSE_NO_BRANCH
 139

	)

860 
	#BN_F_BN_MOD_LSHIFT_QUICK
 119

	)

861 
	#BN_F_BN_MOD_MUL_RECIPROCAL
 111

	)

862 
	#BN_F_BN_MOD_SQRT
 121

	)

863 
	#BN_F_BN_MPI2BN
 112

	)

864 
	#BN_F_BN_NEW
 113

	)

865 
	#BN_F_BN_RAND
 114

	)

866 
	#BN_F_BN_RAND_RANGE
 122

	)

867 
	#BN_F_BN_USUB
 115

	)

870 
	#BN_R_ARG2_LT_ARG3
 100

	)

871 
	#BN_R_BAD_RECIPROCAL
 101

	)

872 
	#BN_R_BIGNUM_TOO_LONG
 114

	)

873 
	#BN_R_CALLED_WITH_EVEN_MODULUS
 102

	)

874 
	#BN_R_DIV_BY_ZERO
 103

	)

875 
	#BN_R_ENCODING_ERROR
 104

	)

876 
	#BN_R_EXPAND_ON_STATIC_BIGNUM_DATA
 105

	)

877 
	#BN_R_INPUT_NOT_REDUCED
 110

	)

878 
	#BN_R_INVALID_LENGTH
 106

	)

879 
	#BN_R_INVALID_RANGE
 115

	)

880 
	#BN_R_NOT_A_SQUARE
 111

	)

881 
	#BN_R_NOT_INITIALIZED
 107

	)

882 
	#BN_R_NO_INVERSE
 108

	)

883 
	#BN_R_NO_SOLUTION
 116

	)

884 
	#BN_R_P_IS_NOT_PRIME
 112

	)

885 
	#BN_R_TOO_MANY_ITERATIONS
 113

	)

886 
	#BN_R_TOO_MANY_TEMPORARY_VARIABLES
 109

	)

888 #ifde‡ 
__˝lu•lus


889 
	}
}

	@/usr/include/openssl/buffer.h

59 #i‚de‡
HEADER_BUFFER_H


60 
	#HEADER_BUFFER_H


	)

62 
	~<›ís¶/os¶_typ.h
>

64 #ifde‡ 
__˝lu•lus


68 
	~<°ddef.h
>

70 #i‡!
deföed
(
NO_SYS_TYPES_H
)

71 
	~<sys/ty≥s.h
>

77 
	sbuf_mem_°


79 
size_t
 
Àngth
;

80 *
d©a
;

81 
size_t
 
max
;

84 
BUF_MEM
 *
BUF_MEM_√w
();

85 
BUF_MEM_‰ì
(
BUF_MEM
 *
a
);

86 
BUF_MEM_grow
(
BUF_MEM
 *
°r
, 
size_t
 
Àn
);

87 
BUF_MEM_grow_˛ón
(
BUF_MEM
 *
°r
, 
size_t
 
Àn
);

88 * 
BUF_°rdup
(c⁄° *
°r
);

89 * 
BUF_°∫dup
(c⁄° *
°r
, 
size_t
 
siz
);

90 * 
BUF_memdup
(c⁄° *
d©a
, 
size_t
 
siz
);

91 
BUF_ªvî£
(*
out
, *
ö
, 
size_t
 
siz
);

94 
size_t
 
BUF_°æ˝y
(*
d°
,c⁄° *
§c
,size_à
siz
);

95 
size_t
 
BUF_°æˇt
(*
d°
,c⁄° *
§c
,size_à
siz
);

102 
ERR_lﬂd_BUF_°rögs
();

107 
	#BUF_F_BUF_MEMDUP
 103

	)

108 
	#BUF_F_BUF_MEM_GROW
 100

	)

109 
	#BUF_F_BUF_MEM_GROW_CLEAN
 105

	)

110 
	#BUF_F_BUF_MEM_NEW
 101

	)

111 
	#BUF_F_BUF_STRDUP
 102

	)

112 
	#BUF_F_BUF_STRNDUP
 104

	)

116 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/comp.h

2 #i‚de‡
HEADER_COMP_H


3 
	#HEADER_COMP_H


	)

5 
	~<›ís¶/¸y±o.h
>

7 #ifde‡ 
__˝lu•lus


11 
comp_˘x_°
 
	tCOMP_CTX
;

13 
	scomp_mëhod_°


15 
ty≥
;

16 c⁄° *
«me
;

17 (*
öô
)(
COMP_CTX
 *
˘x
);

18 (*
föish
)(
COMP_CTX
 *
˘x
);

19 (*
com¥ess
)(
COMP_CTX
 *
˘x
,

20 *
out
, 
ﬁí
,

21 *
ö
, 
ûí
);

22 (*
ex∑nd
)(
COMP_CTX
 *
˘x
,

23 *
out
, 
ﬁí
,

24 *
ö
, 
ûí
);

26 (*
˘æ
)();

27 (*
ˇŒback_˘æ
)();

28 } 
	tCOMP_METHOD
;

30 
	scomp_˘x_°


32 
COMP_METHOD
 *
mëh
;

33 
com¥ess_ö
;

34 
com¥ess_out
;

35 
ex∑nd_ö
;

36 
ex∑nd_out
;

38 
CRYPTO_EX_DATA
 
ex_d©a
;

42 
COMP_CTX
 *
COMP_CTX_√w
(
COMP_METHOD
 *
mëh
);

43 
COMP_CTX_‰ì
(
COMP_CTX
 *
˘x
);

44 
COMP_com¥ess_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

45 *
ö
, 
ûí
);

46 
COMP_ex∑nd_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

47 *
ö
, 
ûí
);

48 
COMP_METHOD
 *
COMP_æe
();

49 
COMP_METHOD
 *
COMP_zlib
();

50 
COMP_zlib_˛ónup
();

52 #ifde‡
HEADER_BIO_H


53 #ifde‡
ZLIB


54 
BIO_METHOD
 *
BIO_f_zlib
();

62 
ERR_lﬂd_COMP_°rögs
();

67 
	#COMP_F_BIO_ZLIB_FLUSH
 99

	)

68 
	#COMP_F_BIO_ZLIB_NEW
 100

	)

69 
	#COMP_F_BIO_ZLIB_READ
 101

	)

70 
	#COMP_F_BIO_ZLIB_WRITE
 102

	)

73 
	#COMP_R_ZLIB_DEFLATE_ERROR
 99

	)

74 
	#COMP_R_ZLIB_INFLATE_ERROR
 100

	)

75 
	#COMP_R_ZLIB_NOT_SUPPORTED
 101

	)

77 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/conf.h

59 #i‚de‡ 
HEADER_CONF_H


60 
	#HEADER_CONF_H


	)

62 
	~<›ís¶/bio.h
>

63 
	~<›ís¶/lhash.h
>

64 
	~<›ís¶/°ack.h
>

65 
	~<›ís¶/ß„°ack.h
>

66 
	~<›ís¶/e_os2.h
>

68 
	~<›ís¶/os¶_typ.h
>

70 #ifde‡ 
__˝lu•lus


76 *
£˘i⁄
;

77 *
«me
;

78 *
vÆue
;

79 } 
	tCONF_VALUE
;

81 
DECLARE_STACK_OF
(
CONF_VALUE
)

82 
DECLARE_LHASH_OF
(
CONF_VALUE
);

84 
c⁄f_°
;

85 
c⁄f_mëhod_°
;

86 
c⁄f_mëhod_°
 
	tCONF_METHOD
;

88 
	sc⁄f_mëhod_°


90 c⁄° *
«me
;

91 
CONF
 *(*
¸óã
)(
CONF_METHOD
 *
mëh
);

92 (*
öô
)(
CONF
 *
c⁄f
);

93 (*
de°roy
)(
CONF
 *
c⁄f
);

94 (*
de°roy_d©a
)(
CONF
 *
c⁄f
);

95 (*
lﬂd_bio
)(
CONF
 *
c⁄f
, 
BIO
 *
bp
, *
ñöe
);

96 (*
dump
)(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
bp
);

97 (*
is_numbî
)(c⁄° 
CONF
 *
c⁄f
, 
c
);

98 (*
to_öt
)(c⁄° 
CONF
 *
c⁄f
, 
c
);

99 (*
lﬂd
)(
CONF
 *
c⁄f
, c⁄° *
«me
, *
ñöe
);

104 
c⁄f_imoduÀ_°
 
	tCONF_IMODULE
;

105 
c⁄f_moduÀ_°
 
	tCONF_MODULE
;

107 
DECLARE_STACK_OF
(
CONF_MODULE
)

108 
DECLARE_STACK_OF
(
CONF_IMODULE
)

111 
	tc⁄f_öô_func
(
	tCONF_IMODULE
 *
	tmd
, c⁄° 
	tCONF
 *
	t˙f
);

112 
	tc⁄f_föish_func
(
	tCONF_IMODULE
 *
	tmd
);

114 
	#CONF_MFLAGS_IGNORE_ERRORS
 0x1

	)

115 
	#CONF_MFLAGS_IGNORE_RETURN_CODES
 0x2

	)

116 
	#CONF_MFLAGS_SILENT
 0x4

	)

117 
	#CONF_MFLAGS_NO_DSO
 0x8

	)

118 
	#CONF_MFLAGS_IGNORE_MISSING_FILE
 0x10

	)

119 
	#CONF_MFLAGS_DEFAULT_SECTION
 0x20

	)

121 
CONF_£t_deÁu…_mëhod
(
CONF_METHOD
 *
mëh
);

122 
CONF_£t_nc⁄f
(
CONF
 *
c⁄f
,
LHASH_OF
(
CONF_VALUE
Ë*
hash
);

123 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd
(LHASH_OF(CONF_VALUEË*
c⁄f
,c⁄° *
fûe
,

124 *
ñöe
);

125 #i‚de‡
OPENSSL_NO_FP_API


126 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_Â
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
FILE
 *
Â
,

127 *
ñöe
);

129 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_bio
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
BIO
 *
bp
,*
ñöe
);

130 
STACK_OF
(
CONF_VALUE
Ë*
CONF_gë_£˘i⁄
(
LHASH_OF
(CONF_VALUEË*
c⁄f
,

131 c⁄° *
£˘i⁄
);

132 *
CONF_gë_°rög
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
,c⁄° *
group
,

133 c⁄° *
«me
);

134 
CONF_gë_numbî
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
,c⁄° *
group
,

135 c⁄° *
«me
);

136 
CONF_‰ì
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
);

137 
CONF_dump_Â
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
FILE
 *
out
);

138 
CONF_dump_bio
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
BIO
 *
out
);

140 
OPENSSL_c⁄fig
(c⁄° *
c⁄fig_«me
);

141 
OPENSSL_no_c⁄fig
();

146 
	sc⁄f_°


148 
CONF_METHOD
 *
mëh
;

149 *
mëh_d©a
;

150 
LHASH_OF
(
CONF_VALUE
Ë*
d©a
;

153 
CONF
 *
NCONF_√w
(
CONF_METHOD
 *
mëh
);

154 
CONF_METHOD
 *
NCONF_deÁu…
();

155 
CONF_METHOD
 *
NCONF_WIN32
();

157 
CONF_METHOD
 *
NCONF_XML
();

159 
NCONF_‰ì
(
CONF
 *
c⁄f
);

160 
NCONF_‰ì_d©a
(
CONF
 *
c⁄f
);

162 
NCONF_lﬂd
(
CONF
 *
c⁄f
,c⁄° *
fûe
,*
ñöe
);

163 #i‚de‡
OPENSSL_NO_FP_API


164 
NCONF_lﬂd_Â
(
CONF
 *
c⁄f
, 
FILE
 *
Â
,*
ñöe
);

166 
NCONF_lﬂd_bio
(
CONF
 *
c⁄f
, 
BIO
 *
bp
,*
ñöe
);

167 
STACK_OF
(
CONF_VALUE
Ë*
NCONF_gë_£˘i⁄
(c⁄° 
CONF
 *
c⁄f
,c⁄° *
£˘i⁄
);

168 *
NCONF_gë_°rög
(c⁄° 
CONF
 *
c⁄f
,c⁄° *
group
,c⁄° *
«me
);

169 
NCONF_gë_numbî_e
(c⁄° 
CONF
 *
c⁄f
,c⁄° *
group
,c⁄° *
«me
,

170 *
ªsu…
);

171 
NCONF_dump_Â
(c⁄° 
CONF
 *
c⁄f
, 
FILE
 *
out
);

172 
NCONF_dump_bio
(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
out
);

176 
NCONF_gë_numbî
(
CONF
 *
c⁄f
,*
group
,*
«me
);

178 
	#NCONF_gë_numbî
(
c
,
g
,
n
,
r
Ë
	`NCONF_gë_numbî_e
(c,g,n,r)

	)

183 
CONF_moduÀs_lﬂd
(c⁄° 
CONF
 *
˙f
, c⁄° *
≠≤ame
,

184 
Êags
);

185 
CONF_moduÀs_lﬂd_fûe
(c⁄° *
fûíame
, c⁄° *
≠≤ame
,

186 
Êags
);

187 
CONF_moduÀs_u∆ﬂd
(
Æl
);

188 
CONF_moduÀs_föish
();

189 
CONF_moduÀs_‰ì
();

190 
CONF_moduÀ_add
(c⁄° *
«me
, 
c⁄f_öô_func
 *
ifunc
,

191 
c⁄f_föish_func
 *
ffunc
);

193 c⁄° *
CONF_imoduÀ_gë_«me
(c⁄° 
CONF_IMODULE
 *
md
);

194 c⁄° *
CONF_imoduÀ_gë_vÆue
(c⁄° 
CONF_IMODULE
 *
md
);

195 *
CONF_imoduÀ_gë_u§_d©a
(c⁄° 
CONF_IMODULE
 *
md
);

196 
CONF_imoduÀ_£t_u§_d©a
(
CONF_IMODULE
 *
md
, *
u§_d©a
);

197 
CONF_MODULE
 *
CONF_imoduÀ_gë_moduÀ
(c⁄° 
CONF_IMODULE
 *
md
);

198 
CONF_imoduÀ_gë_Êags
(c⁄° 
CONF_IMODULE
 *
md
);

199 
CONF_imoduÀ_£t_Êags
(
CONF_IMODULE
 *
md
, 
Êags
);

200 *
CONF_moduÀ_gë_u§_d©a
(
CONF_MODULE
 *
pmod
);

201 
CONF_moduÀ_£t_u§_d©a
(
CONF_MODULE
 *
pmod
, *
u§_d©a
);

203 *
CONF_gë1_deÁu…_c⁄fig_fûe
();

205 
CONF_∑r£_li°
(c⁄° *
li°
, 
£p
, 
no•c
,

206 (*
li°_cb
)(c⁄° *
ñem
, 
Àn
, *
u§
), *
¨g
);

208 
OPENSSL_lﬂd_buûtö_moduÀs
();

214 
ERR_lﬂd_CONF_°rögs
();

219 
	#CONF_F_CONF_DUMP_FP
 104

	)

220 
	#CONF_F_CONF_LOAD
 100

	)

221 
	#CONF_F_CONF_LOAD_BIO
 102

	)

222 
	#CONF_F_CONF_LOAD_FP
 103

	)

223 
	#CONF_F_CONF_MODULES_LOAD
 116

	)

224 
	#CONF_F_CONF_PARSE_LIST
 119

	)

225 
	#CONF_F_DEF_LOAD
 120

	)

226 
	#CONF_F_DEF_LOAD_BIO
 121

	)

227 
	#CONF_F_MODULE_INIT
 115

	)

228 
	#CONF_F_MODULE_LOAD_DSO
 117

	)

229 
	#CONF_F_MODULE_RUN
 118

	)

230 
	#CONF_F_NCONF_DUMP_BIO
 105

	)

231 
	#CONF_F_NCONF_DUMP_FP
 106

	)

232 
	#CONF_F_NCONF_GET_NUMBER
 107

	)

233 
	#CONF_F_NCONF_GET_NUMBER_E
 112

	)

234 
	#CONF_F_NCONF_GET_SECTION
 108

	)

235 
	#CONF_F_NCONF_GET_STRING
 109

	)

236 
	#CONF_F_NCONF_LOAD
 113

	)

237 
	#CONF_F_NCONF_LOAD_BIO
 110

	)

238 
	#CONF_F_NCONF_LOAD_FP
 114

	)

239 
	#CONF_F_NCONF_NEW
 111

	)

240 
	#CONF_F_STR_COPY
 101

	)

243 
	#CONF_R_ERROR_LOADING_DSO
 110

	)

244 
	#CONF_R_LIST_CANNOT_BE_NULL
 115

	)

245 
	#CONF_R_MISSING_CLOSE_SQUARE_BRACKET
 100

	)

246 
	#CONF_R_MISSING_EQUAL_SIGN
 101

	)

247 
	#CONF_R_MISSING_FINISH_FUNCTION
 111

	)

248 
	#CONF_R_MISSING_INIT_FUNCTION
 112

	)

249 
	#CONF_R_MODULE_INITIALIZATION_ERROR
 109

	)

250 
	#CONF_R_NO_CLOSE_BRACE
 102

	)

251 
	#CONF_R_NO_CONF
 105

	)

252 
	#CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE
 106

	)

253 
	#CONF_R_NO_SECTION
 107

	)

254 
	#CONF_R_NO_SUCH_FILE
 114

	)

255 
	#CONF_R_NO_VALUE
 108

	)

256 
	#CONF_R_UNABLE_TO_CREATE_NEW_SECTION
 103

	)

257 
	#CONF_R_UNKNOWN_MODULE_NAME
 113

	)

258 
	#CONF_R_VARIABLE_HAS_NO_VALUE
 104

	)

260 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/crypto.h

117 #i‚de‡
HEADER_CRYPTO_H


118 
	#HEADER_CRYPTO_H


	)

120 
	~<°dlib.h
>

122 
	~<›ís¶/e_os2.h
>

124 #i‚de‡
OPENSSL_NO_FP_API


125 
	~<°dio.h
>

128 
	~<›ís¶/°ack.h
>

129 
	~<›ís¶/ß„°ack.h
>

130 
	~<›ís¶/›ís¶v.h
>

131 
	~<›ís¶/os¶_typ.h
>

133 #ifde‡
CHARSET_EBCDIC


134 
	~<›ís¶/ebcdic.h
>

139 
	~<›ís¶/symhacks.h
>

141 #ifde‡ 
__˝lu•lus


148 
	#SSLEAY_VERSION_NUMBER
 
OPENSSL_VERSION_NUMBER


	)

149 
	#SSLEAY_VERSION
 0

	)

151 
	#SSLEAY_CFLAGS
 2

	)

152 
	#SSLEAY_BUILT_ON
 3

	)

153 
	#SSLEAY_PLATFORM
 4

	)

154 
	#SSLEAY_DIR
 5

	)

158 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

160 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

161 
	tidx
, 
	t¨gl
, *
	t¨gp
);

163 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

164 
	tidx
, 
	t¨gl
, *
	t¨gp
);

166 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

167 
	tidx
, 
	t¨gl
, *
	t¨gp
);

171 
	s›ís¶_ôem_°


173 
code
;

174 *
vÆue
;

175 
size_t
 
vÆue_size
;

176 
size_t
 *
vÆue_Àngth
;

177 } 
	tOPENSSL_ITEM
;

184 
	#CRYPTO_LOCK_ERR
 1

	)

185 
	#CRYPTO_LOCK_EX_DATA
 2

	)

186 
	#CRYPTO_LOCK_X509
 3

	)

187 
	#CRYPTO_LOCK_X509_INFO
 4

	)

188 
	#CRYPTO_LOCK_X509_PKEY
 5

	)

189 
	#CRYPTO_LOCK_X509_CRL
 6

	)

190 
	#CRYPTO_LOCK_X509_REQ
 7

	)

191 
	#CRYPTO_LOCK_DSA
 8

	)

192 
	#CRYPTO_LOCK_RSA
 9

	)

193 
	#CRYPTO_LOCK_EVP_PKEY
 10

	)

194 
	#CRYPTO_LOCK_X509_STORE
 11

	)

195 
	#CRYPTO_LOCK_SSL_CTX
 12

	)

196 
	#CRYPTO_LOCK_SSL_CERT
 13

	)

197 
	#CRYPTO_LOCK_SSL_SESSION
 14

	)

198 
	#CRYPTO_LOCK_SSL_SESS_CERT
 15

	)

199 
	#CRYPTO_LOCK_SSL
 16

	)

200 
	#CRYPTO_LOCK_SSL_METHOD
 17

	)

201 
	#CRYPTO_LOCK_RAND
 18

	)

202 
	#CRYPTO_LOCK_RAND2
 19

	)

203 
	#CRYPTO_LOCK_MALLOC
 20

	)

204 
	#CRYPTO_LOCK_BIO
 21

	)

205 
	#CRYPTO_LOCK_GETHOSTBYNAME
 22

	)

206 
	#CRYPTO_LOCK_GETSERVBYNAME
 23

	)

207 
	#CRYPTO_LOCK_READDIR
 24

	)

208 
	#CRYPTO_LOCK_RSA_BLINDING
 25

	)

209 
	#CRYPTO_LOCK_DH
 26

	)

210 
	#CRYPTO_LOCK_MALLOC2
 27

	)

211 
	#CRYPTO_LOCK_DSO
 28

	)

212 
	#CRYPTO_LOCK_DYNLOCK
 29

	)

213 
	#CRYPTO_LOCK_ENGINE
 30

	)

214 
	#CRYPTO_LOCK_UI
 31

	)

215 
	#CRYPTO_LOCK_ECDSA
 32

	)

216 
	#CRYPTO_LOCK_EC
 33

	)

217 
	#CRYPTO_LOCK_ECDH
 34

	)

218 
	#CRYPTO_LOCK_BN
 35

	)

219 
	#CRYPTO_LOCK_EC_PRE_COMP
 36

	)

220 
	#CRYPTO_LOCK_STORE
 37

	)

221 
	#CRYPTO_LOCK_COMP
 38

	)

222 
	#CRYPTO_LOCK_FIPS
 39

	)

223 
	#CRYPTO_LOCK_FIPS2
 40

	)

224 
	#CRYPTO_NUM_LOCKS
 41

	)

226 
	#CRYPTO_LOCK
 1

	)

227 
	#CRYPTO_UNLOCK
 2

	)

228 
	#CRYPTO_READ
 4

	)

229 
	#CRYPTO_WRITE
 8

	)

231 #i‚de‡
OPENSSL_NO_LOCKING


232 #i‚de‡
CRYPTO_w_lock


233 
	#CRYPTO_w_lock
(
ty≥
) \

234 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

235 
	#CRYPTO_w_u∆ock
(
ty≥
) \

236 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

237 
	#CRYPTO_r_lock
(
ty≥
) \

238 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

239 
	#CRYPTO_r_u∆ock
(
ty≥
) \

240 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

241 
	#CRYPTO_add
(
addr
,
amou¡
,
ty≥
) \

242 
	`CRYPTO_add_lock
(
addr
,
amou¡
,
ty≥
,
__FILE__
,
__LINE__
)

	)

245 
	#CRYPTO_w_lock
(
a
)

	)

246 
	#CRYPTO_w_u∆ock
(
a
)

	)

247 
	#CRYPTO_r_lock
(
a
)

	)

248 
	#CRYPTO_r_u∆ock
(
a
)

	)

249 
	#CRYPTO_add
(
a
,
b
,
c
Ë((*◊))+=(b))

	)

258 
ª„ªn˚s
;

259 
CRYPTO_dy∆ock_vÆue
 *
d©a
;

260 } 
	tCRYPTO_dy∆ock
;

266 
	#CRYPTO_MEM_CHECK_OFF
 0x0

	)

267 
	#CRYPTO_MEM_CHECK_ON
 0x1

	)

268 
	#CRYPTO_MEM_CHECK_ENABLE
 0x2

	)

269 
	#CRYPTO_MEM_CHECK_DISABLE
 0x3

	)

275 
	#V_CRYPTO_MDEBUG_TIME
 0x1

	)

277 
	#V_CRYPTO_MDEBUG_THREAD
 0x2

	)

279 
	#V_CRYPTO_MDEBUG_ALL
 (
V_CRYPTO_MDEBUG_TIME
 | 
V_CRYPTO_MDEBUG_THREAD
)

	)

283 
bio_°
 
	tBIO_dummy
;

285 
	s¸y±o_ex_d©a_°


287 
STACK_OF
(Ë*
sk
;

288 
dummy
;

290 
DECLARE_STACK_OF
()

295 
	s¸y±o_ex_d©a_func_°


297 
¨gl
;

298 *
¨gp
;

299 
CRYPTO_EX_√w
 *
√w_func
;

300 
CRYPTO_EX_‰ì
 *
‰ì_func
;

301 
CRYPTO_EX_dup
 *
dup_func
;

302 } 
	tCRYPTO_EX_DATA_FUNCS
;

304 
DECLARE_STACK_OF
(
CRYPTO_EX_DATA_FUNCS
)

310 
	#CRYPTO_EX_INDEX_BIO
 0

	)

311 
	#CRYPTO_EX_INDEX_SSL
 1

	)

312 
	#CRYPTO_EX_INDEX_SSL_CTX
 2

	)

313 
	#CRYPTO_EX_INDEX_SSL_SESSION
 3

	)

314 
	#CRYPTO_EX_INDEX_X509_STORE
 4

	)

315 
	#CRYPTO_EX_INDEX_X509_STORE_CTX
 5

	)

316 
	#CRYPTO_EX_INDEX_RSA
 6

	)

317 
	#CRYPTO_EX_INDEX_DSA
 7

	)

318 
	#CRYPTO_EX_INDEX_DH
 8

	)

319 
	#CRYPTO_EX_INDEX_ENGINE
 9

	)

320 
	#CRYPTO_EX_INDEX_X509
 10

	)

321 
	#CRYPTO_EX_INDEX_UI
 11

	)

322 
	#CRYPTO_EX_INDEX_ECDSA
 12

	)

323 
	#CRYPTO_EX_INDEX_ECDH
 13

	)

324 
	#CRYPTO_EX_INDEX_COMP
 14

	)

325 
	#CRYPTO_EX_INDEX_STORE
 15

	)

329 
	#CRYPTO_EX_INDEX_USER
 100

	)

336 
	#CRYPTO_mÆloc_öô
(Ë
	`CRYPTO_£t_mem_fun˘i⁄s
(\

337 
mÆloc
, 
ªÆloc
, 
‰ì
)

	)

339 #i‡
deföed
 
CRYPTO_MDEBUG_ALL
 || deföed 
CRYPTO_MDEBUG_TIME
 || deföed 
CRYPTO_MDEBUG_THREAD


340 #i‚de‡
CRYPTO_MDEBUG


341 
	#CRYPTO_MDEBUG


	)

347 
	#CRYPTO_mÆloc_debug_öô
() do {\

348 
	`CRYPTO_£t_mem_debug_fun˘i⁄s
(\

349 
CRYPTO_dbg_mÆloc
,\

350 
CRYPTO_dbg_ªÆloc
,\

351 
CRYPTO_dbg_‰ì
,\

352 
CRYPTO_dbg_£t_›ti⁄s
,\

353 
CRYPTO_dbg_gë_›ti⁄s
);\

354 } 0)

	)

356 
CRYPTO_mem_˘æ
(
mode
);

357 
CRYPTO_is_mem_check_⁄
();

360 
	#MemCheck_°¨t
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ON
)

	)

361 
	#MemCheck_°›
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_OFF
)

	)

364 
	#MemCheck_⁄
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ENABLE
)

	)

365 
	#MemCheck_off
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_DISABLE
)

	)

366 
	#is_MemCheck_⁄
(Ë
	`CRYPTO_is_mem_check_⁄
()

	)

368 
	#OPENSSL_mÆloc
(
num
Ë
	`CRYPTO_mÆloc
((Íum,
__FILE__
,
__LINE__
)

	)

369 
	#OPENSSL_°rdup
(
°r
Ë
	`CRYPTO_°rdup
((°r),
__FILE__
,
__LINE__
)

	)

370 
	#OPENSSL_ªÆloc
(
addr
,
num
) \

371 
	`CRYPTO_ªÆloc
((*)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

372 
	#OPENSSL_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
) \

373 
	`CRYPTO_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
,
__FILE__
,
__LINE__
)

	)

374 
	#OPENSSL_ªmÆloc
(
addr
,
num
) \

375 
	`CRYPTO_ªmÆloc
((**)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

376 
	#OPENSSL_‰ìFunc
 
CRYPTO_‰ì


	)

377 
	#OPENSSL_‰ì
(
addr
Ë
	`CRYPTO_‰ì
◊ddr)

	)

379 
	#OPENSSL_mÆloc_locked
(
num
) \

380 
	`CRYPTO_mÆloc_locked
(()
num
,
__FILE__
,
__LINE__
)

	)

381 
	#OPENSSL_‰ì_locked
(
addr
Ë
	`CRYPTO_‰ì_locked
◊ddr)

	)

384 c⁄° *
SSLóy_vîsi⁄
(
ty≥
);

385 
SSLóy
();

387 
OPENSSL_is£tugid
();

390 
°_CRYPTO_EX_DATA_IMPL
 
	tCRYPTO_EX_DATA_IMPL
;

392 c⁄° 
CRYPTO_EX_DATA_IMPL
 *
CRYPTO_gë_ex_d©a_im∂emíèti⁄
();

394 
CRYPTO_£t_ex_d©a_im∂emíèti⁄
(c⁄° 
CRYPTO_EX_DATA_IMPL
 *
i
);

396 
CRYPTO_ex_d©a_√w_˛ass
();

398 
CRYPTO_gë_ex_√w_ödex
(
˛ass_ödex
, 
¨gl
, *
¨gp
,

399 
CRYPTO_EX_√w
 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

400 
CRYPTO_EX_‰ì
 *
‰ì_func
);

403 
CRYPTO_√w_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

404 
CRYPTO_dup_ex_d©a
(
˛ass_ödex
, 
CRYPTO_EX_DATA
 *
to
,

405 
CRYPTO_EX_DATA
 *
‰om
);

406 
CRYPTO_‰ì_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

409 
CRYPTO_£t_ex_d©a
(
CRYPTO_EX_DATA
 *
ad
, 
idx
, *
vÆ
);

410 *
CRYPTO_gë_ex_d©a
(c⁄° 
CRYPTO_EX_DATA
 *
ad
,
idx
);

413 
CRYPTO_˛ónup_Æl_ex_d©a
();

415 
CRYPTO_gë_√w_lockid
(*
«me
);

417 
CRYPTO_num_locks
();

418 
CRYPTO_lock
(
mode
, 
ty≥
,c⁄° *
fûe
,
löe
);

419 
CRYPTO_£t_lockög_ˇŒback
((*
func
)(
mode
,
ty≥
,

420 c⁄° *
fûe
,
löe
));

421 (*
CRYPTO_gë_lockög_ˇŒback
())(
mode
,
ty≥
,c⁄° *
fûe
,

422 
löe
);

423 
CRYPTO_£t_add_lock_ˇŒback
((*
func
)(*
num
,
mou¡
,
ty≥
,

424 c⁄° *
fûe
, 
löe
));

425 (*
CRYPTO_gë_add_lock_ˇŒback
())(*
num
,
mou¡
,
ty≥
,

426 c⁄° *
fûe
,
löe
);

429 
	s¸y±o_thªadid_°


431 *
±r
;

432 
vÆ
;

433 } 
	tCRYPTO_THREADID
;

435 
CRYPTO_THREADID_£t_numîic
(
CRYPTO_THREADID
 *
id
, 
vÆ
);

436 
CRYPTO_THREADID_£t_poöãr
(
CRYPTO_THREADID
 *
id
, *
±r
);

437 
CRYPTO_THREADID_£t_ˇŒback
((*
thªadid_func
)(
CRYPTO_THREADID
 *));

438 (*
CRYPTO_THREADID_gë_ˇŒback
())(
CRYPTO_THREADID
 *);

439 
CRYPTO_THREADID_cuºít
(
CRYPTO_THREADID
 *
id
);

440 
CRYPTO_THREADID_cmp
(c⁄° 
CRYPTO_THREADID
 *
a
, c⁄° CRYPTO_THREADID *
b
);

441 
CRYPTO_THREADID_˝y
(
CRYPTO_THREADID
 *
de°
, c⁄° CRYPTO_THREADID *
§c
);

442 
CRYPTO_THREADID_hash
(c⁄° 
CRYPTO_THREADID
 *
id
);

443 #i‚de‡
OPENSSL_NO_DEPRECATED


444 
CRYPTO_£t_id_ˇŒback
((*
func
)());

445 (*
CRYPTO_gë_id_ˇŒback
())();

446 
CRYPTO_thªad_id
();

449 c⁄° *
CRYPTO_gë_lock_«me
(
ty≥
);

450 
CRYPTO_add_lock
(*
poöãr
,
amou¡
,
ty≥
, c⁄° *
fûe
,

451 
löe
);

453 
CRYPTO_gë_√w_dy∆ockid
();

454 
CRYPTO_de°roy_dy∆ockid
(
i
);

455 
CRYPTO_dy∆ock_vÆue
 *
CRYPTO_gë_dy∆ock_vÆue
(
i
);

456 
CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
CRYPTO_dy∆ock_vÆue
 *(*
dyn_¸óã_fun˘i⁄
)(c⁄° *
fûe
, 
löe
));

457 
CRYPTO_£t_dy∆ock_lock_ˇŒback
((*
dyn_lock_fun˘i⁄
)(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

458 
CRYPTO_£t_dy∆ock_de°roy_ˇŒback
((*
dyn_de°roy_fun˘i⁄
)(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

459 
CRYPTO_dy∆ock_vÆue
 *(*
CRYPTO_gë_dy∆ock_¸óã_ˇŒback
())(c⁄° *
fûe
,
löe
);

460 (*
CRYPTO_gë_dy∆ock_lock_ˇŒback
())(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

461 (*
CRYPTO_gë_dy∆ock_de°roy_ˇŒback
())(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

465 
CRYPTO_£t_mem_fun˘i⁄s
(*(*
m
)(
size_t
),*(*
r
)(*,size_t), (*
f
)(*));

466 
CRYPTO_£t_locked_mem_fun˘i⁄s
(*(*
m
)(
size_t
), (*
‰ì_func
)(*));

467 
CRYPTO_£t_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

468 *(*
r
)(*,
size_t
,const *,),

469 (*
f
)(*));

470 
CRYPTO_£t_locked_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

471 (*
‰ì_func
)(*));

472 
CRYPTO_£t_mem_debug_fun˘i⁄s
((*
m
)(*,,const *,,),

473 (*
r
)(*,*,,const *,,),

474 (*
f
)(*,),

475 (*
so
)(),

476 (*
go
)());

477 
CRYPTO_gë_mem_fun˘i⁄s
(*(**
m
)(
size_t
),*(**
r
)(*, size_t), (**
f
)(*));

478 
CRYPTO_gë_locked_mem_fun˘i⁄s
(*(**
m
)(
size_t
), (**
f
)(*));

479 
CRYPTO_gë_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

480 *(**
r
)(*, 
size_t
,const *,),

481 (**
f
)(*));

482 
CRYPTO_gë_locked_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

483 (**
f
)(*));

484 
CRYPTO_gë_mem_debug_fun˘i⁄s
((**
m
)(*,,const *,,),

485 (**
r
)(*,*,,const *,,),

486 (**
f
)(*,),

487 (**
so
)(),

488 (**
go
)());

490 *
CRYPTO_mÆloc_locked
(
num
, c⁄° *
fûe
, 
löe
);

491 
CRYPTO_‰ì_locked
(*);

492 *
CRYPTO_mÆloc
(
num
, c⁄° *
fûe
, 
löe
);

493 *
CRYPTO_°rdup
(c⁄° *
°r
, c⁄° *
fûe
, 
löe
);

494 
CRYPTO_‰ì
(*);

495 *
CRYPTO_ªÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

496 *
CRYPTO_ªÆloc_˛ón
(*
addr
,
ﬁd_num
,
num
,c⁄° *
fûe
,

497 
löe
);

498 *
CRYPTO_ªmÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

500 
OPENSSL_˛ón£
(*
±r
, 
size_t
 
Àn
);

502 
CRYPTO_£t_mem_debug_›ti⁄s
(
bôs
);

503 
CRYPTO_gë_mem_debug_›ti⁄s
();

505 
	#CRYPTO_push_öfo
(
öfo
) \

506 
	`CRYPTO_push_öfo_
(
öfo
, 
__FILE__
, 
__LINE__
);

	)

507 
CRYPTO_push_öfo_
(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
);

508 
CRYPTO_p›_öfo
();

509 
CRYPTO_ªmove_Æl_öfo
();

519 
CRYPTO_dbg_mÆloc
(*
addr
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

520 
CRYPTO_dbg_ªÆloc
(*
addr1
,*
addr2
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

521 
CRYPTO_dbg_‰ì
(*
addr
,
bef‹e_p
);

530 
CRYPTO_dbg_£t_›ti⁄s
(
bôs
);

531 
CRYPTO_dbg_gë_›ti⁄s
();

534 #i‚de‡
OPENSSL_NO_FP_API


535 
CRYPTO_mem_Àaks_Â
(
FILE
 *);

537 
CRYPTO_mem_Àaks
(
bio_°
 *
bio
);

539 *
	tCRYPTO_MEM_LEAK_CB
(, const *, , , *);

540 
CRYPTO_mem_Àaks_cb
(
CRYPTO_MEM_LEAK_CB
 *
cb
);

543 
O≥nSSLDõ
(c⁄° *
fûe
,
löe
,c⁄° *
as£πi⁄
);

544 
	#OPENSSL_as£π
(
e
Ë()(”Ë? 0 : (
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, #e),1))

	)

546 *
OPENSSL_ü32ˇp_loc
();

547 
	#OPENSSL_ü32ˇp
 (*(
	`OPENSSL_ü32ˇp_loc
()))

	)

548 
OPENSSL_is£rvi˚
();

550 
FIPS_mode
();

551 
FIPS_mode_£t
(
r
);

553 
OPENSSL_öô
();

555 
	#fùs_md_öô
(
Æg
Ë
	`fùs_md_öô_˘x
◊lg,álg)

	)

557 #ifde‡
OPENSSL_FIPS


558 
	#fùs_md_öô_˘x
(
Æg
, 
cx
) \

559 
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
) \

561 i‡(
	`FIPS_mode
()Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

563  
¥iv©e_
##
Æg
##
	`_Inô
(
c
); \

565 
¥iv©e_
##
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
)

	)

567 
	#fùs_cùhî_ab‹t
(
Æg
) \

568 i‡(
	`FIPS_mode
()Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

569 "LowÜevñ API cÆ»tÿcùhî " #Æg " f‹biddí i¿FIPS mode!")

	)

572 
	#fùs_md_öô_˘x
(
Æg
, 
cx
) \

573 
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
)

	)

574 
	#fùs_cùhî_ab‹t
(
Æg
Ë0)

	)

581 
ERR_lﬂd_CRYPTO_°rögs
();

586 
	#CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX
 100

	)

587 
	#CRYPTO_F_CRYPTO_GET_NEW_DYNLOCKID
 103

	)

588 
	#CRYPTO_F_CRYPTO_GET_NEW_LOCKID
 101

	)

589 
	#CRYPTO_F_CRYPTO_SET_EX_DATA
 102

	)

590 
	#CRYPTO_F_DEF_ADD_INDEX
 104

	)

591 
	#CRYPTO_F_DEF_GET_CLASS
 105

	)

592 
	#CRYPTO_F_FIPS_MODE_SET
 109

	)

593 
	#CRYPTO_F_INT_DUP_EX_DATA
 106

	)

594 
	#CRYPTO_F_INT_FREE_EX_DATA
 107

	)

595 
	#CRYPTO_F_INT_NEW_EX_DATA
 108

	)

598 
	#CRYPTO_R_FIPS_MODE_NOT_SUPPORTED
 101

	)

599 
	#CRYPTO_R_NO_DYNLOCK_CREATE_CALLBACK
 100

	)

601 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dtls1.h

60 #i‚de‡
HEADER_DTLS1_H


61 
	#HEADER_DTLS1_H


	)

63 
	~<›ís¶/buf„r.h
>

64 
	~<›ís¶/pqueue.h
>

65 #ifde‡
OPENSSL_SYS_VMS


66 
	~<ªsour˚.h
>

67 
	~<sys/timeb.h
>

69 #ifde‡
OPENSSL_SYS_WIN32


71 
	~<wösock.h
>

72 #ñi‡
deföed
(
OPENSSL_SYS_NETWARE
Ë&& !deföed(
_WINSOCK2API_
)

73 
	~<sys/timevÆ.h
>

75 
	~<sys/time.h
>

78 #ifde‡ 
__˝lu•lus


82 
	#DTLS1_VERSION
 0xFEFF

	)

83 
	#DTLS1_BAD_VER
 0x0100

	)

87 
	#DTLS1_AD_MISSING_HANDSHAKE_MESSAGE
 110

	)

91 
	#DTLS1_COOKIE_LENGTH
 256

	)

93 
	#DTLS1_RT_HEADER_LENGTH
 13

	)

95 
	#DTLS1_HM_HEADER_LENGTH
 12

	)

97 
	#DTLS1_HM_BAD_FRAGMENT
 -2

	)

98 
	#DTLS1_HM_FRAGMENT_RETRY
 -3

	)

100 
	#DTLS1_CCS_HEADER_LENGTH
 1

	)

102 #ifde‡
DTLS1_AD_MISSING_HANDSHAKE_MESSAGE


103 
	#DTLS1_AL_HEADER_LENGTH
 7

	)

105 
	#DTLS1_AL_HEADER_LENGTH
 2

	)

108 #i‚de‡
OPENSSL_NO_SSL_INTERN


110 #i‚de‡
OPENSSL_NO_SCTP


111 
	#DTLS1_SCTP_AUTH_LABEL
 "EXPORTER_DTLS_OVER_SCTP"

	)

114 
	sdés1_bôm≠_°


116 
m≠
;

118 
max_£q_num
[8];

121 } 
	tDTLS1_BITMAP
;

123 
	sdés1_ªå™smô_°©e


125 
EVP_CIPHER_CTX
 *
íc_wrôe_˘x
;

126 
EVP_MD_CTX
 *
wrôe_hash
;

127 #i‚de‡
OPENSSL_NO_COMP


128 
COMP_CTX
 *
com¥ess
;

130 *
com¥ess
;

132 
SSL_SESSION
 *
£ssi⁄
;

133 
ïoch
;

136 
	shm_hódî_°


138 
ty≥
;

139 
msg_Àn
;

140 
£q
;

141 
‰ag_off
;

142 
‰ag_Àn
;

143 
is_ccs
;

144 
dés1_ªå™smô_°©e
 
ßved_ªå™smô_°©e
;

147 
	sccs_hódî_°


149 
ty≥
;

150 
£q
;

153 
	sdés1_timeout_°


156 
ªad_timeouts
;

159 
wrôe_timeouts
;

162 
num_Æîts
;

165 
	sªc‹d_pqueue_°


167 
ïoch
;

168 
pqueue
 
q
;

169 } 
	tªc‹d_pqueue
;

171 
	shm_‰agmít_°


173 
hm_hódî_°
 
msg_hódî
;

174 *
‰agmít
;

175 *
ªas£mbly
;

176 } 
	thm_‰agmít
;

178 
	sdés1_°©e_°


180 
£nd_cookõ
;

181 
cookõ
[
DTLS1_COOKIE_LENGTH
];

182 
rcvd_cookõ
[
DTLS1_COOKIE_LENGTH
];

183 
cookõ_Àn
;

190 
r_ïoch
;

191 
w_ïoch
;

194 
DTLS1_BITMAP
 
bôm≠
;

197 
DTLS1_BITMAP
 
√xt_bôm≠
;

200 
h™dshake_wrôe_£q
;

201 
√xt_h™dshake_wrôe_£q
;

203 
h™dshake_ªad_£q
;

206 
œ°_wrôe_£quí˚
[8];

209 
ªc‹d_pqueue
 
u≈ro˚s£d_rcds
;

210 
ªc‹d_pqueue
 
¥o˚s£d_rcds
;

213 
pqueue
 
buf„ªd_mesßges
;

216 
pqueue
 
£¡_mesßges
;

223 
ªc‹d_pqueue
 
buf„ªd_≠p_d©a
;

226 
li°í
;

228 
mtu
;

230 
hm_hódî_°
 
w_msg_hdr
;

231 
hm_hódî_°
 
r_msg_hdr
;

233 
dés1_timeout_°
 
timeout
;

236 
timevÆ
 
√xt_timeout
;

239 
timeout_duøti⁄
;

243 
Æît_‰agmít
[
DTLS1_AL_HEADER_LENGTH
];

244 
Æît_‰agmít_Àn
;

245 
h™dshake_‰agmít
[
DTLS1_HM_HEADER_LENGTH
];

246 
h™dshake_‰agmít_Àn
;

248 
ªå™smôtög
;

249 
ch™ge_cùhî_•ec_ok
;

251 #i‚de‡
OPENSSL_NO_SCTP


253 
√xt_°©e
;

255 
shutdown_ª˚ived
;

258 } 
	tDTLS1_STATE
;

260 
	sdés1_ªc‹d_d©a_°


262 *
∑ckë
;

263 
∑ckë_Àngth
;

264 
SSL3_BUFFER
 
rbuf
;

265 
SSL3_RECORD
 
ºec
;

266 #i‚de‡
OPENSSL_NO_SCTP


267 
bio_dgøm_s˘p_rcvöfo
 
ªc‹döfo
;

269 } 
	tDTLS1_RECORD_DATA
;

274 
	#DTLS1_TMO_READ_COUNT
 2

	)

275 
	#DTLS1_TMO_WRITE_COUNT
 2

	)

277 
	#DTLS1_TMO_ALERT_COUNT
 12

	)

279 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/e_os2.h

56 
	~<›ís¶/›ís¶c⁄f.h
>

58 #i‚de‡
HEADER_E_OS2_H


59 
	#HEADER_E_OS2_H


	)

61 #ifde‡ 
__˝lu•lus


71 
	#OPENSSL_SYS_UNIX


	)

74 #i‡
deföed
(
__MWERKS__
Ë&& deföed(
macötosh
Ë|| deföed(
OPENSSL_SYSNAME_MAC
)

75 #unde‡
OPENSSL_SYS_UNIX


76 
	#OPENSSL_SYS_MACINTOSH_CLASSIC


	)

80 #i‡
deföed
(
NETWARE
Ë|| deföed(
OPENSSL_SYSNAME_NETWARE
)

81 #unde‡
OPENSSL_SYS_UNIX


82 
	#OPENSSL_SYS_NETWARE


	)

89 #i‡
deföed
(
OPENSSL_SYSNAME_MSDOS
)

90 #unde‡
OPENSSL_SYS_UNIX


91 
	#OPENSSL_SYS_MSDOS


	)

96 #i‡
deföed
(
OPENSSL_SYSNAME_UWIN
)

97 #unde‡
OPENSSL_SYS_UNIX


98 
	#OPENSSL_SYS_WIN32_UWIN


	)

100 #i‡
deföed
(
__CYGWIN32__
Ë|| deföed(
OPENSSL_SYSNAME_CYGWIN32
)

101 #unde‡
OPENSSL_SYS_UNIX


102 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

104 #i‡
deföed
(
_WIN32
Ë|| deföed(
OPENSSL_SYSNAME_WIN32
)

105 #unde‡
OPENSSL_SYS_UNIX


106 
	#OPENSSL_SYS_WIN32


	)

108 #i‡
deföed
(
OPENSSL_SYSNAME_WINNT
)

109 #unde‡
OPENSSL_SYS_UNIX


110 
	#OPENSSL_SYS_WINNT


	)

112 #i‡
deföed
(
OPENSSL_SYSNAME_WINCE
)

113 #unde‡
OPENSSL_SYS_UNIX


114 
	#OPENSSL_SYS_WINCE


	)

120 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WINNT
Ë|| deföed(
OPENSSL_SYS_WINCE
)

121 #unde‡
OPENSSL_SYS_UNIX


122 
	#OPENSSL_SYS_WINDOWS


	)

123 #i‚de‡
OPENSSL_SYS_MSDOS


124 
	#OPENSSL_SYS_MSDOS


	)

131 #ifde‡
OPENSSL_SYS_WINDOWS


132 #i‚de‡
OPENSSL_OPT_WINDLL


133 #i‡
deföed
(
_WINDLL
)

135 
	#OPENSSL_OPT_WINDLL


	)

141 #i‡
deföed
(
__VMS
Ë|| deföed(
VMS
Ë|| deföed(
OPENSSL_SYSNAME_VMS
)

142 #unde‡
OPENSSL_SYS_UNIX


143 
	#OPENSSL_SYS_VMS


	)

144 #i‡
deföed
(
__DECC
)

145 
	#OPENSSL_SYS_VMS_DECC


	)

146 #ñi‡
deföed
(
__DECCXX
)

147 
	#OPENSSL_SYS_VMS_DECC


	)

148 
	#OPENSSL_SYS_VMS_DECCXX


	)

150 
	#OPENSSL_SYS_VMS_NODECC


	)

155 #i‡
deföed
(
__EMX__
Ë|| deföed(
__OS2__
)

156 #unde‡
OPENSSL_SYS_UNIX


157 
	#OPENSSL_SYS_OS2


	)

161 #ifde‡
OPENSSL_SYS_UNIX


162 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
Ë|| deföed(
OPENSSL_SYSNAME_LINUX
)

163 
	#OPENSSL_SYS_LINUX


	)

165 #ifde‡
OPENSSL_SYSNAME_MPE


166 
	#OPENSSL_SYS_MPE


	)

168 #ifde‡
OPENSSL_SYSNAME_SNI


169 
	#OPENSSL_SYS_SNI


	)

171 #ifde‡
OPENSSL_SYSNAME_ULTRASPARC


172 
	#OPENSSL_SYS_ULTRASPARC


	)

174 #ifde‡
OPENSSL_SYSNAME_NEWS4


175 
	#OPENSSL_SYS_NEWS4


	)

177 #ifde‡
OPENSSL_SYSNAME_MACOSX


178 
	#OPENSSL_SYS_MACOSX


	)

180 #ifde‡
OPENSSL_SYSNAME_MACOSX_RHAPSODY


181 
	#OPENSSL_SYS_MACOSX_RHAPSODY


	)

182 
	#OPENSSL_SYS_MACOSX


	)

184 #ifde‡
OPENSSL_SYSNAME_SUNOS


185 
	#OPENSSL_SYS_SUNOS


	)

187 #i‡
deföed
(
_CRAY
Ë|| deföed(
OPENSSL_SYSNAME_CRAY
)

188 
	#OPENSSL_SYS_CRAY


	)

190 #i‡
deföed
(
_AIX
Ë|| deföed(
OPENSSL_SYSNAME_AIX
)

191 
	#OPENSSL_SYS_AIX


	)

196 #i‡
deföed
(
__VOS__
Ë|| deföed(
OPENSSL_SYSNAME_VOS
)

197 
	#OPENSSL_SYS_VOS


	)

198 #ifde‡
__HPPA__


199 
	#OPENSSL_SYS_VOS_HPPA


	)

201 #ifde‡
__IA32__


202 
	#OPENSSL_SYS_VOS_IA32


	)

207 #ifde‡
OPENSSL_SYSNAME_VXWORKS


208 
	#OPENSSL_SYS_VXWORKS


	)

212 #i‡
deföed
(
__BEOS__
)

213 
	#OPENSSL_SYS_BEOS


	)

214 
	~<sys/sockë.h
>

215 #i‡
deföed
(
BONE_VERSION
)

216 
	#OPENSSL_SYS_BEOS_BONE


	)

218 
	#OPENSSL_SYS_BEOS_R5


	)

228 #ifde‡
OPENSSL_SYS_MSDOS


229 
	#OPENSSL_UNISTD_IO
 <
io
.
h
>

	)

230 
	#OPENSSL_DECLARE_EXIT
 
	`exô
();

	)

232 
	#OPENSSL_UNISTD_IO
 
OPENSSL_UNISTD


	)

233 
	#OPENSSL_DECLARE_EXIT


	)

255 #i‡
deföed
(
OPENSSL_SYS_VMS_NODECC
)

256 
	#OPENSSL_EXPORT
 
globÆªf


	)

257 
	#OPENSSL_IMPORT
 
globÆªf


	)

258 
	#OPENSSL_GLOBAL
 
globÆdef


	)

259 #ñi‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& deföed(
OPENSSL_OPT_WINDLL
)

260 
	#OPENSSL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

261 
	#OPENSSL_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

262 
	#OPENSSL_GLOBAL


	)

264 
	#OPENSSL_EXPORT
 

	)

265 
	#OPENSSL_IMPORT
 

	)

266 
	#OPENSSL_GLOBAL


	)

268 
	#OPENSSL_EXTERN
 
OPENSSL_IMPORT


	)

280 #ifde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


281 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
) \

282 
ty≥
 *
_shadow_
##
	`«me
() \

283 { 
ty≥
 
_hide_
##
«me
=
vÆue
;  &_hide_##«me; }

	)

284 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ëty≥ *
_shadow_
##
	`«me
()

	)

285 
	#OPENSSL_GLOBAL_REF
(
«me
Ë(*(
_shadow_
##
	`«me
()))

	)

287 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
Ë
OPENSSL_GLOBAL
Åy≥ 
_shadow_
##«me=vÆue;

	)

288 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_EXPORT
Åy≥ 
_shadow_
##
	)
name

289 
	#OPENSSL_GLOBAL_REF
(
«me
Ë
_shadow_
##
	)
name

292 #i‡
deföed
(
OPENSSL_SYS_MACINTOSH_CLASSIC
Ë&& 
macötosh
==1 && !deföed(
MAC_OS_GUSI_SOURCE
)

293 
	#os¶_ssize_t
 

	)

296 #ifde‡
OPENSSL_SYS_MSDOS


297 
	#os¶_ssize_t
 

	)

300 #i‡
deföed
(
NeXT
Ë|| deföed(
OPENSSL_SYS_NEWS4
Ë|| deföed(
OPENSSL_SYS_SUNOS
)

301 
	#ssize_t
 

	)

304 #i‡
deföed
(
__u…rix
Ë&& !deföed(
ssize_t
)

305 
	#os¶_ssize_t
 

	)

308 #i‚de‡
os¶_ssize_t


309 
	#os¶_ssize_t
 
ssize_t


	)

312 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/hmac.h

58 #i‚de‡
HEADER_HMAC_H


59 
	#HEADER_HMAC_H


	)

61 
	~<›ís¶/›ís¶c⁄f.h
>

63 #ifde‡
OPENSSL_NO_HMAC


64 #îr‹ 
HMAC
 
is
 
dißbÀd
.

67 
	~<›ís¶/evp.h
>

69 
	#HMAC_MAX_MD_CBLOCK
 128

	)

71 #ifde‡ 
__˝lu•lus


75 
	shmac_˘x_°


77 c⁄° 
EVP_MD
 *
md
;

78 
EVP_MD_CTX
 
md_˘x
;

79 
EVP_MD_CTX
 
i_˘x
;

80 
EVP_MD_CTX
 
o_˘x
;

81 
key_Àngth
;

82 
key
[
HMAC_MAX_MD_CBLOCK
];

83 } 
	tHMAC_CTX
;

85 
	#HMAC_size
(
e
Ë(
	`EVP_MD_size
(”)->
md
))

	)

88 
HMAC_CTX_öô
(
HMAC_CTX
 *
˘x
);

89 
HMAC_CTX_˛ónup
(
HMAC_CTX
 *
˘x
);

91 
	#HMAC_˛ónup
(
˘x
Ë
	`HMAC_CTX_˛ónup
(˘xË

	)

93 
HMAC_Inô
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

94 c⁄° 
EVP_MD
 *
md
);

95 
HMAC_Inô_ex
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

96 c⁄° 
EVP_MD
 *
md
, 
ENGINE
 *
im∂
);

97 
HMAC_Upd©e
(
HMAC_CTX
 *
˘x
, c⁄° *
d©a
, 
size_t
 
Àn
);

98 
HMAC_FöÆ
(
HMAC_CTX
 *
˘x
, *
md
, *
Àn
);

99 *
HMAC
(c⁄° 
EVP_MD
 *
evp_md
, c⁄° *
key
, 
key_Àn
,

100 c⁄° *
d
, 
size_t
 
n
, *
md
,

101 *
md_Àn
);

102 
HMAC_CTX_c›y
(
HMAC_CTX
 *
d˘x
, HMAC_CTX *
s˘x
);

104 
HMAC_CTX_£t_Êags
(
HMAC_CTX
 *
˘x
, 
Êags
);

106 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/kssl.h

63 #i‚def 
KSSL_H


64 
	#KSSL_H


	)

66 
	~<›ís¶/›ís¶c⁄f.h
>

68 #i‚de‡
OPENSSL_NO_KRB5


70 
	~<°dio.h
>

71 
	~<˘y≥.h
>

72 
	~<krb5.h
>

74 #ifde‡ 
__˝lu•lus


82 #ifde‡
KRB5_HEIMDAL


83 
	tkrb5_o˘ë
;

84 
	#FAR


	)

87 #i‚de‡
FAR


88 
	#FAR


	)

99 #i‚def 
KRB5SVC


100 
	#KRB5SVC
 "ho°"

	)

103 #i‚def 
KRB5KEYTAB


104 
	#KRB5KEYTAB
 "/ëc/krb5.keyèb"

	)

107 #i‚de‡
KRB5SENDAUTH


108 
	#KRB5SENDAUTH
 1

	)

111 #i‚de‡
KRB5CHECKAUTH


112 
	#KRB5CHECKAUTH
 1

	)

115 #i‚de‡
KSSL_CLOCKSKEW


116 
	#KSSL_CLOCKSKEW
 300;

	)

119 
	#KSSL_ERR_MAX
 255

	)

120 
	sks¶_îr_°
 {

121 
	gªas⁄
;

122 
	gãxt
[
KSSL_ERR_MAX
+1];

123 } 
	tKSSL_ERR
;

130 
	sks¶_˘x_°


133 *
	g£rvi˚_«me
;

134 *
	g£rvi˚_ho°
;

135 *
	g˛õ¡_¥öc
;

136 *
	gkeyèb_fûe
;

137 *
	g¸ed_ˇche
;

138 
krb5_í˘y≥
 
	gí˘y≥
;

139 
	gÀngth
;

140 
krb5_o˘ë
 
FAR
 *
	gkey
;

141 } 
	tKSSL_CTX
;

143 
	#KSSL_CLIENT
 1

	)

144 
	#KSSL_SERVER
 2

	)

145 
	#KSSL_SERVICE
 3

	)

146 
	#KSSL_KEYTAB
 4

	)

148 
	#KSSL_CTX_OK
 0

	)

149 
	#KSSL_CTX_ERR
 1

	)

150 
	#KSSL_NOMEM
 2

	)

153 
krb5_îr‹_code
 
ks¶_˘x_£t°rög
(
KSSL_CTX
 *
ks¶_˘x
, 
which
, *
ãxt
);

154 
KSSL_CTX
 *
ks¶_˘x_√w
();

155 
KSSL_CTX
 *
ks¶_˘x_‰ì
(KSSL_CTX *
ks¶_˘x
);

156 
ks¶_˘x_show
(
KSSL_CTX
 *
ks¶_˘x
);

157 
krb5_îr‹_code
 
ks¶_˘x_£çröc
(
KSSL_CTX
 *
ks¶_˘x
, 
which
,

158 
krb5_d©a
 *
ªÆm
, krb5_d©®*
ítôy
, 
√¡ôõs
);

159 
krb5_îr‹_code
 
ks¶_cgë_tkt
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 **
íc_tkç
,

160 
krb5_d©a
 *
authíp
, 
KSSL_ERR
 *
ks¶_îr
);

161 
krb5_îr‹_code
 
ks¶_sgë_tkt
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 *
öd©a
,

162 
krb5_tickë_times
 *
âimes
, 
KSSL_ERR
 *
ks¶_îr
);

163 
krb5_îr‹_code
 
ks¶_˘x_£tkey
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_keyblock
 *
£ssi⁄
);

164 
ks¶_îr_£t
(
KSSL_ERR
 *
ks¶_îr
, 
ªas⁄
, *
ãxt
);

165 
ks¶_krb5_‰ì_d©a_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
d©a
);

166 
krb5_îr‹_code
 
ks¶_buûd_¥öcùÆ_2
(
krb5_c⁄ãxt
 
c⁄ãxt
,

167 
krb5_¥öcùÆ
 *
¥öc
, 
æí
, c⁄° *
ªÆm
,

168 
¶í
, c⁄° *
svc
, 
hÀn
, c⁄° *
ho°
);

169 
krb5_îr‹_code
 
ks¶_vÆid©e_times
(
krb5_time°amp
 
©ime
,

170 
krb5_tickë_times
 *
âimes
);

171 
krb5_îr‹_code
 
ks¶_check_authít
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 *
authíç
,

172 
krb5_time°amp
 *
©imï
, 
KSSL_ERR
 *
ks¶_îr
);

173 *
ks¶_skù_c⁄found
(
krb5_í˘y≥
 
í˘y≥
, *
authn
);

175 
SSL_£t0_ks¶_˘x
(
SSL
 *
s
, 
KSSL_CTX
 *
k˘x
);

176 
KSSL_CTX
 * 
SSL_gë0_ks¶_˘x
(
SSL
 *
s
);

177 *
ks¶_˘x_gë0_˛õ¡_¥öc
(
KSSL_CTX
 *
k˘x
);

179 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/lhash.h

63 #i‚de‡
HEADER_LHASH_H


64 
	#HEADER_LHASH_H


	)

66 
	~<›ís¶/e_os2.h
>

67 #i‚de‡
OPENSSL_NO_FP_API


68 
	~<°dio.h
>

71 #i‚de‡
OPENSSL_NO_BIO


72 
	~<›ís¶/bio.h
>

75 #ifde‡ 
__˝lu•lus


79 
	slhash_node_°


81 *
d©a
;

82 
lhash_node_°
 *
√xt
;

83 #i‚de‡
OPENSSL_NO_HASH_COMP


84 
hash
;

86 } 
	tLHASH_NODE
;

88 (*
LHASH_COMP_FN_TYPE
)(const *, const *);

89 (*
	tLHASH_HASH_FN_TYPE
)(const *);

90 (*
LHASH_DOALL_FN_TYPE
)(*);

91 (*
LHASH_DOALL_ARG_FN_TYPE
)(*, *);

101 
	#DECLARE_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

102 
«me
##
	`_LHASH_HASH
(c⁄° *);

	)

103 
	#IMPLEMENT_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

104 
«me
##
	`_LHASH_HASH
(c⁄° *
¨g
) { \

105 c⁄° 
o_ty≥
 *
a
 = 
¨g
; \

106  
«me
##
	`_hash
(
a
); }

	)

107 
	#LHASH_HASH_FN
(
«me
Ë«me##
_LHASH_HASH


	)

110 
	#DECLARE_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

111 
«me
##
	`_LHASH_COMP
(c⁄° *, c⁄° *);

	)

112 
	#IMPLEMENT_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

113 
«me
##
	`_LHASH_COMP
(c⁄° *
¨g1
, c⁄° *
¨g2
) { \

114 c⁄° 
o_ty≥
 *
a
 = 
¨g1
; \

115 c⁄° 
o_ty≥
 *
b
 = 
¨g2
; \

116  
«me
##
	`_cmp
(
a
,
b
); }

	)

117 
	#LHASH_COMP_FN
(
«me
Ë«me##
_LHASH_COMP


	)

120 
	#DECLARE_LHASH_DOALL_FN
(
«me
, 
o_ty≥
) \

121 
«me
##
	`_LHASH_DOALL
(*);

	)

122 
	#IMPLEMENT_LHASH_DOALL_FN
(
«me
, 
o_ty≥
) \

123 
«me
##
	`_LHASH_DOALL
(*
¨g
) { \

124 
o_ty≥
 *
a
 = 
¨g
; \

125 
«me
##
	`_dﬂŒ
(
a
); }

	)

126 
	#LHASH_DOALL_FN
(
«me
Ë«me##
_LHASH_DOALL


	)

129 
	#DECLARE_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

130 
«me
##
	`_LHASH_DOALL_ARG
(*, *);

	)

131 
	#IMPLEMENT_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

132 
«me
##
	`_LHASH_DOALL_ARG
(*
¨g1
, *
¨g2
) { \

133 
o_ty≥
 *
a
 = 
¨g1
; \

134 
a_ty≥
 *
b
 = 
¨g2
; \

135 
«me
##
	`_dﬂŒ_¨g
(
a
, 
b
); }

	)

136 
	#LHASH_DOALL_ARG_FN
(
«me
Ë«me##
_LHASH_DOALL_ARG


	)

138 
	slhash_°


140 
LHASH_NODE
 **
b
;

141 
LHASH_COMP_FN_TYPE
 
comp
;

142 
LHASH_HASH_FN_TYPE
 
hash
;

143 
num_nodes
;

144 
num_Æloc_nodes
;

145 
p
;

146 
pmax
;

147 
up_lﬂd
;

148 
down_lﬂd
;

149 
num_ôems
;

151 
num_ex∑nds
;

152 
num_ex∑nd_ªÆlocs
;

153 
num_c⁄åa˘s
;

154 
num_c⁄åa˘_ªÆlocs
;

155 
num_hash_ˇŒs
;

156 
num_comp_ˇŒs
;

157 
num_ö£π
;

158 
num_ª∂a˚
;

159 
num_dñëe
;

160 
num_no_dñëe
;

161 
num_ªåõve
;

162 
num_ªåõve_miss
;

163 
num_hash_comps
;

165 
îr‹
;

166 } 
	t_LHASH
;

169 
	#LH_LOAD_MULT
 256

	)

173 
	#lh_îr‹
(
lh
Ë(÷h)->
îr‹
)

	)

175 
_LHASH
 *
lh_√w
(
LHASH_HASH_FN_TYPE
 
h
, 
LHASH_COMP_FN_TYPE
 
c
);

176 
lh_‰ì
(
_LHASH
 *
lh
);

177 *
lh_ö£π
(
_LHASH
 *
lh
, *
d©a
);

178 *
lh_dñëe
(
_LHASH
 *
lh
, c⁄° *
d©a
);

179 *
lh_ªåõve
(
_LHASH
 *
lh
, c⁄° *
d©a
);

180 
lh_dﬂŒ
(
_LHASH
 *
lh
, 
LHASH_DOALL_FN_TYPE
 
func
);

181 
lh_dﬂŒ_¨g
(
_LHASH
 *
lh
, 
LHASH_DOALL_ARG_FN_TYPE
 
func
, *
¨g
);

182 
lh_°rhash
(c⁄° *
c
);

183 
lh_num_ôems
(c⁄° 
_LHASH
 *
lh
);

185 #i‚de‡
OPENSSL_NO_FP_API


186 
lh_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

187 
lh_node_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

188 
lh_node_ußge_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

191 #i‚de‡
OPENSSL_NO_BIO


192 
lh_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

193 
lh_node_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

194 
lh_node_ußge_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

199 
	#LHASH_OF
(
ty≥
Ë
lhash_°_
##
	)
type

201 
	#DECLARE_LHASH_OF
(
ty≥
Ë
	`LHASH_OF
—y≥Ë{ 
dummy
; }

	)

203 
	#CHECKED_LHASH_OF
(
ty≥
,
lh
) \

204 ((
_LHASH
 *)
	`CHECKED_PTR_OF
(
	`LHASH_OF
(
ty≥
),
lh
))

	)

207 
	#LHM_lh_√w
(
ty≥
, 
«me
) \

208 ((
	`LHASH_OF
(
ty≥
Ë*)
	`lh_√w
(
	`LHASH_HASH_FN
(
«me
), 
	`LHASH_COMP_FN
“ame)))

	)

209 
	#LHM_lh_îr‹
(
ty≥
, 
lh
) \

210 
	`lh_îr‹
(
	`CHECKED_LHASH_OF
(
ty≥
,
lh
))

	)

211 
	#LHM_lh_ö£π
(
ty≥
, 
lh
, 
ö°
) \

212 ((
ty≥
 *)
	`lh_ö£π
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

213 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

214 
	#LHM_lh_ªåõve
(
ty≥
, 
lh
, 
ö°
) \

215 ((
ty≥
 *)
	`lh_ªåõve
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

216 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

217 
	#LHM_lh_dñëe
(
ty≥
, 
lh
, 
ö°
) \

218 ((
ty≥
 *)
	`lh_dñëe
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

219 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

220 
	#LHM_lh_dﬂŒ
(
ty≥
, 
lh
,
‚
Ë
	`lh_dﬂŒ
(
	`CHECKED_LHASH_OF
—y≥,Üh), fn)

	)

221 
	#LHM_lh_dﬂŒ_¨g
(
ty≥
, 
lh
, 
‚
, 
¨g_ty≥
, 
¨g
) \

222 
	`lh_dﬂŒ_¨g
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
‚
, 
	`CHECKED_PTR_OF
(
¨g_ty≥
, 
¨g
))

	)

223 
	#LHM_lh_num_ôems
(
ty≥
, 
lh
Ë
	`lh_num_ôems
(
	`CHECKED_LHASH_OF
—y≥,Üh))

	)

224 
	#LHM_lh_down_lﬂd
(
ty≥
, 
lh
Ë(
	`CHECKED_LHASH_OF
—y≥,Üh)->
down_lﬂd
)

	)

225 
	#LHM_lh_node_°©s_bio
(
ty≥
, 
lh
, 
out
) \

226 
	`lh_node_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

227 
	#LHM_lh_node_ußge_°©s_bio
(
ty≥
, 
lh
, 
out
) \

228 
	`lh_node_ußge_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

229 
	#LHM_lh_°©s_bio
(
ty≥
, 
lh
, 
out
) \

230 
	`lh_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

231 
	#LHM_lh_‰ì
(
ty≥
, 
lh
Ë
	`lh_‰ì
(
	`CHECKED_LHASH_OF
—y≥,Üh))

	)

233 
DECLARE_LHASH_OF
(
OPENSSL_STRING
);

234 
DECLARE_LHASH_OF
(
OPENSSL_CSTRING
);

236 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ossl_typ.h

55 #i‚de‡
HEADER_OPENSSL_TYPES_H


56 
	#HEADER_OPENSSL_TYPES_H


	)

58 
	~<›ís¶/e_os2.h
>

60 #ifde‡
NO_ASN1_TYPEDEFS


61 
	#ASN1_INTEGER
 
ASN1_STRING


	)

62 
	#ASN1_ENUMERATED
 
ASN1_STRING


	)

63 
	#ASN1_BIT_STRING
 
ASN1_STRING


	)

64 
	#ASN1_OCTET_STRING
 
ASN1_STRING


	)

65 
	#ASN1_PRINTABLESTRING
 
ASN1_STRING


	)

66 
	#ASN1_T61STRING
 
ASN1_STRING


	)

67 
	#ASN1_IA5STRING
 
ASN1_STRING


	)

68 
	#ASN1_UTCTIME
 
ASN1_STRING


	)

69 
	#ASN1_GENERALIZEDTIME
 
ASN1_STRING


	)

70 
	#ASN1_TIME
 
ASN1_STRING


	)

71 
	#ASN1_GENERALSTRING
 
ASN1_STRING


	)

72 
	#ASN1_UNIVERSALSTRING
 
ASN1_STRING


	)

73 
	#ASN1_BMPSTRING
 
ASN1_STRING


	)

74 
	#ASN1_VISIBLESTRING
 
ASN1_STRING


	)

75 
	#ASN1_UTF8STRING
 
ASN1_STRING


	)

76 
	#ASN1_BOOLEAN
 

	)

77 
	#ASN1_NULL
 

	)

79 
a¢1_°rög_°
 
	tASN1_INTEGER
;

80 
a¢1_°rög_°
 
	tASN1_ENUMERATED
;

81 
a¢1_°rög_°
 
	tASN1_BIT_STRING
;

82 
a¢1_°rög_°
 
	tASN1_OCTET_STRING
;

83 
a¢1_°rög_°
 
	tASN1_PRINTABLESTRING
;

84 
a¢1_°rög_°
 
	tASN1_T61STRING
;

85 
a¢1_°rög_°
 
	tASN1_IA5STRING
;

86 
a¢1_°rög_°
 
	tASN1_GENERALSTRING
;

87 
a¢1_°rög_°
 
	tASN1_UNIVERSALSTRING
;

88 
a¢1_°rög_°
 
	tASN1_BMPSTRING
;

89 
a¢1_°rög_°
 
	tASN1_UTCTIME
;

90 
a¢1_°rög_°
 
	tASN1_TIME
;

91 
a¢1_°rög_°
 
	tASN1_GENERALIZEDTIME
;

92 
a¢1_°rög_°
 
	tASN1_VISIBLESTRING
;

93 
a¢1_°rög_°
 
	tASN1_UTF8STRING
;

94 
a¢1_°rög_°
 
	tASN1_STRING
;

95 
	tASN1_BOOLEAN
;

96 
	tASN1_NULL
;

99 
ASN1_ITEM_°
 
	tASN1_ITEM
;

100 
a¢1_p˘x_°
 
	tASN1_PCTX
;

102 #ifde‡
OPENSSL_SYS_WIN32


103 #unde‡
X509_NAME


104 #unde‡
X509_EXTENSIONS


105 #unde‡
X509_CERT_PAIR


106 #unde‡
PKCS7_ISSUER_AND_SERIAL


107 #unde‡
OCSP_REQUEST


108 #unde‡
OCSP_RESPONSE


111 #ifde‡
BIGNUM


112 #unde‡
BIGNUM


114 
bignum_°
 
	tBIGNUM
;

115 
bignum_˘x
 
	tBN_CTX
;

116 
bn_blödög_°
 
	tBN_BLINDING
;

117 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

118 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

119 
bn_gícb_°
 
	tBN_GENCB
;

121 
buf_mem_°
 
	tBUF_MEM
;

123 
evp_cùhî_°
 
	tEVP_CIPHER
;

124 
evp_cùhî_˘x_°
 
	tEVP_CIPHER_CTX
;

125 
ív_md_°
 
	tEVP_MD
;

126 
ív_md_˘x_°
 
	tEVP_MD_CTX
;

127 
evp_pkey_°
 
	tEVP_PKEY
;

129 
evp_pkey_a¢1_mëhod_°
 
	tEVP_PKEY_ASN1_METHOD
;

131 
evp_pkey_mëhod_°
 
	tEVP_PKEY_METHOD
;

132 
evp_pkey_˘x_°
 
	tEVP_PKEY_CTX
;

134 
dh_°
 
	tDH
;

135 
dh_mëhod
 
	tDH_METHOD
;

137 
dß_°
 
	tDSA
;

138 
dß_mëhod
 
	tDSA_METHOD
;

140 
rß_°
 
	tRSA
;

141 
rß_mëh_°
 
	tRSA_METHOD
;

143 
ønd_mëh_°
 
	tRAND_METHOD
;

145 
ecdh_mëhod
 
	tECDH_METHOD
;

146 
ecdß_mëhod
 
	tECDSA_METHOD
;

148 
x509_°
 
	tX509
;

149 
X509_Æg‹_°
 
	tX509_ALGOR
;

150 
X509_¸l_°
 
	tX509_CRL
;

151 
x509_¸l_mëhod_°
 
	tX509_CRL_METHOD
;

152 
x509_ªvoked_°
 
	tX509_REVOKED
;

153 
X509_«me_°
 
	tX509_NAME
;

154 
X509_pubkey_°
 
	tX509_PUBKEY
;

155 
x509_°‹e_°
 
	tX509_STORE
;

156 
x509_°‹e_˘x_°
 
	tX509_STORE_CTX
;

158 
pkcs8_¥iv_key_öfo_°
 
	tPKCS8_PRIV_KEY_INFO
;

160 
v3_ext_˘x
 
	tX509V3_CTX
;

161 
c⁄f_°
 
	tCONF
;

163 
°‹e_°
 
	tSTORE
;

164 
°‹e_mëhod_°
 
	tSTORE_METHOD
;

166 
ui_°
 
	tUI
;

167 
ui_mëhod_°
 
	tUI_METHOD
;

169 
°_ERR_FNS
 
	tERR_FNS
;

171 
ígöe_°
 
	tENGINE
;

172 
s¶_°
 
	tSSL
;

173 
s¶_˘x_°
 
	tSSL_CTX
;

175 
X509_POLICY_NODE_°
 
	tX509_POLICY_NODE
;

176 
X509_POLICY_LEVEL_°
 
	tX509_POLICY_LEVEL
;

177 
X509_POLICY_TREE_°
 
	tX509_POLICY_TREE
;

178 
X509_POLICY_CACHE_°
 
	tX509_POLICY_CACHE
;

180 
AUTHORITY_KEYID_°
 
	tAUTHORITY_KEYID
;

181 
DIST_POINT_°
 
	tDIST_POINT
;

182 
ISSUING_DIST_POINT_°
 
	tISSUING_DIST_POINT
;

183 
NAME_CONSTRAINTS_°
 
	tNAME_CONSTRAINTS
;

186 
	#DECLARE_PKCS12_STACK_OF
(
ty≥
Ë

	)

187 
	#IMPLEMENT_PKCS12_STACK_OF
(
ty≥
Ë

	)

189 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

191 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

192 
	tidx
, 
	t¨gl
, *
	t¨gp
);

193 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

194 
	tidx
, 
	t¨gl
, *
	t¨gp
);

195 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

196 
	tidx
, 
	t¨gl
, *
	t¨gp
);

198 
oc•_ªq_˘x_°
 
	tOCSP_REQ_CTX
;

199 
oc•_ª•⁄£_°
 
	tOCSP_RESPONSE
;

200 
oc•_ª•⁄dî_id_°
 
	tOCSP_RESPID
;

	@/usr/include/openssl/pem.h

59 #i‚de‡
HEADER_PEM_H


60 
	#HEADER_PEM_H


	)

62 
	~<›ís¶/e_os2.h
>

63 #i‚de‡
OPENSSL_NO_BIO


64 
	~<›ís¶/bio.h
>

66 #i‚de‡
OPENSSL_NO_STACK


67 
	~<›ís¶/°ack.h
>

69 
	~<›ís¶/evp.h
>

70 
	~<›ís¶/x509.h
>

71 
	~<›ís¶/≥m2.h
>

73 #ifde‡ 
__˝lu•lus


77 
	#PEM_BUFSIZE
 1024

	)

79 
	#PEM_OBJ_UNDEF
 0

	)

80 
	#PEM_OBJ_X509
 1

	)

81 
	#PEM_OBJ_X509_REQ
 2

	)

82 
	#PEM_OBJ_CRL
 3

	)

83 
	#PEM_OBJ_SSL_SESSION
 4

	)

84 
	#PEM_OBJ_PRIV_KEY
 10

	)

85 
	#PEM_OBJ_PRIV_RSA
 11

	)

86 
	#PEM_OBJ_PRIV_DSA
 12

	)

87 
	#PEM_OBJ_PRIV_DH
 13

	)

88 
	#PEM_OBJ_PUB_RSA
 14

	)

89 
	#PEM_OBJ_PUB_DSA
 15

	)

90 
	#PEM_OBJ_PUB_DH
 16

	)

91 
	#PEM_OBJ_DHPARAMS
 17

	)

92 
	#PEM_OBJ_DSAPARAMS
 18

	)

93 
	#PEM_OBJ_PRIV_RSA_PUBLIC
 19

	)

94 
	#PEM_OBJ_PRIV_ECDSA
 20

	)

95 
	#PEM_OBJ_PUB_ECDSA
 21

	)

96 
	#PEM_OBJ_ECPARAMETERS
 22

	)

98 
	#PEM_ERROR
 30

	)

99 
	#PEM_DEK_DES_CBC
 40

	)

100 
	#PEM_DEK_IDEA_CBC
 45

	)

101 
	#PEM_DEK_DES_EDE
 50

	)

102 
	#PEM_DEK_DES_ECB
 60

	)

103 
	#PEM_DEK_RSA
 70

	)

104 
	#PEM_DEK_RSA_MD2
 80

	)

105 
	#PEM_DEK_RSA_MD5
 90

	)

107 
	#PEM_MD_MD2
 
NID_md2


	)

108 
	#PEM_MD_MD5
 
NID_md5


	)

109 
	#PEM_MD_SHA
 
NID_sha


	)

110 
	#PEM_MD_MD2_RSA
 
NID_md2WôhRSAEn¸y±i⁄


	)

111 
	#PEM_MD_MD5_RSA
 
NID_md5WôhRSAEn¸y±i⁄


	)

112 
	#PEM_MD_SHA_RSA
 
NID_sha1WôhRSAEn¸y±i⁄


	)

114 
	#PEM_STRING_X509_OLD
 "X509 CERTIFICATE"

	)

115 
	#PEM_STRING_X509
 "CERTIFICATE"

	)

116 
	#PEM_STRING_X509_PAIR
 "CERTIFICATE PAIR"

	)

117 
	#PEM_STRING_X509_TRUSTED
 "TRUSTED CERTIFICATE"

	)

118 
	#PEM_STRING_X509_REQ_OLD
 "NEW CERTIFICATE REQUEST"

	)

119 
	#PEM_STRING_X509_REQ
 "CERTIFICATE REQUEST"

	)

120 
	#PEM_STRING_X509_CRL
 "X509 CRL"

	)

121 
	#PEM_STRING_EVP_PKEY
 "ANY PRIVATE KEY"

	)

122 
	#PEM_STRING_PUBLIC
 "PUBLIC KEY"

	)

123 
	#PEM_STRING_RSA
 "RSA PRIVATE KEY"

	)

124 
	#PEM_STRING_RSA_PUBLIC
 "RSA PUBLIC KEY"

	)

125 
	#PEM_STRING_DSA
 "DSA PRIVATE KEY"

	)

126 
	#PEM_STRING_DSA_PUBLIC
 "DSA PUBLIC KEY"

	)

127 
	#PEM_STRING_PKCS7
 "PKCS7"

	)

128 
	#PEM_STRING_PKCS7_SIGNED
 "PKCS #7 SIGNED DATA"

	)

129 
	#PEM_STRING_PKCS8
 "ENCRYPTED PRIVATE KEY"

	)

130 
	#PEM_STRING_PKCS8INF
 "PRIVATE KEY"

	)

131 
	#PEM_STRING_DHPARAMS
 "DH PARAMETERS"

	)

132 
	#PEM_STRING_SSL_SESSION
 "SSL SESSION PARAMETERS"

	)

133 
	#PEM_STRING_DSAPARAMS
 "DSA PARAMETERS"

	)

134 
	#PEM_STRING_ECDSA_PUBLIC
 "ECDSA PUBLIC KEY"

	)

135 
	#PEM_STRING_ECPARAMETERS
 "EC PARAMETERS"

	)

136 
	#PEM_STRING_ECPRIVATEKEY
 "EC PRIVATE KEY"

	)

137 
	#PEM_STRING_PARAMETERS
 "PARAMETERS"

	)

138 
	#PEM_STRING_CMS
 "CMS"

	)

142 
	sPEM_Encode_Sól_°


144 
EVP_ENCODE_CTX
 
ícode
;

145 
EVP_MD_CTX
 
md
;

146 
EVP_CIPHER_CTX
 
cùhî
;

147 } 
	tPEM_ENCODE_SEAL_CTX
;

150 
	#PEM_TYPE_ENCRYPTED
 10

	)

151 
	#PEM_TYPE_MIC_ONLY
 20

	)

152 
	#PEM_TYPE_MIC_CLEAR
 30

	)

153 
	#PEM_TYPE_CLEAR
 40

	)

155 
	s≥m_ªcù_°


157 *
«me
;

158 
X509_NAME
 *
dn
;

160 
cùhî
;

161 
key_íc
;

163 } 
	tPEM_USER
;

165 
	s≥m_˘x_°


167 
ty≥
;

170 
vîsi⁄
;

171 
mode
;

172 } 
¥oc_ty≥
;

174 *
domaö
;

177 
cùhî
;

180 } 
DEK_öfo
;

182 
PEM_USER
 *
‹igö©‹
;

184 
num_ªcùõ¡
;

185 
PEM_USER
 **
ªcùõ¡
;

189 
EVP_MD
 *
md
;

191 
md_íc
;

192 
md_Àn
;

193 *
md_d©a
;

195 
EVP_CIPHER
 *
dec
;

196 
key_Àn
;

197 *
key
;

202 
d©a_íc
;

203 
d©a_Àn
;

204 *
d©a
;

205 } 
	tPEM_CTX
;

212 #ifde‡
OPENSSL_NO_FP_API


214 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

215 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

216 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

217 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

218 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

222 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

223 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

225  
	`PEM_ASN1_ªad
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
Â
,(**)
x
,
cb
,
u
); \

226 }

	)

228 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

229 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
) \

231  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
NULL
,NULL,0,NULL,NULL); \

232 }

	)

234 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

235 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
) \

237  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

238 }

	)

240 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

241 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

242 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

243 *
u
) \

245  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

246 }

	)

248 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

249 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

250 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

251 *
u
) \

253  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

254 }

	)

258 
	#IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

259 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

261  
	`PEM_ASN1_ªad_bio
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
bp
,(**)
x
,
cb
,
u
); \

262 }

	)

264 
	#IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

265 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
) \

267  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
NULL
,NULL,0,NULL,NULL); \

268 }

	)

270 
	#IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

271 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
) \

273  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

274 }

	)

276 
	#IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

277 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

278 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

280  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

281 }

	)

283 
	#IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

284 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

285 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

287  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

288 }

	)

290 
	#IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

291 
	`IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

292 
	`IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

294 
	#IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

295 
	`IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

296 
	`IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

298 
	#IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

299 
	`IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

300 
	`IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

302 
	#IMPLEMENT_PEM_wrôe_cb_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

303 
	`IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

304 
	`IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

306 
	#IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

307 
	`IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

308 
	`IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

310 
	#IMPLEMENT_PEM_rw
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

311 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

312 
	`IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

314 
	#IMPLEMENT_PEM_rw_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

315 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

316 
	`IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

318 
	#IMPLEMENT_PEM_rw_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

319 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

320 
	`IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

324 #i‡
deföed
(
OPENSSL_NO_FP_API
)

326 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
Ë

	)

327 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
Ë

	)

328 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
Ë

	)

332 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
) \

333 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

335 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
) \

336 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
);

	)

338 
	#DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
) \

339 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
);

	)

341 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
) \

342 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

343 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

347 #i‚de‡
OPENSSL_NO_BIO


348 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

349 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

351 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

352 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
);

	)

354 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

355 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
);

	)

357 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

358 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

359 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

363 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
Ë

	)

364 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
Ë

	)

365 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
Ë

	)

366 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
Ë

	)

370 
	#DECLARE_PEM_wrôe
(
«me
, 
ty≥
) \

371 
	`DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

372 
	`DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
)

	)

374 
	#DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
) \

375 
	`DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

376 
	`DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
)

	)

378 
	#DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
) \

379 
	`DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

380 
	`DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
)

	)

382 
	#DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

383 
	`DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

384 
	`DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
)

	)

386 
	#DECLARE_PEM_rw
(
«me
, 
ty≥
) \

387 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

388 
	`DECLARE_PEM_wrôe
(
«me
, 
ty≥
)

	)

390 
	#DECLARE_PEM_rw_c⁄°
(
«me
, 
ty≥
) \

391 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

392 
	`DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
)

	)

394 
	#DECLARE_PEM_rw_cb
(
«me
, 
ty≥
) \

395 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

396 
	`DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
)

	)

400 
	t≥m_∑ssw‹d_cb
(*
	tbuf
, 
	tsize
, 
	trwÊag
, *
	tu£rd©a
);

403 
	t≥m_∑ssw‹d_cb
(*
	tbuf
, 
	tsize
, 
	trwÊag
);

406 
PEM_gë_EVP_CIPHER_INFO
(*
hódî
, 
EVP_CIPHER_INFO
 *
cùhî
);

407 
PEM_do_hódî
 (
EVP_CIPHER_INFO
 *
cùhî
, *
d©a
,*
Àn
,

408 
≥m_∑ssw‹d_cb
 *
ˇŒback
,*
u
);

410 #i‚de‡
OPENSSL_NO_BIO


411 
PEM_ªad_bio
(
BIO
 *
bp
, **
«me
, **
hódî
,

412 **
d©a
,*
Àn
);

413 
PEM_wrôe_bio
(
BIO
 *
bp
,c⁄° *
«me
,*
hdr
,*
d©a
,

414 
Àn
);

415 
PEM_byãs_ªad_bio
(**
pd©a
, *
∂í
, **
≤m
, c⁄° *
«me
, 
BIO
 *
bp
,

416 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

417 * 
PEM_ASN1_ªad_bio
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
BIO
 *
bp
,

418 **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

419 
PEM_ASN1_wrôe_bio
(
i2d_of_void
 *
i2d
,c⁄° *
«me
,
BIO
 *
bp
, *
x
,

420 c⁄° 
EVP_CIPHER
 *
íc
,*
k°r
,
kÀn
,

421 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

423 
STACK_OF
(
X509_INFO
Ë* 
PEM_X509_INFO_ªad_bio
(
BIO
 *
bp
, STACK_OF(X509_INFOË*
sk
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

424 
PEM_X509_INFO_wrôe_bio
(
BIO
 *
bp
,
X509_INFO
 *
xi
, 
EVP_CIPHER
 *
íc
,

425 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

428 
PEM_ªad
(
FILE
 *
Â
, **
«me
, **
hódî
,

429 **
d©a
,*
Àn
);

430 
PEM_wrôe
(
FILE
 *
Â
,*
«me
,*
hdr
,*
d©a
,
Àn
);

431 * 
PEM_ASN1_ªad
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
FILE
 *
Â
, **
x
,

432 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

433 
PEM_ASN1_wrôe
(
i2d_of_void
 *
i2d
,c⁄° *
«me
,
FILE
 *
Â
,

434 *
x
,c⁄° 
EVP_CIPHER
 *
íc
,*
k°r
,

435 
kÀn
,
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

436 
STACK_OF
(
X509_INFO
Ë* 
PEM_X509_INFO_ªad
(
FILE
 *
Â
, STACK_OF(X509_INFOË*
sk
,

437 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

439 
PEM_SólInô
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, 
EVP_CIPHER
 *
ty≥
,

440 
EVP_MD
 *
md_ty≥
, **
ek
, *
ekl
,

441 *
iv
, 
EVP_PKEY
 **
pubk
, 
≈ubk
);

442 
PEM_SólUpd©e
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
out
, *
oué
,

443 *
ö
, 
öl
);

444 
PEM_SólFöÆ
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
sig
,*
sigl
,

445 *
out
, *
oué
, 
EVP_PKEY
 *
¥iv
);

447 
PEM_SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_MD
 *
ty≥
);

448 
PEM_SignUpd©e
(
EVP_MD_CTX
 *
˘x
,*
d
,
˙t
);

449 
PEM_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

450 *
sigÀn
, 
EVP_PKEY
 *
pkey
);

452 
PEM_def_ˇŒback
(*
buf
, 
num
, 
w
, *
key
);

453 
PEM_¥oc_ty≥
(*
buf
, 
ty≥
);

454 
PEM_dek_öfo
(*
buf
, c⁄° *
ty≥
, 
Àn
, *
°r
);

457 
	~<›ís¶/symhacks.h
>

459 
DECLARE_PEM_rw
(
X509
, X509)

461 
DECLARE_PEM_rw
(
X509_AUX
, 
X509
)

463 
DECLARE_PEM_rw
(
X509_CERT_PAIR
, X509_CERT_PAIR)

465 
DECLARE_PEM_rw
(
X509_REQ
, X509_REQ)

466 
DECLARE_PEM_wrôe
(
X509_REQ_NEW
, 
X509_REQ
)

468 
DECLARE_PEM_rw
(
X509_CRL
, X509_CRL)

470 
DECLARE_PEM_rw
(
PKCS7
, PKCS7)

472 
DECLARE_PEM_rw
(
NETSCAPE_CERT_SEQUENCE
, NETSCAPE_CERT_SEQUENCE)

474 
DECLARE_PEM_rw
(
PKCS8
, 
X509_SIG
)

476 
DECLARE_PEM_rw
(
PKCS8_PRIV_KEY_INFO
, PKCS8_PRIV_KEY_INFO)

478 #i‚de‡
OPENSSL_NO_RSA


480 
DECLARE_PEM_rw_cb
(
RSAPriv©eKey
, 
RSA
)

482 
DECLARE_PEM_rw_c⁄°
(
RSAPublicKey
, 
RSA
)

483 
DECLARE_PEM_rw
(
RSA_PUBKEY
, 
RSA
)

487 #i‚de‡
OPENSSL_NO_DSA


489 
DECLARE_PEM_rw_cb
(
DSAPriv©eKey
, 
DSA
)

491 
DECLARE_PEM_rw
(
DSA_PUBKEY
, 
DSA
)

493 
DECLARE_PEM_rw_c⁄°
(
DSA∑øms
, 
DSA
)

497 #i‚de‡
OPENSSL_NO_EC


498 
DECLARE_PEM_rw_c⁄°
(
ECPKP¨amëîs
, 
EC_GROUP
)

499 
DECLARE_PEM_rw_cb
(
ECPriv©eKey
, 
EC_KEY
)

500 
DECLARE_PEM_rw
(
EC_PUBKEY
, 
EC_KEY
)

503 #i‚de‡
OPENSSL_NO_DH


505 
DECLARE_PEM_rw_c⁄°
(
DH∑øms
, 
DH
)

509 
DECLARE_PEM_rw_cb
(
Priv©eKey
, 
EVP_PKEY
)

511 
DECLARE_PEM_rw
(
PUBKEY
, 
EVP_PKEY
)

513 
PEM_wrôe_bio_PKCS8Priv©eKey_nid
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

514 *
k°r
, 
kÀn
,

515 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

516 
PEM_wrôe_bio_PKCS8Priv©eKey
(
BIO
 *, 
EVP_PKEY
 *, c⁄° 
EVP_CIPHER
 *,

517 *, , 
≥m_∑ssw‹d_cb
 *, *);

518 
i2d_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

519 *
k°r
, 
kÀn
,

520 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

521 
i2d_PKCS8Priv©eKey_nid_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

522 *
k°r
, 
kÀn
,

523 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

524 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

526 
i2d_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

527 *
k°r
, 
kÀn
,

528 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

529 
i2d_PKCS8Priv©eKey_nid_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

530 *
k°r
, 
kÀn
,

531 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

532 
PEM_wrôe_PKCS8Priv©eKey_nid
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

533 *
k°r
, 
kÀn
,

534 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

536 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

538 
PEM_wrôe_PKCS8Priv©eKey
(
FILE
 *
Â
,
EVP_PKEY
 *
x
,c⁄° 
EVP_CIPHER
 *
íc
,

539 *
k°r
,
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

541 
EVP_PKEY
 *
PEM_ªad_bio_P¨amëîs
(
BIO
 *
bp
, EVP_PKEY **
x
);

542 
PEM_wrôe_bio_P¨amëîs
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
);

545 
EVP_PKEY
 *
b2i_Priv©eKey
(c⁄° **
ö
, 
Àngth
);

546 
EVP_PKEY
 *
b2i_PublicKey
(c⁄° **
ö
, 
Àngth
);

547 
EVP_PKEY
 *
b2i_Priv©eKey_bio
(
BIO
 *
ö
);

548 
EVP_PKEY
 *
b2i_PublicKey_bio
(
BIO
 *
ö
);

549 
i2b_Priv©eKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

550 
i2b_PublicKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

551 #i‚de‡
OPENSSL_NO_RC4


552 
EVP_PKEY
 *
b2i_PVK_bio
(
BIO
 *
ö
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

553 
i2b_PVK_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
, 
í˛evñ
,

554 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

562 
ERR_lﬂd_PEM_°rögs
();

567 
	#PEM_F_B2I_DSS
 127

	)

568 
	#PEM_F_B2I_PVK_BIO
 128

	)

569 
	#PEM_F_B2I_RSA
 129

	)

570 
	#PEM_F_CHECK_BITLEN_DSA
 130

	)

571 
	#PEM_F_CHECK_BITLEN_RSA
 131

	)

572 
	#PEM_F_D2I_PKCS8PRIVATEKEY_BIO
 120

	)

573 
	#PEM_F_D2I_PKCS8PRIVATEKEY_FP
 121

	)

574 
	#PEM_F_DO_B2I
 132

	)

575 
	#PEM_F_DO_B2I_BIO
 133

	)

576 
	#PEM_F_DO_BLOB_HEADER
 134

	)

577 
	#PEM_F_DO_PK8PKEY
 126

	)

578 
	#PEM_F_DO_PK8PKEY_FP
 125

	)

579 
	#PEM_F_DO_PVK_BODY
 135

	)

580 
	#PEM_F_DO_PVK_HEADER
 136

	)

581 
	#PEM_F_I2B_PVK
 137

	)

582 
	#PEM_F_I2B_PVK_BIO
 138

	)

583 
	#PEM_F_LOAD_IV
 101

	)

584 
	#PEM_F_PEM_ASN1_READ
 102

	)

585 
	#PEM_F_PEM_ASN1_READ_BIO
 103

	)

586 
	#PEM_F_PEM_ASN1_WRITE
 104

	)

587 
	#PEM_F_PEM_ASN1_WRITE_BIO
 105

	)

588 
	#PEM_F_PEM_DEF_CALLBACK
 100

	)

589 
	#PEM_F_PEM_DO_HEADER
 106

	)

590 
	#PEM_F_PEM_F_PEM_WRITE_PKCS8PRIVATEKEY
 118

	)

591 
	#PEM_F_PEM_GET_EVP_CIPHER_INFO
 107

	)

592 
	#PEM_F_PEM_PK8PKEY
 119

	)

593 
	#PEM_F_PEM_READ
 108

	)

594 
	#PEM_F_PEM_READ_BIO
 109

	)

595 
	#PEM_F_PEM_READ_BIO_PARAMETERS
 140

	)

596 
	#PEM_F_PEM_READ_BIO_PRIVATEKEY
 123

	)

597 
	#PEM_F_PEM_READ_PRIVATEKEY
 124

	)

598 
	#PEM_F_PEM_SEALFINAL
 110

	)

599 
	#PEM_F_PEM_SEALINIT
 111

	)

600 
	#PEM_F_PEM_SIGNFINAL
 112

	)

601 
	#PEM_F_PEM_WRITE
 113

	)

602 
	#PEM_F_PEM_WRITE_BIO
 114

	)

603 
	#PEM_F_PEM_WRITE_PRIVATEKEY
 139

	)

604 
	#PEM_F_PEM_X509_INFO_READ
 115

	)

605 
	#PEM_F_PEM_X509_INFO_READ_BIO
 116

	)

606 
	#PEM_F_PEM_X509_INFO_WRITE_BIO
 117

	)

609 
	#PEM_R_BAD_BASE64_DECODE
 100

	)

610 
	#PEM_R_BAD_DECRYPT
 101

	)

611 
	#PEM_R_BAD_END_LINE
 102

	)

612 
	#PEM_R_BAD_IV_CHARS
 103

	)

613 
	#PEM_R_BAD_MAGIC_NUMBER
 116

	)

614 
	#PEM_R_BAD_PASSWORD_READ
 104

	)

615 
	#PEM_R_BAD_VERSION_NUMBER
 117

	)

616 
	#PEM_R_BIO_WRITE_FAILURE
 118

	)

617 
	#PEM_R_CIPHER_IS_NULL
 127

	)

618 
	#PEM_R_ERROR_CONVERTING_PRIVATE_KEY
 115

	)

619 
	#PEM_R_EXPECTING_PRIVATE_KEY_BLOB
 119

	)

620 
	#PEM_R_EXPECTING_PUBLIC_KEY_BLOB
 120

	)

621 
	#PEM_R_INCONSISTENT_HEADER
 121

	)

622 
	#PEM_R_KEYBLOB_HEADER_PARSE_ERROR
 122

	)

623 
	#PEM_R_KEYBLOB_TOO_SHORT
 123

	)

624 
	#PEM_R_NOT_DEK_INFO
 105

	)

625 
	#PEM_R_NOT_ENCRYPTED
 106

	)

626 
	#PEM_R_NOT_PROC_TYPE
 107

	)

627 
	#PEM_R_NO_START_LINE
 108

	)

628 
	#PEM_R_PROBLEMS_GETTING_PASSWORD
 109

	)

629 
	#PEM_R_PUBLIC_KEY_NO_RSA
 110

	)

630 
	#PEM_R_PVK_DATA_TOO_SHORT
 124

	)

631 
	#PEM_R_PVK_TOO_SHORT
 125

	)

632 
	#PEM_R_READ_KEY
 111

	)

633 
	#PEM_R_SHORT_HEADER
 112

	)

634 
	#PEM_R_UNSUPPORTED_CIPHER
 113

	)

635 
	#PEM_R_UNSUPPORTED_ENCRYPTION
 114

	)

636 
	#PEM_R_UNSUPPORTED_KEY_COMPONENTS
 126

	)

638 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/safestack.h

55 #i‚de‡
HEADER_SAFESTACK_H


56 
	#HEADER_SAFESTACK_H


	)

58 
	~<›ís¶/°ack.h
>

60 #i‚de‡
CHECKED_PTR_OF


61 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

62 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

70 
	#CHECKED_STACK_OF
(
ty≥
, 
p
) \

71 ((
_STACK
*Ë(1 ? 
p
 : (
	`STACK_OF
(
ty≥
)*)0))

	)

73 
	#CHECKED_SK_FREE_FUNC
(
ty≥
, 
p
) \

74 (((*)(*)Ë((1 ? 
p
 : ((*)(
ty≥
 *))0)))

	)

76 
	#CHECKED_SK_FREE_FUNC2
(
ty≥
, 
p
) \

77 (((*)(*)Ë((1 ? 
p
 : ((*)(
ty≥
))0)))

	)

79 
	#CHECKED_SK_CMP_FUNC
(
ty≥
, 
p
) \

81 ((1 ? 
p
 : ((*)(c⁄° 
ty≥
 * c⁄° *, c⁄°Åy≥ * c⁄° *))0)))

	)

83 
	#STACK_OF
(
ty≥
Ë
°ack_°_
##
	)
type

84 
	#PREDECLARE_STACK_OF
(
ty≥
Ë
	`STACK_OF
—y≥);

	)

86 
	#DECLARE_STACK_OF
(
ty≥
) \

87 
	`STACK_OF
(
ty≥
) \

89 
_STACK
 
°ack
; \

90 };

	)

91 
	#DECLARE_SPECIAL_STACK_OF
(
ty≥
, 
ty≥2
) \

92 
	`STACK_OF
(
ty≥
) \

94 
_STACK
 
°ack
; \

95 };

	)

97 
	#IMPLEMENT_STACK_OF
(
ty≥
Ë

	)

113 *
	tOPENSSL_STRING
;

115 c⁄° *
	tOPENSSL_CSTRING
;

125 
	$DECLARE_SPECIAL_STACK_OF
(
OPENSSL_STRING
, )

131 *
	tOPENSSL_BLOCK
;

132 
	$DECLARE_SPECIAL_STACK_OF
(
OPENSSL_BLOCK
, )

136 
	#SKM_sk_√w
(
ty≥
, 
cmp
) \

137 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

138 
	#SKM_sk_√w_nuŒ
(
ty≥
) \

139 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w_nuŒ
())

	)

140 
	#SKM_sk_‰ì
(
ty≥
, 
°
) \

141 
	`sk_‰ì
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

142 
	#SKM_sk_num
(
ty≥
, 
°
) \

143 
	`sk_num
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

144 
	#SKM_sk_vÆue
(
ty≥
, 
°
,
i
) \

145 ((
ty≥
 *)
	`sk_vÆue
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
i
))

	)

146 
	#SKM_sk_£t
(
ty≥
, 
°
,
i
,
vÆ
) \

147 
	`sk_£t
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
i
, 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

148 
	#SKM_sk_zîo
(
ty≥
, 
°
) \

149 
	`sk_zîo
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

150 
	#SKM_sk_push
(
ty≥
, 
°
, 
vÆ
) \

151 
	`sk_push
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

152 
	#SKM_sk_unshi·
(
ty≥
, 
°
, 
vÆ
) \

153 
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

154 
	#SKM_sk_föd
(
ty≥
, 
°
, 
vÆ
) \

155 
	`sk_föd
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

156 
	#SKM_sk_föd_ex
(
ty≥
, 
°
, 
vÆ
) \

157 
	`sk_föd_ex
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), \

158 
	`CHECKED_PTR_OF
(
ty≥
, 
vÆ
))

	)

159 
	#SKM_sk_dñëe
(
ty≥
, 
°
, 
i
) \

160 (
ty≥
 *)
	`sk_dñëe
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
i
)

	)

161 
	#SKM_sk_dñëe_±r
(
ty≥
, 
°
, 
±r
) \

162 (
ty≥
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
±r
))

	)

163 
	#SKM_sk_ö£π
(
ty≥
, 
°
,
vÆ
, 
i
) \

164 
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
), 
i
)

	)

165 
	#SKM_sk_£t_cmp_func
(
ty≥
, 
°
, 
cmp
) \

166 (((*)(c⁄° 
ty≥
 * const *,constÅype * const *)) \

167 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

168 
	#SKM_sk_dup
(
ty≥
, 
°
) \

169 (
	`STACK_OF
(
ty≥
Ë*)
	`sk_dup
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

170 
	#SKM_sk_p›_‰ì
(
ty≥
, 
°
, 
‰ì_func
) \

171 
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

172 
	#SKM_sk_shi·
(
ty≥
, 
°
) \

173 (
ty≥
 *)
	`sk_shi·
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

174 
	#SKM_sk_p›
(
ty≥
, 
°
) \

175 (
ty≥
 *)
	`sk_p›
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

176 
	#SKM_sk_s‹t
(
ty≥
, 
°
) \

177 
	`sk_s‹t
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

178 
	#SKM_sk_is_s‹ãd
(
ty≥
, 
°
) \

179 
	`sk_is_s‹ãd
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

181 
	#SKM_ASN1_SET_OF_d2i
(
ty≥
, 
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

182 (
	`STACK_OF
(
ty≥
Ë*)
	`d2i_ASN1_SET
( \

183 (
	`STACK_OF
(
OPENSSL_BLOCK
Ë**)
	`CHECKED_PTR_OF
(STACK_OF(
ty≥
)*, 
°
), \

184 
µ
, 
Àngth
, \

185 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

186 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

187 
ex_èg
, 
ex_˛ass
)

	)

189 
	#SKM_ASN1_SET_OF_i2d
(
ty≥
, 
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

190 
	`i2d_ASN1_SET
((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
µ
, \

191 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), \

192 
ex_èg
, 
ex_˛ass
, 
is_£t
)

	)

194 
	#SKM_ASN1_£q_∑ck
(
ty≥
, 
°
, 
i2d_func
, 
buf
, 
Àn
) \

195 
	`ASN1_£q_∑ck
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), \

196 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), 
buf
, 
Àn
)

	)

198 
	#SKM_ASN1_£q_u≈ack
(
ty≥
, 
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

199 (
	`STACK_OF
(
ty≥
Ë*)
	`ASN1_£q_u≈ack
(
buf
, 
Àn
, 
	`CHECKED_D2I_OF
—y≥, 
d2i_func
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

201 
	#SKM_PKCS12_de¸y±_d2i
(
ty≥
, 
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

202 (
	`STACK_OF
(
ty≥
Ë*)
	`PKCS12_de¸y±_d2i
(
Æg‹
, \

203 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

204 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

205 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
)

	)

208 
	#sk_ACCESS_DESCRIPTION_√w
(
cmp
Ë
	`SKM_sk_√w
(
ACCESS_DESCRIPTION
, (cmp))

	)

209 
	#sk_ACCESS_DESCRIPTION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ACCESS_DESCRIPTION
)

	)

210 
	#sk_ACCESS_DESCRIPTION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ACCESS_DESCRIPTION
, (°))

	)

211 
	#sk_ACCESS_DESCRIPTION_num
(
°
Ë
	`SKM_sk_num
(
ACCESS_DESCRIPTION
, (°))

	)

212 
	#sk_ACCESS_DESCRIPTION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ACCESS_DESCRIPTION
, (°), (i))

	)

213 
	#sk_ACCESS_DESCRIPTION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ACCESS_DESCRIPTION
, (°), (i), (vÆ))

	)

214 
	#sk_ACCESS_DESCRIPTION_zîo
(
°
Ë
	`SKM_sk_zîo
(
ACCESS_DESCRIPTION
, (°))

	)

215 
	#sk_ACCESS_DESCRIPTION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

216 
	#sk_ACCESS_DESCRIPTION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

217 
	#sk_ACCESS_DESCRIPTION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

218 
	#sk_ACCESS_DESCRIPTION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

219 
	#sk_ACCESS_DESCRIPTION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ACCESS_DESCRIPTION
, (°), (i))

	)

220 
	#sk_ACCESS_DESCRIPTION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ACCESS_DESCRIPTION
, (°), (±r))

	)

221 
	#sk_ACCESS_DESCRIPTION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ACCESS_DESCRIPTION
, (°), (vÆ), (i))

	)

222 
	#sk_ACCESS_DESCRIPTION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ACCESS_DESCRIPTION
, (°), (cmp))

	)

223 
	#sk_ACCESS_DESCRIPTION_dup
(
°
Ë
	`SKM_sk_dup
(
ACCESS_DESCRIPTION
, st)

	)

224 
	#sk_ACCESS_DESCRIPTION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ACCESS_DESCRIPTION
, (°), (‰ì_func))

	)

225 
	#sk_ACCESS_DESCRIPTION_shi·
(
°
Ë
	`SKM_sk_shi·
(
ACCESS_DESCRIPTION
, (°))

	)

226 
	#sk_ACCESS_DESCRIPTION_p›
(
°
Ë
	`SKM_sk_p›
(
ACCESS_DESCRIPTION
, (°))

	)

227 
	#sk_ACCESS_DESCRIPTION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ACCESS_DESCRIPTION
, (°))

	)

228 
	#sk_ACCESS_DESCRIPTION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ACCESS_DESCRIPTION
, (°))

	)

230 
	#sk_ASIdOrR™ge_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASIdOrR™ge
, (cmp))

	)

231 
	#sk_ASIdOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASIdOrR™ge
)

	)

232 
	#sk_ASIdOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASIdOrR™ge
, (°))

	)

233 
	#sk_ASIdOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
ASIdOrR™ge
, (°))

	)

234 
	#sk_ASIdOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASIdOrR™ge
, (°), (i))

	)

235 
	#sk_ASIdOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASIdOrR™ge
, (°), (i), (vÆ))

	)

236 
	#sk_ASIdOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASIdOrR™ge
, (°))

	)

237 
	#sk_ASIdOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASIdOrR™ge
, (°), (vÆ))

	)

238 
	#sk_ASIdOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASIdOrR™ge
, (°), (vÆ))

	)

239 
	#sk_ASIdOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASIdOrR™ge
, (°), (vÆ))

	)

240 
	#sk_ASIdOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASIdOrR™ge
, (°), (vÆ))

	)

241 
	#sk_ASIdOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASIdOrR™ge
, (°), (i))

	)

242 
	#sk_ASIdOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASIdOrR™ge
, (°), (±r))

	)

243 
	#sk_ASIdOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASIdOrR™ge
, (°), (vÆ), (i))

	)

244 
	#sk_ASIdOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASIdOrR™ge
, (°), (cmp))

	)

245 
	#sk_ASIdOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
ASIdOrR™ge
, st)

	)

246 
	#sk_ASIdOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASIdOrR™ge
, (°), (‰ì_func))

	)

247 
	#sk_ASIdOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASIdOrR™ge
, (°))

	)

248 
	#sk_ASIdOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
ASIdOrR™ge
, (°))

	)

249 
	#sk_ASIdOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASIdOrR™ge
, (°))

	)

250 
	#sk_ASIdOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASIdOrR™ge
, (°))

	)

252 
	#sk_ASN1_GENERALSTRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_GENERALSTRING
, (cmp))

	)

253 
	#sk_ASN1_GENERALSTRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_GENERALSTRING
)

	)

254 
	#sk_ASN1_GENERALSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_GENERALSTRING
, (°))

	)

255 
	#sk_ASN1_GENERALSTRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_GENERALSTRING
, (°))

	)

256 
	#sk_ASN1_GENERALSTRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_GENERALSTRING
, (°), (i))

	)

257 
	#sk_ASN1_GENERALSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_GENERALSTRING
, (°), (i), (vÆ))

	)

258 
	#sk_ASN1_GENERALSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_GENERALSTRING
, (°))

	)

259 
	#sk_ASN1_GENERALSTRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

260 
	#sk_ASN1_GENERALSTRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

261 
	#sk_ASN1_GENERALSTRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

262 
	#sk_ASN1_GENERALSTRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

263 
	#sk_ASN1_GENERALSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_GENERALSTRING
, (°), (i))

	)

264 
	#sk_ASN1_GENERALSTRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_GENERALSTRING
, (°), (±r))

	)

265 
	#sk_ASN1_GENERALSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_GENERALSTRING
, (°), (vÆ), (i))

	)

266 
	#sk_ASN1_GENERALSTRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_GENERALSTRING
, (°), (cmp))

	)

267 
	#sk_ASN1_GENERALSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_GENERALSTRING
, st)

	)

268 
	#sk_ASN1_GENERALSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_GENERALSTRING
, (°), (‰ì_func))

	)

269 
	#sk_ASN1_GENERALSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_GENERALSTRING
, (°))

	)

270 
	#sk_ASN1_GENERALSTRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_GENERALSTRING
, (°))

	)

271 
	#sk_ASN1_GENERALSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_GENERALSTRING
, (°))

	)

272 
	#sk_ASN1_GENERALSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_GENERALSTRING
, (°))

	)

274 
	#sk_ASN1_INTEGER_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_INTEGER
, (cmp))

	)

275 
	#sk_ASN1_INTEGER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_INTEGER
)

	)

276 
	#sk_ASN1_INTEGER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_INTEGER
, (°))

	)

277 
	#sk_ASN1_INTEGER_num
(
°
Ë
	`SKM_sk_num
(
ASN1_INTEGER
, (°))

	)

278 
	#sk_ASN1_INTEGER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_INTEGER
, (°), (i))

	)

279 
	#sk_ASN1_INTEGER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_INTEGER
, (°), (i), (vÆ))

	)

280 
	#sk_ASN1_INTEGER_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_INTEGER
, (°))

	)

281 
	#sk_ASN1_INTEGER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_INTEGER
, (°), (vÆ))

	)

282 
	#sk_ASN1_INTEGER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_INTEGER
, (°), (vÆ))

	)

283 
	#sk_ASN1_INTEGER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_INTEGER
, (°), (vÆ))

	)

284 
	#sk_ASN1_INTEGER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_INTEGER
, (°), (vÆ))

	)

285 
	#sk_ASN1_INTEGER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_INTEGER
, (°), (i))

	)

286 
	#sk_ASN1_INTEGER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_INTEGER
, (°), (±r))

	)

287 
	#sk_ASN1_INTEGER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_INTEGER
, (°), (vÆ), (i))

	)

288 
	#sk_ASN1_INTEGER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_INTEGER
, (°), (cmp))

	)

289 
	#sk_ASN1_INTEGER_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_INTEGER
, st)

	)

290 
	#sk_ASN1_INTEGER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_INTEGER
, (°), (‰ì_func))

	)

291 
	#sk_ASN1_INTEGER_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_INTEGER
, (°))

	)

292 
	#sk_ASN1_INTEGER_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_INTEGER
, (°))

	)

293 
	#sk_ASN1_INTEGER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_INTEGER
, (°))

	)

294 
	#sk_ASN1_INTEGER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_INTEGER
, (°))

	)

296 
	#sk_ASN1_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_OBJECT
, (cmp))

	)

297 
	#sk_ASN1_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_OBJECT
)

	)

298 
	#sk_ASN1_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_OBJECT
, (°))

	)

299 
	#sk_ASN1_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
ASN1_OBJECT
, (°))

	)

300 
	#sk_ASN1_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_OBJECT
, (°), (i))

	)

301 
	#sk_ASN1_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_OBJECT
, (°), (i), (vÆ))

	)

302 
	#sk_ASN1_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_OBJECT
, (°))

	)

303 
	#sk_ASN1_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_OBJECT
, (°), (vÆ))

	)

304 
	#sk_ASN1_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_OBJECT
, (°), (vÆ))

	)

305 
	#sk_ASN1_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_OBJECT
, (°), (vÆ))

	)

306 
	#sk_ASN1_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_OBJECT
, (°), (vÆ))

	)

307 
	#sk_ASN1_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_OBJECT
, (°), (i))

	)

308 
	#sk_ASN1_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_OBJECT
, (°), (±r))

	)

309 
	#sk_ASN1_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_OBJECT
, (°), (vÆ), (i))

	)

310 
	#sk_ASN1_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_OBJECT
, (°), (cmp))

	)

311 
	#sk_ASN1_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_OBJECT
, st)

	)

312 
	#sk_ASN1_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_OBJECT
, (°), (‰ì_func))

	)

313 
	#sk_ASN1_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_OBJECT
, (°))

	)

314 
	#sk_ASN1_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_OBJECT
, (°))

	)

315 
	#sk_ASN1_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_OBJECT
, (°))

	)

316 
	#sk_ASN1_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_OBJECT
, (°))

	)

318 
	#sk_ASN1_STRING_TABLE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_STRING_TABLE
, (cmp))

	)

319 
	#sk_ASN1_STRING_TABLE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_STRING_TABLE
)

	)

320 
	#sk_ASN1_STRING_TABLE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_STRING_TABLE
, (°))

	)

321 
	#sk_ASN1_STRING_TABLE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_STRING_TABLE
, (°))

	)

322 
	#sk_ASN1_STRING_TABLE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_STRING_TABLE
, (°), (i))

	)

323 
	#sk_ASN1_STRING_TABLE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_STRING_TABLE
, (°), (i), (vÆ))

	)

324 
	#sk_ASN1_STRING_TABLE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_STRING_TABLE
, (°))

	)

325 
	#sk_ASN1_STRING_TABLE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

326 
	#sk_ASN1_STRING_TABLE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

327 
	#sk_ASN1_STRING_TABLE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

328 
	#sk_ASN1_STRING_TABLE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

329 
	#sk_ASN1_STRING_TABLE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_STRING_TABLE
, (°), (i))

	)

330 
	#sk_ASN1_STRING_TABLE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_STRING_TABLE
, (°), (±r))

	)

331 
	#sk_ASN1_STRING_TABLE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_STRING_TABLE
, (°), (vÆ), (i))

	)

332 
	#sk_ASN1_STRING_TABLE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_STRING_TABLE
, (°), (cmp))

	)

333 
	#sk_ASN1_STRING_TABLE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_STRING_TABLE
, st)

	)

334 
	#sk_ASN1_STRING_TABLE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_STRING_TABLE
, (°), (‰ì_func))

	)

335 
	#sk_ASN1_STRING_TABLE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_STRING_TABLE
, (°))

	)

336 
	#sk_ASN1_STRING_TABLE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_STRING_TABLE
, (°))

	)

337 
	#sk_ASN1_STRING_TABLE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_STRING_TABLE
, (°))

	)

338 
	#sk_ASN1_STRING_TABLE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_STRING_TABLE
, (°))

	)

340 
	#sk_ASN1_TYPE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_TYPE
, (cmp))

	)

341 
	#sk_ASN1_TYPE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_TYPE
)

	)

342 
	#sk_ASN1_TYPE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_TYPE
, (°))

	)

343 
	#sk_ASN1_TYPE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_TYPE
, (°))

	)

344 
	#sk_ASN1_TYPE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_TYPE
, (°), (i))

	)

345 
	#sk_ASN1_TYPE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_TYPE
, (°), (i), (vÆ))

	)

346 
	#sk_ASN1_TYPE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_TYPE
, (°))

	)

347 
	#sk_ASN1_TYPE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_TYPE
, (°), (vÆ))

	)

348 
	#sk_ASN1_TYPE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_TYPE
, (°), (vÆ))

	)

349 
	#sk_ASN1_TYPE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_TYPE
, (°), (vÆ))

	)

350 
	#sk_ASN1_TYPE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_TYPE
, (°), (vÆ))

	)

351 
	#sk_ASN1_TYPE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_TYPE
, (°), (i))

	)

352 
	#sk_ASN1_TYPE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_TYPE
, (°), (±r))

	)

353 
	#sk_ASN1_TYPE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_TYPE
, (°), (vÆ), (i))

	)

354 
	#sk_ASN1_TYPE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_TYPE
, (°), (cmp))

	)

355 
	#sk_ASN1_TYPE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_TYPE
, st)

	)

356 
	#sk_ASN1_TYPE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_TYPE
, (°), (‰ì_func))

	)

357 
	#sk_ASN1_TYPE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_TYPE
, (°))

	)

358 
	#sk_ASN1_TYPE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_TYPE
, (°))

	)

359 
	#sk_ASN1_TYPE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_TYPE
, (°))

	)

360 
	#sk_ASN1_TYPE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_TYPE
, (°))

	)

362 
	#sk_ASN1_UTF8STRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_UTF8STRING
, (cmp))

	)

363 
	#sk_ASN1_UTF8STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_UTF8STRING
)

	)

364 
	#sk_ASN1_UTF8STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_UTF8STRING
, (°))

	)

365 
	#sk_ASN1_UTF8STRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_UTF8STRING
, (°))

	)

366 
	#sk_ASN1_UTF8STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_UTF8STRING
, (°), (i))

	)

367 
	#sk_ASN1_UTF8STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_UTF8STRING
, (°), (i), (vÆ))

	)

368 
	#sk_ASN1_UTF8STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_UTF8STRING
, (°))

	)

369 
	#sk_ASN1_UTF8STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

370 
	#sk_ASN1_UTF8STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

371 
	#sk_ASN1_UTF8STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

372 
	#sk_ASN1_UTF8STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

373 
	#sk_ASN1_UTF8STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_UTF8STRING
, (°), (i))

	)

374 
	#sk_ASN1_UTF8STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_UTF8STRING
, (°), (±r))

	)

375 
	#sk_ASN1_UTF8STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_UTF8STRING
, (°), (vÆ), (i))

	)

376 
	#sk_ASN1_UTF8STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_UTF8STRING
, (°), (cmp))

	)

377 
	#sk_ASN1_UTF8STRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_UTF8STRING
, st)

	)

378 
	#sk_ASN1_UTF8STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_UTF8STRING
, (°), (‰ì_func))

	)

379 
	#sk_ASN1_UTF8STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_UTF8STRING
, (°))

	)

380 
	#sk_ASN1_UTF8STRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_UTF8STRING
, (°))

	)

381 
	#sk_ASN1_UTF8STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_UTF8STRING
, (°))

	)

382 
	#sk_ASN1_UTF8STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_UTF8STRING
, (°))

	)

384 
	#sk_ASN1_VALUE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_VALUE
, (cmp))

	)

385 
	#sk_ASN1_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_VALUE
)

	)

386 
	#sk_ASN1_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_VALUE
, (°))

	)

387 
	#sk_ASN1_VALUE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_VALUE
, (°))

	)

388 
	#sk_ASN1_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_VALUE
, (°), (i))

	)

389 
	#sk_ASN1_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_VALUE
, (°), (i), (vÆ))

	)

390 
	#sk_ASN1_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_VALUE
, (°))

	)

391 
	#sk_ASN1_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_VALUE
, (°), (vÆ))

	)

392 
	#sk_ASN1_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_VALUE
, (°), (vÆ))

	)

393 
	#sk_ASN1_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_VALUE
, (°), (vÆ))

	)

394 
	#sk_ASN1_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_VALUE
, (°), (vÆ))

	)

395 
	#sk_ASN1_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_VALUE
, (°), (i))

	)

396 
	#sk_ASN1_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_VALUE
, (°), (±r))

	)

397 
	#sk_ASN1_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_VALUE
, (°), (vÆ), (i))

	)

398 
	#sk_ASN1_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_VALUE
, (°), (cmp))

	)

399 
	#sk_ASN1_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_VALUE
, st)

	)

400 
	#sk_ASN1_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_VALUE
, (°), (‰ì_func))

	)

401 
	#sk_ASN1_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_VALUE
, (°))

	)

402 
	#sk_ASN1_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_VALUE
, (°))

	)

403 
	#sk_ASN1_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_VALUE
, (°))

	)

404 
	#sk_ASN1_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_VALUE
, (°))

	)

406 
	#sk_BIO_√w
(
cmp
Ë
	`SKM_sk_√w
(
BIO
, (cmp))

	)

407 
	#sk_BIO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BIO
)

	)

408 
	#sk_BIO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BIO
, (°))

	)

409 
	#sk_BIO_num
(
°
Ë
	`SKM_sk_num
(
BIO
, (°))

	)

410 
	#sk_BIO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BIO
, (°), (i))

	)

411 
	#sk_BIO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BIO
, (°), (i), (vÆ))

	)

412 
	#sk_BIO_zîo
(
°
Ë
	`SKM_sk_zîo
(
BIO
, (°))

	)

413 
	#sk_BIO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BIO
, (°), (vÆ))

	)

414 
	#sk_BIO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BIO
, (°), (vÆ))

	)

415 
	#sk_BIO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BIO
, (°), (vÆ))

	)

416 
	#sk_BIO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BIO
, (°), (vÆ))

	)

417 
	#sk_BIO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BIO
, (°), (i))

	)

418 
	#sk_BIO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BIO
, (°), (±r))

	)

419 
	#sk_BIO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BIO
, (°), (vÆ), (i))

	)

420 
	#sk_BIO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BIO
, (°), (cmp))

	)

421 
	#sk_BIO_dup
(
°
Ë
	`SKM_sk_dup
(
BIO
, st)

	)

422 
	#sk_BIO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BIO
, (°), (‰ì_func))

	)

423 
	#sk_BIO_shi·
(
°
Ë
	`SKM_sk_shi·
(
BIO
, (°))

	)

424 
	#sk_BIO_p›
(
°
Ë
	`SKM_sk_p›
(
BIO
, (°))

	)

425 
	#sk_BIO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BIO
, (°))

	)

426 
	#sk_BIO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BIO
, (°))

	)

428 
	#sk_BY_DIR_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
BY_DIR_ENTRY
, (cmp))

	)

429 
	#sk_BY_DIR_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BY_DIR_ENTRY
)

	)

430 
	#sk_BY_DIR_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BY_DIR_ENTRY
, (°))

	)

431 
	#sk_BY_DIR_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
BY_DIR_ENTRY
, (°))

	)

432 
	#sk_BY_DIR_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BY_DIR_ENTRY
, (°), (i))

	)

433 
	#sk_BY_DIR_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BY_DIR_ENTRY
, (°), (i), (vÆ))

	)

434 
	#sk_BY_DIR_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
BY_DIR_ENTRY
, (°))

	)

435 
	#sk_BY_DIR_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

436 
	#sk_BY_DIR_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

437 
	#sk_BY_DIR_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

438 
	#sk_BY_DIR_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

439 
	#sk_BY_DIR_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BY_DIR_ENTRY
, (°), (i))

	)

440 
	#sk_BY_DIR_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BY_DIR_ENTRY
, (°), (±r))

	)

441 
	#sk_BY_DIR_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BY_DIR_ENTRY
, (°), (vÆ), (i))

	)

442 
	#sk_BY_DIR_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BY_DIR_ENTRY
, (°), (cmp))

	)

443 
	#sk_BY_DIR_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
BY_DIR_ENTRY
, st)

	)

444 
	#sk_BY_DIR_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BY_DIR_ENTRY
, (°), (‰ì_func))

	)

445 
	#sk_BY_DIR_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
BY_DIR_ENTRY
, (°))

	)

446 
	#sk_BY_DIR_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
BY_DIR_ENTRY
, (°))

	)

447 
	#sk_BY_DIR_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BY_DIR_ENTRY
, (°))

	)

448 
	#sk_BY_DIR_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BY_DIR_ENTRY
, (°))

	)

450 
	#sk_BY_DIR_HASH_√w
(
cmp
Ë
	`SKM_sk_√w
(
BY_DIR_HASH
, (cmp))

	)

451 
	#sk_BY_DIR_HASH_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BY_DIR_HASH
)

	)

452 
	#sk_BY_DIR_HASH_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BY_DIR_HASH
, (°))

	)

453 
	#sk_BY_DIR_HASH_num
(
°
Ë
	`SKM_sk_num
(
BY_DIR_HASH
, (°))

	)

454 
	#sk_BY_DIR_HASH_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BY_DIR_HASH
, (°), (i))

	)

455 
	#sk_BY_DIR_HASH_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BY_DIR_HASH
, (°), (i), (vÆ))

	)

456 
	#sk_BY_DIR_HASH_zîo
(
°
Ë
	`SKM_sk_zîo
(
BY_DIR_HASH
, (°))

	)

457 
	#sk_BY_DIR_HASH_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BY_DIR_HASH
, (°), (vÆ))

	)

458 
	#sk_BY_DIR_HASH_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BY_DIR_HASH
, (°), (vÆ))

	)

459 
	#sk_BY_DIR_HASH_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BY_DIR_HASH
, (°), (vÆ))

	)

460 
	#sk_BY_DIR_HASH_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BY_DIR_HASH
, (°), (vÆ))

	)

461 
	#sk_BY_DIR_HASH_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BY_DIR_HASH
, (°), (i))

	)

462 
	#sk_BY_DIR_HASH_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BY_DIR_HASH
, (°), (±r))

	)

463 
	#sk_BY_DIR_HASH_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BY_DIR_HASH
, (°), (vÆ), (i))

	)

464 
	#sk_BY_DIR_HASH_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BY_DIR_HASH
, (°), (cmp))

	)

465 
	#sk_BY_DIR_HASH_dup
(
°
Ë
	`SKM_sk_dup
(
BY_DIR_HASH
, st)

	)

466 
	#sk_BY_DIR_HASH_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BY_DIR_HASH
, (°), (‰ì_func))

	)

467 
	#sk_BY_DIR_HASH_shi·
(
°
Ë
	`SKM_sk_shi·
(
BY_DIR_HASH
, (°))

	)

468 
	#sk_BY_DIR_HASH_p›
(
°
Ë
	`SKM_sk_p›
(
BY_DIR_HASH
, (°))

	)

469 
	#sk_BY_DIR_HASH_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BY_DIR_HASH
, (°))

	)

470 
	#sk_BY_DIR_HASH_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BY_DIR_HASH
, (°))

	)

472 
	#sk_CMS_CîtifiˇãChoi˚s_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_CîtifiˇãChoi˚s
, (cmp))

	)

473 
	#sk_CMS_CîtifiˇãChoi˚s_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_CîtifiˇãChoi˚s
)

	)

474 
	#sk_CMS_CîtifiˇãChoi˚s_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

475 
	#sk_CMS_CîtifiˇãChoi˚s_num
(
°
Ë
	`SKM_sk_num
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

476 
	#sk_CMS_CîtifiˇãChoi˚s_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

477 
	#sk_CMS_CîtifiˇãChoi˚s_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_CîtifiˇãChoi˚s
, (°), (i), (vÆ))

	)

478 
	#sk_CMS_CîtifiˇãChoi˚s_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

479 
	#sk_CMS_CîtifiˇãChoi˚s_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

480 
	#sk_CMS_CîtifiˇãChoi˚s_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

481 
	#sk_CMS_CîtifiˇãChoi˚s_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

482 
	#sk_CMS_CîtifiˇãChoi˚s_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

483 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

484 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_CîtifiˇãChoi˚s
, (°), (±r))

	)

485 
	#sk_CMS_CîtifiˇãChoi˚s_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ), (i))

	)

486 
	#sk_CMS_CîtifiˇãChoi˚s_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_CîtifiˇãChoi˚s
, (°), (cmp))

	)

487 
	#sk_CMS_CîtifiˇãChoi˚s_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_CîtifiˇãChoi˚s
, st)

	)

488 
	#sk_CMS_CîtifiˇãChoi˚s_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°), (‰ì_func))

	)

489 
	#sk_CMS_CîtifiˇãChoi˚s_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

490 
	#sk_CMS_CîtifiˇãChoi˚s_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

491 
	#sk_CMS_CîtifiˇãChoi˚s_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

492 
	#sk_CMS_CîtifiˇãChoi˚s_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

494 
	#sk_CMS_Recùõ¡Info_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Recùõ¡Info
, (cmp))

	)

495 
	#sk_CMS_Recùõ¡Info_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Recùõ¡Info
)

	)

496 
	#sk_CMS_Recùõ¡Info_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Recùõ¡Info
, (°))

	)

497 
	#sk_CMS_Recùõ¡Info_num
(
°
Ë
	`SKM_sk_num
(
CMS_Recùõ¡Info
, (°))

	)

498 
	#sk_CMS_Recùõ¡Info_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Recùõ¡Info
, (°), (i))

	)

499 
	#sk_CMS_Recùõ¡Info_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Recùõ¡Info
, (°), (i), (vÆ))

	)

500 
	#sk_CMS_Recùõ¡Info_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Recùõ¡Info
, (°))

	)

501 
	#sk_CMS_Recùõ¡Info_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

502 
	#sk_CMS_Recùõ¡Info_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

503 
	#sk_CMS_Recùõ¡Info_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

504 
	#sk_CMS_Recùõ¡Info_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

505 
	#sk_CMS_Recùõ¡Info_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Recùõ¡Info
, (°), (i))

	)

506 
	#sk_CMS_Recùõ¡Info_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Recùõ¡Info
, (°), (±r))

	)

507 
	#sk_CMS_Recùõ¡Info_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Recùõ¡Info
, (°), (vÆ), (i))

	)

508 
	#sk_CMS_Recùõ¡Info_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Recùõ¡Info
, (°), (cmp))

	)

509 
	#sk_CMS_Recùõ¡Info_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Recùõ¡Info
, st)

	)

510 
	#sk_CMS_Recùõ¡Info_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Recùõ¡Info
, (°), (‰ì_func))

	)

511 
	#sk_CMS_Recùõ¡Info_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Recùõ¡Info
, (°))

	)

512 
	#sk_CMS_Recùõ¡Info_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Recùõ¡Info
, (°))

	)

513 
	#sk_CMS_Recùõ¡Info_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Recùõ¡Info
, (°))

	)

514 
	#sk_CMS_Recùõ¡Info_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Recùõ¡Info
, (°))

	)

516 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Revoˇti⁄InfoChoi˚
, (cmp))

	)

517 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Revoˇti⁄InfoChoi˚
)

	)

518 
	#sk_CMS_Revoˇti⁄InfoChoi˚_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

519 
	#sk_CMS_Revoˇti⁄InfoChoi˚_num
(
°
Ë
	`SKM_sk_num
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

520 
	#sk_CMS_Revoˇti⁄InfoChoi˚_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

521 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i), (vÆ))

	)

522 
	#sk_CMS_Revoˇti⁄InfoChoi˚_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

523 
	#sk_CMS_Revoˇti⁄InfoChoi˚_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

524 
	#sk_CMS_Revoˇti⁄InfoChoi˚_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

525 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

526 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

527 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

528 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (±r))

	)

529 
	#sk_CMS_Revoˇti⁄InfoChoi˚_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ), (i))

	)

530 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (cmp))

	)

531 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Revoˇti⁄InfoChoi˚
, st)

	)

532 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (‰ì_func))

	)

533 
	#sk_CMS_Revoˇti⁄InfoChoi˚_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

534 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

535 
	#sk_CMS_Revoˇti⁄InfoChoi˚_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

536 
	#sk_CMS_Revoˇti⁄InfoChoi˚_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

538 
	#sk_CMS_Sig√rInfo_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Sig√rInfo
, (cmp))

	)

539 
	#sk_CMS_Sig√rInfo_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Sig√rInfo
)

	)

540 
	#sk_CMS_Sig√rInfo_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Sig√rInfo
, (°))

	)

541 
	#sk_CMS_Sig√rInfo_num
(
°
Ë
	`SKM_sk_num
(
CMS_Sig√rInfo
, (°))

	)

542 
	#sk_CMS_Sig√rInfo_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Sig√rInfo
, (°), (i))

	)

543 
	#sk_CMS_Sig√rInfo_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Sig√rInfo
, (°), (i), (vÆ))

	)

544 
	#sk_CMS_Sig√rInfo_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Sig√rInfo
, (°))

	)

545 
	#sk_CMS_Sig√rInfo_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

546 
	#sk_CMS_Sig√rInfo_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

547 
	#sk_CMS_Sig√rInfo_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

548 
	#sk_CMS_Sig√rInfo_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

549 
	#sk_CMS_Sig√rInfo_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Sig√rInfo
, (°), (i))

	)

550 
	#sk_CMS_Sig√rInfo_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Sig√rInfo
, (°), (±r))

	)

551 
	#sk_CMS_Sig√rInfo_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Sig√rInfo
, (°), (vÆ), (i))

	)

552 
	#sk_CMS_Sig√rInfo_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Sig√rInfo
, (°), (cmp))

	)

553 
	#sk_CMS_Sig√rInfo_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Sig√rInfo
, st)

	)

554 
	#sk_CMS_Sig√rInfo_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Sig√rInfo
, (°), (‰ì_func))

	)

555 
	#sk_CMS_Sig√rInfo_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Sig√rInfo
, (°))

	)

556 
	#sk_CMS_Sig√rInfo_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Sig√rInfo
, (°))

	)

557 
	#sk_CMS_Sig√rInfo_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Sig√rInfo
, (°))

	)

558 
	#sk_CMS_Sig√rInfo_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Sig√rInfo
, (°))

	)

560 
	#sk_CONF_IMODULE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_IMODULE
, (cmp))

	)

561 
	#sk_CONF_IMODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_IMODULE
)

	)

562 
	#sk_CONF_IMODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_IMODULE
, (°))

	)

563 
	#sk_CONF_IMODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_IMODULE
, (°))

	)

564 
	#sk_CONF_IMODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_IMODULE
, (°), (i))

	)

565 
	#sk_CONF_IMODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_IMODULE
, (°), (i), (vÆ))

	)

566 
	#sk_CONF_IMODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_IMODULE
, (°))

	)

567 
	#sk_CONF_IMODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_IMODULE
, (°), (vÆ))

	)

568 
	#sk_CONF_IMODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_IMODULE
, (°), (vÆ))

	)

569 
	#sk_CONF_IMODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_IMODULE
, (°), (vÆ))

	)

570 
	#sk_CONF_IMODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_IMODULE
, (°), (vÆ))

	)

571 
	#sk_CONF_IMODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_IMODULE
, (°), (i))

	)

572 
	#sk_CONF_IMODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_IMODULE
, (°), (±r))

	)

573 
	#sk_CONF_IMODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_IMODULE
, (°), (vÆ), (i))

	)

574 
	#sk_CONF_IMODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_IMODULE
, (°), (cmp))

	)

575 
	#sk_CONF_IMODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_IMODULE
, st)

	)

576 
	#sk_CONF_IMODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_IMODULE
, (°), (‰ì_func))

	)

577 
	#sk_CONF_IMODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_IMODULE
, (°))

	)

578 
	#sk_CONF_IMODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_IMODULE
, (°))

	)

579 
	#sk_CONF_IMODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_IMODULE
, (°))

	)

580 
	#sk_CONF_IMODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_IMODULE
, (°))

	)

582 
	#sk_CONF_MODULE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_MODULE
, (cmp))

	)

583 
	#sk_CONF_MODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_MODULE
)

	)

584 
	#sk_CONF_MODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_MODULE
, (°))

	)

585 
	#sk_CONF_MODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_MODULE
, (°))

	)

586 
	#sk_CONF_MODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_MODULE
, (°), (i))

	)

587 
	#sk_CONF_MODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_MODULE
, (°), (i), (vÆ))

	)

588 
	#sk_CONF_MODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_MODULE
, (°))

	)

589 
	#sk_CONF_MODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_MODULE
, (°), (vÆ))

	)

590 
	#sk_CONF_MODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_MODULE
, (°), (vÆ))

	)

591 
	#sk_CONF_MODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_MODULE
, (°), (vÆ))

	)

592 
	#sk_CONF_MODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_MODULE
, (°), (vÆ))

	)

593 
	#sk_CONF_MODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_MODULE
, (°), (i))

	)

594 
	#sk_CONF_MODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_MODULE
, (°), (±r))

	)

595 
	#sk_CONF_MODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_MODULE
, (°), (vÆ), (i))

	)

596 
	#sk_CONF_MODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_MODULE
, (°), (cmp))

	)

597 
	#sk_CONF_MODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_MODULE
, st)

	)

598 
	#sk_CONF_MODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_MODULE
, (°), (‰ì_func))

	)

599 
	#sk_CONF_MODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_MODULE
, (°))

	)

600 
	#sk_CONF_MODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_MODULE
, (°))

	)

601 
	#sk_CONF_MODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_MODULE
, (°))

	)

602 
	#sk_CONF_MODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_MODULE
, (°))

	)

604 
	#sk_CONF_VALUE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_VALUE
, (cmp))

	)

605 
	#sk_CONF_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_VALUE
)

	)

606 
	#sk_CONF_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_VALUE
, (°))

	)

607 
	#sk_CONF_VALUE_num
(
°
Ë
	`SKM_sk_num
(
CONF_VALUE
, (°))

	)

608 
	#sk_CONF_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_VALUE
, (°), (i))

	)

609 
	#sk_CONF_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_VALUE
, (°), (i), (vÆ))

	)

610 
	#sk_CONF_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_VALUE
, (°))

	)

611 
	#sk_CONF_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_VALUE
, (°), (vÆ))

	)

612 
	#sk_CONF_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_VALUE
, (°), (vÆ))

	)

613 
	#sk_CONF_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_VALUE
, (°), (vÆ))

	)

614 
	#sk_CONF_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_VALUE
, (°), (vÆ))

	)

615 
	#sk_CONF_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_VALUE
, (°), (i))

	)

616 
	#sk_CONF_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_VALUE
, (°), (±r))

	)

617 
	#sk_CONF_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_VALUE
, (°), (vÆ), (i))

	)

618 
	#sk_CONF_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_VALUE
, (°), (cmp))

	)

619 
	#sk_CONF_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_VALUE
, st)

	)

620 
	#sk_CONF_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_VALUE
, (°), (‰ì_func))

	)

621 
	#sk_CONF_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_VALUE
, (°))

	)

622 
	#sk_CONF_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_VALUE
, (°))

	)

623 
	#sk_CONF_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_VALUE
, (°))

	)

624 
	#sk_CONF_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_VALUE
, (°))

	)

626 
	#sk_CRYPTO_EX_DATA_FUNCS_√w
(
cmp
Ë
	`SKM_sk_√w
(
CRYPTO_EX_DATA_FUNCS
, (cmp))

	)

627 
	#sk_CRYPTO_EX_DATA_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_EX_DATA_FUNCS
)

	)

628 
	#sk_CRYPTO_EX_DATA_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

629 
	#sk_CRYPTO_EX_DATA_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

630 
	#sk_CRYPTO_EX_DATA_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

631 
	#sk_CRYPTO_EX_DATA_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_EX_DATA_FUNCS
, (°), (i), (vÆ))

	)

632 
	#sk_CRYPTO_EX_DATA_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

633 
	#sk_CRYPTO_EX_DATA_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

634 
	#sk_CRYPTO_EX_DATA_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

635 
	#sk_CRYPTO_EX_DATA_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

636 
	#sk_CRYPTO_EX_DATA_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

637 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

638 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_EX_DATA_FUNCS
, (°), (±r))

	)

639 
	#sk_CRYPTO_EX_DATA_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ), (i))

	)

640 
	#sk_CRYPTO_EX_DATA_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_EX_DATA_FUNCS
, (°), (cmp))

	)

641 
	#sk_CRYPTO_EX_DATA_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_EX_DATA_FUNCS
, st)

	)

642 
	#sk_CRYPTO_EX_DATA_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°), (‰ì_func))

	)

643 
	#sk_CRYPTO_EX_DATA_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

644 
	#sk_CRYPTO_EX_DATA_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

645 
	#sk_CRYPTO_EX_DATA_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

646 
	#sk_CRYPTO_EX_DATA_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

648 
	#sk_CRYPTO_dy∆ock_√w
(
cmp
Ë
	`SKM_sk_√w
(
CRYPTO_dy∆ock
, (cmp))

	)

649 
	#sk_CRYPTO_dy∆ock_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_dy∆ock
)

	)

650 
	#sk_CRYPTO_dy∆ock_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_dy∆ock
, (°))

	)

651 
	#sk_CRYPTO_dy∆ock_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_dy∆ock
, (°))

	)

652 
	#sk_CRYPTO_dy∆ock_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_dy∆ock
, (°), (i))

	)

653 
	#sk_CRYPTO_dy∆ock_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_dy∆ock
, (°), (i), (vÆ))

	)

654 
	#sk_CRYPTO_dy∆ock_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_dy∆ock
, (°))

	)

655 
	#sk_CRYPTO_dy∆ock_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

656 
	#sk_CRYPTO_dy∆ock_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

657 
	#sk_CRYPTO_dy∆ock_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

658 
	#sk_CRYPTO_dy∆ock_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

659 
	#sk_CRYPTO_dy∆ock_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_dy∆ock
, (°), (i))

	)

660 
	#sk_CRYPTO_dy∆ock_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_dy∆ock
, (°), (±r))

	)

661 
	#sk_CRYPTO_dy∆ock_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_dy∆ock
, (°), (vÆ), (i))

	)

662 
	#sk_CRYPTO_dy∆ock_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_dy∆ock
, (°), (cmp))

	)

663 
	#sk_CRYPTO_dy∆ock_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_dy∆ock
, st)

	)

664 
	#sk_CRYPTO_dy∆ock_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_dy∆ock
, (°), (‰ì_func))

	)

665 
	#sk_CRYPTO_dy∆ock_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_dy∆ock
, (°))

	)

666 
	#sk_CRYPTO_dy∆ock_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_dy∆ock
, (°))

	)

667 
	#sk_CRYPTO_dy∆ock_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_dy∆ock
, (°))

	)

668 
	#sk_CRYPTO_dy∆ock_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_dy∆ock
, (°))

	)

670 
	#sk_DIST_POINT_√w
(
cmp
Ë
	`SKM_sk_√w
(
DIST_POINT
, (cmp))

	)

671 
	#sk_DIST_POINT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
DIST_POINT
)

	)

672 
	#sk_DIST_POINT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
DIST_POINT
, (°))

	)

673 
	#sk_DIST_POINT_num
(
°
Ë
	`SKM_sk_num
(
DIST_POINT
, (°))

	)

674 
	#sk_DIST_POINT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
DIST_POINT
, (°), (i))

	)

675 
	#sk_DIST_POINT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
DIST_POINT
, (°), (i), (vÆ))

	)

676 
	#sk_DIST_POINT_zîo
(
°
Ë
	`SKM_sk_zîo
(
DIST_POINT
, (°))

	)

677 
	#sk_DIST_POINT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
DIST_POINT
, (°), (vÆ))

	)

678 
	#sk_DIST_POINT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
DIST_POINT
, (°), (vÆ))

	)

679 
	#sk_DIST_POINT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
DIST_POINT
, (°), (vÆ))

	)

680 
	#sk_DIST_POINT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
DIST_POINT
, (°), (vÆ))

	)

681 
	#sk_DIST_POINT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
DIST_POINT
, (°), (i))

	)

682 
	#sk_DIST_POINT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
DIST_POINT
, (°), (±r))

	)

683 
	#sk_DIST_POINT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
DIST_POINT
, (°), (vÆ), (i))

	)

684 
	#sk_DIST_POINT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
DIST_POINT
, (°), (cmp))

	)

685 
	#sk_DIST_POINT_dup
(
°
Ë
	`SKM_sk_dup
(
DIST_POINT
, st)

	)

686 
	#sk_DIST_POINT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
DIST_POINT
, (°), (‰ì_func))

	)

687 
	#sk_DIST_POINT_shi·
(
°
Ë
	`SKM_sk_shi·
(
DIST_POINT
, (°))

	)

688 
	#sk_DIST_POINT_p›
(
°
Ë
	`SKM_sk_p›
(
DIST_POINT
, (°))

	)

689 
	#sk_DIST_POINT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
DIST_POINT
, (°))

	)

690 
	#sk_DIST_POINT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
DIST_POINT
, (°))

	)

692 
	#sk_ENGINE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ENGINE
, (cmp))

	)

693 
	#sk_ENGINE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE
)

	)

694 
	#sk_ENGINE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE
, (°))

	)

695 
	#sk_ENGINE_num
(
°
Ë
	`SKM_sk_num
(
ENGINE
, (°))

	)

696 
	#sk_ENGINE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE
, (°), (i))

	)

697 
	#sk_ENGINE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE
, (°), (i), (vÆ))

	)

698 
	#sk_ENGINE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE
, (°))

	)

699 
	#sk_ENGINE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE
, (°), (vÆ))

	)

700 
	#sk_ENGINE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE
, (°), (vÆ))

	)

701 
	#sk_ENGINE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE
, (°), (vÆ))

	)

702 
	#sk_ENGINE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE
, (°), (vÆ))

	)

703 
	#sk_ENGINE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE
, (°), (i))

	)

704 
	#sk_ENGINE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE
, (°), (±r))

	)

705 
	#sk_ENGINE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE
, (°), (vÆ), (i))

	)

706 
	#sk_ENGINE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE
, (°), (cmp))

	)

707 
	#sk_ENGINE_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE
, st)

	)

708 
	#sk_ENGINE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE
, (°), (‰ì_func))

	)

709 
	#sk_ENGINE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE
, (°))

	)

710 
	#sk_ENGINE_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE
, (°))

	)

711 
	#sk_ENGINE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE
, (°))

	)

712 
	#sk_ENGINE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE
, (°))

	)

714 
	#sk_ENGINE_CLEANUP_ITEM_√w
(
cmp
Ë
	`SKM_sk_√w
(
ENGINE_CLEANUP_ITEM
, (cmp))

	)

715 
	#sk_ENGINE_CLEANUP_ITEM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE_CLEANUP_ITEM
)

	)

716 
	#sk_ENGINE_CLEANUP_ITEM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE_CLEANUP_ITEM
, (°))

	)

717 
	#sk_ENGINE_CLEANUP_ITEM_num
(
°
Ë
	`SKM_sk_num
(
ENGINE_CLEANUP_ITEM
, (°))

	)

718 
	#sk_ENGINE_CLEANUP_ITEM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

719 
	#sk_ENGINE_CLEANUP_ITEM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE_CLEANUP_ITEM
, (°), (i), (vÆ))

	)

720 
	#sk_ENGINE_CLEANUP_ITEM_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE_CLEANUP_ITEM
, (°))

	)

721 
	#sk_ENGINE_CLEANUP_ITEM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

722 
	#sk_ENGINE_CLEANUP_ITEM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

723 
	#sk_ENGINE_CLEANUP_ITEM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

724 
	#sk_ENGINE_CLEANUP_ITEM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

725 
	#sk_ENGINE_CLEANUP_ITEM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

726 
	#sk_ENGINE_CLEANUP_ITEM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE_CLEANUP_ITEM
, (°), (±r))

	)

727 
	#sk_ENGINE_CLEANUP_ITEM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ), (i))

	)

728 
	#sk_ENGINE_CLEANUP_ITEM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE_CLEANUP_ITEM
, (°), (cmp))

	)

729 
	#sk_ENGINE_CLEANUP_ITEM_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE_CLEANUP_ITEM
, st)

	)

730 
	#sk_ENGINE_CLEANUP_ITEM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE_CLEANUP_ITEM
, (°), (‰ì_func))

	)

731 
	#sk_ENGINE_CLEANUP_ITEM_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE_CLEANUP_ITEM
, (°))

	)

732 
	#sk_ENGINE_CLEANUP_ITEM_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE_CLEANUP_ITEM
, (°))

	)

733 
	#sk_ENGINE_CLEANUP_ITEM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE_CLEANUP_ITEM
, (°))

	)

734 
	#sk_ENGINE_CLEANUP_ITEM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE_CLEANUP_ITEM
, (°))

	)

736 
	#sk_ESS_CERT_ID_√w
(
cmp
Ë
	`SKM_sk_√w
(
ESS_CERT_ID
, (cmp))

	)

737 
	#sk_ESS_CERT_ID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ESS_CERT_ID
)

	)

738 
	#sk_ESS_CERT_ID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ESS_CERT_ID
, (°))

	)

739 
	#sk_ESS_CERT_ID_num
(
°
Ë
	`SKM_sk_num
(
ESS_CERT_ID
, (°))

	)

740 
	#sk_ESS_CERT_ID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ESS_CERT_ID
, (°), (i))

	)

741 
	#sk_ESS_CERT_ID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ESS_CERT_ID
, (°), (i), (vÆ))

	)

742 
	#sk_ESS_CERT_ID_zîo
(
°
Ë
	`SKM_sk_zîo
(
ESS_CERT_ID
, (°))

	)

743 
	#sk_ESS_CERT_ID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ESS_CERT_ID
, (°), (vÆ))

	)

744 
	#sk_ESS_CERT_ID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ESS_CERT_ID
, (°), (vÆ))

	)

745 
	#sk_ESS_CERT_ID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ESS_CERT_ID
, (°), (vÆ))

	)

746 
	#sk_ESS_CERT_ID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ESS_CERT_ID
, (°), (vÆ))

	)

747 
	#sk_ESS_CERT_ID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ESS_CERT_ID
, (°), (i))

	)

748 
	#sk_ESS_CERT_ID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ESS_CERT_ID
, (°), (±r))

	)

749 
	#sk_ESS_CERT_ID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ESS_CERT_ID
, (°), (vÆ), (i))

	)

750 
	#sk_ESS_CERT_ID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ESS_CERT_ID
, (°), (cmp))

	)

751 
	#sk_ESS_CERT_ID_dup
(
°
Ë
	`SKM_sk_dup
(
ESS_CERT_ID
, st)

	)

752 
	#sk_ESS_CERT_ID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ESS_CERT_ID
, (°), (‰ì_func))

	)

753 
	#sk_ESS_CERT_ID_shi·
(
°
Ë
	`SKM_sk_shi·
(
ESS_CERT_ID
, (°))

	)

754 
	#sk_ESS_CERT_ID_p›
(
°
Ë
	`SKM_sk_p›
(
ESS_CERT_ID
, (°))

	)

755 
	#sk_ESS_CERT_ID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ESS_CERT_ID
, (°))

	)

756 
	#sk_ESS_CERT_ID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ESS_CERT_ID
, (°))

	)

758 
	#sk_EVP_MD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_MD
, (cmp))

	)

759 
	#sk_EVP_MD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_MD
)

	)

760 
	#sk_EVP_MD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_MD
, (°))

	)

761 
	#sk_EVP_MD_num
(
°
Ë
	`SKM_sk_num
(
EVP_MD
, (°))

	)

762 
	#sk_EVP_MD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_MD
, (°), (i))

	)

763 
	#sk_EVP_MD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_MD
, (°), (i), (vÆ))

	)

764 
	#sk_EVP_MD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_MD
, (°))

	)

765 
	#sk_EVP_MD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_MD
, (°), (vÆ))

	)

766 
	#sk_EVP_MD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_MD
, (°), (vÆ))

	)

767 
	#sk_EVP_MD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_MD
, (°), (vÆ))

	)

768 
	#sk_EVP_MD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_MD
, (°), (vÆ))

	)

769 
	#sk_EVP_MD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_MD
, (°), (i))

	)

770 
	#sk_EVP_MD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_MD
, (°), (±r))

	)

771 
	#sk_EVP_MD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_MD
, (°), (vÆ), (i))

	)

772 
	#sk_EVP_MD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_MD
, (°), (cmp))

	)

773 
	#sk_EVP_MD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_MD
, st)

	)

774 
	#sk_EVP_MD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_MD
, (°), (‰ì_func))

	)

775 
	#sk_EVP_MD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_MD
, (°))

	)

776 
	#sk_EVP_MD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_MD
, (°))

	)

777 
	#sk_EVP_MD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_MD
, (°))

	)

778 
	#sk_EVP_MD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_MD
, (°))

	)

780 
	#sk_EVP_PBE_CTL_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PBE_CTL
, (cmp))

	)

781 
	#sk_EVP_PBE_CTL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PBE_CTL
)

	)

782 
	#sk_EVP_PBE_CTL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PBE_CTL
, (°))

	)

783 
	#sk_EVP_PBE_CTL_num
(
°
Ë
	`SKM_sk_num
(
EVP_PBE_CTL
, (°))

	)

784 
	#sk_EVP_PBE_CTL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PBE_CTL
, (°), (i))

	)

785 
	#sk_EVP_PBE_CTL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PBE_CTL
, (°), (i), (vÆ))

	)

786 
	#sk_EVP_PBE_CTL_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PBE_CTL
, (°))

	)

787 
	#sk_EVP_PBE_CTL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PBE_CTL
, (°), (vÆ))

	)

788 
	#sk_EVP_PBE_CTL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PBE_CTL
, (°), (vÆ))

	)

789 
	#sk_EVP_PBE_CTL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PBE_CTL
, (°), (vÆ))

	)

790 
	#sk_EVP_PBE_CTL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PBE_CTL
, (°), (vÆ))

	)

791 
	#sk_EVP_PBE_CTL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PBE_CTL
, (°), (i))

	)

792 
	#sk_EVP_PBE_CTL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PBE_CTL
, (°), (±r))

	)

793 
	#sk_EVP_PBE_CTL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PBE_CTL
, (°), (vÆ), (i))

	)

794 
	#sk_EVP_PBE_CTL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PBE_CTL
, (°), (cmp))

	)

795 
	#sk_EVP_PBE_CTL_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PBE_CTL
, st)

	)

796 
	#sk_EVP_PBE_CTL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PBE_CTL
, (°), (‰ì_func))

	)

797 
	#sk_EVP_PBE_CTL_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PBE_CTL
, (°))

	)

798 
	#sk_EVP_PBE_CTL_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PBE_CTL
, (°))

	)

799 
	#sk_EVP_PBE_CTL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PBE_CTL
, (°))

	)

800 
	#sk_EVP_PBE_CTL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PBE_CTL
, (°))

	)

802 
	#sk_EVP_PKEY_ASN1_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PKEY_ASN1_METHOD
, (cmp))

	)

803 
	#sk_EVP_PKEY_ASN1_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PKEY_ASN1_METHOD
)

	)

804 
	#sk_EVP_PKEY_ASN1_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

805 
	#sk_EVP_PKEY_ASN1_METHOD_num
(
°
Ë
	`SKM_sk_num
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

806 
	#sk_EVP_PKEY_ASN1_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PKEY_ASN1_METHOD
, (°), (i))

	)

807 
	#sk_EVP_PKEY_ASN1_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PKEY_ASN1_METHOD
, (°), (i), (vÆ))

	)

808 
	#sk_EVP_PKEY_ASN1_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

809 
	#sk_EVP_PKEY_ASN1_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

810 
	#sk_EVP_PKEY_ASN1_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

811 
	#sk_EVP_PKEY_ASN1_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

812 
	#sk_EVP_PKEY_ASN1_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

813 
	#sk_EVP_PKEY_ASN1_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PKEY_ASN1_METHOD
, (°), (i))

	)

814 
	#sk_EVP_PKEY_ASN1_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PKEY_ASN1_METHOD
, (°), (±r))

	)

815 
	#sk_EVP_PKEY_ASN1_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ), (i))

	)

816 
	#sk_EVP_PKEY_ASN1_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PKEY_ASN1_METHOD
, (°), (cmp))

	)

817 
	#sk_EVP_PKEY_ASN1_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PKEY_ASN1_METHOD
, st)

	)

818 
	#sk_EVP_PKEY_ASN1_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PKEY_ASN1_METHOD
, (°), (‰ì_func))

	)

819 
	#sk_EVP_PKEY_ASN1_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

820 
	#sk_EVP_PKEY_ASN1_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

821 
	#sk_EVP_PKEY_ASN1_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

822 
	#sk_EVP_PKEY_ASN1_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

824 
	#sk_EVP_PKEY_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PKEY_METHOD
, (cmp))

	)

825 
	#sk_EVP_PKEY_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PKEY_METHOD
)

	)

826 
	#sk_EVP_PKEY_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PKEY_METHOD
, (°))

	)

827 
	#sk_EVP_PKEY_METHOD_num
(
°
Ë
	`SKM_sk_num
(
EVP_PKEY_METHOD
, (°))

	)

828 
	#sk_EVP_PKEY_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PKEY_METHOD
, (°), (i))

	)

829 
	#sk_EVP_PKEY_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PKEY_METHOD
, (°), (i), (vÆ))

	)

830 
	#sk_EVP_PKEY_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PKEY_METHOD
, (°))

	)

831 
	#sk_EVP_PKEY_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

832 
	#sk_EVP_PKEY_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

833 
	#sk_EVP_PKEY_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

834 
	#sk_EVP_PKEY_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

835 
	#sk_EVP_PKEY_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PKEY_METHOD
, (°), (i))

	)

836 
	#sk_EVP_PKEY_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PKEY_METHOD
, (°), (±r))

	)

837 
	#sk_EVP_PKEY_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PKEY_METHOD
, (°), (vÆ), (i))

	)

838 
	#sk_EVP_PKEY_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PKEY_METHOD
, (°), (cmp))

	)

839 
	#sk_EVP_PKEY_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PKEY_METHOD
, st)

	)

840 
	#sk_EVP_PKEY_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PKEY_METHOD
, (°), (‰ì_func))

	)

841 
	#sk_EVP_PKEY_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PKEY_METHOD
, (°))

	)

842 
	#sk_EVP_PKEY_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PKEY_METHOD
, (°))

	)

843 
	#sk_EVP_PKEY_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PKEY_METHOD
, (°))

	)

844 
	#sk_EVP_PKEY_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PKEY_METHOD
, (°))

	)

846 
	#sk_GENERAL_NAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_NAME
, (cmp))

	)

847 
	#sk_GENERAL_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAME
)

	)

848 
	#sk_GENERAL_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAME
, (°))

	)

849 
	#sk_GENERAL_NAME_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAME
, (°))

	)

850 
	#sk_GENERAL_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAME
, (°), (i))

	)

851 
	#sk_GENERAL_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAME
, (°), (i), (vÆ))

	)

852 
	#sk_GENERAL_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAME
, (°))

	)

853 
	#sk_GENERAL_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAME
, (°), (vÆ))

	)

854 
	#sk_GENERAL_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAME
, (°), (vÆ))

	)

855 
	#sk_GENERAL_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAME
, (°), (vÆ))

	)

856 
	#sk_GENERAL_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAME
, (°), (vÆ))

	)

857 
	#sk_GENERAL_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAME
, (°), (i))

	)

858 
	#sk_GENERAL_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAME
, (°), (±r))

	)

859 
	#sk_GENERAL_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAME
, (°), (vÆ), (i))

	)

860 
	#sk_GENERAL_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAME
, (°), (cmp))

	)

861 
	#sk_GENERAL_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAME
, st)

	)

862 
	#sk_GENERAL_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAME
, (°), (‰ì_func))

	)

863 
	#sk_GENERAL_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAME
, (°))

	)

864 
	#sk_GENERAL_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAME
, (°))

	)

865 
	#sk_GENERAL_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAME
, (°))

	)

866 
	#sk_GENERAL_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAME
, (°))

	)

868 
	#sk_GENERAL_NAMES_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_NAMES
, (cmp))

	)

869 
	#sk_GENERAL_NAMES_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAMES
)

	)

870 
	#sk_GENERAL_NAMES_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAMES
, (°))

	)

871 
	#sk_GENERAL_NAMES_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAMES
, (°))

	)

872 
	#sk_GENERAL_NAMES_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAMES
, (°), (i))

	)

873 
	#sk_GENERAL_NAMES_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAMES
, (°), (i), (vÆ))

	)

874 
	#sk_GENERAL_NAMES_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAMES
, (°))

	)

875 
	#sk_GENERAL_NAMES_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAMES
, (°), (vÆ))

	)

876 
	#sk_GENERAL_NAMES_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAMES
, (°), (vÆ))

	)

877 
	#sk_GENERAL_NAMES_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAMES
, (°), (vÆ))

	)

878 
	#sk_GENERAL_NAMES_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAMES
, (°), (vÆ))

	)

879 
	#sk_GENERAL_NAMES_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAMES
, (°), (i))

	)

880 
	#sk_GENERAL_NAMES_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAMES
, (°), (±r))

	)

881 
	#sk_GENERAL_NAMES_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAMES
, (°), (vÆ), (i))

	)

882 
	#sk_GENERAL_NAMES_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAMES
, (°), (cmp))

	)

883 
	#sk_GENERAL_NAMES_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAMES
, st)

	)

884 
	#sk_GENERAL_NAMES_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAMES
, (°), (‰ì_func))

	)

885 
	#sk_GENERAL_NAMES_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAMES
, (°))

	)

886 
	#sk_GENERAL_NAMES_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAMES
, (°))

	)

887 
	#sk_GENERAL_NAMES_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAMES
, (°))

	)

888 
	#sk_GENERAL_NAMES_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAMES
, (°))

	)

890 
	#sk_GENERAL_SUBTREE_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_SUBTREE
, (cmp))

	)

891 
	#sk_GENERAL_SUBTREE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_SUBTREE
)

	)

892 
	#sk_GENERAL_SUBTREE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_SUBTREE
, (°))

	)

893 
	#sk_GENERAL_SUBTREE_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_SUBTREE
, (°))

	)

894 
	#sk_GENERAL_SUBTREE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_SUBTREE
, (°), (i))

	)

895 
	#sk_GENERAL_SUBTREE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_SUBTREE
, (°), (i), (vÆ))

	)

896 
	#sk_GENERAL_SUBTREE_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_SUBTREE
, (°))

	)

897 
	#sk_GENERAL_SUBTREE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

898 
	#sk_GENERAL_SUBTREE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

899 
	#sk_GENERAL_SUBTREE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

900 
	#sk_GENERAL_SUBTREE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

901 
	#sk_GENERAL_SUBTREE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_SUBTREE
, (°), (i))

	)

902 
	#sk_GENERAL_SUBTREE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_SUBTREE
, (°), (±r))

	)

903 
	#sk_GENERAL_SUBTREE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_SUBTREE
, (°), (vÆ), (i))

	)

904 
	#sk_GENERAL_SUBTREE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_SUBTREE
, (°), (cmp))

	)

905 
	#sk_GENERAL_SUBTREE_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_SUBTREE
, st)

	)

906 
	#sk_GENERAL_SUBTREE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_SUBTREE
, (°), (‰ì_func))

	)

907 
	#sk_GENERAL_SUBTREE_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_SUBTREE
, (°))

	)

908 
	#sk_GENERAL_SUBTREE_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_SUBTREE
, (°))

	)

909 
	#sk_GENERAL_SUBTREE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_SUBTREE
, (°))

	)

910 
	#sk_GENERAL_SUBTREE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_SUBTREE
, (°))

	)

912 
	#sk_IPAddªssFamûy_√w
(
cmp
Ë
	`SKM_sk_√w
(
IPAddªssFamûy
, (cmp))

	)

913 
	#sk_IPAddªssFamûy_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssFamûy
)

	)

914 
	#sk_IPAddªssFamûy_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssFamûy
, (°))

	)

915 
	#sk_IPAddªssFamûy_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssFamûy
, (°))

	)

916 
	#sk_IPAddªssFamûy_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssFamûy
, (°), (i))

	)

917 
	#sk_IPAddªssFamûy_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssFamûy
, (°), (i), (vÆ))

	)

918 
	#sk_IPAddªssFamûy_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssFamûy
, (°))

	)

919 
	#sk_IPAddªssFamûy_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssFamûy
, (°), (vÆ))

	)

920 
	#sk_IPAddªssFamûy_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssFamûy
, (°), (vÆ))

	)

921 
	#sk_IPAddªssFamûy_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssFamûy
, (°), (vÆ))

	)

922 
	#sk_IPAddªssFamûy_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssFamûy
, (°), (vÆ))

	)

923 
	#sk_IPAddªssFamûy_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssFamûy
, (°), (i))

	)

924 
	#sk_IPAddªssFamûy_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssFamûy
, (°), (±r))

	)

925 
	#sk_IPAddªssFamûy_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssFamûy
, (°), (vÆ), (i))

	)

926 
	#sk_IPAddªssFamûy_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssFamûy
, (°), (cmp))

	)

927 
	#sk_IPAddªssFamûy_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssFamûy
, st)

	)

928 
	#sk_IPAddªssFamûy_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssFamûy
, (°), (‰ì_func))

	)

929 
	#sk_IPAddªssFamûy_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssFamûy
, (°))

	)

930 
	#sk_IPAddªssFamûy_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssFamûy
, (°))

	)

931 
	#sk_IPAddªssFamûy_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssFamûy
, (°))

	)

932 
	#sk_IPAddªssFamûy_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssFamûy
, (°))

	)

934 
	#sk_IPAddªssOrR™ge_√w
(
cmp
Ë
	`SKM_sk_√w
(
IPAddªssOrR™ge
, (cmp))

	)

935 
	#sk_IPAddªssOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssOrR™ge
)

	)

936 
	#sk_IPAddªssOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssOrR™ge
, (°))

	)

937 
	#sk_IPAddªssOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssOrR™ge
, (°))

	)

938 
	#sk_IPAddªssOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssOrR™ge
, (°), (i))

	)

939 
	#sk_IPAddªssOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssOrR™ge
, (°), (i), (vÆ))

	)

940 
	#sk_IPAddªssOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssOrR™ge
, (°))

	)

941 
	#sk_IPAddªssOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

942 
	#sk_IPAddªssOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

943 
	#sk_IPAddªssOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

944 
	#sk_IPAddªssOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

945 
	#sk_IPAddªssOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssOrR™ge
, (°), (i))

	)

946 
	#sk_IPAddªssOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssOrR™ge
, (°), (±r))

	)

947 
	#sk_IPAddªssOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssOrR™ge
, (°), (vÆ), (i))

	)

948 
	#sk_IPAddªssOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssOrR™ge
, (°), (cmp))

	)

949 
	#sk_IPAddªssOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssOrR™ge
, st)

	)

950 
	#sk_IPAddªssOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssOrR™ge
, (°), (‰ì_func))

	)

951 
	#sk_IPAddªssOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssOrR™ge
, (°))

	)

952 
	#sk_IPAddªssOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssOrR™ge
, (°))

	)

953 
	#sk_IPAddªssOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssOrR™ge
, (°))

	)

954 
	#sk_IPAddªssOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssOrR™ge
, (°))

	)

956 
	#sk_KRB5_APREQBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_APREQBODY
, (cmp))

	)

957 
	#sk_KRB5_APREQBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_APREQBODY
)

	)

958 
	#sk_KRB5_APREQBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_APREQBODY
, (°))

	)

959 
	#sk_KRB5_APREQBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_APREQBODY
, (°))

	)

960 
	#sk_KRB5_APREQBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_APREQBODY
, (°), (i))

	)

961 
	#sk_KRB5_APREQBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_APREQBODY
, (°), (i), (vÆ))

	)

962 
	#sk_KRB5_APREQBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_APREQBODY
, (°))

	)

963 
	#sk_KRB5_APREQBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_APREQBODY
, (°), (vÆ))

	)

964 
	#sk_KRB5_APREQBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_APREQBODY
, (°), (vÆ))

	)

965 
	#sk_KRB5_APREQBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_APREQBODY
, (°), (vÆ))

	)

966 
	#sk_KRB5_APREQBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_APREQBODY
, (°), (vÆ))

	)

967 
	#sk_KRB5_APREQBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_APREQBODY
, (°), (i))

	)

968 
	#sk_KRB5_APREQBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_APREQBODY
, (°), (±r))

	)

969 
	#sk_KRB5_APREQBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_APREQBODY
, (°), (vÆ), (i))

	)

970 
	#sk_KRB5_APREQBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_APREQBODY
, (°), (cmp))

	)

971 
	#sk_KRB5_APREQBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_APREQBODY
, st)

	)

972 
	#sk_KRB5_APREQBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_APREQBODY
, (°), (‰ì_func))

	)

973 
	#sk_KRB5_APREQBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_APREQBODY
, (°))

	)

974 
	#sk_KRB5_APREQBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_APREQBODY
, (°))

	)

975 
	#sk_KRB5_APREQBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_APREQBODY
, (°))

	)

976 
	#sk_KRB5_APREQBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_APREQBODY
, (°))

	)

978 
	#sk_KRB5_AUTHDATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_AUTHDATA
, (cmp))

	)

979 
	#sk_KRB5_AUTHDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHDATA
)

	)

980 
	#sk_KRB5_AUTHDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHDATA
, (°))

	)

981 
	#sk_KRB5_AUTHDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHDATA
, (°))

	)

982 
	#sk_KRB5_AUTHDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHDATA
, (°), (i))

	)

983 
	#sk_KRB5_AUTHDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHDATA
, (°), (i), (vÆ))

	)

984 
	#sk_KRB5_AUTHDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHDATA
, (°))

	)

985 
	#sk_KRB5_AUTHDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

986 
	#sk_KRB5_AUTHDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

987 
	#sk_KRB5_AUTHDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

988 
	#sk_KRB5_AUTHDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

989 
	#sk_KRB5_AUTHDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHDATA
, (°), (i))

	)

990 
	#sk_KRB5_AUTHDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHDATA
, (°), (±r))

	)

991 
	#sk_KRB5_AUTHDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHDATA
, (°), (vÆ), (i))

	)

992 
	#sk_KRB5_AUTHDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHDATA
, (°), (cmp))

	)

993 
	#sk_KRB5_AUTHDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHDATA
, st)

	)

994 
	#sk_KRB5_AUTHDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHDATA
, (°), (‰ì_func))

	)

995 
	#sk_KRB5_AUTHDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHDATA
, (°))

	)

996 
	#sk_KRB5_AUTHDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHDATA
, (°))

	)

997 
	#sk_KRB5_AUTHDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHDATA
, (°))

	)

998 
	#sk_KRB5_AUTHDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHDATA
, (°))

	)

1000 
	#sk_KRB5_AUTHENTBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_AUTHENTBODY
, (cmp))

	)

1001 
	#sk_KRB5_AUTHENTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHENTBODY
)

	)

1002 
	#sk_KRB5_AUTHENTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHENTBODY
, (°))

	)

1003 
	#sk_KRB5_AUTHENTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHENTBODY
, (°))

	)

1004 
	#sk_KRB5_AUTHENTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHENTBODY
, (°), (i))

	)

1005 
	#sk_KRB5_AUTHENTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHENTBODY
, (°), (i), (vÆ))

	)

1006 
	#sk_KRB5_AUTHENTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHENTBODY
, (°))

	)

1007 
	#sk_KRB5_AUTHENTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1008 
	#sk_KRB5_AUTHENTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1009 
	#sk_KRB5_AUTHENTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1010 
	#sk_KRB5_AUTHENTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1011 
	#sk_KRB5_AUTHENTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHENTBODY
, (°), (i))

	)

1012 
	#sk_KRB5_AUTHENTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHENTBODY
, (°), (±r))

	)

1013 
	#sk_KRB5_AUTHENTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHENTBODY
, (°), (vÆ), (i))

	)

1014 
	#sk_KRB5_AUTHENTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHENTBODY
, (°), (cmp))

	)

1015 
	#sk_KRB5_AUTHENTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHENTBODY
, st)

	)

1016 
	#sk_KRB5_AUTHENTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHENTBODY
, (°), (‰ì_func))

	)

1017 
	#sk_KRB5_AUTHENTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHENTBODY
, (°))

	)

1018 
	#sk_KRB5_AUTHENTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHENTBODY
, (°))

	)

1019 
	#sk_KRB5_AUTHENTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHENTBODY
, (°))

	)

1020 
	#sk_KRB5_AUTHENTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHENTBODY
, (°))

	)

1022 
	#sk_KRB5_CHECKSUM_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_CHECKSUM
, (cmp))

	)

1023 
	#sk_KRB5_CHECKSUM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_CHECKSUM
)

	)

1024 
	#sk_KRB5_CHECKSUM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_CHECKSUM
, (°))

	)

1025 
	#sk_KRB5_CHECKSUM_num
(
°
Ë
	`SKM_sk_num
(
KRB5_CHECKSUM
, (°))

	)

1026 
	#sk_KRB5_CHECKSUM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_CHECKSUM
, (°), (i))

	)

1027 
	#sk_KRB5_CHECKSUM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_CHECKSUM
, (°), (i), (vÆ))

	)

1028 
	#sk_KRB5_CHECKSUM_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_CHECKSUM
, (°))

	)

1029 
	#sk_KRB5_CHECKSUM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1030 
	#sk_KRB5_CHECKSUM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1031 
	#sk_KRB5_CHECKSUM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1032 
	#sk_KRB5_CHECKSUM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1033 
	#sk_KRB5_CHECKSUM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_CHECKSUM
, (°), (i))

	)

1034 
	#sk_KRB5_CHECKSUM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_CHECKSUM
, (°), (±r))

	)

1035 
	#sk_KRB5_CHECKSUM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_CHECKSUM
, (°), (vÆ), (i))

	)

1036 
	#sk_KRB5_CHECKSUM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_CHECKSUM
, (°), (cmp))

	)

1037 
	#sk_KRB5_CHECKSUM_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_CHECKSUM
, st)

	)

1038 
	#sk_KRB5_CHECKSUM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_CHECKSUM
, (°), (‰ì_func))

	)

1039 
	#sk_KRB5_CHECKSUM_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_CHECKSUM
, (°))

	)

1040 
	#sk_KRB5_CHECKSUM_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_CHECKSUM
, (°))

	)

1041 
	#sk_KRB5_CHECKSUM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_CHECKSUM
, (°))

	)

1042 
	#sk_KRB5_CHECKSUM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_CHECKSUM
, (°))

	)

1044 
	#sk_KRB5_ENCDATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_ENCDATA
, (cmp))

	)

1045 
	#sk_KRB5_ENCDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCDATA
)

	)

1046 
	#sk_KRB5_ENCDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCDATA
, (°))

	)

1047 
	#sk_KRB5_ENCDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCDATA
, (°))

	)

1048 
	#sk_KRB5_ENCDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCDATA
, (°), (i))

	)

1049 
	#sk_KRB5_ENCDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCDATA
, (°), (i), (vÆ))

	)

1050 
	#sk_KRB5_ENCDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCDATA
, (°))

	)

1051 
	#sk_KRB5_ENCDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1052 
	#sk_KRB5_ENCDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1053 
	#sk_KRB5_ENCDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1054 
	#sk_KRB5_ENCDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1055 
	#sk_KRB5_ENCDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCDATA
, (°), (i))

	)

1056 
	#sk_KRB5_ENCDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCDATA
, (°), (±r))

	)

1057 
	#sk_KRB5_ENCDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCDATA
, (°), (vÆ), (i))

	)

1058 
	#sk_KRB5_ENCDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCDATA
, (°), (cmp))

	)

1059 
	#sk_KRB5_ENCDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCDATA
, st)

	)

1060 
	#sk_KRB5_ENCDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCDATA
, (°), (‰ì_func))

	)

1061 
	#sk_KRB5_ENCDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCDATA
, (°))

	)

1062 
	#sk_KRB5_ENCDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCDATA
, (°))

	)

1063 
	#sk_KRB5_ENCDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCDATA
, (°))

	)

1064 
	#sk_KRB5_ENCDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCDATA
, (°))

	)

1066 
	#sk_KRB5_ENCKEY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_ENCKEY
, (cmp))

	)

1067 
	#sk_KRB5_ENCKEY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCKEY
)

	)

1068 
	#sk_KRB5_ENCKEY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCKEY
, (°))

	)

1069 
	#sk_KRB5_ENCKEY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCKEY
, (°))

	)

1070 
	#sk_KRB5_ENCKEY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCKEY
, (°), (i))

	)

1071 
	#sk_KRB5_ENCKEY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCKEY
, (°), (i), (vÆ))

	)

1072 
	#sk_KRB5_ENCKEY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCKEY
, (°))

	)

1073 
	#sk_KRB5_ENCKEY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1074 
	#sk_KRB5_ENCKEY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1075 
	#sk_KRB5_ENCKEY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1076 
	#sk_KRB5_ENCKEY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1077 
	#sk_KRB5_ENCKEY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCKEY
, (°), (i))

	)

1078 
	#sk_KRB5_ENCKEY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCKEY
, (°), (±r))

	)

1079 
	#sk_KRB5_ENCKEY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCKEY
, (°), (vÆ), (i))

	)

1080 
	#sk_KRB5_ENCKEY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCKEY
, (°), (cmp))

	)

1081 
	#sk_KRB5_ENCKEY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCKEY
, st)

	)

1082 
	#sk_KRB5_ENCKEY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCKEY
, (°), (‰ì_func))

	)

1083 
	#sk_KRB5_ENCKEY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCKEY
, (°))

	)

1084 
	#sk_KRB5_ENCKEY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCKEY
, (°))

	)

1085 
	#sk_KRB5_ENCKEY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCKEY
, (°))

	)

1086 
	#sk_KRB5_ENCKEY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCKEY
, (°))

	)

1088 
	#sk_KRB5_PRINCNAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_PRINCNAME
, (cmp))

	)

1089 
	#sk_KRB5_PRINCNAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_PRINCNAME
)

	)

1090 
	#sk_KRB5_PRINCNAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_PRINCNAME
, (°))

	)

1091 
	#sk_KRB5_PRINCNAME_num
(
°
Ë
	`SKM_sk_num
(
KRB5_PRINCNAME
, (°))

	)

1092 
	#sk_KRB5_PRINCNAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_PRINCNAME
, (°), (i))

	)

1093 
	#sk_KRB5_PRINCNAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_PRINCNAME
, (°), (i), (vÆ))

	)

1094 
	#sk_KRB5_PRINCNAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_PRINCNAME
, (°))

	)

1095 
	#sk_KRB5_PRINCNAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1096 
	#sk_KRB5_PRINCNAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1097 
	#sk_KRB5_PRINCNAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1098 
	#sk_KRB5_PRINCNAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1099 
	#sk_KRB5_PRINCNAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_PRINCNAME
, (°), (i))

	)

1100 
	#sk_KRB5_PRINCNAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_PRINCNAME
, (°), (±r))

	)

1101 
	#sk_KRB5_PRINCNAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_PRINCNAME
, (°), (vÆ), (i))

	)

1102 
	#sk_KRB5_PRINCNAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_PRINCNAME
, (°), (cmp))

	)

1103 
	#sk_KRB5_PRINCNAME_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_PRINCNAME
, st)

	)

1104 
	#sk_KRB5_PRINCNAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_PRINCNAME
, (°), (‰ì_func))

	)

1105 
	#sk_KRB5_PRINCNAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_PRINCNAME
, (°))

	)

1106 
	#sk_KRB5_PRINCNAME_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_PRINCNAME
, (°))

	)

1107 
	#sk_KRB5_PRINCNAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_PRINCNAME
, (°))

	)

1108 
	#sk_KRB5_PRINCNAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_PRINCNAME
, (°))

	)

1110 
	#sk_KRB5_TKTBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_TKTBODY
, (cmp))

	)

1111 
	#sk_KRB5_TKTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_TKTBODY
)

	)

1112 
	#sk_KRB5_TKTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_TKTBODY
, (°))

	)

1113 
	#sk_KRB5_TKTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_TKTBODY
, (°))

	)

1114 
	#sk_KRB5_TKTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_TKTBODY
, (°), (i))

	)

1115 
	#sk_KRB5_TKTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_TKTBODY
, (°), (i), (vÆ))

	)

1116 
	#sk_KRB5_TKTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_TKTBODY
, (°))

	)

1117 
	#sk_KRB5_TKTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1118 
	#sk_KRB5_TKTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1119 
	#sk_KRB5_TKTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1120 
	#sk_KRB5_TKTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1121 
	#sk_KRB5_TKTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_TKTBODY
, (°), (i))

	)

1122 
	#sk_KRB5_TKTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_TKTBODY
, (°), (±r))

	)

1123 
	#sk_KRB5_TKTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_TKTBODY
, (°), (vÆ), (i))

	)

1124 
	#sk_KRB5_TKTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_TKTBODY
, (°), (cmp))

	)

1125 
	#sk_KRB5_TKTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_TKTBODY
, st)

	)

1126 
	#sk_KRB5_TKTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_TKTBODY
, (°), (‰ì_func))

	)

1127 
	#sk_KRB5_TKTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_TKTBODY
, (°))

	)

1128 
	#sk_KRB5_TKTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_TKTBODY
, (°))

	)

1129 
	#sk_KRB5_TKTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_TKTBODY
, (°))

	)

1130 
	#sk_KRB5_TKTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_TKTBODY
, (°))

	)

1132 
	#sk_MEM_OBJECT_DATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
MEM_OBJECT_DATA
, (cmp))

	)

1133 
	#sk_MEM_OBJECT_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MEM_OBJECT_DATA
)

	)

1134 
	#sk_MEM_OBJECT_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MEM_OBJECT_DATA
, (°))

	)

1135 
	#sk_MEM_OBJECT_DATA_num
(
°
Ë
	`SKM_sk_num
(
MEM_OBJECT_DATA
, (°))

	)

1136 
	#sk_MEM_OBJECT_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MEM_OBJECT_DATA
, (°), (i))

	)

1137 
	#sk_MEM_OBJECT_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MEM_OBJECT_DATA
, (°), (i), (vÆ))

	)

1138 
	#sk_MEM_OBJECT_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
MEM_OBJECT_DATA
, (°))

	)

1139 
	#sk_MEM_OBJECT_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1140 
	#sk_MEM_OBJECT_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1141 
	#sk_MEM_OBJECT_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1142 
	#sk_MEM_OBJECT_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1143 
	#sk_MEM_OBJECT_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MEM_OBJECT_DATA
, (°), (i))

	)

1144 
	#sk_MEM_OBJECT_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MEM_OBJECT_DATA
, (°), (±r))

	)

1145 
	#sk_MEM_OBJECT_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MEM_OBJECT_DATA
, (°), (vÆ), (i))

	)

1146 
	#sk_MEM_OBJECT_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MEM_OBJECT_DATA
, (°), (cmp))

	)

1147 
	#sk_MEM_OBJECT_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
MEM_OBJECT_DATA
, st)

	)

1148 
	#sk_MEM_OBJECT_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MEM_OBJECT_DATA
, (°), (‰ì_func))

	)

1149 
	#sk_MEM_OBJECT_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
MEM_OBJECT_DATA
, (°))

	)

1150 
	#sk_MEM_OBJECT_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
MEM_OBJECT_DATA
, (°))

	)

1151 
	#sk_MEM_OBJECT_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MEM_OBJECT_DATA
, (°))

	)

1152 
	#sk_MEM_OBJECT_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MEM_OBJECT_DATA
, (°))

	)

1154 
	#sk_MIME_HEADER_√w
(
cmp
Ë
	`SKM_sk_√w
(
MIME_HEADER
, (cmp))

	)

1155 
	#sk_MIME_HEADER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_HEADER
)

	)

1156 
	#sk_MIME_HEADER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_HEADER
, (°))

	)

1157 
	#sk_MIME_HEADER_num
(
°
Ë
	`SKM_sk_num
(
MIME_HEADER
, (°))

	)

1158 
	#sk_MIME_HEADER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_HEADER
, (°), (i))

	)

1159 
	#sk_MIME_HEADER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_HEADER
, (°), (i), (vÆ))

	)

1160 
	#sk_MIME_HEADER_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_HEADER
, (°))

	)

1161 
	#sk_MIME_HEADER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_HEADER
, (°), (vÆ))

	)

1162 
	#sk_MIME_HEADER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_HEADER
, (°), (vÆ))

	)

1163 
	#sk_MIME_HEADER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_HEADER
, (°), (vÆ))

	)

1164 
	#sk_MIME_HEADER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_HEADER
, (°), (vÆ))

	)

1165 
	#sk_MIME_HEADER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_HEADER
, (°), (i))

	)

1166 
	#sk_MIME_HEADER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_HEADER
, (°), (±r))

	)

1167 
	#sk_MIME_HEADER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_HEADER
, (°), (vÆ), (i))

	)

1168 
	#sk_MIME_HEADER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_HEADER
, (°), (cmp))

	)

1169 
	#sk_MIME_HEADER_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_HEADER
, st)

	)

1170 
	#sk_MIME_HEADER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_HEADER
, (°), (‰ì_func))

	)

1171 
	#sk_MIME_HEADER_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_HEADER
, (°))

	)

1172 
	#sk_MIME_HEADER_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_HEADER
, (°))

	)

1173 
	#sk_MIME_HEADER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_HEADER
, (°))

	)

1174 
	#sk_MIME_HEADER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_HEADER
, (°))

	)

1176 
	#sk_MIME_PARAM_√w
(
cmp
Ë
	`SKM_sk_√w
(
MIME_PARAM
, (cmp))

	)

1177 
	#sk_MIME_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_PARAM
)

	)

1178 
	#sk_MIME_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_PARAM
, (°))

	)

1179 
	#sk_MIME_PARAM_num
(
°
Ë
	`SKM_sk_num
(
MIME_PARAM
, (°))

	)

1180 
	#sk_MIME_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_PARAM
, (°), (i))

	)

1181 
	#sk_MIME_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_PARAM
, (°), (i), (vÆ))

	)

1182 
	#sk_MIME_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_PARAM
, (°))

	)

1183 
	#sk_MIME_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_PARAM
, (°), (vÆ))

	)

1184 
	#sk_MIME_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_PARAM
, (°), (vÆ))

	)

1185 
	#sk_MIME_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_PARAM
, (°), (vÆ))

	)

1186 
	#sk_MIME_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_PARAM
, (°), (vÆ))

	)

1187 
	#sk_MIME_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_PARAM
, (°), (i))

	)

1188 
	#sk_MIME_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_PARAM
, (°), (±r))

	)

1189 
	#sk_MIME_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_PARAM
, (°), (vÆ), (i))

	)

1190 
	#sk_MIME_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_PARAM
, (°), (cmp))

	)

1191 
	#sk_MIME_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_PARAM
, st)

	)

1192 
	#sk_MIME_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_PARAM
, (°), (‰ì_func))

	)

1193 
	#sk_MIME_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_PARAM
, (°))

	)

1194 
	#sk_MIME_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_PARAM
, (°))

	)

1195 
	#sk_MIME_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_PARAM
, (°))

	)

1196 
	#sk_MIME_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_PARAM
, (°))

	)

1198 
	#sk_NAME_FUNCS_√w
(
cmp
Ë
	`SKM_sk_√w
(
NAME_FUNCS
, (cmp))

	)

1199 
	#sk_NAME_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
NAME_FUNCS
)

	)

1200 
	#sk_NAME_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
NAME_FUNCS
, (°))

	)

1201 
	#sk_NAME_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
NAME_FUNCS
, (°))

	)

1202 
	#sk_NAME_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
NAME_FUNCS
, (°), (i))

	)

1203 
	#sk_NAME_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
NAME_FUNCS
, (°), (i), (vÆ))

	)

1204 
	#sk_NAME_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
NAME_FUNCS
, (°))

	)

1205 
	#sk_NAME_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
NAME_FUNCS
, (°), (vÆ))

	)

1206 
	#sk_NAME_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
NAME_FUNCS
, (°), (vÆ))

	)

1207 
	#sk_NAME_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
NAME_FUNCS
, (°), (vÆ))

	)

1208 
	#sk_NAME_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
NAME_FUNCS
, (°), (vÆ))

	)

1209 
	#sk_NAME_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
NAME_FUNCS
, (°), (i))

	)

1210 
	#sk_NAME_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
NAME_FUNCS
, (°), (±r))

	)

1211 
	#sk_NAME_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
NAME_FUNCS
, (°), (vÆ), (i))

	)

1212 
	#sk_NAME_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
NAME_FUNCS
, (°), (cmp))

	)

1213 
	#sk_NAME_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
NAME_FUNCS
, st)

	)

1214 
	#sk_NAME_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
NAME_FUNCS
, (°), (‰ì_func))

	)

1215 
	#sk_NAME_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
NAME_FUNCS
, (°))

	)

1216 
	#sk_NAME_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
NAME_FUNCS
, (°))

	)

1217 
	#sk_NAME_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
NAME_FUNCS
, (°))

	)

1218 
	#sk_NAME_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
NAME_FUNCS
, (°))

	)

1220 
	#sk_OCSP_CERTID_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_CERTID
, (cmp))

	)

1221 
	#sk_OCSP_CERTID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_CERTID
)

	)

1222 
	#sk_OCSP_CERTID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_CERTID
, (°))

	)

1223 
	#sk_OCSP_CERTID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_CERTID
, (°))

	)

1224 
	#sk_OCSP_CERTID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_CERTID
, (°), (i))

	)

1225 
	#sk_OCSP_CERTID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_CERTID
, (°), (i), (vÆ))

	)

1226 
	#sk_OCSP_CERTID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_CERTID
, (°))

	)

1227 
	#sk_OCSP_CERTID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_CERTID
, (°), (vÆ))

	)

1228 
	#sk_OCSP_CERTID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_CERTID
, (°), (vÆ))

	)

1229 
	#sk_OCSP_CERTID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_CERTID
, (°), (vÆ))

	)

1230 
	#sk_OCSP_CERTID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_CERTID
, (°), (vÆ))

	)

1231 
	#sk_OCSP_CERTID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_CERTID
, (°), (i))

	)

1232 
	#sk_OCSP_CERTID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_CERTID
, (°), (±r))

	)

1233 
	#sk_OCSP_CERTID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_CERTID
, (°), (vÆ), (i))

	)

1234 
	#sk_OCSP_CERTID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_CERTID
, (°), (cmp))

	)

1235 
	#sk_OCSP_CERTID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_CERTID
, st)

	)

1236 
	#sk_OCSP_CERTID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_CERTID
, (°), (‰ì_func))

	)

1237 
	#sk_OCSP_CERTID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_CERTID
, (°))

	)

1238 
	#sk_OCSP_CERTID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_CERTID
, (°))

	)

1239 
	#sk_OCSP_CERTID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_CERTID
, (°))

	)

1240 
	#sk_OCSP_CERTID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_CERTID
, (°))

	)

1242 
	#sk_OCSP_ONEREQ_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_ONEREQ
, (cmp))

	)

1243 
	#sk_OCSP_ONEREQ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_ONEREQ
)

	)

1244 
	#sk_OCSP_ONEREQ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_ONEREQ
, (°))

	)

1245 
	#sk_OCSP_ONEREQ_num
(
°
Ë
	`SKM_sk_num
(
OCSP_ONEREQ
, (°))

	)

1246 
	#sk_OCSP_ONEREQ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_ONEREQ
, (°), (i))

	)

1247 
	#sk_OCSP_ONEREQ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_ONEREQ
, (°), (i), (vÆ))

	)

1248 
	#sk_OCSP_ONEREQ_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_ONEREQ
, (°))

	)

1249 
	#sk_OCSP_ONEREQ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1250 
	#sk_OCSP_ONEREQ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1251 
	#sk_OCSP_ONEREQ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1252 
	#sk_OCSP_ONEREQ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1253 
	#sk_OCSP_ONEREQ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_ONEREQ
, (°), (i))

	)

1254 
	#sk_OCSP_ONEREQ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_ONEREQ
, (°), (±r))

	)

1255 
	#sk_OCSP_ONEREQ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_ONEREQ
, (°), (vÆ), (i))

	)

1256 
	#sk_OCSP_ONEREQ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_ONEREQ
, (°), (cmp))

	)

1257 
	#sk_OCSP_ONEREQ_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_ONEREQ
, st)

	)

1258 
	#sk_OCSP_ONEREQ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_ONEREQ
, (°), (‰ì_func))

	)

1259 
	#sk_OCSP_ONEREQ_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_ONEREQ
, (°))

	)

1260 
	#sk_OCSP_ONEREQ_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_ONEREQ
, (°))

	)

1261 
	#sk_OCSP_ONEREQ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_ONEREQ
, (°))

	)

1262 
	#sk_OCSP_ONEREQ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_ONEREQ
, (°))

	)

1264 
	#sk_OCSP_RESPID_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_RESPID
, (cmp))

	)

1265 
	#sk_OCSP_RESPID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_RESPID
)

	)

1266 
	#sk_OCSP_RESPID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_RESPID
, (°))

	)

1267 
	#sk_OCSP_RESPID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_RESPID
, (°))

	)

1268 
	#sk_OCSP_RESPID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_RESPID
, (°), (i))

	)

1269 
	#sk_OCSP_RESPID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_RESPID
, (°), (i), (vÆ))

	)

1270 
	#sk_OCSP_RESPID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_RESPID
, (°))

	)

1271 
	#sk_OCSP_RESPID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_RESPID
, (°), (vÆ))

	)

1272 
	#sk_OCSP_RESPID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_RESPID
, (°), (vÆ))

	)

1273 
	#sk_OCSP_RESPID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_RESPID
, (°), (vÆ))

	)

1274 
	#sk_OCSP_RESPID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_RESPID
, (°), (vÆ))

	)

1275 
	#sk_OCSP_RESPID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_RESPID
, (°), (i))

	)

1276 
	#sk_OCSP_RESPID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_RESPID
, (°), (±r))

	)

1277 
	#sk_OCSP_RESPID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_RESPID
, (°), (vÆ), (i))

	)

1278 
	#sk_OCSP_RESPID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_RESPID
, (°), (cmp))

	)

1279 
	#sk_OCSP_RESPID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_RESPID
, st)

	)

1280 
	#sk_OCSP_RESPID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_RESPID
, (°), (‰ì_func))

	)

1281 
	#sk_OCSP_RESPID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_RESPID
, (°))

	)

1282 
	#sk_OCSP_RESPID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_RESPID
, (°))

	)

1283 
	#sk_OCSP_RESPID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_RESPID
, (°))

	)

1284 
	#sk_OCSP_RESPID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_RESPID
, (°))

	)

1286 
	#sk_OCSP_SINGLERESP_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_SINGLERESP
, (cmp))

	)

1287 
	#sk_OCSP_SINGLERESP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_SINGLERESP
)

	)

1288 
	#sk_OCSP_SINGLERESP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_SINGLERESP
, (°))

	)

1289 
	#sk_OCSP_SINGLERESP_num
(
°
Ë
	`SKM_sk_num
(
OCSP_SINGLERESP
, (°))

	)

1290 
	#sk_OCSP_SINGLERESP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_SINGLERESP
, (°), (i))

	)

1291 
	#sk_OCSP_SINGLERESP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_SINGLERESP
, (°), (i), (vÆ))

	)

1292 
	#sk_OCSP_SINGLERESP_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_SINGLERESP
, (°))

	)

1293 
	#sk_OCSP_SINGLERESP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1294 
	#sk_OCSP_SINGLERESP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1295 
	#sk_OCSP_SINGLERESP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1296 
	#sk_OCSP_SINGLERESP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1297 
	#sk_OCSP_SINGLERESP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_SINGLERESP
, (°), (i))

	)

1298 
	#sk_OCSP_SINGLERESP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_SINGLERESP
, (°), (±r))

	)

1299 
	#sk_OCSP_SINGLERESP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_SINGLERESP
, (°), (vÆ), (i))

	)

1300 
	#sk_OCSP_SINGLERESP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_SINGLERESP
, (°), (cmp))

	)

1301 
	#sk_OCSP_SINGLERESP_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_SINGLERESP
, st)

	)

1302 
	#sk_OCSP_SINGLERESP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_SINGLERESP
, (°), (‰ì_func))

	)

1303 
	#sk_OCSP_SINGLERESP_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_SINGLERESP
, (°))

	)

1304 
	#sk_OCSP_SINGLERESP_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_SINGLERESP
, (°))

	)

1305 
	#sk_OCSP_SINGLERESP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_SINGLERESP
, (°))

	)

1306 
	#sk_OCSP_SINGLERESP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_SINGLERESP
, (°))

	)

1308 
	#sk_PKCS12_SAFEBAG_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS12_SAFEBAG
, (cmp))

	)

1309 
	#sk_PKCS12_SAFEBAG_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS12_SAFEBAG
)

	)

1310 
	#sk_PKCS12_SAFEBAG_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS12_SAFEBAG
, (°))

	)

1311 
	#sk_PKCS12_SAFEBAG_num
(
°
Ë
	`SKM_sk_num
(
PKCS12_SAFEBAG
, (°))

	)

1312 
	#sk_PKCS12_SAFEBAG_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS12_SAFEBAG
, (°), (i))

	)

1313 
	#sk_PKCS12_SAFEBAG_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS12_SAFEBAG
, (°), (i), (vÆ))

	)

1314 
	#sk_PKCS12_SAFEBAG_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS12_SAFEBAG
, (°))

	)

1315 
	#sk_PKCS12_SAFEBAG_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1316 
	#sk_PKCS12_SAFEBAG_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1317 
	#sk_PKCS12_SAFEBAG_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1318 
	#sk_PKCS12_SAFEBAG_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1319 
	#sk_PKCS12_SAFEBAG_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS12_SAFEBAG
, (°), (i))

	)

1320 
	#sk_PKCS12_SAFEBAG_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS12_SAFEBAG
, (°), (±r))

	)

1321 
	#sk_PKCS12_SAFEBAG_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS12_SAFEBAG
, (°), (vÆ), (i))

	)

1322 
	#sk_PKCS12_SAFEBAG_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS12_SAFEBAG
, (°), (cmp))

	)

1323 
	#sk_PKCS12_SAFEBAG_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS12_SAFEBAG
, st)

	)

1324 
	#sk_PKCS12_SAFEBAG_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS12_SAFEBAG
, (°), (‰ì_func))

	)

1325 
	#sk_PKCS12_SAFEBAG_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS12_SAFEBAG
, (°))

	)

1326 
	#sk_PKCS12_SAFEBAG_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS12_SAFEBAG
, (°))

	)

1327 
	#sk_PKCS12_SAFEBAG_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS12_SAFEBAG
, (°))

	)

1328 
	#sk_PKCS12_SAFEBAG_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS12_SAFEBAG
, (°))

	)

1330 
	#sk_PKCS7_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7
, (cmp))

	)

1331 
	#sk_PKCS7_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7
)

	)

1332 
	#sk_PKCS7_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7
, (°))

	)

1333 
	#sk_PKCS7_num
(
°
Ë
	`SKM_sk_num
(
PKCS7
, (°))

	)

1334 
	#sk_PKCS7_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7
, (°), (i))

	)

1335 
	#sk_PKCS7_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7
, (°), (i), (vÆ))

	)

1336 
	#sk_PKCS7_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7
, (°))

	)

1337 
	#sk_PKCS7_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7
, (°), (vÆ))

	)

1338 
	#sk_PKCS7_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7
, (°), (vÆ))

	)

1339 
	#sk_PKCS7_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7
, (°), (vÆ))

	)

1340 
	#sk_PKCS7_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7
, (°), (vÆ))

	)

1341 
	#sk_PKCS7_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7
, (°), (i))

	)

1342 
	#sk_PKCS7_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7
, (°), (±r))

	)

1343 
	#sk_PKCS7_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7
, (°), (vÆ), (i))

	)

1344 
	#sk_PKCS7_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7
, (°), (cmp))

	)

1345 
	#sk_PKCS7_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7
, st)

	)

1346 
	#sk_PKCS7_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7
, (°), (‰ì_func))

	)

1347 
	#sk_PKCS7_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7
, (°))

	)

1348 
	#sk_PKCS7_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7
, (°))

	)

1349 
	#sk_PKCS7_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7
, (°))

	)

1350 
	#sk_PKCS7_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7
, (°))

	)

1352 
	#sk_PKCS7_RECIP_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7_RECIP_INFO
, (cmp))

	)

1353 
	#sk_PKCS7_RECIP_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_RECIP_INFO
)

	)

1354 
	#sk_PKCS7_RECIP_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_RECIP_INFO
, (°))

	)

1355 
	#sk_PKCS7_RECIP_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_RECIP_INFO
, (°))

	)

1356 
	#sk_PKCS7_RECIP_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1357 
	#sk_PKCS7_RECIP_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_RECIP_INFO
, (°), (i), (vÆ))

	)

1358 
	#sk_PKCS7_RECIP_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_RECIP_INFO
, (°))

	)

1359 
	#sk_PKCS7_RECIP_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1360 
	#sk_PKCS7_RECIP_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1361 
	#sk_PKCS7_RECIP_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1362 
	#sk_PKCS7_RECIP_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1363 
	#sk_PKCS7_RECIP_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1364 
	#sk_PKCS7_RECIP_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_RECIP_INFO
, (°), (±r))

	)

1365 
	#sk_PKCS7_RECIP_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_RECIP_INFO
, (°), (vÆ), (i))

	)

1366 
	#sk_PKCS7_RECIP_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_RECIP_INFO
, (°), (cmp))

	)

1367 
	#sk_PKCS7_RECIP_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_RECIP_INFO
, st)

	)

1368 
	#sk_PKCS7_RECIP_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_RECIP_INFO
, (°), (‰ì_func))

	)

1369 
	#sk_PKCS7_RECIP_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_RECIP_INFO
, (°))

	)

1370 
	#sk_PKCS7_RECIP_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_RECIP_INFO
, (°))

	)

1371 
	#sk_PKCS7_RECIP_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_RECIP_INFO
, (°))

	)

1372 
	#sk_PKCS7_RECIP_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_RECIP_INFO
, (°))

	)

1374 
	#sk_PKCS7_SIGNER_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7_SIGNER_INFO
, (cmp))

	)

1375 
	#sk_PKCS7_SIGNER_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_SIGNER_INFO
)

	)

1376 
	#sk_PKCS7_SIGNER_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_SIGNER_INFO
, (°))

	)

1377 
	#sk_PKCS7_SIGNER_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_SIGNER_INFO
, (°))

	)

1378 
	#sk_PKCS7_SIGNER_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1379 
	#sk_PKCS7_SIGNER_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_SIGNER_INFO
, (°), (i), (vÆ))

	)

1380 
	#sk_PKCS7_SIGNER_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_SIGNER_INFO
, (°))

	)

1381 
	#sk_PKCS7_SIGNER_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1382 
	#sk_PKCS7_SIGNER_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1383 
	#sk_PKCS7_SIGNER_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1384 
	#sk_PKCS7_SIGNER_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1385 
	#sk_PKCS7_SIGNER_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1386 
	#sk_PKCS7_SIGNER_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_SIGNER_INFO
, (°), (±r))

	)

1387 
	#sk_PKCS7_SIGNER_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_SIGNER_INFO
, (°), (vÆ), (i))

	)

1388 
	#sk_PKCS7_SIGNER_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_SIGNER_INFO
, (°), (cmp))

	)

1389 
	#sk_PKCS7_SIGNER_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_SIGNER_INFO
, st)

	)

1390 
	#sk_PKCS7_SIGNER_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_SIGNER_INFO
, (°), (‰ì_func))

	)

1391 
	#sk_PKCS7_SIGNER_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_SIGNER_INFO
, (°))

	)

1392 
	#sk_PKCS7_SIGNER_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_SIGNER_INFO
, (°))

	)

1393 
	#sk_PKCS7_SIGNER_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_SIGNER_INFO
, (°))

	)

1394 
	#sk_PKCS7_SIGNER_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_SIGNER_INFO
, (°))

	)

1396 
	#sk_POLICYINFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICYINFO
, (cmp))

	)

1397 
	#sk_POLICYINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYINFO
)

	)

1398 
	#sk_POLICYINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYINFO
, (°))

	)

1399 
	#sk_POLICYINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYINFO
, (°))

	)

1400 
	#sk_POLICYINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYINFO
, (°), (i))

	)

1401 
	#sk_POLICYINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYINFO
, (°), (i), (vÆ))

	)

1402 
	#sk_POLICYINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYINFO
, (°))

	)

1403 
	#sk_POLICYINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYINFO
, (°), (vÆ))

	)

1404 
	#sk_POLICYINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYINFO
, (°), (vÆ))

	)

1405 
	#sk_POLICYINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYINFO
, (°), (vÆ))

	)

1406 
	#sk_POLICYINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYINFO
, (°), (vÆ))

	)

1407 
	#sk_POLICYINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYINFO
, (°), (i))

	)

1408 
	#sk_POLICYINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYINFO
, (°), (±r))

	)

1409 
	#sk_POLICYINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYINFO
, (°), (vÆ), (i))

	)

1410 
	#sk_POLICYINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYINFO
, (°), (cmp))

	)

1411 
	#sk_POLICYINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYINFO
, st)

	)

1412 
	#sk_POLICYINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYINFO
, (°), (‰ì_func))

	)

1413 
	#sk_POLICYINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYINFO
, (°))

	)

1414 
	#sk_POLICYINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYINFO
, (°))

	)

1415 
	#sk_POLICYINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYINFO
, (°))

	)

1416 
	#sk_POLICYINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYINFO
, (°))

	)

1418 
	#sk_POLICYQUALINFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICYQUALINFO
, (cmp))

	)

1419 
	#sk_POLICYQUALINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYQUALINFO
)

	)

1420 
	#sk_POLICYQUALINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYQUALINFO
, (°))

	)

1421 
	#sk_POLICYQUALINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYQUALINFO
, (°))

	)

1422 
	#sk_POLICYQUALINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYQUALINFO
, (°), (i))

	)

1423 
	#sk_POLICYQUALINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYQUALINFO
, (°), (i), (vÆ))

	)

1424 
	#sk_POLICYQUALINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYQUALINFO
, (°))

	)

1425 
	#sk_POLICYQUALINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYQUALINFO
, (°), (vÆ))

	)

1426 
	#sk_POLICYQUALINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYQUALINFO
, (°), (vÆ))

	)

1427 
	#sk_POLICYQUALINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYQUALINFO
, (°), (vÆ))

	)

1428 
	#sk_POLICYQUALINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYQUALINFO
, (°), (vÆ))

	)

1429 
	#sk_POLICYQUALINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYQUALINFO
, (°), (i))

	)

1430 
	#sk_POLICYQUALINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYQUALINFO
, (°), (±r))

	)

1431 
	#sk_POLICYQUALINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYQUALINFO
, (°), (vÆ), (i))

	)

1432 
	#sk_POLICYQUALINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYQUALINFO
, (°), (cmp))

	)

1433 
	#sk_POLICYQUALINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYQUALINFO
, st)

	)

1434 
	#sk_POLICYQUALINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYQUALINFO
, (°), (‰ì_func))

	)

1435 
	#sk_POLICYQUALINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYQUALINFO
, (°))

	)

1436 
	#sk_POLICYQUALINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYQUALINFO
, (°))

	)

1437 
	#sk_POLICYQUALINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYQUALINFO
, (°))

	)

1438 
	#sk_POLICYQUALINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYQUALINFO
, (°))

	)

1440 
	#sk_POLICY_MAPPING_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICY_MAPPING
, (cmp))

	)

1441 
	#sk_POLICY_MAPPING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICY_MAPPING
)

	)

1442 
	#sk_POLICY_MAPPING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICY_MAPPING
, (°))

	)

1443 
	#sk_POLICY_MAPPING_num
(
°
Ë
	`SKM_sk_num
(
POLICY_MAPPING
, (°))

	)

1444 
	#sk_POLICY_MAPPING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICY_MAPPING
, (°), (i))

	)

1445 
	#sk_POLICY_MAPPING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICY_MAPPING
, (°), (i), (vÆ))

	)

1446 
	#sk_POLICY_MAPPING_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICY_MAPPING
, (°))

	)

1447 
	#sk_POLICY_MAPPING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICY_MAPPING
, (°), (vÆ))

	)

1448 
	#sk_POLICY_MAPPING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICY_MAPPING
, (°), (vÆ))

	)

1449 
	#sk_POLICY_MAPPING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICY_MAPPING
, (°), (vÆ))

	)

1450 
	#sk_POLICY_MAPPING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICY_MAPPING
, (°), (vÆ))

	)

1451 
	#sk_POLICY_MAPPING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICY_MAPPING
, (°), (i))

	)

1452 
	#sk_POLICY_MAPPING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICY_MAPPING
, (°), (±r))

	)

1453 
	#sk_POLICY_MAPPING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICY_MAPPING
, (°), (vÆ), (i))

	)

1454 
	#sk_POLICY_MAPPING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICY_MAPPING
, (°), (cmp))

	)

1455 
	#sk_POLICY_MAPPING_dup
(
°
Ë
	`SKM_sk_dup
(
POLICY_MAPPING
, st)

	)

1456 
	#sk_POLICY_MAPPING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICY_MAPPING
, (°), (‰ì_func))

	)

1457 
	#sk_POLICY_MAPPING_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICY_MAPPING
, (°))

	)

1458 
	#sk_POLICY_MAPPING_p›
(
°
Ë
	`SKM_sk_p›
(
POLICY_MAPPING
, (°))

	)

1459 
	#sk_POLICY_MAPPING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICY_MAPPING
, (°))

	)

1460 
	#sk_POLICY_MAPPING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICY_MAPPING
, (°))

	)

1462 
	#sk_SRP_gN_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_gN
, (cmp))

	)

1463 
	#sk_SRP_gN_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_gN
)

	)

1464 
	#sk_SRP_gN_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_gN
, (°))

	)

1465 
	#sk_SRP_gN_num
(
°
Ë
	`SKM_sk_num
(
SRP_gN
, (°))

	)

1466 
	#sk_SRP_gN_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_gN
, (°), (i))

	)

1467 
	#sk_SRP_gN_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_gN
, (°), (i), (vÆ))

	)

1468 
	#sk_SRP_gN_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_gN
, (°))

	)

1469 
	#sk_SRP_gN_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_gN
, (°), (vÆ))

	)

1470 
	#sk_SRP_gN_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_gN
, (°), (vÆ))

	)

1471 
	#sk_SRP_gN_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_gN
, (°), (vÆ))

	)

1472 
	#sk_SRP_gN_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_gN
, (°), (vÆ))

	)

1473 
	#sk_SRP_gN_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_gN
, (°), (i))

	)

1474 
	#sk_SRP_gN_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_gN
, (°), (±r))

	)

1475 
	#sk_SRP_gN_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_gN
, (°), (vÆ), (i))

	)

1476 
	#sk_SRP_gN_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_gN
, (°), (cmp))

	)

1477 
	#sk_SRP_gN_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_gN
, st)

	)

1478 
	#sk_SRP_gN_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_gN
, (°), (‰ì_func))

	)

1479 
	#sk_SRP_gN_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_gN
, (°))

	)

1480 
	#sk_SRP_gN_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_gN
, (°))

	)

1481 
	#sk_SRP_gN_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_gN
, (°))

	)

1482 
	#sk_SRP_gN_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_gN
, (°))

	)

1484 
	#sk_SRP_gN_ˇche_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_gN_ˇche
, (cmp))

	)

1485 
	#sk_SRP_gN_ˇche_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_gN_ˇche
)

	)

1486 
	#sk_SRP_gN_ˇche_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_gN_ˇche
, (°))

	)

1487 
	#sk_SRP_gN_ˇche_num
(
°
Ë
	`SKM_sk_num
(
SRP_gN_ˇche
, (°))

	)

1488 
	#sk_SRP_gN_ˇche_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_gN_ˇche
, (°), (i))

	)

1489 
	#sk_SRP_gN_ˇche_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_gN_ˇche
, (°), (i), (vÆ))

	)

1490 
	#sk_SRP_gN_ˇche_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_gN_ˇche
, (°))

	)

1491 
	#sk_SRP_gN_ˇche_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1492 
	#sk_SRP_gN_ˇche_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1493 
	#sk_SRP_gN_ˇche_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1494 
	#sk_SRP_gN_ˇche_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1495 
	#sk_SRP_gN_ˇche_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_gN_ˇche
, (°), (i))

	)

1496 
	#sk_SRP_gN_ˇche_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_gN_ˇche
, (°), (±r))

	)

1497 
	#sk_SRP_gN_ˇche_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_gN_ˇche
, (°), (vÆ), (i))

	)

1498 
	#sk_SRP_gN_ˇche_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_gN_ˇche
, (°), (cmp))

	)

1499 
	#sk_SRP_gN_ˇche_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_gN_ˇche
, st)

	)

1500 
	#sk_SRP_gN_ˇche_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_gN_ˇche
, (°), (‰ì_func))

	)

1501 
	#sk_SRP_gN_ˇche_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_gN_ˇche
, (°))

	)

1502 
	#sk_SRP_gN_ˇche_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_gN_ˇche
, (°))

	)

1503 
	#sk_SRP_gN_ˇche_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_gN_ˇche
, (°))

	)

1504 
	#sk_SRP_gN_ˇche_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_gN_ˇche
, (°))

	)

1506 
	#sk_SRP_u£r_pwd_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_u£r_pwd
, (cmp))

	)

1507 
	#sk_SRP_u£r_pwd_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_u£r_pwd
)

	)

1508 
	#sk_SRP_u£r_pwd_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_u£r_pwd
, (°))

	)

1509 
	#sk_SRP_u£r_pwd_num
(
°
Ë
	`SKM_sk_num
(
SRP_u£r_pwd
, (°))

	)

1510 
	#sk_SRP_u£r_pwd_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_u£r_pwd
, (°), (i))

	)

1511 
	#sk_SRP_u£r_pwd_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_u£r_pwd
, (°), (i), (vÆ))

	)

1512 
	#sk_SRP_u£r_pwd_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_u£r_pwd
, (°))

	)

1513 
	#sk_SRP_u£r_pwd_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1514 
	#sk_SRP_u£r_pwd_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1515 
	#sk_SRP_u£r_pwd_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1516 
	#sk_SRP_u£r_pwd_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1517 
	#sk_SRP_u£r_pwd_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_u£r_pwd
, (°), (i))

	)

1518 
	#sk_SRP_u£r_pwd_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_u£r_pwd
, (°), (±r))

	)

1519 
	#sk_SRP_u£r_pwd_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_u£r_pwd
, (°), (vÆ), (i))

	)

1520 
	#sk_SRP_u£r_pwd_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_u£r_pwd
, (°), (cmp))

	)

1521 
	#sk_SRP_u£r_pwd_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_u£r_pwd
, st)

	)

1522 
	#sk_SRP_u£r_pwd_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_u£r_pwd
, (°), (‰ì_func))

	)

1523 
	#sk_SRP_u£r_pwd_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_u£r_pwd
, (°))

	)

1524 
	#sk_SRP_u£r_pwd_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_u£r_pwd
, (°))

	)

1525 
	#sk_SRP_u£r_pwd_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_u£r_pwd
, (°))

	)

1526 
	#sk_SRP_u£r_pwd_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_u£r_pwd
, (°))

	)

1528 
	#sk_SRTP_PROTECTION_PROFILE_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRTP_PROTECTION_PROFILE
, (cmp))

	)

1529 
	#sk_SRTP_PROTECTION_PROFILE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRTP_PROTECTION_PROFILE
)

	)

1530 
	#sk_SRTP_PROTECTION_PROFILE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1531 
	#sk_SRTP_PROTECTION_PROFILE_num
(
°
Ë
	`SKM_sk_num
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1532 
	#sk_SRTP_PROTECTION_PROFILE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRTP_PROTECTION_PROFILE
, (°), (i))

	)

1533 
	#sk_SRTP_PROTECTION_PROFILE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRTP_PROTECTION_PROFILE
, (°), (i), (vÆ))

	)

1534 
	#sk_SRTP_PROTECTION_PROFILE_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1535 
	#sk_SRTP_PROTECTION_PROFILE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1536 
	#sk_SRTP_PROTECTION_PROFILE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1537 
	#sk_SRTP_PROTECTION_PROFILE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1538 
	#sk_SRTP_PROTECTION_PROFILE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1539 
	#sk_SRTP_PROTECTION_PROFILE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRTP_PROTECTION_PROFILE
, (°), (i))

	)

1540 
	#sk_SRTP_PROTECTION_PROFILE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRTP_PROTECTION_PROFILE
, (°), (±r))

	)

1541 
	#sk_SRTP_PROTECTION_PROFILE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ), (i))

	)

1542 
	#sk_SRTP_PROTECTION_PROFILE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRTP_PROTECTION_PROFILE
, (°), (cmp))

	)

1543 
	#sk_SRTP_PROTECTION_PROFILE_dup
(
°
Ë
	`SKM_sk_dup
(
SRTP_PROTECTION_PROFILE
, st)

	)

1544 
	#sk_SRTP_PROTECTION_PROFILE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRTP_PROTECTION_PROFILE
, (°), (‰ì_func))

	)

1545 
	#sk_SRTP_PROTECTION_PROFILE_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1546 
	#sk_SRTP_PROTECTION_PROFILE_p›
(
°
Ë
	`SKM_sk_p›
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1547 
	#sk_SRTP_PROTECTION_PROFILE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1548 
	#sk_SRTP_PROTECTION_PROFILE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1550 
	#sk_SSL_CIPHER_√w
(
cmp
Ë
	`SKM_sk_√w
(
SSL_CIPHER
, (cmp))

	)

1551 
	#sk_SSL_CIPHER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_CIPHER
)

	)

1552 
	#sk_SSL_CIPHER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_CIPHER
, (°))

	)

1553 
	#sk_SSL_CIPHER_num
(
°
Ë
	`SKM_sk_num
(
SSL_CIPHER
, (°))

	)

1554 
	#sk_SSL_CIPHER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_CIPHER
, (°), (i))

	)

1555 
	#sk_SSL_CIPHER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_CIPHER
, (°), (i), (vÆ))

	)

1556 
	#sk_SSL_CIPHER_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_CIPHER
, (°))

	)

1557 
	#sk_SSL_CIPHER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_CIPHER
, (°), (vÆ))

	)

1558 
	#sk_SSL_CIPHER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_CIPHER
, (°), (vÆ))

	)

1559 
	#sk_SSL_CIPHER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_CIPHER
, (°), (vÆ))

	)

1560 
	#sk_SSL_CIPHER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_CIPHER
, (°), (vÆ))

	)

1561 
	#sk_SSL_CIPHER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_CIPHER
, (°), (i))

	)

1562 
	#sk_SSL_CIPHER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_CIPHER
, (°), (±r))

	)

1563 
	#sk_SSL_CIPHER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_CIPHER
, (°), (vÆ), (i))

	)

1564 
	#sk_SSL_CIPHER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_CIPHER
, (°), (cmp))

	)

1565 
	#sk_SSL_CIPHER_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_CIPHER
, st)

	)

1566 
	#sk_SSL_CIPHER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_CIPHER
, (°), (‰ì_func))

	)

1567 
	#sk_SSL_CIPHER_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_CIPHER
, (°))

	)

1568 
	#sk_SSL_CIPHER_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_CIPHER
, (°))

	)

1569 
	#sk_SSL_CIPHER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_CIPHER
, (°))

	)

1570 
	#sk_SSL_CIPHER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_CIPHER
, (°))

	)

1572 
	#sk_SSL_COMP_√w
(
cmp
Ë
	`SKM_sk_√w
(
SSL_COMP
, (cmp))

	)

1573 
	#sk_SSL_COMP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_COMP
)

	)

1574 
	#sk_SSL_COMP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_COMP
, (°))

	)

1575 
	#sk_SSL_COMP_num
(
°
Ë
	`SKM_sk_num
(
SSL_COMP
, (°))

	)

1576 
	#sk_SSL_COMP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_COMP
, (°), (i))

	)

1577 
	#sk_SSL_COMP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_COMP
, (°), (i), (vÆ))

	)

1578 
	#sk_SSL_COMP_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_COMP
, (°))

	)

1579 
	#sk_SSL_COMP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_COMP
, (°), (vÆ))

	)

1580 
	#sk_SSL_COMP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_COMP
, (°), (vÆ))

	)

1581 
	#sk_SSL_COMP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_COMP
, (°), (vÆ))

	)

1582 
	#sk_SSL_COMP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_COMP
, (°), (vÆ))

	)

1583 
	#sk_SSL_COMP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_COMP
, (°), (i))

	)

1584 
	#sk_SSL_COMP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_COMP
, (°), (±r))

	)

1585 
	#sk_SSL_COMP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_COMP
, (°), (vÆ), (i))

	)

1586 
	#sk_SSL_COMP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_COMP
, (°), (cmp))

	)

1587 
	#sk_SSL_COMP_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_COMP
, st)

	)

1588 
	#sk_SSL_COMP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_COMP
, (°), (‰ì_func))

	)

1589 
	#sk_SSL_COMP_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_COMP
, (°))

	)

1590 
	#sk_SSL_COMP_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_COMP
, (°))

	)

1591 
	#sk_SSL_COMP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_COMP
, (°))

	)

1592 
	#sk_SSL_COMP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_COMP
, (°))

	)

1594 
	#sk_STACK_OF_X509_NAME_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
STACK_OF_X509_NAME_ENTRY
, (cmp))

	)

1595 
	#sk_STACK_OF_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STACK_OF_X509_NAME_ENTRY
)

	)

1596 
	#sk_STACK_OF_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1597 
	#sk_STACK_OF_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1598 
	#sk_STACK_OF_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STACK_OF_X509_NAME_ENTRY
, (°), (i))

	)

1599 
	#sk_STACK_OF_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STACK_OF_X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1600 
	#sk_STACK_OF_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1601 
	#sk_STACK_OF_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1602 
	#sk_STACK_OF_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1603 
	#sk_STACK_OF_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1604 
	#sk_STACK_OF_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1605 
	#sk_STACK_OF_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STACK_OF_X509_NAME_ENTRY
, (°), (i))

	)

1606 
	#sk_STACK_OF_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STACK_OF_X509_NAME_ENTRY
, (°), (±r))

	)

1607 
	#sk_STACK_OF_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1608 
	#sk_STACK_OF_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STACK_OF_X509_NAME_ENTRY
, (°), (cmp))

	)

1609 
	#sk_STACK_OF_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
STACK_OF_X509_NAME_ENTRY
, st)

	)

1610 
	#sk_STACK_OF_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STACK_OF_X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1611 
	#sk_STACK_OF_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1612 
	#sk_STACK_OF_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1613 
	#sk_STACK_OF_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1614 
	#sk_STACK_OF_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1616 
	#sk_STORE_ATTR_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
STORE_ATTR_INFO
, (cmp))

	)

1617 
	#sk_STORE_ATTR_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_ATTR_INFO
)

	)

1618 
	#sk_STORE_ATTR_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_ATTR_INFO
, (°))

	)

1619 
	#sk_STORE_ATTR_INFO_num
(
°
Ë
	`SKM_sk_num
(
STORE_ATTR_INFO
, (°))

	)

1620 
	#sk_STORE_ATTR_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_ATTR_INFO
, (°), (i))

	)

1621 
	#sk_STORE_ATTR_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_ATTR_INFO
, (°), (i), (vÆ))

	)

1622 
	#sk_STORE_ATTR_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_ATTR_INFO
, (°))

	)

1623 
	#sk_STORE_ATTR_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1624 
	#sk_STORE_ATTR_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1625 
	#sk_STORE_ATTR_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1626 
	#sk_STORE_ATTR_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1627 
	#sk_STORE_ATTR_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_ATTR_INFO
, (°), (i))

	)

1628 
	#sk_STORE_ATTR_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_ATTR_INFO
, (°), (±r))

	)

1629 
	#sk_STORE_ATTR_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_ATTR_INFO
, (°), (vÆ), (i))

	)

1630 
	#sk_STORE_ATTR_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_ATTR_INFO
, (°), (cmp))

	)

1631 
	#sk_STORE_ATTR_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_ATTR_INFO
, st)

	)

1632 
	#sk_STORE_ATTR_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_ATTR_INFO
, (°), (‰ì_func))

	)

1633 
	#sk_STORE_ATTR_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_ATTR_INFO
, (°))

	)

1634 
	#sk_STORE_ATTR_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_ATTR_INFO
, (°))

	)

1635 
	#sk_STORE_ATTR_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_ATTR_INFO
, (°))

	)

1636 
	#sk_STORE_ATTR_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_ATTR_INFO
, (°))

	)

1638 
	#sk_STORE_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
STORE_OBJECT
, (cmp))

	)

1639 
	#sk_STORE_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_OBJECT
)

	)

1640 
	#sk_STORE_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_OBJECT
, (°))

	)

1641 
	#sk_STORE_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
STORE_OBJECT
, (°))

	)

1642 
	#sk_STORE_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_OBJECT
, (°), (i))

	)

1643 
	#sk_STORE_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_OBJECT
, (°), (i), (vÆ))

	)

1644 
	#sk_STORE_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_OBJECT
, (°))

	)

1645 
	#sk_STORE_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_OBJECT
, (°), (vÆ))

	)

1646 
	#sk_STORE_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_OBJECT
, (°), (vÆ))

	)

1647 
	#sk_STORE_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_OBJECT
, (°), (vÆ))

	)

1648 
	#sk_STORE_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_OBJECT
, (°), (vÆ))

	)

1649 
	#sk_STORE_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_OBJECT
, (°), (i))

	)

1650 
	#sk_STORE_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_OBJECT
, (°), (±r))

	)

1651 
	#sk_STORE_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_OBJECT
, (°), (vÆ), (i))

	)

1652 
	#sk_STORE_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_OBJECT
, (°), (cmp))

	)

1653 
	#sk_STORE_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_OBJECT
, st)

	)

1654 
	#sk_STORE_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_OBJECT
, (°), (‰ì_func))

	)

1655 
	#sk_STORE_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_OBJECT
, (°))

	)

1656 
	#sk_STORE_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_OBJECT
, (°))

	)

1657 
	#sk_STORE_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_OBJECT
, (°))

	)

1658 
	#sk_STORE_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_OBJECT
, (°))

	)

1660 
	#sk_SXNETID_√w
(
cmp
Ë
	`SKM_sk_√w
(
SXNETID
, (cmp))

	)

1661 
	#sk_SXNETID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SXNETID
)

	)

1662 
	#sk_SXNETID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SXNETID
, (°))

	)

1663 
	#sk_SXNETID_num
(
°
Ë
	`SKM_sk_num
(
SXNETID
, (°))

	)

1664 
	#sk_SXNETID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SXNETID
, (°), (i))

	)

1665 
	#sk_SXNETID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SXNETID
, (°), (i), (vÆ))

	)

1666 
	#sk_SXNETID_zîo
(
°
Ë
	`SKM_sk_zîo
(
SXNETID
, (°))

	)

1667 
	#sk_SXNETID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SXNETID
, (°), (vÆ))

	)

1668 
	#sk_SXNETID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SXNETID
, (°), (vÆ))

	)

1669 
	#sk_SXNETID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SXNETID
, (°), (vÆ))

	)

1670 
	#sk_SXNETID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SXNETID
, (°), (vÆ))

	)

1671 
	#sk_SXNETID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SXNETID
, (°), (i))

	)

1672 
	#sk_SXNETID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SXNETID
, (°), (±r))

	)

1673 
	#sk_SXNETID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SXNETID
, (°), (vÆ), (i))

	)

1674 
	#sk_SXNETID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SXNETID
, (°), (cmp))

	)

1675 
	#sk_SXNETID_dup
(
°
Ë
	`SKM_sk_dup
(
SXNETID
, st)

	)

1676 
	#sk_SXNETID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SXNETID
, (°), (‰ì_func))

	)

1677 
	#sk_SXNETID_shi·
(
°
Ë
	`SKM_sk_shi·
(
SXNETID
, (°))

	)

1678 
	#sk_SXNETID_p›
(
°
Ë
	`SKM_sk_p›
(
SXNETID
, (°))

	)

1679 
	#sk_SXNETID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SXNETID
, (°))

	)

1680 
	#sk_SXNETID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SXNETID
, (°))

	)

1682 
	#sk_UI_STRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
UI_STRING
, (cmp))

	)

1683 
	#sk_UI_STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
UI_STRING
)

	)

1684 
	#sk_UI_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
UI_STRING
, (°))

	)

1685 
	#sk_UI_STRING_num
(
°
Ë
	`SKM_sk_num
(
UI_STRING
, (°))

	)

1686 
	#sk_UI_STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
UI_STRING
, (°), (i))

	)

1687 
	#sk_UI_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
UI_STRING
, (°), (i), (vÆ))

	)

1688 
	#sk_UI_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
UI_STRING
, (°))

	)

1689 
	#sk_UI_STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
UI_STRING
, (°), (vÆ))

	)

1690 
	#sk_UI_STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
UI_STRING
, (°), (vÆ))

	)

1691 
	#sk_UI_STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
UI_STRING
, (°), (vÆ))

	)

1692 
	#sk_UI_STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
UI_STRING
, (°), (vÆ))

	)

1693 
	#sk_UI_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
UI_STRING
, (°), (i))

	)

1694 
	#sk_UI_STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
UI_STRING
, (°), (±r))

	)

1695 
	#sk_UI_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
UI_STRING
, (°), (vÆ), (i))

	)

1696 
	#sk_UI_STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
UI_STRING
, (°), (cmp))

	)

1697 
	#sk_UI_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
UI_STRING
, st)

	)

1698 
	#sk_UI_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
UI_STRING
, (°), (‰ì_func))

	)

1699 
	#sk_UI_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
UI_STRING
, (°))

	)

1700 
	#sk_UI_STRING_p›
(
°
Ë
	`SKM_sk_p›
(
UI_STRING
, (°))

	)

1701 
	#sk_UI_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
UI_STRING
, (°))

	)

1702 
	#sk_UI_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
UI_STRING
, (°))

	)

1704 
	#sk_X509_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509
, (cmp))

	)

1705 
	#sk_X509_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509
)

	)

1706 
	#sk_X509_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509
, (°))

	)

1707 
	#sk_X509_num
(
°
Ë
	`SKM_sk_num
(
X509
, (°))

	)

1708 
	#sk_X509_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509
, (°), (i))

	)

1709 
	#sk_X509_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509
, (°), (i), (vÆ))

	)

1710 
	#sk_X509_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509
, (°))

	)

1711 
	#sk_X509_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509
, (°), (vÆ))

	)

1712 
	#sk_X509_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509
, (°), (vÆ))

	)

1713 
	#sk_X509_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509
, (°), (vÆ))

	)

1714 
	#sk_X509_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509
, (°), (vÆ))

	)

1715 
	#sk_X509_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509
, (°), (i))

	)

1716 
	#sk_X509_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509
, (°), (±r))

	)

1717 
	#sk_X509_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509
, (°), (vÆ), (i))

	)

1718 
	#sk_X509_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509
, (°), (cmp))

	)

1719 
	#sk_X509_dup
(
°
Ë
	`SKM_sk_dup
(
X509
, st)

	)

1720 
	#sk_X509_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509
, (°), (‰ì_func))

	)

1721 
	#sk_X509_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509
, (°))

	)

1722 
	#sk_X509_p›
(
°
Ë
	`SKM_sk_p›
(
X509
, (°))

	)

1723 
	#sk_X509_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509
, (°))

	)

1724 
	#sk_X509_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509
, (°))

	)

1726 
	#sk_X509V3_EXT_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509V3_EXT_METHOD
, (cmp))

	)

1727 
	#sk_X509V3_EXT_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509V3_EXT_METHOD
)

	)

1728 
	#sk_X509V3_EXT_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509V3_EXT_METHOD
, (°))

	)

1729 
	#sk_X509V3_EXT_METHOD_num
(
°
Ë
	`SKM_sk_num
(
X509V3_EXT_METHOD
, (°))

	)

1730 
	#sk_X509V3_EXT_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509V3_EXT_METHOD
, (°), (i))

	)

1731 
	#sk_X509V3_EXT_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509V3_EXT_METHOD
, (°), (i), (vÆ))

	)

1732 
	#sk_X509V3_EXT_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509V3_EXT_METHOD
, (°))

	)

1733 
	#sk_X509V3_EXT_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1734 
	#sk_X509V3_EXT_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1735 
	#sk_X509V3_EXT_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1736 
	#sk_X509V3_EXT_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1737 
	#sk_X509V3_EXT_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509V3_EXT_METHOD
, (°), (i))

	)

1738 
	#sk_X509V3_EXT_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509V3_EXT_METHOD
, (°), (±r))

	)

1739 
	#sk_X509V3_EXT_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509V3_EXT_METHOD
, (°), (vÆ), (i))

	)

1740 
	#sk_X509V3_EXT_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509V3_EXT_METHOD
, (°), (cmp))

	)

1741 
	#sk_X509V3_EXT_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
X509V3_EXT_METHOD
, st)

	)

1742 
	#sk_X509V3_EXT_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509V3_EXT_METHOD
, (°), (‰ì_func))

	)

1743 
	#sk_X509V3_EXT_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509V3_EXT_METHOD
, (°))

	)

1744 
	#sk_X509V3_EXT_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
X509V3_EXT_METHOD
, (°))

	)

1745 
	#sk_X509V3_EXT_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509V3_EXT_METHOD
, (°))

	)

1746 
	#sk_X509V3_EXT_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509V3_EXT_METHOD
, (°))

	)

1748 
	#sk_X509_ALGOR_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_ALGOR
, (cmp))

	)

1749 
	#sk_X509_ALGOR_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ALGOR
)

	)

1750 
	#sk_X509_ALGOR_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ALGOR
, (°))

	)

1751 
	#sk_X509_ALGOR_num
(
°
Ë
	`SKM_sk_num
(
X509_ALGOR
, (°))

	)

1752 
	#sk_X509_ALGOR_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ALGOR
, (°), (i))

	)

1753 
	#sk_X509_ALGOR_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ALGOR
, (°), (i), (vÆ))

	)

1754 
	#sk_X509_ALGOR_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ALGOR
, (°))

	)

1755 
	#sk_X509_ALGOR_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ALGOR
, (°), (vÆ))

	)

1756 
	#sk_X509_ALGOR_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ALGOR
, (°), (vÆ))

	)

1757 
	#sk_X509_ALGOR_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ALGOR
, (°), (vÆ))

	)

1758 
	#sk_X509_ALGOR_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ALGOR
, (°), (vÆ))

	)

1759 
	#sk_X509_ALGOR_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ALGOR
, (°), (i))

	)

1760 
	#sk_X509_ALGOR_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ALGOR
, (°), (±r))

	)

1761 
	#sk_X509_ALGOR_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ALGOR
, (°), (vÆ), (i))

	)

1762 
	#sk_X509_ALGOR_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ALGOR
, (°), (cmp))

	)

1763 
	#sk_X509_ALGOR_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ALGOR
, st)

	)

1764 
	#sk_X509_ALGOR_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ALGOR
, (°), (‰ì_func))

	)

1765 
	#sk_X509_ALGOR_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ALGOR
, (°))

	)

1766 
	#sk_X509_ALGOR_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ALGOR
, (°))

	)

1767 
	#sk_X509_ALGOR_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ALGOR
, (°))

	)

1768 
	#sk_X509_ALGOR_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ALGOR
, (°))

	)

1770 
	#sk_X509_ATTRIBUTE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_ATTRIBUTE
, (cmp))

	)

1771 
	#sk_X509_ATTRIBUTE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ATTRIBUTE
)

	)

1772 
	#sk_X509_ATTRIBUTE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ATTRIBUTE
, (°))

	)

1773 
	#sk_X509_ATTRIBUTE_num
(
°
Ë
	`SKM_sk_num
(
X509_ATTRIBUTE
, (°))

	)

1774 
	#sk_X509_ATTRIBUTE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ATTRIBUTE
, (°), (i))

	)

1775 
	#sk_X509_ATTRIBUTE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ATTRIBUTE
, (°), (i), (vÆ))

	)

1776 
	#sk_X509_ATTRIBUTE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ATTRIBUTE
, (°))

	)

1777 
	#sk_X509_ATTRIBUTE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1778 
	#sk_X509_ATTRIBUTE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1779 
	#sk_X509_ATTRIBUTE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1780 
	#sk_X509_ATTRIBUTE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1781 
	#sk_X509_ATTRIBUTE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ATTRIBUTE
, (°), (i))

	)

1782 
	#sk_X509_ATTRIBUTE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ATTRIBUTE
, (°), (±r))

	)

1783 
	#sk_X509_ATTRIBUTE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ATTRIBUTE
, (°), (vÆ), (i))

	)

1784 
	#sk_X509_ATTRIBUTE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ATTRIBUTE
, (°), (cmp))

	)

1785 
	#sk_X509_ATTRIBUTE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ATTRIBUTE
, st)

	)

1786 
	#sk_X509_ATTRIBUTE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ATTRIBUTE
, (°), (‰ì_func))

	)

1787 
	#sk_X509_ATTRIBUTE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ATTRIBUTE
, (°))

	)

1788 
	#sk_X509_ATTRIBUTE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ATTRIBUTE
, (°))

	)

1789 
	#sk_X509_ATTRIBUTE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ATTRIBUTE
, (°))

	)

1790 
	#sk_X509_ATTRIBUTE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ATTRIBUTE
, (°))

	)

1792 
	#sk_X509_CRL_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_CRL
, (cmp))

	)

1793 
	#sk_X509_CRL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_CRL
)

	)

1794 
	#sk_X509_CRL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_CRL
, (°))

	)

1795 
	#sk_X509_CRL_num
(
°
Ë
	`SKM_sk_num
(
X509_CRL
, (°))

	)

1796 
	#sk_X509_CRL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_CRL
, (°), (i))

	)

1797 
	#sk_X509_CRL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_CRL
, (°), (i), (vÆ))

	)

1798 
	#sk_X509_CRL_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_CRL
, (°))

	)

1799 
	#sk_X509_CRL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_CRL
, (°), (vÆ))

	)

1800 
	#sk_X509_CRL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_CRL
, (°), (vÆ))

	)

1801 
	#sk_X509_CRL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_CRL
, (°), (vÆ))

	)

1802 
	#sk_X509_CRL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_CRL
, (°), (vÆ))

	)

1803 
	#sk_X509_CRL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_CRL
, (°), (i))

	)

1804 
	#sk_X509_CRL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_CRL
, (°), (±r))

	)

1805 
	#sk_X509_CRL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_CRL
, (°), (vÆ), (i))

	)

1806 
	#sk_X509_CRL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_CRL
, (°), (cmp))

	)

1807 
	#sk_X509_CRL_dup
(
°
Ë
	`SKM_sk_dup
(
X509_CRL
, st)

	)

1808 
	#sk_X509_CRL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_CRL
, (°), (‰ì_func))

	)

1809 
	#sk_X509_CRL_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_CRL
, (°))

	)

1810 
	#sk_X509_CRL_p›
(
°
Ë
	`SKM_sk_p›
(
X509_CRL
, (°))

	)

1811 
	#sk_X509_CRL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_CRL
, (°))

	)

1812 
	#sk_X509_CRL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_CRL
, (°))

	)

1814 
	#sk_X509_EXTENSION_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_EXTENSION
, (cmp))

	)

1815 
	#sk_X509_EXTENSION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_EXTENSION
)

	)

1816 
	#sk_X509_EXTENSION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_EXTENSION
, (°))

	)

1817 
	#sk_X509_EXTENSION_num
(
°
Ë
	`SKM_sk_num
(
X509_EXTENSION
, (°))

	)

1818 
	#sk_X509_EXTENSION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_EXTENSION
, (°), (i))

	)

1819 
	#sk_X509_EXTENSION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_EXTENSION
, (°), (i), (vÆ))

	)

1820 
	#sk_X509_EXTENSION_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_EXTENSION
, (°))

	)

1821 
	#sk_X509_EXTENSION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_EXTENSION
, (°), (vÆ))

	)

1822 
	#sk_X509_EXTENSION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_EXTENSION
, (°), (vÆ))

	)

1823 
	#sk_X509_EXTENSION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_EXTENSION
, (°), (vÆ))

	)

1824 
	#sk_X509_EXTENSION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_EXTENSION
, (°), (vÆ))

	)

1825 
	#sk_X509_EXTENSION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_EXTENSION
, (°), (i))

	)

1826 
	#sk_X509_EXTENSION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_EXTENSION
, (°), (±r))

	)

1827 
	#sk_X509_EXTENSION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_EXTENSION
, (°), (vÆ), (i))

	)

1828 
	#sk_X509_EXTENSION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_EXTENSION
, (°), (cmp))

	)

1829 
	#sk_X509_EXTENSION_dup
(
°
Ë
	`SKM_sk_dup
(
X509_EXTENSION
, st)

	)

1830 
	#sk_X509_EXTENSION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_EXTENSION
, (°), (‰ì_func))

	)

1831 
	#sk_X509_EXTENSION_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_EXTENSION
, (°))

	)

1832 
	#sk_X509_EXTENSION_p›
(
°
Ë
	`SKM_sk_p›
(
X509_EXTENSION
, (°))

	)

1833 
	#sk_X509_EXTENSION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_EXTENSION
, (°))

	)

1834 
	#sk_X509_EXTENSION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_EXTENSION
, (°))

	)

1836 
	#sk_X509_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_INFO
, (cmp))

	)

1837 
	#sk_X509_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_INFO
)

	)

1838 
	#sk_X509_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_INFO
, (°))

	)

1839 
	#sk_X509_INFO_num
(
°
Ë
	`SKM_sk_num
(
X509_INFO
, (°))

	)

1840 
	#sk_X509_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_INFO
, (°), (i))

	)

1841 
	#sk_X509_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_INFO
, (°), (i), (vÆ))

	)

1842 
	#sk_X509_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_INFO
, (°))

	)

1843 
	#sk_X509_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_INFO
, (°), (vÆ))

	)

1844 
	#sk_X509_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_INFO
, (°), (vÆ))

	)

1845 
	#sk_X509_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_INFO
, (°), (vÆ))

	)

1846 
	#sk_X509_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_INFO
, (°), (vÆ))

	)

1847 
	#sk_X509_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_INFO
, (°), (i))

	)

1848 
	#sk_X509_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_INFO
, (°), (±r))

	)

1849 
	#sk_X509_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_INFO
, (°), (vÆ), (i))

	)

1850 
	#sk_X509_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_INFO
, (°), (cmp))

	)

1851 
	#sk_X509_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
X509_INFO
, st)

	)

1852 
	#sk_X509_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_INFO
, (°), (‰ì_func))

	)

1853 
	#sk_X509_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_INFO
, (°))

	)

1854 
	#sk_X509_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
X509_INFO
, (°))

	)

1855 
	#sk_X509_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_INFO
, (°))

	)

1856 
	#sk_X509_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_INFO
, (°))

	)

1858 
	#sk_X509_LOOKUP_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_LOOKUP
, (cmp))

	)

1859 
	#sk_X509_LOOKUP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_LOOKUP
)

	)

1860 
	#sk_X509_LOOKUP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_LOOKUP
, (°))

	)

1861 
	#sk_X509_LOOKUP_num
(
°
Ë
	`SKM_sk_num
(
X509_LOOKUP
, (°))

	)

1862 
	#sk_X509_LOOKUP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_LOOKUP
, (°), (i))

	)

1863 
	#sk_X509_LOOKUP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_LOOKUP
, (°), (i), (vÆ))

	)

1864 
	#sk_X509_LOOKUP_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_LOOKUP
, (°))

	)

1865 
	#sk_X509_LOOKUP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_LOOKUP
, (°), (vÆ))

	)

1866 
	#sk_X509_LOOKUP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_LOOKUP
, (°), (vÆ))

	)

1867 
	#sk_X509_LOOKUP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_LOOKUP
, (°), (vÆ))

	)

1868 
	#sk_X509_LOOKUP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_LOOKUP
, (°), (vÆ))

	)

1869 
	#sk_X509_LOOKUP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_LOOKUP
, (°), (i))

	)

1870 
	#sk_X509_LOOKUP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_LOOKUP
, (°), (±r))

	)

1871 
	#sk_X509_LOOKUP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_LOOKUP
, (°), (vÆ), (i))

	)

1872 
	#sk_X509_LOOKUP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_LOOKUP
, (°), (cmp))

	)

1873 
	#sk_X509_LOOKUP_dup
(
°
Ë
	`SKM_sk_dup
(
X509_LOOKUP
, st)

	)

1874 
	#sk_X509_LOOKUP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_LOOKUP
, (°), (‰ì_func))

	)

1875 
	#sk_X509_LOOKUP_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_LOOKUP
, (°))

	)

1876 
	#sk_X509_LOOKUP_p›
(
°
Ë
	`SKM_sk_p›
(
X509_LOOKUP
, (°))

	)

1877 
	#sk_X509_LOOKUP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_LOOKUP
, (°))

	)

1878 
	#sk_X509_LOOKUP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_LOOKUP
, (°))

	)

1880 
	#sk_X509_NAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_NAME
, (cmp))

	)

1881 
	#sk_X509_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME
)

	)

1882 
	#sk_X509_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME
, (°))

	)

1883 
	#sk_X509_NAME_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME
, (°))

	)

1884 
	#sk_X509_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME
, (°), (i))

	)

1885 
	#sk_X509_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME
, (°), (i), (vÆ))

	)

1886 
	#sk_X509_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME
, (°))

	)

1887 
	#sk_X509_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME
, (°), (vÆ))

	)

1888 
	#sk_X509_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME
, (°), (vÆ))

	)

1889 
	#sk_X509_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME
, (°), (vÆ))

	)

1890 
	#sk_X509_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME
, (°), (vÆ))

	)

1891 
	#sk_X509_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME
, (°), (i))

	)

1892 
	#sk_X509_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME
, (°), (±r))

	)

1893 
	#sk_X509_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME
, (°), (vÆ), (i))

	)

1894 
	#sk_X509_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME
, (°), (cmp))

	)

1895 
	#sk_X509_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME
, st)

	)

1896 
	#sk_X509_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME
, (°), (‰ì_func))

	)

1897 
	#sk_X509_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME
, (°))

	)

1898 
	#sk_X509_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME
, (°))

	)

1899 
	#sk_X509_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME
, (°))

	)

1900 
	#sk_X509_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME
, (°))

	)

1902 
	#sk_X509_NAME_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_NAME_ENTRY
, (cmp))

	)

1903 
	#sk_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME_ENTRY
)

	)

1904 
	#sk_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME_ENTRY
, (°))

	)

1905 
	#sk_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME_ENTRY
, (°))

	)

1906 
	#sk_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME_ENTRY
, (°), (i))

	)

1907 
	#sk_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1908 
	#sk_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME_ENTRY
, (°))

	)

1909 
	#sk_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1910 
	#sk_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1911 
	#sk_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1912 
	#sk_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1913 
	#sk_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME_ENTRY
, (°), (i))

	)

1914 
	#sk_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME_ENTRY
, (°), (±r))

	)

1915 
	#sk_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1916 
	#sk_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME_ENTRY
, (°), (cmp))

	)

1917 
	#sk_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME_ENTRY
, st)

	)

1918 
	#sk_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1919 
	#sk_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME_ENTRY
, (°))

	)

1920 
	#sk_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME_ENTRY
, (°))

	)

1921 
	#sk_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME_ENTRY
, (°))

	)

1922 
	#sk_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME_ENTRY
, (°))

	)

1924 
	#sk_X509_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_OBJECT
, (cmp))

	)

1925 
	#sk_X509_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_OBJECT
)

	)

1926 
	#sk_X509_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_OBJECT
, (°))

	)

1927 
	#sk_X509_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
X509_OBJECT
, (°))

	)

1928 
	#sk_X509_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_OBJECT
, (°), (i))

	)

1929 
	#sk_X509_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_OBJECT
, (°), (i), (vÆ))

	)

1930 
	#sk_X509_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_OBJECT
, (°))

	)

1931 
	#sk_X509_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_OBJECT
, (°), (vÆ))

	)

1932 
	#sk_X509_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_OBJECT
, (°), (vÆ))

	)

1933 
	#sk_X509_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_OBJECT
, (°), (vÆ))

	)

1934 
	#sk_X509_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_OBJECT
, (°), (vÆ))

	)

1935 
	#sk_X509_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_OBJECT
, (°), (i))

	)

1936 
	#sk_X509_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_OBJECT
, (°), (±r))

	)

1937 
	#sk_X509_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_OBJECT
, (°), (vÆ), (i))

	)

1938 
	#sk_X509_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_OBJECT
, (°), (cmp))

	)

1939 
	#sk_X509_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
X509_OBJECT
, st)

	)

1940 
	#sk_X509_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_OBJECT
, (°), (‰ì_func))

	)

1941 
	#sk_X509_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_OBJECT
, (°))

	)

1942 
	#sk_X509_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
X509_OBJECT
, (°))

	)

1943 
	#sk_X509_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_OBJECT
, (°))

	)

1944 
	#sk_X509_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_OBJECT
, (°))

	)

1946 
	#sk_X509_POLICY_DATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_POLICY_DATA
, (cmp))

	)

1947 
	#sk_X509_POLICY_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_DATA
)

	)

1948 
	#sk_X509_POLICY_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_DATA
, (°))

	)

1949 
	#sk_X509_POLICY_DATA_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_DATA
, (°))

	)

1950 
	#sk_X509_POLICY_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_DATA
, (°), (i))

	)

1951 
	#sk_X509_POLICY_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_DATA
, (°), (i), (vÆ))

	)

1952 
	#sk_X509_POLICY_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_DATA
, (°))

	)

1953 
	#sk_X509_POLICY_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1954 
	#sk_X509_POLICY_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1955 
	#sk_X509_POLICY_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1956 
	#sk_X509_POLICY_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1957 
	#sk_X509_POLICY_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_DATA
, (°), (i))

	)

1958 
	#sk_X509_POLICY_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_DATA
, (°), (±r))

	)

1959 
	#sk_X509_POLICY_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_DATA
, (°), (vÆ), (i))

	)

1960 
	#sk_X509_POLICY_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_DATA
, (°), (cmp))

	)

1961 
	#sk_X509_POLICY_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_DATA
, st)

	)

1962 
	#sk_X509_POLICY_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_DATA
, (°), (‰ì_func))

	)

1963 
	#sk_X509_POLICY_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_DATA
, (°))

	)

1964 
	#sk_X509_POLICY_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_DATA
, (°))

	)

1965 
	#sk_X509_POLICY_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_DATA
, (°))

	)

1966 
	#sk_X509_POLICY_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_DATA
, (°))

	)

1968 
	#sk_X509_POLICY_NODE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_POLICY_NODE
, (cmp))

	)

1969 
	#sk_X509_POLICY_NODE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_NODE
)

	)

1970 
	#sk_X509_POLICY_NODE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_NODE
, (°))

	)

1971 
	#sk_X509_POLICY_NODE_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_NODE
, (°))

	)

1972 
	#sk_X509_POLICY_NODE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_NODE
, (°), (i))

	)

1973 
	#sk_X509_POLICY_NODE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_NODE
, (°), (i), (vÆ))

	)

1974 
	#sk_X509_POLICY_NODE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_NODE
, (°))

	)

1975 
	#sk_X509_POLICY_NODE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1976 
	#sk_X509_POLICY_NODE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1977 
	#sk_X509_POLICY_NODE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1978 
	#sk_X509_POLICY_NODE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1979 
	#sk_X509_POLICY_NODE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_NODE
, (°), (i))

	)

1980 
	#sk_X509_POLICY_NODE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_NODE
, (°), (±r))

	)

1981 
	#sk_X509_POLICY_NODE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_NODE
, (°), (vÆ), (i))

	)

1982 
	#sk_X509_POLICY_NODE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_NODE
, (°), (cmp))

	)

1983 
	#sk_X509_POLICY_NODE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_NODE
, st)

	)

1984 
	#sk_X509_POLICY_NODE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_NODE
, (°), (‰ì_func))

	)

1985 
	#sk_X509_POLICY_NODE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_NODE
, (°))

	)

1986 
	#sk_X509_POLICY_NODE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_NODE
, (°))

	)

1987 
	#sk_X509_POLICY_NODE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_NODE
, (°))

	)

1988 
	#sk_X509_POLICY_NODE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_NODE
, (°))

	)

1990 
	#sk_X509_PURPOSE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_PURPOSE
, (cmp))

	)

1991 
	#sk_X509_PURPOSE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_PURPOSE
)

	)

1992 
	#sk_X509_PURPOSE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_PURPOSE
, (°))

	)

1993 
	#sk_X509_PURPOSE_num
(
°
Ë
	`SKM_sk_num
(
X509_PURPOSE
, (°))

	)

1994 
	#sk_X509_PURPOSE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_PURPOSE
, (°), (i))

	)

1995 
	#sk_X509_PURPOSE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_PURPOSE
, (°), (i), (vÆ))

	)

1996 
	#sk_X509_PURPOSE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_PURPOSE
, (°))

	)

1997 
	#sk_X509_PURPOSE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_PURPOSE
, (°), (vÆ))

	)

1998 
	#sk_X509_PURPOSE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_PURPOSE
, (°), (vÆ))

	)

1999 
	#sk_X509_PURPOSE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_PURPOSE
, (°), (vÆ))

	)

2000 
	#sk_X509_PURPOSE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_PURPOSE
, (°), (vÆ))

	)

2001 
	#sk_X509_PURPOSE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_PURPOSE
, (°), (i))

	)

2002 
	#sk_X509_PURPOSE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_PURPOSE
, (°), (±r))

	)

2003 
	#sk_X509_PURPOSE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_PURPOSE
, (°), (vÆ), (i))

	)

2004 
	#sk_X509_PURPOSE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_PURPOSE
, (°), (cmp))

	)

2005 
	#sk_X509_PURPOSE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_PURPOSE
, st)

	)

2006 
	#sk_X509_PURPOSE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_PURPOSE
, (°), (‰ì_func))

	)

2007 
	#sk_X509_PURPOSE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_PURPOSE
, (°))

	)

2008 
	#sk_X509_PURPOSE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_PURPOSE
, (°))

	)

2009 
	#sk_X509_PURPOSE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_PURPOSE
, (°))

	)

2010 
	#sk_X509_PURPOSE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_PURPOSE
, (°))

	)

2012 
	#sk_X509_REVOKED_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_REVOKED
, (cmp))

	)

2013 
	#sk_X509_REVOKED_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_REVOKED
)

	)

2014 
	#sk_X509_REVOKED_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_REVOKED
, (°))

	)

2015 
	#sk_X509_REVOKED_num
(
°
Ë
	`SKM_sk_num
(
X509_REVOKED
, (°))

	)

2016 
	#sk_X509_REVOKED_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_REVOKED
, (°), (i))

	)

2017 
	#sk_X509_REVOKED_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_REVOKED
, (°), (i), (vÆ))

	)

2018 
	#sk_X509_REVOKED_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_REVOKED
, (°))

	)

2019 
	#sk_X509_REVOKED_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_REVOKED
, (°), (vÆ))

	)

2020 
	#sk_X509_REVOKED_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_REVOKED
, (°), (vÆ))

	)

2021 
	#sk_X509_REVOKED_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_REVOKED
, (°), (vÆ))

	)

2022 
	#sk_X509_REVOKED_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_REVOKED
, (°), (vÆ))

	)

2023 
	#sk_X509_REVOKED_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_REVOKED
, (°), (i))

	)

2024 
	#sk_X509_REVOKED_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_REVOKED
, (°), (±r))

	)

2025 
	#sk_X509_REVOKED_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_REVOKED
, (°), (vÆ), (i))

	)

2026 
	#sk_X509_REVOKED_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_REVOKED
, (°), (cmp))

	)

2027 
	#sk_X509_REVOKED_dup
(
°
Ë
	`SKM_sk_dup
(
X509_REVOKED
, st)

	)

2028 
	#sk_X509_REVOKED_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_REVOKED
, (°), (‰ì_func))

	)

2029 
	#sk_X509_REVOKED_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_REVOKED
, (°))

	)

2030 
	#sk_X509_REVOKED_p›
(
°
Ë
	`SKM_sk_p›
(
X509_REVOKED
, (°))

	)

2031 
	#sk_X509_REVOKED_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_REVOKED
, (°))

	)

2032 
	#sk_X509_REVOKED_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_REVOKED
, (°))

	)

2034 
	#sk_X509_TRUST_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_TRUST
, (cmp))

	)

2035 
	#sk_X509_TRUST_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_TRUST
)

	)

2036 
	#sk_X509_TRUST_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_TRUST
, (°))

	)

2037 
	#sk_X509_TRUST_num
(
°
Ë
	`SKM_sk_num
(
X509_TRUST
, (°))

	)

2038 
	#sk_X509_TRUST_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_TRUST
, (°), (i))

	)

2039 
	#sk_X509_TRUST_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_TRUST
, (°), (i), (vÆ))

	)

2040 
	#sk_X509_TRUST_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_TRUST
, (°))

	)

2041 
	#sk_X509_TRUST_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_TRUST
, (°), (vÆ))

	)

2042 
	#sk_X509_TRUST_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_TRUST
, (°), (vÆ))

	)

2043 
	#sk_X509_TRUST_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_TRUST
, (°), (vÆ))

	)

2044 
	#sk_X509_TRUST_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_TRUST
, (°), (vÆ))

	)

2045 
	#sk_X509_TRUST_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_TRUST
, (°), (i))

	)

2046 
	#sk_X509_TRUST_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_TRUST
, (°), (±r))

	)

2047 
	#sk_X509_TRUST_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_TRUST
, (°), (vÆ), (i))

	)

2048 
	#sk_X509_TRUST_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_TRUST
, (°), (cmp))

	)

2049 
	#sk_X509_TRUST_dup
(
°
Ë
	`SKM_sk_dup
(
X509_TRUST
, st)

	)

2050 
	#sk_X509_TRUST_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_TRUST
, (°), (‰ì_func))

	)

2051 
	#sk_X509_TRUST_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_TRUST
, (°))

	)

2052 
	#sk_X509_TRUST_p›
(
°
Ë
	`SKM_sk_p›
(
X509_TRUST
, (°))

	)

2053 
	#sk_X509_TRUST_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_TRUST
, (°))

	)

2054 
	#sk_X509_TRUST_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_TRUST
, (°))

	)

2056 
	#sk_X509_VERIFY_PARAM_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_VERIFY_PARAM
, (cmp))

	)

2057 
	#sk_X509_VERIFY_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_VERIFY_PARAM
)

	)

2058 
	#sk_X509_VERIFY_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_VERIFY_PARAM
, (°))

	)

2059 
	#sk_X509_VERIFY_PARAM_num
(
°
Ë
	`SKM_sk_num
(
X509_VERIFY_PARAM
, (°))

	)

2060 
	#sk_X509_VERIFY_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_VERIFY_PARAM
, (°), (i))

	)

2061 
	#sk_X509_VERIFY_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_VERIFY_PARAM
, (°), (i), (vÆ))

	)

2062 
	#sk_X509_VERIFY_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_VERIFY_PARAM
, (°))

	)

2063 
	#sk_X509_VERIFY_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2064 
	#sk_X509_VERIFY_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2065 
	#sk_X509_VERIFY_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2066 
	#sk_X509_VERIFY_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2067 
	#sk_X509_VERIFY_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_VERIFY_PARAM
, (°), (i))

	)

2068 
	#sk_X509_VERIFY_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_VERIFY_PARAM
, (°), (±r))

	)

2069 
	#sk_X509_VERIFY_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_VERIFY_PARAM
, (°), (vÆ), (i))

	)

2070 
	#sk_X509_VERIFY_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_VERIFY_PARAM
, (°), (cmp))

	)

2071 
	#sk_X509_VERIFY_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
X509_VERIFY_PARAM
, st)

	)

2072 
	#sk_X509_VERIFY_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_VERIFY_PARAM
, (°), (‰ì_func))

	)

2073 
	#sk_X509_VERIFY_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_VERIFY_PARAM
, (°))

	)

2074 
	#sk_X509_VERIFY_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
X509_VERIFY_PARAM
, (°))

	)

2075 
	#sk_X509_VERIFY_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_VERIFY_PARAM
, (°))

	)

2076 
	#sk_X509_VERIFY_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_VERIFY_PARAM
, (°))

	)

2078 
	#sk_nid_åùÀ_√w
(
cmp
Ë
	`SKM_sk_√w
(
nid_åùÀ
, (cmp))

	)

2079 
	#sk_nid_åùÀ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
nid_åùÀ
)

	)

2080 
	#sk_nid_åùÀ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
nid_åùÀ
, (°))

	)

2081 
	#sk_nid_åùÀ_num
(
°
Ë
	`SKM_sk_num
(
nid_åùÀ
, (°))

	)

2082 
	#sk_nid_åùÀ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
nid_åùÀ
, (°), (i))

	)

2083 
	#sk_nid_åùÀ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
nid_åùÀ
, (°), (i), (vÆ))

	)

2084 
	#sk_nid_åùÀ_zîo
(
°
Ë
	`SKM_sk_zîo
(
nid_åùÀ
, (°))

	)

2085 
	#sk_nid_åùÀ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
nid_åùÀ
, (°), (vÆ))

	)

2086 
	#sk_nid_åùÀ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
nid_åùÀ
, (°), (vÆ))

	)

2087 
	#sk_nid_åùÀ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
nid_åùÀ
, (°), (vÆ))

	)

2088 
	#sk_nid_åùÀ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
nid_åùÀ
, (°), (vÆ))

	)

2089 
	#sk_nid_åùÀ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
nid_åùÀ
, (°), (i))

	)

2090 
	#sk_nid_åùÀ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
nid_åùÀ
, (°), (±r))

	)

2091 
	#sk_nid_åùÀ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
nid_åùÀ
, (°), (vÆ), (i))

	)

2092 
	#sk_nid_åùÀ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
nid_åùÀ
, (°), (cmp))

	)

2093 
	#sk_nid_åùÀ_dup
(
°
Ë
	`SKM_sk_dup
(
nid_åùÀ
, st)

	)

2094 
	#sk_nid_åùÀ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
nid_åùÀ
, (°), (‰ì_func))

	)

2095 
	#sk_nid_åùÀ_shi·
(
°
Ë
	`SKM_sk_shi·
(
nid_åùÀ
, (°))

	)

2096 
	#sk_nid_åùÀ_p›
(
°
Ë
	`SKM_sk_p›
(
nid_åùÀ
, (°))

	)

2097 
	#sk_nid_åùÀ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
nid_åùÀ
, (°))

	)

2098 
	#sk_nid_åùÀ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
nid_åùÀ
, (°))

	)

2100 
	#sk_void_√w
(
cmp
Ë
	`SKM_sk_√w
(, (cmp))

	)

2101 
	#sk_void_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
()

	)

2102 
	#sk_void_‰ì
(
°
Ë
	`SKM_sk_‰ì
(, (°))

	)

2103 
	#sk_void_num
(
°
Ë
	`SKM_sk_num
(, (°))

	)

2104 
	#sk_void_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(, (°), (i))

	)

2105 
	#sk_void_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(, (°), (i), (vÆ))

	)

2106 
	#sk_void_zîo
(
°
Ë
	`SKM_sk_zîo
(, (°))

	)

2107 
	#sk_void_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(, (°), (vÆ))

	)

2108 
	#sk_void_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(, (°), (vÆ))

	)

2109 
	#sk_void_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(, (°), (vÆ))

	)

2110 
	#sk_void_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(, (°), (vÆ))

	)

2111 
	#sk_void_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(, (°), (i))

	)

2112 
	#sk_void_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(, (°), (±r))

	)

2113 
	#sk_void_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(, (°), (vÆ), (i))

	)

2114 
	#sk_void_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(, (°), (cmp))

	)

2115 
	#sk_void_dup
(
°
Ë
	`SKM_sk_dup
(, st)

	)

2116 
	#sk_void_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(, (°), (‰ì_func))

	)

2117 
	#sk_void_shi·
(
°
Ë
	`SKM_sk_shi·
(, (°))

	)

2118 
	#sk_void_p›
(
°
Ë
	`SKM_sk_p›
(, (°))

	)

2119 
	#sk_void_s‹t
(
°
Ë
	`SKM_sk_s‹t
(, (°))

	)

2120 
	#sk_void_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(, (°))

	)

2122 
	#sk_OPENSSL_STRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(, cmp)))

	)

2123 
	#sk_OPENSSL_STRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_√w_nuŒ
())

	)

2124 
	#sk_OPENSSL_STRING_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2125 
	#sk_OPENSSL_STRING_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2126 
	#sk_OPENSSL_STRING_vÆue
(
°
, 
i
Ë((
OPENSSL_STRING
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), i))

	)

2127 
	#sk_OPENSSL_STRING_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_STRING
, st)

	)

2128 
	#sk_OPENSSL_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_STRING, fªe_func))

	)

2129 
	#sk_OPENSSL_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ), i)

	)

2130 
	#sk_OPENSSL_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_STRING
, st)

	)

2131 
	#sk_OPENSSL_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), i, 
	`CHECKED_PTR_OF
(, vÆ))

	)

2132 
	#sk_OPENSSL_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_STRING
, (°))

	)

2133 
	#sk_OPENSSL_STRING_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2134 
	#sk_OPENSSL_STRING_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_STRING
), st), CHECKED_CONST_PTR_OF(, vÆ))

	)

2135 
	#sk_OPENSSL_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_STRING
, (°), (i))

	)

2136 
	#sk_OPENSSL_STRING_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_STRING
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), 
	`CHECKED_PTR_OF
(,Öå))

	)

2137 
	#sk_OPENSSL_STRING_£t_cmp_func
(
°
, 
cmp
) \

2139 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(, 
cmp
)))

	)

2140 
	#sk_OPENSSL_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_STRING
, st)

	)

2141 
	#sk_OPENSSL_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_STRING
, (°))

	)

2142 
	#sk_OPENSSL_STRING_p›
(
°
Ë(*)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st))

	)

2143 
	#sk_OPENSSL_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_STRING
, (°))

	)

2144 
	#sk_OPENSSL_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_STRING
, (°))

	)

2147 
	#sk_OPENSSL_BLOCK_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(, cmp)))

	)

2148 
	#sk_OPENSSL_BLOCK_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_√w_nuŒ
())

	)

2149 
	#sk_OPENSSL_BLOCK_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2150 
	#sk_OPENSSL_BLOCK_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2151 
	#sk_OPENSSL_BLOCK_vÆue
(
°
, 
i
Ë((
OPENSSL_BLOCK
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), i))

	)

2152 
	#sk_OPENSSL_BLOCK_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_BLOCK
, st)

	)

2153 
	#sk_OPENSSL_BLOCK_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_BLOCK, fªe_func))

	)

2154 
	#sk_OPENSSL_BLOCK_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ), i)

	)

2155 
	#sk_OPENSSL_BLOCK_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_BLOCK
, st)

	)

2156 
	#sk_OPENSSL_BLOCK_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), i, 
	`CHECKED_PTR_OF
(, vÆ))

	)

2157 
	#sk_OPENSSL_BLOCK_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_BLOCK
, (°))

	)

2158 
	#sk_OPENSSL_BLOCK_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2159 
	#sk_OPENSSL_BLOCK_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_BLOCK
), st), CHECKED_CONST_PTR_OF(, vÆ))

	)

2160 
	#sk_OPENSSL_BLOCK_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_BLOCK
, (°), (i))

	)

2161 
	#sk_OPENSSL_BLOCK_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_BLOCK
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), 
	`CHECKED_PTR_OF
(,Öå))

	)

2162 
	#sk_OPENSSL_BLOCK_£t_cmp_func
(
°
, 
cmp
) \

2164 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(, 
cmp
)))

	)

2165 
	#sk_OPENSSL_BLOCK_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_BLOCK
, st)

	)

2166 
	#sk_OPENSSL_BLOCK_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_BLOCK
, (°))

	)

2167 
	#sk_OPENSSL_BLOCK_p›
(
°
Ë(*)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st))

	)

2168 
	#sk_OPENSSL_BLOCK_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_BLOCK
, (°))

	)

2169 
	#sk_OPENSSL_BLOCK_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_BLOCK
, (°))

	)

2172 
	#sk_OPENSSL_PSTRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(
OPENSSL_STRING
, cmp)))

	)

2173 
	#sk_OPENSSL_PSTRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_√w_nuŒ
())

	)

2174 
	#sk_OPENSSL_PSTRING_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2175 
	#sk_OPENSSL_PSTRING_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2176 
	#sk_OPENSSL_PSTRING_vÆue
(
°
, 
i
Ë((
OPENSSL_PSTRING
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), i))

	)

2177 
	#sk_OPENSSL_PSTRING_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_PSTRING
, st)

	)

2178 
	#sk_OPENSSL_PSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_PSTRING, fªe_func))

	)

2179 
	#sk_OPENSSL_PSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ), i)

	)

2180 
	#sk_OPENSSL_PSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_PSTRING
, st)

	)

2181 
	#sk_OPENSSL_PSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), i, 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2182 
	#sk_OPENSSL_PSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_PSTRING
, (°))

	)

2183 
	#sk_OPENSSL_PSTRING_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2184 
	#sk_OPENSSL_PSTRING_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_PSTRING
), st), CHECKED_CONST_PTR_OF(
OPENSSL_STRING
, vÆ))

	)

2185 
	#sk_OPENSSL_PSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_PSTRING
, (°), (i))

	)

2186 
	#sk_OPENSSL_PSTRING_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_PSTRING
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
,Öå))

	)

2187 
	#sk_OPENSSL_PSTRING_£t_cmp_func
(
°
, 
cmp
) \

2188 (((*)(c⁄° 
OPENSSL_STRING
 * const *,const OPENSSL_STRING * const *)) \

2189 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(
OPENSSL_STRING
, 
cmp
)))

	)

2190 
	#sk_OPENSSL_PSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_PSTRING
, st)

	)

2191 
	#sk_OPENSSL_PSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_PSTRING
, (°))

	)

2192 
	#sk_OPENSSL_PSTRING_p›
(
°
Ë(
OPENSSL_STRING
 *)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st))

	)

2193 
	#sk_OPENSSL_PSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_PSTRING
, (°))

	)

2194 
	#sk_OPENSSL_PSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_PSTRING
, (°))

	)

2197 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2198 
	`SKM_ASN1_SET_OF_d2i
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2199 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2200 
	`SKM_ASN1_SET_OF_i2d
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2201 
	#ASN1_£q_∑ck_ACCESS_DESCRIPTION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2202 
	`SKM_ASN1_£q_∑ck
(
ACCESS_DESCRIPTION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2203 
	#ASN1_£q_u≈ack_ACCESS_DESCRIPTION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2204 
	`SKM_ASN1_£q_u≈ack
(
ACCESS_DESCRIPTION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2206 
	#d2i_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2207 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_INTEGER
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2208 
	#i2d_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2209 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_INTEGER
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2210 
	#ASN1_£q_∑ck_ASN1_INTEGER
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2211 
	`SKM_ASN1_£q_∑ck
(
ASN1_INTEGER
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2212 
	#ASN1_£q_u≈ack_ASN1_INTEGER
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2213 
	`SKM_ASN1_£q_u≈ack
(
ASN1_INTEGER
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2215 
	#d2i_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2216 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_OBJECT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2217 
	#i2d_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2218 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_OBJECT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2219 
	#ASN1_£q_∑ck_ASN1_OBJECT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2220 
	`SKM_ASN1_£q_∑ck
(
ASN1_OBJECT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2221 
	#ASN1_£q_u≈ack_ASN1_OBJECT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2222 
	`SKM_ASN1_£q_u≈ack
(
ASN1_OBJECT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2224 
	#d2i_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2225 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_TYPE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2226 
	#i2d_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2227 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_TYPE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2228 
	#ASN1_£q_∑ck_ASN1_TYPE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2229 
	`SKM_ASN1_£q_∑ck
(
ASN1_TYPE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2230 
	#ASN1_£q_u≈ack_ASN1_TYPE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2231 
	`SKM_ASN1_£q_u≈ack
(
ASN1_TYPE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2233 
	#d2i_ASN1_SET_OF_ASN1_UTF8STRING
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2234 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_UTF8STRING
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2235 
	#i2d_ASN1_SET_OF_ASN1_UTF8STRING
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2236 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_UTF8STRING
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2237 
	#ASN1_£q_∑ck_ASN1_UTF8STRING
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2238 
	`SKM_ASN1_£q_∑ck
(
ASN1_UTF8STRING
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2239 
	#ASN1_£q_u≈ack_ASN1_UTF8STRING
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2240 
	`SKM_ASN1_£q_u≈ack
(
ASN1_UTF8STRING
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2242 
	#d2i_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2243 
	`SKM_ASN1_SET_OF_d2i
(
DIST_POINT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2244 
	#i2d_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2245 
	`SKM_ASN1_SET_OF_i2d
(
DIST_POINT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2246 
	#ASN1_£q_∑ck_DIST_POINT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2247 
	`SKM_ASN1_£q_∑ck
(
DIST_POINT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2248 
	#ASN1_£q_u≈ack_DIST_POINT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2249 
	`SKM_ASN1_£q_u≈ack
(
DIST_POINT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2251 
	#d2i_ASN1_SET_OF_ESS_CERT_ID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2252 
	`SKM_ASN1_SET_OF_d2i
(
ESS_CERT_ID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2253 
	#i2d_ASN1_SET_OF_ESS_CERT_ID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2254 
	`SKM_ASN1_SET_OF_i2d
(
ESS_CERT_ID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2255 
	#ASN1_£q_∑ck_ESS_CERT_ID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2256 
	`SKM_ASN1_£q_∑ck
(
ESS_CERT_ID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2257 
	#ASN1_£q_u≈ack_ESS_CERT_ID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2258 
	`SKM_ASN1_£q_u≈ack
(
ESS_CERT_ID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2260 
	#d2i_ASN1_SET_OF_EVP_MD
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2261 
	`SKM_ASN1_SET_OF_d2i
(
EVP_MD
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2262 
	#i2d_ASN1_SET_OF_EVP_MD
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2263 
	`SKM_ASN1_SET_OF_i2d
(
EVP_MD
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2264 
	#ASN1_£q_∑ck_EVP_MD
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2265 
	`SKM_ASN1_£q_∑ck
(
EVP_MD
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2266 
	#ASN1_£q_u≈ack_EVP_MD
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2267 
	`SKM_ASN1_£q_u≈ack
(
EVP_MD
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2269 
	#d2i_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2270 
	`SKM_ASN1_SET_OF_d2i
(
GENERAL_NAME
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2271 
	#i2d_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2272 
	`SKM_ASN1_SET_OF_i2d
(
GENERAL_NAME
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2273 
	#ASN1_£q_∑ck_GENERAL_NAME
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2274 
	`SKM_ASN1_£q_∑ck
(
GENERAL_NAME
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2275 
	#ASN1_£q_u≈ack_GENERAL_NAME
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2276 
	`SKM_ASN1_£q_u≈ack
(
GENERAL_NAME
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2278 
	#d2i_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2279 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_ONEREQ
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2280 
	#i2d_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2281 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_ONEREQ
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2282 
	#ASN1_£q_∑ck_OCSP_ONEREQ
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2283 
	`SKM_ASN1_£q_∑ck
(
OCSP_ONEREQ
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2284 
	#ASN1_£q_u≈ack_OCSP_ONEREQ
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2285 
	`SKM_ASN1_£q_u≈ack
(
OCSP_ONEREQ
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2287 
	#d2i_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2288 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2289 
	#i2d_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2290 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2291 
	#ASN1_£q_∑ck_OCSP_SINGLERESP
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2292 
	`SKM_ASN1_£q_∑ck
(
OCSP_SINGLERESP
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2293 
	#ASN1_£q_u≈ack_OCSP_SINGLERESP
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2294 
	`SKM_ASN1_£q_u≈ack
(
OCSP_SINGLERESP
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2296 
	#d2i_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2297 
	`SKM_ASN1_SET_OF_d2i
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2298 
	#i2d_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2299 
	`SKM_ASN1_SET_OF_i2d
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2300 
	#ASN1_£q_∑ck_PKCS12_SAFEBAG
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2301 
	`SKM_ASN1_£q_∑ck
(
PKCS12_SAFEBAG
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2302 
	#ASN1_£q_u≈ack_PKCS12_SAFEBAG
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2303 
	`SKM_ASN1_£q_u≈ack
(
PKCS12_SAFEBAG
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2305 
	#d2i_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2306 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2307 
	#i2d_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2308 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2309 
	#ASN1_£q_∑ck_PKCS7
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2310 
	`SKM_ASN1_£q_∑ck
(
PKCS7
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2311 
	#ASN1_£q_u≈ack_PKCS7
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2312 
	`SKM_ASN1_£q_u≈ack
(
PKCS7
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2314 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2315 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2316 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2317 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2318 
	#ASN1_£q_∑ck_PKCS7_RECIP_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2319 
	`SKM_ASN1_£q_∑ck
(
PKCS7_RECIP_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2320 
	#ASN1_£q_u≈ack_PKCS7_RECIP_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2321 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_RECIP_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2323 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2324 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2325 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2326 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2327 
	#ASN1_£q_∑ck_PKCS7_SIGNER_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2328 
	`SKM_ASN1_£q_∑ck
(
PKCS7_SIGNER_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2329 
	#ASN1_£q_u≈ack_PKCS7_SIGNER_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2330 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_SIGNER_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2332 
	#d2i_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2333 
	`SKM_ASN1_SET_OF_d2i
(
POLICYINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2334 
	#i2d_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2335 
	`SKM_ASN1_SET_OF_i2d
(
POLICYINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2336 
	#ASN1_£q_∑ck_POLICYINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2337 
	`SKM_ASN1_£q_∑ck
(
POLICYINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2338 
	#ASN1_£q_u≈ack_POLICYINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2339 
	`SKM_ASN1_£q_u≈ack
(
POLICYINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2341 
	#d2i_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2342 
	`SKM_ASN1_SET_OF_d2i
(
POLICYQUALINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2343 
	#i2d_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2344 
	`SKM_ASN1_SET_OF_i2d
(
POLICYQUALINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2345 
	#ASN1_£q_∑ck_POLICYQUALINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2346 
	`SKM_ASN1_£q_∑ck
(
POLICYQUALINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2347 
	#ASN1_£q_u≈ack_POLICYQUALINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2348 
	`SKM_ASN1_£q_u≈ack
(
POLICYQUALINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2350 
	#d2i_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2351 
	`SKM_ASN1_SET_OF_d2i
(
SXNETID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2352 
	#i2d_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2353 
	`SKM_ASN1_SET_OF_i2d
(
SXNETID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2354 
	#ASN1_£q_∑ck_SXNETID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2355 
	`SKM_ASN1_£q_∑ck
(
SXNETID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2356 
	#ASN1_£q_u≈ack_SXNETID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2357 
	`SKM_ASN1_£q_u≈ack
(
SXNETID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2359 
	#d2i_ASN1_SET_OF_X509
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2360 
	`SKM_ASN1_SET_OF_d2i
(
X509
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2361 
	#i2d_ASN1_SET_OF_X509
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2362 
	`SKM_ASN1_SET_OF_i2d
(
X509
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2363 
	#ASN1_£q_∑ck_X509
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2364 
	`SKM_ASN1_£q_∑ck
(
X509
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2365 
	#ASN1_£q_u≈ack_X509
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2366 
	`SKM_ASN1_£q_u≈ack
(
X509
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2368 
	#d2i_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2369 
	`SKM_ASN1_SET_OF_d2i
(
X509_ALGOR
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2370 
	#i2d_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2371 
	`SKM_ASN1_SET_OF_i2d
(
X509_ALGOR
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2372 
	#ASN1_£q_∑ck_X509_ALGOR
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2373 
	`SKM_ASN1_£q_∑ck
(
X509_ALGOR
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2374 
	#ASN1_£q_u≈ack_X509_ALGOR
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2375 
	`SKM_ASN1_£q_u≈ack
(
X509_ALGOR
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2377 
	#d2i_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2378 
	`SKM_ASN1_SET_OF_d2i
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2379 
	#i2d_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2380 
	`SKM_ASN1_SET_OF_i2d
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2381 
	#ASN1_£q_∑ck_X509_ATTRIBUTE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2382 
	`SKM_ASN1_£q_∑ck
(
X509_ATTRIBUTE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2383 
	#ASN1_£q_u≈ack_X509_ATTRIBUTE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2384 
	`SKM_ASN1_£q_u≈ack
(
X509_ATTRIBUTE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2386 
	#d2i_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2387 
	`SKM_ASN1_SET_OF_d2i
(
X509_CRL
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2388 
	#i2d_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2389 
	`SKM_ASN1_SET_OF_i2d
(
X509_CRL
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2390 
	#ASN1_£q_∑ck_X509_CRL
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2391 
	`SKM_ASN1_£q_∑ck
(
X509_CRL
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2392 
	#ASN1_£q_u≈ack_X509_CRL
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2393 
	`SKM_ASN1_£q_u≈ack
(
X509_CRL
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2395 
	#d2i_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2396 
	`SKM_ASN1_SET_OF_d2i
(
X509_EXTENSION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2397 
	#i2d_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2398 
	`SKM_ASN1_SET_OF_i2d
(
X509_EXTENSION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2399 
	#ASN1_£q_∑ck_X509_EXTENSION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2400 
	`SKM_ASN1_£q_∑ck
(
X509_EXTENSION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2401 
	#ASN1_£q_u≈ack_X509_EXTENSION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2402 
	`SKM_ASN1_£q_u≈ack
(
X509_EXTENSION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2404 
	#d2i_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2405 
	`SKM_ASN1_SET_OF_d2i
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2406 
	#i2d_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2407 
	`SKM_ASN1_SET_OF_i2d
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2408 
	#ASN1_£q_∑ck_X509_NAME_ENTRY
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2409 
	`SKM_ASN1_£q_∑ck
(
X509_NAME_ENTRY
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2410 
	#ASN1_£q_u≈ack_X509_NAME_ENTRY
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2411 
	`SKM_ASN1_£q_u≈ack
(
X509_NAME_ENTRY
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2413 
	#d2i_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2414 
	`SKM_ASN1_SET_OF_d2i
(
X509_REVOKED
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2415 
	#i2d_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2416 
	`SKM_ASN1_SET_OF_i2d
(
X509_REVOKED
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2417 
	#ASN1_£q_∑ck_X509_REVOKED
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2418 
	`SKM_ASN1_£q_∑ck
(
X509_REVOKED
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2419 
	#ASN1_£q_u≈ack_X509_REVOKED
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2420 
	`SKM_ASN1_£q_u≈ack
(
X509_REVOKED
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2422 
	#PKCS12_de¸y±_d2i_PKCS12_SAFEBAG
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

2423 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS12_SAFEBAG
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

2425 
	#PKCS12_de¸y±_d2i_PKCS7
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

2426 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS7
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

2428 
	#lh_ADDED_OBJ_√w
(Ë
	`LHM_lh_√w
(
ADDED_OBJ
,
added_obj
)

	)

2429 
	#lh_ADDED_OBJ_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ADDED_OBJ
,lh,ö°)

	)

2430 
	#lh_ADDED_OBJ_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ADDED_OBJ
,lh,ö°)

	)

2431 
	#lh_ADDED_OBJ_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ADDED_OBJ
,lh,ö°)

	)

2432 
	#lh_ADDED_OBJ_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ADDED_OBJ
,lh,‚)

	)

2433 
	#lh_ADDED_OBJ_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2434 
	`LHM_lh_dﬂŒ_¨g
(
ADDED_OBJ
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2435 
	#lh_ADDED_OBJ_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ADDED_OBJ
,lh)

	)

2436 
	#lh_ADDED_OBJ_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ADDED_OBJ
,lh)

	)

2437 
	#lh_ADDED_OBJ_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ADDED_OBJ
,lh)

	)

2438 
	#lh_ADDED_OBJ_node_°©s_bio
(
lh
,
out
) \

2439 
	`LHM_lh_node_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2440 
	#lh_ADDED_OBJ_node_ußge_°©s_bio
(
lh
,
out
) \

2441 
	`LHM_lh_node_ußge_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2442 
	#lh_ADDED_OBJ_°©s_bio
(
lh
,
out
) \

2443 
	`LHM_lh_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2444 
	#lh_ADDED_OBJ_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ADDED_OBJ
,lh)

	)

2446 
	#lh_APP_INFO_√w
(Ë
	`LHM_lh_√w
(
APP_INFO
,
≠p_öfo
)

	)

2447 
	#lh_APP_INFO_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
APP_INFO
,lh,ö°)

	)

2448 
	#lh_APP_INFO_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
APP_INFO
,lh,ö°)

	)

2449 
	#lh_APP_INFO_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
APP_INFO
,lh,ö°)

	)

2450 
	#lh_APP_INFO_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
APP_INFO
,lh,‚)

	)

2451 
	#lh_APP_INFO_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2452 
	`LHM_lh_dﬂŒ_¨g
(
APP_INFO
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2453 
	#lh_APP_INFO_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
APP_INFO
,lh)

	)

2454 
	#lh_APP_INFO_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
APP_INFO
,lh)

	)

2455 
	#lh_APP_INFO_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
APP_INFO
,lh)

	)

2456 
	#lh_APP_INFO_node_°©s_bio
(
lh
,
out
) \

2457 
	`LHM_lh_node_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2458 
	#lh_APP_INFO_node_ußge_°©s_bio
(
lh
,
out
) \

2459 
	`LHM_lh_node_ußge_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2460 
	#lh_APP_INFO_°©s_bio
(
lh
,
out
) \

2461 
	`LHM_lh_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2462 
	#lh_APP_INFO_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
APP_INFO
,lh)

	)

2464 
	#lh_CONF_VALUE_√w
(Ë
	`LHM_lh_√w
(
CONF_VALUE
,
c⁄f_vÆue
)

	)

2465 
	#lh_CONF_VALUE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
CONF_VALUE
,lh,ö°)

	)

2466 
	#lh_CONF_VALUE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
CONF_VALUE
,lh,ö°)

	)

2467 
	#lh_CONF_VALUE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
CONF_VALUE
,lh,ö°)

	)

2468 
	#lh_CONF_VALUE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
CONF_VALUE
,lh,‚)

	)

2469 
	#lh_CONF_VALUE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2470 
	`LHM_lh_dﬂŒ_¨g
(
CONF_VALUE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2471 
	#lh_CONF_VALUE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
CONF_VALUE
,lh)

	)

2472 
	#lh_CONF_VALUE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
CONF_VALUE
,lh)

	)

2473 
	#lh_CONF_VALUE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
CONF_VALUE
,lh)

	)

2474 
	#lh_CONF_VALUE_node_°©s_bio
(
lh
,
out
) \

2475 
	`LHM_lh_node_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2476 
	#lh_CONF_VALUE_node_ußge_°©s_bio
(
lh
,
out
) \

2477 
	`LHM_lh_node_ußge_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2478 
	#lh_CONF_VALUE_°©s_bio
(
lh
,
out
) \

2479 
	`LHM_lh_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2480 
	#lh_CONF_VALUE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
CONF_VALUE
,lh)

	)

2482 
	#lh_ENGINE_PILE_√w
(Ë
	`LHM_lh_√w
(
ENGINE_PILE
,
ígöe_pûe
)

	)

2483 
	#lh_ENGINE_PILE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ENGINE_PILE
,lh,ö°)

	)

2484 
	#lh_ENGINE_PILE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ENGINE_PILE
,lh,ö°)

	)

2485 
	#lh_ENGINE_PILE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ENGINE_PILE
,lh,ö°)

	)

2486 
	#lh_ENGINE_PILE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ENGINE_PILE
,lh,‚)

	)

2487 
	#lh_ENGINE_PILE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2488 
	`LHM_lh_dﬂŒ_¨g
(
ENGINE_PILE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2489 
	#lh_ENGINE_PILE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ENGINE_PILE
,lh)

	)

2490 
	#lh_ENGINE_PILE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ENGINE_PILE
,lh)

	)

2491 
	#lh_ENGINE_PILE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ENGINE_PILE
,lh)

	)

2492 
	#lh_ENGINE_PILE_node_°©s_bio
(
lh
,
out
) \

2493 
	`LHM_lh_node_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2494 
	#lh_ENGINE_PILE_node_ußge_°©s_bio
(
lh
,
out
) \

2495 
	`LHM_lh_node_ußge_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2496 
	#lh_ENGINE_PILE_°©s_bio
(
lh
,
out
) \

2497 
	`LHM_lh_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2498 
	#lh_ENGINE_PILE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ENGINE_PILE
,lh)

	)

2500 
	#lh_ERR_STATE_√w
(Ë
	`LHM_lh_√w
(
ERR_STATE
,
îr_°©e
)

	)

2501 
	#lh_ERR_STATE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ERR_STATE
,lh,ö°)

	)

2502 
	#lh_ERR_STATE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ERR_STATE
,lh,ö°)

	)

2503 
	#lh_ERR_STATE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ERR_STATE
,lh,ö°)

	)

2504 
	#lh_ERR_STATE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ERR_STATE
,lh,‚)

	)

2505 
	#lh_ERR_STATE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2506 
	`LHM_lh_dﬂŒ_¨g
(
ERR_STATE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2507 
	#lh_ERR_STATE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ERR_STATE
,lh)

	)

2508 
	#lh_ERR_STATE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ERR_STATE
,lh)

	)

2509 
	#lh_ERR_STATE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ERR_STATE
,lh)

	)

2510 
	#lh_ERR_STATE_node_°©s_bio
(
lh
,
out
) \

2511 
	`LHM_lh_node_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2512 
	#lh_ERR_STATE_node_ußge_°©s_bio
(
lh
,
out
) \

2513 
	`LHM_lh_node_ußge_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2514 
	#lh_ERR_STATE_°©s_bio
(
lh
,
out
) \

2515 
	`LHM_lh_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2516 
	#lh_ERR_STATE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ERR_STATE
,lh)

	)

2518 
	#lh_ERR_STRING_DATA_√w
(Ë
	`LHM_lh_√w
(
ERR_STRING_DATA
,
îr_°rög_d©a
)

	)

2519 
	#lh_ERR_STRING_DATA_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ERR_STRING_DATA
,lh,ö°)

	)

2520 
	#lh_ERR_STRING_DATA_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ERR_STRING_DATA
,lh,ö°)

	)

2521 
	#lh_ERR_STRING_DATA_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ERR_STRING_DATA
,lh,ö°)

	)

2522 
	#lh_ERR_STRING_DATA_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ERR_STRING_DATA
,lh,‚)

	)

2523 
	#lh_ERR_STRING_DATA_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2524 
	`LHM_lh_dﬂŒ_¨g
(
ERR_STRING_DATA
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2525 
	#lh_ERR_STRING_DATA_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ERR_STRING_DATA
,lh)

	)

2526 
	#lh_ERR_STRING_DATA_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ERR_STRING_DATA
,lh)

	)

2527 
	#lh_ERR_STRING_DATA_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ERR_STRING_DATA
,lh)

	)

2528 
	#lh_ERR_STRING_DATA_node_°©s_bio
(
lh
,
out
) \

2529 
	`LHM_lh_node_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2530 
	#lh_ERR_STRING_DATA_node_ußge_°©s_bio
(
lh
,
out
) \

2531 
	`LHM_lh_node_ußge_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2532 
	#lh_ERR_STRING_DATA_°©s_bio
(
lh
,
out
) \

2533 
	`LHM_lh_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2534 
	#lh_ERR_STRING_DATA_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ERR_STRING_DATA
,lh)

	)

2536 
	#lh_EX_CLASS_ITEM_√w
(Ë
	`LHM_lh_√w
(
EX_CLASS_ITEM
,
ex_˛ass_ôem
)

	)

2537 
	#lh_EX_CLASS_ITEM_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
EX_CLASS_ITEM
,lh,ö°)

	)

2538 
	#lh_EX_CLASS_ITEM_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
EX_CLASS_ITEM
,lh,ö°)

	)

2539 
	#lh_EX_CLASS_ITEM_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
EX_CLASS_ITEM
,lh,ö°)

	)

2540 
	#lh_EX_CLASS_ITEM_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
EX_CLASS_ITEM
,lh,‚)

	)

2541 
	#lh_EX_CLASS_ITEM_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2542 
	`LHM_lh_dﬂŒ_¨g
(
EX_CLASS_ITEM
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2543 
	#lh_EX_CLASS_ITEM_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
EX_CLASS_ITEM
,lh)

	)

2544 
	#lh_EX_CLASS_ITEM_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
EX_CLASS_ITEM
,lh)

	)

2545 
	#lh_EX_CLASS_ITEM_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
EX_CLASS_ITEM
,lh)

	)

2546 
	#lh_EX_CLASS_ITEM_node_°©s_bio
(
lh
,
out
) \

2547 
	`LHM_lh_node_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2548 
	#lh_EX_CLASS_ITEM_node_ußge_°©s_bio
(
lh
,
out
) \

2549 
	`LHM_lh_node_ußge_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2550 
	#lh_EX_CLASS_ITEM_°©s_bio
(
lh
,
out
) \

2551 
	`LHM_lh_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2552 
	#lh_EX_CLASS_ITEM_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
EX_CLASS_ITEM
,lh)

	)

2554 
	#lh_FUNCTION_√w
(Ë
	`LHM_lh_√w
(
FUNCTION
,
fun˘i⁄
)

	)

2555 
	#lh_FUNCTION_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
FUNCTION
,lh,ö°)

	)

2556 
	#lh_FUNCTION_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
FUNCTION
,lh,ö°)

	)

2557 
	#lh_FUNCTION_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
FUNCTION
,lh,ö°)

	)

2558 
	#lh_FUNCTION_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
FUNCTION
,lh,‚)

	)

2559 
	#lh_FUNCTION_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2560 
	`LHM_lh_dﬂŒ_¨g
(
FUNCTION
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2561 
	#lh_FUNCTION_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
FUNCTION
,lh)

	)

2562 
	#lh_FUNCTION_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
FUNCTION
,lh)

	)

2563 
	#lh_FUNCTION_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
FUNCTION
,lh)

	)

2564 
	#lh_FUNCTION_node_°©s_bio
(
lh
,
out
) \

2565 
	`LHM_lh_node_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2566 
	#lh_FUNCTION_node_ußge_°©s_bio
(
lh
,
out
) \

2567 
	`LHM_lh_node_ußge_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2568 
	#lh_FUNCTION_°©s_bio
(
lh
,
out
) \

2569 
	`LHM_lh_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2570 
	#lh_FUNCTION_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
FUNCTION
,lh)

	)

2572 
	#lh_MEM_√w
(Ë
	`LHM_lh_√w
(
MEM
,
mem
)

	)

2573 
	#lh_MEM_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
MEM
,lh,ö°)

	)

2574 
	#lh_MEM_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
MEM
,lh,ö°)

	)

2575 
	#lh_MEM_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
MEM
,lh,ö°)

	)

2576 
	#lh_MEM_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
MEM
,lh,‚)

	)

2577 
	#lh_MEM_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2578 
	`LHM_lh_dﬂŒ_¨g
(
MEM
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2579 
	#lh_MEM_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
MEM
,lh)

	)

2580 
	#lh_MEM_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
MEM
,lh)

	)

2581 
	#lh_MEM_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
MEM
,lh)

	)

2582 
	#lh_MEM_node_°©s_bio
(
lh
,
out
) \

2583 
	`LHM_lh_node_°©s_bio
(
MEM
,
lh
,
out
)

	)

2584 
	#lh_MEM_node_ußge_°©s_bio
(
lh
,
out
) \

2585 
	`LHM_lh_node_ußge_°©s_bio
(
MEM
,
lh
,
out
)

	)

2586 
	#lh_MEM_°©s_bio
(
lh
,
out
) \

2587 
	`LHM_lh_°©s_bio
(
MEM
,
lh
,
out
)

	)

2588 
	#lh_MEM_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
MEM
,lh)

	)

2590 
	#lh_OBJ_NAME_√w
(Ë
	`LHM_lh_√w
(
OBJ_NAME
,
obj_«me
)

	)

2591 
	#lh_OBJ_NAME_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OBJ_NAME
,lh,ö°)

	)

2592 
	#lh_OBJ_NAME_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OBJ_NAME
,lh,ö°)

	)

2593 
	#lh_OBJ_NAME_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OBJ_NAME
,lh,ö°)

	)

2594 
	#lh_OBJ_NAME_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OBJ_NAME
,lh,‚)

	)

2595 
	#lh_OBJ_NAME_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2596 
	`LHM_lh_dﬂŒ_¨g
(
OBJ_NAME
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2597 
	#lh_OBJ_NAME_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OBJ_NAME
,lh)

	)

2598 
	#lh_OBJ_NAME_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OBJ_NAME
,lh)

	)

2599 
	#lh_OBJ_NAME_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OBJ_NAME
,lh)

	)

2600 
	#lh_OBJ_NAME_node_°©s_bio
(
lh
,
out
) \

2601 
	`LHM_lh_node_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2602 
	#lh_OBJ_NAME_node_ußge_°©s_bio
(
lh
,
out
) \

2603 
	`LHM_lh_node_ußge_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2604 
	#lh_OBJ_NAME_°©s_bio
(
lh
,
out
) \

2605 
	`LHM_lh_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2606 
	#lh_OBJ_NAME_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OBJ_NAME
,lh)

	)

2608 
	#lh_OPENSSL_CSTRING_√w
(Ë
	`LHM_lh_√w
(
OPENSSL_CSTRING
,
›ís¶_c°rög
)

	)

2609 
	#lh_OPENSSL_CSTRING_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OPENSSL_CSTRING
,lh,ö°)

	)

2610 
	#lh_OPENSSL_CSTRING_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OPENSSL_CSTRING
,lh,ö°)

	)

2611 
	#lh_OPENSSL_CSTRING_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OPENSSL_CSTRING
,lh,ö°)

	)

2612 
	#lh_OPENSSL_CSTRING_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OPENSSL_CSTRING
,lh,‚)

	)

2613 
	#lh_OPENSSL_CSTRING_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2614 
	`LHM_lh_dﬂŒ_¨g
(
OPENSSL_CSTRING
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2615 
	#lh_OPENSSL_CSTRING_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OPENSSL_CSTRING
,lh)

	)

2616 
	#lh_OPENSSL_CSTRING_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OPENSSL_CSTRING
,lh)

	)

2617 
	#lh_OPENSSL_CSTRING_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OPENSSL_CSTRING
,lh)

	)

2618 
	#lh_OPENSSL_CSTRING_node_°©s_bio
(
lh
,
out
) \

2619 
	`LHM_lh_node_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2620 
	#lh_OPENSSL_CSTRING_node_ußge_°©s_bio
(
lh
,
out
) \

2621 
	`LHM_lh_node_ußge_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2622 
	#lh_OPENSSL_CSTRING_°©s_bio
(
lh
,
out
) \

2623 
	`LHM_lh_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2624 
	#lh_OPENSSL_CSTRING_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OPENSSL_CSTRING
,lh)

	)

2626 
	#lh_OPENSSL_STRING_√w
(Ë
	`LHM_lh_√w
(
OPENSSL_STRING
,
›ís¶_°rög
)

	)

2627 
	#lh_OPENSSL_STRING_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OPENSSL_STRING
,lh,ö°)

	)

2628 
	#lh_OPENSSL_STRING_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OPENSSL_STRING
,lh,ö°)

	)

2629 
	#lh_OPENSSL_STRING_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OPENSSL_STRING
,lh,ö°)

	)

2630 
	#lh_OPENSSL_STRING_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OPENSSL_STRING
,lh,‚)

	)

2631 
	#lh_OPENSSL_STRING_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2632 
	`LHM_lh_dﬂŒ_¨g
(
OPENSSL_STRING
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2633 
	#lh_OPENSSL_STRING_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OPENSSL_STRING
,lh)

	)

2634 
	#lh_OPENSSL_STRING_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OPENSSL_STRING
,lh)

	)

2635 
	#lh_OPENSSL_STRING_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OPENSSL_STRING
,lh)

	)

2636 
	#lh_OPENSSL_STRING_node_°©s_bio
(
lh
,
out
) \

2637 
	`LHM_lh_node_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2638 
	#lh_OPENSSL_STRING_node_ußge_°©s_bio
(
lh
,
out
) \

2639 
	`LHM_lh_node_ußge_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2640 
	#lh_OPENSSL_STRING_°©s_bio
(
lh
,
out
) \

2641 
	`LHM_lh_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2642 
	#lh_OPENSSL_STRING_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OPENSSL_STRING
,lh)

	)

2644 
	#lh_SSL_SESSION_√w
(Ë
	`LHM_lh_√w
(
SSL_SESSION
,
s¶_£ssi⁄
)

	)

2645 
	#lh_SSL_SESSION_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
SSL_SESSION
,lh,ö°)

	)

2646 
	#lh_SSL_SESSION_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
SSL_SESSION
,lh,ö°)

	)

2647 
	#lh_SSL_SESSION_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
SSL_SESSION
,lh,ö°)

	)

2648 
	#lh_SSL_SESSION_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
SSL_SESSION
,lh,‚)

	)

2649 
	#lh_SSL_SESSION_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2650 
	`LHM_lh_dﬂŒ_¨g
(
SSL_SESSION
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2651 
	#lh_SSL_SESSION_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
SSL_SESSION
,lh)

	)

2652 
	#lh_SSL_SESSION_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
SSL_SESSION
,lh)

	)

2653 
	#lh_SSL_SESSION_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
SSL_SESSION
,lh)

	)

2654 
	#lh_SSL_SESSION_node_°©s_bio
(
lh
,
out
) \

2655 
	`LHM_lh_node_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2656 
	#lh_SSL_SESSION_node_ußge_°©s_bio
(
lh
,
out
) \

2657 
	`LHM_lh_node_ußge_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2658 
	#lh_SSL_SESSION_°©s_bio
(
lh
,
out
) \

2659 
	`LHM_lh_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2660 
	#lh_SSL_SESSION_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
SSL_SESSION
,lh)

	)

	@/usr/include/openssl/srtp.h

118 #i‚de‡
HEADER_D1_SRTP_H


119 
	#HEADER_D1_SRTP_H


	)

121 #ifde‡ 
__˝lu•lus


126 
	#SRTP_AES128_CM_SHA1_80
 0x0001

	)

127 
	#SRTP_AES128_CM_SHA1_32
 0x0002

	)

128 
	#SRTP_AES128_F8_SHA1_80
 0x0003

	)

129 
	#SRTP_AES128_F8_SHA1_32
 0x0004

	)

130 
	#SRTP_NULL_SHA1_80
 0x0005

	)

131 
	#SRTP_NULL_SHA1_32
 0x0006

	)

133 
SSL_CTX_£t_é£xt_u£_§ç
(
SSL_CTX
 *
˘x
, c⁄° *
¥ofûes
);

134 
SSL_£t_é£xt_u£_§ç
(
SSL
 *
˘x
, c⁄° *
¥ofûes
);

135 
SRTP_PROTECTION_PROFILE
 *
SSL_gë_£À˘ed_§ç_¥ofûe
(
SSL
 *
s
);

137 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
SSL_gë_§ç_¥ofûes
(
SSL
 *
s¶
);

138 
SRTP_PROTECTION_PROFILE
 *
SSL_gë_£À˘ed_§ç_¥ofûe
(
SSL
 *
s
);

140 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl2.h

59 #i‚de‡
HEADER_SSL2_H


60 
	#HEADER_SSL2_H


	)

62 #ifde‡ 
__˝lu•lus


67 
	#SSL2_VERSION
 0x0002

	)

68 
	#SSL2_VERSION_MAJOR
 0x00

	)

69 
	#SSL2_VERSION_MINOR
 0x02

	)

74 
	#SSL2_MT_ERROR
 0

	)

75 
	#SSL2_MT_CLIENT_HELLO
 1

	)

76 
	#SSL2_MT_CLIENT_MASTER_KEY
 2

	)

77 
	#SSL2_MT_CLIENT_FINISHED
 3

	)

78 
	#SSL2_MT_SERVER_HELLO
 4

	)

79 
	#SSL2_MT_SERVER_VERIFY
 5

	)

80 
	#SSL2_MT_SERVER_FINISHED
 6

	)

81 
	#SSL2_MT_REQUEST_CERTIFICATE
 7

	)

82 
	#SSL2_MT_CLIENT_CERTIFICATE
 8

	)

85 
	#SSL2_PE_UNDEFINED_ERROR
 0x0000

	)

86 
	#SSL2_PE_NO_CIPHER
 0x0001

	)

87 
	#SSL2_PE_NO_CERTIFICATE
 0x0002

	)

88 
	#SSL2_PE_BAD_CERTIFICATE
 0x0004

	)

89 
	#SSL2_PE_UNSUPPORTED_CERTIFICATE_TYPE
 0x0006

	)

92 
	#SSL2_CK_NULL_WITH_MD5
 0x02000000

	)

93 
	#SSL2_CK_RC4_128_WITH_MD5
 0x02010080

	)

94 
	#SSL2_CK_RC4_128_EXPORT40_WITH_MD5
 0x02020080

	)

95 
	#SSL2_CK_RC2_128_CBC_WITH_MD5
 0x02030080

	)

96 
	#SSL2_CK_RC2_128_CBC_EXPORT40_WITH_MD5
 0x02040080

	)

97 
	#SSL2_CK_IDEA_128_CBC_WITH_MD5
 0x02050080

	)

98 
	#SSL2_CK_DES_64_CBC_WITH_MD5
 0x02060040

	)

99 
	#SSL2_CK_DES_64_CBC_WITH_SHA
 0x02060140

	)

100 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_MD5
 0x020700c0

	)

101 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_SHA
 0x020701c0

	)

102 
	#SSL2_CK_RC4_64_WITH_MD5
 0x02080080

	)

104 
	#SSL2_CK_DES_64_CFB64_WITH_MD5_1
 0x02ff0800

	)

105 
	#SSL2_CK_NULL
 0x02ff0810

	)

107 
	#SSL2_TXT_DES_64_CFB64_WITH_MD5_1
 "DES-CFB-M1"

	)

108 
	#SSL2_TXT_NULL_WITH_MD5
 "NULL-MD5"

	)

109 
	#SSL2_TXT_RC4_128_WITH_MD5
 "RC4-MD5"

	)

110 
	#SSL2_TXT_RC4_128_EXPORT40_WITH_MD5
 "EXP-RC4-MD5"

	)

111 
	#SSL2_TXT_RC2_128_CBC_WITH_MD5
 "RC2-CBC-MD5"

	)

112 
	#SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 "EXP-RC2-CBC-MD5"

	)

113 
	#SSL2_TXT_IDEA_128_CBC_WITH_MD5
 "IDEA-CBC-MD5"

	)

114 
	#SSL2_TXT_DES_64_CBC_WITH_MD5
 "DES-CBC-MD5"

	)

115 
	#SSL2_TXT_DES_64_CBC_WITH_SHA
 "DES-CBC-SHA"

	)

116 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5
 "DES-CBC3-MD5"

	)

117 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA
 "DES-CBC3-SHA"

	)

118 
	#SSL2_TXT_RC4_64_WITH_MD5
 "RC4-64-MD5"

	)

120 
	#SSL2_TXT_NULL
 "NULL"

	)

123 
	#SSL2_CF_5_BYTE_ENC
 0x01

	)

124 
	#SSL2_CF_8_BYTE_ENC
 0x02

	)

127 
	#SSL2_CT_X509_CERTIFICATE
 0x01

	)

130 
	#SSL2_AT_MD5_WITH_RSA_ENCRYPTION
 0x01

	)

132 
	#SSL2_MAX_SSL_SESSION_ID_LENGTH
 32

	)

135 
	#SSL2_MAX_MASTER_KEY_LENGTH_IN_BITS
 256

	)

136 #ifde‡
OPENSSL_SYS_MPE


137 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 29998u

	)

139 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 32767u

	)

141 
	#SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER
 16383

	)

143 
	#SSL2_CHALLENGE_LENGTH
 16

	)

145 
	#SSL2_MIN_CHALLENGE_LENGTH
 16

	)

146 
	#SSL2_MAX_CHALLENGE_LENGTH
 32

	)

147 
	#SSL2_CONNECTION_ID_LENGTH
 16

	)

148 
	#SSL2_MAX_CONNECTION_ID_LENGTH
 16

	)

149 
	#SSL2_SSL_SESSION_ID_LENGTH
 16

	)

150 
	#SSL2_MAX_CERT_CHALLENGE_LENGTH
 32

	)

151 
	#SSL2_MIN_CERT_CHALLENGE_LENGTH
 16

	)

152 
	#SSL2_MAX_KEY_MATERIAL_LENGTH
 24

	)

154 #i‚de‡
HEADER_SSL_LOCL_H


155 
	#CERT
 

	)

158 #i‚de‡
OPENSSL_NO_SSL_INTERN


160 
	ss¶2_°©e_°


162 
thªe_byã_hódî
;

163 
˛ór_ãxt
;

164 
esˇ≥
;

165 
s¶2_rﬁlback
;

169 
wnum
;

170 
w≥nd_tŸ
;

171 c⁄° *
w≥nd_buf
;

173 
w≥nd_off
;

174 
w≥nd_Àn
;

175 
w≥nd_ªt
;

178 
rbuf_À·
;

179 
rbuf_offs
;

180 *
rbuf
;

181 *
wbuf
;

183 *
wrôe_±r
;

186 
∑ddög
;

187 
æígth
;

188 
ø˘_d©a_Àngth
;

189 
wÀngth
;

190 
wa˘_d©a_Àngth
;

191 *
ø˘_d©a
;

192 *
wa˘_d©a
;

193 *
mac_d©a
;

195 *
ªad_key
;

196 *
wrôe_key
;

199 
chÆÀnge_Àngth
;

200 
chÆÀnge
[
SSL2_MAX_CHALLENGE_LENGTH
];

201 
c⁄n_id_Àngth
;

202 
c⁄n_id
[
SSL2_MAX_CONNECTION_ID_LENGTH
];

203 
key_m©îül_Àngth
;

204 
key_m©îül
[
SSL2_MAX_KEY_MATERIAL_LENGTH
*2];

206 
ªad_£quí˚
;

207 
wrôe_£quí˚
;

210 
c⁄n_id_Àngth
;

211 
˚π_ty≥
;

212 
˚π_Àngth
;

213 
c¶
;

214 
˛ór
;

215 
íc
;

216 
c˛
[
SSL2_MAX_CERT_CHALLENGE_LENGTH
];

217 
cùhî_•ec_Àngth
;

218 
£ssi⁄_id_Àngth
;

219 
˛í
;

220 
æí
;

221 } 
tmp
;

222 } 
	tSSL2_STATE
;

228 
	#SSL2_ST_SEND_CLIENT_HELLO_A
 (0x10|
SSL_ST_CONNECT
)

	)

229 
	#SSL2_ST_SEND_CLIENT_HELLO_B
 (0x11|
SSL_ST_CONNECT
)

	)

230 
	#SSL2_ST_GET_SERVER_HELLO_A
 (0x20|
SSL_ST_CONNECT
)

	)

231 
	#SSL2_ST_GET_SERVER_HELLO_B
 (0x21|
SSL_ST_CONNECT
)

	)

232 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_CONNECT
)

	)

233 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_CONNECT
)

	)

234 
	#SSL2_ST_SEND_CLIENT_FINISHED_A
 (0x40|
SSL_ST_CONNECT
)

	)

235 
	#SSL2_ST_SEND_CLIENT_FINISHED_B
 (0x41|
SSL_ST_CONNECT
)

	)

236 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_A
 (0x50|
SSL_ST_CONNECT
)

	)

237 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_B
 (0x51|
SSL_ST_CONNECT
)

	)

238 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_C
 (0x52|
SSL_ST_CONNECT
)

	)

239 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_D
 (0x53|
SSL_ST_CONNECT
)

	)

240 
	#SSL2_ST_GET_SERVER_VERIFY_A
 (0x60|
SSL_ST_CONNECT
)

	)

241 
	#SSL2_ST_GET_SERVER_VERIFY_B
 (0x61|
SSL_ST_CONNECT
)

	)

242 
	#SSL2_ST_GET_SERVER_FINISHED_A
 (0x70|
SSL_ST_CONNECT
)

	)

243 
	#SSL2_ST_GET_SERVER_FINISHED_B
 (0x71|
SSL_ST_CONNECT
)

	)

244 
	#SSL2_ST_CLIENT_START_ENCRYPTION
 (0x80|
SSL_ST_CONNECT
)

	)

245 
	#SSL2_ST_X509_GET_CLIENT_CERTIFICATE
 (0x90|
SSL_ST_CONNECT
)

	)

247 
	#SSL2_ST_GET_CLIENT_HELLO_A
 (0x10|
SSL_ST_ACCEPT
)

	)

248 
	#SSL2_ST_GET_CLIENT_HELLO_B
 (0x11|
SSL_ST_ACCEPT
)

	)

249 
	#SSL2_ST_GET_CLIENT_HELLO_C
 (0x12|
SSL_ST_ACCEPT
)

	)

250 
	#SSL2_ST_SEND_SERVER_HELLO_A
 (0x20|
SSL_ST_ACCEPT
)

	)

251 
	#SSL2_ST_SEND_SERVER_HELLO_B
 (0x21|
SSL_ST_ACCEPT
)

	)

252 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_ACCEPT
)

	)

253 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_ACCEPT
)

	)

254 
	#SSL2_ST_SEND_SERVER_VERIFY_A
 (0x40|
SSL_ST_ACCEPT
)

	)

255 
	#SSL2_ST_SEND_SERVER_VERIFY_B
 (0x41|
SSL_ST_ACCEPT
)

	)

256 
	#SSL2_ST_SEND_SERVER_VERIFY_C
 (0x42|
SSL_ST_ACCEPT
)

	)

257 
	#SSL2_ST_GET_CLIENT_FINISHED_A
 (0x50|
SSL_ST_ACCEPT
)

	)

258 
	#SSL2_ST_GET_CLIENT_FINISHED_B
 (0x51|
SSL_ST_ACCEPT
)

	)

259 
	#SSL2_ST_SEND_SERVER_FINISHED_A
 (0x60|
SSL_ST_ACCEPT
)

	)

260 
	#SSL2_ST_SEND_SERVER_FINISHED_B
 (0x61|
SSL_ST_ACCEPT
)

	)

261 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_A
 (0x70|
SSL_ST_ACCEPT
)

	)

262 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_B
 (0x71|
SSL_ST_ACCEPT
)

	)

263 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_C
 (0x72|
SSL_ST_ACCEPT
)

	)

264 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_D
 (0x73|
SSL_ST_ACCEPT
)

	)

265 
	#SSL2_ST_SERVER_START_ENCRYPTION
 (0x80|
SSL_ST_ACCEPT
)

	)

266 
	#SSL2_ST_X509_GET_SERVER_CERTIFICATE
 (0x90|
SSL_ST_ACCEPT
)

	)

268 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl23.h

59 #i‚de‡
HEADER_SSL23_H


60 
	#HEADER_SSL23_H


	)

62 #ifde‡ 
__˝lu•lus


68 
	#SSL23_ST_CW_CLNT_HELLO_A
 (0x210|
SSL_ST_CONNECT
)

	)

69 
	#SSL23_ST_CW_CLNT_HELLO_B
 (0x211|
SSL_ST_CONNECT
)

	)

71 
	#SSL23_ST_CR_SRVR_HELLO_A
 (0x220|
SSL_ST_CONNECT
)

	)

72 
	#SSL23_ST_CR_SRVR_HELLO_B
 (0x221|
SSL_ST_CONNECT
)

	)

76 
	#SSL23_ST_SR_CLNT_HELLO_A
 (0x210|
SSL_ST_ACCEPT
)

	)

77 
	#SSL23_ST_SR_CLNT_HELLO_B
 (0x211|
SSL_ST_ACCEPT
)

	)

79 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl3.h

117 #i‚de‡
HEADER_SSL3_H


118 
	#HEADER_SSL3_H


	)

120 #i‚de‡
OPENSSL_NO_COMP


121 
	~<›ís¶/comp.h
>

123 
	~<›ís¶/buf„r.h
>

124 
	~<›ís¶/evp.h
>

125 
	~<›ís¶/s¶.h
>

127 #ifde‡ 
__˝lu•lus


132 
	#SSL3_CK_SCSV
 0x030000FF

	)

134 
	#SSL3_CK_RSA_NULL_MD5
 0x03000001

	)

135 
	#SSL3_CK_RSA_NULL_SHA
 0x03000002

	)

136 
	#SSL3_CK_RSA_RC4_40_MD5
 0x03000003

	)

137 
	#SSL3_CK_RSA_RC4_128_MD5
 0x03000004

	)

138 
	#SSL3_CK_RSA_RC4_128_SHA
 0x03000005

	)

139 
	#SSL3_CK_RSA_RC2_40_MD5
 0x03000006

	)

140 
	#SSL3_CK_RSA_IDEA_128_SHA
 0x03000007

	)

141 
	#SSL3_CK_RSA_DES_40_CBC_SHA
 0x03000008

	)

142 
	#SSL3_CK_RSA_DES_64_CBC_SHA
 0x03000009

	)

143 
	#SSL3_CK_RSA_DES_192_CBC3_SHA
 0x0300000A

	)

145 
	#SSL3_CK_DH_DSS_DES_40_CBC_SHA
 0x0300000B

	)

146 
	#SSL3_CK_DH_DSS_DES_64_CBC_SHA
 0x0300000C

	)

147 
	#SSL3_CK_DH_DSS_DES_192_CBC3_SHA
 0x0300000D

	)

148 
	#SSL3_CK_DH_RSA_DES_40_CBC_SHA
 0x0300000E

	)

149 
	#SSL3_CK_DH_RSA_DES_64_CBC_SHA
 0x0300000F

	)

150 
	#SSL3_CK_DH_RSA_DES_192_CBC3_SHA
 0x03000010

	)

152 
	#SSL3_CK_EDH_DSS_DES_40_CBC_SHA
 0x03000011

	)

153 
	#SSL3_CK_EDH_DSS_DES_64_CBC_SHA
 0x03000012

	)

154 
	#SSL3_CK_EDH_DSS_DES_192_CBC3_SHA
 0x03000013

	)

155 
	#SSL3_CK_EDH_RSA_DES_40_CBC_SHA
 0x03000014

	)

156 
	#SSL3_CK_EDH_RSA_DES_64_CBC_SHA
 0x03000015

	)

157 
	#SSL3_CK_EDH_RSA_DES_192_CBC3_SHA
 0x03000016

	)

159 
	#SSL3_CK_ADH_RC4_40_MD5
 0x03000017

	)

160 
	#SSL3_CK_ADH_RC4_128_MD5
 0x03000018

	)

161 
	#SSL3_CK_ADH_DES_40_CBC_SHA
 0x03000019

	)

162 
	#SSL3_CK_ADH_DES_64_CBC_SHA
 0x0300001A

	)

163 
	#SSL3_CK_ADH_DES_192_CBC_SHA
 0x0300001B

	)

166 
	#SSL3_CK_FZA_DMS_NULL_SHA
 0x0300001C

	)

167 
	#SSL3_CK_FZA_DMS_FZA_SHA
 0x0300001D

	)

171 
	#SSL3_CK_FZA_DMS_RC4_SHA
 0x0300001E

	)

177 
	#SSL3_CK_KRB5_DES_64_CBC_SHA
 0x0300001E

	)

178 
	#SSL3_CK_KRB5_DES_192_CBC3_SHA
 0x0300001F

	)

179 
	#SSL3_CK_KRB5_RC4_128_SHA
 0x03000020

	)

180 
	#SSL3_CK_KRB5_IDEA_128_CBC_SHA
 0x03000021

	)

181 
	#SSL3_CK_KRB5_DES_64_CBC_MD5
 0x03000022

	)

182 
	#SSL3_CK_KRB5_DES_192_CBC3_MD5
 0x03000023

	)

183 
	#SSL3_CK_KRB5_RC4_128_MD5
 0x03000024

	)

184 
	#SSL3_CK_KRB5_IDEA_128_CBC_MD5
 0x03000025

	)

186 
	#SSL3_CK_KRB5_DES_40_CBC_SHA
 0x03000026

	)

187 
	#SSL3_CK_KRB5_RC2_40_CBC_SHA
 0x03000027

	)

188 
	#SSL3_CK_KRB5_RC4_40_SHA
 0x03000028

	)

189 
	#SSL3_CK_KRB5_DES_40_CBC_MD5
 0x03000029

	)

190 
	#SSL3_CK_KRB5_RC2_40_CBC_MD5
 0x0300002A

	)

191 
	#SSL3_CK_KRB5_RC4_40_MD5
 0x0300002B

	)

193 
	#SSL3_TXT_RSA_NULL_MD5
 "NULL-MD5"

	)

194 
	#SSL3_TXT_RSA_NULL_SHA
 "NULL-SHA"

	)

195 
	#SSL3_TXT_RSA_RC4_40_MD5
 "EXP-RC4-MD5"

	)

196 
	#SSL3_TXT_RSA_RC4_128_MD5
 "RC4-MD5"

	)

197 
	#SSL3_TXT_RSA_RC4_128_SHA
 "RC4-SHA"

	)

198 
	#SSL3_TXT_RSA_RC2_40_MD5
 "EXP-RC2-CBC-MD5"

	)

199 
	#SSL3_TXT_RSA_IDEA_128_SHA
 "IDEA-CBC-SHA"

	)

200 
	#SSL3_TXT_RSA_DES_40_CBC_SHA
 "EXP-DES-CBC-SHA"

	)

201 
	#SSL3_TXT_RSA_DES_64_CBC_SHA
 "DES-CBC-SHA"

	)

202 
	#SSL3_TXT_RSA_DES_192_CBC3_SHA
 "DES-CBC3-SHA"

	)

204 
	#SSL3_TXT_DH_DSS_DES_40_CBC_SHA
 "EXP-DH-DSS-DES-CBC-SHA"

	)

205 
	#SSL3_TXT_DH_DSS_DES_64_CBC_SHA
 "DH-DSS-DES-CBC-SHA"

	)

206 
	#SSL3_TXT_DH_DSS_DES_192_CBC3_SHA
 "DH-DSS-DES-CBC3-SHA"

	)

207 
	#SSL3_TXT_DH_RSA_DES_40_CBC_SHA
 "EXP-DH-RSA-DES-CBC-SHA"

	)

208 
	#SSL3_TXT_DH_RSA_DES_64_CBC_SHA
 "DH-RSA-DES-CBC-SHA"

	)

209 
	#SSL3_TXT_DH_RSA_DES_192_CBC3_SHA
 "DH-RSA-DES-CBC3-SHA"

	)

211 
	#SSL3_TXT_EDH_DSS_DES_40_CBC_SHA
 "EXP-EDH-DSS-DES-CBC-SHA"

	)

212 
	#SSL3_TXT_EDH_DSS_DES_64_CBC_SHA
 "EDH-DSS-DES-CBC-SHA"

	)

213 
	#SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA
 "EDH-DSS-DES-CBC3-SHA"

	)

214 
	#SSL3_TXT_EDH_RSA_DES_40_CBC_SHA
 "EXP-EDH-RSA-DES-CBC-SHA"

	)

215 
	#SSL3_TXT_EDH_RSA_DES_64_CBC_SHA
 "EDH-RSA-DES-CBC-SHA"

	)

216 
	#SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA
 "EDH-RSA-DES-CBC3-SHA"

	)

218 
	#SSL3_TXT_ADH_RC4_40_MD5
 "EXP-ADH-RC4-MD5"

	)

219 
	#SSL3_TXT_ADH_RC4_128_MD5
 "ADH-RC4-MD5"

	)

220 
	#SSL3_TXT_ADH_DES_40_CBC_SHA
 "EXP-ADH-DES-CBC-SHA"

	)

221 
	#SSL3_TXT_ADH_DES_64_CBC_SHA
 "ADH-DES-CBC-SHA"

	)

222 
	#SSL3_TXT_ADH_DES_192_CBC_SHA
 "ADH-DES-CBC3-SHA"

	)

225 
	#SSL3_TXT_FZA_DMS_NULL_SHA
 "FZA-NULL-SHA"

	)

226 
	#SSL3_TXT_FZA_DMS_FZA_SHA
 "FZA-FZA-CBC-SHA"

	)

227 
	#SSL3_TXT_FZA_DMS_RC4_SHA
 "FZA-RC4-SHA"

	)

230 
	#SSL3_TXT_KRB5_DES_64_CBC_SHA
 "KRB5-DES-CBC-SHA"

	)

231 
	#SSL3_TXT_KRB5_DES_192_CBC3_SHA
 "KRB5-DES-CBC3-SHA"

	)

232 
	#SSL3_TXT_KRB5_RC4_128_SHA
 "KRB5-RC4-SHA"

	)

233 
	#SSL3_TXT_KRB5_IDEA_128_CBC_SHA
 "KRB5-IDEA-CBC-SHA"

	)

234 
	#SSL3_TXT_KRB5_DES_64_CBC_MD5
 "KRB5-DES-CBC-MD5"

	)

235 
	#SSL3_TXT_KRB5_DES_192_CBC3_MD5
 "KRB5-DES-CBC3-MD5"

	)

236 
	#SSL3_TXT_KRB5_RC4_128_MD5
 "KRB5-RC4-MD5"

	)

237 
	#SSL3_TXT_KRB5_IDEA_128_CBC_MD5
 "KRB5-IDEA-CBC-MD5"

	)

239 
	#SSL3_TXT_KRB5_DES_40_CBC_SHA
 "EXP-KRB5-DES-CBC-SHA"

	)

240 
	#SSL3_TXT_KRB5_RC2_40_CBC_SHA
 "EXP-KRB5-RC2-CBC-SHA"

	)

241 
	#SSL3_TXT_KRB5_RC4_40_SHA
 "EXP-KRB5-RC4-SHA"

	)

242 
	#SSL3_TXT_KRB5_DES_40_CBC_MD5
 "EXP-KRB5-DES-CBC-MD5"

	)

243 
	#SSL3_TXT_KRB5_RC2_40_CBC_MD5
 "EXP-KRB5-RC2-CBC-MD5"

	)

244 
	#SSL3_TXT_KRB5_RC4_40_MD5
 "EXP-KRB5-RC4-MD5"

	)

246 
	#SSL3_SSL_SESSION_ID_LENGTH
 32

	)

247 
	#SSL3_MAX_SSL_SESSION_ID_LENGTH
 32

	)

249 
	#SSL3_MASTER_SECRET_SIZE
 48

	)

250 
	#SSL3_RANDOM_SIZE
 32

	)

251 
	#SSL3_SESSION_ID_SIZE
 32

	)

252 
	#SSL3_RT_HEADER_LENGTH
 5

	)

254 #i‚de‡
SSL3_ALIGN_PAYLOAD


261 
	#SSL3_ALIGN_PAYLOAD
 8

	)

263 #i‡(
SSL3_ALIGN_PAYLOAD
&(SSL3_ALIGN_PAYLOAD-1))!=0

265 #unde‡
SSL3_ALIGN_PAYLOAD


274 
	#SSL3_RT_MAX_MD_SIZE
 64

	)

279 
	#SSL_RT_MAX_CIPHER_BLOCK_SIZE
 16

	)

281 
	#SSL3_RT_MAX_EXTRA
 (16384)

	)

284 
	#SSL3_RT_MAX_PLAIN_LENGTH
 16384

	)

286 
	#SSL3_RT_MAX_COMPRESSED_OVERHEAD
 1024

	)

292 
	#SSL3_RT_MAX_ENCRYPTED_OVERHEAD
 (256 + 
SSL3_RT_MAX_MD_SIZE
)

	)

298 
	#SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD
 \

299 (
SSL_RT_MAX_CIPHER_BLOCK_SIZE
 + 
SSL3_RT_MAX_MD_SIZE
)

	)

303 #ifde‡
OPENSSL_NO_COMP


304 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 
SSL3_RT_MAX_PLAIN_LENGTH


	)

306 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 \

307 (
SSL3_RT_MAX_PLAIN_LENGTH
+
SSL3_RT_MAX_COMPRESSED_OVERHEAD
)

	)

309 
	#SSL3_RT_MAX_ENCRYPTED_LENGTH
 \

310 (
SSL3_RT_MAX_ENCRYPTED_OVERHEAD
+
SSL3_RT_MAX_COMPRESSED_LENGTH
)

	)

311 
	#SSL3_RT_MAX_PACKET_SIZE
 \

312 (
SSL3_RT_MAX_ENCRYPTED_LENGTH
+
SSL3_RT_HEADER_LENGTH
)

	)

314 
	#SSL3_MD_CLIENT_FINISHED_CONST
 "\x43\x4C\x4E\x54"

	)

315 
	#SSL3_MD_SERVER_FINISHED_CONST
 "\x53\x52\x56\x52"

	)

317 
	#SSL3_VERSION
 0x0300

	)

318 
	#SSL3_VERSION_MAJOR
 0x03

	)

319 
	#SSL3_VERSION_MINOR
 0x00

	)

321 
	#SSL3_RT_CHANGE_CIPHER_SPEC
 20

	)

322 
	#SSL3_RT_ALERT
 21

	)

323 
	#SSL3_RT_HANDSHAKE
 22

	)

324 
	#SSL3_RT_APPLICATION_DATA
 23

	)

325 
	#TLS1_RT_HEARTBEAT
 24

	)

327 
	#SSL3_AL_WARNING
 1

	)

328 
	#SSL3_AL_FATAL
 2

	)

330 
	#SSL3_AD_CLOSE_NOTIFY
 0

	)

331 
	#SSL3_AD_UNEXPECTED_MESSAGE
 10

	)

332 
	#SSL3_AD_BAD_RECORD_MAC
 20

	)

333 
	#SSL3_AD_DECOMPRESSION_FAILURE
 30

	)

334 
	#SSL3_AD_HANDSHAKE_FAILURE
 40

	)

335 
	#SSL3_AD_NO_CERTIFICATE
 41

	)

336 
	#SSL3_AD_BAD_CERTIFICATE
 42

	)

337 
	#SSL3_AD_UNSUPPORTED_CERTIFICATE
 43

	)

338 
	#SSL3_AD_CERTIFICATE_REVOKED
 44

	)

339 
	#SSL3_AD_CERTIFICATE_EXPIRED
 45

	)

340 
	#SSL3_AD_CERTIFICATE_UNKNOWN
 46

	)

341 
	#SSL3_AD_ILLEGAL_PARAMETER
 47

	)

343 
	#TLS1_HB_REQUEST
 1

	)

344 
	#TLS1_HB_RESPONSE
 2

	)

346 #i‚de‡
OPENSSL_NO_SSL_INTERN


348 
	ss¶3_ªc‹d_°


350  
ty≥
;

351  
Àngth
;

352  
off
;

353  *
d©a
;

354  *
öput
;

355  *
comp
;

356  
ïoch
;

357  
£q_num
[8];

358 } 
	tSSL3_RECORD
;

360 
	ss¶3_buf„r_°


362 *
buf
;

364 
size_t
 
Àn
;

365 
off£t
;

366 
À·
;

367 } 
	tSSL3_BUFFER
;

371 
	#SSL3_CT_RSA_SIGN
 1

	)

372 
	#SSL3_CT_DSS_SIGN
 2

	)

373 
	#SSL3_CT_RSA_FIXED_DH
 3

	)

374 
	#SSL3_CT_DSS_FIXED_DH
 4

	)

375 
	#SSL3_CT_RSA_EPHEMERAL_DH
 5

	)

376 
	#SSL3_CT_DSS_EPHEMERAL_DH
 6

	)

377 
	#SSL3_CT_FORTEZZA_DMS
 20

	)

382 
	#SSL3_CT_NUMBER
 9

	)

385 
	#SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS
 0x0001

	)

386 
	#SSL3_FLAGS_DELAY_CLIENT_FINISHED
 0x0002

	)

387 
	#SSL3_FLAGS_POP_BUFFER
 0x0004

	)

388 
	#TLS1_FLAGS_TLS_PADDING_BUG
 0x0008

	)

389 
	#TLS1_FLAGS_SKIP_CERT_VERIFY
 0x0010

	)

390 
	#TLS1_FLAGS_KEEP_HANDSHAKE
 0x0020

	)

401 
	#SSL3_FLAGS_SGC_RESTART_DONE
 0x0040

	)

403 #i‚de‡
OPENSSL_NO_SSL_INTERN


405 
	ss¶3_°©e_°


407 
Êags
;

408 
dñay_buf_p›_ªt
;

410 
ªad_£quí˚
[8];

411 
ªad_mac_£¸ë_size
;

412 
ªad_mac_£¸ë
[
EVP_MAX_MD_SIZE
];

413 
wrôe_£quí˚
[8];

414 
wrôe_mac_£¸ë_size
;

415 
wrôe_mac_£¸ë
[
EVP_MAX_MD_SIZE
];

417 
£rvî_øndom
[
SSL3_RANDOM_SIZE
];

418 
˛õ¡_øndom
[
SSL3_RANDOM_SIZE
];

421 
√ed_em±y_‰agmíts
;

422 
em±y_‰agmít_d⁄e
;

425 
öô_exåa
;

427 
SSL3_BUFFER
 
rbuf
;

428 
SSL3_BUFFER
 
wbuf
;

430 
SSL3_RECORD
 
ºec
;

431 
SSL3_RECORD
 
wªc
;

435 
Æît_‰agmít
[2];

436 
Æît_‰agmít_Àn
;

437 
h™dshake_‰agmít
[4];

438 
h™dshake_‰agmít_Àn
;

441 
wnum
;

442 
w≥nd_tŸ
;

443 
w≥nd_ty≥
;

444 
w≥nd_ªt
;

445 c⁄° *
w≥nd_buf
;

448 
BIO
 *
h™dshake_buf„r
;

452 
EVP_MD_CTX
 **
h™dshake_dg°
;

455 
ch™ge_cùhî_•ec
;

457 
w¨n_Æît
;

458 
Áèl_Æît
;

461 
Æît_di•©ch
;

462 
£nd_Æît
[2];

466 
ª√gŸüã
;

467 
tŸÆ_ª√gŸüti⁄s
;

468 
num_ª√gŸüti⁄s
;

470 
ö_ªad_≠p_d©a
;

475 *
˛õ¡_›aque_¥f_öput
;

476 
size_t
 
˛õ¡_›aque_¥f_öput_Àn
;

477 *
£rvî_›aque_¥f_öput
;

478 
size_t
 
£rvî_›aque_¥f_öput_Àn
;

482 
˚π_vîify_md
[
EVP_MAX_MD_SIZE
*2];

485 
föish_md
[
EVP_MAX_MD_SIZE
*2];

486 
föish_md_Àn
;

487 
≥î_föish_md
[
EVP_MAX_MD_SIZE
*2];

488 
≥î_föish_md_Àn
;

490 
mesßge_size
;

491 
mesßge_ty≥
;

494 c⁄° 
SSL_CIPHER
 *
√w_cùhî
;

495 #i‚de‡
OPENSSL_NO_DH


496 
DH
 *
dh
;

499 #i‚de‡
OPENSSL_NO_ECDH


500 
EC_KEY
 *
ecdh
;

504 
√xt_°©e
;

506 
ªu£_mesßge
;

509 
˚π_ªq
;

510 
˘y≥_num
;

511 
˘y≥
[
SSL3_CT_NUMBER
];

512 
STACK_OF
(
X509_NAME
Ë*
ˇ_«mes
;

514 
u£_rß_tmp
;

516 
key_block_Àngth
;

517 *
key_block
;

519 c⁄° 
EVP_CIPHER
 *
√w_sym_íc
;

520 c⁄° 
EVP_MD
 *
√w_hash
;

521 
√w_mac_pkey_ty≥
;

522 
√w_mac_£¸ë_size
;

523 #i‚de‡
OPENSSL_NO_COMP


524 c⁄° 
SSL_COMP
 *
√w_com¥essi⁄
;

526 *
√w_com¥essi⁄
;

528 
˚π_ªque°
;

529 } 
tmp
;

532 
¥evious_˛õ¡_föished
[
EVP_MAX_MD_SIZE
];

533 
¥evious_˛õ¡_föished_Àn
;

534 
¥evious_£rvî_föished
[
EVP_MAX_MD_SIZE
];

535 
¥evious_£rvî_föished_Àn
;

536 
£nd_c⁄√˘i⁄_bödög
;

538 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


540 
√xt_¥Ÿo_√g_£í
;

542 } 
	tSSL3_STATE
;

549 
	#SSL3_ST_CW_FLUSH
 (0x100|
SSL_ST_CONNECT
)

	)

550 #i‚de‡
OPENSSL_NO_SCTP


551 
	#DTLS1_SCTP_ST_CW_WRITE_SOCK
 (0x310|
SSL_ST_CONNECT
)

	)

552 
	#DTLS1_SCTP_ST_CR_READ_SOCK
 (0x320|
SSL_ST_CONNECT
)

	)

555 
	#SSL3_ST_CW_CLNT_HELLO_A
 (0x110|
SSL_ST_CONNECT
)

	)

556 
	#SSL3_ST_CW_CLNT_HELLO_B
 (0x111|
SSL_ST_CONNECT
)

	)

558 
	#SSL3_ST_CR_SRVR_HELLO_A
 (0x120|
SSL_ST_CONNECT
)

	)

559 
	#SSL3_ST_CR_SRVR_HELLO_B
 (0x121|
SSL_ST_CONNECT
)

	)

560 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_A
 (0x126|
SSL_ST_CONNECT
)

	)

561 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_B
 (0x127|
SSL_ST_CONNECT
)

	)

562 
	#SSL3_ST_CR_CERT_A
 (0x130|
SSL_ST_CONNECT
)

	)

563 
	#SSL3_ST_CR_CERT_B
 (0x131|
SSL_ST_CONNECT
)

	)

564 
	#SSL3_ST_CR_KEY_EXCH_A
 (0x140|
SSL_ST_CONNECT
)

	)

565 
	#SSL3_ST_CR_KEY_EXCH_B
 (0x141|
SSL_ST_CONNECT
)

	)

566 
	#SSL3_ST_CR_CERT_REQ_A
 (0x150|
SSL_ST_CONNECT
)

	)

567 
	#SSL3_ST_CR_CERT_REQ_B
 (0x151|
SSL_ST_CONNECT
)

	)

568 
	#SSL3_ST_CR_SRVR_DONE_A
 (0x160|
SSL_ST_CONNECT
)

	)

569 
	#SSL3_ST_CR_SRVR_DONE_B
 (0x161|
SSL_ST_CONNECT
)

	)

571 
	#SSL3_ST_CW_CERT_A
 (0x170|
SSL_ST_CONNECT
)

	)

572 
	#SSL3_ST_CW_CERT_B
 (0x171|
SSL_ST_CONNECT
)

	)

573 
	#SSL3_ST_CW_CERT_C
 (0x172|
SSL_ST_CONNECT
)

	)

574 
	#SSL3_ST_CW_CERT_D
 (0x173|
SSL_ST_CONNECT
)

	)

575 
	#SSL3_ST_CW_KEY_EXCH_A
 (0x180|
SSL_ST_CONNECT
)

	)

576 
	#SSL3_ST_CW_KEY_EXCH_B
 (0x181|
SSL_ST_CONNECT
)

	)

577 
	#SSL3_ST_CW_CERT_VRFY_A
 (0x190|
SSL_ST_CONNECT
)

	)

578 
	#SSL3_ST_CW_CERT_VRFY_B
 (0x191|
SSL_ST_CONNECT
)

	)

579 
	#SSL3_ST_CW_CHANGE_A
 (0x1A0|
SSL_ST_CONNECT
)

	)

580 
	#SSL3_ST_CW_CHANGE_B
 (0x1A1|
SSL_ST_CONNECT
)

	)

581 
	#SSL3_ST_CW_NEXT_PROTO_A
 (0x200|
SSL_ST_CONNECT
)

	)

582 
	#SSL3_ST_CW_NEXT_PROTO_B
 (0x201|
SSL_ST_CONNECT
)

	)

583 
	#SSL3_ST_CW_FINISHED_A
 (0x1B0|
SSL_ST_CONNECT
)

	)

584 
	#SSL3_ST_CW_FINISHED_B
 (0x1B1|
SSL_ST_CONNECT
)

	)

586 
	#SSL3_ST_CR_CHANGE_A
 (0x1C0|
SSL_ST_CONNECT
)

	)

587 
	#SSL3_ST_CR_CHANGE_B
 (0x1C1|
SSL_ST_CONNECT
)

	)

588 
	#SSL3_ST_CR_FINISHED_A
 (0x1D0|
SSL_ST_CONNECT
)

	)

589 
	#SSL3_ST_CR_FINISHED_B
 (0x1D1|
SSL_ST_CONNECT
)

	)

590 
	#SSL3_ST_CR_SESSION_TICKET_A
 (0x1E0|
SSL_ST_CONNECT
)

	)

591 
	#SSL3_ST_CR_SESSION_TICKET_B
 (0x1E1|
SSL_ST_CONNECT
)

	)

592 
	#SSL3_ST_CR_CERT_STATUS_A
 (0x1F0|
SSL_ST_CONNECT
)

	)

593 
	#SSL3_ST_CR_CERT_STATUS_B
 (0x1F1|
SSL_ST_CONNECT
)

	)

597 
	#SSL3_ST_SW_FLUSH
 (0x100|
SSL_ST_ACCEPT
)

	)

598 #i‚de‡
OPENSSL_NO_SCTP


599 
	#DTLS1_SCTP_ST_SW_WRITE_SOCK
 (0x310|
SSL_ST_ACCEPT
)

	)

600 
	#DTLS1_SCTP_ST_SR_READ_SOCK
 (0x320|
SSL_ST_ACCEPT
)

	)

604 
	#SSL3_ST_SR_CLNT_HELLO_A
 (0x110|
SSL_ST_ACCEPT
)

	)

605 
	#SSL3_ST_SR_CLNT_HELLO_B
 (0x111|
SSL_ST_ACCEPT
)

	)

606 
	#SSL3_ST_SR_CLNT_HELLO_C
 (0x112|
SSL_ST_ACCEPT
)

	)

608 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_A
 (0x113|
SSL_ST_ACCEPT
)

	)

609 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_B
 (0x114|
SSL_ST_ACCEPT
)

	)

610 
	#SSL3_ST_SW_HELLO_REQ_A
 (0x120|
SSL_ST_ACCEPT
)

	)

611 
	#SSL3_ST_SW_HELLO_REQ_B
 (0x121|
SSL_ST_ACCEPT
)

	)

612 
	#SSL3_ST_SW_HELLO_REQ_C
 (0x122|
SSL_ST_ACCEPT
)

	)

613 
	#SSL3_ST_SW_SRVR_HELLO_A
 (0x130|
SSL_ST_ACCEPT
)

	)

614 
	#SSL3_ST_SW_SRVR_HELLO_B
 (0x131|
SSL_ST_ACCEPT
)

	)

615 
	#SSL3_ST_SW_CERT_A
 (0x140|
SSL_ST_ACCEPT
)

	)

616 
	#SSL3_ST_SW_CERT_B
 (0x141|
SSL_ST_ACCEPT
)

	)

617 
	#SSL3_ST_SW_KEY_EXCH_A
 (0x150|
SSL_ST_ACCEPT
)

	)

618 
	#SSL3_ST_SW_KEY_EXCH_B
 (0x151|
SSL_ST_ACCEPT
)

	)

619 
	#SSL3_ST_SW_CERT_REQ_A
 (0x160|
SSL_ST_ACCEPT
)

	)

620 
	#SSL3_ST_SW_CERT_REQ_B
 (0x161|
SSL_ST_ACCEPT
)

	)

621 
	#SSL3_ST_SW_SRVR_DONE_A
 (0x170|
SSL_ST_ACCEPT
)

	)

622 
	#SSL3_ST_SW_SRVR_DONE_B
 (0x171|
SSL_ST_ACCEPT
)

	)

624 
	#SSL3_ST_SR_CERT_A
 (0x180|
SSL_ST_ACCEPT
)

	)

625 
	#SSL3_ST_SR_CERT_B
 (0x181|
SSL_ST_ACCEPT
)

	)

626 
	#SSL3_ST_SR_KEY_EXCH_A
 (0x190|
SSL_ST_ACCEPT
)

	)

627 
	#SSL3_ST_SR_KEY_EXCH_B
 (0x191|
SSL_ST_ACCEPT
)

	)

628 
	#SSL3_ST_SR_CERT_VRFY_A
 (0x1A0|
SSL_ST_ACCEPT
)

	)

629 
	#SSL3_ST_SR_CERT_VRFY_B
 (0x1A1|
SSL_ST_ACCEPT
)

	)

630 
	#SSL3_ST_SR_CHANGE_A
 (0x1B0|
SSL_ST_ACCEPT
)

	)

631 
	#SSL3_ST_SR_CHANGE_B
 (0x1B1|
SSL_ST_ACCEPT
)

	)

632 
	#SSL3_ST_SR_NEXT_PROTO_A
 (0x210|
SSL_ST_ACCEPT
)

	)

633 
	#SSL3_ST_SR_NEXT_PROTO_B
 (0x211|
SSL_ST_ACCEPT
)

	)

634 
	#SSL3_ST_SR_FINISHED_A
 (0x1C0|
SSL_ST_ACCEPT
)

	)

635 
	#SSL3_ST_SR_FINISHED_B
 (0x1C1|
SSL_ST_ACCEPT
)

	)

637 
	#SSL3_ST_SW_CHANGE_A
 (0x1D0|
SSL_ST_ACCEPT
)

	)

638 
	#SSL3_ST_SW_CHANGE_B
 (0x1D1|
SSL_ST_ACCEPT
)

	)

639 
	#SSL3_ST_SW_FINISHED_A
 (0x1E0|
SSL_ST_ACCEPT
)

	)

640 
	#SSL3_ST_SW_FINISHED_B
 (0x1E1|
SSL_ST_ACCEPT
)

	)

641 
	#SSL3_ST_SW_SESSION_TICKET_A
 (0x1F0|
SSL_ST_ACCEPT
)

	)

642 
	#SSL3_ST_SW_SESSION_TICKET_B
 (0x1F1|
SSL_ST_ACCEPT
)

	)

643 
	#SSL3_ST_SW_CERT_STATUS_A
 (0x200|
SSL_ST_ACCEPT
)

	)

644 
	#SSL3_ST_SW_CERT_STATUS_B
 (0x201|
SSL_ST_ACCEPT
)

	)

646 
	#SSL3_MT_HELLO_REQUEST
 0

	)

647 
	#SSL3_MT_CLIENT_HELLO
 1

	)

648 
	#SSL3_MT_SERVER_HELLO
 2

	)

649 
	#SSL3_MT_NEWSESSION_TICKET
 4

	)

650 
	#SSL3_MT_CERTIFICATE
 11

	)

651 
	#SSL3_MT_SERVER_KEY_EXCHANGE
 12

	)

652 
	#SSL3_MT_CERTIFICATE_REQUEST
 13

	)

653 
	#SSL3_MT_SERVER_DONE
 14

	)

654 
	#SSL3_MT_CERTIFICATE_VERIFY
 15

	)

655 
	#SSL3_MT_CLIENT_KEY_EXCHANGE
 16

	)

656 
	#SSL3_MT_FINISHED
 20

	)

657 
	#SSL3_MT_CERTIFICATE_STATUS
 22

	)

658 
	#SSL3_MT_NEXT_PROTO
 67

	)

659 
	#DTLS1_MT_HELLO_VERIFY_REQUEST
 3

	)

662 
	#SSL3_MT_CCS
 1

	)

665 
	#SSL3_CC_READ
 0x01

	)

666 
	#SSL3_CC_WRITE
 0x02

	)

667 
	#SSL3_CC_CLIENT
 0x10

	)

668 
	#SSL3_CC_SERVER
 0x20

	)

669 
	#SSL3_CHANGE_CIPHER_CLIENT_WRITE
 (
SSL3_CC_CLIENT
|
SSL3_CC_WRITE
)

	)

670 
	#SSL3_CHANGE_CIPHER_SERVER_READ
 (
SSL3_CC_SERVER
|
SSL3_CC_READ
)

	)

671 
	#SSL3_CHANGE_CIPHER_CLIENT_READ
 (
SSL3_CC_CLIENT
|
SSL3_CC_READ
)

	)

672 
	#SSL3_CHANGE_CIPHER_SERVER_WRITE
 (
SSL3_CC_SERVER
|
SSL3_CC_WRITE
)

	)

674 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/symhacks.h

55 #i‚de‡
HEADER_SYMHACKS_H


56 
	#HEADER_SYMHACKS_H


	)

58 
	~<›ís¶/e_os2.h
>

68 #ifde‡
OPENSSL_SYS_VMS


71 #unde‡
CRYPTO_gë_ex_d©a_im∂emíèti⁄


72 
	#CRYPTO_gë_ex_d©a_im∂emíèti⁄
 
CRYPTO_gë_ex_d©a_im∂


	)

73 #unde‡
CRYPTO_£t_ex_d©a_im∂emíèti⁄


74 
	#CRYPTO_£t_ex_d©a_im∂emíèti⁄
 
CRYPTO_£t_ex_d©a_im∂


	)

77 #unde‡
ASN1_STRING_£t_deÁu…_mask_asc


78 
	#ASN1_STRING_£t_deÁu…_mask_asc
 
ASN1_STRING_£t_def_mask_asc


	)

82 #unde‡
i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO


83 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
i2d_ASN1_SET_OF_PKCS7_SIGINF


	)

84 #unde‡
d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO


85 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
d2i_ASN1_SET_OF_PKCS7_SIGINF


	)

90 #unde‡
i2d_ASN1_SET_OF_PKCS7_RECIP_INFO


91 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
 
i2d_ASN1_SET_OF_PKCS7_RECINF


	)

92 #unde‡
d2i_ASN1_SET_OF_PKCS7_RECIP_INFO


93 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
 
d2i_ASN1_SET_OF_PKCS7_RECINF


	)

98 #unde‡
i2d_ASN1_SET_OF_ACCESS_DESCRIPTION


99 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
 
i2d_ASN1_SET_OF_ACC_DESC


	)

100 #unde‡
d2i_ASN1_SET_OF_ACCESS_DESCRIPTION


101 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
 
d2i_ASN1_SET_OF_ACC_DESC


	)

105 #unde‡
PEM_ªad_NETSCAPE_CERT_SEQUENCE


106 
	#PEM_ªad_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_NS_CERT_SEQ


	)

107 #unde‡
PEM_wrôe_NETSCAPE_CERT_SEQUENCE


108 
	#PEM_wrôe_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_NS_CERT_SEQ


	)

109 #unde‡
PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE


110 
	#PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_bio_NS_CERT_SEQ


	)

111 #unde‡
PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE


112 
	#PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_bio_NS_CERT_SEQ


	)

113 #unde‡
PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE


114 
	#PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_cb_bio_NS_CERT_SEQ


	)

117 #unde‡
PEM_ªad_PKCS8_PRIV_KEY_INFO


118 
	#PEM_ªad_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_P8_PRIV_KEY_INFO


	)

119 #unde‡
PEM_wrôe_PKCS8_PRIV_KEY_INFO


120 
	#PEM_wrôe_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_P8_PRIV_KEY_INFO


	)

121 #unde‡
PEM_ªad_bio_PKCS8_PRIV_KEY_INFO


122 
	#PEM_ªad_bio_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_bio_P8_PRIV_KEY_INFO


	)

123 #unde‡
PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO


124 
	#PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_bio_P8_PRIV_KEY_INFO


	)

125 #unde‡
PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO


126 
	#PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wπ_cb_bio_P8_PRIV_KEY_INFO


	)

129 #unde‡
PEM_wrôe_bio_PKCS8Priv©eKey_nid


130 
	#PEM_wrôe_bio_PKCS8Priv©eKey_nid
 
PEM_wrôe_bio_PKCS8PrivKey_nid


	)

133 #unde‡
X509_REVOKED_gë_ext_by_¸ôiˇl


134 
	#X509_REVOKED_gë_ext_by_¸ôiˇl
 
X509_REVOKED_gë_ext_by_¸ôic


	)

135 #unde‡
X509_pﬁicy_åì_gë0_u£r_pﬁicõs


136 
	#X509_pﬁicy_åì_gë0_u£r_pﬁicõs
 
X509_pcy_åì_gë0_u§_pﬁicõs


	)

137 #unde‡
X509_pﬁicy_node_gë0_quÆifõrs


138 
	#X509_pﬁicy_node_gë0_quÆifõrs
 
X509_pcy_node_gë0_quÆifõrs


	)

139 #unde‡
X509_STORE_CTX_gë_ex∂icô_pﬁicy


140 
	#X509_STORE_CTX_gë_ex∂icô_pﬁicy
 
X509_STORE_CTX_gë_ex∂_pﬁicy


	)

141 #unde‡
X509_STORE_CTX_gë0_cuºít_issuî


142 
	#X509_STORE_CTX_gë0_cuºít_issuî
 
X509_STORE_CTX_gë0_cur_issuî


	)

145 #unde‡
CRYPTO_£t_dy∆ock_de°roy_ˇŒback


146 
	#CRYPTO_£t_dy∆ock_de°roy_ˇŒback
 
CRYPTO_£t_dy∆ock_de°roy_cb


	)

147 #unde‡
CRYPTO_£t_dy∆ock_¸óã_ˇŒback


148 
	#CRYPTO_£t_dy∆ock_¸óã_ˇŒback
 
CRYPTO_£t_dy∆ock_¸óã_cb


	)

149 #unde‡
CRYPTO_£t_dy∆ock_lock_ˇŒback


150 
	#CRYPTO_£t_dy∆ock_lock_ˇŒback
 
CRYPTO_£t_dy∆ock_lock_cb


	)

151 #unde‡
CRYPTO_gë_dy∆ock_lock_ˇŒback


152 
	#CRYPTO_gë_dy∆ock_lock_ˇŒback
 
CRYPTO_gë_dy∆ock_lock_cb


	)

153 #unde‡
CRYPTO_gë_dy∆ock_de°roy_ˇŒback


154 
	#CRYPTO_gë_dy∆ock_de°roy_ˇŒback
 
CRYPTO_gë_dy∆ock_de°roy_cb


	)

155 #unde‡
CRYPTO_gë_dy∆ock_¸óã_ˇŒback


156 
	#CRYPTO_gë_dy∆ock_¸óã_ˇŒback
 
CRYPTO_gë_dy∆ock_¸óã_cb


	)

157 #unde‡
CRYPTO_£t_locked_mem_ex_fun˘i⁄s


158 
	#CRYPTO_£t_locked_mem_ex_fun˘i⁄s
 
CRYPTO_£t_locked_mem_ex_funcs


	)

159 #unde‡
CRYPTO_gë_locked_mem_ex_fun˘i⁄s


160 
	#CRYPTO_gë_locked_mem_ex_fun˘i⁄s
 
CRYPTO_gë_locked_mem_ex_funcs


	)

163 #unde‡
SSL_CTX_£t_deÁu…_vîify_∑ths


164 
	#SSL_CTX_£t_deÁu…_vîify_∑ths
 
SSL_CTX_£t_def_vîify_∑ths


	)

165 #unde‡
SSL_gë_ex_d©a_X509_STORE_CTX_idx


166 
	#SSL_gë_ex_d©a_X509_STORE_CTX_idx
 
SSL_gë_ex_d_X509_STORE_CTX_idx


	)

167 #unde‡
SSL_add_fûe_˚π_subje˘s_to_°ack


168 
	#SSL_add_fûe_˚π_subje˘s_to_°ack
 
SSL_add_fûe_˚π_subjs_to_°k


	)

169 #unde‡
SSL_add_dú_˚π_subje˘s_to_°ack


170 
	#SSL_add_dú_˚π_subje˘s_to_°ack
 
SSL_add_dú_˚π_subjs_to_°k


	)

171 #unde‡
SSL_CTX_u£_˚πifiˇã_chaö_fûe


172 
	#SSL_CTX_u£_˚πifiˇã_chaö_fûe
 
SSL_CTX_u£_˚π_chaö_fûe


	)

173 #unde‡
SSL_CTX_£t_˚π_vîify_ˇŒback


174 
	#SSL_CTX_£t_˚π_vîify_ˇŒback
 
SSL_CTX_£t_˚π_vîify_cb


	)

175 #unde‡
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a


176 
	#SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
 
SSL_CTX_£t_def_∑sswd_cb_ud


	)

177 #unde‡
SSL_COMP_gë_com¥essi⁄_mëhods


178 
	#SSL_COMP_gë_com¥essi⁄_mëhods
 
SSL_COMP_gë_com¥ess_mëhods


	)

179 #unde‡
s¶_add_˛õ¡hñlo_ª√gŸüã_ext


180 
	#s¶_add_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_add_˛õ¡hñlo_ª√g_ext


	)

181 #unde‡
s¶_add_£rvîhñlo_ª√gŸüã_ext


182 
	#s¶_add_£rvîhñlo_ª√gŸüã_ext
 
s¶_add_£rvîhñlo_ª√g_ext


	)

183 #unde‡
s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext


184 
	#s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_∑r£_˛õ¡hñlo_ª√g_ext


	)

185 #unde‡
s¶_∑r£_£rvîhñlo_ª√gŸüã_ext


186 
	#s¶_∑r£_£rvîhñlo_ª√gŸüã_ext
 
s¶_∑r£_£rvîhñlo_ª√g_ext


	)

187 #unde‡
SSL_§p_£rvî_∑øm_wôh_u£∫ame


188 
	#SSL_§p_£rvî_∑øm_wôh_u£∫ame
 
SSL_§p_£rvî_∑øm_wôh_un


	)

189 #unde‡
SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback


190 
	#SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback
 
SSL_CTX_£t_§p_˛õ¡_pwd_cb


	)

191 #unde‡
SSL_CTX_£t_§p_vîify_∑øm_ˇŒback


192 
	#SSL_CTX_£t_§p_vîify_∑øm_ˇŒback
 
SSL_CTX_£t_§p_vfy_∑øm_cb


	)

193 #unde‡
SSL_CTX_£t_§p_u£∫ame_ˇŒback


194 
	#SSL_CTX_£t_§p_u£∫ame_ˇŒback
 
SSL_CTX_£t_§p_un_cb


	)

195 #unde‡
s¶_add_˛õ¡hñlo_u£_§ç_ext


196 
	#s¶_add_˛õ¡hñlo_u£_§ç_ext
 
s¶_add_˛ihñlo_u£_§ç_ext


	)

197 #unde‡
s¶_add_£rvîhñlo_u£_§ç_ext


198 
	#s¶_add_£rvîhñlo_u£_§ç_ext
 
s¶_add_£rhñlo_u£_§ç_ext


	)

199 #unde‡
s¶_∑r£_˛õ¡hñlo_u£_§ç_ext


200 
	#s¶_∑r£_˛õ¡hñlo_u£_§ç_ext
 
s¶_∑r£_˛ihñlo_u£_§ç_ext


	)

201 #unde‡
s¶_∑r£_£rvîhñlo_u£_§ç_ext


202 
	#s¶_∑r£_£rvîhñlo_u£_§ç_ext
 
s¶_∑r£_£rhñlo_u£_§ç_ext


	)

203 #unde‡
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb


204 
	#SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
 
SSL_CTX_£t_√xt_¥Ÿos_adv_cb


	)

205 #unde‡
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb


206 
	#SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb
 
SSL_CTX_£t_√xt_¥Ÿo_£l_cb


	)

209 #unde‡
ENGINE_gë_deÁu…_BN_mod_exp_¸t


210 
	#ENGINE_gë_deÁu…_BN_mod_exp_¸t
 
ENGINE_gë_def_BN_mod_exp_¸t


	)

211 #unde‡
ENGINE_£t_deÁu…_BN_mod_exp_¸t


212 
	#ENGINE_£t_deÁu…_BN_mod_exp_¸t
 
ENGINE_£t_def_BN_mod_exp_¸t


	)

213 #unde‡
ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄


214 
	#ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_£t_lﬂd_¥ivkey_‚


	)

215 #unde‡
ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄


216 
	#ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_gë_lﬂd_¥ivkey_‚


	)

217 #unde‡
ENGINE_uƒegi°î_pkey_a¢1_mëhs


218 
	#ENGINE_uƒegi°î_pkey_a¢1_mëhs
 
ENGINE_uƒeg_pkey_a¢1_mëhs


	)

219 #unde‡
ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs


220 
	#ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs
 
ENGINE_ªg_Æl_pkey_a¢1_mëhs


	)

221 #unde‡
ENGINE_£t_deÁu…_pkey_a¢1_mëhs


222 
	#ENGINE_£t_deÁu…_pkey_a¢1_mëhs
 
ENGINE_£t_def_pkey_a¢1_mëhs


	)

223 #unde‡
ENGINE_gë_pkey_a¢1_mëh_ígöe


224 
	#ENGINE_gë_pkey_a¢1_mëh_ígöe
 
ENGINE_gë_pkey_a¢1_mëh_íg


	)

225 #unde‡
ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄


226 
	#ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄
 \

227 
ENGINE_£t_ld_s¶_˛¡_˚π_‚


	)

228 #unde‡
ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄


229 
	#ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄
 
ENGINE_gë_s¶_˛õ¡_˚π_‚


	)

232 #unde‡
OCSP_REQUEST_gë_ext_by_¸ôiˇl


233 
	#OCSP_REQUEST_gë_ext_by_¸ôiˇl
 
OCSP_REQUEST_gë_ext_by_¸ô


	)

234 #unde‡
OCSP_BASICRESP_gë_ext_by_¸ôiˇl


235 
	#OCSP_BASICRESP_gë_ext_by_¸ôiˇl
 
OCSP_BASICRESP_gë_ext_by_¸ô


	)

236 #unde‡
OCSP_SINGLERESP_gë_ext_by_¸ôiˇl


237 
	#OCSP_SINGLERESP_gë_ext_by_¸ôiˇl
 
OCSP_SINGLERESP_gë_ext_by_¸ô


	)

240 #unde‡
_os¶_ﬁd_des_ede3_cfb64_í¸y±


241 
	#_os¶_ﬁd_des_ede3_cfb64_í¸y±
 
_os¶_odes_ede3_cfb64_í¸y±


	)

242 #unde‡
_os¶_ﬁd_des_ede3_ofb64_í¸y±


243 
	#_os¶_ﬁd_des_ede3_ofb64_í¸y±
 
_os¶_odes_ede3_ofb64_í¸y±


	)

246 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f


247 
	#OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
 
OPENSSL_add_Æl_Ægo_noc⁄f


	)

248 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_c⁄f


249 
	#OPENSSL_add_Æl_Æg‹ôhms_c⁄f
 
OPENSSL_add_Æl_Ægo_c⁄f


	)

250 #unde‡
EVP_PKEY_mëh_£t_vîify_ªcovî


251 
	#EVP_PKEY_mëh_£t_vîify_ªcovî
 
EVP_PKEY_mëh_£t_vrfy_ªcovî


	)

254 #unde‡
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m


255 
	#EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_£t_poöt_c⁄v_f‹m


	)

256 #unde‡
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m


257 
	#EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_gë_poöt_c⁄v_f‹m


	)

258 #unde‡
EC_GROUP_˛ór_‰ì_Æl_exåa_d©a


259 
	#EC_GROUP_˛ór_‰ì_Æl_exåa_d©a
 
EC_GROUP_˛r_‰ì_Æl_xåa_d©a


	)

260 #unde‡
EC_KEY_£t_public_key_afföe_co‹dö©es


261 
	#EC_KEY_£t_public_key_afföe_co‹dö©es
 \

262 
EC_KEY_£t_pub_key_aff_co‹ds


	)

263 #unde‡
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp


264 
	#EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
 \

265 
EC_POINT_£t_J¥oj_co‹ds_GFp


	)

266 #unde‡
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp


267 
	#EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
 \

268 
EC_POINT_gë_J¥oj_co‹ds_GFp


	)

269 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GFp


270 
	#EC_POINT_£t_afföe_co‹dö©es_GFp
 
EC_POINT_£t_afföe_co‹ds_GFp


	)

271 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GFp


272 
	#EC_POINT_gë_afföe_co‹dö©es_GFp
 
EC_POINT_gë_afföe_co‹ds_GFp


	)

273 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GFp


274 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GFp
 
EC_POINT_£t_com¥_co‹ds_GFp


	)

275 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GF2m


276 
	#EC_POINT_£t_afföe_co‹dö©es_GF2m
 
EC_POINT_£t_afföe_co‹ds_GF2m


	)

277 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GF2m


278 
	#EC_POINT_gë_afföe_co‹dö©es_GF2m
 
EC_POINT_gë_afföe_co‹ds_GF2m


	)

279 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m


280 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
 \

281 
EC_POINT_£t_com¥_co‹ds_GF2m


	)

282 #unde‡
ec_GF2m_sim∂e_group_˛ór_föish


283 
	#ec_GF2m_sim∂e_group_˛ór_föish
 
ec_GF2m_sim∂e_gΩ_˛r_föish


	)

284 #unde‡
ec_GF2m_sim∂e_group_check_dis¸imö™t


285 
	#ec_GF2m_sim∂e_group_check_dis¸imö™t
 
ec_GF2m_sim∂e_gΩ_chk_dis¸im


	)

286 #unde‡
ec_GF2m_sim∂e_poöt_˛ór_föish


287 
	#ec_GF2m_sim∂e_poöt_˛ór_föish
 
ec_GF2m_sim∂e_±_˛r_föish


	)

288 #unde‡
ec_GF2m_sim∂e_poöt_£t_to_öföôy


289 
	#ec_GF2m_sim∂e_poöt_£t_to_öföôy
 
ec_GF2m_sim∂e_±_£t_to_öf


	)

290 #unde‡
ec_GF2m_sim∂e_poöts_make_afföe


291 
	#ec_GF2m_sim∂e_poöts_make_afföe
 
ec_GF2m_sim∂e_±s_make_afföe


	)

292 #unde‡
ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es


293 
	#ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es
 \

294 
ec_GF2m_smp_±_£t_af_co‹ds


	)

295 #unde‡
ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es


296 
	#ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es
 \

297 
ec_GF2m_smp_±_gë_af_co‹ds


	)

298 #unde‡
ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es


299 
	#ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es
 \

300 
ec_GF2m_smp_£t_com¥_co‹ds


	)

301 #unde‡
ec_GFp_sim∂e_group_£t_curve_GFp


302 
	#ec_GFp_sim∂e_group_£t_curve_GFp
 
ec_GFp_sim∂e_gΩ_£t_curve_GFp


	)

303 #unde‡
ec_GFp_sim∂e_group_gë_curve_GFp


304 
	#ec_GFp_sim∂e_group_gë_curve_GFp
 
ec_GFp_sim∂e_gΩ_gë_curve_GFp


	)

305 #unde‡
ec_GFp_sim∂e_group_˛ór_föish


306 
	#ec_GFp_sim∂e_group_˛ór_föish
 
ec_GFp_sim∂e_gΩ_˛ór_föish


	)

307 #unde‡
ec_GFp_sim∂e_group_£t_gíî©‹


308 
	#ec_GFp_sim∂e_group_£t_gíî©‹
 
ec_GFp_sim∂e_gΩ_£t_gíî©‹


	)

309 #unde‡
ec_GFp_sim∂e_group_gë0_gíî©‹


310 
	#ec_GFp_sim∂e_group_gë0_gíî©‹
 
ec_GFp_sim∂e_gΩ_gt0_gíî©‹


	)

311 #unde‡
ec_GFp_sim∂e_group_gë_coÁ˘‹


312 
	#ec_GFp_sim∂e_group_gë_coÁ˘‹
 
ec_GFp_sim∂e_gΩ_gë_coÁ˘‹


	)

313 #unde‡
ec_GFp_sim∂e_poöt_˛ór_föish


314 
	#ec_GFp_sim∂e_poöt_˛ór_föish
 
ec_GFp_sim∂e_±_˛ór_föish


	)

315 #unde‡
ec_GFp_sim∂e_poöt_£t_to_öföôy


316 
	#ec_GFp_sim∂e_poöt_£t_to_öföôy
 
ec_GFp_sim∂e_±_£t_to_öf


	)

317 #unde‡
ec_GFp_sim∂e_poöts_make_afföe


318 
	#ec_GFp_sim∂e_poöts_make_afföe
 
ec_GFp_sim∂e_±s_make_afföe


	)

319 #unde‡
ec_GFp_sim∂e_group_gë_curve_GFp


320 
	#ec_GFp_sim∂e_group_gë_curve_GFp
 
ec_GFp_sim∂e_gΩ_gë_curve_GFp


	)

321 #unde‡
ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp


322 
	#ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp
 \

323 
ec_GFp_smp_£t_J¥oj_co‹ds_GFp


	)

324 #unde‡
ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp


325 
	#ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp
 \

326 
ec_GFp_smp_gë_J¥oj_co‹ds_GFp


	)

327 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp


328 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp
 \

329 
ec_GFp_smp_±_£t_af_co‹ds_GFp


	)

330 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp


331 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp
 \

332 
ec_GFp_smp_±_gë_af_co‹ds_GFp


	)

333 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp


334 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp
 \

335 
ec_GFp_smp_£t_com¥_co‹ds_GFp


	)

336 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es


337 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es
 \

338 
ec_GFp_smp_±_£t_af_co‹ds


	)

339 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es


340 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es
 \

341 
ec_GFp_smp_±_gë_af_co‹ds


	)

342 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es


343 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es
 \

344 
ec_GFp_smp_£t_com¥_co‹ds


	)

345 #unde‡
ec_GFp_sim∂e_group_check_dis¸imö™t


346 
	#ec_GFp_sim∂e_group_check_dis¸imö™t
 
ec_GFp_sim∂e_gΩ_chk_dis¸im


	)

349 #unde‡
STORE_mëhod_£t_öôüli£_fun˘i⁄


350 
	#STORE_mëhod_£t_öôüli£_fun˘i⁄
 
STORE_mëh_£t_öôüli£_‚


	)

351 #unde‡
STORE_mëhod_£t_˛ónup_fun˘i⁄


352 
	#STORE_mëhod_£t_˛ónup_fun˘i⁄
 
STORE_mëh_£t_˛ónup_‚


	)

353 #unde‡
STORE_mëhod_£t_gíî©e_fun˘i⁄


354 
	#STORE_mëhod_£t_gíî©e_fun˘i⁄
 
STORE_mëh_£t_gíî©e_‚


	)

355 #unde‡
STORE_mëhod_£t_modify_fun˘i⁄


356 
	#STORE_mëhod_£t_modify_fun˘i⁄
 
STORE_mëh_£t_modify_‚


	)

357 #unde‡
STORE_mëhod_£t_ªvoke_fun˘i⁄


358 
	#STORE_mëhod_£t_ªvoke_fun˘i⁄
 
STORE_mëh_£t_ªvoke_‚


	)

359 #unde‡
STORE_mëhod_£t_dñëe_fun˘i⁄


360 
	#STORE_mëhod_£t_dñëe_fun˘i⁄
 
STORE_mëh_£t_dñëe_‚


	)

361 #unde‡
STORE_mëhod_£t_li°_°¨t_fun˘i⁄


362 
	#STORE_mëhod_£t_li°_°¨t_fun˘i⁄
 
STORE_mëh_£t_li°_°¨t_‚


	)

363 #unde‡
STORE_mëhod_£t_li°_√xt_fun˘i⁄


364 
	#STORE_mëhod_£t_li°_√xt_fun˘i⁄
 
STORE_mëh_£t_li°_√xt_‚


	)

365 #unde‡
STORE_mëhod_£t_li°_íd_fun˘i⁄


366 
	#STORE_mëhod_£t_li°_íd_fun˘i⁄
 
STORE_mëh_£t_li°_íd_‚


	)

367 #unde‡
STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄


368 
	#STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_£t_upd©e_°‹e_‚


	)

369 #unde‡
STORE_mëhod_£t_lock_°‹e_fun˘i⁄


370 
	#STORE_mëhod_£t_lock_°‹e_fun˘i⁄
 
STORE_mëh_£t_lock_°‹e_‚


	)

371 #unde‡
STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄


372 
	#STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_£t_u∆ock_°‹e_‚


	)

373 #unde‡
STORE_mëhod_gë_öôüli£_fun˘i⁄


374 
	#STORE_mëhod_gë_öôüli£_fun˘i⁄
 
STORE_mëh_gë_öôüli£_‚


	)

375 #unde‡
STORE_mëhod_gë_˛ónup_fun˘i⁄


376 
	#STORE_mëhod_gë_˛ónup_fun˘i⁄
 
STORE_mëh_gë_˛ónup_‚


	)

377 #unde‡
STORE_mëhod_gë_gíî©e_fun˘i⁄


378 
	#STORE_mëhod_gë_gíî©e_fun˘i⁄
 
STORE_mëh_gë_gíî©e_‚


	)

379 #unde‡
STORE_mëhod_gë_modify_fun˘i⁄


380 
	#STORE_mëhod_gë_modify_fun˘i⁄
 
STORE_mëh_gë_modify_‚


	)

381 #unde‡
STORE_mëhod_gë_ªvoke_fun˘i⁄


382 
	#STORE_mëhod_gë_ªvoke_fun˘i⁄
 
STORE_mëh_gë_ªvoke_‚


	)

383 #unde‡
STORE_mëhod_gë_dñëe_fun˘i⁄


384 
	#STORE_mëhod_gë_dñëe_fun˘i⁄
 
STORE_mëh_gë_dñëe_‚


	)

385 #unde‡
STORE_mëhod_gë_li°_°¨t_fun˘i⁄


386 
	#STORE_mëhod_gë_li°_°¨t_fun˘i⁄
 
STORE_mëh_gë_li°_°¨t_‚


	)

387 #unde‡
STORE_mëhod_gë_li°_√xt_fun˘i⁄


388 
	#STORE_mëhod_gë_li°_√xt_fun˘i⁄
 
STORE_mëh_gë_li°_√xt_‚


	)

389 #unde‡
STORE_mëhod_gë_li°_íd_fun˘i⁄


390 
	#STORE_mëhod_gë_li°_íd_fun˘i⁄
 
STORE_mëh_gë_li°_íd_‚


	)

391 #unde‡
STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄


392 
	#STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_gë_upd©e_°‹e_‚


	)

393 #unde‡
STORE_mëhod_gë_lock_°‹e_fun˘i⁄


394 
	#STORE_mëhod_gë_lock_°‹e_fun˘i⁄
 
STORE_mëh_gë_lock_°‹e_‚


	)

395 #unde‡
STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄


396 
	#STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_gë_u∆ock_°‹e_‚


	)

399 #unde‡
TS_RESP_CTX_£t_°©us_öfo_c⁄d


400 
	#TS_RESP_CTX_£t_°©us_öfo_c⁄d
 
TS_RESP_CTX_£t_°©_öfo_c⁄d


	)

401 #unde‡
TS_RESP_CTX_£t_˛ock_¥ecisi⁄_digôs


402 
	#TS_RESP_CTX_£t_˛ock_¥ecisi⁄_digôs
 
TS_RESP_CTX_£t_˛k_¥ec_digôs


	)

403 #unde‡
TS_CONF_£t_˛ock_¥ecisi⁄_digôs


404 
	#TS_CONF_£t_˛ock_¥ecisi⁄_digôs
 
TS_CONF_£t_˛k_¥ec_digôs


	)

407 #unde‡
CMS_Recùõ¡Info_kåi_gë0_Ægs


408 
	#CMS_Recùõ¡Info_kåi_gë0_Ægs
 
CMS_RecùInfo_kåi_gë0_Ægs


	)

409 #unde‡
CMS_Recùõ¡Info_kåi_gë0_sig√r_id


410 
	#CMS_Recùõ¡Info_kåi_gë0_sig√r_id
 
CMS_RecùInfo_kåi_gë0_sigr_id


	)

411 #unde‡
CMS_OthîRevoˇti⁄InfoF‹m©_ô


412 
	#CMS_OthîRevoˇti⁄InfoF‹m©_ô
 
CMS_OthîRevocInfoF‹m©_ô


	)

413 #unde‡
CMS_KeyAgªeRecùõ¡Idítifõr_ô


414 
	#CMS_KeyAgªeRecùõ¡Idítifõr_ô
 
CMS_KeyAgªeRecùIdítifõr_ô


	)

415 #unde‡
CMS_Origö©‹IdítifõrOrKey_ô


416 
	#CMS_Origö©‹IdítifõrOrKey_ô
 
CMS_Origö©‹IdOrKey_ô


	)

417 #unde‡
cms_Sig√rIdítifõr_gë0_sig√r_id


418 
	#cms_Sig√rIdítifõr_gë0_sig√r_id
 
cms_Sig√rId_gë0_sig√r_id


	)

421 #unde‡
dés1_ªå™smô_buf„ªd_mesßges


422 
	#dés1_ªå™smô_buf„ªd_mesßges
 
dés1_ªå™smô_buf„ªd_msgs


	)

425 #unde‡
SRP_gíî©e_£rvî_ma°î_£¸ë


426 
	#SRP_gíî©e_£rvî_ma°î_£¸ë
 
SRP_gí_£rvî_ma°î_£¸ë


	)

427 #unde‡
SRP_gíî©e_˛õ¡_ma°î_£¸ë


428 
	#SRP_gíî©e_˛õ¡_ma°î_£¸ë
 
SRP_gí_˛õ¡_ma°î_£¸ë


	)

431 #unde‡
UI_mëhod_gë_¥om±_c⁄°ru˘‹


432 
	#UI_mëhod_gë_¥om±_c⁄°ru˘‹
 
UI_mëhod_gë_¥om±_c⁄°ru˘r


	)

433 #unde‡
UI_mëhod_£t_¥om±_c⁄°ru˘‹


434 
	#UI_mëhod_£t_¥om±_c⁄°ru˘‹
 
UI_mëhod_£t_¥om±_c⁄°ru˘r


	)

440 #i‡
deföed
(
OPENSSL_SYS_VMS
Ë|| deföed(
OPENSSL_SYS_OS2
)

441 #unde‡
ERR_lﬂd_CRYPTO_°rögs


442 
	#ERR_lﬂd_CRYPTO_°rögs
 
ERR_lﬂd_CRYPTOlib_°rögs


	)

443 #unde‡
OCSP_¸lID_√w


444 
	#OCSP_¸lID_√w
 
OCSP_¸lID2_√w


	)

446 #unde‡
d2i_ECPARAMETERS


447 
	#d2i_ECPARAMETERS
 
d2i_UC_ECPARAMETERS


	)

448 #unde‡
i2d_ECPARAMETERS


449 
	#i2d_ECPARAMETERS
 
i2d_UC_ECPARAMETERS


	)

450 #unde‡
d2i_ECPKPARAMETERS


451 
	#d2i_ECPKPARAMETERS
 
d2i_UC_ECPKPARAMETERS


	)

452 #unde‡
i2d_ECPKPARAMETERS


453 
	#i2d_ECPKPARAMETERS
 
i2d_UC_ECPKPARAMETERS


	)

461 #unde‡
X509v3_˛ónup_exãnsi⁄s


462 
	#X509v3_˛ónup_exãnsi⁄s
 
oX509v3_˛ónup_exãnsi⁄s


	)

463 #unde‡
X509v3_add_exãnsi⁄


464 
	#X509v3_add_exãnsi⁄
 
oX509v3_add_exãnsi⁄


	)

465 #unde‡
X509v3_add_√tsˇ≥_exãnsi⁄s


466 
	#X509v3_add_√tsˇ≥_exãnsi⁄s
 
oX509v3_add_√tsˇ≥_exãnsi⁄s


	)

467 #unde‡
X509v3_add_°™d¨d_exãnsi⁄s


468 
	#X509v3_add_°™d¨d_exãnsi⁄s
 
oX509v3_add_°™d¨d_exãnsi⁄s


	)

471 #unde‡
cms_D©a_¸óã


472 
	#cms_D©a_¸óã
 
¥iv_cms_D©a_¸óã


	)

	@/usr/include/openssl/tls1.h

151 #i‚de‡
HEADER_TLS1_H


152 
	#HEADER_TLS1_H


	)

154 
	~<›ís¶/buf„r.h
>

156 #ifde‡ 
__˝lu•lus


160 
	#TLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES
 0

	)

162 
	#TLS1_2_VERSION
 0x0303

	)

163 
	#TLS1_2_VERSION_MAJOR
 0x03

	)

164 
	#TLS1_2_VERSION_MINOR
 0x03

	)

166 
	#TLS1_1_VERSION
 0x0302

	)

167 
	#TLS1_1_VERSION_MAJOR
 0x03

	)

168 
	#TLS1_1_VERSION_MINOR
 0x02

	)

170 
	#TLS1_VERSION
 0x0301

	)

171 
	#TLS1_VERSION_MAJOR
 0x03

	)

172 
	#TLS1_VERSION_MINOR
 0x01

	)

174 
	#TLS1_gë_vîsi⁄
(
s
) \

175 ((
s
->
vîsi⁄
 >> 8Ë=
TLS1_VERSION_MAJOR
 ? s->vîsi⁄ : 0)

	)

177 
	#TLS1_gë_˛õ¡_vîsi⁄
(
s
) \

178 ((
s
->
˛õ¡_vîsi⁄
 >> 8Ë=
TLS1_VERSION_MAJOR
 ? s->˛õ¡_vîsi⁄ : 0)

	)

180 
	#TLS1_AD_DECRYPTION_FAILED
 21

	)

181 
	#TLS1_AD_RECORD_OVERFLOW
 22

	)

182 
	#TLS1_AD_UNKNOWN_CA
 48

	)

183 
	#TLS1_AD_ACCESS_DENIED
 49

	)

184 
	#TLS1_AD_DECODE_ERROR
 50

	)

185 
	#TLS1_AD_DECRYPT_ERROR
 51

	)

186 
	#TLS1_AD_EXPORT_RESTRICTION
 60

	)

187 
	#TLS1_AD_PROTOCOL_VERSION
 70

	)

188 
	#TLS1_AD_INSUFFICIENT_SECURITY
 71

	)

189 
	#TLS1_AD_INTERNAL_ERROR
 80

	)

190 
	#TLS1_AD_USER_CANCELLED
 90

	)

191 
	#TLS1_AD_NO_RENEGOTIATION
 100

	)

193 
	#TLS1_AD_UNSUPPORTED_EXTENSION
 110

	)

194 
	#TLS1_AD_CERTIFICATE_UNOBTAINABLE
 111

	)

195 
	#TLS1_AD_UNRECOGNIZED_NAME
 112

	)

196 
	#TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 113

	)

197 
	#TLS1_AD_BAD_CERTIFICATE_HASH_VALUE
 114

	)

198 
	#TLS1_AD_UNKNOWN_PSK_IDENTITY
 115

	)

201 
	#TLSEXT_TYPE_£rvî_«me
 0

	)

202 
	#TLSEXT_TYPE_max_‰agmít_Àngth
 1

	)

203 
	#TLSEXT_TYPE_˛õ¡_˚πifiˇã_uæ
 2

	)

204 
	#TLSEXT_TYPE_åu°ed_ˇ_keys
 3

	)

205 
	#TLSEXT_TYPE_åunˇãd_hmac
 4

	)

206 
	#TLSEXT_TYPE_°©us_ªque°
 5

	)

208 
	#TLSEXT_TYPE_u£r_m≠pög
 6

	)

211 
	#TLSEXT_TYPE_˛õ¡_authz
 7

	)

212 
	#TLSEXT_TYPE_£rvî_authz
 8

	)

215 
	#TLSEXT_TYPE_˚π_ty≥
 9

	)

218 
	#TLSEXT_TYPE_ñlùtic_curves
 10

	)

219 
	#TLSEXT_TYPE_ec_poöt_f‹m©s
 11

	)

222 
	#TLSEXT_TYPE_§p
 12

	)

225 
	#TLSEXT_TYPE_sig«tuª_Æg‹ôhms
 13

	)

228 
	#TLSEXT_TYPE_u£_§ç
 14

	)

231 
	#TLSEXT_TYPE_hóπbót
 15

	)

234 
	#TLSEXT_TYPE_£ssi⁄_tickë
 35

	)

240 
	#TLSEXT_TYPE_›aque_¥f_öput
 ?? */

	)

244 
	#TLSEXT_TYPE_ª√gŸüã
 0xff01

	)

246 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


248 
	#TLSEXT_TYPE_√xt_¥Ÿo_√g
 13172

	)

252 
	#TLSEXT_NAMETYPE_ho°_«me
 0

	)

254 
	#TLSEXT_STATUSTYPE_oc•
 1

	)

257 
	#TLSEXT_ECPOINTFORMAT_fú°
 0

	)

258 
	#TLSEXT_ECPOINTFORMAT_uncom¥es£d
 0

	)

259 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_¥ime
 1

	)

260 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_ch¨2
 2

	)

261 
	#TLSEXT_ECPOINTFORMAT_œ°
 2

	)

265 
	#TLSEXT_sig«tuª_™⁄ymous
 0

	)

266 
	#TLSEXT_sig«tuª_rß
 1

	)

267 
	#TLSEXT_sig«tuª_dß
 2

	)

268 
	#TLSEXT_sig«tuª_ecdß
 3

	)

270 
	#TLSEXT_hash_n⁄e
 0

	)

271 
	#TLSEXT_hash_md5
 1

	)

272 
	#TLSEXT_hash_sha1
 2

	)

273 
	#TLSEXT_hash_sha224
 3

	)

274 
	#TLSEXT_hash_sha256
 4

	)

275 
	#TLSEXT_hash_sha384
 5

	)

276 
	#TLSEXT_hash_sha512
 6

	)

278 #i‚de‡
OPENSSL_NO_TLSEXT


280 
	#TLSEXT_MAXLEN_ho°_«me
 255

	)

282 c⁄° *
SSL_gë_£rvî«me
(c⁄° 
SSL
 *
s
, c⁄° 
ty≥
);

283 
SSL_gë_£rvî«me_ty≥
(c⁄° 
SSL
 *
s
);

291 
SSL_exp‹t_keyög_m©îül
(
SSL
 *
s
, *
out
, 
size_t
 
ﬁí
,

292 c⁄° *
œbñ
, 
size_t
 
Œí
, c⁄° *
p
, size_à
∂í
,

293 
u£_c⁄ãxt
);

295 
	#SSL_£t_é£xt_ho°_«me
(
s
,
«me
) \

296 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_HOSTNAME
,
TLSEXT_NAMETYPE_ho°_«me
,(*)
«me
)

	)

298 
	#SSL_£t_é£xt_debug_ˇŒback
(
s¶
, 
cb
) \

299 
	`SSL_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_CB
,((*)())
cb
)

	)

301 
	#SSL_£t_é£xt_debug_¨g
(
s¶
, 
¨g
) \

302 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_ARG
,0, (*)
¨g
)

	)

304 
	#SSL_£t_é£xt_°©us_ty≥
(
s¶
, 
ty≥
) \

305 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
,
ty≥
, 
NULL
)

	)

307 
	#SSL_gë_é£xt_°©us_exts
(
s¶
, 
¨g
) \

308 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

310 
	#SSL_£t_é£xt_°©us_exts
(
s¶
, 
¨g
) \

311 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

313 
	#SSL_gë_é£xt_°©us_ids
(
s¶
, 
¨g
) \

314 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

316 
	#SSL_£t_é£xt_°©us_ids
(
s¶
, 
¨g
) \

317 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

319 
	#SSL_gë_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
) \

320 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
,0, (*)
¨g
)

	)

322 
	#SSL_£t_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
, 
¨gÀn
) \

323 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
,
¨gÀn
, (*)
¨g
)

	)

325 
	#SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
˘x
, 
cb
) \

326 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
,((*)())
cb
)

	)

328 
	#SSL_TLSEXT_ERR_OK
 0

	)

329 
	#SSL_TLSEXT_ERR_ALERT_WARNING
 1

	)

330 
	#SSL_TLSEXT_ERR_ALERT_FATAL
 2

	)

331 
	#SSL_TLSEXT_ERR_NOACK
 3

	)

333 
	#SSL_CTX_£t_é£xt_£rvî«me_¨g
(
˘x
, 
¨g
) \

334 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
,0, (*)
¨g
)

	)

336 
	#SSL_CTX_gë_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

337 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_GET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

338 
	#SSL_CTX_£t_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

339 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_SET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

341 
	#SSL_CTX_£t_é£xt_°©us_cb
(
s¶
, 
cb
) \

342 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
,((*)())
cb
)

	)

344 
	#SSL_CTX_£t_é£xt_°©us_¨g
(
s¶
, 
¨g
) \

345 
	`SSL_CTX_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
,0, (*)
¨g
)

	)

347 
	#SSL_£t_é£xt_›aque_¥f_öput
(
s
, 
§c
, 
Àn
) \

348 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
, 
Àn
, 
§c
)

	)

349 
	#SSL_CTX_£t_é£xt_›aque_¥f_öput_ˇŒback
(
˘x
, 
cb
) \

350 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
, ((*)())
cb
)

	)

351 
	#SSL_CTX_£t_é£xt_›aque_¥f_öput_ˇŒback_¨g
(
˘x
, 
¨g
) \

352 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
, 0, 
¨g
)

	)

354 
	#SSL_CTX_£t_é£xt_tickë_key_cb
(
s¶
, 
cb
) \

355 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
,((*)())
cb
)

	)

357 #i‚de‡
OPENSSL_NO_HEARTBEATS


358 
	#SSL_TLSEXT_HB_ENABLED
 0x01

	)

359 
	#SSL_TLSEXT_HB_DONT_SEND_REQUESTS
 0x02

	)

360 
	#SSL_TLSEXT_HB_DONT_RECV_REQUESTS
 0x04

	)

362 
	#SSL_gë_é£xt_hóπbót_≥ndög
(
s¶
) \

363 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING
,0,
NULL
)

	)

364 
	#SSL_£t_é£xt_hóπbót_no_ªque°s
(
s¶
, 
¨g
) \

365 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS
,
¨g
,
NULL
)

	)

370 
	#TLS1_CK_PSK_WITH_RC4_128_SHA
 0x0300008A

	)

371 
	#TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA
 0x0300008B

	)

372 
	#TLS1_CK_PSK_WITH_AES_128_CBC_SHA
 0x0300008C

	)

373 
	#TLS1_CK_PSK_WITH_AES_256_CBC_SHA
 0x0300008D

	)

380 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_MD5
 0x03000060

	)

381 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 0x03000061

	)

382 
	#TLS1_CK_RSA_EXPORT1024_WITH_DES_CBC_SHA
 0x03000062

	)

383 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 0x03000063

	)

384 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA
 0x03000064

	)

385 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 0x03000065

	)

386 
	#TLS1_CK_DHE_DSS_WITH_RC4_128_SHA
 0x03000066

	)

390 
	#TLS1_CK_RSA_WITH_AES_128_SHA
 0x0300002F

	)

391 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA
 0x03000030

	)

392 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA
 0x03000031

	)

393 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA
 0x03000032

	)

394 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA
 0x03000033

	)

395 
	#TLS1_CK_ADH_WITH_AES_128_SHA
 0x03000034

	)

397 
	#TLS1_CK_RSA_WITH_AES_256_SHA
 0x03000035

	)

398 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA
 0x03000036

	)

399 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA
 0x03000037

	)

400 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA
 0x03000038

	)

401 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA
 0x03000039

	)

402 
	#TLS1_CK_ADH_WITH_AES_256_SHA
 0x0300003A

	)

405 
	#TLS1_CK_RSA_WITH_NULL_SHA256
 0x0300003B

	)

406 
	#TLS1_CK_RSA_WITH_AES_128_SHA256
 0x0300003C

	)

407 
	#TLS1_CK_RSA_WITH_AES_256_SHA256
 0x0300003D

	)

408 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA256
 0x0300003E

	)

409 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA256
 0x0300003F

	)

410 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA256
 0x03000040

	)

413 
	#TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000041

	)

414 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000042

	)

415 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000043

	)

416 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000044

	)

417 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000045

	)

418 
	#TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA
 0x03000046

	)

421 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA256
 0x03000067

	)

422 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA256
 0x03000068

	)

423 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA256
 0x03000069

	)

424 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA256
 0x0300006A

	)

425 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA256
 0x0300006B

	)

426 
	#TLS1_CK_ADH_WITH_AES_128_SHA256
 0x0300006C

	)

427 
	#TLS1_CK_ADH_WITH_AES_256_SHA256
 0x0300006D

	)

430 
	#TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000084

	)

431 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000085

	)

432 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000086

	)

433 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000087

	)

434 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000088

	)

435 
	#TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA
 0x03000089

	)

438 
	#TLS1_CK_RSA_WITH_SEED_SHA
 0x03000096

	)

439 
	#TLS1_CK_DH_DSS_WITH_SEED_SHA
 0x03000097

	)

440 
	#TLS1_CK_DH_RSA_WITH_SEED_SHA
 0x03000098

	)

441 
	#TLS1_CK_DHE_DSS_WITH_SEED_SHA
 0x03000099

	)

442 
	#TLS1_CK_DHE_RSA_WITH_SEED_SHA
 0x0300009A

	)

443 
	#TLS1_CK_ADH_WITH_SEED_SHA
 0x0300009B

	)

446 
	#TLS1_CK_RSA_WITH_AES_128_GCM_SHA256
 0x0300009C

	)

447 
	#TLS1_CK_RSA_WITH_AES_256_GCM_SHA384
 0x0300009D

	)

448 
	#TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300009E

	)

449 
	#TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300009F

	)

450 
	#TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256
 0x030000A0

	)

451 
	#TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384
 0x030000A1

	)

452 
	#TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256
 0x030000A2

	)

453 
	#TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384
 0x030000A3

	)

454 
	#TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256
 0x030000A4

	)

455 
	#TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384
 0x030000A5

	)

456 
	#TLS1_CK_ADH_WITH_AES_128_GCM_SHA256
 0x030000A6

	)

457 
	#TLS1_CK_ADH_WITH_AES_256_GCM_SHA384
 0x030000A7

	)

460 
	#TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA
 0x0300C001

	)

461 
	#TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA
 0x0300C002

	)

462 
	#TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C003

	)

463 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C004

	)

464 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C005

	)

466 
	#TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA
 0x0300C006

	)

467 
	#TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA
 0x0300C007

	)

468 
	#TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C008

	)

469 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C009

	)

470 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C00A

	)

472 
	#TLS1_CK_ECDH_RSA_WITH_NULL_SHA
 0x0300C00B

	)

473 
	#TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA
 0x0300C00C

	)

474 
	#TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA
 0x0300C00D

	)

475 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA
 0x0300C00E

	)

476 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA
 0x0300C00F

	)

478 
	#TLS1_CK_ECDHE_RSA_WITH_NULL_SHA
 0x0300C010

	)

479 
	#TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA
 0x0300C011

	)

480 
	#TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 0x0300C012

	)

481 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA
 0x0300C013

	)

482 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA
 0x0300C014

	)

484 
	#TLS1_CK_ECDH_™⁄_WITH_NULL_SHA
 0x0300C015

	)

485 
	#TLS1_CK_ECDH_™⁄_WITH_RC4_128_SHA
 0x0300C016

	)

486 
	#TLS1_CK_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 0x0300C017

	)

487 
	#TLS1_CK_ECDH_™⁄_WITH_AES_128_CBC_SHA
 0x0300C018

	)

488 
	#TLS1_CK_ECDH_™⁄_WITH_AES_256_CBC_SHA
 0x0300C019

	)

491 
	#TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 0x0300C01A

	)

492 
	#TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 0x0300C01B

	)

493 
	#TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 0x0300C01C

	)

494 
	#TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA
 0x0300C01D

	)

495 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 0x0300C01E

	)

496 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 0x0300C01F

	)

497 
	#TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA
 0x0300C020

	)

498 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 0x0300C021

	)

499 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 0x0300C022

	)

503 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256
 0x0300C023

	)

504 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384
 0x0300C024

	)

505 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256
 0x0300C025

	)

506 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384
 0x0300C026

	)

507 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256
 0x0300C027

	)

508 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384
 0x0300C028

	)

509 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256
 0x0300C029

	)

510 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384
 0x0300C02A

	)

513 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02B

	)

514 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02C

	)

515 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02D

	)

516 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02E

	)

517 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300C02F

	)

518 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300C030

	)

519 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256
 0x0300C031

	)

520 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384
 0x0300C032

	)

529 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_MD5
 "EXP1024-RC4-MD5"

	)

530 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 "EXP1024-RC2-CBC-MD5"

	)

531 
	#TLS1_TXT_RSA_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DES-CBC-SHA"

	)

532 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DHE-DSS-DES-CBC-SHA"

	)

533 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-RC4-SHA"

	)

534 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-DHE-DSS-RC4-SHA"

	)

535 
	#TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA
 "DHE-DSS-RC4-SHA"

	)

538 
	#TLS1_TXT_RSA_WITH_AES_128_SHA
 "AES128-SHA"

	)

539 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA
 "DH-DSS-AES128-SHA"

	)

540 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA
 "DH-RSA-AES128-SHA"

	)

541 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA
 "DHE-DSS-AES128-SHA"

	)

542 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA
 "DHE-RSA-AES128-SHA"

	)

543 
	#TLS1_TXT_ADH_WITH_AES_128_SHA
 "ADH-AES128-SHA"

	)

545 
	#TLS1_TXT_RSA_WITH_AES_256_SHA
 "AES256-SHA"

	)

546 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA
 "DH-DSS-AES256-SHA"

	)

547 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA
 "DH-RSA-AES256-SHA"

	)

548 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA
 "DHE-DSS-AES256-SHA"

	)

549 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA
 "DHE-RSA-AES256-SHA"

	)

550 
	#TLS1_TXT_ADH_WITH_AES_256_SHA
 "ADH-AES256-SHA"

	)

553 
	#TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA
 "ECDH-ECDSA-NULL-SHA"

	)

554 
	#TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA
 "ECDH-ECDSA-RC4-SHA"

	)

555 
	#TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDH-ECDSA-DES-CBC3-SHA"

	)

556 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 "ECDH-ECDSA-AES128-SHA"

	)

557 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 "ECDH-ECDSA-AES256-SHA"

	)

559 
	#TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA
 "ECDHE-ECDSA-NULL-SHA"

	)

560 
	#TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA
 "ECDHE-ECDSA-RC4-SHA"

	)

561 
	#TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDHE-ECDSA-DES-CBC3-SHA"

	)

562 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 "ECDHE-ECDSA-AES128-SHA"

	)

563 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 "ECDHE-ECDSA-AES256-SHA"

	)

565 
	#TLS1_TXT_ECDH_RSA_WITH_NULL_SHA
 "ECDH-RSA-NULL-SHA"

	)

566 
	#TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA
 "ECDH-RSA-RC4-SHA"

	)

567 
	#TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA
 "ECDH-RSA-DES-CBC3-SHA"

	)

568 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA
 "ECDH-RSA-AES128-SHA"

	)

569 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA
 "ECDH-RSA-AES256-SHA"

	)

571 
	#TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA
 "ECDHE-RSA-NULL-SHA"

	)

572 
	#TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA
 "ECDHE-RSA-RC4-SHA"

	)

573 
	#TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 "ECDHE-RSA-DES-CBC3-SHA"

	)

574 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA
 "ECDHE-RSA-AES128-SHA"

	)

575 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA
 "ECDHE-RSA-AES256-SHA"

	)

577 
	#TLS1_TXT_ECDH_™⁄_WITH_NULL_SHA
 "AECDH-NULL-SHA"

	)

578 
	#TLS1_TXT_ECDH_™⁄_WITH_RC4_128_SHA
 "AECDH-RC4-SHA"

	)

579 
	#TLS1_TXT_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 "AECDH-DES-CBC3-SHA"

	)

580 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_128_CBC_SHA
 "AECDH-AES128-SHA"

	)

581 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_256_CBC_SHA
 "AECDH-AES256-SHA"

	)

584 
	#TLS1_TXT_PSK_WITH_RC4_128_SHA
 "PSK-RC4-SHA"

	)

585 
	#TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA
 "PSK-3DES-EDE-CBC-SHA"

	)

586 
	#TLS1_TXT_PSK_WITH_AES_128_CBC_SHA
 "PSK-AES128-CBC-SHA"

	)

587 
	#TLS1_TXT_PSK_WITH_AES_256_CBC_SHA
 "PSK-AES256-CBC-SHA"

	)

590 
	#TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 "SRP-3DES-EDE-CBC-SHA"

	)

591 
	#TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 "SRP-RSA-3DES-EDE-CBC-SHA"

	)

592 
	#TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 "SRP-DSS-3DES-EDE-CBC-SHA"

	)

593 
	#TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA
 "SRP-AES-128-CBC-SHA"

	)

594 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 "SRP-RSA-AES-128-CBC-SHA"

	)

595 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 "SRP-DSS-AES-128-CBC-SHA"

	)

596 
	#TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA
 "SRP-AES-256-CBC-SHA"

	)

597 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 "SRP-RSA-AES-256-CBC-SHA"

	)

598 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 "SRP-DSS-AES-256-CBC-SHA"

	)

601 
	#TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA
 "CAMELLIA128-SHA"

	)

602 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DH-DSS-CAMELLIA128-SHA"

	)

603 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DH-RSA-CAMELLIA128-SHA"

	)

604 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DHE-DSS-CAMELLIA128-SHA"

	)

605 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DHE-RSA-CAMELLIA128-SHA"

	)

606 
	#TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA
 "ADH-CAMELLIA128-SHA"

	)

608 
	#TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA
 "CAMELLIA256-SHA"

	)

609 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DH-DSS-CAMELLIA256-SHA"

	)

610 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DH-RSA-CAMELLIA256-SHA"

	)

611 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DHE-DSS-CAMELLIA256-SHA"

	)

612 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DHE-RSA-CAMELLIA256-SHA"

	)

613 
	#TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA
 "ADH-CAMELLIA256-SHA"

	)

616 
	#TLS1_TXT_RSA_WITH_SEED_SHA
 "SEED-SHA"

	)

617 
	#TLS1_TXT_DH_DSS_WITH_SEED_SHA
 "DH-DSS-SEED-SHA"

	)

618 
	#TLS1_TXT_DH_RSA_WITH_SEED_SHA
 "DH-RSA-SEED-SHA"

	)

619 
	#TLS1_TXT_DHE_DSS_WITH_SEED_SHA
 "DHE-DSS-SEED-SHA"

	)

620 
	#TLS1_TXT_DHE_RSA_WITH_SEED_SHA
 "DHE-RSA-SEED-SHA"

	)

621 
	#TLS1_TXT_ADH_WITH_SEED_SHA
 "ADH-SEED-SHA"

	)

624 
	#TLS1_TXT_RSA_WITH_NULL_SHA256
 "NULL-SHA256"

	)

625 
	#TLS1_TXT_RSA_WITH_AES_128_SHA256
 "AES128-SHA256"

	)

626 
	#TLS1_TXT_RSA_WITH_AES_256_SHA256
 "AES256-SHA256"

	)

627 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA256
 "DH-DSS-AES128-SHA256"

	)

628 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA256
 "DH-RSA-AES128-SHA256"

	)

629 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256
 "DHE-DSS-AES128-SHA256"

	)

630 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256
 "DHE-RSA-AES128-SHA256"

	)

631 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA256
 "DH-DSS-AES256-SHA256"

	)

632 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA256
 "DH-RSA-AES256-SHA256"

	)

633 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256
 "DHE-DSS-AES256-SHA256"

	)

634 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256
 "DHE-RSA-AES256-SHA256"

	)

635 
	#TLS1_TXT_ADH_WITH_AES_128_SHA256
 "ADH-AES128-SHA256"

	)

636 
	#TLS1_TXT_ADH_WITH_AES_256_SHA256
 "ADH-AES256-SHA256"

	)

639 
	#TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256
 "AES128-GCM-SHA256"

	)

640 
	#TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384
 "AES256-GCM-SHA384"

	)

641 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256
 "DHE-RSA-AES128-GCM-SHA256"

	)

642 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384
 "DHE-RSA-AES256-GCM-SHA384"

	)

643 
	#TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256
 "DH-RSA-AES128-GCM-SHA256"

	)

644 
	#TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384
 "DH-RSA-AES256-GCM-SHA384"

	)

645 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256
 "DHE-DSS-AES128-GCM-SHA256"

	)

646 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384
 "DHE-DSS-AES256-GCM-SHA384"

	)

647 
	#TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256
 "DH-DSS-AES128-GCM-SHA256"

	)

648 
	#TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384
 "DH-DSS-AES256-GCM-SHA384"

	)

649 
	#TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256
 "ADH-AES128-GCM-SHA256"

	)

650 
	#TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384
 "ADH-AES256-GCM-SHA384"

	)

654 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256
 "ECDHE-ECDSA-AES128-SHA256"

	)

655 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384
 "ECDHE-ECDSA-AES256-SHA384"

	)

656 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256
 "ECDH-ECDSA-AES128-SHA256"

	)

657 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384
 "ECDH-ECDSA-AES256-SHA384"

	)

658 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256
 "ECDHE-RSA-AES128-SHA256"

	)

659 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384
 "ECDHE-RSA-AES256-SHA384"

	)

660 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256
 "ECDH-RSA-AES128-SHA256"

	)

661 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384
 "ECDH-RSA-AES256-SHA384"

	)

664 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDHE-ECDSA-AES128-GCM-SHA256"

	)

665 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDHE-ECDSA-AES256-GCM-SHA384"

	)

666 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDH-ECDSA-AES128-GCM-SHA256"

	)

667 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDH-ECDSA-AES256-GCM-SHA384"

	)

668 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 "ECDHE-RSA-AES128-GCM-SHA256"

	)

669 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 "ECDHE-RSA-AES256-GCM-SHA384"

	)

670 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256
 "ECDH-RSA-AES128-GCM-SHA256"

	)

671 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384
 "ECDH-RSA-AES256-GCM-SHA384"

	)

673 
	#TLS_CT_RSA_SIGN
 1

	)

674 
	#TLS_CT_DSS_SIGN
 2

	)

675 
	#TLS_CT_RSA_FIXED_DH
 3

	)

676 
	#TLS_CT_DSS_FIXED_DH
 4

	)

677 
	#TLS_CT_ECDSA_SIGN
 64

	)

678 
	#TLS_CT_RSA_FIXED_ECDH
 65

	)

679 
	#TLS_CT_ECDSA_FIXED_ECDH
 66

	)

680 
	#TLS_CT_GOST94_SIGN
 21

	)

681 
	#TLS_CT_GOST01_SIGN
 22

	)

684 
	#TLS_CT_NUMBER
 9

	)

686 
	#TLS1_FINISH_MAC_LENGTH
 12

	)

688 
	#TLS_MD_MAX_CONST_SIZE
 20

	)

689 
	#TLS_MD_CLIENT_FINISH_CONST
 "˛õ¡ föished"

	)

690 
	#TLS_MD_CLIENT_FINISH_CONST_SIZE
 15

	)

691 
	#TLS_MD_SERVER_FINISH_CONST
 "£rvî föished"

	)

692 
	#TLS_MD_SERVER_FINISH_CONST_SIZE
 15

	)

693 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

694 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

695 
	#TLS_MD_KEY_EXPANSION_CONST
 "keyÉx∑nsi⁄"

	)

696 
	#TLS_MD_KEY_EXPANSION_CONST_SIZE
 13

	)

697 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "˛õ¡ wrôêkey"

	)

698 
	#TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE
 16

	)

699 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

700 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

701 
	#TLS_MD_IV_BLOCK_CONST
 "IV block"

	)

702 
	#TLS_MD_IV_BLOCK_CONST_SIZE
 8

	)

703 
	#TLS_MD_MASTER_SECRET_CONST
 "ma°î se¸ë"

	)

704 
	#TLS_MD_MASTER_SECRET_CONST_SIZE
 13

	)

706 #ifde‡
CHARSET_EBCDIC


707 #unde‡
TLS_MD_CLIENT_FINISH_CONST


708 
	#TLS_MD_CLIENT_FINISH_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

709 #unde‡
TLS_MD_SERVER_FINISH_CONST


710 
	#TLS_MD_SERVER_FINISH_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

711 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


712 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

713 #unde‡
TLS_MD_KEY_EXPANSION_CONST


714 
	#TLS_MD_KEY_EXPANSION_CONST
 "\x6b\x65\x79\x20\x65\x78\x70\x61\x6e\x73\x69\x6f\x6e"

	)

715 #unde‡
TLS_MD_CLIENT_WRITE_KEY_CONST


716 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

717 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


718 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

719 #unde‡
TLS_MD_IV_BLOCK_CONST


720 
	#TLS_MD_IV_BLOCK_CONST
 "\x49\x56\x20\x62\x6c\x6f\x63\x6b"

	)

721 #unde‡
TLS_MD_MASTER_SECRET_CONST


722 
	#TLS_MD_MASTER_SECRET_CONST
 "\x6d\x61\x73\x74\x65\x72\x20\x73\x65\x63\x72\x65\x74"

	)

726 
	sés_£ssi⁄_tickë_ext_°


728 
Àngth
;

729 *
d©a
;

732 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509.h

64 #i‚de‡
HEADER_X509_H


65 
	#HEADER_X509_H


	)

67 
	~<›ís¶/e_os2.h
>

68 
	~<›ís¶/symhacks.h
>

69 #i‚de‡
OPENSSL_NO_BUFFER


70 
	~<›ís¶/buf„r.h
>

72 #i‚de‡
OPENSSL_NO_EVP


73 
	~<›ís¶/evp.h
>

75 #i‚de‡
OPENSSL_NO_BIO


76 
	~<›ís¶/bio.h
>

78 
	~<›ís¶/°ack.h
>

79 
	~<›ís¶/a¢1.h
>

80 
	~<›ís¶/ß„°ack.h
>

82 #i‚de‡
OPENSSL_NO_EC


83 
	~<›ís¶/ec.h
>

86 #i‚de‡
OPENSSL_NO_ECDSA


87 
	~<›ís¶/ecdß.h
>

90 #i‚de‡
OPENSSL_NO_ECDH


91 
	~<›ís¶/ecdh.h
>

94 #i‚de‡
OPENSSL_NO_DEPRECATED


95 #i‚de‡
OPENSSL_NO_RSA


96 
	~<›ís¶/rß.h
>

98 #i‚de‡
OPENSSL_NO_DSA


99 
	~<›ís¶/dß.h
>

101 #i‚de‡
OPENSSL_NO_DH


102 
	~<›ís¶/dh.h
>

106 #i‚de‡
OPENSSL_NO_SHA


107 
	~<›ís¶/sha.h
>

109 
	~<›ís¶/os¶_typ.h
>

111 #ifde‡ 
__˝lu•lus


115 #ifde‡
OPENSSL_SYS_WIN32


117 #unde‡
X509_NAME


118 #unde‡
X509_CERT_PAIR


119 #unde‡
X509_EXTENSIONS


122 
	#X509_FILETYPE_PEM
 1

	)

123 
	#X509_FILETYPE_ASN1
 2

	)

124 
	#X509_FILETYPE_DEFAULT
 3

	)

126 
	#X509v3_KU_DIGITAL_SIGNATURE
 0x0080

	)

127 
	#X509v3_KU_NON_REPUDIATION
 0x0040

	)

128 
	#X509v3_KU_KEY_ENCIPHERMENT
 0x0020

	)

129 
	#X509v3_KU_DATA_ENCIPHERMENT
 0x0010

	)

130 
	#X509v3_KU_KEY_AGREEMENT
 0x0008

	)

131 
	#X509v3_KU_KEY_CERT_SIGN
 0x0004

	)

132 
	#X509v3_KU_CRL_SIGN
 0x0002

	)

133 
	#X509v3_KU_ENCIPHER_ONLY
 0x0001

	)

134 
	#X509v3_KU_DECIPHER_ONLY
 0x8000

	)

135 
	#X509v3_KU_UNDEF
 0xffff

	)

137 
	sX509_obje˘s_°


139 
nid
;

140 (*
a2i
)();

141 (*
i2a
)();

142 } 
	tX509_OBJECTS
;

144 
	sX509_Æg‹_°


146 
ASN1_OBJECT
 *
Æg‹ôhm
;

147 
ASN1_TYPE
 *
∑ømëî
;

150 
DECLARE_ASN1_SET_OF
(
X509_ALGOR
)

152 
STACK_OF
(
	tX509_ALGOR
Ë
	tX509_ALGORS
;

154 
	sX509_vÆ_°


156 
ASN1_TIME
 *
nŸBef‹e
;

157 
ASN1_TIME
 *
nŸA·î
;

158 } 
	tX509_VAL
;

160 
	sX509_pubkey_°


162 
X509_ALGOR
 *
Æg‹
;

163 
ASN1_BIT_STRING
 *
public_key
;

164 
EVP_PKEY
 *
pkey
;

167 
	sX509_sig_°


169 
X509_ALGOR
 *
Æg‹
;

170 
ASN1_OCTET_STRING
 *
dige°
;

171 } 
	tX509_SIG
;

173 
	sX509_«me_íåy_°


175 
ASN1_OBJECT
 *
obje˘
;

176 
ASN1_STRING
 *
vÆue
;

177 
£t
;

178 
size
;

179 } 
	tX509_NAME_ENTRY
;

181 
DECLARE_STACK_OF
(
X509_NAME_ENTRY
)

182 
DECLARE_ASN1_SET_OF
(
X509_NAME_ENTRY
)

185 
	sX509_«me_°


187 
STACK_OF
(
X509_NAME_ENTRY
Ë*
íåõs
;

188 
modifõd
;

189 #i‚de‡
OPENSSL_NO_BUFFER


190 
BUF_MEM
 *
byãs
;

192 *
byãs
;

195 *
ˇn⁄_íc
;

196 
ˇn⁄_í˛í
;

199 
DECLARE_STACK_OF
(
X509_NAME
)

201 
	#X509_EX_V_NETSCAPE_HACK
 0x8000

	)

202 
	#X509_EX_V_INIT
 0x0001

	)

203 
	sX509_exãnsi⁄_°


205 
ASN1_OBJECT
 *
obje˘
;

206 
ASN1_BOOLEAN
 
¸ôiˇl
;

207 
ASN1_OCTET_STRING
 *
vÆue
;

208 } 
	tX509_EXTENSION
;

210 
STACK_OF
(
	tX509_EXTENSION
Ë
	tX509_EXTENSIONS
;

212 
DECLARE_STACK_OF
(
X509_EXTENSION
)

213 
DECLARE_ASN1_SET_OF
(
X509_EXTENSION
)

216 
	sx509_©åibuãs_°


218 
ASN1_OBJECT
 *
obje˘
;

219 
sögÀ
;

221 *
±r
;

222  
STACK_OF
(
ASN1_TYPE
Ë*
£t
;

223  
ASN1_TYPE
 *
sögÀ
;

224 } 
vÆue
;

225 } 
	tX509_ATTRIBUTE
;

227 
DECLARE_STACK_OF
(
X509_ATTRIBUTE
)

228 
DECLARE_ASN1_SET_OF
(
X509_ATTRIBUTE
)

231 
	sX509_ªq_öfo_°


233 
ASN1_ENCODING
 
íc
;

234 
ASN1_INTEGER
 *
vîsi⁄
;

235 
X509_NAME
 *
subje˘
;

236 
X509_PUBKEY
 *
pubkey
;

238 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

239 } 
	tX509_REQ_INFO
;

241 
	sX509_ªq_°


243 
X509_REQ_INFO
 *
ªq_öfo
;

244 
X509_ALGOR
 *
sig_Æg
;

245 
ASN1_BIT_STRING
 *
sig«tuª
;

246 
ª„ªn˚s
;

247 } 
	tX509_REQ
;

249 
	sx509_cöf_°


251 
ASN1_INTEGER
 *
vîsi⁄
;

252 
ASN1_INTEGER
 *
£rülNumbî
;

253 
X509_ALGOR
 *
sig«tuª
;

254 
X509_NAME
 *
issuî
;

255 
X509_VAL
 *
vÆidôy
;

256 
X509_NAME
 *
subje˘
;

257 
X509_PUBKEY
 *
key
;

258 
ASN1_BIT_STRING
 *
issuîUID
;

259 
ASN1_BIT_STRING
 *
subje˘UID
;

260 
STACK_OF
(
X509_EXTENSION
Ë*
exãnsi⁄s
;

261 
ASN1_ENCODING
 
íc
;

262 } 
	tX509_CINF
;

270 
	sx509_˚π_aux_°


272 
STACK_OF
(
ASN1_OBJECT
Ë*
åu°
;

273 
STACK_OF
(
ASN1_OBJECT
Ë*
ªje˘
;

274 
ASN1_UTF8STRING
 *
Æüs
;

275 
ASN1_OCTET_STRING
 *
keyid
;

276 
STACK_OF
(
X509_ALGOR
Ë*
Ÿhî
;

277 } 
	tX509_CERT_AUX
;

279 
	sx509_°


281 
X509_CINF
 *
˚π_öfo
;

282 
X509_ALGOR
 *
sig_Æg
;

283 
ASN1_BIT_STRING
 *
sig«tuª
;

284 
vÆid
;

285 
ª„ªn˚s
;

286 *
«me
;

287 
CRYPTO_EX_DATA
 
ex_d©a
;

289 
ex_∑thÀn
;

290 
ex_p˝©hÀn
;

291 
ex_Êags
;

292 
ex_kußge
;

293 
ex_xkußge
;

294 
ex_ns˚π
;

295 
ASN1_OCTET_STRING
 *
skid
;

296 
AUTHORITY_KEYID
 *
akid
;

297 
X509_POLICY_CACHE
 *
pﬁicy_ˇche
;

298 
STACK_OF
(
DIST_POINT
Ë*
¸ldp
;

299 
STACK_OF
(
GENERAL_NAME
Ë*
Æäame
;

300 
NAME_CONSTRAINTS
 *
nc
;

301 #i‚de‡
OPENSSL_NO_RFC3779


302 
STACK_OF
(
IPAddªssFamûy
Ë*
rfc3779_addr
;

303 
ASIdítifõrs_°
 *
rfc3779_asid
;

305 #i‚de‡
OPENSSL_NO_SHA


306 
sha1_hash
[
SHA_DIGEST_LENGTH
];

308 
X509_CERT_AUX
 *
aux
;

311 
DECLARE_STACK_OF
(
X509
)

312 
DECLARE_ASN1_SET_OF
(
X509
)

316 
	sx509_åu°_°
 {

317 
åu°
;

318 
Êags
;

319 (*
check_åu°
)(
x509_åu°_°
 *, 
X509
 *, );

320 *
«me
;

321 
¨g1
;

322 *
¨g2
;

323 } 
	tX509_TRUST
;

325 
DECLARE_STACK_OF
(
X509_TRUST
)

327 
	sx509_˚π_∑ú_°
 {

328 
X509
 *
f‹w¨d
;

329 
X509
 *
ªvî£
;

330 } 
	tX509_CERT_PAIR
;

334 
	#X509_TRUST_DEFAULT
 -1

	)

336 
	#X509_TRUST_COMPAT
 1

	)

337 
	#X509_TRUST_SSL_CLIENT
 2

	)

338 
	#X509_TRUST_SSL_SERVER
 3

	)

339 
	#X509_TRUST_EMAIL
 4

	)

340 
	#X509_TRUST_OBJECT_SIGN
 5

	)

341 
	#X509_TRUST_OCSP_SIGN
 6

	)

342 
	#X509_TRUST_OCSP_REQUEST
 7

	)

343 
	#X509_TRUST_TSA
 8

	)

346 
	#X509_TRUST_MIN
 1

	)

347 
	#X509_TRUST_MAX
 8

	)

351 
	#X509_TRUST_DYNAMIC
 1

	)

352 
	#X509_TRUST_DYNAMIC_NAME
 2

	)

356 
	#X509_TRUST_TRUSTED
 1

	)

357 
	#X509_TRUST_REJECTED
 2

	)

358 
	#X509_TRUST_UNTRUSTED
 3

	)

362 
	#X509_FLAG_COMPAT
 0

	)

363 
	#X509_FLAG_NO_HEADER
 1L

	)

364 
	#X509_FLAG_NO_VERSION
 (1L << 1)

	)

365 
	#X509_FLAG_NO_SERIAL
 (1L << 2)

	)

366 
	#X509_FLAG_NO_SIGNAME
 (1L << 3)

	)

367 
	#X509_FLAG_NO_ISSUER
 (1L << 4)

	)

368 
	#X509_FLAG_NO_VALIDITY
 (1L << 5)

	)

369 
	#X509_FLAG_NO_SUBJECT
 (1L << 6)

	)

370 
	#X509_FLAG_NO_PUBKEY
 (1L << 7)

	)

371 
	#X509_FLAG_NO_EXTENSIONS
 (1L << 8)

	)

372 
	#X509_FLAG_NO_SIGDUMP
 (1L << 9)

	)

373 
	#X509_FLAG_NO_AUX
 (1L << 10)

	)

374 
	#X509_FLAG_NO_ATTRIBUTES
 (1L << 11)

	)

380 
	#XN_FLAG_SEP_MASK
 (0x‡<< 16)

	)

382 
	#XN_FLAG_COMPAT
 0

	)

383 
	#XN_FLAG_SEP_COMMA_PLUS
 (1 << 16Ë

	)

384 
	#XN_FLAG_SEP_CPLUS_SPC
 (2 << 16Ë

	)

385 
	#XN_FLAG_SEP_SPLUS_SPC
 (3 << 16Ë

	)

386 
	#XN_FLAG_SEP_MULTILINE
 (4 << 16Ë

	)

388 
	#XN_FLAG_DN_REV
 (1 << 20Ë

	)

392 
	#XN_FLAG_FN_MASK
 (0x3 << 21)

	)

394 
	#XN_FLAG_FN_SN
 0

	)

395 
	#XN_FLAG_FN_LN
 (1 << 21Ë

	)

396 
	#XN_FLAG_FN_OID
 (2 << 21Ë

	)

397 
	#XN_FLAG_FN_NONE
 (3 << 21Ë

	)

399 
	#XN_FLAG_SPC_EQ
 (1 << 23Ë

	)

405 
	#XN_FLAG_DUMP_UNKNOWN_FIELDS
 (1 << 24)

	)

407 
	#XN_FLAG_FN_ALIGN
 (1 << 25Ë

	)

411 
	#XN_FLAG_RFC2253
 (
ASN1_STRFLGS_RFC2253
 | \

412 
XN_FLAG_SEP_COMMA_PLUS
 | \

413 
XN_FLAG_DN_REV
 | \

414 
XN_FLAG_FN_SN
 | \

415 
XN_FLAG_DUMP_UNKNOWN_FIELDS
)

	)

419 
	#XN_FLAG_ONELINE
 (
ASN1_STRFLGS_RFC2253
 | \

420 
ASN1_STRFLGS_ESC_QUOTE
 | \

421 
XN_FLAG_SEP_CPLUS_SPC
 | \

422 
XN_FLAG_SPC_EQ
 | \

423 
XN_FLAG_FN_SN
)

	)

427 
	#XN_FLAG_MULTILINE
 (
ASN1_STRFLGS_ESC_CTRL
 | \

428 
ASN1_STRFLGS_ESC_MSB
 | \

429 
XN_FLAG_SEP_MULTILINE
 | \

430 
XN_FLAG_SPC_EQ
 | \

431 
XN_FLAG_FN_LN
 | \

432 
XN_FLAG_FN_ALIGN
)

	)

434 
	sx509_ªvoked_°


436 
ASN1_INTEGER
 *
£rülNumbî
;

437 
ASN1_TIME
 *
ªvoˇti⁄D©e
;

438 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

440 
STACK_OF
(
GENERAL_NAME
Ë*
issuî
;

442 
ªas⁄
;

443 
£quí˚
;

446 
DECLARE_STACK_OF
(
X509_REVOKED
)

447 
DECLARE_ASN1_SET_OF
(
X509_REVOKED
)

449 
	sX509_¸l_öfo_°


451 
ASN1_INTEGER
 *
vîsi⁄
;

452 
X509_ALGOR
 *
sig_Æg
;

453 
X509_NAME
 *
issuî
;

454 
ASN1_TIME
 *
œ°Upd©e
;

455 
ASN1_TIME
 *
√xtUpd©e
;

456 
STACK_OF
(
X509_REVOKED
Ë*
ªvoked
;

457 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

458 
ASN1_ENCODING
 
íc
;

459 } 
	tX509_CRL_INFO
;

461 
	sX509_¸l_°


464 
X509_CRL_INFO
 *
¸l
;

465 
X509_ALGOR
 *
sig_Æg
;

466 
ASN1_BIT_STRING
 *
sig«tuª
;

467 
ª„ªn˚s
;

468 
Êags
;

470 
AUTHORITY_KEYID
 *
akid
;

471 
ISSUING_DIST_POINT
 *
idp
;

473 
idp_Êags
;

474 
idp_ªas⁄s
;

476 
ASN1_INTEGER
 *
¸l_numbî
;

477 
ASN1_INTEGER
 *
ba£_¸l_numbî
;

478 #i‚de‡
OPENSSL_NO_SHA


479 
sha1_hash
[
SHA_DIGEST_LENGTH
];

481 
STACK_OF
(
GENERAL_NAMES
Ë*
issuîs
;

482 c⁄° 
X509_CRL_METHOD
 *
mëh
;

483 *
mëh_d©a
;

486 
DECLARE_STACK_OF
(
X509_CRL
)

487 
DECLARE_ASN1_SET_OF
(
X509_CRL
)

489 
	s¥iv©e_key_°


491 
vîsi⁄
;

493 
X509_ALGOR
 *
íc_Æg‹
;

494 
ASN1_OCTET_STRING
 *
íc_pkey
;

497 
EVP_PKEY
 *
dec_pkey
;

500 
key_Àngth
;

501 *
key_d©a
;

502 
key_‰ì
;

505 
EVP_CIPHER_INFO
 
cùhî
;

507 
ª„ªn˚s
;

508 } 
	tX509_PKEY
;

510 #i‚de‡
OPENSSL_NO_EVP


511 
	sX509_öfo_°


513 
X509
 *
x509
;

514 
X509_CRL
 *
¸l
;

515 
X509_PKEY
 *
x_pkey
;

517 
EVP_CIPHER_INFO
 
íc_cùhî
;

518 
íc_Àn
;

519 *
íc_d©a
;

521 
ª„ªn˚s
;

522 } 
	tX509_INFO
;

524 
DECLARE_STACK_OF
(
X509_INFO
)

531 
	sNësˇ≥_•kac_°


533 
X509_PUBKEY
 *
pubkey
;

534 
ASN1_IA5STRING
 *
chÆÀnge
;

535 } 
	tNETSCAPE_SPKAC
;

537 
	sNësˇ≥_•ki_°


539 
NETSCAPE_SPKAC
 *
•kac
;

540 
X509_ALGOR
 *
sig_Æg‹
;

541 
ASN1_BIT_STRING
 *
sig«tuª
;

542 } 
	tNETSCAPE_SPKI
;

545 
	sNësˇ≥_˚πifiˇã_£quí˚


547 
ASN1_OBJECT
 *
ty≥
;

548 
STACK_OF
(
X509
Ë*
˚πs
;

549 } 
	tNETSCAPE_CERT_SEQUENCE
;

560 
	sPBEPARAM_°
 {

561 
ASN1_OCTET_STRING
 *
ß…
;

562 
ASN1_INTEGER
 *
ôî
;

563 } 
	tPBEPARAM
;

567 
	sPBE2PARAM_°
 {

568 
X509_ALGOR
 *
keyfunc
;

569 
X509_ALGOR
 *
í¸y±i⁄
;

570 } 
	tPBE2PARAM
;

572 
	sPBKDF2PARAM_°
 {

573 
ASN1_TYPE
 *
ß…
;

574 
ASN1_INTEGER
 *
ôî
;

575 
ASN1_INTEGER
 *
keyÀngth
;

576 
X509_ALGOR
 *
¥f
;

577 } 
	tPBKDF2PARAM
;

582 
	spkcs8_¥iv_key_öfo_°


584 
brokí
;

585 
	#PKCS8_OK
 0

	)

586 
	#PKCS8_NO_OCTET
 1

	)

587 
	#PKCS8_EMBEDDED_PARAM
 2

	)

588 
	#PKCS8_NS_DB
 3

	)

589 
	#PKCS8_NEG_PRIVKEY
 4

	)

590 
ASN1_INTEGER
 *
vîsi⁄
;

591 
X509_ALGOR
 *
pkeyÆg
;

592 
ASN1_TYPE
 *
pkey
;

593 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

596 #ifde‡ 
__˝lu•lus


600 
	~<›ís¶/x509_vfy.h
>

601 
	~<›ís¶/pkcs7.h
>

603 #ifde‡ 
__˝lu•lus


607 
	#X509_EXT_PACK_UNKNOWN
 1

	)

608 
	#X509_EXT_PACK_STRING
 2

	)

610 
	#X509_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
˚π_öfo
->
vîsi⁄
)

	)

612 
	#X509_gë_nŸBef‹e
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸBef‹e
)

	)

613 
	#X509_gë_nŸA·î
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸA·î
)

	)

614 
	#X509_exåa˘_key
(
x
Ë
	`X509_gë_pubkey
(xË

	)

615 
	#X509_REQ_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
ªq_öfo
->
vîsi⁄
)

	)

616 
	#X509_REQ_gë_subje˘_«me
(
x
Ë((x)->
ªq_öfo
->
subje˘
)

	)

617 
	#X509_REQ_exåa˘_key
(
a
Ë
	`X509_REQ_gë_pubkey
◊)

	)

618 
	#X509_«me_cmp
(
a
,
b
Ë
	`X509_NAME_cmp
(◊),(b))

	)

619 
	#X509_gë_sig«tuª_ty≥
(
x
Ë
	`EVP_PKEY_ty≥
(
	`OBJ_obj2nid
((x)->
sig_Æg
->
Æg‹ôhm
))

	)

621 
	#X509_CRL_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
¸l
->
vîsi⁄
)

	)

622 
	#X509_CRL_gë_œ°Upd©e
(
x
Ë((x)->
¸l
->
œ°Upd©e
)

	)

623 
	#X509_CRL_gë_√xtUpd©e
(
x
Ë((x)->
¸l
->
√xtUpd©e
)

	)

624 
	#X509_CRL_gë_issuî
(
x
Ë((x)->
¸l
->
issuî
)

	)

625 
	#X509_CRL_gë_REVOKED
(
x
Ë((x)->
¸l
->
ªvoked
)

	)

627 
X509_CRL_£t_deÁu…_mëhod
(c⁄° 
X509_CRL_METHOD
 *
mëh
);

628 
X509_CRL_METHOD
 *
X509_CRL_METHOD_√w
(

629 (*
¸l_öô
)(
X509_CRL
 *
¸l
),

630 (*
¸l_‰ì
)(
X509_CRL
 *
¸l
),

631 (*
¸l_lookup
)(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
,

632 
ASN1_INTEGER
 *
£r
, 
X509_NAME
 *
issuî
),

633 (*
¸l_vîify
)(
X509_CRL
 *
¸l
, 
EVP_PKEY
 *
pk
));

634 
X509_CRL_METHOD_‰ì
(
X509_CRL_METHOD
 *
m
);

636 
X509_CRL_£t_mëh_d©a
(
X509_CRL
 *
¸l
, *
d©
);

637 *
X509_CRL_gë_mëh_d©a
(
X509_CRL
 *
¸l
);

641 
	#X509_gë_X509_PUBKEY
(
x
Ë((x)->
˚π_öfo
->
key
)

	)

644 c⁄° *
X509_vîify_˚π_îr‹_°rög
(
n
);

646 #i‚de‡
OPENSSL_NO_EVP


647 
X509_vîify
(
X509
 *
a
, 
EVP_PKEY
 *
r
);

649 
X509_REQ_vîify
(
X509_REQ
 *
a
, 
EVP_PKEY
 *
r
);

650 
X509_CRL_vîify
(
X509_CRL
 *
a
, 
EVP_PKEY
 *
r
);

651 
NETSCAPE_SPKI_vîify
(
NETSCAPE_SPKI
 *
a
, 
EVP_PKEY
 *
r
);

653 
NETSCAPE_SPKI
 * 
NETSCAPE_SPKI_b64_decode
(c⁄° *
°r
, 
Àn
);

654 * 
NETSCAPE_SPKI_b64_ícode
(
NETSCAPE_SPKI
 *
x
);

655 
EVP_PKEY
 *
NETSCAPE_SPKI_gë_pubkey
(
NETSCAPE_SPKI
 *
x
);

656 
NETSCAPE_SPKI_£t_pubkey
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
);

658 
NETSCAPE_SPKI_¥öt
(
BIO
 *
out
, 
NETSCAPE_SPKI
 *
•ki
);

660 
X509_sig«tuª_dump
(
BIO
 *
bp
,c⁄° 
ASN1_STRING
 *
sig
, 
ödít
);

661 
X509_sig«tuª_¥öt
(
BIO
 *
bp
,
X509_ALGOR
 *
Æg
, 
ASN1_STRING
 *
sig
);

663 
X509_sign
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

664 
X509_sign_˘x
(
X509
 *
x
, 
EVP_MD_CTX
 *
˘x
);

665 
X509_REQ_sign
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

666 
X509_REQ_sign_˘x
(
X509_REQ
 *
x
, 
EVP_MD_CTX
 *
˘x
);

667 
X509_CRL_sign
(
X509_CRL
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

668 
X509_CRL_sign_˘x
(
X509_CRL
 *
x
, 
EVP_MD_CTX
 *
˘x
);

669 
NETSCAPE_SPKI_sign
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

671 
X509_pubkey_dige°
(c⁄° 
X509
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

672 *
md
, *
Àn
);

673 
X509_dige°
(c⁄° 
X509
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

674 *
md
, *
Àn
);

675 
X509_CRL_dige°
(c⁄° 
X509_CRL
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

676 *
md
, *
Àn
);

677 
X509_REQ_dige°
(c⁄° 
X509_REQ
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

678 *
md
, *
Àn
);

679 
X509_NAME_dige°
(c⁄° 
X509_NAME
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

680 *
md
, *
Àn
);

683 #i‚de‡
OPENSSL_NO_FP_API


684 
X509
 *
d2i_X509_Â
(
FILE
 *
Â
, X509 **
x509
);

685 
i2d_X509_Â
(
FILE
 *
Â
,
X509
 *
x509
);

686 
X509_CRL
 *
d2i_X509_CRL_Â
(
FILE
 *
Â
,X509_CRL **
¸l
);

687 
i2d_X509_CRL_Â
(
FILE
 *
Â
,
X509_CRL
 *
¸l
);

688 
X509_REQ
 *
d2i_X509_REQ_Â
(
FILE
 *
Â
,X509_REQ **
ªq
);

689 
i2d_X509_REQ_Â
(
FILE
 *
Â
,
X509_REQ
 *
ªq
);

690 #i‚de‡
OPENSSL_NO_RSA


691 
RSA
 *
d2i_RSAPriv©eKey_Â
(
FILE
 *
Â
,RSA **
rß
);

692 
i2d_RSAPriv©eKey_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

693 
RSA
 *
d2i_RSAPublicKey_Â
(
FILE
 *
Â
,RSA **
rß
);

694 
i2d_RSAPublicKey_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

695 
RSA
 *
d2i_RSA_PUBKEY_Â
(
FILE
 *
Â
,RSA **
rß
);

696 
i2d_RSA_PUBKEY_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

698 #i‚de‡
OPENSSL_NO_DSA


699 
DSA
 *
d2i_DSA_PUBKEY_Â
(
FILE
 *
Â
, DSA **
dß
);

700 
i2d_DSA_PUBKEY_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

701 
DSA
 *
d2i_DSAPriv©eKey_Â
(
FILE
 *
Â
, DSA **
dß
);

702 
i2d_DSAPriv©eKey_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

704 #i‚de‡
OPENSSL_NO_EC


705 
EC_KEY
 *
d2i_EC_PUBKEY_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

706 
i2d_EC_PUBKEY_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

707 
EC_KEY
 *
d2i_ECPriv©eKey_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

708 
i2d_ECPriv©eKey_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

710 
X509_SIG
 *
d2i_PKCS8_Â
(
FILE
 *
Â
,X509_SIG **
p8
);

711 
i2d_PKCS8_Â
(
FILE
 *
Â
,
X509_SIG
 *
p8
);

712 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,

713 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

714 
i2d_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

715 
i2d_PKCS8Priv©eKeyInfo_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
key
);

716 
i2d_Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

717 
EVP_PKEY
 *
d2i_Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

718 
i2d_PUBKEY_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

719 
EVP_PKEY
 *
d2i_PUBKEY_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

722 #i‚de‡
OPENSSL_NO_BIO


723 
X509
 *
d2i_X509_bio
(
BIO
 *
bp
,X509 **
x509
);

724 
i2d_X509_bio
(
BIO
 *
bp
,
X509
 *
x509
);

725 
X509_CRL
 *
d2i_X509_CRL_bio
(
BIO
 *
bp
,X509_CRL **
¸l
);

726 
i2d_X509_CRL_bio
(
BIO
 *
bp
,
X509_CRL
 *
¸l
);

727 
X509_REQ
 *
d2i_X509_REQ_bio
(
BIO
 *
bp
,X509_REQ **
ªq
);

728 
i2d_X509_REQ_bio
(
BIO
 *
bp
,
X509_REQ
 *
ªq
);

729 #i‚de‡
OPENSSL_NO_RSA


730 
RSA
 *
d2i_RSAPriv©eKey_bio
(
BIO
 *
bp
,RSA **
rß
);

731 
i2d_RSAPriv©eKey_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

732 
RSA
 *
d2i_RSAPublicKey_bio
(
BIO
 *
bp
,RSA **
rß
);

733 
i2d_RSAPublicKey_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

734 
RSA
 *
d2i_RSA_PUBKEY_bio
(
BIO
 *
bp
,RSA **
rß
);

735 
i2d_RSA_PUBKEY_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

737 #i‚de‡
OPENSSL_NO_DSA


738 
DSA
 *
d2i_DSA_PUBKEY_bio
(
BIO
 *
bp
, DSA **
dß
);

739 
i2d_DSA_PUBKEY_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

740 
DSA
 *
d2i_DSAPriv©eKey_bio
(
BIO
 *
bp
, DSA **
dß
);

741 
i2d_DSAPriv©eKey_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

743 #i‚de‡
OPENSSL_NO_EC


744 
EC_KEY
 *
d2i_EC_PUBKEY_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

745 
i2d_EC_PUBKEY_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

746 
EC_KEY
 *
d2i_ECPriv©eKey_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

747 
i2d_ECPriv©eKey_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

749 
X509_SIG
 *
d2i_PKCS8_bio
(
BIO
 *
bp
,X509_SIG **
p8
);

750 
i2d_PKCS8_bio
(
BIO
 *
bp
,
X509_SIG
 *
p8
);

751 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,

752 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

753 
i2d_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

754 
i2d_PKCS8Priv©eKeyInfo_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
key
);

755 
i2d_Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

756 
EVP_PKEY
 *
d2i_Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

757 
i2d_PUBKEY_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

758 
EVP_PKEY
 *
d2i_PUBKEY_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

761 
X509
 *
X509_dup
(X509 *
x509
);

762 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_dup
(X509_ATTRIBUTE *
xa
);

763 
X509_EXTENSION
 *
X509_EXTENSION_dup
(X509_EXTENSION *
ex
);

764 
X509_CRL
 *
X509_CRL_dup
(X509_CRL *
¸l
);

765 
X509_REQ
 *
X509_REQ_dup
(X509_REQ *
ªq
);

766 
X509_ALGOR
 *
X509_ALGOR_dup
(X509_ALGOR *
xn
);

767 
X509_ALGOR_£t0
(
X509_ALGOR
 *
Æg
, 
ASN1_OBJECT
 *
aobj
, 
±y≥
, *
pvÆ
);

768 
X509_ALGOR_gë0
(
ASN1_OBJECT
 **
∑obj
, *
µty≥
, **
µvÆ
,

769 
X509_ALGOR
 *
Æg‹
);

770 
X509_ALGOR_£t_md
(
X509_ALGOR
 *
Æg
, c⁄° 
EVP_MD
 *
md
);

772 
X509_NAME
 *
X509_NAME_dup
(X509_NAME *
xn
);

773 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_dup
(X509_NAME_ENTRY *
√
);

775 
X509_cmp_time
(c⁄° 
ASN1_TIME
 *
s
, 
time_t
 *
t
);

776 
X509_cmp_cuºít_time
(c⁄° 
ASN1_TIME
 *
s
);

777 
ASN1_TIME
 * 
X509_time_adj
(ASN1_TIME *
s
, 
adj
, 
time_t
 *
t
);

778 
ASN1_TIME
 * 
X509_time_adj_ex
(ASN1_TIME *
s
,

779 
off£t_day
, 
off£t_£c
, 
time_t
 *
t
);

780 
ASN1_TIME
 * 
X509_gmtime_adj
(ASN1_TIME *
s
, 
adj
);

782 c⁄° * 
X509_gë_deÁu…_˚π_¨ó
();

783 c⁄° * 
X509_gë_deÁu…_˚π_dú
();

784 c⁄° * 
X509_gë_deÁu…_˚π_fûe
();

785 c⁄° * 
X509_gë_deÁu…_˚π_dú_ív
();

786 c⁄° * 
X509_gë_deÁu…_˚π_fûe_ív
();

787 c⁄° * 
X509_gë_deÁu…_¥iv©e_dú
();

789 
X509_REQ
 * 
X509_to_X509_REQ
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

790 
X509
 * 
X509_REQ_to_X509
(
X509_REQ
 *
r
, 
days
,
EVP_PKEY
 *
pkey
);

792 
DECLARE_ASN1_FUNCTIONS
(
X509_ALGOR
)

793 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_ALGORS
, X509_ALGORS, X509_ALGORS)

794 
DECLARE_ASN1_FUNCTIONS
(
X509_VAL
)

796 
DECLARE_ASN1_FUNCTIONS
(
X509_PUBKEY
)

798 
X509_PUBKEY_£t
(
X509_PUBKEY
 **
x
, 
EVP_PKEY
 *
pkey
);

799 
EVP_PKEY
 * 
X509_PUBKEY_gë
(
X509_PUBKEY
 *
key
);

800 
X509_gë_pubkey_∑ømëîs
(
EVP_PKEY
 *
pkey
,

801 
STACK_OF
(
X509
Ë*
chaö
);

802 
i2d_PUBKEY
(
EVP_PKEY
 *
a
,**
µ
);

803 
EVP_PKEY
 * 
d2i_PUBKEY
(EVP_PKEY **
a
,c⁄° **
µ
,

804 
Àngth
);

805 #i‚de‡
OPENSSL_NO_RSA


806 
i2d_RSA_PUBKEY
(
RSA
 *
a
,**
µ
);

807 
RSA
 * 
d2i_RSA_PUBKEY
(RSA **
a
,c⁄° **
µ
,

808 
Àngth
);

810 #i‚de‡
OPENSSL_NO_DSA


811 
i2d_DSA_PUBKEY
(
DSA
 *
a
,**
µ
);

812 
DSA
 * 
d2i_DSA_PUBKEY
(DSA **
a
,c⁄° **
µ
,

813 
Àngth
);

815 #i‚de‡
OPENSSL_NO_EC


816 
i2d_EC_PUBKEY
(
EC_KEY
 *
a
, **
µ
);

817 
EC_KEY
 *
d2i_EC_PUBKEY
(EC_KEY **
a
, c⁄° **
µ
,

818 
Àngth
);

821 
DECLARE_ASN1_FUNCTIONS
(
X509_SIG
)

822 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ_INFO
)

823 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ
)

825 
DECLARE_ASN1_FUNCTIONS
(
X509_ATTRIBUTE
)

826 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã
(
nid
, 
©πy≥
, *
vÆue
);

828 
DECLARE_ASN1_FUNCTIONS
(
X509_EXTENSION
)

829 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_EXTENSIONS
, X509_EXTENSIONS, X509_EXTENSIONS)

831 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME_ENTRY
)

833 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME
)

835 
X509_NAME_£t
(
X509_NAME
 **
xn
, X509_NAME *
«me
);

837 
DECLARE_ASN1_FUNCTIONS
(
X509_CINF
)

839 
DECLARE_ASN1_FUNCTIONS
(
X509
)

840 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_AUX
)

842 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_PAIR
)

844 
X509_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

845 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

846 
X509_£t_ex_d©a
(
X509
 *
r
, 
idx
, *
¨g
);

847 *
X509_gë_ex_d©a
(
X509
 *
r
, 
idx
);

848 
i2d_X509_AUX
(
X509
 *
a
,**
µ
);

849 
X509
 * 
d2i_X509_AUX
(X509 **
a
,c⁄° **
µ
,
Àngth
);

851 
X509_Æüs_£t1
(
X509
 *
x
, *
«me
, 
Àn
);

852 
X509_keyid_£t1
(
X509
 *
x
, *
id
, 
Àn
);

853 * 
X509_Æüs_gë0
(
X509
 *
x
, *
Àn
);

854 * 
X509_keyid_gë0
(
X509
 *
x
, *
Àn
);

855 (*
X509_TRUST_£t_deÁu…
((*
åu°
)(, 
X509
 *, )))(, X509 *, );

856 
X509_TRUST_£t
(*
t
, 
åu°
);

857 
X509_add1_åu°_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

858 
X509_add1_ªje˘_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

859 
X509_åu°_˛ór
(
X509
 *
x
);

860 
X509_ªje˘_˛ór
(
X509
 *
x
);

862 
DECLARE_ASN1_FUNCTIONS
(
X509_REVOKED
)

863 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL_INFO
)

864 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL
)

866 
X509_CRL_add0_ªvoked
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 *
ªv
);

867 
X509_CRL_gë0_by_£rül
(
X509_CRL
 *
¸l
,

868 
X509_REVOKED
 **
ªt
, 
ASN1_INTEGER
 *
£rül
);

869 
X509_CRL_gë0_by_˚π
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
, 
X509
 *
x
);

871 
X509_PKEY
 * 
X509_PKEY_√w
();

872 
X509_PKEY_‰ì
(
X509_PKEY
 *
a
);

873 
i2d_X509_PKEY
(
X509_PKEY
 *
a
,**
µ
);

874 
X509_PKEY
 * 
d2i_X509_PKEY
(X509_PKEY **
a
,c⁄° **
µ
,
Àngth
);

876 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKI
)

877 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKAC
)

878 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_CERT_SEQUENCE
)

880 #i‚de‡
OPENSSL_NO_EVP


881 
X509_INFO
 * 
X509_INFO_√w
();

882 
X509_INFO_‰ì
(
X509_INFO
 *
a
);

883 * 
X509_NAME_⁄ñöe
(
X509_NAME
 *
a
,*
buf
,
size
);

885 
ASN1_vîify
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

886 
ASN1_BIT_STRING
 *
sig«tuª
,*
d©a
,
EVP_PKEY
 *
pkey
);

888 
ASN1_dige°
(
i2d_of_void
 *
i2d
,c⁄° 
EVP_MD
 *
ty≥
,*
d©a
,

889 *
md
,*
Àn
);

891 
ASN1_sign
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

892 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

893 *
d©a
,
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

895 
ASN1_ôem_dige°
(c⁄° 
ASN1_ITEM
 *
ô
,c⁄° 
EVP_MD
 *
ty≥
,*
d©a
,

896 *
md
,*
Àn
);

898 
ASN1_ôem_vîify
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

899 
ASN1_BIT_STRING
 *
sig«tuª
,*
d©a
,
EVP_PKEY
 *
pkey
);

901 
ASN1_ôem_sign
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
, X509_ALGOR *
Æg‹2
,

902 
ASN1_BIT_STRING
 *
sig«tuª
,

903 *
d©a
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

904 
ASN1_ôem_sign_˘x
(c⁄° 
ASN1_ITEM
 *
ô
,

905 
X509_ALGOR
 *
Æg‹1
, X509_ALGOR *
Æg‹2
,

906 
ASN1_BIT_STRING
 *
sig«tuª
, *
a¢
, 
EVP_MD_CTX
 *
˘x
);

909 
X509_£t_vîsi⁄
(
X509
 *
x
,
vîsi⁄
);

910 
X509_£t_£rülNumbî
(
X509
 *
x
, 
ASN1_INTEGER
 *
£rül
);

911 
ASN1_INTEGER
 * 
X509_gë_£rülNumbî
(
X509
 *
x
);

912 
X509_£t_issuî_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

913 
X509_NAME
 * 
X509_gë_issuî_«me
(
X509
 *
a
);

914 
X509_£t_subje˘_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

915 
X509_NAME
 * 
X509_gë_subje˘_«me
(
X509
 *
a
);

916 
X509_£t_nŸBef‹e
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

917 
X509_£t_nŸA·î
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

918 
X509_£t_pubkey
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
);

919 
EVP_PKEY
 * 
X509_gë_pubkey
(
X509
 *
x
);

920 
ASN1_BIT_STRING
 * 
X509_gë0_pubkey_bô°r
(c⁄° 
X509
 *
x
);

921 
X509_˚πifiˇã_ty≥
(
X509
 *
x
,
EVP_PKEY
 *
pubkey
 );

923 
X509_REQ_£t_vîsi⁄
(
X509_REQ
 *
x
,
vîsi⁄
);

924 
X509_REQ_£t_subje˘_«me
(
X509_REQ
 *
ªq
,
X509_NAME
 *
«me
);

925 
X509_REQ_£t_pubkey
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
);

926 
EVP_PKEY
 * 
X509_REQ_gë_pubkey
(
X509_REQ
 *
ªq
);

927 
X509_REQ_exãnsi⁄_nid
(
nid
);

928 * 
X509_REQ_gë_exãnsi⁄_nids
();

929 
X509_REQ_£t_exãnsi⁄_nids
(*
nids
);

930 
STACK_OF
(
X509_EXTENSION
Ë*
X509_REQ_gë_exãnsi⁄s
(
X509_REQ
 *
ªq
);

931 
X509_REQ_add_exãnsi⁄s_nid
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
,

932 
nid
);

933 
X509_REQ_add_exãnsi⁄s
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
);

934 
X509_REQ_gë_©å_cou¡
(c⁄° 
X509_REQ
 *
ªq
);

935 
X509_REQ_gë_©å_by_NID
(c⁄° 
X509_REQ
 *
ªq
, 
nid
,

936 
œ°pos
);

937 
X509_REQ_gë_©å_by_OBJ
(c⁄° 
X509_REQ
 *
ªq
, 
ASN1_OBJECT
 *
obj
,

938 
œ°pos
);

939 
X509_ATTRIBUTE
 *
X509_REQ_gë_©å
(c⁄° 
X509_REQ
 *
ªq
, 
loc
);

940 
X509_ATTRIBUTE
 *
X509_REQ_dñëe_©å
(
X509_REQ
 *
ªq
, 
loc
);

941 
X509_REQ_add1_©å
(
X509_REQ
 *
ªq
, 
X509_ATTRIBUTE
 *
©å
);

942 
X509_REQ_add1_©å_by_OBJ
(
X509_REQ
 *
ªq
,

943 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

944 c⁄° *
byãs
, 
Àn
);

945 
X509_REQ_add1_©å_by_NID
(
X509_REQ
 *
ªq
,

946 
nid
, 
ty≥
,

947 c⁄° *
byãs
, 
Àn
);

948 
X509_REQ_add1_©å_by_txt
(
X509_REQ
 *
ªq
,

949 c⁄° *
©å«me
, 
ty≥
,

950 c⁄° *
byãs
, 
Àn
);

952 
X509_CRL_£t_vîsi⁄
(
X509_CRL
 *
x
, 
vîsi⁄
);

953 
X509_CRL_£t_issuî_«me
(
X509_CRL
 *
x
, 
X509_NAME
 *
«me
);

954 
X509_CRL_£t_œ°Upd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

955 
X509_CRL_£t_√xtUpd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

956 
X509_CRL_s‹t
(
X509_CRL
 *
¸l
);

958 
X509_REVOKED_£t_£rülNumbî
(
X509_REVOKED
 *
x
, 
ASN1_INTEGER
 *
£rül
);

959 
X509_REVOKED_£t_ªvoˇti⁄D©e
(
X509_REVOKED
 *
r
, 
ASN1_TIME
 *
tm
);

961 
X509_REQ_check_¥iv©e_key
(
X509_REQ
 *
x509
,
EVP_PKEY
 *
pkey
);

963 
X509_check_¥iv©e_key
(
X509
 *
x509
,
EVP_PKEY
 *
pkey
);

965 
X509_issuî_™d_£rül_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

966 
X509_issuî_™d_£rül_hash
(
X509
 *
a
);

968 
X509_issuî_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

969 
X509_issuî_«me_hash
(
X509
 *
a
);

971 
X509_subje˘_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

972 
X509_subje˘_«me_hash
(
X509
 *
x
);

974 #i‚de‡
OPENSSL_NO_MD5


975 
X509_issuî_«me_hash_ﬁd
(
X509
 *
a
);

976 
X509_subje˘_«me_hash_ﬁd
(
X509
 *
x
);

979 
X509_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

980 
X509_NAME_cmp
(c⁄° 
X509_NAME
 *
a
, c⁄° X509_NAME *
b
);

981 
X509_NAME_hash
(
X509_NAME
 *
x
);

982 
X509_NAME_hash_ﬁd
(
X509_NAME
 *
x
);

984 
X509_CRL_cmp
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

985 
X509_CRL_m©ch
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

986 #i‚de‡
OPENSSL_NO_FP_API


987 
X509_¥öt_ex_Â
(
FILE
 *
bp
,
X509
 *
x
, 
nmÊag
, 
cÊag
);

988 
X509_¥öt_Â
(
FILE
 *
bp
,
X509
 *
x
);

989 
X509_CRL_¥öt_Â
(
FILE
 *
bp
,
X509_CRL
 *
x
);

990 
X509_REQ_¥öt_Â
(
FILE
 *
bp
,
X509_REQ
 *
ªq
);

991 
X509_NAME_¥öt_ex_Â
(
FILE
 *
Â
, 
X509_NAME
 *
nm
, 
ödít
, 
Êags
);

994 #i‚de‡
OPENSSL_NO_BIO


995 
X509_NAME_¥öt
(
BIO
 *
bp
, 
X509_NAME
 *
«me
, 
oba£
);

996 
X509_NAME_¥öt_ex
(
BIO
 *
out
, 
X509_NAME
 *
nm
, 
ödít
, 
Êags
);

997 
X509_¥öt_ex
(
BIO
 *
bp
,
X509
 *
x
, 
nmÊag
, 
cÊag
);

998 
X509_¥öt
(
BIO
 *
bp
,
X509
 *
x
);

999 
X509_oc•id_¥öt
(
BIO
 *
bp
,
X509
 *
x
);

1000 
X509_CERT_AUX_¥öt
(
BIO
 *
bp
,
X509_CERT_AUX
 *
x
, 
ödít
);

1001 
X509_CRL_¥öt
(
BIO
 *
bp
,
X509_CRL
 *
x
);

1002 
X509_REQ_¥öt_ex
(
BIO
 *
bp
, 
X509_REQ
 *
x
, 
nmÊag
, 
cÊag
);

1003 
X509_REQ_¥öt
(
BIO
 *
bp
,
X509_REQ
 *
ªq
);

1006 
X509_NAME_íåy_cou¡
(
X509_NAME
 *
«me
);

1007 
X509_NAME_gë_ãxt_by_NID
(
X509_NAME
 *
«me
, 
nid
,

1008 *
buf
,
Àn
);

1009 
X509_NAME_gë_ãxt_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
,

1010 *
buf
,
Àn
);

1014 
X509_NAME_gë_ödex_by_NID
(
X509_NAME
 *
«me
,
nid
,
œ°pos
);

1015 
X509_NAME_gë_ödex_by_OBJ
(
X509_NAME
 *
«me
,
ASN1_OBJECT
 *
obj
,

1016 
œ°pos
);

1017 
X509_NAME_ENTRY
 *
X509_NAME_gë_íåy
(
X509_NAME
 *
«me
, 
loc
);

1018 
X509_NAME_ENTRY
 *
X509_NAME_dñëe_íåy
(
X509_NAME
 *
«me
, 
loc
);

1019 
X509_NAME_add_íåy
(
X509_NAME
 *
«me
,
X509_NAME_ENTRY
 *
√
,

1020 
loc
, 
£t
);

1021 
X509_NAME_add_íåy_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1022 *
byãs
, 
Àn
, 
loc
, 
£t
);

1023 
X509_NAME_add_íåy_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
ty≥
,

1024 *
byãs
, 
Àn
, 
loc
, 
£t
);

1025 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_txt
(X509_NAME_ENTRY **
√
,

1026 c⁄° *
fõld
, 
ty≥
, c⁄° *
byãs
, 
Àn
);

1027 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_NID
(X509_NAME_ENTRY **
√
, 
nid
,

1028 
ty≥
,*
byãs
, 
Àn
);

1029 
X509_NAME_add_íåy_by_txt
(
X509_NAME
 *
«me
, c⁄° *
fõld
, 
ty≥
,

1030 c⁄° *
byãs
, 
Àn
, 
loc
, 
£t
);

1031 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_OBJ
(X509_NAME_ENTRY **
√
,

1032 
ASN1_OBJECT
 *
obj
, 
ty≥
,c⁄° *
byãs
,

1033 
Àn
);

1034 
X509_NAME_ENTRY_£t_obje˘
(
X509_NAME_ENTRY
 *
√
,

1035 
ASN1_OBJECT
 *
obj
);

1036 
X509_NAME_ENTRY_£t_d©a
(
X509_NAME_ENTRY
 *
√
, 
ty≥
,

1037 c⁄° *
byãs
, 
Àn
);

1038 
ASN1_OBJECT
 * 
X509_NAME_ENTRY_gë_obje˘
(
X509_NAME_ENTRY
 *
√
);

1039 
ASN1_STRING
 * 
X509_NAME_ENTRY_gë_d©a
(
X509_NAME_ENTRY
 *
√
);

1041 
X509v3_gë_ext_cou¡
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
);

1042 
X509v3_gë_ext_by_NID
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1043 
nid
, 
œ°pos
);

1044 
X509v3_gë_ext_by_OBJ
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1045 
ASN1_OBJECT
 *
obj
,
œ°pos
);

1046 
X509v3_gë_ext_by_¸ôiˇl
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1047 
¸ô
, 
œ°pos
);

1048 
X509_EXTENSION
 *
X509v3_gë_ext
(c⁄° 
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1049 
X509_EXTENSION
 *
X509v3_dñëe_ext
(
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1050 
STACK_OF
(
X509_EXTENSION
Ë*
X509v3_add_ext
(STACK_OF(X509_EXTENSIONË**
x
,

1051 
X509_EXTENSION
 *
ex
, 
loc
);

1053 
X509_gë_ext_cou¡
(
X509
 *
x
);

1054 
X509_gë_ext_by_NID
(
X509
 *
x
, 
nid
, 
œ°pos
);

1055 
X509_gë_ext_by_OBJ
(
X509
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1056 
X509_gë_ext_by_¸ôiˇl
(
X509
 *
x
, 
¸ô
, 
œ°pos
);

1057 
X509_EXTENSION
 *
X509_gë_ext
(
X509
 *
x
, 
loc
);

1058 
X509_EXTENSION
 *
X509_dñëe_ext
(
X509
 *
x
, 
loc
);

1059 
X509_add_ext
(
X509
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1060 * 
X509_gë_ext_d2i
(
X509
 *
x
, 
nid
, *
¸ô
, *
idx
);

1061 
X509_add1_ext_i2d
(
X509
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1062 
Êags
);

1064 
X509_CRL_gë_ext_cou¡
(
X509_CRL
 *
x
);

1065 
X509_CRL_gë_ext_by_NID
(
X509_CRL
 *
x
, 
nid
, 
œ°pos
);

1066 
X509_CRL_gë_ext_by_OBJ
(
X509_CRL
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1067 
X509_CRL_gë_ext_by_¸ôiˇl
(
X509_CRL
 *
x
, 
¸ô
, 
œ°pos
);

1068 
X509_EXTENSION
 *
X509_CRL_gë_ext
(
X509_CRL
 *
x
, 
loc
);

1069 
X509_EXTENSION
 *
X509_CRL_dñëe_ext
(
X509_CRL
 *
x
, 
loc
);

1070 
X509_CRL_add_ext
(
X509_CRL
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1071 * 
X509_CRL_gë_ext_d2i
(
X509_CRL
 *
x
, 
nid
, *
¸ô
, *
idx
);

1072 
X509_CRL_add1_ext_i2d
(
X509_CRL
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1073 
Êags
);

1075 
X509_REVOKED_gë_ext_cou¡
(
X509_REVOKED
 *
x
);

1076 
X509_REVOKED_gë_ext_by_NID
(
X509_REVOKED
 *
x
, 
nid
, 
œ°pos
);

1077 
X509_REVOKED_gë_ext_by_OBJ
(
X509_REVOKED
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1078 
X509_REVOKED_gë_ext_by_¸ôiˇl
(
X509_REVOKED
 *
x
, 
¸ô
, 
œ°pos
);

1079 
X509_EXTENSION
 *
X509_REVOKED_gë_ext
(
X509_REVOKED
 *
x
, 
loc
);

1080 
X509_EXTENSION
 *
X509_REVOKED_dñëe_ext
(
X509_REVOKED
 *
x
, 
loc
);

1081 
X509_REVOKED_add_ext
(
X509_REVOKED
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1082 * 
X509_REVOKED_gë_ext_d2i
(
X509_REVOKED
 *
x
, 
nid
, *
¸ô
, *
idx
);

1083 
X509_REVOKED_add1_ext_i2d
(
X509_REVOKED
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1084 
Êags
);

1086 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_NID
(X509_EXTENSION **
ex
,

1087 
nid
, 
¸ô
, 
ASN1_OCTET_STRING
 *
d©a
);

1088 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_OBJ
(X509_EXTENSION **
ex
,

1089 
ASN1_OBJECT
 *
obj
,
¸ô
,
ASN1_OCTET_STRING
 *
d©a
);

1090 
X509_EXTENSION_£t_obje˘
(
X509_EXTENSION
 *
ex
,
ASN1_OBJECT
 *
obj
);

1091 
X509_EXTENSION_£t_¸ôiˇl
(
X509_EXTENSION
 *
ex
, 
¸ô
);

1092 
X509_EXTENSION_£t_d©a
(
X509_EXTENSION
 *
ex
,

1093 
ASN1_OCTET_STRING
 *
d©a
);

1094 
ASN1_OBJECT
 * 
X509_EXTENSION_gë_obje˘
(
X509_EXTENSION
 *
ex
);

1095 
ASN1_OCTET_STRING
 *
X509_EXTENSION_gë_d©a
(
X509_EXTENSION
 *
√
);

1096 
X509_EXTENSION_gë_¸ôiˇl
(
X509_EXTENSION
 *
ex
);

1098 
X509©_gë_©å_cou¡
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
);

1099 
X509©_gë_©å_by_NID
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
, 
nid
,

1100 
œ°pos
);

1101 
X509©_gë_©å_by_OBJ
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
, 
ASN1_OBJECT
 *
obj
,

1102 
œ°pos
);

1103 
X509_ATTRIBUTE
 *
X509©_gë_©å
(c⁄° 
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1104 
X509_ATTRIBUTE
 *
X509©_dñëe_©å
(
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1105 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å
(STACK_OF(X509_ATTRIBUTEË**
x
,

1106 
X509_ATTRIBUTE
 *
©å
);

1107 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_OBJ
(STACK_OF(X509_ATTRIBUTEË**
x
,

1108 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1109 c⁄° *
byãs
, 
Àn
);

1110 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_NID
(STACK_OF(X509_ATTRIBUTEË**
x
,

1111 
nid
, 
ty≥
,

1112 c⁄° *
byãs
, 
Àn
);

1113 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_txt
(STACK_OF(X509_ATTRIBUTEË**
x
,

1114 c⁄° *
©å«me
, 
ty≥
,

1115 c⁄° *
byãs
, 
Àn
);

1116 *
X509©_gë0_d©a_by_OBJ
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
,

1117 
ASN1_OBJECT
 *
obj
, 
œ°pos
, 
ty≥
);

1118 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_NID
(X509_ATTRIBUTE **
©å
, 
nid
,

1119 
©πy≥
, c⁄° *
d©a
, 
Àn
);

1120 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_OBJ
(X509_ATTRIBUTE **
©å
,

1121 c⁄° 
ASN1_OBJECT
 *
obj
, 
©πy≥
, c⁄° *
d©a
, 
Àn
);

1122 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_txt
(X509_ATTRIBUTE **
©å
,

1123 c⁄° *
©∫ame
, 
ty≥
, c⁄° *
byãs
, 
Àn
);

1124 
X509_ATTRIBUTE_£t1_obje˘
(
X509_ATTRIBUTE
 *
©å
, c⁄° 
ASN1_OBJECT
 *
obj
);

1125 
X509_ATTRIBUTE_£t1_d©a
(
X509_ATTRIBUTE
 *
©å
, 
©åty≥
, c⁄° *
d©a
, 
Àn
);

1126 *
X509_ATTRIBUTE_gë0_d©a
(
X509_ATTRIBUTE
 *
©å
, 
idx
,

1127 
©πy≥
, *
d©a
);

1128 
X509_ATTRIBUTE_cou¡
(
X509_ATTRIBUTE
 *
©å
);

1129 
ASN1_OBJECT
 *
X509_ATTRIBUTE_gë0_obje˘
(
X509_ATTRIBUTE
 *
©å
);

1130 
ASN1_TYPE
 *
X509_ATTRIBUTE_gë0_ty≥
(
X509_ATTRIBUTE
 *
©å
, 
idx
);

1132 
EVP_PKEY_gë_©å_cou¡
(c⁄° 
EVP_PKEY
 *
key
);

1133 
EVP_PKEY_gë_©å_by_NID
(c⁄° 
EVP_PKEY
 *
key
, 
nid
,

1134 
œ°pos
);

1135 
EVP_PKEY_gë_©å_by_OBJ
(c⁄° 
EVP_PKEY
 *
key
, 
ASN1_OBJECT
 *
obj
,

1136 
œ°pos
);

1137 
X509_ATTRIBUTE
 *
EVP_PKEY_gë_©å
(c⁄° 
EVP_PKEY
 *
key
, 
loc
);

1138 
X509_ATTRIBUTE
 *
EVP_PKEY_dñëe_©å
(
EVP_PKEY
 *
key
, 
loc
);

1139 
EVP_PKEY_add1_©å
(
EVP_PKEY
 *
key
, 
X509_ATTRIBUTE
 *
©å
);

1140 
EVP_PKEY_add1_©å_by_OBJ
(
EVP_PKEY
 *
key
,

1141 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1142 c⁄° *
byãs
, 
Àn
);

1143 
EVP_PKEY_add1_©å_by_NID
(
EVP_PKEY
 *
key
,

1144 
nid
, 
ty≥
,

1145 c⁄° *
byãs
, 
Àn
);

1146 
EVP_PKEY_add1_©å_by_txt
(
EVP_PKEY
 *
key
,

1147 c⁄° *
©å«me
, 
ty≥
,

1148 c⁄° *
byãs
, 
Àn
);

1150 
X509_vîify_˚π
(
X509_STORE_CTX
 *
˘x
);

1153 
X509
 *
X509_föd_by_issuî_™d_£rül
(
STACK_OF
(X509Ë*
sk
,
X509_NAME
 *
«me
,

1154 
ASN1_INTEGER
 *
£rül
);

1155 
X509
 *
X509_föd_by_subje˘
(
STACK_OF
(X509Ë*
sk
,
X509_NAME
 *
«me
);

1157 
DECLARE_ASN1_FUNCTIONS
(
PBEPARAM
)

1158 
DECLARE_ASN1_FUNCTIONS
(
PBE2PARAM
)

1159 
DECLARE_ASN1_FUNCTIONS
(
PBKDF2PARAM
)

1161 
PKCS5_pbe_£t0_Æg‹
(
X509_ALGOR
 *
Æg‹
, 
Æg
, 
ôî
,

1162 c⁄° *
ß…
, 
ß…Àn
);

1164 
X509_ALGOR
 *
PKCS5_pbe_£t
(
Æg
, 
ôî
,

1165 c⁄° *
ß…
, 
ß…Àn
);

1166 
X509_ALGOR
 *
PKCS5_pbe2_£t
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1167 *
ß…
, 
ß…Àn
);

1168 
X509_ALGOR
 *
PKCS5_pbe2_£t_iv
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1169 *
ß…
, 
ß…Àn
,

1170 *
aiv
, 
¥f_nid
);

1172 
X509_ALGOR
 *
PKCS5_pbkdf2_£t
(
ôî
, *
ß…
, 
ß…Àn
,

1173 
¥f_nid
, 
keyÀn
);

1177 
DECLARE_ASN1_FUNCTIONS
(
PKCS8_PRIV_KEY_INFO
)

1179 
EVP_PKEY
 *
EVP_PKCS82PKEY
(
PKCS8_PRIV_KEY_INFO
 *
p8
);

1180 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8
(
EVP_PKEY
 *
pkey
);

1181 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8_brokí
(
EVP_PKEY
 *
pkey
, 
brokí
);

1182 
PKCS8_PRIV_KEY_INFO
 *
PKCS8_£t_brokí
(PKCS8_PRIV_KEY_INFO *
p8
, 
brokí
);

1184 
PKCS8_pkey_£t0
(
PKCS8_PRIV_KEY_INFO
 *
¥iv
, 
ASN1_OBJECT
 *
aobj
,

1185 
vîsi⁄
, 
±y≥
, *
pvÆ
,

1186 *
≥nc
, 
≥n˛í
);

1187 
PKCS8_pkey_gë0
(
ASN1_OBJECT
 **
µkÆg
,

1188 c⁄° **
pk
, *
µkÀn
,

1189 
X509_ALGOR
 **
∑
,

1190 
PKCS8_PRIV_KEY_INFO
 *
p8
);

1192 
X509_PUBKEY_£t0_∑øm
(
X509_PUBKEY
 *
pub
, 
ASN1_OBJECT
 *
aobj
,

1193 
±y≥
, *
pvÆ
,

1194 *
≥nc
, 
≥n˛í
);

1195 
X509_PUBKEY_gë0_∑øm
(
ASN1_OBJECT
 **
µkÆg
,

1196 c⁄° **
pk
, *
µkÀn
,

1197 
X509_ALGOR
 **
∑
,

1198 
X509_PUBKEY
 *
pub
);

1200 
X509_check_åu°
(
X509
 *
x
, 
id
, 
Êags
);

1201 
X509_TRUST_gë_cou¡
();

1202 
X509_TRUST
 * 
X509_TRUST_gë0
(
idx
);

1203 
X509_TRUST_gë_by_id
(
id
);

1204 
X509_TRUST_add
(
id
, 
Êags
, (*
ck
)(
X509_TRUST
 *, 
X509
 *, ),

1205 *
«me
, 
¨g1
, *
¨g2
);

1206 
X509_TRUST_˛ónup
();

1207 
X509_TRUST_gë_Êags
(
X509_TRUST
 *
xp
);

1208 *
X509_TRUST_gë0_«me
(
X509_TRUST
 *
xp
);

1209 
X509_TRUST_gë_åu°
(
X509_TRUST
 *
xp
);

1215 
ERR_lﬂd_X509_°rögs
();

1220 
	#X509_F_ADD_CERT_DIR
 100

	)

1221 
	#X509_F_BY_FILE_CTRL
 101

	)

1222 
	#X509_F_CHECK_POLICY
 145

	)

1223 
	#X509_F_DIR_CTRL
 102

	)

1224 
	#X509_F_GET_CERT_BY_SUBJECT
 103

	)

1225 
	#X509_F_NETSCAPE_SPKI_B64_DECODE
 129

	)

1226 
	#X509_F_NETSCAPE_SPKI_B64_ENCODE
 130

	)

1227 
	#X509_F_X509AT_ADD1_ATTR
 135

	)

1228 
	#X509_F_X509V3_ADD_EXT
 104

	)

1229 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_NID
 136

	)

1230 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ
 137

	)

1231 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_TXT
 140

	)

1232 
	#X509_F_X509_ATTRIBUTE_GET0_DATA
 139

	)

1233 
	#X509_F_X509_ATTRIBUTE_SET1_DATA
 138

	)

1234 
	#X509_F_X509_CHECK_PRIVATE_KEY
 128

	)

1235 
	#X509_F_X509_CRL_PRINT_FP
 147

	)

1236 
	#X509_F_X509_EXTENSION_CREATE_BY_NID
 108

	)

1237 
	#X509_F_X509_EXTENSION_CREATE_BY_OBJ
 109

	)

1238 
	#X509_F_X509_GET_PUBKEY_PARAMETERS
 110

	)

1239 
	#X509_F_X509_LOAD_CERT_CRL_FILE
 132

	)

1240 
	#X509_F_X509_LOAD_CERT_FILE
 111

	)

1241 
	#X509_F_X509_LOAD_CRL_FILE
 112

	)

1242 
	#X509_F_X509_NAME_ADD_ENTRY
 113

	)

1243 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_NID
 114

	)

1244 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_TXT
 131

	)

1245 
	#X509_F_X509_NAME_ENTRY_SET_OBJECT
 115

	)

1246 
	#X509_F_X509_NAME_ONELINE
 116

	)

1247 
	#X509_F_X509_NAME_PRINT
 117

	)

1248 
	#X509_F_X509_PRINT_EX_FP
 118

	)

1249 
	#X509_F_X509_PUBKEY_GET
 119

	)

1250 
	#X509_F_X509_PUBKEY_SET
 120

	)

1251 
	#X509_F_X509_REQ_CHECK_PRIVATE_KEY
 144

	)

1252 
	#X509_F_X509_REQ_PRINT_EX
 121

	)

1253 
	#X509_F_X509_REQ_PRINT_FP
 122

	)

1254 
	#X509_F_X509_REQ_TO_X509
 123

	)

1255 
	#X509_F_X509_STORE_ADD_CERT
 124

	)

1256 
	#X509_F_X509_STORE_ADD_CRL
 125

	)

1257 
	#X509_F_X509_STORE_CTX_GET1_ISSUER
 146

	)

1258 
	#X509_F_X509_STORE_CTX_INIT
 143

	)

1259 
	#X509_F_X509_STORE_CTX_NEW
 142

	)

1260 
	#X509_F_X509_STORE_CTX_PURPOSE_INHERIT
 134

	)

1261 
	#X509_F_X509_TO_X509_REQ
 126

	)

1262 
	#X509_F_X509_TRUST_ADD
 133

	)

1263 
	#X509_F_X509_TRUST_SET
 141

	)

1264 
	#X509_F_X509_VERIFY_CERT
 127

	)

1267 
	#X509_R_BAD_X509_FILETYPE
 100

	)

1268 
	#X509_R_BASE64_DECODE_ERROR
 118

	)

1269 
	#X509_R_CANT_CHECK_DH_KEY
 114

	)

1270 
	#X509_R_CERT_ALREADY_IN_HASH_TABLE
 101

	)

1271 
	#X509_R_ERR_ASN1_LIB
 102

	)

1272 
	#X509_R_INVALID_DIRECTORY
 113

	)

1273 
	#X509_R_INVALID_FIELD_NAME
 119

	)

1274 
	#X509_R_INVALID_TRUST
 123

	)

1275 
	#X509_R_KEY_TYPE_MISMATCH
 115

	)

1276 
	#X509_R_KEY_VALUES_MISMATCH
 116

	)

1277 
	#X509_R_LOADING_CERT_DIR
 103

	)

1278 
	#X509_R_LOADING_DEFAULTS
 104

	)

1279 
	#X509_R_METHOD_NOT_SUPPORTED
 124

	)

1280 
	#X509_R_NO_CERT_SET_FOR_US_TO_VERIFY
 105

	)

1281 
	#X509_R_PUBLIC_KEY_DECODE_ERROR
 125

	)

1282 
	#X509_R_PUBLIC_KEY_ENCODE_ERROR
 126

	)

1283 
	#X509_R_SHOULD_RETRY
 106

	)

1284 
	#X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN
 107

	)

1285 
	#X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY
 108

	)

1286 
	#X509_R_UNKNOWN_KEY_TYPE
 117

	)

1287 
	#X509_R_UNKNOWN_NID
 109

	)

1288 
	#X509_R_UNKNOWN_PURPOSE_ID
 121

	)

1289 
	#X509_R_UNKNOWN_TRUST_ID
 120

	)

1290 
	#X509_R_UNSUPPORTED_ALGORITHM
 111

	)

1291 
	#X509_R_WRONG_LOOKUP_TYPE
 112

	)

1292 
	#X509_R_WRONG_TYPE
 122

	)

1294 #ifde‡ 
__˝lu•lus


	@/usr/include/pcap/pcap.h

37 #i‚de‡
lib_pˇp_pˇp_h


38 
	#lib_pˇp_pˇp_h


	)

40 #i‡
deföed
(
WIN32
)

41 
	~<pˇp-°döc.h
>

42 #ñi‡
deföed
(
MSDOS
)

43 
	~<sys/ty≥s.h
>

44 
	~<sys/sockë.h
>

46 
	~<sys/ty≥s.h
>

47 
	~<sys/time.h
>

50 #i‚de‡
PCAP_DONT_INCLUDE_PCAP_BPF_H


51 
	~<pˇp/bpf.h
>

54 
	~<°dio.h
>

56 #ifde‡
__˝lu•lus


67 
	#PCAP_VERSION_MAJOR
 2

	)

68 
	#PCAP_VERSION_MINOR
 4

	)

70 
	#PCAP_ERRBUF_SIZE
 256

	)

76 #i‡
BPF_RELEASE
 - 0 < 199406

77 
	tbpf_öt32
;

78 
u_öt
 
	tbpf_u_öt32
;

81 
pˇp
 
	tpˇp_t
;

82 
pˇp_dum≥r
 
	tpˇp_dum≥r_t
;

83 
pˇp_if
 
	tpˇp_if_t
;

84 
pˇp_addr
 
	tpˇp_addr_t
;

123 
	spˇp_fûe_hódî
 {

124 
bpf_u_öt32
 
magic
;

125 
u_sh‹t
 
vîsi⁄_maj‹
;

126 
u_sh‹t
 
vîsi⁄_mö‹
;

127 
bpf_öt32
 
thisz⁄e
;

128 
bpf_u_öt32
 
sigfigs
;

129 
bpf_u_öt32
 
¢≠Àn
;

130 
bpf_u_öt32
 
lökty≥
;

139 
	#LT_FCS_LENGTH_PRESENT
(
x
Ë((xË& 0x04000000)

	)

140 
	#LT_FCS_LENGTH
(
x
Ë(((xË& 0xF0000000Ë>> 28)

	)

141 
	#LT_FCS_DATALINK_EXT
(
x
Ë((((xË& 0xFË<< 28Ë| 0x04000000)

	)

144 
PCAP_D_INOUT
 = 0,

145 
PCAP_D_IN
,

146 
PCAP_D_OUT


147 } 
	tpˇp_dúe˘i⁄_t
;

161 
	spˇp_pkthdr
 {

162 
timevÆ
 
ts
;

163 
bpf_u_öt32
 
ˇ∂í
;

164 
bpf_u_öt32
 
Àn
;

170 
	spˇp_°©
 {

171 
u_öt
 
ps_ªcv
;

172 
u_öt
 
ps_dr›
;

173 
u_öt
 
ps_ifdr›
;

174 #ifde‡
WIN32


175 
u_öt
 
bs_ˇ±
;

179 #ifde‡
MSDOS


183 
	spˇp_°©_ex
 {

184 
u_l⁄g
 
rx_∑ckës
;

185 
u_l⁄g
 
tx_∑ckës
;

186 
u_l⁄g
 
rx_byãs
;

187 
u_l⁄g
 
tx_byãs
;

188 
u_l⁄g
 
rx_îr‹s
;

189 
u_l⁄g
 
tx_îr‹s
;

190 
u_l⁄g
 
rx_dr›≥d
;

191 
u_l⁄g
 
tx_dr›≥d
;

192 
u_l⁄g
 
mu…iˇ°
;

193 
u_l⁄g
 
cﬁlisi⁄s
;

196 
u_l⁄g
 
rx_Àngth_îr‹s
;

197 
u_l⁄g
 
rx_ovî_îr‹s
;

198 
u_l⁄g
 
rx_¸c_îr‹s
;

199 
u_l⁄g
 
rx_‰ame_îr‹s
;

200 
u_l⁄g
 
rx_fifo_îr‹s
;

201 
u_l⁄g
 
rx_mis£d_îr‹s
;

204 
u_l⁄g
 
tx_ab‹ãd_îr‹s
;

205 
u_l⁄g
 
tx_ˇºõr_îr‹s
;

206 
u_l⁄g
 
tx_fifo_îr‹s
;

207 
u_l⁄g
 
tx_hóπbót_îr‹s
;

208 
u_l⁄g
 
tx_wödow_îr‹s
;

215 
	spˇp_if
 {

216 
pˇp_if
 *
√xt
;

217 *
«me
;

218 *
des¸ùti⁄
;

219 
pˇp_addr
 *
addªs£s
;

220 
bpf_u_öt32
 
Êags
;

223 
	#PCAP_IF_LOOPBACK
 0x00000001

	)

228 
	spˇp_addr
 {

229 
pˇp_addr
 *
√xt
;

230 
sockaddr
 *
addr
;

231 
sockaddr
 *
√tmask
;

232 
sockaddr
 *
brﬂdaddr
;

233 
sockaddr
 *
d°addr
;

236 (*
pˇp_h™dÀr
)(
	tu_ch¨
 *, c⁄° 
	tpˇp_pkthdr
 *,

237 c⁄° 
	tu_ch¨
 *);

245 
	#PCAP_ERROR
 -1

	)

246 
	#PCAP_ERROR_BREAK
 -2

	)

247 
	#PCAP_ERROR_NOT_ACTIVATED
 -3

	)

248 
	#PCAP_ERROR_ACTIVATED
 -4

	)

249 
	#PCAP_ERROR_NO_SUCH_DEVICE
 -5

	)

250 
	#PCAP_ERROR_RFMON_NOTSUP
 -6

	)

251 
	#PCAP_ERROR_NOT_RFMON
 -7

	)

252 
	#PCAP_ERROR_PERM_DENIED
 -8

	)

253 
	#PCAP_ERROR_IFACE_NOT_UP
 -9

	)

254 
	#PCAP_ERROR_CANTSET_TSTAMP_TYPE
 -10

	)

255 
	#PCAP_ERROR_PROMISC_PERM_DENIED
 -11

	)

262 
	#PCAP_WARNING
 1

	)

263 
	#PCAP_WARNING_PROMISC_NOTSUP
 2

	)

264 
	#PCAP_WARNING_TSTAMP_TYPE_NOTSUP
 3

	)

270 
	#PCAP_NETMASK_UNKNOWN
 0xffffffff

	)

272 *
pˇp_lookupdev
(*);

273 
pˇp_looku≤ë
(c⁄° *, 
bpf_u_öt32
 *, bpf_u_int32 *, *);

275 
pˇp_t
 *
pˇp_¸óã
(const *, *);

276 
pˇp_£t_¢≠Àn
(
pˇp_t
 *, );

277 
pˇp_£t_¥omisc
(
pˇp_t
 *, );

278 
pˇp_ˇn_£t_rfm⁄
(
pˇp_t
 *);

279 
pˇp_£t_rfm⁄
(
pˇp_t
 *, );

280 
pˇp_£t_timeout
(
pˇp_t
 *, );

281 
pˇp_£t_t°amp_ty≥
(
pˇp_t
 *, );

282 
pˇp_£t_buf„r_size
(
pˇp_t
 *, );

283 
pˇp_a˘iv©e
(
pˇp_t
 *);

285 
pˇp_li°_t°amp_ty≥s
(
pˇp_t
 *, **);

286 
pˇp_‰ì_t°amp_ty≥s
(*);

287 
pˇp_t°amp_ty≥_«me_to_vÆ
(const *);

288 c⁄° *
pˇp_t°amp_ty≥_vÆ_to_«me
();

289 c⁄° *
pˇp_t°amp_ty≥_vÆ_to_des¸ùti⁄
();

329 
	#PCAP_TSTAMP_HOST
 0

	)

330 
	#PCAP_TSTAMP_HOST_LOWPREC
 1

	)

331 
	#PCAP_TSTAMP_HOST_HIPREC
 2

	)

332 
	#PCAP_TSTAMP_ADAPTER
 3

	)

333 
	#PCAP_TSTAMP_ADAPTER_UNSYNCED
 4

	)

335 
pˇp_t
 *
pˇp_›í_live
(const *, , , , *);

336 
pˇp_t
 *
pˇp_›í_dód
(, );

337 
pˇp_t
 *
pˇp_›í_ofÊöe
(const *, *);

338 #i‡
deföed
(
WIN32
)

339 
pˇp_t
 *
pˇp_h›í_ofÊöe
(
öçå_t
, *);

340 #i‡!
deföed
(
LIBPCAP_EXPORTS
)

341 
	#pˇp_f›í_ofÊöe
(
f
,
b
) \

342 
	`pˇp_h›í_ofÊöe
(
	`_gë_osfh™dÀ
(
	`_fûío
(
f
)), 
b
)

	)

344 
pˇp_t
 *
pˇp_f›í_ofÊöe
(
FILE
 *, *);

347 
pˇp_t
 *
pˇp_f›í_ofÊöe
(
FILE
 *, *);

350 
pˇp_˛o£
(
pˇp_t
 *);

351 
pˇp_lo›
(
pˇp_t
 *, , 
pˇp_h™dÀr
, 
u_ch¨
 *);

352 
pˇp_di•©ch
(
pˇp_t
 *, , 
pˇp_h™dÀr
, 
u_ch¨
 *);

353 c⁄° 
u_ch¨
*

354 
pˇp_√xt
(
pˇp_t
 *, 
pˇp_pkthdr
 *);

355 
pˇp_√xt_ex
(
pˇp_t
 *, 
pˇp_pkthdr
 **, c⁄° 
u_ch¨
 **);

356 
pˇp_bªaklo›
(
pˇp_t
 *);

357 
pˇp_°©s
(
pˇp_t
 *, 
pˇp_°©
 *);

358 
pˇp_£tfûãr
(
pˇp_t
 *, 
bpf_¥ogøm
 *);

359 
pˇp_£tdúe˘i⁄
(
pˇp_t
 *, 
pˇp_dúe˘i⁄_t
);

360 
pˇp_gën⁄block
(
pˇp_t
 *, *);

361 
pˇp_£ä⁄block
(
pˇp_t
 *, , *);

362 
pˇp_öje˘
(
pˇp_t
 *, c⁄° *, 
size_t
);

363 
pˇp_£nd∑ckë
(
pˇp_t
 *, c⁄° 
u_ch¨
 *, );

364 c⁄° *
pˇp_°©u°o°r
();

365 c⁄° *
pˇp_°ªº‹
();

366 *
pˇp_gëîr
(
pˇp_t
 *);

367 
pˇp_≥º‹
(
pˇp_t
 *, *);

368 
pˇp_compûe
(
pˇp_t
 *, 
bpf_¥ogøm
 *, const *, ,

369 
bpf_u_öt32
);

370 
pˇp_compûe_n›ˇp
(, , 
bpf_¥ogøm
 *,

371 c⁄° *, , 
bpf_u_öt32
);

372 
pˇp_‰ìcode
(
bpf_¥ogøm
 *);

373 
pˇp_ofÊöe_fûãr
(
bpf_¥ogøm
 *, c⁄° 
pˇp_pkthdr
 *,

374 c⁄° 
u_ch¨
 *);

375 
pˇp_d©Æök
(
pˇp_t
 *);

376 
pˇp_d©Æök_ext
(
pˇp_t
 *);

377 
pˇp_li°_d©Æöks
(
pˇp_t
 *, **);

378 
pˇp_£t_d©Æök
(
pˇp_t
 *, );

379 
pˇp_‰ì_d©Æöks
(*);

380 
pˇp_d©Æök_«me_to_vÆ
(const *);

381 c⁄° *
pˇp_d©Æök_vÆ_to_«me
();

382 c⁄° *
pˇp_d©Æök_vÆ_to_des¸ùti⁄
();

383 
pˇp_¢≠shŸ
(
pˇp_t
 *);

384 
pˇp_is_sw≠≥d
(
pˇp_t
 *);

385 
pˇp_maj‹_vîsi⁄
(
pˇp_t
 *);

386 
pˇp_mö‹_vîsi⁄
(
pˇp_t
 *);

389 
FILE
 *
pˇp_fûe
(
pˇp_t
 *);

390 
pˇp_fûío
(
pˇp_t
 *);

392 
pˇp_dum≥r_t
 *
pˇp_dump_›í
(
pˇp_t
 *, const *);

393 
pˇp_dum≥r_t
 *
pˇp_dump_f›í
(
pˇp_t
 *, 
FILE
 *
Â
);

394 
FILE
 *
pˇp_dump_fûe
(
pˇp_dum≥r_t
 *);

395 
pˇp_dump_·ñl
(
pˇp_dum≥r_t
 *);

396 
pˇp_dump_Êush
(
pˇp_dum≥r_t
 *);

397 
pˇp_dump_˛o£
(
pˇp_dum≥r_t
 *);

398 
pˇp_dump
(
u_ch¨
 *, c⁄° 
pˇp_pkthdr
 *, const u_char *);

400 
pˇp_födÆldevs
(
pˇp_if_t
 **, *);

401 
pˇp_‰ìÆldevs
(
pˇp_if_t
 *);

403 c⁄° *
pˇp_lib_vîsi⁄
();

412 #i‚de‡
__NëBSD__


413 
u_öt
 
bpf_fûãr
(c⁄° 
bpf_ö¢
 *, c⁄° 
u_ch¨
 *, u_int, u_int);

415 
bpf_vÆid©e
(c⁄° 
bpf_ö¢
 *
f
, 
Àn
);

416 *
bpf_image
(c⁄° 
bpf_ö¢
 *, );

417 
bpf_dump
(c⁄° 
bpf_¥ogøm
 *, );

419 #i‡
deföed
(
WIN32
)

425 
pˇp_£tbuff
(
pˇp_t
 *
p
, 
dim
);

426 
pˇp_£tmode
(
pˇp_t
 *
p
, 
mode
);

427 
pˇp_£tmötoc›y
(
pˇp_t
 *
p
, 
size
);

429 #ifde‡
WPCAP


431 
	~<Wö32-Exãnsi⁄s.h
>

434 
	#MODE_CAPT
 0

	)

435 
	#MODE_STAT
 1

	)

436 
	#MODE_MON
 2

	)

438 #ñi‡
deföed
(
MSDOS
)

444 
pˇp_°©s_ex
 (
pˇp_t
 *, 
pˇp_°©_ex
 *);

445 
pˇp_£t_waô
 (
pˇp_t
 *
p
, (*
yõld
)(), 
waô
);

446 
u_l⁄g
 
pˇp_mac_∑ckës
 ();

454 
pˇp_gë_£À˘abÀ_fd
(
pˇp_t
 *);

458 #ifde‡
__˝lu•lus


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/boost/config/select_compiler_config.hpp

16 #i‡
deföed
(
__GCCXML__
)

18 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/gcc_xml.hµ"

	)

20 #ñi‡
deföed
(
_CRAYC
)

22 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/¸ay.hµ"

	)

24 #ñi‡
deföed
 
__CUDACC__


26 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/nvcc.hµ"

	)

28 #ñi‡
deföed
 
__COMO__


30 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/comóu.hµ"

	)

32 #ñi‡
deföed
(
__PATHSCALE__
Ë&& (
__PATHCC__
 >= 4)

34 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/∑thsˇÀ.hµ"

	)

36 #ñi‡
deföed
 
__˛™g__


38 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/˛™g.hµ"

	)

40 #ñi‡
deföed
 
__DMC__


42 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/digôÆm¨s.hµ"

	)

44 #ñi‡
deföed
(
__INTEL_COMPILER
Ë|| deföed(
__ICL
Ë|| deföed(
__ICC
Ë|| deföed(
__ECC
)

46 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/öãl.hµ"

	)

48 #ñi‡
deföed
 
__GNUC__


50 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/gcc.hµ"

	)

52 #ñi‡
deföed
 
__KCC


54 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/kai.hµ"

	)

56 #ñi‡
deföed
 
__sgi


58 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/sgi_mù•ro.hµ"

	)

60 #ñi‡
deföed
 
__DECCXX


62 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/com∑q_cxx.hµ"

	)

64 #ñi‡
deföed
 
__ghs


66 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/gªíhûls.hµ"

	)

68 #ñi‡
deföed
 
__CODEGEARC__


70 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/codegór.hµ"

	)

72 #ñi‡
deföed
 
__BORLANDC__


74 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/b‹œnd.hµ"

	)

76 #ñi‡
deföed
 
__MWERKS__


78 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/mërowîks.hµ"

	)

80 #ñi‡
deföed
 
__SUNPRO_CC


82 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/su≈ro_cc.hµ"

	)

84 #ñi‡
deföed
 
__HP_aCC


86 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/hp_acc.hµ"

	)

88 #ñi‡
deföed
(
__MRC__
Ë|| deföed(
__SC__
)

90 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/mpw.hµ"

	)

92 #ñi‡
deföed
(
__IBMCPP__
)

94 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/va˝p.hµ"

	)

96 #ñi‡
deföed
(
__PGI
)

98 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/pgi.hµ"

	)

100 #ñi‡
deföed
 
_MSC_VER


105 
	#BOOST_COMPILER_CONFIG
 "boo°/c⁄fig/compûî/visuÆc.hµ"

	)

107 #ñi‡
deföed
 (
BOOST_ASSERT_CONFIG
)

	@/usr/include/boost/config/select_platform_config.hpp

16 #i‡(
deföed
(
löux
Ë|| deföed(
__löux
Ë|| deföed(
__löux__
Ë|| deföed(
__GNU__
Ë|| deföed(
__GLIBC__
)Ë&& !deföed(
_CRAYC
)

18 
	#BOOST_PLATFORM_CONFIG
 "boo°/c⁄fig/∂©f‹m/löux.hµ"

	)

20 #ñi‡
deföed
(
__FªeBSD__
Ë|| deföed(
__NëBSD__
Ë|| deföed(
__O≥nBSD__
Ë|| deföed(
__Døg⁄Fly__
)

22 
	#BOOST_PLATFORM_CONFIG
 "boo°/c⁄fig/∂©f‹m/bsd.hµ"

	)

24 #ñi‡
deföed
(
sun
Ë|| deföed(
__sun
)

26 
	#BOOST_PLATFORM_CONFIG
 "boo°/c⁄fig/∂©f‹m/sﬁ¨is.hµ"

	)

28 #ñi‡
deföed
(
__sgi
)

30 
	#BOOST_PLATFORM_CONFIG
 "boo°/c⁄fig/∂©f‹m/úix.hµ"

	)

32 #ñi‡
deföed
(
__hpux
)

34 
	#BOOST_PLATFORM_CONFIG
 "boo°/c⁄fig/∂©f‹m/hpux.hµ"

	)

36 #ñi‡
deföed
(
__CYGWIN__
)

38 
	#BOOST_PLATFORM_CONFIG
 "boo°/c⁄fig/∂©f‹m/cygwö.hµ"

	)

40 #ñi‡
deföed
(
_WIN32
Ë|| deföed(
__WIN32__
Ë|| deföed(
WIN32
)

42 
	#BOOST_PLATFORM_CONFIG
 "boo°/c⁄fig/∂©f‹m/wö32.hµ"

	)

44 #ñi‡
deföed
(
__BEOS__
)

46 
	#BOOST_PLATFORM_CONFIG
 "boo°/c⁄fig/∂©f‹m/beos.hµ"

	)

48 #ñi‡
deföed
(
macötosh
Ë|| deföed(
__APPLE__
Ë|| deföed(
__APPLE_CC__
)

50 
	#BOOST_PLATFORM_CONFIG
 "boo°/c⁄fig/∂©f‹m/macos.hµ"

	)

52 #ñi‡
deföed
(
__IBMCPP__
Ë|| deföed(
_AIX
)

54 
	#BOOST_PLATFORM_CONFIG
 "boo°/c⁄fig/∂©f‹m/aix.hµ"

	)

56 #ñi‡
deföed
(
__amigaos__
)

58 
	#BOOST_PLATFORM_CONFIG
 "boo°/c⁄fig/∂©f‹m/amigaos.hµ"

	)

60 #ñi‡
deföed
(
__QNXNTO__
)

62 
	#BOOST_PLATFORM_CONFIG
 "boo°/c⁄fig/∂©f‹m/qnx¡o.hµ"

	)

64 #ñi‡
deföed
(
__VXWORKS__
)

66 
	#BOOST_PLATFORM_CONFIG
 "boo°/c⁄fig/∂©f‹m/vxw‹ks.hµ"

	)

68 #ñi‡
deföed
(
__SYMBIAN32__
)

70 
	#BOOST_PLATFORM_CONFIG
 "boo°/c⁄fig/∂©f‹m/symbün.hµ"

	)

72 #ñi‡
deföed
(
_CRAYC
)

74 
	#BOOST_PLATFORM_CONFIG
 "boo°/c⁄fig/∂©f‹m/¸ay.hµ"

	)

76 #ñi‡
deföed
(
__VMS
)

78 
	#BOOST_PLATFORM_CONFIG
 "boo°/c⁄fig/∂©f‹m/vms.hµ"

	)

81 #i‡
deföed
(
unix
) \

82 || 
deföed
(
__unix
) \

83 || 
deföed
(
_XOPEN_SOURCE
) \

84 || 
	$deföed
(
_POSIX_SOURCE
)

88 #i‚de‡
BOOST_HAS_UNISTD_H


89 
	#BOOST_HAS_UNISTD_H


	)

92 
	~<boo°/c⁄fig/posix_„©uªs.hµ
>

96 #i‡
	`deföed
 (
BOOST_ASSERT_CONFIG
)

	@/usr/include/boost/config/select_stdlib_config.hpp

17 #ifde‡
__˝lu•lus


18 
	~<c°ddef
>

20 
	~<°ddef.h
>

23 #i‡
deföed
(
__SGI_STL_PORT
Ë|| deföed(
_STLPORT_VERSION
)

27 
	#BOOST_STDLIB_CONFIG
 "boo°/c⁄fig/°dlib/°Õ‹t.hµ"

	)

37 
	~<boo°/c⁄fig/no_å1/utûôy.hµ
>

39 #i‡
deföed
(
__LIBCOMO__
)

41 
	#BOOST_STDLIB_CONFIG
 "boo°/c⁄fig/°dlib/libcomo.hµ"

	)

43 #ñi‡
deföed
(
__STD_RWCOMPILER_H__
Ë|| deföed(
_RWSTD_VER
)

45 
	#BOOST_STDLIB_CONFIG
 "boo°/c⁄fig/°dlib/roguewave.hµ"

	)

47 #ñi‡
deföed
(
_LIBCPP_VERSION
)

49 
	#BOOST_STDLIB_CONFIG
 "boo°/c⁄fig/°dlib/lib˝p.hµ"

	)

51 #ñi‡
deföed
(
__GLIBCPP__
Ë|| deföed(
__GLIBCXX__
)

53 
	#BOOST_STDLIB_CONFIG
 "boo°/c⁄fig/°dlib/lib°d˝p3.hµ"

	)

55 #ñi‡
deföed
(
__STL_CONFIG_H
)

57 
	#BOOST_STDLIB_CONFIG
 "boo°/c⁄fig/°dlib/sgi.hµ"

	)

59 #ñi‡
deföed
(
__MSL_CPP__
)

61 
	#BOOST_STDLIB_CONFIG
 "boo°/c⁄fig/°dlib/m¶.hµ"

	)

63 #ñi‡
deföed
(
__IBMCPP__
)

65 
	#BOOST_STDLIB_CONFIG
 "boo°/c⁄fig/°dlib/va˝p.hµ"

	)

67 #ñi‡
deföed
(
MSIPL_COMPILE_H
)

69 
	#BOOST_STDLIB_CONFIG
 "boo°/c⁄fig/°dlib/modía.hµ"

	)

71 #ñi‡(
deföed
(
_YVALS
Ë&& !deföed(
__IBMCPP__
)Ë|| deföed(
_CPPLIB_VER
)

73 
	#BOOST_STDLIB_CONFIG
 "boo°/c⁄fig/°dlib/dökumw¨e.hµ"

	)

75 #ñi‡
deföed
 (
BOOST_ASSERT_CONFIG
)

	@/usr/include/boost/config/suffix.hpp

25 #i‚de‡
BOOST_CONFIG_SUFFIX_HPP


26 
	#BOOST_CONFIG_SUFFIX_HPP


	)

28 #i‡
deföed
(
__GNUC__
) && (__GNUC__ >= 4)

33 #¥agm®
GCC
 
sy°em_hódî


39 #i‚de‡
BOOST_SYMBOL_EXPORT


40 
	#BOOST_SYMBOL_EXPORT


	)

42 #i‚de‡
BOOST_SYMBOL_IMPORT


43 
	#BOOST_SYMBOL_IMPORT


	)

45 #i‚de‡
BOOST_SYMBOL_VISIBLE


46 
	#BOOST_SYMBOL_VISIBLE


	)

55 #i‡!
deföed
(
BOOST_HAS_LONG_LONG
Ë&& !deföed(
BOOST_NO_LONG_LONG
) \

56 && !
deföed
(
BOOST_MSVC
Ë&& !
	$deföed
(
__BORLANDC__
)

57 
	~<limôs.h
>

58 #i‡(
	`deföed
(
ULLONG_MAX
Ë|| deföed(
ULONG_LONG_MAX
Ë|| deföed(
ULONGLONG_MAX
))

59 
	#BOOST_HAS_LONG_LONG


	)

61 
	#BOOST_NO_LONG_LONG


	)

68 #i‡
	`deföed
(
__GNUC__
Ë&& (__GNUC__ >3Ë&& deföed(
BOOST_NO_CTYPE_FUNCTIONS
)

69 #unde‡
BOOST_NO_CTYPE_FUNCTIONS


75 #i‚de‡
BOOST_STD_EXTENSION_NAMESPACE


76 
	#BOOST_STD_EXTENSION_NAMESPACE
 
°d


	)

82 #i‡
	`deföed
(
BOOST_NO_CV_SPECIALIZATIONS
) \

83 && !
	$deföed
(
BOOST_NO_CV_VOID_SPECIALIZATIONS
)

84 
	#BOOST_NO_CV_VOID_SPECIALIZATIONS


	)

91 #i‡
	`deföed
(
BOOST_NO_LIMITS
) \

92 && !
	$deföed
(
BOOST_NO_LIMITS_COMPILE_TIME_CONSTANTS
)

93 
	#BOOST_NO_LIMITS_COMPILE_TIME_CONSTANTS


	)

94 
	#BOOST_NO_MS_INT64_NUMERIC_LIMITS


	)

95 
	#BOOST_NO_LONG_LONG_NUMERIC_LIMITS


	)

102 #i‡!
	`deföed
(
BOOST_HAS_LONG_LONG
Ë&& !deföed(
BOOST_NO_LONG_LONG_NUMERIC_LIMITS
)

103 
	#BOOST_NO_LONG_LONG_NUMERIC_LIMITS


	)

109 #i‡!
	`deföed
(
BOOST_NO_STATIC_ASSERT
Ë&& !deföed(
BOOST_HAS_STATIC_ASSERT
)

110 
	#BOOST_HAS_STATIC_ASSERT


	)

117 #i‡!
	`deföed
(
BOOST_HAS_MS_INT64
Ë&& !deföed(
BOOST_NO_MS_INT64_NUMERIC_LIMITS
)

118 
	#BOOST_NO_MS_INT64_NUMERIC_LIMITS


	)

125 #i‡!
	`deföed
(
BOOST_NO_MEMBER_TEMPLATES
) \

126 && !
	$deföed
(
BOOST_MSVC6_MEMBER_TEMPLATES
)

127 
	#BOOST_MSVC6_MEMBER_TEMPLATES


	)

133 #i‡
	`deföed
(
BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION
) \

134 && !
	$deföed
(
BOOST_BCB_PARTIAL_SPECIALIZATION_BUG
)

135 
	#BOOST_BCB_PARTIAL_SPECIALIZATION_BUG


	)

141 #i‡
	`deföed
(
BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION
) \

142 && !
	$deföed
(
BOOST_NO_ARRAY_TYPE_SPECIALIZATIONS
)

143 
	#BOOST_NO_ARRAY_TYPE_SPECIALIZATIONS


	)

149 #i‡
	`deföed
(
BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION
) \

150 && !
	$deföed
(
BOOST_NO_STD_ITERATOR_TRAITS
)

151 
	#BOOST_NO_STD_ITERATOR_TRAITS


	)

158 #i‡
	`deföed
(
BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION
) \

159 && !
	$deföed
(
BOOST_NO_PARTIAL_SPECIALIZATION_IMPLICIT_DEFAULT_ARGS
)

160 
	#BOOST_NO_PARTIAL_SPECIALIZATION_IMPLICIT_DEFAULT_ARGS


	)

167 #i‡
	`deföed
(
BOOST_NO_MEMBER_TEMPLATES
) \

168 && !
	`deföed
(
BOOST_MSVC6_MEMBER_TEMPLATES
) \

169 && !
	$deföed
(
BOOST_NO_TEMPLATED_ITERATOR_CONSTRUCTORS
)

170 
	#BOOST_NO_TEMPLATED_ITERATOR_CONSTRUCTORS


	)

177 #i‡
	`deföed
(
BOOST_NO_MEMBER_TEMPLATES
) \

178 && !
	`deföed
(
BOOST_MSVC6_MEMBER_TEMPLATES
) \

179 && !
	$deföed
(
BOOST_NO_STD_ALLOCATOR
)

180 
	#BOOST_NO_STD_ALLOCATOR


	)

186 #i‡
	`deföed
(
BOOST_NO_ARGUMENT_DEPENDENT_LOOKUP
Ë&& !deföed(
BOOST_FUNCTION_SCOPE_USING_DECLARATION_BREAKS_ADL
)

187 
	#BOOST_FUNCTION_SCOPE_USING_DECLARATION_BREAKS_ADL


	)

193 #i‡
	`deföed
(
BOOST_NO_TYPEID
Ë&& !deföed(
BOOST_NO_RTTI
)

194 
	#BOOST_NO_RTTI


	)

200 #i‡!
	`deföed
(
BOOST_NO_STD_ALLOCATOR
)

201 
	#BOOST_HAS_PARTIAL_STD_ALLOCATOR


	)

207 #i‡
	`deföed
(
BOOST_NO_STD_LOCALE
Ë&& !deföed(
BOOST_NO_STD_USE_FACET
)

208 
	#BOOST_NO_STD_USE_FACET


	)

214 #i‡
	`deföed
(
BOOST_NO_STD_LOCALE
Ë&& !deföed(
BOOST_NO_STD_MESSAGES
)

215 
	#BOOST_NO_STD_MESSAGES


	)

221 #i‡
	`deföed
(
BOOST_NO_STD_LOCALE
Ë&& !deföed(
BOOST_NO_STD_WSTREAMBUF
)

222 
	#BOOST_NO_STD_WSTREAMBUF


	)

228 #i‡
	`deföed
(
BOOST_NO_CWCHAR
Ë&& !deföed(
BOOST_NO_CWCTYPE
)

229 
	#BOOST_NO_CWCTYPE


	)

235 #i‡
	`deföed
(
BOOST_NO_CWCHAR
Ë&& !deföed(
BOOST_NO_SWPRINTF
)

236 
	#BOOST_NO_SWPRINTF


	)

244 #i‡
	`deföed
(
BOOST_DISABLE_WIN32
Ë&& deföed(
_WIN32
) \

245 && !
	`deföed
(
BOOST_DISABLE_THREADS
Ë&& !
	$deföed
(
BOOST_HAS_PTHREADS
)

246 
	#BOOST_DISABLE_THREADS


	)

255 #i‡(
	`deföed
(
__MT__
Ë|| deföed(
_MT
Ë|| deföed(
_REENTRANT
) \

256 || 
	`deföed
(
_PTHREADS
Ë|| deföed(
__APPLE__
Ë|| deföed(
__Døg⁄Fly__
)) \

257 && !
	$deföed
(
BOOST_HAS_THREADS
)

258 
	#BOOST_HAS_THREADS


	)

264 #i‡
	`deföed
(
BOOST_DISABLE_THREADS
Ë&& deföed(
BOOST_HAS_THREADS
)

265 #unde‡
BOOST_HAS_THREADS


271 #i‡
	`deföed
(
BOOST_HAS_THREADS
Ë&& !deföed(
BOOST_HAS_PTHREADS
)\

272 && !
	`deföed
(
BOOST_HAS_WINTHREADS
Ë&& !deföed(
BOOST_HAS_BETHREADS
)\

273 && !
	$deföed
(
BOOST_HAS_MPTASKS
)

274 #unde‡
BOOST_HAS_THREADS


280 #i‚de‡
BOOST_HAS_THREADS


281 #unde‡
BOOST_HAS_PTHREADS


282 #unde‡
BOOST_HAS_PTHREAD_MUTEXATTR_SETTYPE


283 #unde‡
BOOST_HAS_PTHREAD_YIELD


284 #unde‡
BOOST_HAS_PTHREAD_DELAY_NP


285 #unde‡
BOOST_HAS_WINTHREADS


286 #unde‡
BOOST_HAS_BETHREADS


287 #unde‡
BOOST_HAS_MPTASKS


294 #i‡
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ >= 199901)

295 
	#BOOST_HAS_STDINT_H


	)

296 #i‚de‡
BOOST_HAS_LOG1P


297 
	#BOOST_HAS_LOG1P


	)

299 #i‚de‡
BOOST_HAS_EXPM1


300 
	#BOOST_HAS_EXPM1


	)

308 #i‡!
	`deföed
(
BOOST_HAS_SLIST
Ë&& !deföed(
BOOST_NO_SLIST
)

309 
	#BOOST_NO_SLIST


	)

312 #i‡!
	`deföed
(
BOOST_HAS_HASH
Ë&& !deföed(
BOOST_NO_HASH
)

313 
	#BOOST_NO_HASH


	)

319 #i‡
	`deföed
(
BOOST_HAS_SLIST
Ë&& !deföed(
BOOST_SLIST_HEADER
)

320 
	#BOOST_SLIST_HEADER
 <
¶i°
>

	)

326 #i‡
	`deföed
(
BOOST_HAS_HASH
Ë&& !deföed(
BOOST_HASH_SET_HEADER
)

327 
	#BOOST_HASH_SET_HEADER
 <
hash_£t
>

	)

333 #i‡
	`deföed
(
BOOST_HAS_HASH
Ë&& !deföed(
BOOST_HASH_MAP_HEADER
)

334 
	#BOOST_HASH_MAP_HEADER
 <
hash_m≠
>

	)

341 #i‡
	`deföed
(
BOOST_NO_0X_HDR_INITIALIZER_LIST
Ë&& !deföed(
BOOST_NO_INITIALIZER_LISTS
)

342 
	#BOOST_NO_INITIALIZER_LISTS


	)

344 #i‡
	`deföed
(
BOOST_NO_INITIALIZER_LISTS
Ë&& !deföed(
BOOST_NO_0X_HDR_INITIALIZER_LIST
)

345 
	#BOOST_NO_0X_HDR_INITIALIZER_LIST


	)

351 #i‡!
	`deföed
(
BOOST_NO_RVALUE_REFERENCES
Ë&& !deföed(
BOOST_HAS_RVALUE_REFS
)

352 
	#BOOST_HAS_RVALUE_REFS


	)

358 #i‡!
	`deföed
(
BOOST_NO_VARIADIC_TEMPLATES
Ë&& !deföed(
BOOST_HAS_VARIADIC_TMPL
)

359 
	#BOOST_HAS_VARIADIC_TMPL


	)

365 #i‡!
	`deföed
(
BOOST_NO_DECLTYPE_N3276
Ë&& deföed(
BOOST_NO_DECLTYPE
)

366 
	#BOOST_NO_DECLTYPE_N3276


	)

372 #i‡
	`deföed
(
BOOST_ABI_PREFIX
Ë&& deföed(
BOOST_ABI_SUFFIX
Ë&& !deföed(
BOOST_HAS_ABI_HEADERS
)

373 
	#BOOST_HAS_ABI_HEADERS


	)

376 #i‡
	`deföed
(
BOOST_HAS_ABI_HEADERS
Ë&& deföed(
BOOST_DISABLE_ABI_HEADERS
)

377 #unde‡
BOOST_HAS_ABI_HEADERS


389 #i‡
	`deföed
(
BOOST_NO_STDC_NAMESPACE
Ë&& deföed(
__˝lu•lus
)

390 
	~<c°ddef
>

391 
«me•a˚
 
°d
 { 
usög
 ::
±rdiff_t
; usög ::
size_t
; 
	}
}

396 
	#BOOST_PREVENT_MACRO_SUBSTITUTION


	)

398 #i‚de‡
BOOST_USING_STD_MIN


399 
	#BOOST_USING_STD_MIN
(Ë
usög
 
°d
::
mö


	)

402 #i‚de‡
BOOST_USING_STD_MAX


403 
	#BOOST_USING_STD_MAX
(Ë
usög
 
°d
::
max


	)

408 #i‡
deföed
(
BOOST_NO_STD_MIN_MAX
Ë&& deföed(
__˝lu•lus
)

410 
«me•a˚
 
	g°d
 {

411 
	gãm∂©e
 <
˛ass
 
	g_Tp
>

412 
ölöe
 c⁄° 
	g_Tp
& 
mö
 
BOOST_PREVENT_MACRO_SUBSTITUTION
 (c⁄° 
_Tp
& 
__a
, c⁄° _Tp& 
__b
) {

413  
	g__b
 < 
	g__a
 ? __b : 
__a
;

415 
	gãm∂©e
 <
˛ass
 
	g_Tp
>

416 
ölöe
 c⁄° 
	g_Tp
& 
max
 
BOOST_PREVENT_MACRO_SUBSTITUTION
 (c⁄° 
_Tp
& 
__a
, c⁄° _Tp& 
__b
) {

417  
	g__a
 < 
	g__b
 ? __b : 
__a
;

429 #ifde‡
BOOST_NO_INCLASS_MEMBER_INITIALIZATION


430 
	#BOOST_STATIC_CONSTANT
(
ty≥
, 
assignmít
Ëíum {ássignmíà}

	)

432 
	#BOOST_STATIC_CONSTANT
(
ty≥
, 
assignmít
Ëc⁄°Åy≥ 
	)
assignment

448 #i‡
deföed
(
BOOST_NO_STD_USE_FACET
)

449 #ifde‡
BOOST_HAS_TWO_ARG_USE_FACET


450 
	#BOOST_USE_FACET
(
Ty≥
, 
loc
Ë
°d
::
	`u£_Á˚t
÷oc, 
°©ic_ˇ°
<Ty≥*>(0))

	)

451 
	#BOOST_HAS_FACET
(
Ty≥
, 
loc
Ë
°d
::
	`has_Á˚t
÷oc, 
°©ic_ˇ°
<Ty≥*>(0))

	)

452 #ñi‡
deföed
(
BOOST_HAS_MACRO_USE_FACET
)

453 
	#BOOST_USE_FACET
(
Ty≥
, 
loc
Ë
°d
::
	`_USE
÷oc, Ty≥)

	)

454 
	#BOOST_HAS_FACET
(
Ty≥
, 
loc
Ë
°d
::
	`_HAS
÷oc, Ty≥)

	)

455 #ñi‡
deföed
(
BOOST_HAS_STLP_USE_FACET
)

456 
	#BOOST_USE_FACET
(
Ty≥
, 
loc
Ë(*
°d
::
_U£_Á˚t
<Ty≥ >÷oc))

	)

457 
	#BOOST_HAS_FACET
(
Ty≥
, 
loc
Ë
°d
::
has_Á˚t
< Ty≥ >÷oc)

	)

460 
	#BOOST_USE_FACET
(
Ty≥
, 
loc
Ë
°d
::
u£_Á˚t
< Ty≥ >÷oc)

	)

461 
	#BOOST_HAS_FACET
(
Ty≥
, 
loc
Ë
°d
::
has_Á˚t
< Ty≥ >÷oc)

	)

474 #i‚de‡
BOOST_NO_MEMBER_TEMPLATE_KEYWORD


475 
	#BOOST_NESTED_TEMPLATE
 
ãm∂©e


	)

477 
	#BOOST_NESTED_TEMPLATE


	)

485 #ifde‡
BOOST_NO_UNREACHABLE_RETURN_DETECTION


486 
	#BOOST_UNREACHABLE_RETURN
(
x
Ë x;

	)

488 
	#BOOST_UNREACHABLE_RETURN
(
x
)

	)

502 #i‚de‡
BOOST_NO_DEDUCED_TYPENAME


503 
	#BOOST_DEDUCED_TYPENAME
 
ty≥«me


	)

505 
	#BOOST_DEDUCED_TYPENAME


	)

508 #i‚de‡
BOOST_NO_TYPENAME_WITH_CTOR


509 
	#BOOST_CTOR_TYPENAME
 
ty≥«me


	)

511 
	#BOOST_CTOR_TYPENAME


	)

519 #i‡
deföed
(
BOOST_HAS_LONG_LONG
Ë&& deföed(
__˝lu•lus
)

520 
«me•a˚
 
	gboo°
{

521 #ifde‡
__GNUC__


522 
__exãnsi⁄__
 
	tl⁄g_l⁄g_ty≥
;

523 
__exãnsi⁄__
 
	tul⁄g_l⁄g_ty≥
;

525 
	tl⁄g_l⁄g_ty≥
;

526 
	tul⁄g_l⁄g_ty≥
;

573 #i‡
deföed
(
BOOST_NO_EXPLICIT_FUNCTION_TEMPLATE_ARGUMENTS
Ë&& deföed(
__˝lu•lus
)

575 
	~"boo°/ty≥.hµ
"

576 
	~"boo°/n⁄_ty≥.hµ
"

578 
	#BOOST_EXPLICIT_TEMPLATE_TYPE
(
t
Ë
boo°
::
ty≥
<t>* = 0

	)

579 
	#BOOST_EXPLICIT_TEMPLATE_TYPE_SPEC
(
t
Ë
boo°
::
ty≥
<t>*

	)

580 
	#BOOST_EXPLICIT_TEMPLATE_NON_TYPE
(
t
, 
v
Ë
boo°
::
n⁄_ty≥
<t, v>* = 0

	)

581 
	#BOOST_EXPLICIT_TEMPLATE_NON_TYPE_SPEC
(
t
, 
v
Ë
boo°
::
n⁄_ty≥
<t, v>*

	)

583 
	#BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE
(
t
) \

584 , 
	`BOOST_EXPLICIT_TEMPLATE_TYPE
(
t
)

	)

585 
	#BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC
(
t
) \

586 , 
	`BOOST_EXPLICIT_TEMPLATE_TYPE_SPEC
(
t
)

	)

587 
	#BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE
(
t
, 
v
) \

588 , 
	`BOOST_EXPLICIT_TEMPLATE_NON_TYPE
(
t
, 
v
)

	)

589 
	#BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE_SPEC
(
t
, 
v
) \

590 , 
	`BOOST_EXPLICIT_TEMPLATE_NON_TYPE_SPEC
(
t
, 
v
)

	)

596 
	#BOOST_EXPLICIT_TEMPLATE_TYPE
(
t
)

	)

597 
	#BOOST_EXPLICIT_TEMPLATE_TYPE_SPEC
(
t
)

	)

598 
	#BOOST_EXPLICIT_TEMPLATE_NON_TYPE
(
t
, 
v
)

	)

599 
	#BOOST_EXPLICIT_TEMPLATE_NON_TYPE_SPEC
(
t
, 
v
)

	)

601 
	#BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE
(
t
)

	)

602 
	#BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC
(
t
)

	)

603 
	#BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE
(
t
, 
v
)

	)

604 
	#BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE_SPEC
(
t
, 
v
)

	)

611 #i‡
deföed
(
BOOST_NO_STD_TYPEINFO
Ë&& deföed(
__˝lu•lus
)

612 
	~<ty≥öfo
>

613 
«me•a˚
 
	g°d
{ 
	gusög
 ::
ty≥_öfo
; }

623 
	#BOOST_STRINGIZE
(
X
Ë
	`BOOST_DO_STRINGIZE
(X)

	)

624 
	#BOOST_DO_STRINGIZE
(
X
Ë#X

	)

634 
	#BOOST_JOIN
–
X
, 
Y
 ) 
	`BOOST_DO_JOIN
–X, Y )

	)

635 
	#BOOST_DO_JOIN
–
X
, 
Y
 ) 
	`BOOST_DO_JOIN2
(X,Y)

	)

636 
	#BOOST_DO_JOIN2
–
X
, 
Y
 ) X##
	)
Y

642 #ifde‡
BOOST_NO_NOEXCEPT


643 
	#BOOST_NOEXCEPT


	)

644 
	#BOOST_NOEXCEPT_IF
(
Pªdiˇã
)

	)

645 
	#BOOST_NOEXCEPT_EXPR
(
Ex¥essi⁄
Ë
Ál£


	)

647 
	#BOOST_NOEXCEPT
 
n€x˚±


	)

648 
	#BOOST_NOEXCEPT_IF
(
Pªdiˇã
Ë
	`n€x˚±
((Pªdiˇã))

	)

649 
	#BOOST_NOEXCEPT_EXPR
(
Ex¥essi⁄
Ë
	`n€x˚±
((Ex¥essi⁄))

	)

656 #i‚de‡
BOOST_COMPILER


657 
	#BOOST_COMPILER
 "Unknow¿ISO C++ Compûî"

	)

659 #i‚de‡
BOOST_STDLIB


660 
	#BOOST_STDLIB
 "Unknow¿ISO sènd¨dÜibøry"

	)

662 #i‚de‡
BOOST_PLATFORM


663 #i‡
deföed
(
unix
Ë|| deföed(
__unix
Ë|| deföed(
_XOPEN_SOURCE
) \

664 || 
	$deföed
(
_POSIX_SOURCE
)

665 
	#BOOST_PLATFORM
 "Gíîi¯Unix"

	)

667 
	#BOOST_PLATFORM
 "Unknown"

	)

674 #i‚de‡
BOOST_GPU_ENABLED


675 
	#BOOST_GPU_ENABLED


	)

681 #i‡
	`deföed
(
BOOST_NO_CONSTEXPR
)

682 
	#BOOST_CONSTEXPR


	)

683 
	#BOOST_CONSTEXPR_OR_CONST
 c⁄°

	)

685 
	#BOOST_CONSTEXPR
 
c⁄°ex¥


	)

686 
	#BOOST_CONSTEXPR_OR_CONST
 
c⁄°ex¥


	)

689 
	#BOOST_STATIC_CONSTEXPR
 
BOOST_CONSTEXPR_OR_CONST


	)

693 #i‡!
	`deföed
(
BOOST_FORCEINLINE
)

694 #i‡
	`deföed
(
_MSC_VER
)

695 
	#BOOST_FORCEINLINE
 
__f‹˚ölöe


	)

696 #ñi‡
	`deföed
(
__GNUC__
) && __GNUC__ > 3

697 
	#BOOST_FORCEINLINE
 
ölöe
 
	`__©åibuã__
 ((
Æways_ölöe
))

	)

699 
	#BOOST_FORCEINLINE
 
ölöe


	)

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	t__kî√l_ß_Ámûy_t
;

13 
	s__kî√l_sockaddr_°‹age
 {

14 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

16 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

19 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

	@/usr/include/nbee_packetdecoderutils.h

10 #¥agm®
⁄˚


19 #ifde‡
NBEE_EXPORTS


22 #¥agm®
w¨nög
(
dißbÀ
: 4005)

23 
	#DLL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

25 #i‚de‡
DLL_EXPORT


26 
	#DLL_EXPORT


	)

32 
	~<nb¥Ÿodb.h
>

51 ˛as†
	cDLL_EXPORT
 
	mnbPackëDecodîV¨s


53 
	mpublic
:

54 
	$nbPackëDecodîV¨s
() {};

55 
vútuÆ
 ~
	$nbPackëDecodîV¨s
(Ë{
	}
};

65 
vútuÆ
 
Cª©eV¨übÀ
(
_nbNëPDLEÀmítV¨übÀ
* 
V¨übÀ
)= 0;

82 
vútuÆ
 
GëV¨übÀID
(c⁄° * 
Name
, * 
V¨übÀID
)= 0;

94 
vútuÆ
 
DoG¨bageCﬁÀ˘i⁄
(
Time°ampSec
)= 0;

111 
vútuÆ
 
SëV¨übÀNumbî
(* 
Name
, 
VÆue
)= 0;

133 
vútuÆ
 
SëV¨übÀBuf„r
(* 
Name
, * 
VÆue
, 
SèπögOff£t
, 
Size
)= 0;

153 
vútuÆ
 
SëV¨übÀRefBuf„r
(* 
Name
, * 
VÆue
, 
SèπögOff£t
, 
Size
)= 0;

170 
vútuÆ
 
GëV¨übÀNumbî
(* 
Name
, * 
Rëu∫VÆue
)= 0;

192 
vútuÆ
 
GëV¨übÀBuf„r
(* 
Name
, ** 
Rëu∫Buf„rPå
, * 
Rëu∫Buf„rSize
)= 0;

208 
vútuÆ
 
SëV¨übÀNumbî
(
V¨übÀID
, 
VÆue
)= 0;

226 
vútuÆ
 
SëV¨übÀBuf„r
(
V¨übÀID
, * 
VÆue
, 
SèπögOff£t
, 
Size
)= 0;

245 
vútuÆ
 
SëV¨übÀRefBuf„r
(
V¨übÀID
, * 
PåVÆue
, 
SèπögOff£t
, 
Size
)= 0;

261 
vútuÆ
 
GëV¨übÀNumbî
(
V¨übÀID
, * 
Rëu∫VÆue
)= 0;

276 
vútuÆ
 
GëV¨übÀBuf„r
(
V¨übÀID
, ** 
Rëu∫Buf„rPå
, * 
Rëu∫Buf„rSize
)= 0;

305 
vútuÆ
 
GëV¨übÀBuf„r
(
V¨übÀID
, 
SèπAt
, 
Size
, ** 
Rëu∫Buf„rPå
, * 
Rëu∫Buf„rSize
)= 0;

314 
vútuÆ
 *
GëLa°Eº‹
()= 0;

338 
	s_nbLookupTabÀKey


343 * 
	mVÆue
;

347 * 
	mMask
;

349 
	mSize
;

352 
	mKeyTy≥
;

364 
	s_nbLookupTabÀD©a


369 * 
	mVÆue
;

371 
	mSize
;

374 
	mD©aTy≥
;

388 ˛as†
	cDLL_EXPORT
 
	mnbPackëDecodîLookupTabÀs


390 
	mpublic
:

391 
	$nbPackëDecodîLookupTabÀs
() {};

392 
vútuÆ
 ~
	$nbPackëDecodîLookupTabÀs
(Ë{
	}
};

403 
vútuÆ
 
Cª©eTabÀ
(
_nbNëPDLEÀmítLookupTabÀ
* 
LookupTabÀ
)= 0;

424 
vútuÆ
 
GëTabÀID
(* 
TabÀName
, *
D©aName
, *
TabÀID
, *
D©aID
)= 0;

440 
vútuÆ
 
DoG¨bageCﬁÀ˘i⁄
(
Time°ampSec
, 
AggªssiveSˇn
)= 0;

467 
vútuÆ
 
_nbLookupTabÀKey
* 
GëSåu˘uªF‹TabÀKey
(
TabÀID
)= 0;

493 
vútuÆ
 
_nbLookupTabÀD©a
* 
GëSåu˘uªF‹TabÀD©a
(
TabÀID
)= 0;

543 
vútuÆ
 
AddTabÀE¡ry
(
TabÀID
, 
_nbLookupTabÀKey
 
KeyLi°
[], 
_nbLookupTabÀD©a
 
D©aLi°
[], 
Time°ampSec
,

544 
KeysHaveMasks
, 
nbNëPDLUpd©eLookupTabÀAddVÆidôyTy≥s_t
 
VÆidôy
, 
KìpTime
, 
HôTime
, 
NewHôTime
)= 0;

563 
vútuÆ
 
PurgeTabÀE¡ry
(
TabÀID
, 
_nbLookupTabÀKey
 
KeyLi°
[], 
MaskedE¡ry
, 
Time°ampSec
)= 0;

588 
vútuÆ
 
ObsﬁëeTabÀE¡ry
(
TabÀID
, 
_nbLookupTabÀKey
 
KeyLi°
[], 
MaskedE¡ry
, 
Time°ampSec
)= 0;

619 
vútuÆ
 
LookupF‹TabÀE¡ry
(
TabÀID
, 
_nbLookupTabÀKey
 
KeyLi°
[], 
Time°ampSec
, 
M©chExa˘E¡rõs
, 
M©chMaskE¡rõs
, 
GëFú°M©ch
= 1)= 0;

644 
vútuÆ
 
LookupAndUpd©eTabÀE¡ry
(
TabÀID
, 
_nbLookupTabÀKey
 
KeyLi°
[], 
Time°ampSec
)= 0;

674 
vútuÆ
 
SˇnTabÀE¡rõs
(
TabÀID
, 
SˇnExa˘E¡rõs
, 
_nbLookupTabÀKey
** 
KeyLi°
, 
_nbLookupTabÀD©a
** 
D©aLi°
, ** 
CuºítEÀmítH™dÀr
)= 0;

702 
vútuÆ
 
GëTabÀD©aBuf„r
(
TabÀID
, 
D©aID
, 
SèπAt
, 
Size
, **
D©aVÆue
, *
D©aSize
)= 0;

722 
vútuÆ
 
GëTabÀD©aNumbî
(
TabÀID
, 
D©aID
, * 
D©aVÆue
)= 0;

748 
vútuÆ
 
SëTabÀD©aBuf„r
(
TabÀID
, 
D©aID
, *
D©aVÆue
, 
SèπögOff£t
, 
D©aSize
)= 0;

768 
vútuÆ
 
SëTabÀD©aNumbî
(
TabÀID
, 
D©aID
, 
D©aVÆue
)= 0;

788 
vútuÆ
 
GëTabÀFú°E¡ry
(
TabÀID
, 
GëExa˘E¡ry
, 
_nbLookupTabÀKey
** 
KeyLi°
, 
_nbLookupTabÀD©a
** 
D©aLi°
)= 0;

808 
vútuÆ
 
GëTabÀM©chögE¡ry
(
TabÀID
, 
_nbLookupTabÀKey
** 
KeyLi°
, 
_nbLookupTabÀD©a
** 
D©aLi°
)= 0;

829 
vútuÆ
 
GëTabÀNextM©chögE¡ry
(
TabÀID
, 
_nbLookupTabÀKey
** 
KeyLi°
, 
_nbLookupTabÀD©a
** 
D©aLi°
)= 0;

839 
vútuÆ
 
GëNumbîOfE¡rõs
(
TabÀID
)=0;

847 
vútuÆ
 *
GëLa°Eº‹
()= 0;

877 
DLL_EXPORT
 
nbPackëDecodîLookupTabÀs
* 
nbAŒoˇãPackëDecodîLookupTabÀs
(*
EºBuf
, 
EºBufSize
);

885 
DLL_EXPORT
 
nbDóŒoˇãPackëDecodîLookupTabÀs
(
nbPackëDecodîLookupTabÀs
* 
PackëDecodîLookupTabÀs
);

	@/usr/include/nbpflcompiler_exports.h

7 #¥agm®
⁄˚


10 
	~<°dio.h
>

11 
	~<li°
>

17 
	#nbNETPFLCOMPILER_DEBUG_DETAIL_LEVEL
 0

18 
	#nbNETPFLCOMPILER_DEBUG_PROTOGRAH_DUMP_FILENAME
 "debug_proto_graph.dot"

19 
	#nbNETPFLCOMPILER_DEBUG_FILTERAUTOMATON_DUMP_FILENAME
 "debug_filter_automaton.dot"

20 
	#nbNETPFLCOMPILER_DEBUG_HIR_CODE_FILENAME
 "debug_hir_code.asm"

21 
	#nbNETPFLCOMPILER_DEBUG_LIR_NOOPT_GRAPH_FILENAME
 "debug_mir_no_opt_graph.dot"

22 
	#nbNETPFLCOMPILER_DEBUG_LIR_CODE_FILENAME
 "debug_mir_code.asm"

23 
	#nbNETPFLCOMPILER_DEBUG_LIR_GRAPH_FILENAME
 "debug_mir_graph.dot"

24 
	#nbNETPFLCOMPILER_DEBUG_NO_CODE_GRAPH_FILENAME
 "debug_no_code_graph.dot"

25 
	#nbNETPFLCOMPILER_DEBUG_NETIL_GRAPH_FILENAME
 "debug_netil_graph.dot"

26 
	#nbNETPFLCOMPILER_DEBUG_NETIL_CODE_FILENAME
 "debug_netil_code.asm"

27 
	#nbNETPFLCOMPILER_DEBUG_ASSEMBLY_CODE_FILENAME
 "debug_assembly_code.asm"

28 

	)

29 
	#nbNETPFLCOMPILER_MAX_MESSAGE
 1024

30 

	)

42 
	enbExåa˘edFõldsD©aF‹m©_t


44 
	mnbNETPFLCOMPILER_DATAFORMAT_FIELD
,

47 
	mnbNETPFLCOMPILER_DATAFORMAT_FIELDLIST
,

49 
	mnbNETPFLCOMPILER_DATAFORMAT_MULTIPROTO
,

50 
	mnbNETPFLCOMPILER_DATAFORMAT_MULTIFIELD
,

51 
	mnbNETPFLCOMPILER_DATAFORMAT_NO_KIND


52 } 
	tnbExåa˘edFõldsD©aF‹m©_t
;

56 
	enbExåa˘edFõldsFõldTy≥_t


58 
	mPDL_FIELD_TYPE_FIXED
,

59 
	mPDL_FIELD_TYPE_VARLEN
,

60 
	mPDL_FIELD_TYPE_BIT
,

61 
	mPDL_FIELD_TYPE_PADDING
,

62 
	mPDL_FIELD_TYPE_TOKEND
,

63 
	mPDL_FIELD_TYPE_TOKWRAP
,

64 
	mPDL_FIELD_TYPE_LINE
,

65 
	mPDL_FIELD_TYPE_PATTERN
,

66 
	mPDL_FIELD_TYPE_EATALL
,

67 
	mPDL_FIELD_TYPE_ALLFIELDS
,

68 
	mPDL_FIELD_TYPE_INVALID_TYPE


69 } 
	tnbExåa˘edFõldsFõldTy≥_t
;

73 
	g_nbExåa˘edFõldsDes¸ùt‹Ve˘‹
;

81 
	s_nbNëPFLCompûîMesßges


83 
	mMesßgeSåög
[
nbNETPFLCOMPILER_MAX_MESSAGE
];

84 
_nbNëPFLCompûîMesßges
 *
	mNext
;

98 
usög
 
«me•a˚
 
	g°d
;

100 
	s_nbExåa˘edFõldsDes¸ùt‹


102 
nbExåa˘edFõldsD©aF‹m©_t
 
	mD©aF‹m©Ty≥
;

103 c⁄° * 
	mName
;

104 c⁄° * 
	mPrŸo
;

105 
nbExåa˘edFõldsFõldTy≥_t
 
	mFõldTy≥
;

106 
	mOff£t
;

107 
	mLígth
;

108 
uöt32_t
 
	mBôFõld_VÆue
;

109 
_nbExåa˘edFõldsDes¸ùt‹Ve˘‹
 *
	mDV˘
;

110 
boﬁ
 
	mVÆid
;

111 * 
	mU£rExãnsi⁄
;

112 
uöt32_t
 
	mPosôi⁄
;

114 
_nbExåa˘edFõldsDes¸ùt‹
():

115 
D©aF‹m©Ty≥
(
nbNETPFLCOMPILER_DATAFORMAT_NO_KIND
), 
Name
(0), 
PrŸo
(0), 
FõldTy≥
(
PDL_FIELD_TYPE_INVALID_TYPE
), 
Off£t
(0), 
Lígth
(0), 
BôFõld_VÆue
(0), 
DV˘
(0), 
VÆid
(
Ál£
), 
U£rExãnsi⁄
(
NULL
), 
Posôi⁄
(0){}

123 
	s_nbExåa˘edFõldsDes¸ùt‹Ve˘‹


125 
_nbExåa˘edFõldsDes¸ùt‹
 *
	mFõldDes¸ùt‹
;

126 
	mNumE¡rõs
;

129 
_nbExåa˘edFõldsDes¸ùt‹Ve˘‹
(
Size
):
NumE¡rõs
(Size)

131 
FõldDes¸ùt‹

√w
 
_nbExåa˘edFõldsDes¸ùt‹
[
Size
];

133 ~
_nbExåa˘edFõldsDes¸ùt‹Ve˘‹
()

135 
	mdñëe
 []
	mFõldDes¸ùt‹
;

139 
SëVe˘‹
(
_nbExåa˘edFõldsDes¸ùt‹
 *
NewFõldDes¸ùt‹
)

141 
	mFõldDes¸ùt‹

NewFõldDes¸ùt‹
;

145 
_nbExåa˘edFõldsDes¸ùt‹Ve˘‹
 *
c›y
()

147 
_nbExåa˘edFõldsDes¸ùt‹Ve˘‹
 * 
	mNewDes¸ùt‹Ve˘‹

√w
 _nbExåa˘edFõldsDes¸ùt‹Ve˘‹(
NumE¡rõs
);

148 
	mNewDes¸ùt‹Ve˘‹
->
SëVe˘‹
(
FõldDes¸ùt‹
);

149  
	mNewDes¸ùt‹Ve˘‹
;

	@/usr/include/nbprotodb_defs.h

17 #¥agm®
⁄˚


24 
	#NETPDL_MAX_STRING
 2048

	)

36 
	#NETPDL_VARIABLE_LINKTYPE
 "$lökœyî"

	)

38 
	#NETPDL_VARIABLE_FRAMELENGTH
 "$‰amñígth"

	)

40 
	#NETPDL_VARIABLE_PACKETLENGTH
 "$∑ckëÀngth"

	)

42 
	#NETPDL_VARIABLE_CURRENTOFFSET
 "$cuºítoff£t"

	)

44 
	#NETPDL_VARIABLE_CURRENTPROTOOFFSET
 "$cuºíçrŸooff£t"

	)

46 
	#NETPDL_VARIABLE_TIMESTAMP_SEC
 "$time°amp_£c"

	)

48 
	#NETPDL_VARIABLE_TIMESTAMP_USEC
 "$time°amp_u£c"

	)

50 
	#NETPDL_VARIABLE_PACKETBUFFER
 "$∑ckë"

	)

52 
	#NETPDL_VARIABLE_NEXTPROTO
 "$√xçrŸo"

	)

54 
	#NETPDL_VARIABLE_PREVPROTO
 "$¥ev¥Ÿo"

	)

56 
	#NETPDL_VARIABLE_SHOWNETWORKNAMES
 "$show_√tw‹k«mes"

	)

58 
	#NETPDL_VARIABLE_TRACKL4SESSIONS
 "$åack_L4£ssi⁄s"

	)

60 
	#NETPDL_VARIABLE_ENABLETENTATIVEPROTO
 "$íabÀ_ã¡©ivïrŸo"

	)

62 
	#NETPDL_VARIABLE_ENABLEPROTOVERIFY
 "$íabÀ_¥Ÿovîify"

	)

64 
	#NETPDL_VARIABLE_PROTOVERIFYRESULT
 "$¥Ÿovîify_ªsu…"

	)

66 
	#NETPDL_VARIABLE_TOKEN_BEGINTOKENLEN
 "$tokí_begöéí"

	)

68 
	#NETPDL_VARIABLE_TOKEN_FIELDLEN
 "$tokí_fõldÀn"

	)

70 
	#NETPDL_VARIABLE_TOKEN_ENDTOKENLEN
 "$tokí_ídéí"

	)

75 
	#NETPDL_SHOWTEMPLATE_ATTR_NAME
 "«me"

	)

76 
	#NETPDL_FIELD_ATTR_SHOWTEMPLATE
 "showãm∂©e"

	)

78 
	#NETPDL_SHOWSUMTEMPLATE_ATTR_NAME
 "«me"

	)

79 
	#NETPDL_PROTO_ATTR_SHOWSUMTEMPLATE
 "showsumãm∂©e"

	)

84 
	#NETPDL_COMMON_SYNTAX_SEP_FIELDS
 "."

	)

85 
	#NETPDL_COMMON_SYNTAX_SEP_ADTREF
 ":"

	)

90 
	#NETPDL_COMMON_ATTR_NAME
 "«me"

	)

91 
	#NETPDL_COMMON_ATTR_LONGNAME
 "l⁄g«me"

	)

92 
	#NETPDL_COMMON_ATTR_EXPR
 "ex¥"

	)

93 
	#NETPDL_COMMON_ATTR_VALUE
 "vÆue"

	)

94 
	#NETPDL_COMMON_ATTR_WHEN
 "whí"

	)

95 
	#NETPDL_COMMON_ATTR_SIZE
 "size"

	)

96 
	#NETPDL_COMMON_ATTR_CALLHANDLE
 "ˇŒh™dÀ"

	)

98 
	#NETPDL_CALLHANDLE_EVENT_BEFORE
 "bef‹e"

	)

99 
	#NETPDL_CALLHANDLE_EVENT_AFTER
 "a·î"

	)

102 
	#NETPDL_DISPLAY_ATTR_DISPLAYDEFAULT
 "showty≥"

	)

103 
	#NETPDL_DISPLAY_ATTR_DISPLAYDEFAULT_BIN
 "bö"

	)

104 
	#NETPDL_DISPLAY_ATTR_DISPLAYDEFAULT_HEX
 "hex"

	)

105 
	#NETPDL_DISPLAY_ATTR_DISPLAYDEFAULT_HEXNOX
 "hexnox"

	)

106 
	#NETPDL_DISPLAY_ATTR_DISPLAYDEFAULT_ASC
 "ascii"

	)

107 
	#NETPDL_DISPLAY_ATTR_DISPLAYDEFAULT_DEC
 "dec"

	)

108 
	#NETPDL_DISPLAY_ATTR_DISPLAYDEFAULT_FLOAT
 "Êﬂt"

	)

109 
	#NETPDL_DISPLAY_ATTR_DISPLAYDEFAULT_DOUBLE
 "doubÀ"

	)

112 
	#NETPDL_DISPLAY_ATTR_DISPLAYGROUP
 "showgΩ"

	)

113 
	#NETPDL_DISPLAY_ATTR_DISPLAYSEPARATOR
 "show£p"

	)

114 
	#NETPDL_DISPLAY_ATTR_CUSTOMPLUGIN
 "show∂g"

	)

116 
	#NETPDL_DISPLAY_ATTR_NATIVEFUNCTION
 "showÁ°"

	)

117 
	#NETPDL_DISPLAY_ATTR_NATIVEFUNCTION_IPV4
 "ùv4"

	)

118 
	#NETPDL_DISPLAY_ATTR_NATIVEFUNCTION_ASCII
 "ascii"

	)

119 
	#NETPDL_DISPLAY_ATTR_NATIVEFUNCTION_ASCIILINE
 "asciûöe"

	)

120 
	#NETPDL_DISPLAY_ATTR_NATIVEFUNCTION_HTTPCONTENT
 "hâpc⁄ã¡"

	)

125 
	#NETPDL_FIELDS_COMMON_ATTR_TYPE
 "ty≥"

	)

126 
	#NETPDL_FIELDS_COMMON_ATTR_PATTERN
 "∑âîn"

	)

127 
	#NETPDL_FIELDS_COMMON_ATTR_BEGINREGEX
 "begöªgex"

	)

128 
	#NETPDL_FIELDS_COMMON_ATTR_ENDREGEX
 "ídªgex"

	)

130 
	#NETPDL_FIELDS_COMMON_ATTR_MATCH
 "m©ch"

	)

131 
	#NETPDL_FIELDS_COMMON_ATTR_RECURRING
 "ªcuºög"

	)

132 
	#NETPDL_FIELDS_COMMON_ATTR_RECURRING_YES
 "yes"

	)

135 
	#NETPDL_FIELDS_COMMON_ATTR_ENCODING
 "ícodög"

	)

136 
	#NETPDL_FIELDS_COMMON_ATTR_ENCODING_ASCII
 "ascii"

	)

137 
	#NETPDL_FIELDS_COMMON_ATTR_ENCODING_UTF8
 "utf-8"

	)

138 
	#NETPDL_FIELDS_COMMON_ATTR_ENCODING_UNICODE
 "unicode"

	)

139 
	#NETPDL_FIELDS_COMMON_ATTR_ENCODING_BER
 "bî"

	)

140 
	#NETPDL_FIELDS_COMMON_ATTR_ENCODING_CER
 "˚r"

	)

141 
	#NETPDL_FIELDS_COMMON_ATTR_ENCODING_DER
 "dî"

	)

147 
	#NETPDL_FIELD_ATTR_TYPE
 "ty≥"

	)

149 
	#NETPDL_FIELD_ATTR_TYPE_FIXED
 "fixed"

	)

150 
	#NETPDL_FIELD_ATTR_TYPE_BIT
 "bô"

	)

151 
	#NETPDL_FIELD_ATTR_TYPE_BIT_EX
 ""

	)

152 
	#NETPDL_FIELD_ATTR_TYPE_VARIABLE
 "v¨übÀ"

	)

153 
	#NETPDL_FIELD_ATTR_TYPE_TOKENENDED
 "tokííded"

	)

154 
	#NETPDL_FIELD_ATTR_TYPE_TOKENWRAPPED
 "tokíwøµed"

	)

155 
	#NETPDL_FIELD_ATTR_TYPE_LINE
 "löe"

	)

156 
	#NETPDL_FIELD_ATTR_TYPE_PATTERN
 "∑âîn"

	)

157 
	#NETPDL_FIELD_ATTR_TYPE_EATALL
 "óèŒ"

	)

158 
	#NETPDL_FIELD_ATTR_TYPE_PADDING
 "∑ddög"

	)

159 
	#NETPDL_FIELD_ATTR_TYPE_PLUGIN
 "∂ugö"

	)

161 
	#NETPDL_FIELD_ATTR_MASK
 "mask"

	)

162 
	#NETPDL_FIELD_ATTR_BEGINTOKEN
 "begötokí"

	)

163 
	#NETPDL_FIELD_ATTR_ENDTOKEN
 "ídtokí"

	)

164 
	#NETPDL_FIELD_ATTR_BEGINREGEX
 "begöªgex"

	)

165 
	#NETPDL_FIELD_ATTR_ENDREGEX
 "ídªgex"

	)

166 
	#NETPDL_FIELD_ATTR_BEGINOFFSET
 "begöoff£t"

	)

167 
	#NETPDL_FIELD_ATTR_ENDOFFSET
 "ídoff£t"

	)

168 
	#NETPDL_FIELD_ATTR_ENDDISCARD
 "íddisˇrd"

	)

169 
	#NETPDL_FIELD_ATTR_ALIGN
 "Æign"

	)

170 
	#NETPDL_FIELD_ATTR_PLUGINNAME
 "∂ugö"

	)

173 
	#NETPDL_FIELD_ATTR_BIGENDIAN
 "bigídün"

	)

174 
	#NETPDL_FIELD_ATTR_BIGENDIAN_YES
 "yes"

	)

180 
	#NETPDL_CFIELD_ATTR_TYPE
 "ty≥"

	)

182 
	#NETPDL_CFIELD_ATTR_TYPE_TLV
 "év"

	)

183 
	#NETPDL_CFIELD_ATTR_TYPE_DELIMITED
 "dñimôed"

	)

184 
	#NETPDL_CFIELD_ATTR_TYPE_ELINE
 "e-löe"

	)

185 
	#NETPDL_CFIELD_ATTR_TYPE_HDRLINE
 "hdæöe"

	)

186 
	#NETPDL_CFIELD_ATTR_TYPE_DYNAMIC
 "dy«mic"

	)

187 
	#NETPDL_CFIELD_ATTR_TYPE_ASN1
 "a¢1"

	)

188 
	#NETPDL_CFIELD_ATTR_TYPE_XML
 "xml"

	)

190 
	#NETPDL_CFIELD_ATTR_TSIZE
 "tsize"

	)

191 
	#NETPDL_CFIELD_ATTR_LSIZE
 "lsize"

	)

192 
	#NETPDL_CFIELD_ATTR_VEXPR
 "vex¥"

	)

193 
	#NETPDL_CFIELD_ATTR_SEPREGEX
 "£¥egex"

	)

195 
	#NETPDL_CFIELD_ATTR_ONPARTIALMATCH
 "⁄∑πülm©ch"

	)

196 
	#NETPDL_CFIELD_ATTR_ONMISSINGBEGIN
 "⁄missögbegö"

	)

197 
	#NETPDL_CFIELD_ATTR_ONMISSINGEND
 "⁄missögíd"

	)

198 
	#NETPDL_CFIELD_ATTR_ONEVENT_SKIPFIELD
 "skùfõld"

	)

199 
	#NETPDL_CFIELD_ATTR_ONEVENT_CONTINUE
 "c⁄töue"

	)

205 
	#NETPDL_MAP_ATTR_REFNAME
 "ª‚ame"

	)

207 
	#NETPDL_MAP_ATTR_TYPE_XML_PI
 "xml.pi"

	)

208 
	#NETPDL_MAP_ATTR_TYPE_XML_DOCTYPE
 "xml.do˘y≥"

	)

209 
	#NETPDL_MAP_ATTR_TYPE_XML_ELEMENT
 "xml.ñemít"

	)

211 
	#NETPDL_MAP_ATTR_NAMESPACE
 "«me•a˚"

	)

212 
	#NETPDL_MAP_ATTR_HIERARCY
 "hõørcy"

	)

213 
	#NETPDL_MAP_ATTR_ATTSVIEW
 "©åvõw"

	)

214 
	#NETPDL_MAP_ATTR_ATTSVIEW_YES
 "yes"

	)

220 
	#NETPDL_SUBFIELD_ATTR_PORTION
 "p‹ti⁄"

	)

221 
	#NETPDL_CSUBFIELD_ATTR_SUBTYPE
 "subty≥"

	)

223 
	#NETPDL_SUBFIELD_ATTR_PORTION_TLV_TYPE
 "év.ty≥"

	)

224 
	#NETPDL_SUBFIELD_ATTR_PORTION_TLV_LENGTH
 "év.Àngth"

	)

225 
	#NETPDL_SUBFIELD_ATTR_PORTION_TLV_VALUE
 "év.vÆue"

	)

226 
	#NETPDL_SUBFIELD_ATTR_PORTION_HDRLINE_HNAME
 "hdæöe.h«me"

	)

227 
	#NETPDL_SUBFIELD_ATTR_PORTION_HDRLINE_HVALUE
 "hdæöe.hvÆue"

	)

228 
	#NETPDL_SUBFIELD_ATTR_PORTION_DYNAMIC_
 "dy«mic."

	)

230 c⁄° *c⁄° 
	gNETPDL_FIELDBASE_NAME_TRIVIAL
 = "__trivial__";

231 c⁄° *c⁄° 
	gNETPDL_FIELD_NAME_ITEM
 = "item";

232 c⁄° *c⁄° 
	gNETPDL_CFIELD_NAME_TLV
 = "tlv";

233 c⁄° *c⁄° 
	gNETPDL_CFIELD_NAME_DELIMITED
 = "delimited";

234 c⁄° *c⁄° 
	gNETPDL_CFIELD_NAME_LINE
 = "line";

235 c⁄° *c⁄° 
	gNETPDL_CFIELD_NAME_HDRLINE
 = "hdrline";

236 c⁄° *c⁄° 
	gNETPDL_CFIELD_NAME_DYNAMIC
 = "dynamic";

237 c⁄° *c⁄° 
	gNETPDL_CFIELD_NAME_ASN1
 = "asn1";

238 c⁄° *c⁄° 
	gNETPDL_CFIELD_NAME_XML
 = "xml";

239 c⁄° *c⁄° 
	gNETPDL_SUBFIELD_NAME_TLV_TYPE
 = "type";

240 c⁄° *c⁄° 
	gNETPDL_SUBFIELD_NAME_TLV_LENGTH
 = "length";

241 c⁄° *c⁄° 
	gNETPDL_SUBFIELD_NAME_TLV_VALUE
 = "value";

242 c⁄° *c⁄° 
	gNETPDL_SUBFIELD_NAME_HDRLINE_HNAME
 = "hname";

243 c⁄° *c⁄° 
	gNETPDL_SUBFIELD_NAME_HDRLINE_HVALUE
 = "hvalue";

244 c⁄° *c⁄° 
	gNETPDL_SUBFIELD_NAME_ASN1_ENCRULEDATA
 = "encruledata";

245 c⁄° *c⁄° 
	gNETPDL_SUBFIELD_NAME_XML_PROLOG
 = "prolog";

246 c⁄° *c⁄° 
	gNETPDL_SUBFIELD_NAME_XML_BODY
 = "body";

252 
	#NETPDL_ADT_ATTR_ADTTYPE
 "adây≥"

	)

253 
	#NETPDL_ADT_ATTR_ADTNAME
 "adäame"

	)

254 
	#NETPDL_ADT_ATTR_BASEADT
 "ba£adt"

	)

258 
	#NETPDL_REPLACE_ATTR_NAMEREF
 "«mîef"

	)

265 
	#NETPDL_FIELD_LOOP_ATTR_LOOPTYPE
 "ty≥"

	)

266 
	#NETPDL_FIELD_LOOP_LPT_SIZE
 "size"

	)

267 
	#NETPDL_FIELD_LOOP_LTP_T2R
 "times2ª≥©"

	)

268 
	#NETPDL_FIELD_LOOP_LTP_WHILE
 "whûe"

	)

269 
	#NETPDL_FIELD_LOOP_LTP_DOWHILE
 "do-whûe"

	)

271 
	#NETPDL_FIELD_LOOPCTRL_ATTR_TYPE
 "ty≥"

	)

272 
	#NETPDL_FIELD_LOOPCTRL_ATTR_TYPE_BREAK
 "bªak"

	)

273 
	#NETPDL_FIELD_LOOPCTRL_ATTR_TYPE_CONTINUE
 "c⁄töue"

	)

275 
	#NETPDL_FIELD_INCLUDEBLK_NAME
 "«me"

	)

282 
	#NETPDL_PROTOCOL_STARTPROTO
 "°¨çrŸo"

	)

283 
	#NETPDL_PROTOCOL_DEFAULTPROTO
 "deÁu…¥Ÿo"

	)

284 
	#NETPDL_PROTOCOL_ETHERPADDINGPROTO
 "ëhî∑ddög"

	)

290 
	#NETPDL_FIELD_SWITCH_ATTR_CASESENSITIVE
 "ˇ££nsôive"

	)

291 
	#NETPDL_FIELD_SWITCH_ATTR_CASESENSITIVE_NO
 "no"

	)

292 
	#NETPDL_CASE_ATTR_VALUE
 "vÆue"

	)

293 
	#NETPDL_CASE_ATTR_MAXVALUE
 "maxvÆue"

	)

294 
	#NETPDL_CASE_ATTR_SHOW
 "show"

	)

299 
	#NETPDL_NEXTPROTO_ATTR_PROTO
 "¥Ÿo"

	)

300 
	#NETPDL_NEXTPROTO_ATTR_PREFERRED
 "preferred"

301 

	)

303 
	#NETPDL_VARIABLE_ATTR_VALIDITY
 "vÆidôy"

	)

304 
	#NETPDL_VARIABLE_ATTR_VALIDITY_THISPKT
 "thi•ackë"

	)

305 
	#NETPDL_VARIABLE_ATTR_VALIDITY_STATIC
 "°©ic"

	)

306 
	#NETPDL_VARIABLE_ATTR_VARTYPE
 "ty≥"

	)

307 
	#NETPDL_VARIABLE_ATTR_VARTYPE_NUMBER
 "numbî"

	)

308 
	#NETPDL_VARIABLE_ATTR_VARTYPE_BUFFER
 "buf„r"

	)

309 
	#NETPDL_VARIABLE_ATTR_VARTYPE_REFBUFFER
 "ªfbuf„r"

	)

310 
	#NETPDL_VARIABLE_ATTR_VARTYPE_PROTOCOL
 "¥Ÿocﬁ"

	)

315 
	#NETPDL_LOOKUPTABLE_KEYANDDATA_ATTR_TYPE
 "ty≥"

	)

316 
	#NETPDL_LOOKUPTABLE_KEYANDDATA_ATTR_TYPE_NUMBER
 "numbî"

	)

317 
	#NETPDL_LOOKUPTABLE_KEYANDDATA_ATTR_TYPE_BUFFER
 "buf„r"

	)

318 
	#NETPDL_LOOKUPTABLE_KEYANDDATA_ATTR_TYPE_PROTOCOL
 "¥Ÿocﬁ"

	)

320 
	#NETPDL_LOOKUPTABLE_ATTR_EXACTENTRIES
 "exa˘íåõs"

	)

321 
	#NETPDL_LOOKUPTABLE_ATTR_MASKENTRIES
 "maskíåõs"

	)

322 
	#NETPDL_LOOKUPTABLE_ATTR_VALIDITY
 "vÆidôy"

	)

323 
	#NETPDL_LOOKUPTABLE_ATTR_VALIDITY_STATIC
 "°©ic"

	)

324 
	#NETPDL_LOOKUPTABLE_ATTR_VALIDITY_DYNAMIC
 "dy«mic"

	)

327 
	#NETPDL_UPDATELOOKUPTABLE_ATTR_ACTION
 "a˘i⁄"

	)

328 
	#NETPDL_UPDATELOOKUPTABLE_ATTR_ACTION_ADD
 "add"

	)

329 
	#NETPDL_UPDATELOOKUPTABLE_ATTR_ACTION_PURGE
 "purge"

	)

330 
	#NETPDL_UPDATELOOKUPTABLE_ATTR_ACTION_OBSOLETE
 "obsﬁëe"

	)

332 
	#NETPDL_UPDATELOOKUPTABLE_ADD_ATTR_VALIDITY
 "vÆidôy"

	)

333 
	#NETPDL_UPDATELOOKUPTABLE_ADD_ATTR_VALIDITY_KEEPFOREVER
 "kìpf‹evî"

	)

334 
	#NETPDL_UPDATELOOKUPTABLE_ADD_ATTR_VALIDITY_KEEPMAXTIME
 "kìpmaxtime"

	)

335 
	#NETPDL_UPDATELOOKUPTABLE_ADD_ATTR_VALIDITY_UPDATEONHIT
 "upd©e⁄hô"

	)

336 
	#NETPDL_UPDATELOOKUPTABLE_ADD_ATTR_VALIDITY_REPLACEONHIT
 "ª∂a˚⁄hô"

	)

337 
	#NETPDL_UPDATELOOKUPTABLE_ADD_ATTR_VALIDITY_ADDONHIT
 "add⁄hô"

	)

339 
	#NETPDL_UPDATELOOKUPTABLE_ADD_ATTR_KEEPTIME
 "kì±ime"

	)

340 
	#NETPDL_UPDATELOOKUPTABLE_ADD_ATTR_HITTIME
 "hôtime"

	)

341 
	#NETPDL_UPDATELOOKUPTABLE_ADD_ATTR_NEWHITTIME
 "√whôtime"

	)

342 
	#NETPDL_LOOKUPTABLE_FIELDNAME_TIMESTAMP
 "time°amp"

	)

343 
	#NETPDL_LOOKUPTABLE_FIELDNAME_LIFETIME
 "li„time"

	)

346 
	#NETPDL_LOOKUPTABLE_KEYFIELD_ATTR_MASK
 "mask"

	)

349 
	#NETPDL_ALIAS_ATTR_REPLACEWITH
 "ª∂a˚wôh"

	)

353 
	#NETPDL_PROTOVERIFYRESULT_NOTFOUND
 0

	)

354 
	#NETPDL_PROTOVERIFYRESULT_FOUND
 1

	)

355 
	#NETPDL_PROTOVERIFYRESULT_CANDIDATE
 2

	)

356 
	#NETPDL_PROTOVERIFYRESULT_DEFERRED
 3

	)

360 
	#NETPDL_EXPR_THISFIELD
 "this"

	)

365 
	#NETPDL_SHOW_ATTR_NAME
 "«me"

	)

366 
	#NETPDL_SHOW_ATTR_NAME_NEXT
 "√xt"

	)

367 
	#NETPDL_SHOW_ATTR_SHOWDATA
 "showd©a"

	)

369 
	#NETPDL_SHOW_TEXT_ATTR_VALUE
 "vÆue"

	)

374 
	#NETPDL_SHOWSUMSECT_ATTR_LONGNAME
 "l⁄g«me"

	)

387 
	#NETPDL_DATE_ATTR
 "d©e"

	)

388 
	#NETPDL_CREATOR_ATTR
 "¸ót‹"

	)

389 
	#NETPDL_VERSION_ATTR
 "vîsi⁄"

	)

391 
	#PxML_CREATOR
 "¸ót‹=\"NëBì Libøry\""

	)

392 
	#PxML_VERSION
 "vîsi⁄=\"0\""

	)

401 
	#PSML_ROOT
 "psml"

	)

402 
	#PSML_INDEXSTRUCTURE
 "°ru˘uª"

	)

403 
	#PSML_PACKET
 "∑ckë"

	)

404 
	#PSML_SECTION
 "£˘i⁄"

	)

415 
	#PDML_CAPTURE
 "pdml"

	)

416 
	#PDML_PACKET
 "∑ckë"

	)

417 
	#PDML_FIELD
 "fõld"

	)

418 
	#PDML_BLOCK
 "block"

	)

419 
	#PDML_PROTO
 "¥Ÿo"

	)

420 
	#PDML_DUMP
 "dump"

	)

422 
	#PDML_FIELD_ATTR_POSITION
 "pos"

	)

423 
	#PDML_FIELD_ATTR_VALUE
 "vÆue"

	)

424 
	#PDML_FIELD_ATTR_NAME
 "«me"

	)

425 
	#PDML_FIELD_ATTR_LONGNAME
 "l⁄g«me"

	)

426 
	#PDML_FIELD_ATTR_SHOW
 "showvÆue"

	)

427 
	#PDML_FIELD_ATTR_SHOWDTL
 "showdé"

	)

428 
	#PDML_FIELD_ATTR_SIZE
 "size"

	)

429 
	#PDML_FIELD_ATTR_MASK
 "mask"

	)

430 
	#PDML_FIELD_ATTR_SHOWMAP
 "showm≠"

	)

433 
	#PDML_FIELD_ATTR_NAME_TIMESTAMP
 "time°amp"

	)

434 
	#PDML_FIELD_ATTR_NAME_CAPLENGTH
 "ˇ∂í"

	)

435 
	#PDML_FIELD_ATTR_NAME_LENGTH
 "Àn"

	)

436 
	#PDML_FIELD_ATTR_NAME_NUM
 "num"

	)

	@/usr/include/nbprotodb_elements_xml.h

17 
nbNETPDL_ELEMENT
("√çdl", 
nbNETPDL_EL_NETPDL
, 
nbNETPDL_IDEL_NETPDL
, 
Cª©eEÀmítNëPDL
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítGíîic
, 
SîülizeEÀmítGíîic
)

18 
nbNETPDL_ELEMENT
("¥Ÿocﬁ", 
nbNETPDL_EL_PROTO
, 
nbNETPDL_IDEL_PROTO
, 
Cª©eEÀmítPrŸo
, 
Org™izeEÀmítPrŸo
, 
DñëeEÀmítPrŸo
, 
SîülizeEÀmítPrŸo
)

20 
nbNETPDL_ELEMENT
("adt-li°", 
nbNETPDL_EL_ADTLIST
, 
nbNETPDL_IDEL_ADTLIST
, 
Cª©eEÀmítGíîic
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítGíîic
, 
SîülizeEÀmítGíîic
)

21 
nbNETPDL_ELEMENT
("adt", 
nbNETPDL_EL_ADT
, 
nbNETPDL_IDEL_ADT
, 
Cª©eEÀmítAdt
, 
Org™izeEÀmítAdt
, 
DñëeEÀmítAdt
, 
SîülizeEÀmítGíîic
)

22 
nbNETPDL_ELEMENT
("ª∂a˚", 
nbNETPDL_EL_REPLACE
, 
nbNETPDL_IDEL_REPLACE
, 
Cª©eEÀmítRïœ˚
, 
Org™izeEÀmítRïœ˚
, 
DñëeEÀmítFõld
, 
SîülizeEÀmítGíîic
)

24 
nbNETPDL_ELEMENT
("f‹m©", 
nbNETPDL_EL_FORMAT
, 
nbNETPDL_IDEL_FORMAT
, 
Cª©eEÀmítGíîic
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítGíîic
, 
SîülizeEÀmítPrŸo
)

25 
nbNETPDL_ELEMENT
("íˇpsuœti⁄", 
nbNETPDL_EL_ENCAPSULATION
, 
nbNETPDL_IDEL_ENCAPSULATION
, 
Cª©eEÀmítGíîic
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítGíîic
, 
SîülizeEÀmítGíîic
)

27 
nbNETPDL_ELEMENT
("√xçrŸo", 
nbNETPDL_EL_NEXTPROTO
, 
nbNETPDL_IDEL_NEXTPROTO
, 
Cª©eEÀmítNextPrŸo
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítNextPrŸo
, 
SîülizeEÀmítGíîic
)

28 
nbNETPDL_ELEMENT
("√xçrŸo-ˇndid©e", 
nbNETPDL_EL_NEXTPROTOCANDIDATE
, 
nbNETPDL_IDEL_NEXTPROTOCANDIDATE
, 
Cª©eEÀmítNextPrŸo
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítNextPrŸo
, 
SîülizeEÀmítGíîic
)

30 
nbNETPDL_ELEMENT
("execuã-code", 
nbNETPDL_EL_EXECUTECODE
, 
nbNETPDL_IDEL_EXECUTECODE
, 
Cª©eEÀmítGíîic
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítGíîic
, 
SîülizeEÀmítGíîic
)

31 
nbNETPDL_ELEMENT
("vîify", 
nbNETPDL_EL_VERIFY
, 
nbNETPDL_IDEL_VERIFY
, 
Cª©eEÀmítExecuãX
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítExecuãX
, 
SîülizeEÀmítGíîic
)

32 
nbNETPDL_ELEMENT
("öô", 
nbNETPDL_EL_INIT
, 
nbNETPDL_IDEL_INIT
, 
Cª©eEÀmítExecuãX
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítExecuãX
, 
SîülizeEÀmítGíîic
)

33 
nbNETPDL_ELEMENT
("bef‹e", 
nbNETPDL_EL_BEFORE
, 
nbNETPDL_IDEL_BEFORE
, 
Cª©eEÀmítExecuãX
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítExecuãX
, 
SîülizeEÀmítGíîic
)

34 
nbNETPDL_ELEMENT
("a·î", 
nbNETPDL_EL_AFTER
, 
nbNETPDL_IDEL_AFTER
, 
Cª©eEÀmítExecuãX
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítExecuãX
, 
SîülizeEÀmítGíîic
)

35 
nbNETPDL_ELEMENT
("v¨übÀ", 
nbNETPDL_EL_VARIABLE
, 
nbNETPDL_IDEL_VARIABLE
, 
Cª©eEÀmítV¨übÀ
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítV¨übÀ
, 
SîülizeEÀmítGíîic
)

36 
nbNETPDL_ELEMENT
("looku±abÀ", 
nbNETPDL_EL_LOOKUPTABLE
, 
nbNETPDL_IDEL_LOOKUPTABLE
, 
Cª©eEÀmítLookupTabÀ
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítLookupTabÀ
, 
SîülizeEÀmítGíîic
)

37 
nbNETPDL_ELEMENT
("key", 
nbNETPDL_EL_KEY
, 
nbNETPDL_IDEL_KEY
, 
Cª©eEÀmítKeyD©a
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítKeyD©a
, 
SîülizeEÀmítGíîic
)

38 
nbNETPDL_ELEMENT
("d©a", 
nbNETPDL_EL_DATA
, 
nbNETPDL_IDEL_DATA
, 
Cª©eEÀmítKeyD©a
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítKeyD©a
, 
SîülizeEÀmítGíîic
)

39 
nbNETPDL_ELEMENT
("Æüs", 
nbNETPDL_EL_ALIAS
, 
nbNETPDL_IDEL_ALIAS
, 
Cª©eEÀmítAlüs
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítAlüs
, 
SîülizeEÀmítGíîic
)

41 
nbNETPDL_ELEMENT
("fõlds", 
nbNETPDL_EL_FIELDS
, 
nbNETPDL_IDEL_FIELDS
, 
Cª©eEÀmítGíîic
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítGíîic
, 
SîülizeEÀmítGíîic
)

42 
nbNETPDL_ELEMENT
("fõld", 
nbNETPDL_EL_FIELD
, 
nbNETPDL_IDEL_FIELD
, 
Cª©eEÀmítFõld
, 
Org™izeEÀmítFõld
, 
DñëeEÀmítFõld
, 
SîülizeEÀmítGíîic
)

43 
nbNETPDL_ELEMENT
("subfõld", 
nbNETPDL_EL_SUBFIELD
, 
nbNETPDL_IDEL_SUBFIELD
, 
Cª©eEÀmítSubfõld
, 
Org™izeEÀmítSubfõld
, 
DñëeEÀmítFõld
, 
SîülizeEÀmítGíîic
)

44 
nbNETPDL_ELEMENT
("fõldm©ch", 
nbNETPDL_EL_FIELDMATCH
, 
nbNETPDL_IDEL_FIELDMATCH
, 
Cª©eEÀmítFõldm©ch
, 
Org™izeEÀmítFõldm©ch
, 
DñëeEÀmítFõld
, 
SîülizeEÀmítGíîic
)

45 
nbNETPDL_ELEMENT
("adtfõld", 
nbNETPDL_EL_ADTFIELD
, 
nbNETPDL_IDEL_ADTFIELD
, 
Cª©eEÀmítAdtfõld
, 
Org™izeEÀmítAdtfõld
, 
DñëeEÀmítFõld
, 
SîülizeEÀmítGíîic
)

46 
nbNETPDL_ELEMENT
("m≠", 
nbNETPDL_EL_MAP
, 
nbNETPDL_IDEL_MAP
, 
Cª©eEÀmítM≠
, 
Org™izeEÀmítM≠
, 
DñëeEÀmítM≠
, 
SîülizeEÀmítGíîic
)

47 
nbNETPDL_ELEMENT
("£t", 
nbNETPDL_EL_SET
, 
nbNETPDL_IDEL_SET
, 
Cª©eEÀmítSë
, 
Org™izeEÀmítSë
, 
DñëeEÀmítSë
, 
SîülizeEÀmítGíîic
)

48 
nbNETPDL_ELEMENT
("exô-whí", 
nbNETPDL_EL_EXITWHEN
, 
nbNETPDL_IDEL_EXITWHEN
, 
Cª©eEÀmítExôWhí
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítExôWhí
, 
SîülizeEÀmítGíîic
)

49 
nbNETPDL_ELEMENT
("deÁu…-ôem", 
nbNETPDL_EL_DEFAULTITEM
, 
nbNETPDL_IDEL_DEFAULTITEM
, 
Cª©eEÀmítDeÁu…Iãm
, 
Org™izeEÀmítDeÁu…Iãm
, 
DñëeEÀmítFõld
, 
SîülizeEÀmítGíîic
)

50 
nbNETPDL_ELEMENT
("choi˚", 
nbNETPDL_EL_CHOICE
, 
nbNETPDL_IDEL_CHOICE
, 
Cª©eEÀmítChoi˚
, 
Org™izeEÀmítChoi˚
, 
DñëeEÀmítChoi˚
, 
SîülizeEÀmítGíîic
)

51 
nbNETPDL_ELEMENT
("ö˛udeblk", 
nbNETPDL_EL_INCLUDEBLK
, 
nbNETPDL_IDEL_INCLUDEBLK
, 
Cª©eEÀmítIn˛udeBlk
, 
Org™izeEÀmítIn˛udeBlk
, 
DñëeEÀmítIn˛udeBlk
, 
SîülizeEÀmítGíîic
)

52 
nbNETPDL_ELEMENT
("block", 
nbNETPDL_EL_BLOCK
, 
nbNETPDL_IDEL_BLOCK
, 
Cª©eEÀmítBlock
, 
Org™izeEÀmítBlock
, 
DñëeEÀmítBlock
, 
SîülizeEÀmítGíîic
)

54 
nbNETPDL_ELEMENT
("assign-v¨übÀ", 
nbNETPDL_EL_ASSIGNVARIABLE
, 
nbNETPDL_IDEL_ASSIGNVARIABLE
, 
Cª©eEÀmítAssignV¨übÀ
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítAssignV¨übÀ
, 
SîülizeEÀmítGíîic
)

55 
nbNETPDL_ELEMENT
("assign-looku±abÀ", 
nbNETPDL_EL_ASSIGNLOOKUPTABLE
, 
nbNETPDL_IDEL_ASSIGNLOOKUPTABLE
, 
Cª©eEÀmítAssignLookupTabÀ
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítAssignLookupTabÀ
, 
SîülizeEÀmítGíîic
)

56 
nbNETPDL_ELEMENT
("upd©e-looku±abÀ", 
nbNETPDL_EL_UPDATELOOKUPTABLE
, 
nbNETPDL_IDEL_UPDATELOOKUPTABLE
, 
Cª©eEÀmítUpd©eLookupTabÀ
, 
Org™izeEÀmítUpd©eLookupTabÀ
, 
DñëeEÀmítUpd©eLookupTabÀ
, 
SîülizeEÀmítGíîic
)

57 
nbNETPDL_ELEMENT
("lookupkey", 
nbNETPDL_EL_LOOKUPKEY
, 
nbNETPDL_IDEL_LOOKUPKEY
, 
Cª©eEÀmítLookupKeyD©a
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítLookupKeyD©a
, 
SîülizeEÀmítGíîic
)

58 
nbNETPDL_ELEMENT
("lookupd©a", 
nbNETPDL_EL_LOOKUPDATA
, 
nbNETPDL_IDEL_LOOKUPDATA
, 
Cª©eEÀmítLookupKeyD©a
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítLookupKeyD©a
, 
SîülizeEÀmítGíîic
)

60 
nbNETPDL_ELEMENT
("if", 
nbNETPDL_EL_IF
, 
nbNETPDL_IDEL_IF
, 
Cª©eEÀmítIf
, 
Org™izeEÀmítIf
, 
DñëeEÀmítIf
, 
SîülizeEÀmítGíîic
)

61 
nbNETPDL_ELEMENT
("if-åue", 
nbNETPDL_EL_IFTRUE
, 
nbNETPDL_IDEL_IFTRUE
, 
Cª©eEÀmítGíîic
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítGíîic
, 
SîülizeEÀmítGíîic
)

62 
nbNETPDL_ELEMENT
("if-Ál£", 
nbNETPDL_EL_IFFALSE
, 
nbNETPDL_IDEL_IFFALSE
, 
Cª©eEÀmítGíîic
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítGíîic
, 
SîülizeEÀmítGíîic
)

63 
nbNETPDL_ELEMENT
("swôch", 
nbNETPDL_EL_SWITCH
, 
nbNETPDL_IDEL_SWITCH
, 
Cª©eEÀmítSwôch
, 
Org™izeEÀmítSwôch
, 
DñëeEÀmítSwôch
, 
SîülizeEÀmítGíîic
)

64 
nbNETPDL_ELEMENT
("ˇ£", 
nbNETPDL_EL_CASE
, 
nbNETPDL_IDEL_CASE
, 
Cª©eEÀmítCa£
, 
Org™izeEÀmítCa£
, 
DñëeEÀmítCa£
, 
SîülizeEÀmítGíîic
)

65 
nbNETPDL_ELEMENT
("deÁu…", 
nbNETPDL_EL_DEFAULT
, 
nbNETPDL_IDEL_DEFAULT
, 
Cª©eEÀmítDeÁu…
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítDeÁu…
, 
SîülizeEÀmítGíîic
)

66 
nbNETPDL_ELEMENT
("lo›", 
nbNETPDL_EL_LOOP
, 
nbNETPDL_IDEL_LOOP
, 
Cª©eEÀmítLo›
, 
Org™izeEÀmítLo›
, 
DñëeEÀmítLo›
, 
SîülizeEÀmítGíîic
)

67 
nbNETPDL_ELEMENT
("lo›˘æ", 
nbNETPDL_EL_LOOPCTRL
, 
nbNETPDL_IDEL_LOOPCTRL
, 
Cª©eEÀmítLo›Cål
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítLo›Cål
, 
SîülizeEÀmítGíîic
)

68 
nbNETPDL_ELEMENT
("missög-∑ckëd©a", 
nbNETPDL_EL_MISSINGPACKETDATA
, 
nbNETPDL_IDEL_MISSINGPACKETDATA
, 
Cª©eEÀmítGíîic
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítGíîic
, 
SîülizeEÀmítGíîic
)

70 
nbNETPDL_ELEMENT
("visuÆiz©i⁄", 
nbNETPDL_EL_NETPDLSHOW
, 
nbNETPDL_IDEL_NETPDLSHOW
, 
Cª©eEÀmítGíîic
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítGíîic
, 
SîülizeEÀmítGíîic
)

71 
nbNETPDL_ELEMENT
("showãm∂©e", 
nbNETPDL_EL_SHOWTEMPLATE
, 
nbNETPDL_IDEL_SHOWTEMPLATE
, 
Cª©eEÀmítShowTem∂©e
, 
Org™izeEÀmítShowTem∂©e
, 
DñëeEÀmítShowTem∂©e
, 
SîülizeEÀmítShowTem∂©e
)

72 
nbNETPDL_ELEMENT
("showsumãm∂©e", 
nbNETPDL_EL_SHOWSUMTEMPLATE
, 
nbNETPDL_IDEL_SHOWSUMTEMPLATE
, 
Cª©eEÀmítShowSumTem∂©e
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítShowSumTem∂©e
, 
SîülizeEÀmítShowSumTem∂©e
)

73 
nbNETPDL_ELEMENT
("showm≠", 
nbNETPDL_EL_SHOWMAP
, 
nbNETPDL_IDEL_SHOWMAP
, 
Cª©eEÀmítGíîic
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítGíîic
, 
SîülizeEÀmítGíîic
)

74 
nbNETPDL_ELEMENT
("showdé", 
nbNETPDL_EL_SHOWDTL
, 
nbNETPDL_IDEL_SHOWDTL
, 
Cª©eEÀmítGíîic
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítGíîic
, 
SîülizeEÀmítGíîic
)

75 
nbNETPDL_ELEMENT
("ãxt", 
nbNETPDL_EL_TEXT
, 
nbNETPDL_IDEL_TEXT
, 
Cª©eEÀmítShowCodeText
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítShowCodeText
, 
SîülizeEÀmítGíîic
)

76 
nbNETPDL_ELEMENT
("£˘i⁄", 
nbNETPDL_EL_SECTION
, 
nbNETPDL_IDEL_SECTION
, 
Cª©eEÀmítShowCodeSe˘i⁄
, 
Org™izeEÀmítSe˘i⁄
, 
DñëeEÀmítShowCodeSe˘i⁄
, 
SîülizeEÀmítGíîic
)

77 
nbNETPDL_ELEMENT
("¥Ÿofõld", 
nbNETPDL_EL_PROTOFIELD
, 
nbNETPDL_IDEL_PROTOFIELD
, 
Cª©eEÀmítShowCodePrŸoFõld
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítShowCodePrŸoFõld
, 
SîülizeEÀmítGíîic
)

78 
nbNETPDL_ELEMENT
("¥Ÿohdr", 
nbNETPDL_EL_PROTOHDR
, 
nbNETPDL_IDEL_PROTOHDR
, 
Cª©eEÀmítShowCodePrŸoHdr
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítShowCodePrŸoHdr
, 
SîülizeEÀmítGíîic
)

79 
nbNETPDL_ELEMENT
("∑ckëhdr", 
nbNETPDL_EL_PKTHDR
, 
nbNETPDL_IDEL_PKTHDR
, 
Cª©eEÀmítShowCodePackëHdr
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítShowCodePackëHdr
, 
SîülizeEÀmítGíîic
)

81 
nbNETPDL_ELEMENT
("showsum°ru˘", 
nbNETPDL_EL_SHOWSUMSTRUCT
, 
nbNETPDL_IDEL_SHOWSUMSTRUCT
, 
Cª©eEÀmítGíîic
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítGíîic
, 
SîülizeEÀmítGíîic
)

82 
nbNETPDL_ELEMENT
("sum£˘i⁄", 
nbNETPDL_EL_SUMSECTION
, 
nbNETPDL_IDEL_SUMSECTION
, 
Cª©eEÀmítSumSe˘i⁄
, 
Org™izeEÀmítGíîic
, 
DñëeEÀmítSumSe˘i⁄
, 
SîülizeEÀmítGíîic
)

85 
nbNETPDL_ELEMENT
("", 
nbNETPDL_EL_INVALID
, 
nbNETPDL_IDEL_INVALID
, 
NULL
, NULL, NULL, NULL)

	@/usr/include/nbprotodb_exports.h

17 #¥agm®
⁄˚


20 
	~<°döt.h
>

24 
	#nbNETPDL_GET_ELEMENT
(
nb¥Ÿodb
, 
ödex
Ë“b¥Ÿodb->
GlobÆEÀmítsLi°
[ödex])

	)

27 #ifde‡
__˝lu•lus


43 
	enbNëPDLLökLayî_t


45 
nbNETPDL_LINK_LAYER_ETHERNET
 = 1,

46 
nbNETPDL_LINK_LAYER_TOKEN_RING
 = 6,

47 
nbNETPDL_LINK_LAYER_FDDI
 = 10,

48 
nbNETPDL_LINK_LAYER_HCI
 = 13,

49 
nbNETPDL_LINK_LAYER_IEEE_80211
 = 105

50 } 
	tnbNëPDLLökLayî_t
;

61 
	#nbNETPDL_INVALID_ELEMENT
 0

	)

69 
	#NETPDL_MAX_SHORTSTRING
 20

	)

73 
	#STRUCT_NBNETPDLELEMENT
 \

	)

75 
uöt16_t
 
Ty≥
; \

77 
uöt32_t
 
P¨ít
; \

79 
uöt32_t
 
Fú°Chûd
; \

81 
uöt32_t
 
NextSiblög
; \

83 
uöt32_t
 
PªviousSiblög
; \

85 
EÀmítName
[
NETPDL_MAX_SHORTSTRING
]; \

87 
EÀmítNumbî
; \

89 
Ne°ögLevñ
; \

91 
_nbCÆlH™dÀrInfo
* 
CÆlH™dÀrInfo
;

128 
	s_nbNëPDLEÀmítBa£


130 
STRUCT_NBNETPDLELEMENT


144 
	enbNëPDLCÆlH™dÀrEvítTy≥s_t


147 
nbNETPDL_CALLHANDLE_EVENT_BEFORE
= 20,

149 
nbNETPDL_CALLHANDLE_EVENT_AFTER


150 } 
	tnbNëPDLCÆlH™dÀrEvítTy≥s_t
;

157 
	enbNëPDLFõldEncodögs_t


160 
nbNETPDL_ID_ENCODING_RAW
 = 0,

162 
nbNETPDL_ID_ENCODING_ASCII
,

164 
nbNETPDL_ID_ENCODING_UTF8
,

166 
nbNETPDL_ID_ENCODING_UNICODE
,

168 
nbNETPDL_ID_ENCODING_BER
,

170 
nbNETPDL_ID_ENCODING_DER
,

172 
nbNETPDL_ID_ENCODING_CER


173 } 
	tnbNëPDLFõldEncodögs_t
;

179 
	enbNëPDLFõldNodeTy≥s_t


182 
nbNETPDL_ID_FIELD_FIXED
 = 50,

184 
nbNETPDL_ID_FIELD_BIT
,

186 
nbNETPDL_ID_FIELD_VARIABLE
,

188 
nbNETPDL_ID_FIELD_TOKENENDED
,

190 
nbNETPDL_ID_FIELD_TOKENWRAPPED
,

192 
nbNETPDL_ID_FIELD_LINE
,

194 
nbNETPDL_ID_FIELD_PATTERN
,

196 
nbNETPDL_ID_FIELD_EATALL
,

198 
nbNETPDL_ID_FIELD_PADDING
,

200 
nbNETPDL_ID_FIELD_PLUGIN
,

202 
nbNETPDL_ID_CFIELD_TLV
,

204 
nbNETPDL_ID_CFIELD_DELIMITED
,

206 
nbNETPDL_ID_CFIELD_LINE
,

210 
nbNETPDL_ID_CFIELD_HDRLINE
,

212 
nbNETPDL_ID_CFIELD_DYNAMIC
,

214 
nbNETPDL_ID_CFIELD_ASN1
,

216 
nbNETPDL_ID_CFIELD_XML
,

218 
nbNETPDL_ID_SUBFIELD_SIMPLE
,

220 
nbNETPDL_ID_SUBFIELD_COMPLEX
,

224 
nbNETPDL_ID_FIELD_MAP_XML_PI
,

228 
nbNETPDL_ID_FIELD_MAP_XML_DOCTYPE
,

230 
nbNETPDL_ID_FIELD_MAP_XML_ELEMENT
,

234 
nbNETPDL_ID_ADTFIELD
,

236 
nbNETPDL_ID_FIELD_REPLACE
,

238 
nbNETPDL_ID_FIELDMATCH
,

240 
nbNETPDL_ID_DEFAULT_MATCH


241 } 
	tnbNëPDLFõldNodeTy≥s_t
;

247 
	enbNëPDLSubfõldNodeP‹ti⁄s_t


250 
nbNETPDL_ID_SUBFIELD_PORTION_TLV_TYPE
 = 150,

252 
nbNETPDL_ID_SUBFIELD_PORTION_TLV_LENGTH
,

254 
nbNETPDL_ID_SUBFIELD_PORTION_TLV_VALUE
,

256 
nbNETPDL_ID_SUBFIELD_PORTION_HDRLINE_HNAME
,

258 
nbNETPDL_ID_SUBFIELD_PORTION_HDRLINE_HVALUE
,

260 
nbNETPDL_ID_SUBFIELD_PORTION_DYNAMIC


261 } 
	tnbNëPDLSubfõldNodeP‹ti⁄s_t
;

267 
	enbNëPDLLo›Mode_t


270 
nbNETPDL_ID_LOOP_SIZE
 = 200,

272 
nbNETPDL_ID_LOOP_T2R
,

274 
nbNETPDL_ID_LOOP_WHILE
,

276 
nbNETPDL_ID_LOOP_DOWHILE


277 } 
	tnbNëPDLLo›Mode_t
;

283 
	enbNëPDLLo›CålMode_t


286 
nbNETPDL_ID_LOOPCTRL_NONE
 = 0,

288 
nbNETPDL_ID_LOOPCTRL_BREAK
,

290 
nbNETPDL_ID_LOOPCTRL_CONTINUE


291 } 
	tnbNëPDLLo›CålMode_t
;

297 
	enbNëPDLFõldTem∂©eDigôTy≥s_t


300 
nbNETPDL_ID_TEMPLATE_DIGIT_HEX
= 400,

302 
nbNETPDL_ID_TEMPLATE_DIGIT_HEXNOX
,

304 
nbNETPDL_ID_TEMPLATE_DIGIT_DEC
,

306 
nbNETPDL_ID_TEMPLATE_DIGIT_BIN
,

308 
nbNETPDL_ID_TEMPLATE_DIGIT_FLOAT
,

310 
nbNETPDL_ID_TEMPLATE_DIGIT_DOUBLE
,

312 
nbNETPDL_ID_TEMPLATE_DIGIT_ASCII


313 } 
	tnbNëPDLFõldTem∂©eDigôTy≥s_t
;

319 
	enbNëPDLFõldTem∂©eN©iveFun˘i⁄Ty≥s_t


322 
nbNETPDL_ID_TEMPLATE_NATIVEFUNCT_IPV4
= 450,

324 
nbNETPDL_ID_TEMPLATE_NATIVEFUNCT_ASCII
,

326 
nbNETPDL_ID_TEMPLATE_NATIVEFUNCT_ASCIILINE
,

328 
nbNETPDL_ID_TEMPLATE_NATIVEFUNCT_HTTPCONTENT


329 } 
	tnbNëPDLFõldTem∂©eN©iveFun˘i⁄Ty≥s_t
;

335 
	enbNëPDLEx¥Rëu∫Ty≥s_t


338 
nbNETPDL_ID_EXPR_RETURNTYPE_NUMBER
 = 500,

340 
nbNETPDL_ID_EXPR_RETURNTYPE_BUFFER
,

342 
nbNETPDL_ID_EXPR_RETURNTYPE_BOOLEAN
,

344 
nbNETPDL_ID_EXPR_RETURNTYPE_DONTMIND


345 } 
	tnbNëPDLEx¥Rëu∫Ty≥s_t
;

351 
	enbNëPDLEx¥O≥øndTy≥s_t


354 
nbNETPDL_ID_EXPR_OPERAND_NUMBER
 = 550,

356 
nbNETPDL_ID_EXPR_OPERAND_STRING
,

358 
nbNETPDL_ID_EXPR_OPERAND_BOOLEAN
,

360 
nbNETPDL_ID_EXPR_OPERAND_PROTOREF
,

362 
nbNETPDL_ID_EXPR_OPERAND_VARIABLE
,

364 
nbNETPDL_ID_EXPR_OPERAND_LOOKUPTABLE
,

366 
nbNETPDL_ID_EXPR_OPERAND_PROTOFIELD
,

368 
nbNETPDL_ID_EXPR_OPERAND_PROTOFIELD_2
,

370 
nbNETPDL_ID_EXPR_OPERAND_PROTOFIELD_THIS
,

372 
nbNETPDL_ID_EXPR_OPERAND_PROTOFIELD_THIS_2
,

374 
nbNETPDL_ID_EXPR_OPERAND_EXPR
,

376 
nbNETPDL_ID_EXPR_OPERAND_FUNCTION_HASSTRING
,

378 
nbNETPDL_ID_EXPR_OPERAND_FUNCTION_EXTRACTSTRING
,

380 
nbNETPDL_ID_EXPR_OPERAND_FUNCTION_ISPRESENT
,

382 
nbNETPDL_ID_EXPR_OPERAND_FUNCTION_ISASN1TYPE
,

384 
nbNETPDL_ID_EXPR_OPERAND_FUNCTION_BUF2INT
,

386 
nbNETPDL_ID_EXPR_OPERAND_FUNCTION_INT2BUF
,

388 
nbNETPDL_ID_EXPR_OPERAND_FUNCTION_ASCII2INT
,

390 
nbNETPDL_ID_EXPR_OPERAND_FUNCTION_CHANGEBYTEORDER
,

392 
nbNETPDL_ID_EXPR_OPERAND_FUNCTION_CHECKLOOKUPTABLE
,

394 
nbNETPDL_ID_EXPR_OPERAND_FUNCTION_UPDATELOOKUPTABLE


395 } 
	tnbNëPDLEx¥O≥øndTy≥s_t
;

401 
	enbNëPDLV¨übÀTy≥s_t


404 
nbNETPDL_VARIABLE_TYPE_NUMBER
 = 580,

406 
nbNETPDL_VARIABLE_TYPE_BOOLEAN
,

408 
nbNETPDL_VARIABLE_TYPE_BUFFER
,

410 
nbNETPDL_VARIABLE_TYPE_REFBUFFER
,

412 
nbNETPDL_VARIABLE_TYPE_PROTOCOL


413 } 
	tnbNëPDLV¨übÀTy≥s_t
;

417 
	enbNëPDLV¨übÀVÆidôyTy≥s_t


420 
nbNETPDL_VARIABLE_VALIDITY_STATIC
 = 585,

422 
nbNETPDL_VARIABLE_VALIDITY_THISPACKET


423 } 
	tnbNëPDLV¨übÀVÆidôyTy≥s_t
;

427 
	enbNëPDLLookupTabÀKeyD©aTy≥s_t


430 
nbNETPDL_LOOKUPTABLE_KEYANDDATA_TYPE_NUMBER
 = 590,

432 
nbNETPDL_LOOKUPTABLE_KEYANDDATA_TYPE_BUFFER
,

434 
nbNETPDL_LOOKUPTABLE_KEYANDDATA_TYPE_PROTOCOL


435 } 
	tnbNëPDLLookupTabÀKeyD©aTy≥s_t
;

439 
	enbNëPDLUpd©eLookupTabÀA˘i⁄Ty≥s_t


442 
nbNETPDL_UPDATELOOKUPTABLE_ACTION_ADD
 = 600,

444 
nbNETPDL_UPDATELOOKUPTABLE_ACTION_PURGE
,

446 
nbNETPDL_UPDATELOOKUPTABLE_ACTION_OBSOLETE


447 } 
	tnbNëPDLUpd©eLookupTabÀA˘i⁄Ty≥s_t
;

451 
	enbNëPDLUpd©eLookupTabÀAddVÆidôyTy≥s_t


454 
nbNETPDL_UPDATELOOKUPTABLE_VALIDITY_KEEPFOREVER
 = 650,

456 
nbNETPDL_UPDATELOOKUPTABLE_VALIDITY_KEEPMAXTIME
,

458 
nbNETPDL_UPDATELOOKUPTABLE_VALIDITY_UPDATEONHIT
,

460 
nbNETPDL_UPDATELOOKUPTABLE_VALIDITY_REPLACEONHIT
,

462 
nbNETPDL_UPDATELOOKUPTABLE_VALIDITY_ADDONHIT


463 } 
	tnbNëPDLUpd©eLookupTabÀAddVÆidôyTy≥s_t
;

469 
	enbNëPDLEx¥O≥øt‹Ty≥s_t


473 
nbNETPDL_ID_EXPR_OPER_PLUS
 = 700,

475 
nbNETPDL_ID_EXPR_OPER_MINUS
,

477 
nbNETPDL_ID_EXPR_OPER_MUL
,

479 
nbNETPDL_ID_EXPR_OPER_DIV
,

481 
nbNETPDL_ID_EXPR_OPER_MOD
,

483 
nbNETPDL_ID_EXPR_OPER_BITWAND
,

485 
nbNETPDL_ID_EXPR_OPER_BITWOR
,

487 
nbNETPDL_ID_EXPR_OPER_BITWNOT
,

491 
nbNETPDL_ID_EXPR_OPER_EQUAL
,

493 
nbNETPDL_ID_EXPR_OPER_NOTEQUAL
,

495 
nbNETPDL_ID_EXPR_OPER_GREATEQUAL
,

497 
nbNETPDL_ID_EXPR_OPER_GREAT
,

499 
nbNETPDL_ID_EXPR_OPER_LESSEQUAL
,

501 
nbNETPDL_ID_EXPR_OPER_LESS
,

503 
nbNETPDL_ID_EXPR_OPER_AND
,

505 
nbNETPDL_ID_EXPR_OPER_OR
,

507 
nbNETPDL_ID_EXPR_OPER_NOT


508 } 
	tnbNëPDLEx¥O≥øt‹Ty≥s_t
;

516 
	enbNëPDLShowCodePDMLFõldAâribTy≥s_t


519 
nbNETPDL_ID_NODE_SHOWCODE_PDMLFIELD_ATTRIB_VALUE
= 1000,

521 
nbNETPDL_ID_NODE_SHOWCODE_PDMLFIELD_ATTRIB_NAME
,

523 
nbNETPDL_ID_NODE_SHOWCODE_PDMLFIELD_ATTRIB_LONGNAME
,

525 
nbNETPDL_ID_NODE_SHOWCODE_PDMLFIELD_ATTRIB_SHOWMAP
,

527 
nbNETPDL_ID_NODE_SHOWCODE_PDMLFIELD_ATTRIB_SHOWDTL
,

529 
nbNETPDL_ID_NODE_SHOWCODE_PDMLFIELD_ATTRIB_SHOW
,

531 
nbNETPDL_ID_NODE_SHOWCODE_PDMLFIELD_ATTRIB_MASK
,

533 
nbNETPDL_ID_NODE_SHOWCODE_PDMLFIELD_ATTRIB_POSITION
,

535 
nbNETPDL_ID_NODE_SHOWCODE_PDMLFIELD_ATTRIB_SIZE


536 } 
	tnbNëPDLShowCodePDMLFõldAâribTy≥s_t
;

542 
	enbNëPDLShowCodePackëHdrAâribTy≥s_t


545 
nbNETPDL_ID_NODE_SHOWCODE_PKTHDR_ATTRIB_NUM
= 1100,

547 
nbNETPDL_ID_NODE_SHOWCODE_PKTHDR_ATTRIB_LEN
,

549 
nbNETPDL_ID_NODE_SHOWCODE_PKTHDR_ATTRIB_CAPLEN
,

551 
nbNETPDL_ID_NODE_SHOWCODE_PKTHDR_ATTRIB_TIMESTAMP


552 } 
	tnbNëPDLShowCodePackëHdrAâribTy≥s_t
;

573 
	enbPrŸoDBFœgs


576 
nbPROTODB_FULL
= 0,

579 
nbPROTODB_MINIMAL
= 1

590 
	s_nbNëPDLD©aba£


593 
uöt32_t
 
Vîsi⁄Maj‹
;

595 
uöt32_t
 
Vîsi⁄Mö‹
;

598 * 
Cª©i⁄D©e
;

600 * 
Cª©‹
;

603 
uöt32_t
 
Fœgs
;

607 
_nbNëPDLEÀmítPrŸo
 **
PrŸoLi°
;

610 
uöt32_t
 
PrŸoLi°NIãms
;

613 
uöt32_t
 
SèπPrŸoIndex
;

616 
uöt32_t
 
DeÁu…PrŸoIndex
;

619 
uöt32_t
 
Ethî∑ddögPrŸoIndex
;

622 
_nbNëPDLEÀmítShowTem∂©e
 **
ShowTem∂©eLi°
;

625 
uöt32_t
 
ShowTem∂©eNIãms
;

628 
_nbNëPDLEÀmítShowSumTem∂©e
 **
ShowSumTem∂©eLi°
;

631 
uöt32_t
 
ShowSumTem∂©eNIãms
;

634 
_nbNëPDLEÀmítShowSumSåu˘uª
 **
ShowSumSåu˘uªLi°
;

637 
uöt32_t
 
ShowSumSåu˘uªNIãms
;

640 
_nbNëPDLEÀmítAdt
 **
ADTLi°
;

643 
uöt32_t
 
ADTNIãms
;

646 
_nbNëPDLEÀmítAdt
 **
LoˇlADTLi°
;

649 
uöt32_t
 
LoˇlADTNIãms
;

667 
_nbNëPDLEÀmítBa£
 **
GlobÆEÀmítsLi°
;

670 
GlobÆEÀmítsLi°NIãms
;

673 
GlobÆEÀmítsLi°NIãmsPlusADTC›õs
;

677 
_nbNëPDLEx¥Ba£
* 
Ex¥essi⁄Li°
;

690 
	s_nbCÆlH™dÀrInfo


695 *
Fun˘i⁄Name
;

699 
FúeOnEvít
;

704 *
CÆlH™dÀr
;

709 
	s_nbNëPDLEÀmítPrŸo


711 
STRUCT_NBNETPDLELEMENT


714 *
Name
;

717 *
L⁄gName
;

720 *
ShowSumTem∂©eName
;

723 
_nbNëPDLEÀmítExecuãX
 *
Fú°ExecuãVîify
;

726 
_nbNëPDLEÀmítExecuãX
 *
Fú°ExecuãInô
;

729 
_nbNëPDLEÀmítExecuãX
 *
Fú°ExecuãBef‹e
;

732 
_nbNëPDLEÀmítExecuãX
 *
Fú°ExecuãA·î
;

735 
_nbNëPDLEÀmítBa£
 *
Fú°Fõld
;

738 
_nbNëPDLEÀmítBa£
 *
Fú°Enˇpsuœti⁄Iãm
;

741 
_nbNëPDLEÀmítShowSumTem∂©e
 *
ShowSumTem∂©eInfo
;

747 
	s_nbNëPDLEÀmítExecuãX


749 
STRUCT_NBNETPDLELEMENT


752 *
WhíEx¥Såög
;

755 
_nbNëPDLEx¥Ba£
* 
WhíEx¥Tªe
;

758 
_nbNëPDLEÀmítExecuãX
 *
NextExecuãEÀmít
;

763 
	s_nbNëPDLEÀmítV¨übÀ


765 
STRUCT_NBNETPDLELEMENT


768 
nbNëPDLV¨übÀTy≥s_t
 
V¨übÀD©aTy≥
;

771 * 
Name
;

774 
nbNëPDLV¨übÀVÆidôyTy≥s_t
 
VÆidôy
;

785 
Size
;

788 
InôVÆueNumbî
;

792 
InôVÆueBoﬁón
;

795 *
InôVÆueSåög
;

798 
InôVÆueSåögSize
;

803 
	s_nbNëPDLEÀmítLookupTabÀ


805 
STRUCT_NBNETPDLELEMENT


808 * 
Name
;

811 
NumExa˘E¡rõs
;

814 
NumMaskE¡rõs
;

817 
AŒowDy«micE¡rõs
;

821 
_nbNëPDLEÀmítKeyD©a
* 
Fú°Key
;

825 
_nbNëPDLEÀmítKeyD©a
* 
Fú°D©a
;

831 
	s_nbNëPDLEÀmítKeyD©a


833 
STRUCT_NBNETPDLELEMENT


836 * 
Name
;

839 
nbNëPDLLookupTabÀKeyD©aTy≥s_t
 
KeyD©aTy≥
;

843 
Size
;

846 
_nbNëPDLEÀmítKeyD©a
* 
NextKeyD©a
;

851 
	s_nbNëPDLEÀmítAlüs


853 
STRUCT_NBNETPDLELEMENT


856 * 
Name
;

859 * 
Rïœ˚Wôh
;

864 
	s_nbNëPDLEÀmítAssignV¨übÀ


866 
STRUCT_NBNETPDLELEMENT


869 * 
Ex¥Såög
;

872 
_nbNëPDLEx¥Ba£
* 
Ex¥Tªe
;

876 * 
V¨übÀName
;

881 
V¨übÀD©aTy≥
;

885 
Off£tSèπAt
;

888 
Off£tSize
;

892 * 
Cu°omD©a
;

897 
	s_nbNëPDLEÀmítAssignLookupTabÀ


899 
STRUCT_NBNETPDLELEMENT


902 * 
TabÀName
;

905 * 
FõldName
;

908 * 
Ex¥Såög
;

911 
_nbNëPDLEx¥Ba£
* 
Ex¥Tªe
;

916 
FõldD©aTy≥
;

920 
Off£tSèπAt
;

923 
Off£tSize
;

927 * 
TabÀCu°omD©a
;

931 * 
FõldCu°omD©a
;

936 
	s_nbNëPDLEÀmítUpd©eLookupTabÀ


938 
STRUCT_NBNETPDLELEMENT


941 * 
TabÀName
;

945 
nbNëPDLUpd©eLookupTabÀA˘i⁄Ty≥s_t
 
A˘i⁄
;

948 
KeysHaveMasks
;

952 
nbNëPDLUpd©eLookupTabÀAddVÆidôyTy≥s_t
 
VÆidôy
;

955 
KìpTime
;

958 
HôTime
;

961 
NewHôTime
;

964 
_nbNëPDLEÀmítLookupKeyD©a
* 
Fú°Key
;

967 
_nbNëPDLEÀmítLookupKeyD©a
* 
Fú°D©a
;

971 * 
TabÀCu°omD©a
;

978 
	s_nbNëPDLEÀmítLookupKeyD©a


980 
STRUCT_NBNETPDLELEMENT


983 * 
Ex¥Såög
;

986 
_nbNëPDLEx¥Ba£
* 
Ex¥Tªe
;

990 * 
Mask
;

993 
_nbNëPDLEÀmítLookupKeyD©a
* 
NextKeyD©a
;

999 
	s_nbNëPDLEÀmítIf


1001 
STRUCT_NBNETPDLELEMENT


1004 
_nbNëPDLEÀmítBa£
 *
Fú°VÆidChûdIfTrue
;

1007 
_nbNëPDLEÀmítBa£
 *
Fú°VÆidChûdIfFÆ£
;

1010 
_nbNëPDLEÀmítBa£
 *
Fú°VÆidChûdIfMissögPackëD©a
;

1013 *
Ex¥Såög
;

1016 
_nbNëPDLEx¥Ba£
* 
Ex¥Tªe
;

1022 
	s_nbNëPDLEÀmítCa£


1024 
STRUCT_NBNETPDLELEMENT


1027 *
ShowSåög
;

1030 
VÆueNumbî
;

1033 
VÆueMaxNumbî
;

1038 *
VÆueSåög
;

1041 
VÆueSåögSize
;

1046 
_nbNëPDLEÀmítCa£
 *
NextCa£
;

1052 
	s_nbNëPDLEÀmítSwôch


1054 
STRUCT_NBNETPDLELEMENT


1059 
_nbNëPDLEÀmítCa£
 *
Fú°Ca£
;

1062 
_nbNëPDLEÀmítCa£
 *
DeÁu…Ca£
;

1065 *
Ex¥Såög
;

1068 
_nbNëPDLEx¥Ba£
* 
Ex¥Tªe
;

1072 
Ca£Sísôive
;

1078 
	s_nbNëPDLEÀmítLo›


1080 
STRUCT_NBNETPDLELEMENT


1084 
nbNëPDLLo›Mode_t
 
Lo›Ty≥
;

1087 
_nbNëPDLEÀmítBa£
 *
Fú°VÆidChûdInLo›
;

1090 
_nbNëPDLEÀmítBa£
 *
Fú°VÆidChûdIfMissögPackëD©a
;

1093 *
Ex¥Såög
;

1096 
_nbNëPDLEx¥Ba£
* 
Ex¥Tªe
;

1102 
	s_nbNëPDLEÀmítLo›Cål


1104 
STRUCT_NBNETPDLELEMENT


1108 
nbNëPDLLo›CålMode_t
 
Lo›CålTy≥
;

1113 
	s_nbNëPDLEÀmítIn˛udeBlk


1115 
STRUCT_NBNETPDLELEMENT


1119 *
In˛udedBlockName
;

1122 
_nbNëPDLEÀmítBlock
 *
In˛udedBlock
;

1127 
	s_nbNëPDLEÀmítBlock


1129 
STRUCT_NBNETPDLELEMENT


1132 *
Name
;

1135 *
L⁄gName
;

1138 *
ShowSumTem∂©eName
;

1141 
_nbNëPDLEÀmítShowSumTem∂©e
 *
ShowSumTem∂©eInfo
;

1147 
	s_nbNëPDLEÀmítSë


1149 
STRUCT_NBNETPDLELEMENT


1152 
_nbNëPDLEÀmítFõldBa£
 *
FõldToDecode
;

1155 
_nbNëPDLEÀmítBa£
 *
Fú°VÆidChûdIfMissögPackëD©a
;

1158 
_nbNëPDLEÀmítExôWhí
 *
ExôWhí
;

1161 
_nbNëPDLEÀmítFõldm©ch
 *
Fú°M©chEÀmít
;

1167 
	s_nbNëPDLEÀmítExôWhí


1169 
STRUCT_NBNETPDLELEMENT


1172 *
ExôEx¥Såög
;

1175 
_nbNëPDLEx¥Ba£
* 
ExôEx¥Tªe
;

1181 
	s_nbNëPDLEÀmítChoi˚


1183 
STRUCT_NBNETPDLELEMENT


1186 
_nbNëPDLEÀmítFõldBa£
 *
FõldToDecode
;

1189 
_nbNëPDLEÀmítBa£
 *
Fú°VÆidChûdIfMissögPackëD©a
;

1192 
_nbNëPDLEÀmítFõldm©ch
 *
Fú°M©chEÀmít
;

1198 
	s_nbNëPDLEÀmítAdt


1200 
STRUCT_NBNETPDLELEMENT


1203 *
ADTName
;

1206 *
PrŸoName
;

1209 
_nbNëPDLEÀmítFõldBa£
 *
ADTFõldInfo
;

1216 
	s_nbNëPDLEÀmítNextPrŸo


1218 
STRUCT_NBNETPDLELEMENT


1222 *
Ex¥Såög
;

1226 *
Ex¥Pª„ºed
;

1230 
_nbNëPDLEx¥Ba£
* 
Ex¥Tªe
;

1234 
_nbNëPDLEx¥Ba£
* 
Ex¥Pª„ºedTªe
;

1245 
	#STRUCT_NBNETPDLFIELDELEMENT
 \

	)

1247 
STRUCT_NBNETPDLELEMENT
 \

1250 
nbNëPDLFõldNodeTy≥s_t
 
FõldTy≥
; \

1253 
nbNëPDLFõldEncodögs_t
 
Encodög
; \

1256 *
Name
; \

1259 *
L⁄gName
; \

1262 
uöt8_t
 
IsInNëw‹kByãOrdî
; \

1265 *
ShowTem∂©eName
; \

1268 
_nbNëPDLEÀmítShowTem∂©e
 *
ShowTem∂©eInfo
; \

1271 *
ADTRef
; \

1275 
	#STRUCT_NBNETPDLMAPELEMENT
 \

	)

1277 
STRUCT_NBNETPDLFIELDELEMENT
 \

1280 *
RefName
;

1300 
	s_nbNëPDLEÀmítFõldBa£


1302 
STRUCT_NBNETPDLFIELDELEMENT


1308 
	s_nbNëPDLEÀmítFõldFixed


1310 
STRUCT_NBNETPDLFIELDELEMENT


1313 
Size
;

1317 
	s_nbNëPDLEÀmítFõldBô


1319 
STRUCT_NBNETPDLFIELDELEMENT


1322 *
BôMaskSåög
;

1325 
BôMask
;

1328 
Size
;

1339 
IsLa°BôFõld
;

1343 
	s_nbNëPDLEÀmítFõldV¨übÀ


1345 
STRUCT_NBNETPDLFIELDELEMENT


1348 *
Ex¥Såög
;

1351 
_nbNëPDLEx¥Ba£
* 
Ex¥Tªe
;

1356 
	s_nbNëPDLEÀmítFõldTokíEnded


1358 
STRUCT_NBNETPDLFIELDELEMENT


1363 *
EndTokíSåög
;

1368 
EndTokíSåögSize
;

1371 *
EndReguœrEx¥essi⁄
;

1373 *
EndPCRECompûedRegExp
;

1376 *
EndOff£tEx¥Såög
;

1378 
_nbNëPDLEx¥Ba£
* 
EndOff£tEx¥Tªe
;

1381 *
EndDisˇrdEx¥Såög
;

1383 
_nbNëPDLEx¥Ba£
* 
EndDisˇrdEx¥Tªe
;

1388 
	s_nbNëPDLEÀmítFõldTokíWøµed


1390 
STRUCT_NBNETPDLFIELDELEMENT


1395 *
BegöTokíSåög
;

1400 
BegöTokíSåögSize
;

1405 *
EndTokíSåög
;

1410 
EndTokíSåögSize
;

1413 *
BegöReguœrEx¥essi⁄
;

1415 *
BegöPCRECompûedRegExp
;

1418 *
EndReguœrEx¥essi⁄
;

1420 *
EndPCRECompûedRegExp
;

1423 *
BegöOff£tEx¥Såög
;

1425 
_nbNëPDLEx¥Ba£
* 
BegöOff£tEx¥Tªe
;

1428 *
EndOff£tEx¥Såög
;

1430 
_nbNëPDLEx¥Ba£
* 
EndOff£tEx¥Tªe
;

1433 *
EndDisˇrdEx¥Såög
;

1435 
_nbNëPDLEx¥Ba£
* 
EndDisˇrdEx¥Tªe
;

1440 
	s_nbNëPDLEÀmítFõldLöe


1442 
STRUCT_NBNETPDLFIELDELEMENT


1447 
	s_nbNëPDLEÀmítFõldP©ã∫


1449 
STRUCT_NBNETPDLFIELDELEMENT


1452 *
P©ã∫ReguœrEx¥essi⁄
;

1455 *
P©ã∫PCRECompûedRegExp
;

1458 
uöt8_t
 
OnP¨tülDecodögC⁄töue
;

1463 
	s_nbNëPDLEÀmítFõldE©Æl


1465 
STRUCT_NBNETPDLFIELDELEMENT


1470 
	s_nbNëPDLEÀmítFõldPaddög


1472 
STRUCT_NBNETPDLFIELDELEMENT


1476 
Align
;

1481 
	s_nbNëPDLEÀmítFõldPlugö


1483 
STRUCT_NBNETPDLFIELDELEMENT


1486 *
PlugöName
;

1490 
PlugöIndex
;

1495 
	s_nbNëPDLEÀmítCfõldTLV


1497 
STRUCT_NBNETPDLFIELDELEMENT


1500 
Ty≥Size
;

1503 
LígthSize
;

1506 *
VÆueEx¥Såög
;

1509 
_nbNëPDLEx¥Ba£
* 
VÆueEx¥Tªe
;

1512 
_nbNëPDLEÀmítBa£
 *
Ty≥Subfõld
;

1514 
_nbNëPDLEÀmítBa£
 *
LígthSubfõld
;

1516 
_nbNëPDLEÀmítBa£
 *
VÆueSubfõld
;

1521 
	s_nbNëPDLEÀmítCfõldDñimôed


1523 
STRUCT_NBNETPDLFIELDELEMENT


1526 *
BegöReguœrEx¥essi⁄
;

1528 *
BegöPCRECompûedRegExp
;

1531 *
EndReguœrEx¥essi⁄
;

1533 *
EndPCRECompûedRegExp
;

1536 
uöt8_t
 
OnMissögBegöC⁄töue
;

1538 
uöt8_t
 
OnMissögEndC⁄töue
;

1543 
	s_nbNëPDLEÀmítCfõldLöe


1545 
STRUCT_NBNETPDLFIELDELEMENT


1550 
	s_nbNëPDLEÀmítCfõldHdæöe


1552 
STRUCT_NBNETPDLFIELDELEMENT


1555 *
Sï¨©‹ReguœrEx¥essi⁄
;

1558 *
Sï¨©‹PCRECompûedRegExp
;

1561 
_nbNëPDLEÀmítBa£
 *
HódîNameSubfõld
;

1563 
_nbNëPDLEÀmítBa£
 *
HódîVÆueSubfõld
;

1568 
	s_nbNëPDLEÀmítCfõldDy«mic


1570 
STRUCT_NBNETPDLFIELDELEMENT


1573 *
P©ã∫ReguœrEx¥essi⁄
;

1576 *
P©ã∫PCRECompûedRegExp
;

1579 **
NamesLi°
;

1582 
uöt32_t
 
NamesLi°NIãms
;

1587 
	s_nbNëPDLEÀmítCfõldASN1


1589 
STRUCT_NBNETPDLFIELDELEMENT


1594 
	s_nbNëPDLEÀmítCfõldXML


1596 
STRUCT_NBNETPDLFIELDELEMENT


1599 *
SizeEx¥Såög
;

1602 
_nbNëPDLEx¥Ba£
* 
SizeEx¥Tªe
;

1607 
	s_nbNëPDLEÀmítSubfõld


1609 
STRUCT_NBNETPDLFIELDELEMENT


1612 
nbNëPDLSubfõldNodeP‹ti⁄s_t
 
P‹ti⁄
;

1615 c⁄° *
P‹ti⁄Name
;

1618 
_nbNëPDLEÀmítFõldBa£
 *
Com∂exSubfõldInfo
;

1623 
	s_nbNëPDLEÀmítM≠Ba£


1625 
STRUCT_NBNETPDLMAPELEMENT


1630 
	s_nbNëPDLEÀmítM≠XMLPI


1632 
STRUCT_NBNETPDLMAPELEMENT


1635 *
XMLPIReguœrEx¥essi⁄
;

1638 *
XMLPIPCRECompûedRegExp
;

1641 
uöt8_t
 
ShowAâribuãs
;

1646 
	s_nbNëPDLEÀmítM≠XMLDo˘y≥


1648 
STRUCT_NBNETPDLMAPELEMENT


1651 *
XMLDo˘y≥ReguœrEx¥essi⁄
;

1654 *
XMLDo˘y≥PCRECompûedRegExp
;

1659 
	s_nbNëPDLEÀmítM≠XMLEÀmít


1661 
STRUCT_NBNETPDLMAPELEMENT


1664 *
XMLEÀmítReguœrEx¥essi⁄
;

1667 *
XMLEÀmítPCRECompûedRegExp
;

1670 
uöt8_t
 
ShowAâribuãs
;

1673 *
Name•a˚Såög
;

1676 *
HõørcySåög
;

1681 
	s_nbNëPDLEÀmítAdtfõld


1683 
STRUCT_NBNETPDLFIELDELEMENT


1686 *
CÆÀdADTName
;

1691 
	s_nbNëPDLEÀmítRïœ˚


1693 
STRUCT_NBNETPDLFIELDELEMENT


1696 *
FõldToRíame
;

1699 
_nbNëPDLEÀmítRïœ˚
 *
NextRïœ˚
;

1704 
	s_nbNëPDLEÀmítFõldm©ch


1706 
STRUCT_NBNETPDLFIELDELEMENT


1709 *
M©chEx¥Såög
;

1712 
_nbNëPDLEx¥Ba£
* 
M©chEx¥Tªe
;

1715 
uöt8_t
 
Recuºög
;

1718 
_nbNëPDLEÀmítFõldm©ch
 *
NextFõldm©ch
;

1733 
	s_nbNëPDLEÀmítShowTem∂©e


1735 
STRUCT_NBNETPDLELEMENT


1738 *
Name
;

1742 
nbNëPDLFõldTem∂©eDigôTy≥s_t
 
ShowMode
;

1746 
nbNëPDLFõldTem∂©eN©iveFun˘i⁄Ty≥s_t
 
ShowN©iveFun˘i⁄
;

1749 
DigôSize
;

1753 *
Sï¨©‹
;

1756 *
PlugöName
;

1761 
_nbNëPDLEÀmítSwôch
 *
M≠pögTabÀInfo
;

1764 
_nbNëPDLEÀmítBa£
 *
Cu°omTem∂©eFú°Fõld
;

1769 
PlugöIndex
;

1776 
	s_nbNëPDLEÀmítShowSumTem∂©e


1778 
STRUCT_NBNETPDLELEMENT


1781 *
Name
;

1791 
	s_nbNëPDLEÀmítShowSumSåu˘uª


1793 
STRUCT_NBNETPDLELEMENT


1796 *
Name
;

1799 *
L⁄gName
;

1805 
	s_nbNëPDLEÀmítSe˘i⁄


1807 
STRUCT_NBNETPDLELEMENT


1811 *
Se˘i⁄Name
;

1815 
Se˘i⁄Numbî
;

1819 
uöt8_t
 
IsNext
;

1824 
	s_nbNëPDLEÀmítPrŸoHdr


1826 
STRUCT_NBNETPDLELEMENT


1832 
nbNëPDLShowCodePDMLFõldAâribTy≥s_t
 
PrŸoAâribTy≥
;

1837 
	s_nbNëPDLEÀmítPrŸoFõld


1839 
STRUCT_NBNETPDLELEMENT


1843 *
FõldName
;

1848 
nbNëPDLShowCodePDMLFõldAâribTy≥s_t
 
FõldShowD©aTy≥
;

1853 
	s_nbNëPDLEÀmítText


1855 
STRUCT_NBNETPDLELEMENT


1859 *
VÆue
;

1867 *
Ex¥Såög
;

1870 
_nbNëPDLEx¥Ba£
* 
Ex¥Tªe
;

1875 
	s_nbNëPDLEÀmítPackëHdr


1877 
STRUCT_NBNETPDLELEMENT


1882 
nbNëPDLShowCodePackëHdrAâribTy≥s_t
 
VÆue
;

1894 #i‚de‡
_DEBUG


1901 
	#STRUCT_NBNETPDLOPERAND
 \

	)

1903 
nbNëPDLEx¥O≥øndTy≥s_t
 
Ty≥
; \

1905 
Tokí
[
NETPDL_MAX_SHORTSTRING
]; \

1907 
nbNëPDLEx¥Rëu∫Ty≥s_t
 
Rëu∫Ty≥
; \

1912 
PrötDebug
; \

1918 
_nbNëPDLEx¥Ba£
 *
NextEx¥essi⁄
;

1926 
	#STRUCT_NBNETPDLOPERAND
 \

	)

1928 
nbNëPDLEx¥O≥øndTy≥s_t
 
Ty≥
; \

1930 
Tokí
[
NETPDL_MAX_SHORTSTRING
]; \

1932 
nbNëPDLEx¥Rëu∫Ty≥s_t
 
Rëu∫Ty≥
; \

1937 
PrötDebug
; \

1943 
_nbNëPDLEx¥Ba£
 *
NextEx¥essi⁄
;

1960 
	s_nbNëPDLEx¥Ba£


1962 
STRUCT_NBNETPDLOPERAND


1971 
	s_nbNëPDLEx¥essi⁄


1973 
STRUCT_NBNETPDLOPERAND


1976 
_nbNëPDLEx¥Ba£
 *
O≥ønd1
;

1979 
_nbNëPDLEx¥O≥øt‹
 *
O≥øt‹
;

1982 
_nbNëPDLEx¥Ba£
 *
O≥ønd2
;

1988 
	s_nbNëPDLEx¥O≥øt‹


1991 
nbNëPDLEx¥O≥øt‹Ty≥s_t
 
O≥øt‹Ty≥
;

1993 #ifde‡
_DEBUG


1995 
Tokí
[
NETPDL_MAX_SHORTSTRING
];

2002 
	s_nbNëPDLEx¥Numbî


2004 
STRUCT_NBNETPDLOPERAND


2007 
VÆue
;

2013 
	s_nbNëPDLEx¥Såög


2015 
STRUCT_NBNETPDLOPERAND


2018 *
VÆue
;

2021 
Size
;

2025 
	s_nbNëPDLEx¥Boﬁón


2027 
STRUCT_NBNETPDLOPERAND


2030 
VÆue
;

2035 
	s_nbNëPDLEx¥PrŸoRef


2037 
STRUCT_NBNETPDLOPERAND


2040 
VÆue
;

2043 *
PrŸocﬁName
;

2048 
	s_nbNëPDLEx¥V¨übÀ


2050 
STRUCT_NBNETPDLOPERAND


2054 * 
Name
;

2058 * 
Cu°omD©a
;

2062 
_nbNëPDLEx¥Ba£
 *
Off£tSèπAt
;

2065 
_nbNëPDLEx¥Ba£
 *
Off£tSize
;

2070 
	s_nbNëPDLEx¥LookupTabÀ


2072 
STRUCT_NBNETPDLOPERAND


2075 * 
TabÀName
;

2078 * 
FõldName
;

2082 * 
TabÀCu°omD©a
;

2086 * 
FõldCu°omD©a
;

2090 
_nbNëPDLEx¥Ba£
 *
Off£tSèπAt
;

2093 
_nbNëPDLEx¥Ba£
 *
Off£tSize
;

2098 
	s_nbNëPDLEx¥FõldRef


2100 
STRUCT_NBNETPDLOPERAND


2103 *
VÆue
;

2106 *
FõldName
;

2109 *
PrŸoName
;

2112 
_nbNëPDLEx¥Ba£
 *
Off£tSèπAt
;

2115 
_nbNëPDLEx¥Ba£
 *
Off£tSize
;

2120 
	s_nbNëPDLEx¥Fun˘i⁄RegExp


2122 
STRUCT_NBNETPDLOPERAND


2125 
_nbNëPDLEx¥Ba£
 *
SórchBuf„r
;

2128 *
ReguœrEx¥essi⁄
;

2131 *
PCRECompûedRegExp
;

2134 
Ca£SísôiveM©ch
;

2138 
M©chToBeRëu∫ed
;

2143 
	s_nbNëPDLEx¥Fun˘i⁄IsASN1Ty≥


2145 
STRUCT_NBNETPDLOPERAND


2148 
_nbNëPDLEx¥Ba£
 *
SåögEx¥essi⁄
;

2151 
_nbNëPDLEx¥Ba£
 *
CœssNumbî
;

2154 
_nbNëPDLEx¥Ba£
 *
TagNumbî
;

2159 
	s_nbNëPDLEx¥Fun˘i⁄Buf2I¡


2161 
STRUCT_NBNETPDLOPERAND


2164 
_nbNëPDLEx¥Ba£
 *
SåögEx¥essi⁄
;

2169 
	s_nbNëPDLEx¥Fun˘i⁄I¡2Buf


2171 
STRUCT_NBNETPDLOPERAND


2174 
_nbNëPDLEx¥Ba£
 *
NumîicEx¥essi⁄
;

2177 
Resu…Size
;

2180 
Resu…
[()];

2185 
	s_nbNëPDLEx¥Fun˘i⁄IsPª£¡


2187 
STRUCT_NBNETPDLOPERAND


2190 
_nbNëPDLEx¥FõldRef
 *
NëPDLFõld
;

2195 
	s_nbNëPDLEx¥Fun˘i⁄Ascii2I¡


2197 
STRUCT_NBNETPDLOPERAND


2200 
_nbNëPDLEx¥Ba£
 *
AsciiSåögEx¥essi⁄
;

2205 
	s_nbNëPDLEx¥Fun˘i⁄Ch™geByãOrdî


2207 
STRUCT_NBNETPDLOPERAND


2210 
_nbNëPDLEx¥Ba£
 *
OrigöÆSåögEx¥essi⁄
;

2214 
Resu…Buf„r
[(
öt64_t
)];

2219 
	s_nbP¨amsLökedLi°


2222 
_nbNëPDLEx¥Ba£
* 
Ex¥essi⁄
;

2225 
_nbP¨amsLökedLi°
* 
NextP¨amëî
;

2230 
	s_nbNëPDLEx¥Fun˘i⁄CheckUpd©eLookupTabÀ


2232 
STRUCT_NBNETPDLOPERAND


2235 * 
TabÀName
;

2239 * 
LookupTabÀCu°omD©a
;

2243 
_nbP¨amsLökedLi°
* 
P¨amëîLi°
;

2248 #ifde‡
__˝lu•lus


	@/usr/include/openssl/asn1.h

59 #i‚de‡
HEADER_ASN1_H


60 
	#HEADER_ASN1_H


	)

62 
	~<time.h
>

63 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/°ack.h
>

68 
	~<›ís¶/ß„°ack.h
>

70 
	~<›ís¶/symhacks.h
>

72 
	~<›ís¶/os¶_typ.h
>

73 #i‚de‡
OPENSSL_NO_DEPRECATED


74 
	~<›ís¶/bn.h
>

77 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


78 #unde‡
OPENSSL_EXTERN


79 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

82 #ifde‡ 
__˝lu•lus


86 
	#V_ASN1_UNIVERSAL
 0x00

	)

87 
	#V_ASN1_APPLICATION
 0x40

	)

88 
	#V_ASN1_CONTEXT_SPECIFIC
 0x80

	)

89 
	#V_ASN1_PRIVATE
 0xc0

	)

91 
	#V_ASN1_CONSTRUCTED
 0x20

	)

92 
	#V_ASN1_PRIMITIVE_TAG
 0x1f

	)

93 
	#V_ASN1_PRIMATIVE_TAG
 0x1f

	)

95 
	#V_ASN1_APP_CHOOSE
 -2

	)

96 
	#V_ASN1_OTHER
 -3

	)

97 
	#V_ASN1_ANY
 -4

	)

99 
	#V_ASN1_NEG
 0x100

	)

101 
	#V_ASN1_UNDEF
 -1

	)

102 
	#V_ASN1_EOC
 0

	)

103 
	#V_ASN1_BOOLEAN
 1

	)

104 
	#V_ASN1_INTEGER
 2

	)

105 
	#V_ASN1_NEG_INTEGER
 (2 | 
V_ASN1_NEG
)

	)

106 
	#V_ASN1_BIT_STRING
 3

	)

107 
	#V_ASN1_OCTET_STRING
 4

	)

108 
	#V_ASN1_NULL
 5

	)

109 
	#V_ASN1_OBJECT
 6

	)

110 
	#V_ASN1_OBJECT_DESCRIPTOR
 7

	)

111 
	#V_ASN1_EXTERNAL
 8

	)

112 
	#V_ASN1_REAL
 9

	)

113 
	#V_ASN1_ENUMERATED
 10

	)

114 
	#V_ASN1_NEG_ENUMERATED
 (10 | 
V_ASN1_NEG
)

	)

115 
	#V_ASN1_UTF8STRING
 12

	)

116 
	#V_ASN1_SEQUENCE
 16

	)

117 
	#V_ASN1_SET
 17

	)

118 
	#V_ASN1_NUMERICSTRING
 18

	)

119 
	#V_ASN1_PRINTABLESTRING
 19

	)

120 
	#V_ASN1_T61STRING
 20

	)

121 
	#V_ASN1_TELETEXSTRING
 20

	)

122 
	#V_ASN1_VIDEOTEXSTRING
 21

	)

123 
	#V_ASN1_IA5STRING
 22

	)

124 
	#V_ASN1_UTCTIME
 23

	)

125 
	#V_ASN1_GENERALIZEDTIME
 24

	)

126 
	#V_ASN1_GRAPHICSTRING
 25

	)

127 
	#V_ASN1_ISO64STRING
 26

	)

128 
	#V_ASN1_VISIBLESTRING
 26

	)

129 
	#V_ASN1_GENERALSTRING
 27

	)

130 
	#V_ASN1_UNIVERSALSTRING
 28

	)

131 
	#V_ASN1_BMPSTRING
 30

	)

134 
	#B_ASN1_NUMERICSTRING
 0x0001

	)

135 
	#B_ASN1_PRINTABLESTRING
 0x0002

	)

136 
	#B_ASN1_T61STRING
 0x0004

	)

137 
	#B_ASN1_TELETEXSTRING
 0x0004

	)

138 
	#B_ASN1_VIDEOTEXSTRING
 0x0008

	)

139 
	#B_ASN1_IA5STRING
 0x0010

	)

140 
	#B_ASN1_GRAPHICSTRING
 0x0020

	)

141 
	#B_ASN1_ISO64STRING
 0x0040

	)

142 
	#B_ASN1_VISIBLESTRING
 0x0040

	)

143 
	#B_ASN1_GENERALSTRING
 0x0080

	)

144 
	#B_ASN1_UNIVERSALSTRING
 0x0100

	)

145 
	#B_ASN1_OCTET_STRING
 0x0200

	)

146 
	#B_ASN1_BIT_STRING
 0x0400

	)

147 
	#B_ASN1_BMPSTRING
 0x0800

	)

148 
	#B_ASN1_UNKNOWN
 0x1000

	)

149 
	#B_ASN1_UTF8STRING
 0x2000

	)

150 
	#B_ASN1_UTCTIME
 0x4000

	)

151 
	#B_ASN1_GENERALIZEDTIME
 0x8000

	)

152 
	#B_ASN1_SEQUENCE
 0x10000

	)

155 
	#MBSTRING_FLAG
 0x1000

	)

156 
	#MBSTRING_UTF8
 (
MBSTRING_FLAG
)

	)

157 
	#MBSTRING_ASC
 (
MBSTRING_FLAG
|1)

	)

158 
	#MBSTRING_BMP
 (
MBSTRING_FLAG
|2)

	)

159 
	#MBSTRING_UNIV
 (
MBSTRING_FLAG
|4)

	)

161 
	#SMIME_OLDMIME
 0x400

	)

162 
	#SMIME_CRLFEOL
 0x800

	)

163 
	#SMIME_STREAM
 0x1000

	)

165 
X509_Æg‹_°
;

166 
DECLARE_STACK_OF
(
X509_ALGOR
)

168 
	#DECLARE_ASN1_SET_OF
(
ty≥
Ë

	)

169 
	#IMPLEMENT_ASN1_SET_OF
(
ty≥
Ë

	)

175 
	sa¢1_˘x_°


177 *
p
;

178 
eos
;

179 
îr‹
;

180 
öf
;

181 
èg
;

182 
x˛ass
;

183 
¶í
;

184 *
max
;

185 *
q
;

186 **
µ
;

187 
löe
;

188 } 
	tASN1_CTX
;

190 
	sa¢1_c⁄°_˘x_°


192 c⁄° *
p
;

193 
eos
;

194 
îr‹
;

195 
öf
;

196 
èg
;

197 
x˛ass
;

198 
¶í
;

199 c⁄° *
max
;

200 c⁄° *
q
;

201 c⁄° **
µ
;

202 
löe
;

203 } 
	tASN1_c⁄°_CTX
;

207 
	#ASN1_OBJECT_FLAG_DYNAMIC
 0x01

	)

208 
	#ASN1_OBJECT_FLAG_CRITICAL
 0x02

	)

209 
	#ASN1_OBJECT_FLAG_DYNAMIC_STRINGS
 0x04

	)

210 
	#ASN1_OBJECT_FLAG_DYNAMIC_DATA
 0x08

	)

211 
	sa¢1_obje˘_°


213 c⁄° *
¢
,*
 
;

214 
nid
;

215 
Àngth
;

216 c⁄° *
d©a
;

217 
Êags
;

218 } 
	tASN1_OBJECT
;

220 
	#ASN1_STRING_FLAG_BITS_LEFT
 0x08

	)

225 
	#ASN1_STRING_FLAG_NDEF
 0x010

	)

232 
	#ASN1_STRING_FLAG_CONT
 0x020

	)

236 
	#ASN1_STRING_FLAG_MSTRING
 0x040

	)

238 
	sa¢1_°rög_°


240 
Àngth
;

241 
ty≥
;

242 *
d©a
;

247 
Êags
;

255 
	sASN1_ENCODING_°


257 *
íc
;

258 
Àn
;

259 
modifõd
;

260 } 
	tASN1_ENCODING
;

263 
	#ASN1_LONG_UNDEF
 0x7fffffffL

	)

265 
	#STABLE_FLAGS_MALLOC
 0x01

	)

266 
	#STABLE_NO_MASK
 0x02

	)

267 
	#DIRSTRING_TYPE
 \

268 (
B_ASN1_PRINTABLESTRING
|
B_ASN1_T61STRING
|
B_ASN1_BMPSTRING
|
B_ASN1_UTF8STRING
)

	)

269 
	#PKCS9STRING_TYPE
 (
DIRSTRING_TYPE
|
B_ASN1_IA5STRING
)

	)

271 
	sa¢1_°rög_èbÀ_°
 {

272 
nid
;

273 
mösize
;

274 
maxsize
;

275 
mask
;

276 
Êags
;

277 } 
	tASN1_STRING_TABLE
;

279 
DECLARE_STACK_OF
(
ASN1_STRING_TABLE
)

283 
	#ub_«me
 32768

	)

284 
	#ub_comm⁄_«me
 64

	)

285 
	#ub_loˇlôy_«me
 128

	)

286 
	#ub_°©e_«me
 128

	)

287 
	#ub_‹g™iz©i⁄_«me
 64

	)

288 
	#ub_‹g™iz©i⁄_unô_«me
 64

	)

289 
	#ub_tôÀ
 64

	)

290 
	#ub_emaû_addªss
 128

	)

295 
ASN1_TEMPLATE_°
 
	tASN1_TEMPLATE
;

296 
ASN1_TLC_°
 
	tASN1_TLC
;

298 
ASN1_VALUE_°
 
	tASN1_VALUE
;

302 
	#DECLARE_ASN1_FUNCTIONS
(
ty≥
Ë
	`DECLARE_ASN1_FUNCTIONS_«me
—y≥,Åy≥)

	)

304 
	#DECLARE_ASN1_ALLOC_FUNCTIONS
(
ty≥
) \

305 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
,Åy≥)

	)

307 
	#DECLARE_ASN1_FUNCTIONS_«me
(
ty≥
, 
«me
) \

308 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

309 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
«me
,Çame)

	)

311 
	#DECLARE_ASN1_FUNCTIONS_‚ame
(
ty≥
, 
ô«me
, 
«me
) \

312 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

313 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
)

	)

315 
	#DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
) \

316 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

317 
i2d_
##
	`«me
(
ty≥
 *
a
, **
out
); \

318 
	`DECLARE_ASN1_ITEM
(
ô«me
)

	)

320 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ty≥
, 
«me
) \

321 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

322 
i2d_
##
	`«me
(c⁄° 
ty≥
 *
a
, **
out
); \

323 
	`DECLARE_ASN1_ITEM
(
«me
)

	)

325 
	#DECLARE_ASN1_NDEF_FUNCTION
(
«me
) \

326 
i2d_
##
«me
##
	`_NDEF
“amê*
a
, **
out
);

	)

328 
	#DECLARE_ASN1_FUNCTIONS_c⁄°
(
«me
) \

329 
	`DECLARE_ASN1_ALLOC_FUNCTIONS
(
«me
) \

330 
	`DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
«me
,Çame)

	)

332 
	#DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

333 
ty≥
 *
«me
##
	`_√w
(); \

334 
«me
##
	`_‰ì
(
ty≥
 *
a
);

	)

336 
	#DECLARE_ASN1_PRINT_FUNCTION
(
°«me
) \

337 
	`DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, säame)

	)

339 
	#DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, 
‚ame
) \

340 
‚ame
##
	`_¥öt_˘x
(
BIO
 *
out
, 
°«me
 *
x
, 
ödít
, \

341 c⁄° 
ASN1_PCTX
 *
p˘x
);

	)

343 
	#D2I_OF
(
ty≥
Ëty≥ *(*)—y≥ **,c⁄° **,)

	)

344 
	#I2D_OF
(
ty≥
Ë(*)—y≥ *,**)

	)

345 
	#I2D_OF_c⁄°
(
ty≥
Ë(*)(c⁄°Åy≥ *,**)

	)

347 
	#CHECKED_D2I_OF
(
ty≥
, 
d2i
) \

348 ((
d2i_of_void
*Ë(1 ? 
d2i
 : ((
	`D2I_OF
(
ty≥
))0)))

	)

349 
	#CHECKED_I2D_OF
(
ty≥
, 
i2d
) \

350 ((
i2d_of_void
*Ë(1 ? 
i2d
 : ((
	`I2D_OF
(
ty≥
))0)))

	)

351 
	#CHECKED_NEW_OF
(
ty≥
, 
x√w
) \

352 ((*(*)()Ë(1 ? 
x√w
 : ((
ty≥
 *(*)())0)))

	)

353 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

354 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

355 
	#CHECKED_PPTR_OF
(
ty≥
, 
p
) \

356 ((**Ë(1 ? 
p
 : (
ty≥
**)0))

	)

358 
	#TYPEDEF_D2I_OF
(
ty≥
Ëty≥ *
	td2i_of_
##
	tty≥
—y≥ **,c⁄° **,)

	)

359 
	tTYPEDEF_I2D_OF
(
	tty≥
Ë
	ti2d_of_
##ty≥—y≥ *,**)

	)

360 
	tTYPEDEF_D2I2D_OF
(
	tty≥
Ë
	tTYPEDEF_D2I_OF
—y≥); 
	`TYPEDEF_I2D_OF
(
ty≥
)

	)

362 
TYPEDEF_D2I2D_OF
();

399 #i‚de‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


402 c⁄° 
	tASN1_ITEM
 
	tASN1_ITEM_EXP
;

405 
	#ASN1_ITEM_±r
(
ùå
Ë(ùå)

	)

408 
	#ASN1_ITEM_ªf
(
ùå
Ë(&(ùå##
_ô
))

	)

410 
	#ASN1_ITEM_Ωå
(
ªf
Ë(&‘ef##
_ô
))

	)

412 
	#DECLARE_ASN1_ITEM
(
«me
) \

413 
OPENSSL_EXTERN
 c⁄° 
ASN1_ITEM
 
«me
##
_ô
;

	)

422 c⁄° 
	tASN1_ITEM
 * 
	tASN1_ITEM_EXP
();

425 
	#ASN1_ITEM_±r
(
ùå
Ë(
	`ùå
())

	)

428 
	#ASN1_ITEM_ªf
(
ùå
Ë(ùå##
_ô
)

	)

430 
	#ASN1_ITEM_Ωå
(
ªf
Ë‘ef##
	`_ô
())

	)

432 
	#DECLARE_ASN1_ITEM
(
«me
) \

433 c⁄° 
ASN1_ITEM
 * 
«me
##
	`_ô
();

	)

444 
	#ASN1_STRFLGS_ESC_2253
 1

	)

445 
	#ASN1_STRFLGS_ESC_CTRL
 2

	)

446 
	#ASN1_STRFLGS_ESC_MSB
 4

	)

454 
	#ASN1_STRFLGS_ESC_QUOTE
 8

	)

460 
	#CHARTYPE_PRINTABLESTRING
 0x10

	)

462 
	#CHARTYPE_FIRST_ESC_2253
 0x20

	)

464 
	#CHARTYPE_LAST_ESC_2253
 0x40

	)

474 
	#ASN1_STRFLGS_UTF8_CONVERT
 0x10

	)

481 
	#ASN1_STRFLGS_IGNORE_TYPE
 0x20

	)

484 
	#ASN1_STRFLGS_SHOW_TYPE
 0x40

	)

494 
	#ASN1_STRFLGS_DUMP_ALL
 0x80

	)

495 
	#ASN1_STRFLGS_DUMP_UNKNOWN
 0x100

	)

502 
	#ASN1_STRFLGS_DUMP_DER
 0x200

	)

509 
	#ASN1_STRFLGS_RFC2253
 (
ASN1_STRFLGS_ESC_2253
 | \

510 
ASN1_STRFLGS_ESC_CTRL
 | \

511 
ASN1_STRFLGS_ESC_MSB
 | \

512 
ASN1_STRFLGS_UTF8_CONVERT
 | \

513 
ASN1_STRFLGS_DUMP_UNKNOWN
 | \

514 
ASN1_STRFLGS_DUMP_DER
)

	)

516 
DECLARE_STACK_OF
(
ASN1_INTEGER
)

517 
DECLARE_ASN1_SET_OF
(
ASN1_INTEGER
)

519 
DECLARE_STACK_OF
(
ASN1_GENERALSTRING
)

521 
	sa¢1_ty≥_°


523 
ty≥
;

525 *
±r
;

526 
ASN1_BOOLEAN
 
boﬁón
;

527 
ASN1_STRING
 * 
a¢1_°rög
;

528 
ASN1_OBJECT
 * 
obje˘
;

529 
ASN1_INTEGER
 * 
öãgî
;

530 
ASN1_ENUMERATED
 * 
íumî©ed
;

531 
ASN1_BIT_STRING
 * 
bô_°rög
;

532 
ASN1_OCTET_STRING
 * 
o˘ë_°rög
;

533 
ASN1_PRINTABLESTRING
 * 
¥öèbÀ°rög
;

534 
ASN1_T61STRING
 * 
t61°rög
;

535 
ASN1_IA5STRING
 * 
ü5°rög
;

536 
ASN1_GENERALSTRING
 * 
gíîÆ°rög
;

537 
ASN1_BMPSTRING
 * 
bmp°rög
;

538 
ASN1_UNIVERSALSTRING
 * 
univîßl°rög
;

539 
ASN1_UTCTIME
 * 
ut˘ime
;

540 
ASN1_GENERALIZEDTIME
 * 
gíîÆizedtime
;

541 
ASN1_VISIBLESTRING
 * 
visibÀ°rög
;

542 
ASN1_UTF8STRING
 * 
utf8°rög
;

545 
ASN1_STRING
 * 
£t
;

546 
ASN1_STRING
 * 
£quí˚
;

547 
ASN1_VALUE
 * 
a¢1_vÆue
;

548 } 
vÆue
;

549 } 
	tASN1_TYPE
;

551 
DECLARE_STACK_OF
(
ASN1_TYPE
)

552 
DECLARE_ASN1_SET_OF
(
ASN1_TYPE
)

554 
STACK_OF
(
	tASN1_TYPE
Ë
	tASN1_SEQUENCE_ANY
;

556 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, ASN1_SEQUENCE_ANY)

557 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, 
ASN1_SET_ANY
)

559 
	sNETSCAPE_X509_°


561 
ASN1_OCTET_STRING
 *
hódî
;

562 
X509
 *
˚π
;

563 } 
	tNETSCAPE_X509
;

566 
	sBIT_STRING_BITNAME_°
 {

567 
bônum
;

568 c⁄° *
 ame
;

569 c⁄° *
¢ame
;

570 } 
	tBIT_STRING_BITNAME
;

573 
	#M_ASN1_STRING_Àngth
(
x
Ë((x)->
Àngth
)

	)

574 
	#M_ASN1_STRING_Àngth_£t
(
x
, 
n
Ë((x)->
Àngth
 = (n))

	)

575 
	#M_ASN1_STRING_ty≥
(
x
Ë((x)->
ty≥
)

	)

576 
	#M_ASN1_STRING_d©a
(
x
Ë((x)->
d©a
)

	)

579 
	#M_ASN1_BIT_STRING_√w
(Ë(
ASN1_BIT_STRING
 *)\

580 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BIT_STRING
)

	)

581 
	#M_ASN1_BIT_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

582 
	#M_ASN1_BIT_STRING_dup
(
a
Ë(
ASN1_BIT_STRING
 *)\

583 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

584 
	#M_ASN1_BIT_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

585 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

586 
	#M_ASN1_BIT_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

588 
	#M_ASN1_INTEGER_√w
(Ë(
ASN1_INTEGER
 *)\

589 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_INTEGER
)

	)

590 
	#M_ASN1_INTEGER_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

591 
	#M_ASN1_INTEGER_dup
(
a
Ë(
ASN1_INTEGER
 *)\

592 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

593 
	#M_ASN1_INTEGER_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

594 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

596 
	#M_ASN1_ENUMERATED_√w
(Ë(
ASN1_ENUMERATED
 *)\

597 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_ENUMERATED
)

	)

598 
	#M_ASN1_ENUMERATED_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

599 
	#M_ASN1_ENUMERATED_dup
(
a
Ë(
ASN1_ENUMERATED
 *)\

600 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

601 
	#M_ASN1_ENUMERATED_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

602 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

604 
	#M_ASN1_OCTET_STRING_√w
(Ë(
ASN1_OCTET_STRING
 *)\

605 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_OCTET_STRING
)

	)

606 
	#M_ASN1_OCTET_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

607 
	#M_ASN1_OCTET_STRING_dup
(
a
Ë(
ASN1_OCTET_STRING
 *)\

608 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

609 
	#M_ASN1_OCTET_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

610 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

611 
	#M_ASN1_OCTET_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

612 
	#M_ASN1_OCTET_STRING_¥öt
(
a
,
b
Ë
	`ASN1_STRING_¥öt
◊,(
ASN1_STRING
 *)b)

	)

613 
	#M_i2d_ASN1_OCTET_STRING
(
a
,
µ
) \

614 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_OCTET_STRING
,\

615 
V_ASN1_UNIVERSAL
)

	)

617 
	#B_ASN1_TIME
 \

618 
B_ASN1_UTCTIME
 | \

619 
B_ASN1_GENERALIZEDTIME


	)

621 
	#B_ASN1_PRINTABLE
 \

622 
B_ASN1_NUMERICSTRING
| \

623 
B_ASN1_PRINTABLESTRING
| \

624 
B_ASN1_T61STRING
| \

625 
B_ASN1_IA5STRING
| \

626 
B_ASN1_BIT_STRING
| \

627 
B_ASN1_UNIVERSALSTRING
|\

628 
B_ASN1_BMPSTRING
|\

629 
B_ASN1_UTF8STRING
|\

630 
B_ASN1_SEQUENCE
|\

631 
B_ASN1_UNKNOWN


	)

633 
	#B_ASN1_DIRECTORYSTRING
 \

634 
B_ASN1_PRINTABLESTRING
| \

635 
B_ASN1_TELETEXSTRING
|\

636 
B_ASN1_BMPSTRING
|\

637 
B_ASN1_UNIVERSALSTRING
|\

638 
B_ASN1_UTF8STRING


	)

640 
	#B_ASN1_DISPLAYTEXT
 \

641 
B_ASN1_IA5STRING
| \

642 
B_ASN1_VISIBLESTRING
| \

643 
B_ASN1_BMPSTRING
|\

644 
B_ASN1_UTF8STRING


	)

646 
	#M_ASN1_PRINTABLE_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

647 
	#M_ASN1_PRINTABLE_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

648 
	#M_i2d_ASN1_PRINTABLE
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

649 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

650 
	#M_d2i_ASN1_PRINTABLE
(
a
,
µ
,
l
) \

651 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

652 
B_ASN1_PRINTABLE
)

	)

654 
	#M_DIRECTORYSTRING_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

655 
	#M_DIRECTORYSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

656 
	#M_i2d_DIRECTORYSTRING
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

657 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

658 
	#M_d2i_DIRECTORYSTRING
(
a
,
µ
,
l
) \

659 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

660 
B_ASN1_DIRECTORYSTRING
)

	)

662 
	#M_DISPLAYTEXT_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

663 
	#M_DISPLAYTEXT_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

664 
	#M_i2d_DISPLAYTEXT
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

665 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

666 
	#M_d2i_DISPLAYTEXT
(
a
,
µ
,
l
) \

667 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

668 
B_ASN1_DISPLAYTEXT
)

	)

670 
	#M_ASN1_PRINTABLESTRING_√w
(Ë(
ASN1_PRINTABLESTRING
 *)\

671 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

672 
	#M_ASN1_PRINTABLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

673 
	#M_i2d_ASN1_PRINTABLESTRING
(
a
,
µ
) \

674 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_PRINTABLESTRING
,\

675 
V_ASN1_UNIVERSAL
)

	)

676 
	#M_d2i_ASN1_PRINTABLESTRING
(
a
,
µ
,
l
) \

677 (
ASN1_PRINTABLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

678 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_PRINTABLESTRING
)

	)

680 
	#M_ASN1_T61STRING_√w
(Ë(
ASN1_T61STRING
 *)\

681 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

682 
	#M_ASN1_T61STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

683 
	#M_i2d_ASN1_T61STRING
(
a
,
µ
) \

684 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_T61STRING
,\

685 
V_ASN1_UNIVERSAL
)

	)

686 
	#M_d2i_ASN1_T61STRING
(
a
,
µ
,
l
) \

687 (
ASN1_T61STRING
 *)
d2i_ASN1_ty≥_byãs
\

688 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_T61STRING
)

	)

690 
	#M_ASN1_IA5STRING_√w
(Ë(
ASN1_IA5STRING
 *)\

691 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_IA5STRING
)

	)

692 
	#M_ASN1_IA5STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

693 
	#M_ASN1_IA5STRING_dup
(
a
) \

694 (
ASN1_IA5STRING
 *)
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

695 
	#M_i2d_ASN1_IA5STRING
(
a
,
µ
) \

696 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_IA5STRING
,\

697 
V_ASN1_UNIVERSAL
)

	)

698 
	#M_d2i_ASN1_IA5STRING
(
a
,
µ
,
l
) \

699 (
ASN1_IA5STRING
 *)
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
,\

700 
B_ASN1_IA5STRING
)

	)

702 
	#M_ASN1_UTCTIME_√w
(Ë(
ASN1_UTCTIME
 *)\

703 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

704 
	#M_ASN1_UTCTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

705 
	#M_ASN1_UTCTIME_dup
(
a
Ë(
ASN1_UTCTIME
 *)\

706 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

708 
	#M_ASN1_GENERALIZEDTIME_√w
(Ë(
ASN1_GENERALIZEDTIME
 *)\

709 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALIZEDTIME
)

	)

710 
	#M_ASN1_GENERALIZEDTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

711 
	#M_ASN1_GENERALIZEDTIME_dup
(
a
Ë(
ASN1_GENERALIZEDTIME
 *)
	`ASN1_STRING_dup
(\

712 (c⁄° 
ASN1_STRING
 *)
a
)

	)

714 
	#M_ASN1_TIME_√w
(Ë(
ASN1_TIME
 *)\

715 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

716 
	#M_ASN1_TIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

717 
	#M_ASN1_TIME_dup
(
a
Ë(
ASN1_TIME
 *)\

718 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

720 
	#M_ASN1_GENERALSTRING_√w
(Ë(
ASN1_GENERALSTRING
 *)\

721 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALSTRING
)

	)

722 
	#M_ASN1_GENERALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

723 
	#M_i2d_ASN1_GENERALSTRING
(
a
,
µ
) \

724 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_GENERALSTRING
,\

725 
V_ASN1_UNIVERSAL
)

	)

726 
	#M_d2i_ASN1_GENERALSTRING
(
a
,
µ
,
l
) \

727 (
ASN1_GENERALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

728 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_GENERALSTRING
)

	)

730 
	#M_ASN1_UNIVERSALSTRING_√w
(Ë(
ASN1_UNIVERSALSTRING
 *)\

731 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UNIVERSALSTRING
)

	)

732 
	#M_ASN1_UNIVERSALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

733 
	#M_i2d_ASN1_UNIVERSALSTRING
(
a
,
µ
) \

734 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UNIVERSALSTRING
,\

735 
V_ASN1_UNIVERSAL
)

	)

736 
	#M_d2i_ASN1_UNIVERSALSTRING
(
a
,
µ
,
l
) \

737 (
ASN1_UNIVERSALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

738 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UNIVERSALSTRING
)

	)

740 
	#M_ASN1_BMPSTRING_√w
(Ë(
ASN1_BMPSTRING
 *)\

741 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BMPSTRING
)

	)

742 
	#M_ASN1_BMPSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

743 
	#M_i2d_ASN1_BMPSTRING
(
a
,
µ
) \

744 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_BMPSTRING
,\

745 
V_ASN1_UNIVERSAL
)

	)

746 
	#M_d2i_ASN1_BMPSTRING
(
a
,
µ
,
l
) \

747 (
ASN1_BMPSTRING
 *)
d2i_ASN1_ty≥_byãs
\

748 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_BMPSTRING
)

	)

750 
	#M_ASN1_VISIBLESTRING_√w
(Ë(
ASN1_VISIBLESTRING
 *)\

751 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

752 
	#M_ASN1_VISIBLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

753 
	#M_i2d_ASN1_VISIBLESTRING
(
a
,
µ
) \

754 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_VISIBLESTRING
,\

755 
V_ASN1_UNIVERSAL
)

	)

756 
	#M_d2i_ASN1_VISIBLESTRING
(
a
,
µ
,
l
) \

757 (
ASN1_VISIBLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

758 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_VISIBLESTRING
)

	)

760 
	#M_ASN1_UTF8STRING_√w
(Ë(
ASN1_UTF8STRING
 *)\

761 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTF8STRING
)

	)

762 
	#M_ASN1_UTF8STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

763 
	#M_i2d_ASN1_UTF8STRING
(
a
,
µ
) \

764 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UTF8STRING
,\

765 
V_ASN1_UNIVERSAL
)

	)

766 
	#M_d2i_ASN1_UTF8STRING
(
a
,
µ
,
l
) \

767 (
ASN1_UTF8STRING
 *)
d2i_ASN1_ty≥_byãs
\

768 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UTF8STRING
)

	)

771 
	#IS_SEQUENCE
 0

	)

772 
	#IS_SET
 1

	)

774 
DECLARE_ASN1_FUNCTIONS_‚ame
(
ASN1_TYPE
, 
ASN1_ANY
, ASN1_TYPE)

776 
ASN1_TYPE_gë
(
ASN1_TYPE
 *
a
);

777 
ASN1_TYPE_£t
(
ASN1_TYPE
 *
a
, 
ty≥
, *
vÆue
);

778 
ASN1_TYPE_£t1
(
ASN1_TYPE
 *
a
, 
ty≥
, c⁄° *
vÆue
);

779 
ASN1_TYPE_cmp
(
ASN1_TYPE
 *
a
, ASN1_TYPE *
b
);

781 
ASN1_OBJECT
 * 
ASN1_OBJECT_√w
();

782 
ASN1_OBJECT_‰ì
(
ASN1_OBJECT
 *
a
);

783 
i2d_ASN1_OBJECT
(
ASN1_OBJECT
 *
a
,**
µ
);

784 
ASN1_OBJECT
 * 
c2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,c⁄° **
µ
,

785 
Àngth
);

786 
ASN1_OBJECT
 * 
d2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,c⁄° **
µ
,

787 
Àngth
);

789 
DECLARE_ASN1_ITEM
(
ASN1_OBJECT
)

791 
DECLARE_STACK_OF
(
ASN1_OBJECT
)

792 
DECLARE_ASN1_SET_OF
(
ASN1_OBJECT
)

794 
ASN1_STRING
 * 
ASN1_STRING_√w
();

795 
ASN1_STRING_‰ì
(
ASN1_STRING
 *
a
);

796 
ASN1_STRING_c›y
(
ASN1_STRING
 *
d°
, c⁄° ASN1_STRING *
°r
);

797 
ASN1_STRING
 * 
ASN1_STRING_dup
(c⁄° ASN1_STRING *
a
);

798 
ASN1_STRING
 * 
ASN1_STRING_ty≥_√w
(
ty≥
 );

799 
ASN1_STRING_cmp
(c⁄° 
ASN1_STRING
 *
a
, c⁄° ASN1_STRING *
b
);

802 
ASN1_STRING_£t
(
ASN1_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

803 
ASN1_STRING_£t0
(
ASN1_STRING
 *
°r
, *
d©a
, 
Àn
);

804 
ASN1_STRING_Àngth
(c⁄° 
ASN1_STRING
 *
x
);

805 
ASN1_STRING_Àngth_£t
(
ASN1_STRING
 *
x
, 
n
);

806 
ASN1_STRING_ty≥
(
ASN1_STRING
 *
x
);

807 * 
ASN1_STRING_d©a
(
ASN1_STRING
 *
x
);

809 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BIT_STRING
)

810 
i2c_ASN1_BIT_STRING
(
ASN1_BIT_STRING
 *
a
,**
µ
);

811 
ASN1_BIT_STRING
 *
c2i_ASN1_BIT_STRING
(ASN1_BIT_STRING **
a
,c⁄° **
µ
,

812 
Àngth
);

813 
ASN1_BIT_STRING_£t
(
ASN1_BIT_STRING
 *
a
, *
d
,

814 
Àngth
 );

815 
ASN1_BIT_STRING_£t_bô
(
ASN1_BIT_STRING
 *
a
, 
n
, 
vÆue
);

816 
ASN1_BIT_STRING_gë_bô
(
ASN1_BIT_STRING
 *
a
, 
n
);

817 
ASN1_BIT_STRING_check
(
ASN1_BIT_STRING
 *
a
,

818 *
Êags
, 
Êags_Àn
);

820 #i‚de‡
OPENSSL_NO_BIO


821 
ASN1_BIT_STRING_«me_¥öt
(
BIO
 *
out
, 
ASN1_BIT_STRING
 *
bs
,

822 
BIT_STRING_BITNAME
 *
tbl
, 
ödít
);

824 
ASN1_BIT_STRING_num_asc
(*
«me
, 
BIT_STRING_BITNAME
 *
tbl
);

825 
ASN1_BIT_STRING_£t_asc
(
ASN1_BIT_STRING
 *
bs
, *
«me
, 
vÆue
,

826 
BIT_STRING_BITNAME
 *
tbl
);

828 
i2d_ASN1_BOOLEAN
(
a
,**
µ
);

829 
d2i_ASN1_BOOLEAN
(*
a
,c⁄° **
µ
,
Àngth
);

831 
DECLARE_ASN1_FUNCTIONS
(
ASN1_INTEGER
)

832 
i2c_ASN1_INTEGER
(
ASN1_INTEGER
 *
a
,**
µ
);

833 
ASN1_INTEGER
 *
c2i_ASN1_INTEGER
(ASN1_INTEGER **
a
,c⁄° **
µ
,

834 
Àngth
);

835 
ASN1_INTEGER
 *
d2i_ASN1_UINTEGER
(ASN1_INTEGER **
a
,c⁄° **
µ
,

836 
Àngth
);

837 
ASN1_INTEGER
 * 
ASN1_INTEGER_dup
(c⁄° ASN1_INTEGER *
x
);

838 
ASN1_INTEGER_cmp
(c⁄° 
ASN1_INTEGER
 *
x
, c⁄° ASN1_INTEGER *
y
);

840 
DECLARE_ASN1_FUNCTIONS
(
ASN1_ENUMERATED
)

842 
ASN1_UTCTIME_check
(
ASN1_UTCTIME
 *
a
);

843 
ASN1_UTCTIME
 *
ASN1_UTCTIME_£t
(ASN1_UTCTIME *
s
,
time_t
 
t
);

844 
ASN1_UTCTIME
 *
ASN1_UTCTIME_adj
(ASN1_UTCTIME *
s
, 
time_t
 
t
,

845 
off£t_day
, 
off£t_£c
);

846 
ASN1_UTCTIME_£t_°rög
(
ASN1_UTCTIME
 *
s
, c⁄° *
°r
);

847 
ASN1_UTCTIME_cmp_time_t
(c⁄° 
ASN1_UTCTIME
 *
s
, 
time_t
 
t
);

849 
time_t
 
ASN1_UTCTIME_gë
(c⁄° 
ASN1_UTCTIME
 *
s
);

852 
ASN1_GENERALIZEDTIME_check
(
ASN1_GENERALIZEDTIME
 *
a
);

853 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_£t
(ASN1_GENERALIZEDTIME *
s
,
time_t
 
t
);

854 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_adj
(ASN1_GENERALIZEDTIME *
s
,

855 
time_t
 
t
, 
off£t_day
, 
off£t_£c
);

856 
ASN1_GENERALIZEDTIME_£t_°rög
(
ASN1_GENERALIZEDTIME
 *
s
, c⁄° *
°r
);

858 
DECLARE_ASN1_FUNCTIONS
(
ASN1_OCTET_STRING
)

859 
ASN1_OCTET_STRING
 * 
ASN1_OCTET_STRING_dup
(c⁄° ASN1_OCTET_STRING *
a
);

860 
ASN1_OCTET_STRING_cmp
(c⁄° 
ASN1_OCTET_STRING
 *
a
, c⁄° ASN1_OCTET_STRING *
b
);

861 
ASN1_OCTET_STRING_£t
(
ASN1_OCTET_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

863 
DECLARE_ASN1_FUNCTIONS
(
ASN1_VISIBLESTRING
)

864 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UNIVERSALSTRING
)

865 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTF8STRING
)

866 
DECLARE_ASN1_FUNCTIONS
(
ASN1_NULL
)

867 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BMPSTRING
)

869 
UTF8_gëc
(c⁄° *
°r
, 
Àn
, *
vÆ
);

870 
UTF8_putc
(*
°r
, 
Àn
, 
vÆue
);

872 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
ASN1_PRINTABLE
)

874 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DIRECTORYSTRING
)

875 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DISPLAYTEXT
)

876 
DECLARE_ASN1_FUNCTIONS
(
ASN1_PRINTABLESTRING
)

877 
DECLARE_ASN1_FUNCTIONS
(
ASN1_T61STRING
)

878 
DECLARE_ASN1_FUNCTIONS
(
ASN1_IA5STRING
)

879 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALSTRING
)

880 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTCTIME
)

881 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALIZEDTIME
)

882 
DECLARE_ASN1_FUNCTIONS
(
ASN1_TIME
)

884 
DECLARE_ASN1_ITEM
(
ASN1_OCTET_STRING_NDEF
)

886 
ASN1_TIME
 *
ASN1_TIME_£t
(ASN1_TIME *
s
,
time_t
 
t
);

887 
ASN1_TIME
 *
ASN1_TIME_adj
(ASN1_TIME *
s
,
time_t
 
t
,

888 
off£t_day
, 
off£t_£c
);

889 
ASN1_TIME_check
(
ASN1_TIME
 *
t
);

890 
ASN1_GENERALIZEDTIME
 *
ASN1_TIME_to_gíîÆizedtime
(
ASN1_TIME
 *
t
, ASN1_GENERALIZEDTIME **
out
);

891 
ASN1_TIME_£t_°rög
(
ASN1_TIME
 *
s
, c⁄° *
°r
);

893 
i2d_ASN1_SET
(
STACK_OF
(
OPENSSL_BLOCK
Ë*
a
, **
µ
,

894 
i2d_of_void
 *
i2d
, 
ex_èg
, 
ex_˛ass
,

895 
is_£t
);

896 
STACK_OF
(
OPENSSL_BLOCK
Ë*
d2i_ASN1_SET
(STACK_OF(OPENSSL_BLOCKË**
a
,

897 c⁄° **
µ
,

898 
Àngth
, 
d2i_of_void
 *
d2i
,

899 (*
‰ì_func
)(
OPENSSL_BLOCK
), 
ex_èg
,

900 
ex_˛ass
);

902 #i‚de‡
OPENSSL_NO_BIO


903 
i2a_ASN1_INTEGER
(
BIO
 *
bp
, 
ASN1_INTEGER
 *
a
);

904 
a2i_ASN1_INTEGER
(
BIO
 *
bp
,
ASN1_INTEGER
 *
bs
,*
buf
,
size
);

905 
i2a_ASN1_ENUMERATED
(
BIO
 *
bp
, 
ASN1_ENUMERATED
 *
a
);

906 
a2i_ASN1_ENUMERATED
(
BIO
 *
bp
,
ASN1_ENUMERATED
 *
bs
,*
buf
,
size
);

907 
i2a_ASN1_OBJECT
(
BIO
 *
bp
,
ASN1_OBJECT
 *
a
);

908 
a2i_ASN1_STRING
(
BIO
 *
bp
,
ASN1_STRING
 *
bs
,*
buf
,
size
);

909 
i2a_ASN1_STRING
(
BIO
 *
bp
, 
ASN1_STRING
 *
a
, 
ty≥
);

911 
i2t_ASN1_OBJECT
(*
buf
,
buf_Àn
,
ASN1_OBJECT
 *
a
);

913 
a2d_ASN1_OBJECT
(*
out
,
ﬁí
, c⁄° *
buf
, 
num
);

914 
ASN1_OBJECT
 *
ASN1_OBJECT_¸óã
(
nid
, *
d©a
,
Àn
,

915 c⁄° *
¢
, c⁄° *
 
);

917 
ASN1_INTEGER_£t
(
ASN1_INTEGER
 *
a
, 
v
);

918 
ASN1_INTEGER_gë
(c⁄° 
ASN1_INTEGER
 *
a
);

919 
ASN1_INTEGER
 *
BN_to_ASN1_INTEGER
(c⁄° 
BIGNUM
 *
bn
, ASN1_INTEGER *
ai
);

920 
BIGNUM
 *
ASN1_INTEGER_to_BN
(c⁄° 
ASN1_INTEGER
 *
ai
,BIGNUM *
bn
);

922 
ASN1_ENUMERATED_£t
(
ASN1_ENUMERATED
 *
a
, 
v
);

923 
ASN1_ENUMERATED_gë
(
ASN1_ENUMERATED
 *
a
);

924 
ASN1_ENUMERATED
 *
BN_to_ASN1_ENUMERATED
(
BIGNUM
 *
bn
, ASN1_ENUMERATED *
ai
);

925 
BIGNUM
 *
ASN1_ENUMERATED_to_BN
(
ASN1_ENUMERATED
 *
ai
,BIGNUM *
bn
);

929 
ASN1_PRINTABLE_ty≥
(c⁄° *
s
, 
max
);

931 
i2d_ASN1_byãs
(
ASN1_STRING
 *
a
, **
µ
, 
èg
, 
x˛ass
);

932 
ASN1_STRING
 *
d2i_ASN1_byãs
(ASN1_STRING **
a
, c⁄° **
µ
,

933 
Àngth
, 
Pèg
, 
P˛ass
);

934 
ASN1_èg2bô
(
èg
);

936 
ASN1_STRING
 *
d2i_ASN1_ty≥_byãs
(ASN1_STRING **
a
,c⁄° **
µ
,

937 
Àngth
,
ty≥
);

940 
a¢1_Föish
(
ASN1_CTX
 *
c
);

941 
a¢1_c⁄°_Föish
(
ASN1_c⁄°_CTX
 *
c
);

944 
ASN1_gë_obje˘
(c⁄° **
µ
, *
∂ígth
, *
±ag
,

945 *
p˛ass
, 
omax
);

946 
ASN1_check_öföôe_íd
(**
p
,
Àn
);

947 
ASN1_c⁄°_check_öföôe_íd
(c⁄° **
p
,
Àn
);

948 
ASN1_put_obje˘
(**
µ
, 
c⁄°ru˘ed
, 
Àngth
,

949 
èg
, 
x˛ass
);

950 
ASN1_put_eoc
(**
µ
);

951 
ASN1_obje˘_size
(
c⁄°ru˘ed
, 
Àngth
, 
èg
);

954 *
ASN1_dup
(
i2d_of_void
 *
i2d
, 
d2i_of_void
 *
d2i
, *
x
);

956 
	#ASN1_dup_of
(
ty≥
,
i2d
,
d2i
,
x
) \

957 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
—y≥, 
i2d
), \

958 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

959 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

961 
	#ASN1_dup_of_c⁄°
(
ty≥
,
i2d
,
d2i
,
x
) \

962 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
(c⁄°Åy≥, 
i2d
), \

963 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

964 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

966 *
ASN1_ôem_dup
(c⁄° 
ASN1_ITEM
 *
ô
, *
x
);

970 
	#M_ASN1_√w_of
(
ty≥
Ë—y≥ *)
	`ASN1_ôem_√w
(
	`ASN1_ITEM_Ωå
—y≥))

	)

971 
	#M_ASN1_‰ì_of
(
x
, 
ty≥
) \

972 
	`ASN1_ôem_‰ì
(
	`CHECKED_PTR_OF
(
ty≥
, 
x
), 
	`ASN1_ITEM_Ωå
—y≥))

	)

974 #i‚de‡
OPENSSL_NO_FP_API


975 *
ASN1_d2i_Â
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
FILE
 *
ö
, **
x
);

977 
	#ASN1_d2i_Â_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

978 ((
ty≥
*)
	`ASN1_d2i_Â
(
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

979 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

980 
ö
, \

981 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

983 *
ASN1_ôem_d2i_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
ö
, *
x
);

984 
ASN1_i2d_Â
(
i2d_of_void
 *
i2d
,
FILE
 *
out
,*
x
);

986 
	#ASN1_i2d_Â_of
(
ty≥
,
i2d
,
out
,
x
) \

987 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

988 
out
, \

989 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

991 
	#ASN1_i2d_Â_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

992 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

993 
out
, \

994 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

996 
ASN1_ôem_i2d_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
out
, *
x
);

997 
ASN1_STRING_¥öt_ex_Â
(
FILE
 *
Â
, 
ASN1_STRING
 *
°r
, 
Êags
);

1000 
ASN1_STRING_to_UTF8
(**
out
, 
ASN1_STRING
 *
ö
);

1002 #i‚de‡
OPENSSL_NO_BIO


1003 *
ASN1_d2i_bio
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
BIO
 *
ö
, **
x
);

1005 
	#ASN1_d2i_bio_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

1006 ((
ty≥
*)
	`ASN1_d2i_bio
–
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

1007 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

1008 
ö
, \

1009 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

1011 *
ASN1_ôem_d2i_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
ö
, *
x
);

1012 
ASN1_i2d_bio
(
i2d_of_void
 *
i2d
,
BIO
 *
out
, *
x
);

1014 
	#ASN1_i2d_bio_of
(
ty≥
,
i2d
,
out
,
x
) \

1015 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1016 
out
, \

1017 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

1019 
	#ASN1_i2d_bio_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

1020 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

1021 
out
, \

1022 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

1024 
ASN1_ôem_i2d_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
out
, *
x
);

1025 
ASN1_UTCTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_UTCTIME
 *
a
);

1026 
ASN1_GENERALIZEDTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

1027 
ASN1_TIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_TIME
 *
a
);

1028 
ASN1_STRING_¥öt
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
v
);

1029 
ASN1_STRING_¥öt_ex
(
BIO
 *
out
, 
ASN1_STRING
 *
°r
, 
Êags
);

1030 
ASN1_bn_¥öt
(
BIO
 *
bp
, c⁄° *
numbî
, c⁄° 
BIGNUM
 *
num
,

1031 *
buf
, 
off
);

1032 
ASN1_∑r£
(
BIO
 *
bp
,c⁄° *
µ
,
Àn
,
ödít
);

1033 
ASN1_∑r£_dump
(
BIO
 *
bp
,c⁄° *
µ
,
Àn
,
ödít
,
dump
);

1035 c⁄° *
ASN1_èg2°r
(
èg
);

1039 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_X509
)

1041 
ASN1_UNIVERSALSTRING_to_°rög
(
ASN1_UNIVERSALSTRING
 *
s
);

1043 
ASN1_TYPE_£t_o˘ë°rög
(
ASN1_TYPE
 *
a
,

1044 *
d©a
, 
Àn
);

1045 
ASN1_TYPE_gë_o˘ë°rög
(
ASN1_TYPE
 *
a
,

1046 *
d©a
, 
max_Àn
);

1047 
ASN1_TYPE_£t_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
, 
num
,

1048 *
d©a
, 
Àn
);

1049 
ASN1_TYPE_gë_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
,*
num
,

1050 *
d©a
, 
max_Àn
);

1052 
STACK_OF
(
OPENSSL_BLOCK
Ë*
ASN1_£q_u≈ack
(c⁄° *
buf
, 
Àn
,

1053 
d2i_of_void
 *
d2i
, (*
‰ì_func
)(
OPENSSL_BLOCK
));

1054 *
ASN1_£q_∑ck
(
STACK_OF
(
OPENSSL_BLOCK
Ë*
ß„s
, 
i2d_of_void
 *
i2d
,

1055 **
buf
, *
Àn
 );

1056 *
ASN1_u≈ack_°rög
(
ASN1_STRING
 *
o˘
, 
d2i_of_void
 *
d2i
);

1057 *
ASN1_ôem_u≈ack
(
ASN1_STRING
 *
o˘
, c⁄° 
ASN1_ITEM
 *
ô
);

1058 
ASN1_STRING
 *
ASN1_∑ck_°rög
(*
obj
, 
i2d_of_void
 *
i2d
,

1059 
ASN1_OCTET_STRING
 **
o˘
);

1061 
	#ASN1_∑ck_°rög_of
(
ty≥
,
obj
,
i2d
,
o˘
) \

1062 (
	`ASN1_∑ck_°rög
(
	`CHECKED_PTR_OF
(
ty≥
, 
obj
), \

1063 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1064 
o˘
))

	)

1066 
ASN1_STRING
 *
ASN1_ôem_∑ck
(*
obj
, c⁄° 
ASN1_ITEM
 *
ô
, 
ASN1_OCTET_STRING
 **
o˘
);

1068 
ASN1_STRING_£t_deÁu…_mask
(
mask
);

1069 
ASN1_STRING_£t_deÁu…_mask_asc
(c⁄° *
p
);

1070 
ASN1_STRING_gë_deÁu…_mask
();

1071 
ASN1_mb°rög_c›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1072 
öf‹m
, 
mask
);

1073 
ASN1_mb°rög_nc›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1074 
öf‹m
, 
mask
,

1075 
mösize
, 
maxsize
);

1077 
ASN1_STRING
 *
ASN1_STRING_£t_by_NID
(ASN1_STRING **
out
,

1078 c⁄° *
ö
, 
öÀn
, 
öf‹m
, 
nid
);

1079 
ASN1_STRING_TABLE
 *
ASN1_STRING_TABLE_gë
(
nid
);

1080 
ASN1_STRING_TABLE_add
(, , , , );

1081 
ASN1_STRING_TABLE_˛ónup
();

1086 
ASN1_VALUE
 *
ASN1_ôem_√w
(c⁄° 
ASN1_ITEM
 *
ô
);

1087 
ASN1_ôem_‰ì
(
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1088 
ASN1_VALUE
 * 
ASN1_ôem_d2i
(ASN1_VALUE **
vÆ
, c⁄° **
ö
, 
Àn
, c⁄° 
ASN1_ITEM
 *
ô
);

1089 
ASN1_ôem_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1090 
ASN1_ôem_ndef_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1092 
ASN1_add_oid_moduÀ
();

1094 
ASN1_TYPE
 *
ASN1_gíî©e_nc⁄f
(*
°r
, 
CONF
 *
nc⁄f
);

1095 
ASN1_TYPE
 *
ASN1_gíî©e_v3
(*
°r
, 
X509V3_CTX
 *
˙f
);

1100 
	#ASN1_PCTX_FLAGS_SHOW_ABSENT
 0x001

	)

1102 
	#ASN1_PCTX_FLAGS_SHOW_SEQUENCE
 0x002

	)

1104 
	#ASN1_PCTX_FLAGS_SHOW_SSOF
 0x004

	)

1106 
	#ASN1_PCTX_FLAGS_SHOW_TYPE
 0x008

	)

1108 
	#ASN1_PCTX_FLAGS_NO_ANY_TYPE
 0x010

	)

1110 
	#ASN1_PCTX_FLAGS_NO_MSTRING_TYPE
 0x020

	)

1112 
	#ASN1_PCTX_FLAGS_NO_FIELD_NAME
 0x040

	)

1114 
	#ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME
 0x080

	)

1116 
	#ASN1_PCTX_FLAGS_NO_STRUCT_NAME
 0x100

	)

1118 
ASN1_ôem_¥öt
(
BIO
 *
out
, 
ASN1_VALUE
 *
iÊd
, 
ödít
,

1119 c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_PCTX
 *
p˘x
);

1120 
ASN1_PCTX
 *
ASN1_PCTX_√w
();

1121 
ASN1_PCTX_‰ì
(
ASN1_PCTX
 *
p
);

1122 
ASN1_PCTX_gë_Êags
(
ASN1_PCTX
 *
p
);

1123 
ASN1_PCTX_£t_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1124 
ASN1_PCTX_gë_nm_Êags
(
ASN1_PCTX
 *
p
);

1125 
ASN1_PCTX_£t_nm_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1126 
ASN1_PCTX_gë_˚π_Êags
(
ASN1_PCTX
 *
p
);

1127 
ASN1_PCTX_£t_˚π_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1128 
ASN1_PCTX_gë_oid_Êags
(
ASN1_PCTX
 *
p
);

1129 
ASN1_PCTX_£t_oid_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1130 
ASN1_PCTX_gë_°r_Êags
(
ASN1_PCTX
 *
p
);

1131 
ASN1_PCTX_£t_°r_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1133 
BIO_METHOD
 *
BIO_f_a¢1
();

1135 
BIO
 *
BIO_√w_NDEF
(BIO *
out
, 
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1137 
i2d_ASN1_bio_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1138 c⁄° 
ASN1_ITEM
 *
ô
);

1139 
PEM_wrôe_bio_ASN1_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1140 c⁄° *
hdr
,

1141 c⁄° 
ASN1_ITEM
 *
ô
);

1142 
SMIME_wrôe_ASN1
(
BIO
 *
bio
, 
ASN1_VALUE
 *
vÆ
, BIO *
d©a
, 
Êags
,

1143 
˘y≥_nid
, 
ec⁄t_nid
,

1144 
STACK_OF
(
X509_ALGOR
Ë*
mdÆgs
,

1145 c⁄° 
ASN1_ITEM
 *
ô
);

1146 
ASN1_VALUE
 *
SMIME_ªad_ASN1
(
BIO
 *
bio
, BIO **
bc⁄t
, c⁄° 
ASN1_ITEM
 *
ô
);

1147 
SMIME_¸lf_c›y
(
BIO
 *
ö
, BIO *
out
, 
Êags
);

1148 
SMIME_ãxt
(
BIO
 *
ö
, BIO *
out
);

1154 
ERR_lﬂd_ASN1_°rögs
();

1159 
	#ASN1_F_A2D_ASN1_OBJECT
 100

	)

1160 
	#ASN1_F_A2I_ASN1_ENUMERATED
 101

	)

1161 
	#ASN1_F_A2I_ASN1_INTEGER
 102

	)

1162 
	#ASN1_F_A2I_ASN1_STRING
 103

	)

1163 
	#ASN1_F_APPEND_EXP
 176

	)

1164 
	#ASN1_F_ASN1_BIT_STRING_SET_BIT
 183

	)

1165 
	#ASN1_F_ASN1_CB
 177

	)

1166 
	#ASN1_F_ASN1_CHECK_TLEN
 104

	)

1167 
	#ASN1_F_ASN1_COLLATE_PRIMITIVE
 105

	)

1168 
	#ASN1_F_ASN1_COLLECT
 106

	)

1169 
	#ASN1_F_ASN1_D2I_EX_PRIMITIVE
 108

	)

1170 
	#ASN1_F_ASN1_D2I_FP
 109

	)

1171 
	#ASN1_F_ASN1_D2I_READ_BIO
 107

	)

1172 
	#ASN1_F_ASN1_DIGEST
 184

	)

1173 
	#ASN1_F_ASN1_DO_ADB
 110

	)

1174 
	#ASN1_F_ASN1_DUP
 111

	)

1175 
	#ASN1_F_ASN1_ENUMERATED_SET
 112

	)

1176 
	#ASN1_F_ASN1_ENUMERATED_TO_BN
 113

	)

1177 
	#ASN1_F_ASN1_EX_C2I
 204

	)

1178 
	#ASN1_F_ASN1_FIND_END
 190

	)

1179 
	#ASN1_F_ASN1_GENERALIZEDTIME_ADJ
 216

	)

1180 
	#ASN1_F_ASN1_GENERALIZEDTIME_SET
 185

	)

1181 
	#ASN1_F_ASN1_GENERATE_V3
 178

	)

1182 
	#ASN1_F_ASN1_GET_OBJECT
 114

	)

1183 
	#ASN1_F_ASN1_HEADER_NEW
 115

	)

1184 
	#ASN1_F_ASN1_I2D_BIO
 116

	)

1185 
	#ASN1_F_ASN1_I2D_FP
 117

	)

1186 
	#ASN1_F_ASN1_INTEGER_SET
 118

	)

1187 
	#ASN1_F_ASN1_INTEGER_TO_BN
 119

	)

1188 
	#ASN1_F_ASN1_ITEM_D2I_FP
 206

	)

1189 
	#ASN1_F_ASN1_ITEM_DUP
 191

	)

1190 
	#ASN1_F_ASN1_ITEM_EX_COMBINE_NEW
 121

	)

1191 
	#ASN1_F_ASN1_ITEM_EX_D2I
 120

	)

1192 
	#ASN1_F_ASN1_ITEM_I2D_BIO
 192

	)

1193 
	#ASN1_F_ASN1_ITEM_I2D_FP
 193

	)

1194 
	#ASN1_F_ASN1_ITEM_PACK
 198

	)

1195 
	#ASN1_F_ASN1_ITEM_SIGN
 195

	)

1196 
	#ASN1_F_ASN1_ITEM_SIGN_CTX
 220

	)

1197 
	#ASN1_F_ASN1_ITEM_UNPACK
 199

	)

1198 
	#ASN1_F_ASN1_ITEM_VERIFY
 197

	)

1199 
	#ASN1_F_ASN1_MBSTRING_NCOPY
 122

	)

1200 
	#ASN1_F_ASN1_OBJECT_NEW
 123

	)

1201 
	#ASN1_F_ASN1_OUTPUT_DATA
 214

	)

1202 
	#ASN1_F_ASN1_PACK_STRING
 124

	)

1203 
	#ASN1_F_ASN1_PCTX_NEW
 205

	)

1204 
	#ASN1_F_ASN1_PKCS5_PBE_SET
 125

	)

1205 
	#ASN1_F_ASN1_SEQ_PACK
 126

	)

1206 
	#ASN1_F_ASN1_SEQ_UNPACK
 127

	)

1207 
	#ASN1_F_ASN1_SIGN
 128

	)

1208 
	#ASN1_F_ASN1_STR2TYPE
 179

	)

1209 
	#ASN1_F_ASN1_STRING_SET
 186

	)

1210 
	#ASN1_F_ASN1_STRING_TABLE_ADD
 129

	)

1211 
	#ASN1_F_ASN1_STRING_TYPE_NEW
 130

	)

1212 
	#ASN1_F_ASN1_TEMPLATE_EX_D2I
 132

	)

1213 
	#ASN1_F_ASN1_TEMPLATE_NEW
 133

	)

1214 
	#ASN1_F_ASN1_TEMPLATE_NOEXP_D2I
 131

	)

1215 
	#ASN1_F_ASN1_TIME_ADJ
 217

	)

1216 
	#ASN1_F_ASN1_TIME_SET
 175

	)

1217 
	#ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING
 134

	)

1218 
	#ASN1_F_ASN1_TYPE_GET_OCTETSTRING
 135

	)

1219 
	#ASN1_F_ASN1_UNPACK_STRING
 136

	)

1220 
	#ASN1_F_ASN1_UTCTIME_ADJ
 218

	)

1221 
	#ASN1_F_ASN1_UTCTIME_SET
 187

	)

1222 
	#ASN1_F_ASN1_VERIFY
 137

	)

1223 
	#ASN1_F_B64_READ_ASN1
 209

	)

1224 
	#ASN1_F_B64_WRITE_ASN1
 210

	)

1225 
	#ASN1_F_BIO_NEW_NDEF
 208

	)

1226 
	#ASN1_F_BITSTR_CB
 180

	)

1227 
	#ASN1_F_BN_TO_ASN1_ENUMERATED
 138

	)

1228 
	#ASN1_F_BN_TO_ASN1_INTEGER
 139

	)

1229 
	#ASN1_F_C2I_ASN1_BIT_STRING
 189

	)

1230 
	#ASN1_F_C2I_ASN1_INTEGER
 194

	)

1231 
	#ASN1_F_C2I_ASN1_OBJECT
 196

	)

1232 
	#ASN1_F_COLLECT_DATA
 140

	)

1233 
	#ASN1_F_D2I_ASN1_BIT_STRING
 141

	)

1234 
	#ASN1_F_D2I_ASN1_BOOLEAN
 142

	)

1235 
	#ASN1_F_D2I_ASN1_BYTES
 143

	)

1236 
	#ASN1_F_D2I_ASN1_GENERALIZEDTIME
 144

	)

1237 
	#ASN1_F_D2I_ASN1_HEADER
 145

	)

1238 
	#ASN1_F_D2I_ASN1_INTEGER
 146

	)

1239 
	#ASN1_F_D2I_ASN1_OBJECT
 147

	)

1240 
	#ASN1_F_D2I_ASN1_SET
 148

	)

1241 
	#ASN1_F_D2I_ASN1_TYPE_BYTES
 149

	)

1242 
	#ASN1_F_D2I_ASN1_UINTEGER
 150

	)

1243 
	#ASN1_F_D2I_ASN1_UTCTIME
 151

	)

1244 
	#ASN1_F_D2I_AUTOPRIVATEKEY
 207

	)

1245 
	#ASN1_F_D2I_NETSCAPE_RSA
 152

	)

1246 
	#ASN1_F_D2I_NETSCAPE_RSA_2
 153

	)

1247 
	#ASN1_F_D2I_PRIVATEKEY
 154

	)

1248 
	#ASN1_F_D2I_PUBLICKEY
 155

	)

1249 
	#ASN1_F_D2I_RSA_NET
 200

	)

1250 
	#ASN1_F_D2I_RSA_NET_2
 201

	)

1251 
	#ASN1_F_D2I_X509
 156

	)

1252 
	#ASN1_F_D2I_X509_CINF
 157

	)

1253 
	#ASN1_F_D2I_X509_PKEY
 159

	)

1254 
	#ASN1_F_I2D_ASN1_BIO_STREAM
 211

	)

1255 
	#ASN1_F_I2D_ASN1_SET
 188

	)

1256 
	#ASN1_F_I2D_ASN1_TIME
 160

	)

1257 
	#ASN1_F_I2D_DSA_PUBKEY
 161

	)

1258 
	#ASN1_F_I2D_EC_PUBKEY
 181

	)

1259 
	#ASN1_F_I2D_PRIVATEKEY
 163

	)

1260 
	#ASN1_F_I2D_PUBLICKEY
 164

	)

1261 
	#ASN1_F_I2D_RSA_NET
 162

	)

1262 
	#ASN1_F_I2D_RSA_PUBKEY
 165

	)

1263 
	#ASN1_F_LONG_C2I
 166

	)

1264 
	#ASN1_F_OID_MODULE_INIT
 174

	)

1265 
	#ASN1_F_PARSE_TAGGING
 182

	)

1266 
	#ASN1_F_PKCS5_PBE2_SET_IV
 167

	)

1267 
	#ASN1_F_PKCS5_PBE_SET
 202

	)

1268 
	#ASN1_F_PKCS5_PBE_SET0_ALGOR
 215

	)

1269 
	#ASN1_F_PKCS5_PBKDF2_SET
 219

	)

1270 
	#ASN1_F_SMIME_READ_ASN1
 212

	)

1271 
	#ASN1_F_SMIME_TEXT
 213

	)

1272 
	#ASN1_F_X509_CINF_NEW
 168

	)

1273 
	#ASN1_F_X509_CRL_ADD0_REVOKED
 169

	)

1274 
	#ASN1_F_X509_INFO_NEW
 170

	)

1275 
	#ASN1_F_X509_NAME_ENCODE
 203

	)

1276 
	#ASN1_F_X509_NAME_EX_D2I
 158

	)

1277 
	#ASN1_F_X509_NAME_EX_NEW
 171

	)

1278 
	#ASN1_F_X509_NEW
 172

	)

1279 
	#ASN1_F_X509_PKEY_NEW
 173

	)

1282 
	#ASN1_R_ADDING_OBJECT
 171

	)

1283 
	#ASN1_R_ASN1_PARSE_ERROR
 203

	)

1284 
	#ASN1_R_ASN1_SIG_PARSE_ERROR
 204

	)

1285 
	#ASN1_R_AUX_ERROR
 100

	)

1286 
	#ASN1_R_BAD_CLASS
 101

	)

1287 
	#ASN1_R_BAD_OBJECT_HEADER
 102

	)

1288 
	#ASN1_R_BAD_PASSWORD_READ
 103

	)

1289 
	#ASN1_R_BAD_TAG
 104

	)

1290 
	#ASN1_R_BMPSTRING_IS_WRONG_LENGTH
 214

	)

1291 
	#ASN1_R_BN_LIB
 105

	)

1292 
	#ASN1_R_BOOLEAN_IS_WRONG_LENGTH
 106

	)

1293 
	#ASN1_R_BUFFER_TOO_SMALL
 107

	)

1294 
	#ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 108

	)

1295 
	#ASN1_R_CONTEXT_NOT_INITIALISED
 217

	)

1296 
	#ASN1_R_DATA_IS_WRONG
 109

	)

1297 
	#ASN1_R_DECODE_ERROR
 110

	)

1298 
	#ASN1_R_DECODING_ERROR
 111

	)

1299 
	#ASN1_R_DEPTH_EXCEEDED
 174

	)

1300 
	#ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED
 198

	)

1301 
	#ASN1_R_ENCODE_ERROR
 112

	)

1302 
	#ASN1_R_ERROR_GETTING_TIME
 173

	)

1303 
	#ASN1_R_ERROR_LOADING_SECTION
 172

	)

1304 
	#ASN1_R_ERROR_PARSING_SET_ELEMENT
 113

	)

1305 
	#ASN1_R_ERROR_SETTING_CIPHER_PARAMS
 114

	)

1306 
	#ASN1_R_EXPECTING_AN_INTEGER
 115

	)

1307 
	#ASN1_R_EXPECTING_AN_OBJECT
 116

	)

1308 
	#ASN1_R_EXPECTING_A_BOOLEAN
 117

	)

1309 
	#ASN1_R_EXPECTING_A_TIME
 118

	)

1310 
	#ASN1_R_EXPLICIT_LENGTH_MISMATCH
 119

	)

1311 
	#ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED
 120

	)

1312 
	#ASN1_R_FIELD_MISSING
 121

	)

1313 
	#ASN1_R_FIRST_NUM_TOO_LARGE
 122

	)

1314 
	#ASN1_R_HEADER_TOO_LONG
 123

	)

1315 
	#ASN1_R_ILLEGAL_BITSTRING_FORMAT
 175

	)

1316 
	#ASN1_R_ILLEGAL_BOOLEAN
 176

	)

1317 
	#ASN1_R_ILLEGAL_CHARACTERS
 124

	)

1318 
	#ASN1_R_ILLEGAL_FORMAT
 177

	)

1319 
	#ASN1_R_ILLEGAL_HEX
 178

	)

1320 
	#ASN1_R_ILLEGAL_IMPLICIT_TAG
 179

	)

1321 
	#ASN1_R_ILLEGAL_INTEGER
 180

	)

1322 
	#ASN1_R_ILLEGAL_NESTED_TAGGING
 181

	)

1323 
	#ASN1_R_ILLEGAL_NULL
 125

	)

1324 
	#ASN1_R_ILLEGAL_NULL_VALUE
 182

	)

1325 
	#ASN1_R_ILLEGAL_OBJECT
 183

	)

1326 
	#ASN1_R_ILLEGAL_OPTIONAL_ANY
 126

	)

1327 
	#ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE
 170

	)

1328 
	#ASN1_R_ILLEGAL_TAGGED_ANY
 127

	)

1329 
	#ASN1_R_ILLEGAL_TIME_VALUE
 184

	)

1330 
	#ASN1_R_INTEGER_NOT_ASCII_FORMAT
 185

	)

1331 
	#ASN1_R_INTEGER_TOO_LARGE_FOR_LONG
 128

	)

1332 
	#ASN1_R_INVALID_BMPSTRING_LENGTH
 129

	)

1333 
	#ASN1_R_INVALID_DIGIT
 130

	)

1334 
	#ASN1_R_INVALID_MIME_TYPE
 205

	)

1335 
	#ASN1_R_INVALID_MODIFIER
 186

	)

1336 
	#ASN1_R_INVALID_NUMBER
 187

	)

1337 
	#ASN1_R_INVALID_OBJECT_ENCODING
 216

	)

1338 
	#ASN1_R_INVALID_SEPARATOR
 131

	)

1339 
	#ASN1_R_INVALID_TIME_FORMAT
 132

	)

1340 
	#ASN1_R_INVALID_UNIVERSALSTRING_LENGTH
 133

	)

1341 
	#ASN1_R_INVALID_UTF8STRING
 134

	)

1342 
	#ASN1_R_IV_TOO_LARGE
 135

	)

1343 
	#ASN1_R_LENGTH_ERROR
 136

	)

1344 
	#ASN1_R_LIST_ERROR
 188

	)

1345 
	#ASN1_R_MIME_NO_CONTENT_TYPE
 206

	)

1346 
	#ASN1_R_MIME_PARSE_ERROR
 207

	)

1347 
	#ASN1_R_MIME_SIG_PARSE_ERROR
 208

	)

1348 
	#ASN1_R_MISSING_EOC
 137

	)

1349 
	#ASN1_R_MISSING_SECOND_NUMBER
 138

	)

1350 
	#ASN1_R_MISSING_VALUE
 189

	)

1351 
	#ASN1_R_MSTRING_NOT_UNIVERSAL
 139

	)

1352 
	#ASN1_R_MSTRING_WRONG_TAG
 140

	)

1353 
	#ASN1_R_NESTED_ASN1_STRING
 197

	)

1354 
	#ASN1_R_NON_HEX_CHARACTERS
 141

	)

1355 
	#ASN1_R_NOT_ASCII_FORMAT
 190

	)

1356 
	#ASN1_R_NOT_ENOUGH_DATA
 142

	)

1357 
	#ASN1_R_NO_CONTENT_TYPE
 209

	)

1358 
	#ASN1_R_NO_DEFAULT_DIGEST
 201

	)

1359 
	#ASN1_R_NO_MATCHING_CHOICE_TYPE
 143

	)

1360 
	#ASN1_R_NO_MULTIPART_BODY_FAILURE
 210

	)

1361 
	#ASN1_R_NO_MULTIPART_BOUNDARY
 211

	)

1362 
	#ASN1_R_NO_SIG_CONTENT_TYPE
 212

	)

1363 
	#ASN1_R_NULL_IS_WRONG_LENGTH
 144

	)

1364 
	#ASN1_R_OBJECT_NOT_ASCII_FORMAT
 191

	)

1365 
	#ASN1_R_ODD_NUMBER_OF_CHARS
 145

	)

1366 
	#ASN1_R_PRIVATE_KEY_HEADER_MISSING
 146

	)

1367 
	#ASN1_R_SECOND_NUMBER_TOO_LARGE
 147

	)

1368 
	#ASN1_R_SEQUENCE_LENGTH_MISMATCH
 148

	)

1369 
	#ASN1_R_SEQUENCE_NOT_CONSTRUCTED
 149

	)

1370 
	#ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG
 192

	)

1371 
	#ASN1_R_SHORT_LINE
 150

	)

1372 
	#ASN1_R_SIG_INVALID_MIME_TYPE
 213

	)

1373 
	#ASN1_R_STREAMING_NOT_SUPPORTED
 202

	)

1374 
	#ASN1_R_STRING_TOO_LONG
 151

	)

1375 
	#ASN1_R_STRING_TOO_SHORT
 152

	)

1376 
	#ASN1_R_TAG_VALUE_TOO_HIGH
 153

	)

1377 
	#ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 154

	)

1378 
	#ASN1_R_TIME_NOT_ASCII_FORMAT
 193

	)

1379 
	#ASN1_R_TOO_LONG
 155

	)

1380 
	#ASN1_R_TYPE_NOT_CONSTRUCTED
 156

	)

1381 
	#ASN1_R_UNABLE_TO_DECODE_RSA_KEY
 157

	)

1382 
	#ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY
 158

	)

1383 
	#ASN1_R_UNEXPECTED_EOC
 159

	)

1384 
	#ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH
 215

	)

1385 
	#ASN1_R_UNKNOWN_FORMAT
 160

	)

1386 
	#ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM
 161

	)

1387 
	#ASN1_R_UNKNOWN_OBJECT_TYPE
 162

	)

1388 
	#ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE
 163

	)

1389 
	#ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM
 199

	)

1390 
	#ASN1_R_UNKNOWN_TAG
 194

	)

1391 
	#ASN1_R_UNKOWN_FORMAT
 195

	)

1392 
	#ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE
 164

	)

1393 
	#ASN1_R_UNSUPPORTED_CIPHER
 165

	)

1394 
	#ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM
 166

	)

1395 
	#ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE
 167

	)

1396 
	#ASN1_R_UNSUPPORTED_TYPE
 196

	)

1397 
	#ASN1_R_WRONG_PUBLIC_KEY_TYPE
 200

	)

1398 
	#ASN1_R_WRONG_TAG
 168

	)

1399 
	#ASN1_R_WRONG_TYPE
 169

	)

1401 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dsa.h

65 #i‚de‡
HEADER_DSA_H


66 
	#HEADER_DSA_H


	)

68 
	~<›ís¶/e_os2.h
>

70 #ifde‡
OPENSSL_NO_DSA


71 #îr‹ 
DSA
 
is
 
dißbÀd
.

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

77 
	~<›ís¶/¸y±o.h
>

78 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

82 #i‚de‡
OPENSSL_NO_DH


83 
	~<›ís¶/dh.h
>

87 #i‚de‡
OPENSSL_DSA_MAX_MODULUS_BITS


88 
	#OPENSSL_DSA_MAX_MODULUS_BITS
 10000

	)

91 
	#DSA_FLAG_CACHE_MONT_P
 0x01

	)

92 
	#DSA_FLAG_NO_EXP_CONSTTIME
 0x02

	)

106 
	#DSA_FLAG_FIPS_METHOD
 0x0400

	)

113 
	#DSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

115 #ifde‡ 
__˝lu•lus


123 
	sDSA_SIG_°


125 
BIGNUM
 *
r
;

126 
BIGNUM
 *
s
;

127 } 
	tDSA_SIG
;

129 
	sdß_mëhod


131 c⁄° *
«me
;

132 
DSA_SIG
 * (*
dß_do_sign
)(c⁄° *
dg°
, 
dÀn
, 
DSA
 *
dß
);

133 (*
dß_sign_£tup
)(
DSA
 *
dß
, 
BN_CTX
 *
˘x_ö
, 
BIGNUM
 **
kövp
,

134 
BIGNUM
 **
Ω
);

135 (*
dß_do_vîify
)(c⁄° *
dg°
, 
dg°_Àn
,

136 
DSA_SIG
 *
sig
, 
DSA
 *
dß
);

137 (*
dß_mod_exp
)(
DSA
 *
dß
, 
BIGNUM
 *
º
, BIGNUM *
a1
, BIGNUM *
p1
,

138 
BIGNUM
 *
a2
, BIGNUM *
p2
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

139 
BN_MONT_CTX
 *
ö_m⁄t
);

140 (*
bn_mod_exp
)(
DSA
 *
dß
, 
BIGNUM
 *
r
, BIGNUM *
a
, c⁄° BIGNUM *
p
,

141 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

142 
BN_MONT_CTX
 *
m_˘x
);

143 (*
öô
)(
DSA
 *
dß
);

144 (*
föish
)(
DSA
 *
dß
);

145 
Êags
;

146 *
≠p_d©a
;

148 (*
dß_∑ømgí
)(
DSA
 *
dß
, 
bôs
,

149 c⁄° *
£ed
, 
£ed_Àn
,

150 *
cou¡î_ªt
, *
h_ªt
,

151 
BN_GENCB
 *
cb
);

153 (*
dß_keygí
)(
DSA
 *
dß
);

156 
	sdß_°


160 
∑d
;

161 
vîsi⁄
;

162 
wrôe_∑øms
;

163 
BIGNUM
 *
p
;

164 
BIGNUM
 *
q
;

165 
BIGNUM
 *
g
;

167 
BIGNUM
 *
pub_key
;

168 
BIGNUM
 *
¥iv_key
;

170 
BIGNUM
 *
köv
;

171 
BIGNUM
 *
r
;

173 
Êags
;

175 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

176 
ª„ªn˚s
;

177 
CRYPTO_EX_DATA
 
ex_d©a
;

178 c⁄° 
DSA_METHOD
 *
mëh
;

180 
ENGINE
 *
ígöe
;

183 
	#d2i_DSA∑øms_Â
(
Â
,
x
Ë(
DSA
 *)
	`ASN1_d2i_Â
((*(*)())
DSA_√w
, \

184 (*(*)())
d2i_DSA∑øms
,(
Â
),(**)(
x
))

	)

185 
	#i2d_DSA∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DSA∑øms
,(fp), \

186 (*)(
x
))

	)

187 
	#d2i_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DSA
,
DSA_√w
,
d2i_DSA∑øms
,bp,x)

	)

188 
	#i2d_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DSA
,
i2d_DSA∑øms
,bp,x)

	)

191 
DSA
 *
DSA∑øms_dup
(DSA *
x
);

192 
DSA_SIG
 * 
DSA_SIG_√w
();

193 
DSA_SIG_‰ì
(
DSA_SIG
 *
a
);

194 
i2d_DSA_SIG
(c⁄° 
DSA_SIG
 *
a
, **
µ
);

195 
DSA_SIG
 * 
d2i_DSA_SIG
(DSA_SIG **
v
, c⁄° **
µ
, 
Àngth
);

197 
DSA_SIG
 * 
DSA_do_sign
(c⁄° *
dg°
,
dÀn
,
DSA
 *
dß
);

198 
DSA_do_vîify
(c⁄° *
dg°
,
dg°_Àn
,

199 
DSA_SIG
 *
sig
,
DSA
 *
dß
);

201 c⁄° 
DSA_METHOD
 *
DSA_O≥nSSL
();

203 
DSA_£t_deÁu…_mëhod
(c⁄° 
DSA_METHOD
 *);

204 c⁄° 
DSA_METHOD
 *
DSA_gë_deÁu…_mëhod
();

205 
DSA_£t_mëhod
(
DSA
 *
dß
, c⁄° 
DSA_METHOD
 *);

207 
DSA
 * 
DSA_√w
();

208 
DSA
 * 
DSA_√w_mëhod
(
ENGINE
 *
ígöe
);

209 
DSA_‰ì
 (
DSA
 *
r
);

211 
DSA_up_ªf
(
DSA
 *
r
);

212 
DSA_size
(c⁄° 
DSA
 *);

214 
DSA_sign_£tup
–
DSA
 *
dß
,
BN_CTX
 *
˘x_ö
,
BIGNUM
 **
kövp
,BIGNUM **
Ω
);

215 
DSA_sign
(
ty≥
,c⁄° *
dg°
,
dÀn
,

216 *
sig
, *
sigÀn
, 
DSA
 *
dß
);

217 
DSA_vîify
(
ty≥
,c⁄° *
dg°
,
dg°_Àn
,

218 c⁄° *
sigbuf
, 
sigÀn
, 
DSA
 *
dß
);

219 
DSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

220 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

221 
DSA_£t_ex_d©a
(
DSA
 *
d
, 
idx
, *
¨g
);

222 *
DSA_gë_ex_d©a
(
DSA
 *
d
, 
idx
);

224 
DSA
 * 
d2i_DSAPublicKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

225 
DSA
 * 
d2i_DSAPriv©eKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

226 
DSA
 * 
d2i_DSA∑øms
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

229 #i‚de‡
OPENSSL_NO_DEPRECATED


230 
DSA
 * 
DSA_gíî©e_∑ømëîs
(
bôs
,

231 *
£ed
,
£ed_Àn
,

232 *
cou¡î_ªt
, *
h_ªt
,

233 (*
ˇŒback
)(, , *),*
cb_¨g
);

237 
DSA_gíî©e_∑ømëîs_ex
(
DSA
 *
dß
, 
bôs
,

238 c⁄° *
£ed
,
£ed_Àn
,

239 *
cou¡î_ªt
, *
h_ªt
, 
BN_GENCB
 *
cb
);

241 
DSA_gíî©e_key
(
DSA
 *
a
);

242 
i2d_DSAPublicKey
(c⁄° 
DSA
 *
a
, **
µ
);

243 
i2d_DSAPriv©eKey
(c⁄° 
DSA
 *
a
, **
µ
);

244 
i2d_DSA∑øms
(c⁄° 
DSA
 *
a
,**
µ
);

246 #i‚de‡
OPENSSL_NO_BIO


247 
DSA∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
);

248 
DSA_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

250 #i‚de‡
OPENSSL_NO_FP_API


251 
DSA∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DSA
 *
x
);

252 
DSA_¥öt_Â
(
FILE
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

255 
	#DSS_¥ime_checks
 50

	)

258 
	#DSA_is_¥ime
(
n
, 
ˇŒback
, 
cb_¨g
) \

259 
	`BN_is_¥ime
(
n
, 
DSS_¥ime_checks
, 
ˇŒback
, 
NULL
, 
cb_¨g
)

	)

261 #i‚de‡
OPENSSL_NO_DH


264 
DH
 *
DSA_dup_DH
(c⁄° 
DSA
 *
r
);

267 
	#EVP_PKEY_CTX_£t_dß_∑ømgí_bôs
(
˘x
, 
nbôs
) \

268 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DSA
, 
EVP_PKEY_OP_PARAMGEN
, \

269 
EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
, 
nbôs
, 
NULL
)

	)

271 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

272 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

273 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_MD
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

279 
ERR_lﬂd_DSA_°rögs
();

284 
	#DSA_F_D2I_DSA_SIG
 110

	)

285 
	#DSA_F_DO_DSA_PRINT
 104

	)

286 
	#DSA_F_DSAPARAMS_PRINT
 100

	)

287 
	#DSA_F_DSAPARAMS_PRINT_FP
 101

	)

288 
	#DSA_F_DSA_DO_SIGN
 112

	)

289 
	#DSA_F_DSA_DO_VERIFY
 113

	)

290 
	#DSA_F_DSA_GENERATE_KEY
 124

	)

291 
	#DSA_F_DSA_GENERATE_PARAMETERS_EX
 123

	)

292 
	#DSA_F_DSA_NEW_METHOD
 103

	)

293 
	#DSA_F_DSA_PARAM_DECODE
 119

	)

294 
	#DSA_F_DSA_PRINT_FP
 105

	)

295 
	#DSA_F_DSA_PRIV_DECODE
 115

	)

296 
	#DSA_F_DSA_PRIV_ENCODE
 116

	)

297 
	#DSA_F_DSA_PUB_DECODE
 117

	)

298 
	#DSA_F_DSA_PUB_ENCODE
 118

	)

299 
	#DSA_F_DSA_SIGN
 106

	)

300 
	#DSA_F_DSA_SIGN_SETUP
 107

	)

301 
	#DSA_F_DSA_SIG_NEW
 109

	)

302 
	#DSA_F_DSA_SIG_PRINT
 125

	)

303 
	#DSA_F_DSA_VERIFY
 108

	)

304 
	#DSA_F_I2D_DSA_SIG
 111

	)

305 
	#DSA_F_OLD_DSA_PRIV_DECODE
 122

	)

306 
	#DSA_F_PKEY_DSA_CTRL
 120

	)

307 
	#DSA_F_PKEY_DSA_KEYGEN
 121

	)

308 
	#DSA_F_SIG_CB
 114

	)

311 
	#DSA_R_BAD_Q_VALUE
 102

	)

312 
	#DSA_R_BN_DECODE_ERROR
 108

	)

313 
	#DSA_R_BN_ERROR
 109

	)

314 
	#DSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 100

	)

315 
	#DSA_R_DECODE_ERROR
 104

	)

316 
	#DSA_R_INVALID_DIGEST_TYPE
 106

	)

317 
	#DSA_R_MISSING_PARAMETERS
 101

	)

318 
	#DSA_R_MODULUS_TOO_LARGE
 103

	)

319 
	#DSA_R_NEED_NEW_SETUP_VALUES
 110

	)

320 
	#DSA_R_NON_FIPS_DSA_METHOD
 111

	)

321 
	#DSA_R_NO_PARAMETERS_SET
 107

	)

322 
	#DSA_R_PARAMETER_ENCODING_ERROR
 105

	)

324 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ebcdic.h

3 #i‚de‡
HEADER_EBCDIC_H


4 
	#HEADER_EBCDIC_H


	)

6 
	~<sys/ty≥s.h
>

9 
	#os_tﬂscii
 
_›ís¶_os_tﬂscii


	)

10 
	#os_t€bcdic
 
_›ís¶_os_t€bcdic


	)

11 
	#ebcdic2ascii
 
_›ís¶_ebcdic2ascii


	)

12 
	#ascii2ebcdic
 
_›ís¶_ascii2ebcdic


	)

14 c⁄° 
os_tﬂscii
[256];

15 c⁄° 
os_t€bcdic
[256];

16 *
ebcdic2ascii
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

17 *
ascii2ebcdic
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

	@/usr/include/openssl/ec.h

76 #i‚de‡
HEADER_EC_H


77 
	#HEADER_EC_H


	)

79 
	~<›ís¶/›ís¶c⁄f.h
>

81 #ifde‡
OPENSSL_NO_EC


82 #îr‹ 
EC
 
is
 
dißbÀd
.

85 
	~<›ís¶/a¢1.h
>

86 
	~<›ís¶/symhacks.h
>

87 #i‚de‡
OPENSSL_NO_DEPRECATED


88 
	~<›ís¶/bn.h
>

91 #ifde‡ 
__˝lu•lus


93 #ñi‡
deföed
(
__SUNPRO_C
)

94 #i‡
__SUNPRO_C
 >= 0x520

95 #¥agm®
îr‹_mesßges
 (
off
,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

100 #i‚de‡
OPENSSL_ECC_MAX_FIELD_BITS


101 
	#OPENSSL_ECC_MAX_FIELD_BITS
 661

	)

109 
POINT_CONVERSION_COMPRESSED
 = 2,

111 
POINT_CONVERSION_UNCOMPRESSED
 = 4,

114 
POINT_CONVERSION_HYBRID
 = 6

115 } 
	tpoöt_c⁄vîsi⁄_f‹m_t
;

118 
ec_mëhod_°
 
	tEC_METHOD
;

120 
ec_group_°


129 
	tEC_GROUP
;

131 
ec_poöt_°
 
	tEC_POINT
;

142 c⁄° 
EC_METHOD
 *
EC_GFp_sim∂e_mëhod
();

147 c⁄° 
EC_METHOD
 *
EC_GFp_m⁄t_mëhod
();

152 c⁄° 
EC_METHOD
 *
EC_GFp_ni°_mëhod
();

154 #i‚de‡
OPENSSL_NO_EC_NISTP_64_GCC_128


158 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p224_mëhod
();

163 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p256_mëhod
();

168 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p521_mëhod
();

171 #i‚de‡
OPENSSL_NO_EC2M


179 c⁄° 
EC_METHOD
 *
EC_GF2m_sim∂e_mëhod
();

192 
EC_GROUP
 *
EC_GROUP_√w
(c⁄° 
EC_METHOD
 *
mëh
);

197 
EC_GROUP_‰ì
(
EC_GROUP
 *
group
);

202 
EC_GROUP_˛ór_‰ì
(
EC_GROUP
 *
group
);

209 
EC_GROUP_c›y
(
EC_GROUP
 *
d°
, c⁄° EC_GROUP *
§c
);

216 
EC_GROUP
 *
EC_GROUP_dup
(c⁄° EC_GROUP *
§c
);

222 c⁄° 
EC_METHOD
 *
EC_GROUP_mëhod_of
(c⁄° 
EC_GROUP
 *
group
);

228 
EC_METHOD_gë_fõld_ty≥
(c⁄° 
EC_METHOD
 *
mëh
);

238 
EC_GROUP_£t_gíî©‹
(
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
gíî©‹
, c⁄° 
BIGNUM
 *
‹dî
, c⁄° BIGNUM *
coÁ˘‹
);

244 c⁄° 
EC_POINT
 *
EC_GROUP_gë0_gíî©‹
(c⁄° 
EC_GROUP
 *
group
);

252 
EC_GROUP_gë_‹dî
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
‹dî
, 
BN_CTX
 *
˘x
);

260 
EC_GROUP_gë_coÁ˘‹
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
coÁ˘‹
, 
BN_CTX
 *
˘x
);

266 
EC_GROUP_£t_curve_«me
(
EC_GROUP
 *
group
, 
nid
);

272 
EC_GROUP_gë_curve_«me
(c⁄° 
EC_GROUP
 *
group
);

274 
EC_GROUP_£t_a¢1_Êag
(
EC_GROUP
 *
group
, 
Êag
);

275 
EC_GROUP_gë_a¢1_Êag
(c⁄° 
EC_GROUP
 *
group
);

277 
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
(
EC_GROUP
 *, 
poöt_c⁄vîsi⁄_f‹m_t
);

278 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
(c⁄° 
EC_GROUP
 *);

280 *
EC_GROUP_gë0_£ed
(c⁄° 
EC_GROUP
 *);

281 
size_t
 
EC_GROUP_gë_£ed_Àn
(c⁄° 
EC_GROUP
 *);

282 
size_t
 
EC_GROUP_£t_£ed
(
EC_GROUP
 *, c⁄° *, size_à
Àn
);

292 
EC_GROUP_£t_curve_GFp
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

302 
EC_GROUP_gë_curve_GFp
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
, 
BN_CTX
 *
˘x
);

304 #i‚de‡
OPENSSL_NO_EC2M


313 
EC_GROUP_£t_curve_GF2m
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

323 
EC_GROUP_gë_curve_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
, 
BN_CTX
 *
˘x
);

329 
EC_GROUP_gë_degªe
(c⁄° 
EC_GROUP
 *
group
);

336 
EC_GROUP_check
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

343 
EC_GROUP_check_dis¸imö™t
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

351 
EC_GROUP_cmp
(c⁄° 
EC_GROUP
 *
a
, c⁄° EC_GROUP *
b
, 
BN_CTX
 *
˘x
);

364 
EC_GROUP
 *
EC_GROUP_√w_curve_GFp
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

365 #i‚de‡
OPENSSL_NO_EC2M


374 
EC_GROUP
 *
EC_GROUP_√w_curve_GF2m
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

381 
EC_GROUP
 *
EC_GROUP_√w_by_curve_«me
(
nid
);

389 
nid
;

390 c⁄° *
commít
;

391 } 
	tEC_buûtö_curve
;

397 
size_t
 
EC_gë_buûtö_curves
(
EC_buûtö_curve
 *
r
, size_à
nôems
);

408 
EC_POINT
 *
EC_POINT_√w
(c⁄° 
EC_GROUP
 *
group
);

413 
EC_POINT_‰ì
(
EC_POINT
 *
poöt
);

418 
EC_POINT_˛ór_‰ì
(
EC_POINT
 *
poöt
);

425 
EC_POINT_c›y
(
EC_POINT
 *
d°
, c⁄° EC_POINT *
§c
);

433 
EC_POINT
 *
EC_POINT_dup
(c⁄° EC_POINT *
§c
, c⁄° 
EC_GROUP
 *
group
);

439 c⁄° 
EC_METHOD
 *
EC_POINT_mëhod_of
(c⁄° 
EC_POINT
 *
poöt
);

446 
EC_POINT_£t_to_öföôy
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
poöt
);

457 
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

458 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, c⁄° BIGNUM *
z
, 
BN_CTX
 *
˘x
);

469 
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

470 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
, BIGNUM *
y
, BIGNUM *
z
, 
BN_CTX
 *
˘x
);

480 
EC_POINT_£t_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

481 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, 
BN_CTX
 *
˘x
);

491 
EC_POINT_gë_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

492 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *
˘x
);

502 
EC_POINT_£t_com¥es£d_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

503 c⁄° 
BIGNUM
 *
x
, 
y_bô
, 
BN_CTX
 *
˘x
);

504 #i‚de‡
OPENSSL_NO_EC2M


513 
EC_POINT_£t_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

514 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, 
BN_CTX
 *
˘x
);

524 
EC_POINT_gë_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
,

525 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *
˘x
);

535 
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

536 c⁄° 
BIGNUM
 *
x
, 
y_bô
, 
BN_CTX
 *
˘x
);

548 
size_t
 
EC_POINT_poöt2o˘
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
,

549 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

550 *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

560 
EC_POINT_o˘2poöt
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

561 c⁄° *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

564 
BIGNUM
 *
EC_POINT_poöt2bn
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

565 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BIGNUM
 *, 
BN_CTX
 *);

566 
EC_POINT
 *
EC_POINT_bn2poöt
(c⁄° 
EC_GROUP
 *, c⁄° 
BIGNUM
 *,

567 
EC_POINT
 *, 
BN_CTX
 *);

568 *
EC_POINT_poöt2hex
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

569 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BN_CTX
 *);

570 
EC_POINT
 *
EC_POINT_hex2poöt
(c⁄° 
EC_GROUP
 *, const *,

571 
EC_POINT
 *, 
BN_CTX
 *);

586 
EC_POINT_add
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
, c⁄° EC_POINT *
b
, 
BN_CTX
 *
˘x
);

595 
EC_POINT_dbl
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
, 
BN_CTX
 *
˘x
);

603 
EC_POINT_övît
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
a
, 
BN_CTX
 *
˘x
);

610 
EC_POINT_is_©_öföôy
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
);

618 
EC_POINT_is_⁄_curve
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
poöt
, 
BN_CTX
 *
˘x
);

627 
EC_POINT_cmp
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
a
, c⁄° EC_POINT *
b
, 
BN_CTX
 *
˘x
);

629 
EC_POINT_make_afföe
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *, 
BN_CTX
 *);

630 
EC_POINTs_make_afföe
(c⁄° 
EC_GROUP
 *, 
size_t
 
num
, 
EC_POINT
 *[], 
BN_CTX
 *);

642 
EC_POINTs_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
, 
size_t
 
num
, c⁄° EC_POINT *
p
[], c⁄° BIGNUM *
m
[], 
BN_CTX
 *
˘x
);

653 
EC_POINT_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
, c⁄° EC_POINT *
q
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

660 
EC_GROUP_¥ecompuã_mu…
(
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

666 
EC_GROUP_have_¥ecompuã_mu…
(c⁄° 
EC_GROUP
 *
group
);

675 
EC_GROUP_gë_basis_ty≥
(c⁄° 
EC_GROUP
 *);

676 #i‚de‡
OPENSSL_NO_EC2M


677 
EC_GROUP_gë_åöomül_basis
(c⁄° 
EC_GROUP
 *, *
k
);

678 
EC_GROUP_gë_≥¡™omül_basis
(c⁄° 
EC_GROUP
 *, *
k1
,

679 *
k2
, *
k3
);

682 
	#OPENSSL_EC_NAMED_CURVE
 0x001

	)

684 
e˝k_∑ømëîs_°
 
	tECPKPARAMETERS
;

686 
EC_GROUP
 *
d2i_ECPKP¨amëîs
(EC_GROUP **, c⁄° **
ö
, 
Àn
);

687 
i2d_ECPKP¨amëîs
(c⁄° 
EC_GROUP
 *, **
out
);

689 
	#d2i_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
EC_GROUP
,
NULL
,
d2i_ECPKP¨amëîs
,bp,x)

	)

690 
	#i2d_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
EC_GROUP
,
i2d_ECPKP¨amëîs
,bp,x)

	)

691 
	#d2i_ECPKP¨amëîs_Â
(
Â
,
x
Ë(
EC_GROUP
 *)
	`ASN1_d2i_Â
(
NULL
, \

692 (*(*)())
d2i_ECPKP¨amëîs
,(
Â
),(**)(
x
))

	)

693 
	#i2d_ECPKP¨amëîs_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_ECPKP¨amëîs
,(fp), \

694 (*)(
x
))

	)

696 #i‚de‡
OPENSSL_NO_BIO


697 
ECPKP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_GROUP
 *
x
, 
off
);

699 #i‚de‡
OPENSSL_NO_FP_API


700 
ECPKP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_GROUP
 *
x
, 
off
);

708 
ec_key_°
 
	tEC_KEY
;

711 
	#EC_PKEY_NO_PARAMETERS
 0x001

	)

712 
	#EC_PKEY_NO_PUBKEY
 0x002

	)

715 
	#EC_FLAG_NON_FIPS_ALLOW
 0x1

	)

716 
	#EC_FLAG_FIPS_CHECKED
 0x2

	)

721 
EC_KEY
 *
EC_KEY_√w
();

723 
EC_KEY_gë_Êags
(c⁄° 
EC_KEY
 *
key
);

725 
EC_KEY_£t_Êags
(
EC_KEY
 *
key
, 
Êags
);

727 
EC_KEY_˛ór_Êags
(
EC_KEY
 *
key
, 
Êags
);

734 
EC_KEY
 *
EC_KEY_√w_by_curve_«me
(
nid
);

739 
EC_KEY_‰ì
(
EC_KEY
 *
key
);

746 
EC_KEY
 *
EC_KEY_c›y
(EC_KEY *
d°
, c⁄° EC_KEY *
§c
);

752 
EC_KEY
 *
EC_KEY_dup
(c⁄° EC_KEY *
§c
);

758 
EC_KEY_up_ªf
(
EC_KEY
 *
key
);

764 c⁄° 
EC_GROUP
 *
EC_KEY_gë0_group
(c⁄° 
EC_KEY
 *
key
);

772 
EC_KEY_£t_group
(
EC_KEY
 *
key
, c⁄° 
EC_GROUP
 *
group
);

778 c⁄° 
BIGNUM
 *
EC_KEY_gë0_¥iv©e_key
(c⁄° 
EC_KEY
 *
key
);

786 
EC_KEY_£t_¥iv©e_key
(
EC_KEY
 *
key
, c⁄° 
BIGNUM
 *
¥v
);

792 c⁄° 
EC_POINT
 *
EC_KEY_gë0_public_key
(c⁄° 
EC_KEY
 *
key
);

800 
EC_KEY_£t_public_key
(
EC_KEY
 *
key
, c⁄° 
EC_POINT
 *
pub
);

802 
EC_KEY_gë_íc_Êags
(c⁄° 
EC_KEY
 *
key
);

803 
EC_KEY_£t_íc_Êags
(
EC_KEY
 *, );

804 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_KEY_gë_c⁄v_f‹m
(c⁄° 
EC_KEY
 *);

805 
EC_KEY_£t_c⁄v_f‹m
(
EC_KEY
 *, 
poöt_c⁄vîsi⁄_f‹m_t
);

807 *
EC_KEY_gë_key_mëhod_d©a
(
EC_KEY
 *,

808 *(*
dup_func
)(*), (*
‰ì_func
)(*), (*
˛ór_‰ì_func
)(*));

809 
EC_KEY_ö£π_key_mëhod_d©a
(
EC_KEY
 *, *
d©a
,

810 *(*
dup_func
)(*), (*
‰ì_func
)(*), (*
˛ór_‰ì_func
)(*));

812 
EC_KEY_£t_a¢1_Êag
(
EC_KEY
 *, );

820 
EC_KEY_¥ecompuã_mu…
(
EC_KEY
 *
key
, 
BN_CTX
 *
˘x
);

826 
EC_KEY_gíî©e_key
(
EC_KEY
 *
key
);

832 
EC_KEY_check_key
(c⁄° 
EC_KEY
 *
key
);

841 
EC_KEY_£t_public_key_afföe_co‹dö©es
(
EC_KEY
 *
key
, 
BIGNUM
 *
x
, BIGNUM *
y
);

854 
EC_KEY
 *
d2i_ECPriv©eKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

862 
i2d_ECPriv©eKey
(
EC_KEY
 *
key
, **
out
);

876 
EC_KEY
 *
d2i_ECP¨amëîs
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

884 
i2d_ECP¨amëîs
(
EC_KEY
 *
key
, **
out
);

899 
EC_KEY
 *
o2i_ECPublicKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

907 
i2o_ECPublicKey
(
EC_KEY
 *
key
, **
out
);

909 #i‚de‡
OPENSSL_NO_BIO


915 
ECP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
);

923 
EC_KEY_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
, 
off
);

926 #i‚de‡
OPENSSL_NO_FP_API


932 
ECP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
);

940 
EC_KEY_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
, 
off
);

944 
	#ECP¨amëîs_dup
(
x
Ë
	`ASN1_dup_of
(
EC_KEY
,
i2d_ECP¨amëîs
,
d2i_ECP¨amëîs
,x)

	)

946 #i‚de‡
__˝lu•lus


947 #i‡
deföed
(
__SUNPRO_C
)

948 #i‡
__SUNPRO_C
 >= 0x520

949 #¥agm®
îr‹_mesßges
 (,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

954 
	#EVP_PKEY_CTX_£t_ec_∑ømgí_curve_nid
(
˘x
, 
nid
) \

955 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, 
EVP_PKEY_OP_PARAMGEN
, \

956 
EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
, 
nid
, 
NULL
)

	)

959 
	#EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

965 
ERR_lﬂd_EC_°rögs
();

970 
	#EC_F_BN_TO_FELEM
 224

	)

971 
	#EC_F_COMPUTE_WNAF
 143

	)

972 
	#EC_F_D2I_ECPARAMETERS
 144

	)

973 
	#EC_F_D2I_ECPKPARAMETERS
 145

	)

974 
	#EC_F_D2I_ECPRIVATEKEY
 146

	)

975 
	#EC_F_DO_EC_KEY_PRINT
 221

	)

976 
	#EC_F_ECKEY_PARAM2TYPE
 223

	)

977 
	#EC_F_ECKEY_PARAM_DECODE
 212

	)

978 
	#EC_F_ECKEY_PRIV_DECODE
 213

	)

979 
	#EC_F_ECKEY_PRIV_ENCODE
 214

	)

980 
	#EC_F_ECKEY_PUB_DECODE
 215

	)

981 
	#EC_F_ECKEY_PUB_ENCODE
 216

	)

982 
	#EC_F_ECKEY_TYPE2PARAM
 220

	)

983 
	#EC_F_ECPARAMETERS_PRINT
 147

	)

984 
	#EC_F_ECPARAMETERS_PRINT_FP
 148

	)

985 
	#EC_F_ECPKPARAMETERS_PRINT
 149

	)

986 
	#EC_F_ECPKPARAMETERS_PRINT_FP
 150

	)

987 
	#EC_F_ECP_NIST_MOD_192
 203

	)

988 
	#EC_F_ECP_NIST_MOD_224
 204

	)

989 
	#EC_F_ECP_NIST_MOD_256
 205

	)

990 
	#EC_F_ECP_NIST_MOD_521
 206

	)

991 
	#EC_F_EC_ASN1_GROUP2CURVE
 153

	)

992 
	#EC_F_EC_ASN1_GROUP2FIELDID
 154

	)

993 
	#EC_F_EC_ASN1_GROUP2PARAMETERS
 155

	)

994 
	#EC_F_EC_ASN1_GROUP2PKPARAMETERS
 156

	)

995 
	#EC_F_EC_ASN1_PARAMETERS2GROUP
 157

	)

996 
	#EC_F_EC_ASN1_PKPARAMETERS2GROUP
 158

	)

997 
	#EC_F_EC_EX_DATA_SET_DATA
 211

	)

998 
	#EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY
 208

	)

999 
	#EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT
 159

	)

1000 
	#EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE
 195

	)

1001 
	#EC_F_EC_GF2M_SIMPLE_OCT2POINT
 160

	)

1002 
	#EC_F_EC_GF2M_SIMPLE_POINT2OCT
 161

	)

1003 
	#EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES
 162

	)

1004 
	#EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES
 163

	)

1005 
	#EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES
 164

	)

1006 
	#EC_F_EC_GFP_MONT_FIELD_DECODE
 133

	)

1007 
	#EC_F_EC_GFP_MONT_FIELD_ENCODE
 134

	)

1008 
	#EC_F_EC_GFP_MONT_FIELD_MUL
 131

	)

1009 
	#EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE
 209

	)

1010 
	#EC_F_EC_GFP_MONT_FIELD_SQR
 132

	)

1011 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE
 189

	)

1012 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE_GFP
 135

	)

1013 
	#EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE
 225

	)

1014 
	#EC_F_EC_GFP_NISTP224_POINTS_MUL
 228

	)

1015 
	#EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES
 226

	)

1016 
	#EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE
 230

	)

1017 
	#EC_F_EC_GFP_NISTP256_POINTS_MUL
 231

	)

1018 
	#EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES
 232

	)

1019 
	#EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE
 233

	)

1020 
	#EC_F_EC_GFP_NISTP521_POINTS_MUL
 234

	)

1021 
	#EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES
 235

	)

1022 
	#EC_F_EC_GFP_NIST_FIELD_MUL
 200

	)

1023 
	#EC_F_EC_GFP_NIST_FIELD_SQR
 201

	)

1024 
	#EC_F_EC_GFP_NIST_GROUP_SET_CURVE
 202

	)

1025 
	#EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT
 165

	)

1026 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE
 166

	)

1027 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP
 100

	)

1028 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_GENERATOR
 101

	)

1029 
	#EC_F_EC_GFP_SIMPLE_MAKE_AFFINE
 102

	)

1030 
	#EC_F_EC_GFP_SIMPLE_OCT2POINT
 103

	)

1031 
	#EC_F_EC_GFP_SIMPLE_POINT2OCT
 104

	)

1032 
	#EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE
 137

	)

1033 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES
 167

	)

1034 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP
 105

	)

1035 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES
 168

	)

1036 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP
 128

	)

1037 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES
 169

	)

1038 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP
 129

	)

1039 
	#EC_F_EC_GROUP_CHECK
 170

	)

1040 
	#EC_F_EC_GROUP_CHECK_DISCRIMINANT
 171

	)

1041 
	#EC_F_EC_GROUP_COPY
 106

	)

1042 
	#EC_F_EC_GROUP_GET0_GENERATOR
 139

	)

1043 
	#EC_F_EC_GROUP_GET_COFACTOR
 140

	)

1044 
	#EC_F_EC_GROUP_GET_CURVE_GF2M
 172

	)

1045 
	#EC_F_EC_GROUP_GET_CURVE_GFP
 130

	)

1046 
	#EC_F_EC_GROUP_GET_DEGREE
 173

	)

1047 
	#EC_F_EC_GROUP_GET_ORDER
 141

	)

1048 
	#EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS
 193

	)

1049 
	#EC_F_EC_GROUP_GET_TRINOMIAL_BASIS
 194

	)

1050 
	#EC_F_EC_GROUP_NEW
 108

	)

1051 
	#EC_F_EC_GROUP_NEW_BY_CURVE_NAME
 174

	)

1052 
	#EC_F_EC_GROUP_NEW_FROM_DATA
 175

	)

1053 
	#EC_F_EC_GROUP_PRECOMPUTE_MULT
 142

	)

1054 
	#EC_F_EC_GROUP_SET_CURVE_GF2M
 176

	)

1055 
	#EC_F_EC_GROUP_SET_CURVE_GFP
 109

	)

1056 
	#EC_F_EC_GROUP_SET_EXTRA_DATA
 110

	)

1057 
	#EC_F_EC_GROUP_SET_GENERATOR
 111

	)

1058 
	#EC_F_EC_KEY_CHECK_KEY
 177

	)

1059 
	#EC_F_EC_KEY_COPY
 178

	)

1060 
	#EC_F_EC_KEY_GENERATE_KEY
 179

	)

1061 
	#EC_F_EC_KEY_NEW
 182

	)

1062 
	#EC_F_EC_KEY_PRINT
 180

	)

1063 
	#EC_F_EC_KEY_PRINT_FP
 181

	)

1064 
	#EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES
 229

	)

1065 
	#EC_F_EC_POINTS_MAKE_AFFINE
 136

	)

1066 
	#EC_F_EC_POINT_ADD
 112

	)

1067 
	#EC_F_EC_POINT_CMP
 113

	)

1068 
	#EC_F_EC_POINT_COPY
 114

	)

1069 
	#EC_F_EC_POINT_DBL
 115

	)

1070 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M
 183

	)

1071 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP
 116

	)

1072 
	#EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP
 117

	)

1073 
	#EC_F_EC_POINT_INVERT
 210

	)

1074 
	#EC_F_EC_POINT_IS_AT_INFINITY
 118

	)

1075 
	#EC_F_EC_POINT_IS_ON_CURVE
 119

	)

1076 
	#EC_F_EC_POINT_MAKE_AFFINE
 120

	)

1077 
	#EC_F_EC_POINT_MUL
 184

	)

1078 
	#EC_F_EC_POINT_NEW
 121

	)

1079 
	#EC_F_EC_POINT_OCT2POINT
 122

	)

1080 
	#EC_F_EC_POINT_POINT2OCT
 123

	)

1081 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M
 185

	)

1082 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP
 124

	)

1083 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M
 186

	)

1084 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP
 125

	)

1085 
	#EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP
 126

	)

1086 
	#EC_F_EC_POINT_SET_TO_INFINITY
 127

	)

1087 
	#EC_F_EC_PRE_COMP_DUP
 207

	)

1088 
	#EC_F_EC_PRE_COMP_NEW
 196

	)

1089 
	#EC_F_EC_WNAF_MUL
 187

	)

1090 
	#EC_F_EC_WNAF_PRECOMPUTE_MULT
 188

	)

1091 
	#EC_F_I2D_ECPARAMETERS
 190

	)

1092 
	#EC_F_I2D_ECPKPARAMETERS
 191

	)

1093 
	#EC_F_I2D_ECPRIVATEKEY
 192

	)

1094 
	#EC_F_I2O_ECPUBLICKEY
 151

	)

1095 
	#EC_F_NISTP224_PRE_COMP_NEW
 227

	)

1096 
	#EC_F_NISTP256_PRE_COMP_NEW
 236

	)

1097 
	#EC_F_NISTP521_PRE_COMP_NEW
 237

	)

1098 
	#EC_F_O2I_ECPUBLICKEY
 152

	)

1099 
	#EC_F_OLD_EC_PRIV_DECODE
 222

	)

1100 
	#EC_F_PKEY_EC_CTRL
 197

	)

1101 
	#EC_F_PKEY_EC_CTRL_STR
 198

	)

1102 
	#EC_F_PKEY_EC_DERIVE
 217

	)

1103 
	#EC_F_PKEY_EC_KEYGEN
 199

	)

1104 
	#EC_F_PKEY_EC_PARAMGEN
 219

	)

1105 
	#EC_F_PKEY_EC_SIGN
 218

	)

1108 
	#EC_R_ASN1_ERROR
 115

	)

1109 
	#EC_R_ASN1_UNKNOWN_FIELD
 116

	)

1110 
	#EC_R_BIGNUM_OUT_OF_RANGE
 144

	)

1111 
	#EC_R_BUFFER_TOO_SMALL
 100

	)

1112 
	#EC_R_COORDINATES_OUT_OF_RANGE
 146

	)

1113 
	#EC_R_D2I_ECPKPARAMETERS_FAILURE
 117

	)

1114 
	#EC_R_DECODE_ERROR
 142

	)

1115 
	#EC_R_DISCRIMINANT_IS_ZERO
 118

	)

1116 
	#EC_R_EC_GROUP_NEW_BY_NAME_FAILURE
 119

	)

1117 
	#EC_R_FIELD_TOO_LARGE
 143

	)

1118 
	#EC_R_GF2M_NOT_SUPPORTED
 147

	)

1119 
	#EC_R_GROUP2PKPARAMETERS_FAILURE
 120

	)

1120 
	#EC_R_I2D_ECPKPARAMETERS_FAILURE
 121

	)

1121 
	#EC_R_INCOMPATIBLE_OBJECTS
 101

	)

1122 
	#EC_R_INVALID_ARGUMENT
 112

	)

1123 
	#EC_R_INVALID_COMPRESSED_POINT
 110

	)

1124 
	#EC_R_INVALID_COMPRESSION_BIT
 109

	)

1125 
	#EC_R_INVALID_CURVE
 141

	)

1126 
	#EC_R_INVALID_DIGEST_TYPE
 138

	)

1127 
	#EC_R_INVALID_ENCODING
 102

	)

1128 
	#EC_R_INVALID_FIELD
 103

	)

1129 
	#EC_R_INVALID_FORM
 104

	)

1130 
	#EC_R_INVALID_GROUP_ORDER
 122

	)

1131 
	#EC_R_INVALID_PENTANOMIAL_BASIS
 132

	)

1132 
	#EC_R_INVALID_PRIVATE_KEY
 123

	)

1133 
	#EC_R_INVALID_TRINOMIAL_BASIS
 137

	)

1134 
	#EC_R_KEYS_NOT_SET
 140

	)

1135 
	#EC_R_MISSING_PARAMETERS
 124

	)

1136 
	#EC_R_MISSING_PRIVATE_KEY
 125

	)

1137 
	#EC_R_NOT_A_NIST_PRIME
 135

	)

1138 
	#EC_R_NOT_A_SUPPORTED_NIST_PRIME
 136

	)

1139 
	#EC_R_NOT_IMPLEMENTED
 126

	)

1140 
	#EC_R_NOT_INITIALIZED
 111

	)

1141 
	#EC_R_NO_FIELD_MOD
 133

	)

1142 
	#EC_R_NO_PARAMETERS_SET
 139

	)

1143 
	#EC_R_PASSED_NULL_PARAMETER
 134

	)

1144 
	#EC_R_PKPARAMETERS2GROUP_FAILURE
 127

	)

1145 
	#EC_R_POINT_AT_INFINITY
 106

	)

1146 
	#EC_R_POINT_IS_NOT_ON_CURVE
 107

	)

1147 
	#EC_R_SLOT_FULL
 108

	)

1148 
	#EC_R_UNDEFINED_GENERATOR
 113

	)

1149 
	#EC_R_UNDEFINED_ORDER
 128

	)

1150 
	#EC_R_UNKNOWN_GROUP
 129

	)

1151 
	#EC_R_UNKNOWN_ORDER
 114

	)

1152 
	#EC_R_UNSUPPORTED_FIELD
 131

	)

1153 
	#EC_R_WRONG_CURVE_PARAMETERS
 145

	)

1154 
	#EC_R_WRONG_ORDER
 130

	)

1156 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ecdh.h

69 #i‚de‡
HEADER_ECDH_H


70 
	#HEADER_ECDH_H


	)

72 
	~<›ís¶/›ís¶c⁄f.h
>

74 #ifde‡
OPENSSL_NO_ECDH


75 #îr‹ 
ECDH
 
is
 
dißbÀd
.

78 
	~<›ís¶/ec.h
>

79 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

84 #ifde‡
__˝lu•lus


88 c⁄° 
ECDH_METHOD
 *
ECDH_O≥nSSL
();

90 
ECDH_£t_deÁu…_mëhod
(c⁄° 
ECDH_METHOD
 *);

91 c⁄° 
ECDH_METHOD
 *
ECDH_gë_deÁu…_mëhod
();

92 
ECDH_£t_mëhod
(
EC_KEY
 *, c⁄° 
ECDH_METHOD
 *);

94 
ECDH_compuã_key
(*
out
, 
size_t
 
ouéí
, c⁄° 
EC_POINT
 *
pub_key
, 
EC_KEY
 *
ecdh
,

95 *(*
KDF
)(c⁄° *
ö
, 
size_t
 
öÀn
, *
out
, size_à*
ouéí
));

97 
ECDH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w


98 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

99 
ECDH_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
¨g
);

100 *
ECDH_gë_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

107 
ERR_lﬂd_ECDH_°rögs
();

112 
	#ECDH_F_ECDH_CHECK
 102

	)

113 
	#ECDH_F_ECDH_COMPUTE_KEY
 100

	)

114 
	#ECDH_F_ECDH_DATA_NEW_METHOD
 101

	)

117 
	#ECDH_R_KDF_FAILED
 102

	)

118 
	#ECDH_R_NON_FIPS_METHOD
 103

	)

119 
	#ECDH_R_NO_PRIVATE_VALUE
 100

	)

120 
	#ECDH_R_POINT_ARITHMETIC_FAILURE
 101

	)

122 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ecdsa.h

59 #i‚de‡
HEADER_ECDSA_H


60 
	#HEADER_ECDSA_H


	)

62 
	~<›ís¶/›ís¶c⁄f.h
>

64 #ifde‡
OPENSSL_NO_ECDSA


65 #îr‹ 
ECDSA
 
is
 
dißbÀd
.

68 
	~<›ís¶/ec.h
>

69 
	~<›ís¶/os¶_typ.h
>

70 #i‚de‡
OPENSSL_NO_DEPRECATED


71 
	~<›ís¶/bn.h
>

74 #ifde‡
__˝lu•lus


78 
	sECDSA_SIG_°


80 
BIGNUM
 *
r
;

81 
BIGNUM
 *
s
;

82 } 
	tECDSA_SIG
;

87 
ECDSA_SIG
 *
ECDSA_SIG_√w
();

92 
ECDSA_SIG_‰ì
(
ECDSA_SIG
 *
sig
);

100 
i2d_ECDSA_SIG
(c⁄° 
ECDSA_SIG
 *
sig
, **
µ
);

109 
ECDSA_SIG
 *
d2i_ECDSA_SIG
(ECDSA_SIG **
sig
, c⁄° **
µ
, 
Àn
);

118 
ECDSA_SIG
 *
ECDSA_do_sign
(c⁄° *
dg°
,
dg°_Àn
,
EC_KEY
 *
eckey
);

130 
ECDSA_SIG
 *
ECDSA_do_sign_ex
(c⁄° *
dg°
, 
dg°Àn
,

131 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
Ω
, 
EC_KEY
 *
eckey
);

142 
ECDSA_do_vîify
(c⁄° *
dg°
, 
dg°_Àn
,

143 c⁄° 
ECDSA_SIG
 *
sig
, 
EC_KEY
* 
eckey
);

145 c⁄° 
ECDSA_METHOD
 *
ECDSA_O≥nSSL
();

150 
ECDSA_£t_deÁu…_mëhod
(c⁄° 
ECDSA_METHOD
 *
mëh
);

155 c⁄° 
ECDSA_METHOD
 *
ECDSA_gë_deÁu…_mëhod
();

162 
ECDSA_£t_mëhod
(
EC_KEY
 *
eckey
, c⁄° 
ECDSA_METHOD
 *
mëh
);

168 
ECDSA_size
(c⁄° 
EC_KEY
 *
eckey
);

177 
ECDSA_sign_£tup
(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x
, 
BIGNUM
 **
köv
,

178 
BIGNUM
 **
Ω
);

190 
ECDSA_sign
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

191 *
sig
, *
sigÀn
, 
EC_KEY
 *
eckey
);

207 
ECDSA_sign_ex
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

208 *
sig
, *
sigÀn
, c⁄° 
BIGNUM
 *
köv
,

209 c⁄° 
BIGNUM
 *
Ω
, 
EC_KEY
 *
eckey
);

222 
ECDSA_vîify
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

223 c⁄° *
sig
, 
sigÀn
, 
EC_KEY
 *
eckey
);

226 
ECDSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w


227 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

228 
ECDSA_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
¨g
);

229 *
ECDSA_gë_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

236 
ERR_lﬂd_ECDSA_°rögs
();

241 
	#ECDSA_F_ECDSA_CHECK
 104

	)

242 
	#ECDSA_F_ECDSA_DATA_NEW_METHOD
 100

	)

243 
	#ECDSA_F_ECDSA_DO_SIGN
 101

	)

244 
	#ECDSA_F_ECDSA_DO_VERIFY
 102

	)

245 
	#ECDSA_F_ECDSA_SIGN_SETUP
 103

	)

248 
	#ECDSA_R_BAD_SIGNATURE
 100

	)

249 
	#ECDSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 101

	)

250 
	#ECDSA_R_ERR_EC_LIB
 102

	)

251 
	#ECDSA_R_MISSING_PARAMETERS
 103

	)

252 
	#ECDSA_R_NEED_NEW_SETUP_VALUES
 106

	)

253 
	#ECDSA_R_NON_FIPS_METHOD
 107

	)

254 
	#ECDSA_R_RANDOM_NUMBER_GENERATION_FAILED
 104

	)

255 
	#ECDSA_R_SIGNATURE_MALLOC_FAILED
 105

	)

257 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/evp.h

59 #i‚de‡
HEADER_ENVELOPE_H


60 
	#HEADER_ENVELOPE_H


	)

62 #ifde‡
OPENSSL_ALGORITHM_DEFINES


63 
	~<›ís¶/›ís¶c⁄f.h
>

65 
	#OPENSSL_ALGORITHM_DEFINES


	)

66 
	~<›ís¶/›ís¶c⁄f.h
>

67 #unde‡
OPENSSL_ALGORITHM_DEFINES


70 
	~<›ís¶/os¶_typ.h
>

72 
	~<›ís¶/symhacks.h
>

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

85 
	#EVP_MAX_MD_SIZE
 64

	)

86 
	#EVP_MAX_KEY_LENGTH
 64

	)

87 
	#EVP_MAX_IV_LENGTH
 16

	)

88 
	#EVP_MAX_BLOCK_LENGTH
 32

	)

90 
	#PKCS5_SALT_LEN
 8

	)

92 
	#PKCS5_DEFAULT_ITER
 2048

	)

94 
	~<›ís¶/obje˘s.h
>

96 
	#EVP_PK_RSA
 0x0001

	)

97 
	#EVP_PK_DSA
 0x0002

	)

98 
	#EVP_PK_DH
 0x0004

	)

99 
	#EVP_PK_EC
 0x0008

	)

100 
	#EVP_PKT_SIGN
 0x0010

	)

101 
	#EVP_PKT_ENC
 0x0020

	)

102 
	#EVP_PKT_EXCH
 0x0040

	)

103 
	#EVP_PKS_RSA
 0x0100

	)

104 
	#EVP_PKS_DSA
 0x0200

	)

105 
	#EVP_PKS_EC
 0x0400

	)

106 
	#EVP_PKT_EXP
 0x1000

	)

108 
	#EVP_PKEY_NONE
 
NID_undef


	)

109 
	#EVP_PKEY_RSA
 
NID_rßEn¸y±i⁄


	)

110 
	#EVP_PKEY_RSA2
 
NID_rß


	)

111 
	#EVP_PKEY_DSA
 
NID_dß


	)

112 
	#EVP_PKEY_DSA1
 
NID_dß_2


	)

113 
	#EVP_PKEY_DSA2
 
NID_dßWôhSHA


	)

114 
	#EVP_PKEY_DSA3
 
NID_dßWôhSHA1


	)

115 
	#EVP_PKEY_DSA4
 
NID_dßWôhSHA1_2


	)

116 
	#EVP_PKEY_DH
 
NID_dhKeyAgªemít


	)

117 
	#EVP_PKEY_EC
 
NID_X9_62_id_ecPublicKey


	)

118 
	#EVP_PKEY_HMAC
 
NID_hmac


	)

119 
	#EVP_PKEY_CMAC
 
NID_cmac


	)

121 #ifdef 
__˝lu•lus


128 
	sevp_pkey_°


130 
ty≥
;

131 
ßve_ty≥
;

132 
ª„ªn˚s
;

133 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
;

134 
ENGINE
 *
ígöe
;

136 *
±r
;

137 #i‚de‡
OPENSSL_NO_RSA


138 
rß_°
 *
rß
;

140 #i‚de‡
OPENSSL_NO_DSA


141 
dß_°
 *
dß
;

143 #i‚de‡
OPENSSL_NO_DH


144 
dh_°
 *
dh
;

146 #i‚de‡
OPENSSL_NO_EC


147 
ec_key_°
 *
ec
;

149 } 
pkey
;

150 
ßve_∑ømëîs
;

151 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

154 
	#EVP_PKEY_MO_SIGN
 0x0001

	)

155 
	#EVP_PKEY_MO_VERIFY
 0x0002

	)

156 
	#EVP_PKEY_MO_ENCRYPT
 0x0004

	)

157 
	#EVP_PKEY_MO_DECRYPT
 0x0008

	)

159 #i‚de‡
EVP_MD


160 
	sív_md_°


162 
ty≥
;

163 
pkey_ty≥
;

164 
md_size
;

165 
Êags
;

166 (*
öô
)(
EVP_MD_CTX
 *
˘x
);

167 (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,c⁄° *
d©a
,
size_t
 
cou¡
);

168 (*
föÆ
)(
EVP_MD_CTX
 *
˘x
,*
md
);

169 (*
c›y
)(
EVP_MD_CTX
 *
to
,c⁄° EVP_MD_CTX *
‰om
);

170 (*
˛ónup
)(
EVP_MD_CTX
 *
˘x
);

173 (*
sign
)(
ty≥
, c⁄° *
m
, 
m_Àngth
,

174 *
sigªt
, *
sigÀn
, *
key
);

175 (*
vîify
)(
ty≥
, c⁄° *
m
, 
m_Àngth
,

176 c⁄° *
sigbuf
, 
sigÀn
,

177 *
key
);

178 
ªquúed_pkey_ty≥
[5];

179 
block_size
;

180 
˘x_size
;

182 (*
md_˘æ
)(
EVP_MD_CTX
 *
˘x
, 
cmd
, 
p1
, *
p2
);

185 
	tevp_sign_mëhod
(
	tty≥
,c⁄° *
	tm
,

186 
	tm_Àngth
,*
	tsigªt
,

187 *
	tsigÀn
, *
	tkey
);

188 
	tevp_vîify_mëhod
(
	tty≥
,c⁄° *
	tm
,

189 
	tm_Àngth
,c⁄° *
	tsigbuf
,

190 
	tsigÀn
, *
	tkey
);

192 
	#EVP_MD_FLAG_ONESHOT
 0x0001

	)

195 
	#EVP_MD_FLAG_PKEY_DIGEST
 0x0002

	)

202 
	#EVP_MD_FLAG_PKEY_METHOD_SIGNATURE
 0x0004

	)

206 
	#EVP_MD_FLAG_DIGALGID_MASK
 0x0018

	)

210 
	#EVP_MD_FLAG_DIGALGID_NULL
 0x0000

	)

214 
	#EVP_MD_FLAG_DIGALGID_ABSENT
 0x0008

	)

218 
	#EVP_MD_FLAG_DIGALGID_CUSTOM
 0x0018

	)

220 
	#EVP_MD_FLAG_FIPS
 0x0400

	)

224 
	#EVP_MD_CTRL_DIGALGID
 0x1

	)

225 
	#EVP_MD_CTRL_MICALG
 0x2

	)

229 
	#EVP_MD_CTRL_ALG_CTRL
 0x1000

	)

231 
	#EVP_PKEY_NULL_mëhod
 
NULL
,NULL,{0,0,0,0}

	)

233 #i‚de‡
OPENSSL_NO_DSA


234 
	#EVP_PKEY_DSA_mëhod
 (
evp_sign_mëhod
 *)
DSA_sign
, \

235 (
evp_vîify_mëhod
 *)
DSA_vîify
, \

236 {
EVP_PKEY_DSA
,
EVP_PKEY_DSA2
,
EVP_PKEY_DSA3
, \

237 
EVP_PKEY_DSA4
,0}

	)

239 
	#EVP_PKEY_DSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

242 #i‚de‡
OPENSSL_NO_ECDSA


243 
	#EVP_PKEY_ECDSA_mëhod
 (
evp_sign_mëhod
 *)
ECDSA_sign
, \

244 (
evp_vîify_mëhod
 *)
ECDSA_vîify
, \

245 {
EVP_PKEY_EC
,0,0,0}

	)

247 
	#EVP_PKEY_ECDSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

250 #i‚de‡
OPENSSL_NO_RSA


251 
	#EVP_PKEY_RSA_mëhod
 (
evp_sign_mëhod
 *)
RSA_sign
, \

252 (
evp_vîify_mëhod
 *)
RSA_vîify
, \

253 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

254 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 \

255 (
evp_sign_mëhod
 *)
RSA_sign_ASN1_OCTET_STRING
, \

256 (
evp_vîify_mëhod
 *)
RSA_vîify_ASN1_OCTET_STRING
, \

257 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

259 
	#EVP_PKEY_RSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

260 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 
EVP_PKEY_NULL_mëhod


	)

265 
	sív_md_˘x_°


267 c⁄° 
EVP_MD
 *
dige°
;

268 
ENGINE
 *
ígöe
;

269 
Êags
;

270 *
md_d©a
;

272 
EVP_PKEY_CTX
 *
p˘x
;

274 (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,c⁄° *
d©a
,
size_t
 
cou¡
);

279 
	#EVP_MD_CTX_FLAG_ONESHOT
 0x0001

	)

281 
	#EVP_MD_CTX_FLAG_CLEANED
 0x0002

	)

283 
	#EVP_MD_CTX_FLAG_REUSE
 0x0004

	)

289 
	#EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
 0x0008

	)

296 
	#EVP_MD_CTX_FLAG_PAD_MASK
 0xF0

	)

297 
	#EVP_MD_CTX_FLAG_PAD_PKCS1
 0x00

	)

298 
	#EVP_MD_CTX_FLAG_PAD_X931
 0x10

	)

299 
	#EVP_MD_CTX_FLAG_PAD_PSS
 0x20

	)

301 
	#EVP_MD_CTX_FLAG_NO_INIT
 0x0100

	)

303 
	sevp_cùhî_°


305 
nid
;

306 
block_size
;

307 
key_Àn
;

308 
iv_Àn
;

309 
Êags
;

310 (*
öô
)(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
key
,

311 c⁄° *
iv
, 
íc
);

312 (*
do_cùhî
)(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

313 c⁄° *
ö
, 
size_t
 
öl
);

314 (*
˛ónup
)(
EVP_CIPHER_CTX
 *);

315 
˘x_size
;

316 (*
£t_a¢1_∑ømëîs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

317 (*
gë_a¢1_∑ømëîs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

318 (*
˘æ
)(
EVP_CIPHER_CTX
 *, 
ty≥
, 
¨g
, *
±r
);

319 *
≠p_d©a
;

326 
	#EVP_CIPH_STREAM_CIPHER
 0x0

	)

327 
	#EVP_CIPH_ECB_MODE
 0x1

	)

328 
	#EVP_CIPH_CBC_MODE
 0x2

	)

329 
	#EVP_CIPH_CFB_MODE
 0x3

	)

330 
	#EVP_CIPH_OFB_MODE
 0x4

	)

331 
	#EVP_CIPH_CTR_MODE
 0x5

	)

332 
	#EVP_CIPH_GCM_MODE
 0x6

	)

333 
	#EVP_CIPH_CCM_MODE
 0x7

	)

334 
	#EVP_CIPH_XTS_MODE
 0x10001

	)

335 
	#EVP_CIPH_MODE
 0xF0007

	)

337 
	#EVP_CIPH_VARIABLE_LENGTH
 0x8

	)

339 
	#EVP_CIPH_CUSTOM_IV
 0x10

	)

341 
	#EVP_CIPH_ALWAYS_CALL_INIT
 0x20

	)

343 
	#EVP_CIPH_CTRL_INIT
 0x40

	)

345 
	#EVP_CIPH_CUSTOM_KEY_LENGTH
 0x80

	)

347 
	#EVP_CIPH_NO_PADDING
 0x100

	)

349 
	#EVP_CIPH_RAND_KEY
 0x200

	)

351 
	#EVP_CIPH_CUSTOM_COPY
 0x400

	)

353 
	#EVP_CIPH_FLAG_DEFAULT_ASN1
 0x1000

	)

355 
	#EVP_CIPH_FLAG_LENGTH_BITS
 0x2000

	)

357 
	#EVP_CIPH_FLAG_FIPS
 0x4000

	)

359 
	#EVP_CIPH_FLAG_NON_FIPS_ALLOW
 0x8000

	)

363 
	#EVP_CIPH_FLAG_CUSTOM_CIPHER
 0x100000

	)

364 
	#EVP_CIPH_FLAG_AEAD_CIPHER
 0x200000

	)

368 
	#EVP_CTRL_INIT
 0x0

	)

369 
	#EVP_CTRL_SET_KEY_LENGTH
 0x1

	)

370 
	#EVP_CTRL_GET_RC2_KEY_BITS
 0x2

	)

371 
	#EVP_CTRL_SET_RC2_KEY_BITS
 0x3

	)

372 
	#EVP_CTRL_GET_RC5_ROUNDS
 0x4

	)

373 
	#EVP_CTRL_SET_RC5_ROUNDS
 0x5

	)

374 
	#EVP_CTRL_RAND_KEY
 0x6

	)

375 
	#EVP_CTRL_PBE_PRF_NID
 0x7

	)

376 
	#EVP_CTRL_COPY
 0x8

	)

377 
	#EVP_CTRL_GCM_SET_IVLEN
 0x9

	)

378 
	#EVP_CTRL_GCM_GET_TAG
 0x10

	)

379 
	#EVP_CTRL_GCM_SET_TAG
 0x11

	)

380 
	#EVP_CTRL_GCM_SET_IV_FIXED
 0x12

	)

381 
	#EVP_CTRL_GCM_IV_GEN
 0x13

	)

382 
	#EVP_CTRL_CCM_SET_IVLEN
 
EVP_CTRL_GCM_SET_IVLEN


	)

383 
	#EVP_CTRL_CCM_GET_TAG
 
EVP_CTRL_GCM_GET_TAG


	)

384 
	#EVP_CTRL_CCM_SET_TAG
 
EVP_CTRL_GCM_SET_TAG


	)

385 
	#EVP_CTRL_CCM_SET_L
 0x14

	)

386 
	#EVP_CTRL_CCM_SET_MSGLEN
 0x15

	)

391 
	#EVP_CTRL_AEAD_TLS1_AAD
 0x16

	)

393 
	#EVP_CTRL_AEAD_SET_MAC_KEY
 0x17

	)

395 
	#EVP_CTRL_GCM_SET_IV_INV
 0x18

	)

399 
	#EVP_GCM_TLS_FIXED_IV_LEN
 4

	)

401 
	#EVP_GCM_TLS_EXPLICIT_IV_LEN
 8

	)

403 
	#EVP_GCM_TLS_TAG_LEN
 16

	)

406 
	sevp_cùhî_öfo_°


408 c⁄° 
EVP_CIPHER
 *
cùhî
;

409 
iv
[
EVP_MAX_IV_LENGTH
];

410 } 
	tEVP_CIPHER_INFO
;

412 
	sevp_cùhî_˘x_°


414 c⁄° 
EVP_CIPHER
 *
cùhî
;

415 
ENGINE
 *
ígöe
;

416 
í¸y±
;

417 
buf_Àn
;

419 
oiv
[
EVP_MAX_IV_LENGTH
];

420 
iv
[
EVP_MAX_IV_LENGTH
];

421 
buf
[
EVP_MAX_BLOCK_LENGTH
];

422 
num
;

424 *
≠p_d©a
;

425 
key_Àn
;

426 
Êags
;

427 *
cùhî_d©a
;

428 
föÆ_u£d
;

429 
block_mask
;

430 
föÆ
[
EVP_MAX_BLOCK_LENGTH
];

433 
	sevp_Encode_Ctx_°


435 
num
;

436 
Àngth
;

441 
íc_d©a
[80];

442 
löe_num
;

443 
ex≥˘_∆
;

444 } 
	tEVP_ENCODE_CTX
;

447 (
EVP_PBE_KEYGEN
)(
	tEVP_CIPHER_CTX
 *
	t˘x
, c⁄° *
	t∑ss
, 
	t∑s¶í
,

448 
	tASN1_TYPE
 *
	t∑øm
, c⁄° 
	tEVP_CIPHER
 *
	tcùhî
,

449 c⁄° 
	tEVP_MD
 *
	tmd
, 
	tí_de
);

451 #i‚de‡
OPENSSL_NO_RSA


452 
	#EVP_PKEY_assign_RSA
(
pkey
,
rß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_RSA
,\

453 (*)(
rß
))

	)

456 #i‚de‡
OPENSSL_NO_DSA


457 
	#EVP_PKEY_assign_DSA
(
pkey
,
dß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DSA
,\

458 (*)(
dß
))

	)

461 #i‚de‡
OPENSSL_NO_DH


462 
	#EVP_PKEY_assign_DH
(
pkey
,
dh
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DH
,\

463 (*)(
dh
))

	)

466 #i‚de‡
OPENSSL_NO_EC


467 
	#EVP_PKEY_assign_EC_KEY
(
pkey
,
eckey
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_EC
,\

468 (*)(
eckey
))

	)

472 
	#EVP_gë_dige°bynid
(
a
Ë
	`EVP_gë_dige°by«me
(
	`OBJ_nid2¢
◊))

	)

473 
	#EVP_gë_dige°byobj
(
a
Ë
	`EVP_gë_dige°bynid
(
	`OBJ_obj2nid
◊))

	)

474 
	#EVP_gë_cùhîbynid
(
a
Ë
	`EVP_gë_cùhîby«me
(
	`OBJ_nid2¢
◊))

	)

475 
	#EVP_gë_cùhîbyobj
(
a
Ë
	`EVP_gë_cùhîbynid
(
	`OBJ_obj2nid
◊))

	)

477 
EVP_MD_ty≥
(c⁄° 
EVP_MD
 *
md
);

478 
	#EVP_MD_nid
(
e
Ë
	`EVP_MD_ty≥
”)

	)

479 
	#EVP_MD_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_MD_nid
”))

	)

480 
EVP_MD_pkey_ty≥
(c⁄° 
EVP_MD
 *
md
);

481 
EVP_MD_size
(c⁄° 
EVP_MD
 *
md
);

482 
EVP_MD_block_size
(c⁄° 
EVP_MD
 *
md
);

483 
EVP_MD_Êags
(c⁄° 
EVP_MD
 *
md
);

485 c⁄° 
EVP_MD
 *
EVP_MD_CTX_md
(c⁄° 
EVP_MD_CTX
 *
˘x
);

486 
	#EVP_MD_CTX_size
(
e
Ë
	`EVP_MD_size
(
	`EVP_MD_CTX_md
”))

	)

487 
	#EVP_MD_CTX_block_size
(
e
Ë
	`EVP_MD_block_size
(
	`EVP_MD_CTX_md
”))

	)

488 
	#EVP_MD_CTX_ty≥
(
e
Ë
	`EVP_MD_ty≥
(
	`EVP_MD_CTX_md
”))

	)

490 
EVP_CIPHER_nid
(c⁄° 
EVP_CIPHER
 *
cùhî
);

491 
	#EVP_CIPHER_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_CIPHER_nid
”))

	)

492 
EVP_CIPHER_block_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

493 
EVP_CIPHER_key_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

494 
EVP_CIPHER_iv_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

495 
EVP_CIPHER_Êags
(c⁄° 
EVP_CIPHER
 *
cùhî
);

496 
	#EVP_CIPHER_mode
(
e
Ë(
	`EVP_CIPHER_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

498 c⁄° 
EVP_CIPHER
 * 
EVP_CIPHER_CTX_cùhî
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

499 
EVP_CIPHER_CTX_nid
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

500 
EVP_CIPHER_CTX_block_size
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

501 
EVP_CIPHER_CTX_key_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

502 
EVP_CIPHER_CTX_iv_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

503 
EVP_CIPHER_CTX_c›y
(
EVP_CIPHER_CTX
 *
out
, c⁄° EVP_CIPHER_CTX *
ö
);

504 * 
EVP_CIPHER_CTX_gë_≠p_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

505 
EVP_CIPHER_CTX_£t_≠p_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
d©a
);

506 
	#EVP_CIPHER_CTX_ty≥
(
c
Ë
	`EVP_CIPHER_ty≥
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

507 
EVP_CIPHER_CTX_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

508 
	#EVP_CIPHER_CTX_mode
(
e
Ë(
	`EVP_CIPHER_CTX_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

510 
	#EVP_ENCODE_LENGTH
(
l
Ë((÷+2)/3*4)+÷/48+1)*2+80)

	)

511 
	#EVP_DECODE_LENGTH
(
l
Ë(÷+3)/4*3+80)

	)

513 
	#EVP_SignInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

514 
	#EVP_SignInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

515 
	#EVP_SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

516 
	#EVP_VîifyInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

517 
	#EVP_VîifyInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

518 
	#EVP_VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

519 
	#EVP_O≥nUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_De¸y±Upd©e
◊,b,c,d,e)

	)

520 
	#EVP_SólUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_En¸y±Upd©e
◊,b,c,d,e)

	)

521 
	#EVP_Dige°SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

522 
	#EVP_Dige°VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

524 #ifde‡
CONST_STRICT


525 
BIO_£t_md
(
BIO
 *,c⁄° 
EVP_MD
 *
md
);

527 
	#BIO_£t_md
(
b
,
md
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD
,0,(*)md)

	)

529 
	#BIO_gë_md
(
b
,
mdp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD
,0,(*)mdp)

	)

530 
	#BIO_gë_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD_CTX
,0,(*)md˝)

	)

531 
	#BIO_£t_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD_CTX
,0,(*)md˝)

	)

532 
	#BIO_gë_cùhî_°©us
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_STATUS
,0,
NULL
)

	)

533 
	#BIO_gë_cùhî_˘x
(
b
,
c_µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_CTX
,0,(*)c_µ)

	)

535 
EVP_Cùhî
(
EVP_CIPHER_CTX
 *
c
,

536 *
out
,

537 c⁄° *
ö
,

538 
öl
);

540 
	#EVP_add_cùhî_Æüs
(
n
,
Æüs
) \

541 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

542 
	#EVP_add_dige°_Æüs
(
n
,
Æüs
) \

543 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

544 
	#EVP_dñëe_cùhî_Æüs
(
Æüs
) \

545 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
);

	)

546 
	#EVP_dñëe_dige°_Æüs
(
Æüs
) \

547 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
);

	)

549 
EVP_MD_CTX_öô
(
EVP_MD_CTX
 *
˘x
);

550 
EVP_MD_CTX_˛ónup
(
EVP_MD_CTX
 *
˘x
);

551 
EVP_MD_CTX
 *
EVP_MD_CTX_¸óã
();

552 
EVP_MD_CTX_de°roy
(
EVP_MD_CTX
 *
˘x
);

553 
EVP_MD_CTX_c›y_ex
(
EVP_MD_CTX
 *
out
,c⁄° EVP_MD_CTX *
ö
);

554 
EVP_MD_CTX_£t_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

555 
EVP_MD_CTX_˛ór_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

556 
EVP_MD_CTX_ã°_Êags
(c⁄° 
EVP_MD_CTX
 *
˘x
,
Êags
);

557 
EVP_Dige°Inô_ex
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

558 
EVP_Dige°Upd©e
(
EVP_MD_CTX
 *
˘x
,c⁄° *
d
,

559 
size_t
 
˙t
);

560 
EVP_Dige°FöÆ_ex
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
);

561 
EVP_Dige°
(c⁄° *
d©a
, 
size_t
 
cou¡
,

562 *
md
, *
size
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

564 
EVP_MD_CTX_c›y
(
EVP_MD_CTX
 *
out
,c⁄° EVP_MD_CTX *
ö
);

565 
EVP_Dige°Inô
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
);

566 
EVP_Dige°FöÆ
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
);

568 
EVP_ªad_pw_°rög
(*
buf
,
Àngth
,c⁄° *
¥om±
,
vîify
);

569 
EVP_ªad_pw_°rög_mö
(*
buf
,
möÀn
,
maxÀn
,c⁄° *
¥om±
,
vîify
);

570 
EVP_£t_pw_¥om±
(c⁄° *
¥om±
);

571 * 
EVP_gë_pw_¥om±
();

573 
EVP_ByãsToKey
(c⁄° 
EVP_CIPHER
 *
ty≥
,c⁄° 
EVP_MD
 *
md
,

574 c⁄° *
ß…
, c⁄° *
d©a
,

575 
d©Æ
, 
cou¡
, *
key
,*
iv
);

577 
EVP_CIPHER_CTX_£t_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

578 
EVP_CIPHER_CTX_˛ór_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

579 
EVP_CIPHER_CTX_ã°_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
,
Êags
);

581 
EVP_En¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

582 c⁄° *
key
, c⁄° *
iv
);

583 
EVP_En¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

584 c⁄° *
key
, c⁄° *
iv
);

585 
EVP_En¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

586 *
oué
, c⁄° *
ö
, 
öl
);

587 
EVP_En¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

588 
EVP_En¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

590 
EVP_De¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

591 c⁄° *
key
, c⁄° *
iv
);

592 
EVP_De¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

593 c⁄° *
key
, c⁄° *
iv
);

594 
EVP_De¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

595 *
oué
, c⁄° *
ö
, 
öl
);

596 
EVP_De¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

597 
EVP_De¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

599 
EVP_CùhîInô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

600 c⁄° *
key
,c⁄° *
iv
,

601 
íc
);

602 
EVP_CùhîInô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

603 c⁄° *
key
,c⁄° *
iv
,

604 
íc
);

605 
EVP_CùhîUpd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

606 *
oué
, c⁄° *
ö
, 
öl
);

607 
EVP_CùhîFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

608 
EVP_CùhîFöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

610 
EVP_SignFöÆ
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
,

611 
EVP_PKEY
 *
pkey
);

613 
EVP_VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
,c⁄° *
sigbuf
,

614 
sigÀn
,
EVP_PKEY
 *
pkey
);

616 
EVP_Dige°SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

617 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
, 
EVP_PKEY
 *
pkey
);

618 
EVP_Dige°SignFöÆ
(
EVP_MD_CTX
 *
˘x
,

619 *
sigªt
, 
size_t
 *
sigÀn
);

621 
EVP_Dige°VîifyInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

622 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
, 
EVP_PKEY
 *
pkey
);

623 
EVP_Dige°VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
,

624 *
sig
, 
size_t
 
sigÀn
);

626 
EVP_O≥nInô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
ty≥
,

627 c⁄° *
ek
, 
ekl
, c⁄° *
iv
,

628 
EVP_PKEY
 *
¥iv
);

629 
EVP_O≥nFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

631 
EVP_SólInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

632 **
ek
, *
ekl
, *
iv
,

633 
EVP_PKEY
 **
pubk
, 
≈ubk
);

634 
EVP_SólFöÆ
(
EVP_CIPHER_CTX
 *
˘x
,*
out
,*
oué
);

636 
EVP_EncodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

637 
EVP_EncodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
,

638 c⁄° *
ö
,
öl
);

639 
EVP_EncodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
);

640 
EVP_EncodeBlock
(*
t
, c⁄° *
f
, 
n
);

642 
EVP_DecodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

643 
EVP_DecodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
,

644 c⁄° *
ö
, 
öl
);

645 
EVP_DecodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, 

646 *
out
, *
oué
);

647 
EVP_DecodeBlock
(*
t
, c⁄° *
f
, 
n
);

649 
EVP_CIPHER_CTX_öô
(
EVP_CIPHER_CTX
 *
a
);

650 
EVP_CIPHER_CTX_˛ónup
(
EVP_CIPHER_CTX
 *
a
);

651 
EVP_CIPHER_CTX
 *
EVP_CIPHER_CTX_√w
();

652 
EVP_CIPHER_CTX_‰ì
(
EVP_CIPHER_CTX
 *
a
);

653 
EVP_CIPHER_CTX_£t_key_Àngth
(
EVP_CIPHER_CTX
 *
x
, 
keyÀn
);

654 
EVP_CIPHER_CTX_£t_∑ddög
(
EVP_CIPHER_CTX
 *
c
, 
∑d
);

655 
EVP_CIPHER_CTX_˘æ
(
EVP_CIPHER_CTX
 *
˘x
, 
ty≥
, 
¨g
, *
±r
);

656 
EVP_CIPHER_CTX_ønd_key
(
EVP_CIPHER_CTX
 *
˘x
, *
key
);

658 #i‚de‡
OPENSSL_NO_BIO


659 
BIO_METHOD
 *
BIO_f_md
();

660 
BIO_METHOD
 *
BIO_f_ba£64
();

661 
BIO_METHOD
 *
BIO_f_cùhî
();

662 
BIO_METHOD
 *
BIO_f_ªlübÀ
();

663 
BIO_£t_cùhî
(
BIO
 *
b
,c⁄° 
EVP_CIPHER
 *
c
,c⁄° *
k
,

664 c⁄° *
i
, 
íc
);

667 c⁄° 
EVP_MD
 *
EVP_md_nuŒ
();

668 #i‚de‡
OPENSSL_NO_MD2


669 c⁄° 
EVP_MD
 *
EVP_md2
();

671 #i‚de‡
OPENSSL_NO_MD4


672 c⁄° 
EVP_MD
 *
EVP_md4
();

674 #i‚de‡
OPENSSL_NO_MD5


675 c⁄° 
EVP_MD
 *
EVP_md5
();

677 #i‚de‡
OPENSSL_NO_SHA


678 c⁄° 
EVP_MD
 *
EVP_sha
();

679 c⁄° 
EVP_MD
 *
EVP_sha1
();

680 c⁄° 
EVP_MD
 *
EVP_dss
();

681 c⁄° 
EVP_MD
 *
EVP_dss1
();

682 c⁄° 
EVP_MD
 *
EVP_ecdß
();

684 #i‚de‡
OPENSSL_NO_SHA256


685 c⁄° 
EVP_MD
 *
EVP_sha224
();

686 c⁄° 
EVP_MD
 *
EVP_sha256
();

688 #i‚de‡
OPENSSL_NO_SHA512


689 c⁄° 
EVP_MD
 *
EVP_sha384
();

690 c⁄° 
EVP_MD
 *
EVP_sha512
();

692 #i‚de‡
OPENSSL_NO_MDC2


693 c⁄° 
EVP_MD
 *
EVP_mdc2
();

695 #i‚de‡
OPENSSL_NO_RIPEMD


696 c⁄° 
EVP_MD
 *
EVP_rùemd160
();

698 #i‚de‡
OPENSSL_NO_WHIRLPOOL


699 c⁄° 
EVP_MD
 *
EVP_whúÕoﬁ
();

701 c⁄° 
EVP_CIPHER
 *
EVP_íc_nuŒ
();

702 #i‚de‡
OPENSSL_NO_DES


703 c⁄° 
EVP_CIPHER
 *
EVP_des_ecb
();

704 c⁄° 
EVP_CIPHER
 *
EVP_des_ede
();

705 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3
();

706 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ecb
();

707 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ecb
();

708 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb64
();

709 
	#EVP_des_cfb
 
EVP_des_cfb64


	)

710 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb1
();

711 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb8
();

712 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb64
();

713 
	#EVP_des_ede_cfb
 
EVP_des_ede_cfb64


	)

715 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb1
();

716 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb8
();

718 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb64
();

719 
	#EVP_des_ede3_cfb
 
EVP_des_ede3_cfb64


	)

720 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb1
();

721 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb8
();

722 c⁄° 
EVP_CIPHER
 *
EVP_des_ofb
();

723 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ofb
();

724 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ofb
();

725 c⁄° 
EVP_CIPHER
 *
EVP_des_cbc
();

726 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cbc
();

727 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cbc
();

728 c⁄° 
EVP_CIPHER
 *
EVP_desx_cbc
();

732 #ifde‡
OPENSSL_OPENBSD_DEV_CRYPTO


733 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_des_ede3_cbc
();

734 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_rc4
();

735 c⁄° 
EVP_MD
 *
EVP_dev_¸y±o_md5
();

739 #i‚de‡
OPENSSL_NO_RC4


740 c⁄° 
EVP_CIPHER
 *
EVP_rc4
();

741 c⁄° 
EVP_CIPHER
 *
EVP_rc4_40
();

742 #i‚de‡
OPENSSL_NO_MD5


743 c⁄° 
EVP_CIPHER
 *
EVP_rc4_hmac_md5
();

746 #i‚de‡
OPENSSL_NO_IDEA


747 c⁄° 
EVP_CIPHER
 *
EVP_idó_ecb
();

748 c⁄° 
EVP_CIPHER
 *
EVP_idó_cfb64
();

749 
	#EVP_idó_cfb
 
EVP_idó_cfb64


	)

750 c⁄° 
EVP_CIPHER
 *
EVP_idó_ofb
();

751 c⁄° 
EVP_CIPHER
 *
EVP_idó_cbc
();

753 #i‚de‡
OPENSSL_NO_RC2


754 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ecb
();

755 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cbc
();

756 c⁄° 
EVP_CIPHER
 *
EVP_rc2_40_cbc
();

757 c⁄° 
EVP_CIPHER
 *
EVP_rc2_64_cbc
();

758 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cfb64
();

759 
	#EVP_rc2_cfb
 
EVP_rc2_cfb64


	)

760 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ofb
();

762 #i‚de‡
OPENSSL_NO_BF


763 c⁄° 
EVP_CIPHER
 *
EVP_bf_ecb
();

764 c⁄° 
EVP_CIPHER
 *
EVP_bf_cbc
();

765 c⁄° 
EVP_CIPHER
 *
EVP_bf_cfb64
();

766 
	#EVP_bf_cfb
 
EVP_bf_cfb64


	)

767 c⁄° 
EVP_CIPHER
 *
EVP_bf_ofb
();

769 #i‚de‡
OPENSSL_NO_CAST


770 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ecb
();

771 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cbc
();

772 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cfb64
();

773 
	#EVP_ˇ°5_cfb
 
EVP_ˇ°5_cfb64


	)

774 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ofb
();

776 #i‚de‡
OPENSSL_NO_RC5


777 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cbc
();

778 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ecb
();

779 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cfb64
();

780 
	#EVP_rc5_32_12_16_cfb
 
EVP_rc5_32_12_16_cfb64


	)

781 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ofb
();

783 #i‚de‡
OPENSSL_NO_AES


784 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ecb
();

785 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc
();

786 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb1
();

787 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb8
();

788 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb128
();

789 
	#EVP_´s_128_cfb
 
EVP_´s_128_cfb128


	)

790 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ofb
();

791 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_˘r
();

792 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_gcm
();

793 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ccm
();

794 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_xts
();

795 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ecb
();

796 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cbc
();

797 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb1
();

798 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb8
();

799 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb128
();

800 
	#EVP_´s_192_cfb
 
EVP_´s_192_cfb128


	)

801 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ofb
();

802 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_˘r
();

803 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_gcm
();

804 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ccm
();

805 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ecb
();

806 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc
();

807 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb1
();

808 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb8
();

809 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb128
();

810 
	#EVP_´s_256_cfb
 
EVP_´s_256_cfb128


	)

811 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ofb
();

812 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_˘r
();

813 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_gcm
();

814 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ccm
();

815 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_xts
();

816 #i‡!
deföed
(
OPENSSL_NO_SHA
Ë&& !deföed(
OPENSSL_NO_SHA1
)

817 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc_hmac_sha1
();

818 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc_hmac_sha1
();

821 #i‚de‡
OPENSSL_NO_CAMELLIA


822 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ecb
();

823 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cbc
();

824 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb1
();

825 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb8
();

826 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb128
();

827 
	#EVP_ˇmñlü_128_cfb
 
EVP_ˇmñlü_128_cfb128


	)

828 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ofb
();

829 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ecb
();

830 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cbc
();

831 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb1
();

832 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb8
();

833 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb128
();

834 
	#EVP_ˇmñlü_192_cfb
 
EVP_ˇmñlü_192_cfb128


	)

835 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ofb
();

836 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ecb
();

837 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cbc
();

838 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb1
();

839 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb8
();

840 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb128
();

841 
	#EVP_ˇmñlü_256_cfb
 
EVP_ˇmñlü_256_cfb128


	)

842 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ofb
();

845 #i‚de‡
OPENSSL_NO_SEED


846 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ecb
();

847 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cbc
();

848 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cfb128
();

849 
	#EVP_£ed_cfb
 
EVP_£ed_cfb128


	)

850 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ofb
();

853 
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
();

854 
OPENSSL_add_Æl_Æg‹ôhms_c⁄f
();

856 #ifde‡
OPENSSL_LOAD_CONF


857 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

858 
	`OPENSSL_add_Æl_Æg‹ôhms_c⁄f
()

	)

860 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

861 
	`OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
()

	)

864 
O≥nSSL_add_Æl_cùhîs
();

865 
O≥nSSL_add_Æl_dige°s
();

866 
	#SSLóy_add_Æl_Æg‹ôhms
(Ë
	`O≥nSSL_add_Æl_Æg‹ôhms
()

	)

867 
	#SSLóy_add_Æl_cùhîs
(Ë
	`O≥nSSL_add_Æl_cùhîs
()

	)

868 
	#SSLóy_add_Æl_dige°s
(Ë
	`O≥nSSL_add_Æl_dige°s
()

	)

870 
EVP_add_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
);

871 
EVP_add_dige°
(c⁄° 
EVP_MD
 *
dige°
);

873 c⁄° 
EVP_CIPHER
 *
EVP_gë_cùhîby«me
(c⁄° *
«me
);

874 c⁄° 
EVP_MD
 *
EVP_gë_dige°by«me
(c⁄° *
«me
);

875 
EVP_˛ónup
();

877 
EVP_CIPHER_do_Æl
((*
‚
)(c⁄° 
EVP_CIPHER
 *
cùh
,

878 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

879 
EVP_CIPHER_do_Æl_s‹ãd
((*
‚
)(c⁄° 
EVP_CIPHER
 *
cùh
,

880 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

882 
EVP_MD_do_Æl
((*
‚
)(c⁄° 
EVP_MD
 *
cùh
,

883 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

884 
EVP_MD_do_Æl_s‹ãd
((*
‚
)(c⁄° 
EVP_MD
 *
cùh
,

885 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

887 
EVP_PKEY_de¸y±_ﬁd
(*
dec_key
,

888 c⁄° *
íc_key
,
íc_key_Àn
,

889 
EVP_PKEY
 *
¥iv©e_key
);

890 
EVP_PKEY_í¸y±_ﬁd
(*
íc_key
,

891 c⁄° *
key
,
key_Àn
,

892 
EVP_PKEY
 *
pub_key
);

893 
EVP_PKEY_ty≥
(
ty≥
);

894 
EVP_PKEY_id
(c⁄° 
EVP_PKEY
 *
pkey
);

895 
EVP_PKEY_ba£_id
(c⁄° 
EVP_PKEY
 *
pkey
);

896 
EVP_PKEY_bôs
(
EVP_PKEY
 *
pkey
);

897 
EVP_PKEY_size
(
EVP_PKEY
 *
pkey
);

898 
EVP_PKEY_£t_ty≥
(
EVP_PKEY
 *
pkey
,
ty≥
);

899 
EVP_PKEY_£t_ty≥_°r
(
EVP_PKEY
 *
pkey
, c⁄° *
°r
, 
Àn
);

900 
EVP_PKEY_assign
(
EVP_PKEY
 *
pkey
,
ty≥
,*
key
);

901 * 
EVP_PKEY_gë0
(
EVP_PKEY
 *
pkey
);

903 #i‚de‡
OPENSSL_NO_RSA


904 
rß_°
;

905 
EVP_PKEY_£t1_RSA
(
EVP_PKEY
 *
pkey
,
rß_°
 *
key
);

906 
rß_°
 *
EVP_PKEY_gë1_RSA
(
EVP_PKEY
 *
pkey
);

908 #i‚de‡
OPENSSL_NO_DSA


909 
dß_°
;

910 
EVP_PKEY_£t1_DSA
(
EVP_PKEY
 *
pkey
,
dß_°
 *
key
);

911 
dß_°
 *
EVP_PKEY_gë1_DSA
(
EVP_PKEY
 *
pkey
);

913 #i‚de‡
OPENSSL_NO_DH


914 
dh_°
;

915 
EVP_PKEY_£t1_DH
(
EVP_PKEY
 *
pkey
,
dh_°
 *
key
);

916 
dh_°
 *
EVP_PKEY_gë1_DH
(
EVP_PKEY
 *
pkey
);

918 #i‚de‡
OPENSSL_NO_EC


919 
ec_key_°
;

920 
EVP_PKEY_£t1_EC_KEY
(
EVP_PKEY
 *
pkey
,
ec_key_°
 *
key
);

921 
ec_key_°
 *
EVP_PKEY_gë1_EC_KEY
(
EVP_PKEY
 *
pkey
);

924 
EVP_PKEY
 * 
EVP_PKEY_√w
();

925 
EVP_PKEY_‰ì
(
EVP_PKEY
 *
pkey
);

927 
EVP_PKEY
 * 
d2i_PublicKey
(
ty≥
,EVP_PKEY **
a
, c⁄° **
µ
,

928 
Àngth
);

929 
i2d_PublicKey
(
EVP_PKEY
 *
a
, **
µ
);

931 
EVP_PKEY
 * 
d2i_Priv©eKey
(
ty≥
,EVP_PKEY **
a
, c⁄° **
µ
,

932 
Àngth
);

933 
EVP_PKEY
 * 
d2i_AutoPriv©eKey
(EVP_PKEY **
a
, c⁄° **
µ
,

934 
Àngth
);

935 
i2d_Priv©eKey
(
EVP_PKEY
 *
a
, **
µ
);

937 
EVP_PKEY_c›y_∑ømëîs
(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
);

938 
EVP_PKEY_missög_∑ømëîs
(c⁄° 
EVP_PKEY
 *
pkey
);

939 
EVP_PKEY_ßve_∑ømëîs
(
EVP_PKEY
 *
pkey
,
mode
);

940 
EVP_PKEY_cmp_∑ømëîs
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

942 
EVP_PKEY_cmp
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

944 
EVP_PKEY_¥öt_public
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

945 
ödít
, 
ASN1_PCTX
 *
p˘x
);

946 
EVP_PKEY_¥öt_¥iv©e
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

947 
ödít
, 
ASN1_PCTX
 *
p˘x
);

948 
EVP_PKEY_¥öt_∑øms
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

949 
ödít
, 
ASN1_PCTX
 *
p˘x
);

951 
EVP_PKEY_gë_deÁu…_dige°_nid
(
EVP_PKEY
 *
pkey
, *
≤id
);

953 
EVP_CIPHER_ty≥
(c⁄° 
EVP_CIPHER
 *
˘x
);

956 
EVP_CIPHER_∑øm_to_a¢1
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

957 
EVP_CIPHER_a¢1_to_∑øm
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

960 
EVP_CIPHER_£t_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

961 
EVP_CIPHER_gë_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

964 
PKCS5_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

965 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

966 
í_de
);

967 
PKCS5_PBKDF2_HMAC_SHA1
(c⁄° *
∑ss
, 
∑s¶í
,

968 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

969 
keyÀn
, *
out
);

970 
PKCS5_PBKDF2_HMAC
(c⁄° *
∑ss
, 
∑s¶í
,

971 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

972 c⁄° 
EVP_MD
 *
dige°
,

973 
keyÀn
, *
out
);

974 
PKCS5_v2_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

975 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

976 
í_de
);

978 
PKCS5_PBE_add
();

980 
EVP_PBE_CùhîInô
 (
ASN1_OBJECT
 *
pbe_obj
, c⁄° *
∑ss
, 
∑s¶í
,

981 
ASN1_TYPE
 *
∑øm
, 
EVP_CIPHER_CTX
 *
˘x
, 
í_de
);

986 
	#EVP_PBE_TYPE_OUTER
 0x0

	)

988 
	#EVP_PBE_TYPE_PRF
 0x1

	)

990 
EVP_PBE_Æg_add_ty≥
(
pbe_ty≥
, 
pbe_nid
, 
cùhî_nid
, 
md_nid
,

991 
EVP_PBE_KEYGEN
 *
keygí
);

992 
EVP_PBE_Æg_add
(
nid
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

993 
EVP_PBE_KEYGEN
 *
keygí
);

994 
EVP_PBE_föd
(
ty≥
, 
pbe_nid
,

995 *
p˙id
, *
pmnid
, 
EVP_PBE_KEYGEN
 **
pkeygí
);

996 
EVP_PBE_˛ónup
();

998 
	#ASN1_PKEY_ALIAS
 0x1

	)

999 
	#ASN1_PKEY_DYNAMIC
 0x2

	)

1000 
	#ASN1_PKEY_SIGPARAM_NULL
 0x4

	)

1002 
	#ASN1_PKEY_CTRL_PKCS7_SIGN
 0x1

	)

1003 
	#ASN1_PKEY_CTRL_PKCS7_ENCRYPT
 0x2

	)

1004 
	#ASN1_PKEY_CTRL_DEFAULT_MD_NID
 0x3

	)

1005 
	#ASN1_PKEY_CTRL_CMS_SIGN
 0x5

	)

1006 
	#ASN1_PKEY_CTRL_CMS_ENVELOPE
 0x7

	)

1008 
EVP_PKEY_a¢1_gë_cou¡
();

1009 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_gë0
(
idx
);

1010 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd
(
ENGINE
 **
≥
, 
ty≥
);

1011 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd_°r
(
ENGINE
 **
≥
,

1012 c⁄° *
°r
, 
Àn
);

1013 
EVP_PKEY_a¢1_add0
(c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1014 
EVP_PKEY_a¢1_add_Æüs
(
to
, 
‰om
);

1015 
EVP_PKEY_a¢1_gë0_öfo
(*
µkey_id
, *
pkey_ba£_id
, *
µkey_Êags
,

1016 c⁄° **
pöfo
, c⁄° **
µem_°r
,

1017 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1019 c⁄° 
EVP_PKEY_ASN1_METHOD
* 
EVP_PKEY_gë0_a¢1
(
EVP_PKEY
 *
pkey
);

1020 
EVP_PKEY_ASN1_METHOD
* 
EVP_PKEY_a¢1_√w
(
id
, 
Êags
,

1021 c⁄° *
≥m_°r
, c⁄° *
öfo
);

1022 
EVP_PKEY_a¢1_c›y
(
EVP_PKEY_ASN1_METHOD
 *
d°
,

1023 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
§c
);

1024 
EVP_PKEY_a¢1_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1025 
EVP_PKEY_a¢1_£t_public
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1026 (*
pub_decode
)(
EVP_PKEY
 *
pk
, 
X509_PUBKEY
 *
pub
),

1027 (*
pub_ícode
)(
X509_PUBKEY
 *
pub
, c⁄° 
EVP_PKEY
 *
pk
),

1028 (*
pub_cmp
)(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
),

1029 (*
pub_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

1030 
ASN1_PCTX
 *
p˘x
),

1031 (*
pkey_size
)(c⁄° 
EVP_PKEY
 *
pk
),

1032 (*
pkey_bôs
)(c⁄° 
EVP_PKEY
 *
pk
));

1033 
EVP_PKEY_a¢1_£t_¥iv©e
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1034 (*
¥iv_decode
)(
EVP_PKEY
 *
pk
, 
PKCS8_PRIV_KEY_INFO
 *
p8öf
),

1035 (*
¥iv_ícode
)(
PKCS8_PRIV_KEY_INFO
 *
p8
, c⁄° 
EVP_PKEY
 *
pk
),

1036 (*
¥iv_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

1037 
ASN1_PCTX
 *
p˘x
));

1038 
EVP_PKEY_a¢1_£t_∑øm
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1039 (*
∑øm_decode
)(
EVP_PKEY
 *
pkey
,

1040 c⁄° **
pdî
, 
dîÀn
),

1041 (*
∑øm_ícode
)(c⁄° 
EVP_PKEY
 *
pkey
, **
pdî
),

1042 (*
∑øm_missög
)(c⁄° 
EVP_PKEY
 *
pk
),

1043 (*
∑øm_c›y
)(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
),

1044 (*
∑øm_cmp
)(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
),

1045 (*
∑øm_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

1046 
ASN1_PCTX
 *
p˘x
));

1048 
EVP_PKEY_a¢1_£t_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1049 (*
pkey_‰ì
)(
EVP_PKEY
 *
pkey
));

1050 
EVP_PKEY_a¢1_£t_˘æ
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1051 (*
pkey_˘æ
)(
EVP_PKEY
 *
pkey
, 
›
,

1052 
¨g1
, *
¨g2
));

1055 
	#EVP_PKEY_OP_UNDEFINED
 0

	)

1056 
	#EVP_PKEY_OP_PARAMGEN
 (1<<1)

	)

1057 
	#EVP_PKEY_OP_KEYGEN
 (1<<2)

	)

1058 
	#EVP_PKEY_OP_SIGN
 (1<<3)

	)

1059 
	#EVP_PKEY_OP_VERIFY
 (1<<4)

	)

1060 
	#EVP_PKEY_OP_VERIFYRECOVER
 (1<<5)

	)

1061 
	#EVP_PKEY_OP_SIGNCTX
 (1<<6)

	)

1062 
	#EVP_PKEY_OP_VERIFYCTX
 (1<<7)

	)

1063 
	#EVP_PKEY_OP_ENCRYPT
 (1<<8)

	)

1064 
	#EVP_PKEY_OP_DECRYPT
 (1<<9)

	)

1065 
	#EVP_PKEY_OP_DERIVE
 (1<<10)

	)

1067 
	#EVP_PKEY_OP_TYPE_SIG
 \

1068 (
EVP_PKEY_OP_SIGN
 | 
EVP_PKEY_OP_VERIFY
 | 
EVP_PKEY_OP_VERIFYRECOVER
 \

1069 | 
EVP_PKEY_OP_SIGNCTX
 | 
EVP_PKEY_OP_VERIFYCTX
)

	)

1071 
	#EVP_PKEY_OP_TYPE_CRYPT
 \

1072 (
EVP_PKEY_OP_ENCRYPT
 | 
EVP_PKEY_OP_DECRYPT
)

	)

1074 
	#EVP_PKEY_OP_TYPE_NOGEN
 \

1075 (
EVP_PKEY_OP_SIG
 | 
EVP_PKEY_OP_CRYPT
 | 
EVP_PKEY_OP_DERIVE
)

	)

1077 
	#EVP_PKEY_OP_TYPE_GEN
 \

1078 (
EVP_PKEY_OP_PARAMGEN
 | 
EVP_PKEY_OP_KEYGEN
)

	)

1080 
	#EVP_PKEY_CTX_£t_sig«tuª_md
(
˘x
, 
md
) \

1081 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_TYPE_SIG
, \

1082 
EVP_PKEY_CTRL_MD
, 0, (*)
md
)

	)

1084 
	#EVP_PKEY_CTRL_MD
 1

	)

1085 
	#EVP_PKEY_CTRL_PEER_KEY
 2

	)

1087 
	#EVP_PKEY_CTRL_PKCS7_ENCRYPT
 3

	)

1088 
	#EVP_PKEY_CTRL_PKCS7_DECRYPT
 4

	)

1090 
	#EVP_PKEY_CTRL_PKCS7_SIGN
 5

	)

1092 
	#EVP_PKEY_CTRL_SET_MAC_KEY
 6

	)

1094 
	#EVP_PKEY_CTRL_DIGESTINIT
 7

	)

1097 
	#EVP_PKEY_CTRL_SET_IV
 8

	)

1099 
	#EVP_PKEY_CTRL_CMS_ENCRYPT
 9

	)

1100 
	#EVP_PKEY_CTRL_CMS_DECRYPT
 10

	)

1101 
	#EVP_PKEY_CTRL_CMS_SIGN
 11

	)

1103 
	#EVP_PKEY_CTRL_CIPHER
 12

	)

1105 
	#EVP_PKEY_ALG_CTRL
 0x1000

	)

1108 
	#EVP_PKEY_FLAG_AUTOARGLEN
 2

	)

1112 
	#EVP_PKEY_FLAG_SIGCTX_CUSTOM
 4

	)

1114 c⁄° 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_föd
(
ty≥
);

1115 
EVP_PKEY_METHOD
* 
EVP_PKEY_mëh_√w
(
id
, 
Êags
);

1116 
EVP_PKEY_mëh_gë0_öfo
(*
µkey_id
, *
pÊags
,

1117 c⁄° 
EVP_PKEY_METHOD
 *
mëh
);

1118 
EVP_PKEY_mëh_c›y
(
EVP_PKEY_METHOD
 *
d°
, c⁄° EVP_PKEY_METHOD *
§c
);

1119 
EVP_PKEY_mëh_‰ì
(
EVP_PKEY_METHOD
 *
pmëh
);

1120 
EVP_PKEY_mëh_add0
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
);

1122 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w
(
EVP_PKEY
 *
pkey
, 
ENGINE
 *
e
);

1123 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w_id
(
id
, 
ENGINE
 *
e
);

1124 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_dup
(EVP_PKEY_CTX *
˘x
);

1125 
EVP_PKEY_CTX_‰ì
(
EVP_PKEY_CTX
 *
˘x
);

1127 
EVP_PKEY_CTX_˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
keyty≥
, 
›ty≥
,

1128 
cmd
, 
p1
, *
p2
);

1129 
EVP_PKEY_CTX_˘æ_°r
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
ty≥
,

1130 c⁄° *
vÆue
);

1132 
EVP_PKEY_CTX_gë_›î©i⁄
(
EVP_PKEY_CTX
 *
˘x
);

1133 
EVP_PKEY_CTX_£t0_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, *
d©
, 
d©Àn
);

1135 
EVP_PKEY
 *
EVP_PKEY_√w_mac_key
(
ty≥
, 
ENGINE
 *
e
,

1136 c⁄° *
key
, 
keyÀn
);

1138 
EVP_PKEY_CTX_£t_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1139 *
EVP_PKEY_CTX_gë_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1140 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_pkey
(
EVP_PKEY_CTX
 *
˘x
);

1142 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_≥îkey
(
EVP_PKEY_CTX
 *
˘x
);

1144 
EVP_PKEY_CTX_£t_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1145 *
EVP_PKEY_CTX_gë_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1147 
EVP_PKEY_sign_öô
(
EVP_PKEY_CTX
 *
˘x
);

1148 
EVP_PKEY_sign
(
EVP_PKEY_CTX
 *
˘x
,

1149 *
sig
, 
size_t
 *
sigÀn
,

1150 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1151 
EVP_PKEY_vîify_öô
(
EVP_PKEY_CTX
 *
˘x
);

1152 
EVP_PKEY_vîify
(
EVP_PKEY_CTX
 *
˘x
,

1153 c⁄° *
sig
, 
size_t
 
sigÀn
,

1154 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1155 
EVP_PKEY_vîify_ªcovî_öô
(
EVP_PKEY_CTX
 *
˘x
);

1156 
EVP_PKEY_vîify_ªcovî
(
EVP_PKEY_CTX
 *
˘x
,

1157 *
rout
, 
size_t
 *
rouéí
,

1158 c⁄° *
sig
, 
size_t
 
sigÀn
);

1159 
EVP_PKEY_í¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1160 
EVP_PKEY_í¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1161 *
out
, 
size_t
 *
ouéí
,

1162 c⁄° *
ö
, 
size_t
 
öÀn
);

1163 
EVP_PKEY_de¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1164 
EVP_PKEY_de¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1165 *
out
, 
size_t
 *
ouéí
,

1166 c⁄° *
ö
, 
size_t
 
öÀn
);

1168 
EVP_PKEY_dîive_öô
(
EVP_PKEY_CTX
 *
˘x
);

1169 
EVP_PKEY_dîive_£t_≥î
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
≥î
);

1170 
EVP_PKEY_dîive
(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
);

1172 
	tEVP_PKEY_gí_cb
(
	tEVP_PKEY_CTX
 *
	t˘x
);

1174 
EVP_PKEY_∑ømgí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1175 
EVP_PKEY_∑ømgí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1176 
EVP_PKEY_keygí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1177 
EVP_PKEY_keygí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1179 
EVP_PKEY_CTX_£t_cb
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY_gí_cb
 *
cb
);

1180 
EVP_PKEY_gí_cb
 *
EVP_PKEY_CTX_gë_cb
(
EVP_PKEY_CTX
 *
˘x
);

1182 
EVP_PKEY_CTX_gë_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, 
idx
);

1184 
EVP_PKEY_mëh_£t_öô
(
EVP_PKEY_METHOD
 *
pmëh
,

1185 (*
öô
)(
EVP_PKEY_CTX
 *
˘x
));

1187 
EVP_PKEY_mëh_£t_c›y
(
EVP_PKEY_METHOD
 *
pmëh
,

1188 (*
c›y
)(
EVP_PKEY_CTX
 *
d°
, EVP_PKEY_CTX *
§c
));

1190 
EVP_PKEY_mëh_£t_˛ónup
(
EVP_PKEY_METHOD
 *
pmëh
,

1191 (*
˛ónup
)(
EVP_PKEY_CTX
 *
˘x
));

1193 
EVP_PKEY_mëh_£t_∑ømgí
(
EVP_PKEY_METHOD
 *
pmëh
,

1194 (*
∑ømgí_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1195 (*
∑ømgí
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
));

1197 
EVP_PKEY_mëh_£t_keygí
(
EVP_PKEY_METHOD
 *
pmëh
,

1198 (*
keygí_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1199 (*
keygí
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
));

1201 
EVP_PKEY_mëh_£t_sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1202 (*
sign_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1203 (*
sign
)(
EVP_PKEY_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

1204 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1206 
EVP_PKEY_mëh_£t_vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1207 (*
vîify_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1208 (*
vîify
)(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
sig
, 
size_t
 
sigÀn
,

1209 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1211 
EVP_PKEY_mëh_£t_vîify_ªcovî
(
EVP_PKEY_METHOD
 *
pmëh
,

1212 (*
vîify_ªcovî_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1213 (*
vîify_ªcovî
)(
EVP_PKEY_CTX
 *
˘x
,

1214 *
sig
, 
size_t
 *
sigÀn
,

1215 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1217 
EVP_PKEY_mëh_£t_sign˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1218 (*
sign˘x_öô
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_MD_CTX
 *
m˘x
),

1219 (*
sign˘x
)(
EVP_PKEY_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

1220 
EVP_MD_CTX
 *
m˘x
));

1222 
EVP_PKEY_mëh_£t_vîify˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1223 (*
vîify˘x_öô
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_MD_CTX
 *
m˘x
),

1224 (*
vîify˘x
)(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
sig
,
sigÀn
,

1225 
EVP_MD_CTX
 *
m˘x
));

1227 
EVP_PKEY_mëh_£t_í¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1228 (*
í¸y±_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1229 (*
í¸y±‚
)(
EVP_PKEY_CTX
 *
˘x
, *
out
, 
size_t
 *
ouéí
,

1230 c⁄° *
ö
, 
size_t
 
öÀn
));

1232 
EVP_PKEY_mëh_£t_de¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1233 (*
de¸y±_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1234 (*
de¸y±
)(
EVP_PKEY_CTX
 *
˘x
, *
out
, 
size_t
 *
ouéí
,

1235 c⁄° *
ö
, 
size_t
 
öÀn
));

1237 
EVP_PKEY_mëh_£t_dîive
(
EVP_PKEY_METHOD
 *
pmëh
,

1238 (*
dîive_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1239 (*
dîive
)(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
));

1241 
EVP_PKEY_mëh_£t_˘æ
(
EVP_PKEY_METHOD
 *
pmëh
,

1242 (*
˘æ
)(
EVP_PKEY_CTX
 *
˘x
, 
ty≥
, 
p1
, *
p2
),

1243 (*
˘æ_°r
)(
EVP_PKEY_CTX
 *
˘x
,

1244 c⁄° *
ty≥
, c⁄° *
vÆue
));

1250 
ERR_lﬂd_EVP_°rögs
();

1255 
	#EVP_F_AESNI_INIT_KEY
 165

	)

1256 
	#EVP_F_AESNI_XTS_CIPHER
 176

	)

1257 
	#EVP_F_AES_INIT_KEY
 133

	)

1258 
	#EVP_F_AES_XTS
 172

	)

1259 
	#EVP_F_AES_XTS_CIPHER
 175

	)

1260 
	#EVP_F_CAMELLIA_INIT_KEY
 159

	)

1261 
	#EVP_F_CMAC_INIT
 173

	)

1262 
	#EVP_F_D2I_PKEY
 100

	)

1263 
	#EVP_F_DO_SIGVER_INIT
 161

	)

1264 
	#EVP_F_DSAPKEY2PKCS8
 134

	)

1265 
	#EVP_F_DSA_PKEY2PKCS8
 135

	)

1266 
	#EVP_F_ECDSA_PKEY2PKCS8
 129

	)

1267 
	#EVP_F_ECKEY_PKEY2PKCS8
 132

	)

1268 
	#EVP_F_EVP_CIPHERINIT_EX
 123

	)

1269 
	#EVP_F_EVP_CIPHER_CTX_COPY
 163

	)

1270 
	#EVP_F_EVP_CIPHER_CTX_CTRL
 124

	)

1271 
	#EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH
 122

	)

1272 
	#EVP_F_EVP_DECRYPTFINAL_EX
 101

	)

1273 
	#EVP_F_EVP_DIGESTINIT_EX
 128

	)

1274 
	#EVP_F_EVP_ENCRYPTFINAL_EX
 127

	)

1275 
	#EVP_F_EVP_MD_CTX_COPY_EX
 110

	)

1276 
	#EVP_F_EVP_MD_SIZE
 162

	)

1277 
	#EVP_F_EVP_OPENINIT
 102

	)

1278 
	#EVP_F_EVP_PBE_ALG_ADD
 115

	)

1279 
	#EVP_F_EVP_PBE_ALG_ADD_TYPE
 160

	)

1280 
	#EVP_F_EVP_PBE_CIPHERINIT
 116

	)

1281 
	#EVP_F_EVP_PKCS82PKEY
 111

	)

1282 
	#EVP_F_EVP_PKCS82PKEY_BROKEN
 136

	)

1283 
	#EVP_F_EVP_PKEY2PKCS8_BROKEN
 113

	)

1284 
	#EVP_F_EVP_PKEY_COPY_PARAMETERS
 103

	)

1285 
	#EVP_F_EVP_PKEY_CTX_CTRL
 137

	)

1286 
	#EVP_F_EVP_PKEY_CTX_CTRL_STR
 150

	)

1287 
	#EVP_F_EVP_PKEY_CTX_DUP
 156

	)

1288 
	#EVP_F_EVP_PKEY_DECRYPT
 104

	)

1289 
	#EVP_F_EVP_PKEY_DECRYPT_INIT
 138

	)

1290 
	#EVP_F_EVP_PKEY_DECRYPT_OLD
 151

	)

1291 
	#EVP_F_EVP_PKEY_DERIVE
 153

	)

1292 
	#EVP_F_EVP_PKEY_DERIVE_INIT
 154

	)

1293 
	#EVP_F_EVP_PKEY_DERIVE_SET_PEER
 155

	)

1294 
	#EVP_F_EVP_PKEY_ENCRYPT
 105

	)

1295 
	#EVP_F_EVP_PKEY_ENCRYPT_INIT
 139

	)

1296 
	#EVP_F_EVP_PKEY_ENCRYPT_OLD
 152

	)

1297 
	#EVP_F_EVP_PKEY_GET1_DH
 119

	)

1298 
	#EVP_F_EVP_PKEY_GET1_DSA
 120

	)

1299 
	#EVP_F_EVP_PKEY_GET1_ECDSA
 130

	)

1300 
	#EVP_F_EVP_PKEY_GET1_EC_KEY
 131

	)

1301 
	#EVP_F_EVP_PKEY_GET1_RSA
 121

	)

1302 
	#EVP_F_EVP_PKEY_KEYGEN
 146

	)

1303 
	#EVP_F_EVP_PKEY_KEYGEN_INIT
 147

	)

1304 
	#EVP_F_EVP_PKEY_NEW
 106

	)

1305 
	#EVP_F_EVP_PKEY_PARAMGEN
 148

	)

1306 
	#EVP_F_EVP_PKEY_PARAMGEN_INIT
 149

	)

1307 
	#EVP_F_EVP_PKEY_SIGN
 140

	)

1308 
	#EVP_F_EVP_PKEY_SIGN_INIT
 141

	)

1309 
	#EVP_F_EVP_PKEY_VERIFY
 142

	)

1310 
	#EVP_F_EVP_PKEY_VERIFY_INIT
 143

	)

1311 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER
 144

	)

1312 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT
 145

	)

1313 
	#EVP_F_EVP_RIJNDAEL
 126

	)

1314 
	#EVP_F_EVP_SIGNFINAL
 107

	)

1315 
	#EVP_F_EVP_VERIFYFINAL
 108

	)

1316 
	#EVP_F_FIPS_CIPHERINIT
 166

	)

1317 
	#EVP_F_FIPS_CIPHER_CTX_COPY
 170

	)

1318 
	#EVP_F_FIPS_CIPHER_CTX_CTRL
 167

	)

1319 
	#EVP_F_FIPS_CIPHER_CTX_SET_KEY_LENGTH
 171

	)

1320 
	#EVP_F_FIPS_DIGESTINIT
 168

	)

1321 
	#EVP_F_FIPS_MD_CTX_COPY
 169

	)

1322 
	#EVP_F_HMAC_INIT_EX
 174

	)

1323 
	#EVP_F_INT_CTX_NEW
 157

	)

1324 
	#EVP_F_PKCS5_PBE_KEYIVGEN
 117

	)

1325 
	#EVP_F_PKCS5_V2_PBE_KEYIVGEN
 118

	)

1326 
	#EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN
 164

	)

1327 
	#EVP_F_PKCS8_SET_BROKEN
 112

	)

1328 
	#EVP_F_PKEY_SET_TYPE
 158

	)

1329 
	#EVP_F_RC2_MAGIC_TO_METH
 109

	)

1330 
	#EVP_F_RC5_CTRL
 125

	)

1333 
	#EVP_R_AES_IV_SETUP_FAILED
 162

	)

1334 
	#EVP_R_AES_KEY_SETUP_FAILED
 143

	)

1335 
	#EVP_R_ASN1_LIB
 140

	)

1336 
	#EVP_R_BAD_BLOCK_LENGTH
 136

	)

1337 
	#EVP_R_BAD_DECRYPT
 100

	)

1338 
	#EVP_R_BAD_KEY_LENGTH
 137

	)

1339 
	#EVP_R_BN_DECODE_ERROR
 112

	)

1340 
	#EVP_R_BN_PUBKEY_ERROR
 113

	)

1341 
	#EVP_R_BUFFER_TOO_SMALL
 155

	)

1342 
	#EVP_R_CAMELLIA_KEY_SETUP_FAILED
 157

	)

1343 
	#EVP_R_CIPHER_PARAMETER_ERROR
 122

	)

1344 
	#EVP_R_COMMAND_NOT_SUPPORTED
 147

	)

1345 
	#EVP_R_CTRL_NOT_IMPLEMENTED
 132

	)

1346 
	#EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED
 133

	)

1347 
	#EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH
 138

	)

1348 
	#EVP_R_DECODE_ERROR
 114

	)

1349 
	#EVP_R_DIFFERENT_KEY_TYPES
 101

	)

1350 
	#EVP_R_DIFFERENT_PARAMETERS
 153

	)

1351 
	#EVP_R_DISABLED_FOR_FIPS
 163

	)

1352 
	#EVP_R_ENCODE_ERROR
 115

	)

1353 
	#EVP_R_EVP_PBE_CIPHERINIT_ERROR
 119

	)

1354 
	#EVP_R_EXPECTING_AN_RSA_KEY
 127

	)

1355 
	#EVP_R_EXPECTING_A_DH_KEY
 128

	)

1356 
	#EVP_R_EXPECTING_A_DSA_KEY
 129

	)

1357 
	#EVP_R_EXPECTING_A_ECDSA_KEY
 141

	)

1358 
	#EVP_R_EXPECTING_A_EC_KEY
 142

	)

1359 
	#EVP_R_INITIALIZATION_ERROR
 134

	)

1360 
	#EVP_R_INPUT_NOT_INITIALIZED
 111

	)

1361 
	#EVP_R_INVALID_DIGEST
 152

	)

1362 
	#EVP_R_INVALID_KEY_LENGTH
 130

	)

1363 
	#EVP_R_INVALID_OPERATION
 148

	)

1364 
	#EVP_R_IV_TOO_LARGE
 102

	)

1365 
	#EVP_R_KEYGEN_FAILURE
 120

	)

1366 
	#EVP_R_MESSAGE_DIGEST_IS_NULL
 159

	)

1367 
	#EVP_R_METHOD_NOT_SUPPORTED
 144

	)

1368 
	#EVP_R_MISSING_PARAMETERS
 103

	)

1369 
	#EVP_R_NO_CIPHER_SET
 131

	)

1370 
	#EVP_R_NO_DEFAULT_DIGEST
 158

	)

1371 
	#EVP_R_NO_DIGEST_SET
 139

	)

1372 
	#EVP_R_NO_DSA_PARAMETERS
 116

	)

1373 
	#EVP_R_NO_KEY_SET
 154

	)

1374 
	#EVP_R_NO_OPERATION_SET
 149

	)

1375 
	#EVP_R_NO_SIGN_FUNCTION_CONFIGURED
 104

	)

1376 
	#EVP_R_NO_VERIFY_FUNCTION_CONFIGURED
 105

	)

1377 
	#EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 150

	)

1378 
	#EVP_R_OPERATON_NOT_INITIALIZED
 151

	)

1379 
	#EVP_R_PKCS8_UNKNOWN_BROKEN_TYPE
 117

	)

1380 
	#EVP_R_PRIVATE_KEY_DECODE_ERROR
 145

	)

1381 
	#EVP_R_PRIVATE_KEY_ENCODE_ERROR
 146

	)

1382 
	#EVP_R_PUBLIC_KEY_NOT_RSA
 106

	)

1383 
	#EVP_R_TOO_LARGE
 164

	)

1384 
	#EVP_R_UNKNOWN_CIPHER
 160

	)

1385 
	#EVP_R_UNKNOWN_DIGEST
 161

	)

1386 
	#EVP_R_UNKNOWN_PBE_ALGORITHM
 121

	)

1387 
	#EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS
 135

	)

1388 
	#EVP_R_UNSUPPORTED_ALGORITHM
 156

	)

1389 
	#EVP_R_UNSUPPORTED_CIPHER
 107

	)

1390 
	#EVP_R_UNSUPPORTED_KEYLENGTH
 123

	)

1391 
	#EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION
 124

	)

1392 
	#EVP_R_UNSUPPORTED_KEY_SIZE
 108

	)

1393 
	#EVP_R_UNSUPPORTED_PRF
 125

	)

1394 
	#EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM
 118

	)

1395 
	#EVP_R_UNSUPPORTED_SALT_TYPE
 126

	)

1396 
	#EVP_R_WRONG_FINAL_BLOCK_LENGTH
 109

	)

1397 
	#EVP_R_WRONG_PUBLIC_KEY_TYPE
 110

	)

1399 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/opensslconf.h

5 #i‚de‡
OPENSSL_DOING_MAKEDEPEND


8 #i‚de‡
OPENSSL_NO_EC_NISTP_64_GCC_128


9 
	#OPENSSL_NO_EC_NISTP_64_GCC_128


	)

11 #i‚de‡
OPENSSL_NO_GMP


12 
	#OPENSSL_NO_GMP


	)

14 #i‚de‡
OPENSSL_NO_IDEA


15 
	#OPENSSL_NO_IDEA


	)

17 #i‚de‡
OPENSSL_NO_JPAKE


18 
	#OPENSSL_NO_JPAKE


	)

20 #i‚de‡
OPENSSL_NO_KRB5


21 
	#OPENSSL_NO_KRB5


	)

23 #i‚de‡
OPENSSL_NO_MD2


24 
	#OPENSSL_NO_MD2


	)

26 #i‚de‡
OPENSSL_NO_MDC2


27 
	#OPENSSL_NO_MDC2


	)

29 #i‚de‡
OPENSSL_NO_RC5


30 
	#OPENSSL_NO_RC5


	)

32 #i‚de‡
OPENSSL_NO_RFC3779


33 
	#OPENSSL_NO_RFC3779


	)

35 #i‚de‡
OPENSSL_NO_SCTP


36 
	#OPENSSL_NO_SCTP


	)

38 #i‚de‡
OPENSSL_NO_SSL2


39 
	#OPENSSL_NO_SSL2


	)

41 #i‚de‡
OPENSSL_NO_STORE


42 
	#OPENSSL_NO_STORE


	)

47 #i‚de‡
OPENSSL_THREADS


48 
	#OPENSSL_THREADS


	)

50 #i‚de‡
OPENSSL_NO_STATIC_ENGINE


51 
	#OPENSSL_NO_STATIC_ENGINE


	)

58 #ifde‡
OPENSSL_ALGORITHM_DEFINES


59 #i‡
deföed
(
OPENSSL_NO_EC_NISTP_64_GCC_128
Ë&& !deföed(
NO_EC_NISTP_64_GCC_128
)

60 
	#NO_EC_NISTP_64_GCC_128


	)

62 #i‡
deföed
(
OPENSSL_NO_GMP
Ë&& !deföed(
NO_GMP
)

63 
	#NO_GMP


	)

65 #i‡
deföed
(
OPENSSL_NO_IDEA
Ë&& !deföed(
NO_IDEA
)

66 
	#NO_IDEA


	)

68 #i‡
deföed
(
OPENSSL_NO_JPAKE
Ë&& !deföed(
NO_JPAKE
)

69 
	#NO_JPAKE


	)

71 #i‡
deföed
(
OPENSSL_NO_KRB5
Ë&& !deföed(
NO_KRB5
)

72 
	#NO_KRB5


	)

74 #i‡
deföed
(
OPENSSL_NO_MD2
Ë&& !deföed(
NO_MD2
)

75 
	#NO_MD2


	)

77 #i‡
deföed
(
OPENSSL_NO_MDC2
Ë&& !deföed(
NO_MDC2
)

78 
	#NO_MDC2


	)

80 #i‡
deföed
(
OPENSSL_NO_RC5
Ë&& !deföed(
NO_RC5
)

81 
	#NO_RC5


	)

83 #i‡
deföed
(
OPENSSL_NO_RFC3779
Ë&& !deföed(
NO_RFC3779
)

84 
	#NO_RFC3779


	)

86 #i‡
deföed
(
OPENSSL_NO_SCTP
Ë&& !deföed(
NO_SCTP
)

87 
	#NO_SCTP


	)

89 #i‡
deföed
(
OPENSSL_NO_SSL2
Ë&& !deföed(
NO_SSL2
)

90 
	#NO_SSL2


	)

92 #i‡
deföed
(
OPENSSL_NO_STORE
Ë&& !deföed(
NO_STORE
)

93 
	#NO_STORE


	)

97 
	#OPENSSL_CPUID_OBJ


	)

102 #unde‡
I386_ONLY


104 #i‡!(
deföed
(
VMS
Ë|| deföed(
__VMS
))

105 #i‡
deföed
(
HEADER_CRYPTLIB_H
Ë&& !deföed(
OPENSSLDIR
)

106 
	#ENGINESDIR
 "/u§/lib/x86_64-löux-gnu/›ís¶-1.0.0/ígöes"

	)

107 
	#OPENSSLDIR
 "/u§/lib/s¶"

	)

111 #unde‡
OPENSSL_UNISTD


112 
	#OPENSSL_UNISTD
 <
uni°d
.
h
>

	)

114 #unde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


116 #i‡
deföed
(
HEADER_IDEA_H
Ë&& !deföed(
IDEA_INT
)

117 
	#IDEA_INT
 

	)

120 #i‡
deföed
(
HEADER_MD2_H
Ë&& !deföed(
MD2_INT
)

121 
	#MD2_INT
 

	)

124 #i‡
deföed
(
HEADER_RC2_H
Ë&& !deföed(
RC2_INT
)

126 
	#RC2_INT
 

	)

129 #i‡
deföed
(
HEADER_RC4_H
)

130 #i‡!
deföed
(
RC4_INT
)

138 
	#RC4_INT
 

	)

140 #i‡!
deföed
(
RC4_CHUNK
)

145 
	#RC4_CHUNK
 

	)

149 #i‡(
deföed
(
HEADER_NEW_DES_H
Ë|| deföed(
HEADER_DES_H
)Ë&& !deföed(
DES_LONG
)

152 #i‚de‡
DES_LONG


153 
	#DES_LONG
 

	)

157 #i‡
deföed
(
HEADER_BN_H
Ë&& !deföed(
CONFIG_HEADER_BN_H
)

158 
	#CONFIG_HEADER_BN_H


	)

159 #unde‡
BN_LLONG


164 
	#SIXTY_FOUR_BIT_LONG


	)

165 #unde‡
SIXTY_FOUR_BIT


166 #unde‡
THIRTY_TWO_BIT


169 #i‡
deföed
(
HEADER_RC4_LOCL_H
Ë&& !deföed(
CONFIG_HEADER_RC4_LOCL_H
)

170 
	#CONFIG_HEADER_RC4_LOCL_H


	)

173 #unde‡
RC4_INDEX


176 #i‡
deföed
(
HEADER_BF_LOCL_H
Ë&& !deföed(
CONFIG_HEADER_BF_LOCL_H
)

177 
	#CONFIG_HEADER_BF_LOCL_H


	)

178 #unde‡
BF_PTR


181 #i‡
deföed
(
HEADER_DES_LOCL_H
Ë&& !deföed(
CONFIG_HEADER_DES_LOCL_H
)

182 
	#CONFIG_HEADER_DES_LOCL_H


	)

183 #i‚de‡
DES_DEFAULT_OPTIONS


186 #i‚de‡
DES_PTR


187 #unde‡
DES_PTR


193 #i‚de‡
DES_RISC1


194 #unde‡
DES_RISC1


197 #i‚de‡
DES_RISC2


198 #unde‡
DES_RISC2


201 #i‡
deföed
(
DES_RISC1
Ë&& deföed(
DES_RISC2
)

202 
YOU
 
SHOULD
 
NOT
 
HAVE
 
BOTH
 
DES_RISC1
 
AND
 
DES_RISC2
 
	gDEFINED
!!!!!

207 #i‚de‡
DES_UNROLL


208 
	#DES_UNROLL


	)

214 #i‡!
deföed
(
DES_PTR
Ë&& !deföed(
DES_RISC1
Ë&& !deföed(
DES_RISC2
Ë&& !deföed(
DES_UNROLL
)

221 #i‡
deföed
–
sun
 )

222 
	#DES_PTR


	)

223 
	#DES_RISC1


	)

224 
	#DES_UNROLL


	)

225 #ñi‡
deföed
–
__u…rix
 )

226 
	#DES_PTR


	)

227 
	#DES_RISC2


	)

228 
	#DES_UNROLL


	)

229 #ñi‡
deföed
–
__osf1__
 )

230 
	#DES_PTR


	)

231 
	#DES_RISC2


	)

232 #ñi‡
deföed
 ( 
_AIX
 )

234 #ñi‡
deföed
–
__hpux
 )

236 #ñi‡
deföed
–
__aux
 )

238 #ñi‡
deföed
–
__dgux
 )

239 
	#DES_UNROLL


	)

240 #ñi‡
deföed
–
__sgi
 )

241 
	#DES_PTR


	)

242 
	#DES_RISC2


	)

243 
	#DES_UNROLL


	)

244 #ñi‡
deföed
(
i386
Ë|| deföed(
__i386__
)

245 
	#DES_PTR


	)

246 
	#DES_RISC1


	)

247 
	#DES_UNROLL


	)

	@/usr/include/openssl/opensslv.h

1 #i‚de‡
HEADER_OPENSSLV_H


2 
	#HEADER_OPENSSLV_H


	)

28 
	#OPENSSL_VERSION_NUMBER
 0x1000103fL

	)

29 #ifde‡
OPENSSL_FIPS


30 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.0.1c-fù†10 May 2012"

	)

32 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.0.1¯10 May 2012"

	)

34 
	#OPENSSL_VERSION_PTEXT
 "Ö¨ào‡" 
OPENSSL_VERSION_TEXT


	)

85 
	#SHLIB_VERSION_HISTORY
 ""

	)

86 
	#SHLIB_VERSION_NUMBER
 "1.0.0"

	)

	@/usr/include/openssl/pem2.h

60 #ifde‡
__˝lu•lus


64 #i‚de‡
HEADER_PEM_H


65 
ERR_lﬂd_PEM_°rögs
();

68 #ifde‡
__˝lu•lus


	@/usr/include/openssl/pkcs7.h

59 #i‚de‡
HEADER_PKCS7_H


60 
	#HEADER_PKCS7_H


	)

62 
	~<›ís¶/a¢1.h
>

63 
	~<›ís¶/bio.h
>

64 
	~<›ís¶/e_os2.h
>

66 
	~<›ís¶/symhacks.h
>

67 
	~<›ís¶/os¶_typ.h
>

69 #ifde‡ 
__˝lu•lus


73 #ifde‡
OPENSSL_SYS_WIN32


75 #unde‡
PKCS7_ISSUER_AND_SERIAL


76 #unde‡
PKCS7_SIGNER_INFO


86 
	spkcs7_issuî_™d_£rül_°


88 
X509_NAME
 *
issuî
;

89 
ASN1_INTEGER
 *
£rül
;

90 } 
	tPKCS7_ISSUER_AND_SERIAL
;

92 
	spkcs7_sig√r_öfo_°


94 
ASN1_INTEGER
 *
vîsi⁄
;

95 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

96 
X509_ALGOR
 *
dige°_Æg
;

97 
STACK_OF
(
X509_ATTRIBUTE
Ë*
auth_©å
;

98 
X509_ALGOR
 *
dige°_íc_Æg
;

99 
ASN1_OCTET_STRING
 *
íc_dige°
;

100 
STACK_OF
(
X509_ATTRIBUTE
Ë*
u«uth_©å
;

103 
EVP_PKEY
 *
pkey
;

104 } 
	tPKCS7_SIGNER_INFO
;

106 
DECLARE_STACK_OF
(
PKCS7_SIGNER_INFO
)

107 
DECLARE_ASN1_SET_OF
(
PKCS7_SIGNER_INFO
)

109 
	spkcs7_ªcù_öfo_°


111 
ASN1_INTEGER
 *
vîsi⁄
;

112 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

113 
X509_ALGOR
 *
key_íc_Æg‹
;

114 
ASN1_OCTET_STRING
 *
íc_key
;

115 
X509
 *
˚π
;

116 } 
	tPKCS7_RECIP_INFO
;

118 
DECLARE_STACK_OF
(
PKCS7_RECIP_INFO
)

119 
DECLARE_ASN1_SET_OF
(
PKCS7_RECIP_INFO
)

121 
	spkcs7_sig√d_°


123 
ASN1_INTEGER
 *
vîsi⁄
;

124 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

125 
STACK_OF
(
X509
Ë*
˚π
;

126 
STACK_OF
(
X509_CRL
Ë*
¸l
;

127 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

129 
pkcs7_°
 *
c⁄ã¡s
;

130 } 
	tPKCS7_SIGNED
;

134 
	spkcs7_íc_c⁄ã¡_°


136 
ASN1_OBJECT
 *
c⁄ã¡_ty≥
;

137 
X509_ALGOR
 *
Æg‹ôhm
;

138 
ASN1_OCTET_STRING
 *
íc_d©a
;

139 c⁄° 
EVP_CIPHER
 *
cùhî
;

140 } 
	tPKCS7_ENC_CONTENT
;

142 
	spkcs7_ívñ›ed_°


144 
ASN1_INTEGER
 *
vîsi⁄
;

145 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

146 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

147 } 
	tPKCS7_ENVELOPE
;

149 
	spkcs7_sig√d™dívñ›ed_°


151 
ASN1_INTEGER
 *
vîsi⁄
;

152 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

153 
STACK_OF
(
X509
Ë*
˚π
;

154 
STACK_OF
(
X509_CRL
Ë*
¸l
;

155 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

157 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

158 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

159 } 
	tPKCS7_SIGN_ENVELOPE
;

161 
	spkcs7_dige°_°


163 
ASN1_INTEGER
 *
vîsi⁄
;

164 
X509_ALGOR
 *
md
;

165 
pkcs7_°
 *
c⁄ã¡s
;

166 
ASN1_OCTET_STRING
 *
dige°
;

167 } 
	tPKCS7_DIGEST
;

169 
	spkcs7_í¸y±ed_°


171 
ASN1_INTEGER
 *
vîsi⁄
;

172 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

173 } 
	tPKCS7_ENCRYPT
;

175 
	spkcs7_°


179 *
a¢1
;

180 
Àngth
;

182 
	#PKCS7_S_HEADER
 0

	)

183 
	#PKCS7_S_BODY
 1

	)

184 
	#PKCS7_S_TAIL
 2

	)

185 
°©e
;

187 
dëached
;

189 
ASN1_OBJECT
 *
ty≥
;

194 *
±r
;

197 
ASN1_OCTET_STRING
 *
d©a
;

200 
PKCS7_SIGNED
 *
sign
;

203 
PKCS7_ENVELOPE
 *
ívñ›ed
;

206 
PKCS7_SIGN_ENVELOPE
 *
sig√d_™d_ívñ›ed
;

209 
PKCS7_DIGEST
 *
dige°
;

212 
PKCS7_ENCRYPT
 *
í¸y±ed
;

215 
ASN1_TYPE
 *
Ÿhî
;

216 } 
d
;

217 } 
	tPKCS7
;

219 
DECLARE_STACK_OF
(
PKCS7
)

220 
DECLARE_ASN1_SET_OF
(
PKCS7
)

221 
DECLARE_PKCS12_STACK_OF
(
PKCS7
)

223 
	#PKCS7_OP_SET_DETACHED_SIGNATURE
 1

	)

224 
	#PKCS7_OP_GET_DETACHED_SIGNATURE
 2

	)

226 
	#PKCS7_gë_sig√d_©åibuãs
(
si
Ë((si)->
auth_©å
)

	)

227 
	#PKCS7_gë_©åibuãs
(
si
Ë((si)->
u«uth_©å
)

	)

229 
	#PKCS7_ty≥_is_sig√d
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_sig√d
)

	)

230 
	#PKCS7_ty≥_is_í¸y±ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

231 
	#PKCS7_ty≥_is_ívñ›ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_ívñ›ed
)

	)

232 
	#PKCS7_ty≥_is_sig√dAndEnvñ›ed
(
a
) \

233 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_sig√dAndEnvñ›ed
)

	)

234 
	#PKCS7_ty≥_is_d©a
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_d©a
)

	)

235 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

236 
	#PKCS7_ty≥_is_í¸y±ed
(
a
) \

237 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

239 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

241 
	#PKCS7_£t_dëached
(
p
,
v
) \

242 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_SET_DETACHED_SIGNATURE
,
v
,
NULL
)

	)

243 
	#PKCS7_gë_dëached
(
p
) \

244 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_GET_DETACHED_SIGNATURE
,0,
NULL
)

	)

246 
	#PKCS7_is_dëached
(
p7
Ë(
	`PKCS7_ty≥_is_sig√d
’7Ë&& 
	`PKCS7_gë_dëached
’7))

	)

250 
	#PKCS7_TEXT
 0x1

	)

251 
	#PKCS7_NOCERTS
 0x2

	)

252 
	#PKCS7_NOSIGS
 0x4

	)

253 
	#PKCS7_NOCHAIN
 0x8

	)

254 
	#PKCS7_NOINTERN
 0x10

	)

255 
	#PKCS7_NOVERIFY
 0x20

	)

256 
	#PKCS7_DETACHED
 0x40

	)

257 
	#PKCS7_BINARY
 0x80

	)

258 
	#PKCS7_NOATTR
 0x100

	)

259 
	#PKCS7_NOSMIMECAP
 0x200

	)

260 
	#PKCS7_NOOLDMIMETYPE
 0x400

	)

261 
	#PKCS7_CRLFEOL
 0x800

	)

262 
	#PKCS7_STREAM
 0x1000

	)

263 
	#PKCS7_NOCRL
 0x2000

	)

264 
	#PKCS7_PARTIAL
 0x4000

	)

265 
	#PKCS7_REUSE_DIGEST
 0x8000

	)

269 
	#SMIME_TEXT
 
PKCS7_TEXT


	)

270 
	#SMIME_NOCERTS
 
PKCS7_NOCERTS


	)

271 
	#SMIME_NOSIGS
 
PKCS7_NOSIGS


	)

272 
	#SMIME_NOCHAIN
 
PKCS7_NOCHAIN


	)

273 
	#SMIME_NOINTERN
 
PKCS7_NOINTERN


	)

274 
	#SMIME_NOVERIFY
 
PKCS7_NOVERIFY


	)

275 
	#SMIME_DETACHED
 
PKCS7_DETACHED


	)

276 
	#SMIME_BINARY
 
PKCS7_BINARY


	)

277 
	#SMIME_NOATTR
 
PKCS7_NOATTR


	)

279 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ISSUER_AND_SERIAL
)

281 
PKCS7_ISSUER_AND_SERIAL_dige°
(
PKCS7_ISSUER_AND_SERIAL
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

282 *
md
,*
Àn
);

283 #i‚de‡
OPENSSL_NO_FP_API


284 
PKCS7
 *
d2i_PKCS7_Â
(
FILE
 *
Â
,PKCS7 **
p7
);

285 
i2d_PKCS7_Â
(
FILE
 *
Â
,
PKCS7
 *
p7
);

287 
PKCS7
 *
PKCS7_dup
(PKCS7 *
p7
);

288 
PKCS7
 *
d2i_PKCS7_bio
(
BIO
 *
bp
,PKCS7 **
p7
);

289 
i2d_PKCS7_bio
(
BIO
 *
bp
,
PKCS7
 *
p7
);

290 
i2d_PKCS7_bio_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

291 
PEM_wrôe_bio_PKCS7_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

293 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNER_INFO
)

294 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_RECIP_INFO
)

295 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNED
)

296 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENC_CONTENT
)

297 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENVELOPE
)

298 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGN_ENVELOPE
)

299 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_DIGEST
)

300 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENCRYPT
)

301 
DECLARE_ASN1_FUNCTIONS
(
PKCS7
)

303 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_SIGN
)

304 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_VERIFY
)

306 
DECLARE_ASN1_NDEF_FUNCTION
(
PKCS7
)

307 
DECLARE_ASN1_PRINT_FUNCTION
(
PKCS7
)

309 
PKCS7_˘æ
(
PKCS7
 *
p7
, 
cmd
, 
œrg
, *
∑rg
);

311 
PKCS7_£t_ty≥
(
PKCS7
 *
p7
, 
ty≥
);

312 
PKCS7_£t0_ty≥_Ÿhî
(
PKCS7
 *
p7
, 
ty≥
, 
ASN1_TYPE
 *
Ÿhî
);

313 
PKCS7_£t_c⁄ã¡
(
PKCS7
 *
p7
, PKCS7 *
p7_d©a
);

314 
PKCS7_SIGNER_INFO_£t
(
PKCS7_SIGNER_INFO
 *
p7i
, 
X509
 *
x509
, 
EVP_PKEY
 *
pkey
,

315 c⁄° 
EVP_MD
 *
dg°
);

316 
PKCS7_SIGNER_INFO_sign
(
PKCS7_SIGNER_INFO
 *
si
);

317 
PKCS7_add_sig√r
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
p7i
);

318 
PKCS7_add_˚πifiˇã
(
PKCS7
 *
p7
, 
X509
 *
x509
);

319 
PKCS7_add_¸l
(
PKCS7
 *
p7
, 
X509_CRL
 *
x509
);

320 
PKCS7_c⁄ã¡_√w
(
PKCS7
 *
p7
, 
nid
);

321 
PKCS7_d©aVîify
(
X509_STORE
 *
˚π_°‹e
, 
X509_STORE_CTX
 *
˘x
,

322 
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

323 
PKCS7_sig«tuªVîify
(
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
,

324 
X509
 *
x509
);

326 
BIO
 *
PKCS7_d©aInô
(
PKCS7
 *
p7
, BIO *
bio
);

327 
PKCS7_d©aFöÆ
(
PKCS7
 *
p7
, 
BIO
 *
bio
);

328 
BIO
 *
PKCS7_d©aDecode
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, BIO *
ö_bio
, 
X509
 *
p˚π
);

331 
PKCS7_SIGNER_INFO
 *
PKCS7_add_sig«tuª
(
PKCS7
 *
p7
, 
X509
 *
x509
,

332 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
dg°
);

333 
X509
 *
PKCS7_˚π_‰om_sig√r_öfo
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

334 
PKCS7_£t_dige°
(
PKCS7
 *
p7
, c⁄° 
EVP_MD
 *
md
);

335 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
PKCS7_gë_sig√r_öfo
(
PKCS7
 *
p7
);

337 
PKCS7_RECIP_INFO
 *
PKCS7_add_ªcùõ¡
(
PKCS7
 *
p7
, 
X509
 *
x509
);

338 
PKCS7_SIGNER_INFO_gë0_Ægs
(
PKCS7_SIGNER_INFO
 *
si
, 
EVP_PKEY
 **
pk
,

339 
X509_ALGOR
 **
pdig
, X509_ALGOR **
psig
);

340 
PKCS7_RECIP_INFO_gë0_Æg
(
PKCS7_RECIP_INFO
 *
ri
, 
X509_ALGOR
 **
≥nc
);

341 
PKCS7_add_ªcùõ¡_öfo
(
PKCS7
 *
p7
, 
PKCS7_RECIP_INFO
 *
ri
);

342 
PKCS7_RECIP_INFO_£t
(
PKCS7_RECIP_INFO
 *
p7i
, 
X509
 *
x509
);

343 
PKCS7_£t_cùhî
(
PKCS7
 *
p7
, c⁄° 
EVP_CIPHER
 *
cùhî
);

344 
PKCS7_°ªam
(***
bound¨y
, 
PKCS7
 *
p7
);

346 
PKCS7_ISSUER_AND_SERIAL
 *
PKCS7_gë_issuî_™d_£rül
(
PKCS7
 *
p7
, 
idx
);

347 
ASN1_OCTET_STRING
 *
PKCS7_dige°_‰om_©åibuãs
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

348 
PKCS7_add_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
,
nid
,
ty≥
,

349 *
d©a
);

350 
PKCS7_add_©åibuã
 (
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
©πy≥
,

351 *
vÆue
);

352 
ASN1_TYPE
 *
PKCS7_gë_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

353 
ASN1_TYPE
 *
PKCS7_gë_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

354 
PKCS7_£t_sig√d_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

355 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

356 
PKCS7_£t_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

359 
PKCS7
 *
PKCS7_sign
(
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, 
STACK_OF
(X509Ë*
˚πs
,

360 
BIO
 *
d©a
, 
Êags
);

362 
PKCS7_SIGNER_INFO
 *
PKCS7_sign_add_sig√r
(
PKCS7
 *
p7
,

363 
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
,

364 
Êags
);

366 
PKCS7_föÆ
(
PKCS7
 *
p7
, 
BIO
 *
d©a
, 
Êags
);

367 
PKCS7_vîify
(
PKCS7
 *
p7
, 
STACK_OF
(
X509
Ë*
˚πs
, 
X509_STORE
 *
°‹e
,

368 
BIO
 *
öd©a
, BIO *
out
, 
Êags
);

369 
STACK_OF
(
X509
Ë*
PKCS7_gë0_sig√rs
(
PKCS7
 *
p7
, STACK_OF(X509Ë*
˚πs
, 
Êags
);

370 
PKCS7
 *
PKCS7_í¸y±
(
STACK_OF
(
X509
Ë*
˚πs
, 
BIO
 *
ö
, c⁄° 
EVP_CIPHER
 *
cùhî
,

371 
Êags
);

372 
PKCS7_de¸y±
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, 
X509
 *
˚π
, 
BIO
 *
d©a
, 
Êags
);

374 
PKCS7_add_©åib_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
,

375 
STACK_OF
(
X509_ALGOR
Ë*
ˇp
);

376 
STACK_OF
(
X509_ALGOR
Ë*
PKCS7_gë_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
);

377 
PKCS7_sim∂e_smimeˇp
(
STACK_OF
(
X509_ALGOR
Ë*
sk
, 
nid
, 
¨g
);

379 
PKCS7_add_©åib_c⁄ã¡_ty≥
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_OBJECT
 *
coid
);

380 
PKCS7_add0_©åib_signög_time
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_TIME
 *
t
);

381 
PKCS7_add1_©åib_dige°
(
PKCS7_SIGNER_INFO
 *
si
,

382 c⁄° *
md
, 
mdÀn
);

384 
SMIME_wrôe_PKCS7
(
BIO
 *
bio
, 
PKCS7
 *
p7
, BIO *
d©a
, 
Êags
);

385 
PKCS7
 *
SMIME_ªad_PKCS7
(
BIO
 *
bio
, BIO **
bc⁄t
);

387 
BIO
 *
BIO_√w_PKCS7
(BIO *
out
, 
PKCS7
 *
p7
);

394 
ERR_lﬂd_PKCS7_°rögs
();

399 
	#PKCS7_F_B64_READ_PKCS7
 120

	)

400 
	#PKCS7_F_B64_WRITE_PKCS7
 121

	)

401 
	#PKCS7_F_DO_PKCS7_SIGNED_ATTRIB
 136

	)

402 
	#PKCS7_F_I2D_PKCS7_BIO_STREAM
 140

	)

403 
	#PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME
 135

	)

404 
	#PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP
 118

	)

405 
	#PKCS7_F_PKCS7_ADD_CERTIFICATE
 100

	)

406 
	#PKCS7_F_PKCS7_ADD_CRL
 101

	)

407 
	#PKCS7_F_PKCS7_ADD_RECIPIENT_INFO
 102

	)

408 
	#PKCS7_F_PKCS7_ADD_SIGNATURE
 131

	)

409 
	#PKCS7_F_PKCS7_ADD_SIGNER
 103

	)

410 
	#PKCS7_F_PKCS7_BIO_ADD_DIGEST
 125

	)

411 
	#PKCS7_F_PKCS7_COPY_EXISTING_DIGEST
 138

	)

412 
	#PKCS7_F_PKCS7_CTRL
 104

	)

413 
	#PKCS7_F_PKCS7_DATADECODE
 112

	)

414 
	#PKCS7_F_PKCS7_DATAFINAL
 128

	)

415 
	#PKCS7_F_PKCS7_DATAINIT
 105

	)

416 
	#PKCS7_F_PKCS7_DATASIGN
 106

	)

417 
	#PKCS7_F_PKCS7_DATAVERIFY
 107

	)

418 
	#PKCS7_F_PKCS7_DECRYPT
 114

	)

419 
	#PKCS7_F_PKCS7_DECRYPT_RINFO
 133

	)

420 
	#PKCS7_F_PKCS7_ENCODE_RINFO
 132

	)

421 
	#PKCS7_F_PKCS7_ENCRYPT
 115

	)

422 
	#PKCS7_F_PKCS7_FINAL
 134

	)

423 
	#PKCS7_F_PKCS7_FIND_DIGEST
 127

	)

424 
	#PKCS7_F_PKCS7_GET0_SIGNERS
 124

	)

425 
	#PKCS7_F_PKCS7_RECIP_INFO_SET
 130

	)

426 
	#PKCS7_F_PKCS7_SET_CIPHER
 108

	)

427 
	#PKCS7_F_PKCS7_SET_CONTENT
 109

	)

428 
	#PKCS7_F_PKCS7_SET_DIGEST
 126

	)

429 
	#PKCS7_F_PKCS7_SET_TYPE
 110

	)

430 
	#PKCS7_F_PKCS7_SIGN
 116

	)

431 
	#PKCS7_F_PKCS7_SIGNATUREVERIFY
 113

	)

432 
	#PKCS7_F_PKCS7_SIGNER_INFO_SET
 129

	)

433 
	#PKCS7_F_PKCS7_SIGNER_INFO_SIGN
 139

	)

434 
	#PKCS7_F_PKCS7_SIGN_ADD_SIGNER
 137

	)

435 
	#PKCS7_F_PKCS7_SIMPLE_SMIMECAP
 119

	)

436 
	#PKCS7_F_PKCS7_VERIFY
 117

	)

437 
	#PKCS7_F_SMIME_READ_PKCS7
 122

	)

438 
	#PKCS7_F_SMIME_TEXT
 123

	)

441 
	#PKCS7_R_CERTIFICATE_VERIFY_ERROR
 117

	)

442 
	#PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 144

	)

443 
	#PKCS7_R_CIPHER_NOT_INITIALIZED
 116

	)

444 
	#PKCS7_R_CONTENT_AND_DATA_PRESENT
 118

	)

445 
	#PKCS7_R_CTRL_ERROR
 152

	)

446 
	#PKCS7_R_DECODE_ERROR
 130

	)

447 
	#PKCS7_R_DECRYPTED_KEY_IS_WRONG_LENGTH
 100

	)

448 
	#PKCS7_R_DECRYPT_ERROR
 119

	)

449 
	#PKCS7_R_DIGEST_FAILURE
 101

	)

450 
	#PKCS7_R_ENCRYPTION_CTRL_FAILURE
 149

	)

451 
	#PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 150

	)

452 
	#PKCS7_R_ERROR_ADDING_RECIPIENT
 120

	)

453 
	#PKCS7_R_ERROR_SETTING_CIPHER
 121

	)

454 
	#PKCS7_R_INVALID_MIME_TYPE
 131

	)

455 
	#PKCS7_R_INVALID_NULL_POINTER
 143

	)

456 
	#PKCS7_R_MIME_NO_CONTENT_TYPE
 132

	)

457 
	#PKCS7_R_MIME_PARSE_ERROR
 133

	)

458 
	#PKCS7_R_MIME_SIG_PARSE_ERROR
 134

	)

459 
	#PKCS7_R_MISSING_CERIPEND_INFO
 103

	)

460 
	#PKCS7_R_NO_CONTENT
 122

	)

461 
	#PKCS7_R_NO_CONTENT_TYPE
 135

	)

462 
	#PKCS7_R_NO_DEFAULT_DIGEST
 151

	)

463 
	#PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND
 154

	)

464 
	#PKCS7_R_NO_MULTIPART_BODY_FAILURE
 136

	)

465 
	#PKCS7_R_NO_MULTIPART_BOUNDARY
 137

	)

466 
	#PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE
 115

	)

467 
	#PKCS7_R_NO_RECIPIENT_MATCHES_KEY
 146

	)

468 
	#PKCS7_R_NO_SIGNATURES_ON_DATA
 123

	)

469 
	#PKCS7_R_NO_SIGNERS
 142

	)

470 
	#PKCS7_R_NO_SIG_CONTENT_TYPE
 138

	)

471 
	#PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE
 104

	)

472 
	#PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR
 124

	)

473 
	#PKCS7_R_PKCS7_ADD_SIGNER_ERROR
 153

	)

474 
	#PKCS7_R_PKCS7_DATAFINAL
 126

	)

475 
	#PKCS7_R_PKCS7_DATAFINAL_ERROR
 125

	)

476 
	#PKCS7_R_PKCS7_DATASIGN
 145

	)

477 
	#PKCS7_R_PKCS7_PARSE_ERROR
 139

	)

478 
	#PKCS7_R_PKCS7_SIG_PARSE_ERROR
 140

	)

479 
	#PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 127

	)

480 
	#PKCS7_R_SIGNATURE_FAILURE
 105

	)

481 
	#PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND
 128

	)

482 
	#PKCS7_R_SIGNING_CTRL_FAILURE
 147

	)

483 
	#PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 148

	)

484 
	#PKCS7_R_SIG_INVALID_MIME_TYPE
 141

	)

485 
	#PKCS7_R_SMIME_TEXT_ERROR
 129

	)

486 
	#PKCS7_R_UNABLE_TO_FIND_CERTIFICATE
 106

	)

487 
	#PKCS7_R_UNABLE_TO_FIND_MEM_BIO
 107

	)

488 
	#PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST
 108

	)

489 
	#PKCS7_R_UNKNOWN_DIGEST_TYPE
 109

	)

490 
	#PKCS7_R_UNKNOWN_OPERATION
 110

	)

491 
	#PKCS7_R_UNSUPPORTED_CIPHER_TYPE
 111

	)

492 
	#PKCS7_R_UNSUPPORTED_CONTENT_TYPE
 112

	)

493 
	#PKCS7_R_WRONG_CONTENT_TYPE
 113

	)

494 
	#PKCS7_R_WRONG_PKCS7_TYPE
 114

	)

496 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pqueue.h

60 #i‚de‡
HEADER_PQUEUE_H


61 
	#HEADER_PQUEUE_H


	)

63 
	~<°dio.h
>

64 
	~<°dlib.h
>

65 
	~<°rög.h
>

67 
_pqueue
 *
	tpqueue
;

69 
	s_pôem


71 
	m¥i‹ôy
[8];

72 *
	md©a
;

73 
_pôem
 *
	m√xt
;

74 } 
	tpôem
;

76 
_pôem
 *
	tpôî©‹
;

78 
pôem
 *
pôem_√w
(*
¥io64be
, *
d©a
);

79 
pôem_‰ì
(
pôem
 *
ôem
);

81 
pqueue
 
pqueue_√w
();

82 
pqueue_‰ì
(
pqueue
 
pq
);

84 
pôem
 *
pqueue_ö£π
(
pqueue
 
pq
,Öôem *
ôem
);

85 
pôem
 *
pqueue_≥ek
(
pqueue
 
pq
);

86 
pôem
 *
pqueue_p›
(
pqueue
 
pq
);

87 
pôem
 *
pqueue_föd
(
pqueue
 
pq
, *
¥io64be
);

88 
pôem
 *
pqueue_ôî©‹
(
pqueue
 
pq
);

89 
pôem
 *
pqueue_√xt
(
pôî©‹
 *
ôî
);

91 
pqueue_¥öt
(
pqueue
 
pq
);

92 
pqueue_size
(
pqueue
 
pq
);

	@/usr/include/openssl/rsa.h

59 #i‚de‡
HEADER_RSA_H


60 
	#HEADER_RSA_H


	)

62 
	~<›ís¶/a¢1.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/¸y±o.h
>

68 
	~<›ís¶/os¶_typ.h
>

69 #i‚de‡
OPENSSL_NO_DEPRECATED


70 
	~<›ís¶/bn.h
>

73 #ifde‡
OPENSSL_NO_RSA


74 #îr‹ 
RSA
 
is
 
dißbÀd
.

77 #ifde‡ 
__˝lu•lus


85 
	srß_mëh_°


87 c⁄° *
«me
;

88 (*
rß_pub_íc
)(
Êí
,c⁄° *
‰om
,

89 *
to
,

90 
RSA
 *
rß
,
∑ddög
);

91 (*
rß_pub_dec
)(
Êí
,c⁄° *
‰om
,

92 *
to
,

93 
RSA
 *
rß
,
∑ddög
);

94 (*
rß_¥iv_íc
)(
Êí
,c⁄° *
‰om
,

95 *
to
,

96 
RSA
 *
rß
,
∑ddög
);

97 (*
rß_¥iv_dec
)(
Êí
,c⁄° *
‰om
,

98 *
to
,

99 
RSA
 *
rß
,
∑ddög
);

100 (*
rß_mod_exp
)(
BIGNUM
 *
r0
,c⁄° BIGNUM *
I
,
RSA
 *
rß
,
BN_CTX
 *
˘x
);

101 (*
bn_mod_exp
)(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

102 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

103 
BN_MONT_CTX
 *
m_˘x
);

104 (*
öô
)(
RSA
 *
rß
);

105 (*
föish
)(
RSA
 *
rß
);

106 
Êags
;

107 *
≠p_d©a
;

115 (*
rß_sign
)(
ty≥
,

116 c⁄° *
m
, 
m_Àngth
,

117 *
sigªt
, *
sigÀn
, c⁄° 
RSA
 *
rß
);

118 (*
rß_vîify
)(
dty≥
,

119 c⁄° *
m
, 
m_Àngth
,

120 c⁄° *
sigbuf
, 
sigÀn
,

121 c⁄° 
RSA
 *
rß
);

126 (*
rß_keygí
)(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

129 
	srß_°


133 
∑d
;

134 
vîsi⁄
;

135 c⁄° 
RSA_METHOD
 *
mëh
;

137 
ENGINE
 *
ígöe
;

138 
BIGNUM
 *
n
;

139 
BIGNUM
 *
e
;

140 
BIGNUM
 *
d
;

141 
BIGNUM
 *
p
;

142 
BIGNUM
 *
q
;

143 
BIGNUM
 *
dmp1
;

144 
BIGNUM
 *
dmq1
;

145 
BIGNUM
 *
iqmp
;

147 
CRYPTO_EX_DATA
 
ex_d©a
;

148 
ª„ªn˚s
;

149 
Êags
;

152 
BN_MONT_CTX
 *
_mëhod_mod_n
;

153 
BN_MONT_CTX
 *
_mëhod_mod_p
;

154 
BN_MONT_CTX
 *
_mëhod_mod_q
;

158 *
bignum_d©a
;

159 
BN_BLINDING
 *
blödög
;

160 
BN_BLINDING
 *
mt_blödög
;

163 #i‚de‡
OPENSSL_RSA_MAX_MODULUS_BITS


164 
	#OPENSSL_RSA_MAX_MODULUS_BITS
 16384

	)

167 #i‚de‡
OPENSSL_RSA_SMALL_MODULUS_BITS


168 
	#OPENSSL_RSA_SMALL_MODULUS_BITS
 3072

	)

170 #i‚de‡
OPENSSL_RSA_MAX_PUBEXP_BITS


171 
	#OPENSSL_RSA_MAX_PUBEXP_BITS
 64

	)

174 
	#RSA_3
 0x3L

	)

175 
	#RSA_F4
 0x10001L

	)

177 
	#RSA_METHOD_FLAG_NO_CHECK
 0x0001

	)

179 
	#RSA_FLAG_CACHE_PUBLIC
 0x0002

	)

180 
	#RSA_FLAG_CACHE_PRIVATE
 0x0004

	)

181 
	#RSA_FLAG_BLINDING
 0x0008

	)

182 
	#RSA_FLAG_THREAD_SAFE
 0x0010

	)

188 
	#RSA_FLAG_EXT_PKEY
 0x0020

	)

192 
	#RSA_FLAG_SIGN_VER
 0x0040

	)

194 
	#RSA_FLAG_NO_BLINDING
 0x0080

	)

199 
	#RSA_FLAG_NO_CONSTTIME
 0x0100

	)

209 #i‚de‡
OPENSSL_NO_DEPRECATED


210 
	#RSA_FLAG_NO_EXP_CONSTTIME
 
RSA_FLAG_NO_CONSTTIME


	)

221 
	#EVP_PKEY_CTX_£t_rß_∑ddög
(
˘x
, 
∑d
) \

222 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, -1, 
EVP_PKEY_CTRL_RSA_PADDING
, \

223 
∑d
, 
NULL
)

	)

225 
	#EVP_PKEY_CTX_gë_rß_∑ddög
(
˘x
, 
µad
) \

226 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, -1, \

227 
EVP_PKEY_CTRL_GET_RSA_PADDING
, 0, 
µad
)

	)

229 
	#EVP_PKEY_CTX_£t_rß_pss_ß…Àn
(
˘x
, 
Àn
) \

230 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

231 (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

232 
EVP_PKEY_CTRL_RSA_PSS_SALTLEN
, \

233 
Àn
, 
NULL
)

	)

235 
	#EVP_PKEY_CTX_gë_rß_pss_ß…Àn
(
˘x
, 
∂í
) \

236 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

237 (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

238 
EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
, \

239 0, 
∂í
)

	)

241 
	#EVP_PKEY_CTX_£t_rß_keygí_bôs
(
˘x
, 
bôs
) \

242 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

243 
EVP_PKEY_CTRL_RSA_KEYGEN_BITS
, 
bôs
, 
NULL
)

	)

245 
	#EVP_PKEY_CTX_£t_rß_keygí_pubexp
(
˘x
, 
pubexp
) \

246 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

247 
EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
, 0, 
pubexp
)

	)

249 
	#EVP_PKEY_CTX_£t_rß_mgf1_md
(
˘x
, 
md
) \

250 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_SIG
, \

251 
EVP_PKEY_CTRL_RSA_MGF1_MD
, 0, (*)
md
)

	)

253 
	#EVP_PKEY_CTX_gë_rß_mgf1_md
(
˘x
, 
pmd
) \

254 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_SIG
, \

255 
EVP_PKEY_CTRL_GET_RSA_MGF1_MD
, 0, (*)
pmd
)

	)

257 
	#EVP_PKEY_CTRL_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

258 
	#EVP_PKEY_CTRL_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

260 
	#EVP_PKEY_CTRL_RSA_KEYGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

261 
	#EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

262 
	#EVP_PKEY_CTRL_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

264 
	#EVP_PKEY_CTRL_GET_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

265 
	#EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

266 
	#EVP_PKEY_CTRL_GET_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

268 
	#RSA_PKCS1_PADDING
 1

	)

269 
	#RSA_SSLV23_PADDING
 2

	)

270 
	#RSA_NO_PADDING
 3

	)

271 
	#RSA_PKCS1_OAEP_PADDING
 4

	)

272 
	#RSA_X931_PADDING
 5

	)

274 
	#RSA_PKCS1_PSS_PADDING
 6

	)

276 
	#RSA_PKCS1_PADDING_SIZE
 11

	)

278 
	#RSA_£t_≠p_d©a
(
s
,
¨g
Ë
	`RSA_£t_ex_d©a
(s,0,¨g)

	)

279 
	#RSA_gë_≠p_d©a
(
s
Ë
	`RSA_gë_ex_d©a
(s,0)

	)

281 
RSA
 * 
RSA_√w
();

282 
RSA
 * 
RSA_√w_mëhod
(
ENGINE
 *
ígöe
);

283 
RSA_size
(c⁄° 
RSA
 *);

286 #i‚de‡
OPENSSL_NO_DEPRECATED


287 
RSA
 * 
RSA_gíî©e_key
(
bôs
, 
e
,

288 (*
ˇŒback
)(,,*),*
cb_¨g
);

292 
RSA_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

294 
RSA_check_key
(c⁄° 
RSA
 *);

296 
RSA_public_í¸y±
(
Êí
, c⁄° *
‰om
,

297 *
to
, 
RSA
 *
rß
,
∑ddög
);

298 
RSA_¥iv©e_í¸y±
(
Êí
, c⁄° *
‰om
,

299 *
to
, 
RSA
 *
rß
,
∑ddög
);

300 
RSA_public_de¸y±
(
Êí
, c⁄° *
‰om
,

301 *
to
, 
RSA
 *
rß
,
∑ddög
);

302 
RSA_¥iv©e_de¸y±
(
Êí
, c⁄° *
‰om
,

303 *
to
, 
RSA
 *
rß
,
∑ddög
);

304 
RSA_‰ì
 (
RSA
 *
r
);

306 
RSA_up_ªf
(
RSA
 *
r
);

308 
RSA_Êags
(c⁄° 
RSA
 *
r
);

310 
RSA_£t_deÁu…_mëhod
(c⁄° 
RSA_METHOD
 *
mëh
);

311 c⁄° 
RSA_METHOD
 *
RSA_gë_deÁu…_mëhod
();

312 c⁄° 
RSA_METHOD
 *
RSA_gë_mëhod
(c⁄° 
RSA
 *
rß
);

313 
RSA_£t_mëhod
(
RSA
 *
rß
, c⁄° 
RSA_METHOD
 *
mëh
);

316 
RSA_mem‹y_lock
(
RSA
 *
r
);

319 c⁄° 
RSA_METHOD
 *
RSA_PKCS1_SSLóy
();

321 c⁄° 
RSA_METHOD
 *
RSA_nuŒ_mëhod
();

323 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPublicKey
)

324 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPriv©eKey
)

326 
	srß_pss_∑øms_°


328 
X509_ALGOR
 *
hashAlg‹ôhm
;

329 
X509_ALGOR
 *
maskGíAlg‹ôhm
;

330 
ASN1_INTEGER
 *
ß…Lígth
;

331 
ASN1_INTEGER
 *
åaûîFõld
;

332 } 
	tRSA_PSS_PARAMS
;

334 
DECLARE_ASN1_FUNCTIONS
(
RSA_PSS_PARAMS
)

336 #i‚de‡
OPENSSL_NO_FP_API


337 
RSA_¥öt_Â
(
FILE
 *
Â
, c⁄° 
RSA
 *
r
,
off£t
);

340 #i‚de‡
OPENSSL_NO_BIO


341 
RSA_¥öt
(
BIO
 *
bp
, c⁄° 
RSA
 *
r
,
off£t
);

344 #i‚de‡
OPENSSL_NO_RC4


345 
i2d_RSA_NET
(c⁄° 
RSA
 *
a
, **
µ
,

346 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
, 
vîify
),

347 
sgckey
);

348 
RSA
 *
d2i_RSA_NET
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

349 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
, 
vîify
),

350 
sgckey
);

352 
i2d_Nësˇ≥_RSA
(c⁄° 
RSA
 *
a
, **
µ
,

353 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
,

354 
vîify
));

355 
RSA
 *
d2i_Nësˇ≥_RSA
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

356 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
,

357 
vîify
));

362 
RSA_sign
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

363 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

364 
RSA_vîify
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

365 c⁄° *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

369 
RSA_sign_ASN1_OCTET_STRING
(
ty≥
,

370 c⁄° *
m
, 
m_Àngth
,

371 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

372 
RSA_vîify_ASN1_OCTET_STRING
(
ty≥
,

373 c⁄° *
m
, 
m_Àngth
,

374 *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

376 
RSA_blödög_⁄
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

377 
RSA_blödög_off
(
RSA
 *
rß
);

378 
BN_BLINDING
 *
RSA_£tup_blödög
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

380 
RSA_∑ddög_add_PKCS1_ty≥_1
(*
to
,
éí
,

381 c⁄° *
f
,
Ê
);

382 
RSA_∑ddög_check_PKCS1_ty≥_1
(*
to
,
éí
,

383 c⁄° *
f
,
Ê
,
rß_Àn
);

384 
RSA_∑ddög_add_PKCS1_ty≥_2
(*
to
,
éí
,

385 c⁄° *
f
,
Ê
);

386 
RSA_∑ddög_check_PKCS1_ty≥_2
(*
to
,
éí
,

387 c⁄° *
f
,
Ê
,
rß_Àn
);

388 
PKCS1_MGF1
(*
mask
, 
Àn
,

389 c⁄° *
£ed
, 
£edÀn
, c⁄° 
EVP_MD
 *
dg°
);

390 
RSA_∑ddög_add_PKCS1_OAEP
(*
to
,
éí
,

391 c⁄° *
f
,
Ê
,

392 c⁄° *
p
,
∂
);

393 
RSA_∑ddög_check_PKCS1_OAEP
(*
to
,
éí
,

394 c⁄° *
f
,
Ê
,
rß_Àn
,

395 c⁄° *
p
,
∂
);

396 
RSA_∑ddög_add_SSLv23
(*
to
,
éí
,

397 c⁄° *
f
,
Ê
);

398 
RSA_∑ddög_check_SSLv23
(*
to
,
éí
,

399 c⁄° *
f
,
Ê
,
rß_Àn
);

400 
RSA_∑ddög_add_n⁄e
(*
to
,
éí
,

401 c⁄° *
f
,
Ê
);

402 
RSA_∑ddög_check_n⁄e
(*
to
,
éí
,

403 c⁄° *
f
,
Ê
,
rß_Àn
);

404 
RSA_∑ddög_add_X931
(*
to
,
éí
,

405 c⁄° *
f
,
Ê
);

406 
RSA_∑ddög_check_X931
(*
to
,
éí
,

407 c⁄° *
f
,
Ê
,
rß_Àn
);

408 
RSA_X931_hash_id
(
nid
);

410 
RSA_vîify_PKCS1_PSS
(
RSA
 *
rß
, c⁄° *
mHash
,

411 c⁄° 
EVP_MD
 *
Hash
, c⁄° *
EM
, 
sLí
);

412 
RSA_∑ddög_add_PKCS1_PSS
(
RSA
 *
rß
, *
EM
,

413 c⁄° *
mHash
,

414 c⁄° 
EVP_MD
 *
Hash
, 
sLí
);

416 
RSA_vîify_PKCS1_PSS_mgf1
(
RSA
 *
rß
, c⁄° *
mHash
,

417 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
,

418 c⁄° *
EM
, 
sLí
);

420 
RSA_∑ddög_add_PKCS1_PSS_mgf1
(
RSA
 *
rß
, *
EM
,

421 c⁄° *
mHash
,

422 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
, 
sLí
);

424 
RSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

425 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

426 
RSA_£t_ex_d©a
(
RSA
 *
r
,
idx
,*
¨g
);

427 *
RSA_gë_ex_d©a
(c⁄° 
RSA
 *
r
, 
idx
);

429 
RSA
 *
RSAPublicKey_dup
(RSA *
rß
);

430 
RSA
 *
RSAPriv©eKey_dup
(RSA *
rß
);

438 
	#RSA_FLAG_FIPS_METHOD
 0x0400

	)

445 
	#RSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

449 
	#RSA_FLAG_CHECKED
 0x0800

	)

455 
ERR_lﬂd_RSA_°rögs
();

460 
	#RSA_F_CHECK_PADDING_MD
 140

	)

461 
	#RSA_F_DO_RSA_PRINT
 146

	)

462 
	#RSA_F_INT_RSA_VERIFY
 145

	)

463 
	#RSA_F_MEMORY_LOCK
 100

	)

464 
	#RSA_F_OLD_RSA_PRIV_DECODE
 147

	)

465 
	#RSA_F_PKEY_RSA_CTRL
 143

	)

466 
	#RSA_F_PKEY_RSA_CTRL_STR
 144

	)

467 
	#RSA_F_PKEY_RSA_SIGN
 142

	)

468 
	#RSA_F_PKEY_RSA_VERIFY
 154

	)

469 
	#RSA_F_PKEY_RSA_VERIFYRECOVER
 141

	)

470 
	#RSA_F_RSA_BUILTIN_KEYGEN
 129

	)

471 
	#RSA_F_RSA_CHECK_KEY
 123

	)

472 
	#RSA_F_RSA_EAY_PRIVATE_DECRYPT
 101

	)

473 
	#RSA_F_RSA_EAY_PRIVATE_ENCRYPT
 102

	)

474 
	#RSA_F_RSA_EAY_PUBLIC_DECRYPT
 103

	)

475 
	#RSA_F_RSA_EAY_PUBLIC_ENCRYPT
 104

	)

476 
	#RSA_F_RSA_GENERATE_KEY
 105

	)

477 
	#RSA_F_RSA_GENERATE_KEY_EX
 155

	)

478 
	#RSA_F_RSA_ITEM_VERIFY
 156

	)

479 
	#RSA_F_RSA_MEMORY_LOCK
 130

	)

480 
	#RSA_F_RSA_NEW_METHOD
 106

	)

481 
	#RSA_F_RSA_NULL
 124

	)

482 
	#RSA_F_RSA_NULL_MOD_EXP
 131

	)

483 
	#RSA_F_RSA_NULL_PRIVATE_DECRYPT
 132

	)

484 
	#RSA_F_RSA_NULL_PRIVATE_ENCRYPT
 133

	)

485 
	#RSA_F_RSA_NULL_PUBLIC_DECRYPT
 134

	)

486 
	#RSA_F_RSA_NULL_PUBLIC_ENCRYPT
 135

	)

487 
	#RSA_F_RSA_PADDING_ADD_NONE
 107

	)

488 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP
 121

	)

489 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS
 125

	)

490 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1
 148

	)

491 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1
 108

	)

492 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2
 109

	)

493 
	#RSA_F_RSA_PADDING_ADD_SSLV23
 110

	)

494 
	#RSA_F_RSA_PADDING_ADD_X931
 127

	)

495 
	#RSA_F_RSA_PADDING_CHECK_NONE
 111

	)

496 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP
 122

	)

497 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1
 112

	)

498 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2
 113

	)

499 
	#RSA_F_RSA_PADDING_CHECK_SSLV23
 114

	)

500 
	#RSA_F_RSA_PADDING_CHECK_X931
 128

	)

501 
	#RSA_F_RSA_PRINT
 115

	)

502 
	#RSA_F_RSA_PRINT_FP
 116

	)

503 
	#RSA_F_RSA_PRIVATE_DECRYPT
 150

	)

504 
	#RSA_F_RSA_PRIVATE_ENCRYPT
 151

	)

505 
	#RSA_F_RSA_PRIV_DECODE
 137

	)

506 
	#RSA_F_RSA_PRIV_ENCODE
 138

	)

507 
	#RSA_F_RSA_PUBLIC_DECRYPT
 152

	)

508 
	#RSA_F_RSA_PUBLIC_ENCRYPT
 153

	)

509 
	#RSA_F_RSA_PUB_DECODE
 139

	)

510 
	#RSA_F_RSA_SETUP_BLINDING
 136

	)

511 
	#RSA_F_RSA_SIGN
 117

	)

512 
	#RSA_F_RSA_SIGN_ASN1_OCTET_STRING
 118

	)

513 
	#RSA_F_RSA_VERIFY
 119

	)

514 
	#RSA_F_RSA_VERIFY_ASN1_OCTET_STRING
 120

	)

515 
	#RSA_F_RSA_VERIFY_PKCS1_PSS
 126

	)

516 
	#RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1
 149

	)

519 
	#RSA_R_ALGORITHM_MISMATCH
 100

	)

520 
	#RSA_R_BAD_E_VALUE
 101

	)

521 
	#RSA_R_BAD_FIXED_HEADER_DECRYPT
 102

	)

522 
	#RSA_R_BAD_PAD_BYTE_COUNT
 103

	)

523 
	#RSA_R_BAD_SIGNATURE
 104

	)

524 
	#RSA_R_BLOCK_TYPE_IS_NOT_01
 106

	)

525 
	#RSA_R_BLOCK_TYPE_IS_NOT_02
 107

	)

526 
	#RSA_R_DATA_GREATER_THAN_MOD_LEN
 108

	)

527 
	#RSA_R_DATA_TOO_LARGE
 109

	)

528 
	#RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 110

	)

529 
	#RSA_R_DATA_TOO_LARGE_FOR_MODULUS
 132

	)

530 
	#RSA_R_DATA_TOO_SMALL
 111

	)

531 
	#RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE
 122

	)

532 
	#RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY
 112

	)

533 
	#RSA_R_DMP1_NOT_CONGRUENT_TO_D
 124

	)

534 
	#RSA_R_DMQ1_NOT_CONGRUENT_TO_D
 125

	)

535 
	#RSA_R_D_E_NOT_CONGRUENT_TO_1
 123

	)

536 
	#RSA_R_FIRST_OCTET_INVALID
 133

	)

537 
	#RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE
 144

	)

538 
	#RSA_R_INVALID_DIGEST_LENGTH
 143

	)

539 
	#RSA_R_INVALID_HEADER
 137

	)

540 
	#RSA_R_INVALID_KEYBITS
 145

	)

541 
	#RSA_R_INVALID_MESSAGE_LENGTH
 131

	)

542 
	#RSA_R_INVALID_MGF1_MD
 156

	)

543 
	#RSA_R_INVALID_PADDING
 138

	)

544 
	#RSA_R_INVALID_PADDING_MODE
 141

	)

545 
	#RSA_R_INVALID_PSS_PARAMETERS
 149

	)

546 
	#RSA_R_INVALID_PSS_SALTLEN
 146

	)

547 
	#RSA_R_INVALID_SALT_LENGTH
 150

	)

548 
	#RSA_R_INVALID_TRAILER
 139

	)

549 
	#RSA_R_INVALID_X931_DIGEST
 142

	)

550 
	#RSA_R_IQMP_NOT_INVERSE_OF_Q
 126

	)

551 
	#RSA_R_KEY_SIZE_TOO_SMALL
 120

	)

552 
	#RSA_R_LAST_OCTET_INVALID
 134

	)

553 
	#RSA_R_MODULUS_TOO_LARGE
 105

	)

554 
	#RSA_R_NON_FIPS_RSA_METHOD
 157

	)

555 
	#RSA_R_NO_PUBLIC_EXPONENT
 140

	)

556 
	#RSA_R_NULL_BEFORE_BLOCK_MISSING
 113

	)

557 
	#RSA_R_N_DOES_NOT_EQUAL_P_Q
 127

	)

558 
	#RSA_R_OAEP_DECODING_ERROR
 121

	)

559 
	#RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE
 158

	)

560 
	#RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 148

	)

561 
	#RSA_R_PADDING_CHECK_FAILED
 114

	)

562 
	#RSA_R_P_NOT_PRIME
 128

	)

563 
	#RSA_R_Q_NOT_PRIME
 129

	)

564 
	#RSA_R_RSA_OPERATIONS_NOT_SUPPORTED
 130

	)

565 
	#RSA_R_SLEN_CHECK_FAILED
 136

	)

566 
	#RSA_R_SLEN_RECOVERY_FAILED
 135

	)

567 
	#RSA_R_SSLV3_ROLLBACK_ATTACK
 115

	)

568 
	#RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 116

	)

569 
	#RSA_R_UNKNOWN_ALGORITHM_TYPE
 117

	)

570 
	#RSA_R_UNKNOWN_MASK_DIGEST
 151

	)

571 
	#RSA_R_UNKNOWN_PADDING_TYPE
 118

	)

572 
	#RSA_R_UNKNOWN_PSS_DIGEST
 152

	)

573 
	#RSA_R_UNSUPPORTED_MASK_ALGORITHM
 153

	)

574 
	#RSA_R_UNSUPPORTED_MASK_PARAMETER
 154

	)

575 
	#RSA_R_UNSUPPORTED_SIGNATURE_TYPE
 155

	)

576 
	#RSA_R_VALUE_MISSING
 147

	)

577 
	#RSA_R_WRONG_SIGNATURE_LENGTH
 119

	)

579 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/sha.h

59 #i‚de‡
HEADER_SHA_H


60 
	#HEADER_SHA_H


	)

62 
	~<°ddef.h
>

63 
	~<›ís¶/e_os2.h
>

64 
	~<°ddef.h
>

66 #ifde‡ 
__˝lu•lus


70 #i‡
deföed
(
OPENSSL_NO_SHA
Ë|| (deföed(
OPENSSL_NO_SHA0
Ë&& deföed(
OPENSSL_NO_SHA1
))

71 #îr‹ 
SHA
 
is
 
dißbÀd
.

74 #i‡
deföed
(
OPENSSL_FIPS
)

75 
	#FIPS_SHA_SIZE_T
 
size_t


	)

85 #i‡
deföed
(
__LP32__
)

86 
	#SHA_LONG
 

	)

87 #ñi‡
deföed
(
OPENSSL_SYS_CRAY
Ë|| deföed(
__ILP64__
)

88 
	#SHA_LONG
 

	)

89 
	#SHA_LONG_LOG2
 3

	)

91 
	#SHA_LONG
 

	)

94 
	#SHA_LBLOCK
 16

	)

95 
	#SHA_CBLOCK
 (
SHA_LBLOCK
*4Ë

	)

98 
	#SHA_LAST_BLOCK
 (
SHA_CBLOCK
-8)

	)

99 
	#SHA_DIGEST_LENGTH
 20

	)

101 
	sSHA°©e_°


103 
SHA_LONG
 
h0
,
h1
,
h2
,
h3
,
h4
;

104 
SHA_LONG
 
Nl
,
Nh
;

105 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

106 
num
;

107 } 
	tSHA_CTX
;

109 #i‚de‡
OPENSSL_NO_SHA0


110 #ifde‡
OPENSSL_FIPS


111 
¥iv©e_SHA_Inô
(
SHA_CTX
 *
c
);

113 
SHA_Inô
(
SHA_CTX
 *
c
);

114 
SHA_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

115 
SHA_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

116 *
SHA
(c⁄° *
d
, 
size_t
 
n
, *
md
);

117 
SHA_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

119 #i‚de‡
OPENSSL_NO_SHA1


120 #ifde‡
OPENSSL_FIPS


121 
¥iv©e_SHA1_Inô
(
SHA_CTX
 *
c
);

123 
SHA1_Inô
(
SHA_CTX
 *
c
);

124 
SHA1_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

125 
SHA1_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

126 *
SHA1
(c⁄° *
d
, 
size_t
 
n
, *
md
);

127 
SHA1_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

130 
	#SHA256_CBLOCK
 (
SHA_LBLOCK
*4Ë

	)

133 
	#SHA224_DIGEST_LENGTH
 28

	)

134 
	#SHA256_DIGEST_LENGTH
 32

	)

136 
	sSHA256°©e_°


138 
SHA_LONG
 
h
[8];

139 
SHA_LONG
 
Nl
,
Nh
;

140 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

141 
num
,
md_Àn
;

142 } 
	tSHA256_CTX
;

144 #i‚de‡
OPENSSL_NO_SHA256


145 #ifde‡
OPENSSL_FIPS


146 
¥iv©e_SHA224_Inô
(
SHA256_CTX
 *
c
);

147 
¥iv©e_SHA256_Inô
(
SHA256_CTX
 *
c
);

149 
SHA224_Inô
(
SHA256_CTX
 *
c
);

150 
SHA224_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

151 
SHA224_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

152 *
SHA224
(c⁄° *
d
, 
size_t
 
n
,*
md
);

153 
SHA256_Inô
(
SHA256_CTX
 *
c
);

154 
SHA256_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

155 
SHA256_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

156 *
SHA256
(c⁄° *
d
, 
size_t
 
n
,*
md
);

157 
SHA256_Tønsf‹m
(
SHA256_CTX
 *
c
, c⁄° *
d©a
);

160 
	#SHA384_DIGEST_LENGTH
 48

	)

161 
	#SHA512_DIGEST_LENGTH
 64

	)

163 #i‚de‡
OPENSSL_NO_SHA512


169 
	#SHA512_CBLOCK
 (
SHA_LBLOCK
*8Ë

	)

172 #i‡(
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)Ë&& !deföed(
__MINGW32__
)

173 
	#SHA_LONG64
 
__öt64


	)

174 
	#U64
(
C
ËC##
UI64


	)

175 #ñi‡
deföed
(
__¨ch64__
)

176 
	#SHA_LONG64
 

	)

177 
	#U64
(
C
ËC##
UL


	)

179 
	#SHA_LONG64
 

	)

180 
	#U64
(
C
ËC##
ULL


	)

183 
	sSHA512°©e_°


185 
SHA_LONG64
 
h
[8];

186 
SHA_LONG64
 
Nl
,
Nh
;

188 
SHA_LONG64
 
d
[
SHA_LBLOCK
];

189 
p
[
SHA512_CBLOCK
];

190 } 
u
;

191 
num
,
md_Àn
;

192 } 
	tSHA512_CTX
;

195 #i‚de‡
OPENSSL_NO_SHA512


196 #ifde‡
OPENSSL_FIPS


197 
¥iv©e_SHA384_Inô
(
SHA512_CTX
 *
c
);

198 
¥iv©e_SHA512_Inô
(
SHA512_CTX
 *
c
);

200 
SHA384_Inô
(
SHA512_CTX
 *
c
);

201 
SHA384_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

202 
SHA384_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

203 *
SHA384
(c⁄° *
d
, 
size_t
 
n
,*
md
);

204 
SHA512_Inô
(
SHA512_CTX
 *
c
);

205 
SHA512_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

206 
SHA512_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

207 *
SHA512
(c⁄° *
d
, 
size_t
 
n
,*
md
);

208 
SHA512_Tønsf‹m
(
SHA512_CTX
 *
c
, c⁄° *
d©a
);

211 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/stack.h

59 #i‚de‡
HEADER_STACK_H


60 
	#HEADER_STACK_H


	)

62 #ifde‡ 
__˝lu•lus


66 
	s°ack_°


68 
num
;

69 **
d©a
;

70 
s‹ãd
;

72 
num_Æloc
;

73 (*
comp
)(const *, const *);

74 } 
	t_STACK
;

76 
	#M_sk_num
(
sk
Ë((skË? (sk)->
num
:-1)

	)

77 
	#M_sk_vÆue
(
sk
,
n
Ë((skË? (sk)->
d©a
[n] : 
NULL
)

	)

79 
sk_num
(c⁄° 
_STACK
 *);

80 *
sk_vÆue
(c⁄° 
_STACK
 *, );

82 *
sk_£t
(
_STACK
 *, , *);

84 
_STACK
 *
sk_√w
((*
cmp
)(const *, const *));

85 
_STACK
 *
sk_√w_nuŒ
();

86 
sk_‰ì
(
_STACK
 *);

87 
sk_p›_‰ì
(
_STACK
 *
°
, (*
func
)(*));

88 
sk_ö£π
(
_STACK
 *
sk
, *
d©a
, 
whîe
);

89 *
sk_dñëe
(
_STACK
 *
°
, 
loc
);

90 *
sk_dñëe_±r
(
_STACK
 *
°
, *
p
);

91 
sk_föd
(
_STACK
 *
°
, *
d©a
);

92 
sk_föd_ex
(
_STACK
 *
°
, *
d©a
);

93 
sk_push
(
_STACK
 *
°
, *
d©a
);

94 
sk_unshi·
(
_STACK
 *
°
, *
d©a
);

95 *
sk_shi·
(
_STACK
 *
°
);

96 *
sk_p›
(
_STACK
 *
°
);

97 
sk_zîo
(
_STACK
 *
°
);

98 (*
sk_£t_cmp_func
(
_STACK
 *
sk
, (*
c
)(const *, const *)))

100 
_STACK
 *
sk_dup
(_STACK *
°
);

101 
sk_s‹t
(
_STACK
 *
°
);

102 
sk_is_s‹ãd
(c⁄° 
_STACK
 *
°
);

104 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509_vfy.h

59 #i‚de‡
HEADER_X509_H


60 
	~<›ís¶/x509.h
>

65 #i‚de‡
HEADER_X509_VFY_H


66 
	#HEADER_X509_VFY_H


	)

68 
	~<›ís¶/›ís¶c⁄f.h
>

69 #i‚de‡
OPENSSL_NO_LHASH


70 
	~<›ís¶/lhash.h
>

72 
	~<›ís¶/bio.h
>

73 
	~<›ís¶/¸y±o.h
>

74 
	~<›ís¶/symhacks.h
>

76 #ifde‡ 
__˝lu•lus


82 
	sx509_hash_dú_°


84 
num_dús
;

85 **
dús
;

86 *
dús_ty≥
;

87 
num_dús_Ælo˚d
;

88 } 
	tX509_HASH_DIR_CTX
;

91 
	sx509_fûe_°


93 
	gnum_∑ths
;

94 
	gnum_Ælo˚d
;

95 **
	g∑ths
;

96 *
	g∑th_ty≥
;

97 } 
	tX509_CERT_FILE_CTX
;

117 
	#X509_LU_RETRY
 -1

	)

118 
	#X509_LU_FAIL
 0

	)

119 
	#X509_LU_X509
 1

	)

120 
	#X509_LU_CRL
 2

	)

121 
	#X509_LU_PKEY
 3

	)

123 
	sx509_obje˘_°


126 
	gty≥
;

128 *
	g±r
;

129 
X509
 *
	gx509
;

130 
X509_CRL
 *
	g¸l
;

131 
EVP_PKEY
 *
	gpkey
;

132 } 
	gd©a
;

133 } 
	tX509_OBJECT
;

135 
x509_lookup_°
 
	tX509_LOOKUP
;

137 
DECLARE_STACK_OF
(
X509_LOOKUP
)

138 
DECLARE_STACK_OF
(
X509_OBJECT
)

141 
	sx509_lookup_mëhod_°


143 c⁄° *
	g«me
;

144 (*
	g√w_ôem
)(
X509_LOOKUP
 *
	g˘x
);

145 (*
	g‰ì
)(
X509_LOOKUP
 *
	g˘x
);

146 (*
	göô
)(
X509_LOOKUP
 *
	g˘x
);

147 (*
	gshutdown
)(
X509_LOOKUP
 *
	g˘x
);

148 (*
	g˘æ
)(
X509_LOOKUP
 *
	g˘x
,
	gcmd
,c⁄° *
	g¨gc
,
	g¨gl
,

149 **
	gªt
);

150 (*
	ggë_by_subje˘
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,
X509_NAME
 *
	g«me
,

151 
X509_OBJECT
 *
	gªt
);

152 (*
	ggë_by_issuî_£rül
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,
X509_NAME
 *
	g«me
,

153 
ASN1_INTEGER
 *
	g£rül
,
X509_OBJECT
 *
	gªt
);

154 (*
	ggë_by_fögî¥öt
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,

155 *
	gbyãs
,
	gÀn
,

156 
X509_OBJECT
 *
	gªt
);

157 (*
	ggë_by_Æüs
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,*
	g°r
,
	gÀn
,

158 
X509_OBJECT
 *
	gªt
);

159 } 
	tX509_LOOKUP_METHOD
;

166 
	sX509_VERIFY_PARAM_°


168 *
	g«me
;

169 
time_t
 
	gcheck_time
;

170 
	göh_Êags
;

171 
	gÊags
;

172 
	gpuΩo£
;

173 
	gåu°
;

174 
	gdïth
;

175 
STACK_OF
(
ASN1_OBJECT
Ë*
	gpﬁicõs
;

176 } 
	tX509_VERIFY_PARAM
;

178 
DECLARE_STACK_OF
(
X509_VERIFY_PARAM
)

183 
	sx509_°‹e_°


186 
	gˇche
;

187 
STACK_OF
(
X509_OBJECT
Ë*
	gobjs
;

190 
STACK_OF
(
X509_LOOKUP
Ë*
	ggë_˚π_mëhods
;

192 
X509_VERIFY_PARAM
 *
	g∑øm
;

195 (*
	gvîify
)(
X509_STORE_CTX
 *
	g˘x
);

196 (*
	gvîify_cb
)(
	gok
,
X509_STORE_CTX
 *
	g˘x
);

197 (*
	ggë_issuî
)(
X509
 **
	gissuî
, 
X509_STORE_CTX
 *
	g˘x
, X509 *
	gx
);

198 (*
	gcheck_issued
)(
X509_STORE_CTX
 *
	g˘x
, 
X509
 *
	gx
, X509 *
	gissuî
);

199 (*
	gcheck_ªvoˇti⁄
)(
X509_STORE_CTX
 *
	g˘x
);

200 (*
	ggë_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 **
	g¸l
, 
X509
 *
	gx
);

201 (*
	gcheck_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
);

202 (*
	g˚π_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
, 
X509
 *
	gx
);

203 
STACK_OF
(
X509
Ë* (*
	glookup_˚πs
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

204 
STACK_OF
(
X509_CRL
Ë* (*
	glookup_¸ls
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

205 (*
	g˛ónup
)(
X509_STORE_CTX
 *
	g˘x
);

207 
CRYPTO_EX_DATA
 
	gex_d©a
;

208 
	gª„ªn˚s
;

211 
X509_STORE_£t_dïth
(
X509_STORE
 *
°‹e
, 
dïth
);

213 
	#X509_STORE_£t_vîify_cb_func
(
˘x
,
func
Ë((˘x)->
vîify_cb
=(func))

	)

214 
	#X509_STORE_£t_vîify_func
(
˘x
,
func
Ë((˘x)->
vîify
=(func))

	)

217 
	sx509_lookup_°


219 
	göô
;

220 
	gskù
;

221 
X509_LOOKUP_METHOD
 *
	gmëhod
;

222 *
	gmëhod_d©a
;

224 
X509_STORE
 *
	g°‹e_˘x
;

230 
	sx509_°‹e_˘x_°


232 
X509_STORE
 *
	g˘x
;

233 
	gcuºít_mëhod
;

236 
X509
 *
	g˚π
;

237 
STACK_OF
(
X509
Ë*
	gu¡ru°ed
;

238 
STACK_OF
(
X509_CRL
Ë*
	g¸ls
;

240 
X509_VERIFY_PARAM
 *
	g∑øm
;

241 *
	gŸhî_˘x
;

244 (*
	gvîify
)(
X509_STORE_CTX
 *
	g˘x
);

245 (*
	gvîify_cb
)(
	gok
,
X509_STORE_CTX
 *
	g˘x
);

246 (*
	ggë_issuî
)(
X509
 **
	gissuî
, 
X509_STORE_CTX
 *
	g˘x
, X509 *
	gx
);

247 (*
	gcheck_issued
)(
X509_STORE_CTX
 *
	g˘x
, 
X509
 *
	gx
, X509 *
	gissuî
);

248 (*
	gcheck_ªvoˇti⁄
)(
X509_STORE_CTX
 *
	g˘x
);

249 (*
	ggë_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 **
	g¸l
, 
X509
 *
	gx
);

250 (*
	gcheck_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
);

251 (*
	g˚π_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
, 
X509
 *
	gx
);

252 (*
	gcheck_pﬁicy
)(
X509_STORE_CTX
 *
	g˘x
);

253 
STACK_OF
(
X509
Ë* (*
	glookup_˚πs
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

254 
STACK_OF
(
X509_CRL
Ë* (*
	glookup_¸ls
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

255 (*
	g˛ónup
)(
X509_STORE_CTX
 *
	g˘x
);

258 
	gvÆid
;

259 
	gœ°_u¡ru°ed
;

260 
STACK_OF
(
X509
Ë*
	gchaö
;

261 
X509_POLICY_TREE
 *
	gåì
;

263 
	gex∂icô_pﬁicy
;

266 
	gîr‹_dïth
;

267 
	gîr‹
;

268 
X509
 *
	gcuºít_˚π
;

269 
X509
 *
	gcuºít_issuî
;

270 
X509_CRL
 *
	gcuºít_¸l
;

272 
	gcuºít_¸l_sc‹e
;

273 
	gcuºít_ªas⁄s
;

275 
X509_STORE_CTX
 *
	g∑ª¡
;

277 
CRYPTO_EX_DATA
 
	gex_d©a
;

280 
X509_STORE_CTX_£t_dïth
(
X509_STORE_CTX
 *
˘x
, 
dïth
);

282 
	#X509_STORE_CTX_£t_≠p_d©a
(
˘x
,
d©a
) \

283 
	`X509_STORE_CTX_£t_ex_d©a
(
˘x
,0,
d©a
)

	)

284 
	#X509_STORE_CTX_gë_≠p_d©a
(
˘x
) \

285 
	`X509_STORE_CTX_gë_ex_d©a
(
˘x
,0)

	)

287 
	#X509_L_FILE_LOAD
 1

	)

288 
	#X509_L_ADD_DIR
 2

	)

290 
	#X509_LOOKUP_lﬂd_fûe
(
x
,
«me
,
ty≥
) \

291 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_FILE_LOAD
,(
«me
),()(
ty≥
),
NULL
)

	)

293 
	#X509_LOOKUP_add_dú
(
x
,
«me
,
ty≥
) \

294 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_ADD_DIR
,(
«me
),()(
ty≥
),
NULL
)

	)

296 
	#X509_V_OK
 0

	)

299 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
 2

	)

300 
	#X509_V_ERR_UNABLE_TO_GET_CRL
 3

	)

301 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
 4

	)

302 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
 5

	)

303 
	#X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
 6

	)

304 
	#X509_V_ERR_CERT_SIGNATURE_FAILURE
 7

	)

305 
	#X509_V_ERR_CRL_SIGNATURE_FAILURE
 8

	)

306 
	#X509_V_ERR_CERT_NOT_YET_VALID
 9

	)

307 
	#X509_V_ERR_CERT_HAS_EXPIRED
 10

	)

308 
	#X509_V_ERR_CRL_NOT_YET_VALID
 11

	)

309 
	#X509_V_ERR_CRL_HAS_EXPIRED
 12

	)

310 
	#X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
 13

	)

311 
	#X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
 14

	)

312 
	#X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
 15

	)

313 
	#X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
 16

	)

314 
	#X509_V_ERR_OUT_OF_MEM
 17

	)

315 
	#X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 18

	)

316 
	#X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 19

	)

317 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 20

	)

318 
	#X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
 21

	)

319 
	#X509_V_ERR_CERT_CHAIN_TOO_LONG
 22

	)

320 
	#X509_V_ERR_CERT_REVOKED
 23

	)

321 
	#X509_V_ERR_INVALID_CA
 24

	)

322 
	#X509_V_ERR_PATH_LENGTH_EXCEEDED
 25

	)

323 
	#X509_V_ERR_INVALID_PURPOSE
 26

	)

324 
	#X509_V_ERR_CERT_UNTRUSTED
 27

	)

325 
	#X509_V_ERR_CERT_REJECTED
 28

	)

327 
	#X509_V_ERR_SUBJECT_ISSUER_MISMATCH
 29

	)

328 
	#X509_V_ERR_AKID_SKID_MISMATCH
 30

	)

329 
	#X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
 31

	)

330 
	#X509_V_ERR_KEYUSAGE_NO_CERTSIGN
 32

	)

332 
	#X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER
 33

	)

333 
	#X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION
 34

	)

334 
	#X509_V_ERR_KEYUSAGE_NO_CRL_SIGN
 35

	)

335 
	#X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION
 36

	)

336 
	#X509_V_ERR_INVALID_NON_CA
 37

	)

337 
	#X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED
 38

	)

338 
	#X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE
 39

	)

339 
	#X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED
 40

	)

341 
	#X509_V_ERR_INVALID_EXTENSION
 41

	)

342 
	#X509_V_ERR_INVALID_POLICY_EXTENSION
 42

	)

343 
	#X509_V_ERR_NO_EXPLICIT_POLICY
 43

	)

344 
	#X509_V_ERR_DIFFERENT_CRL_SCOPE
 44

	)

345 
	#X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE
 45

	)

347 
	#X509_V_ERR_UNNESTED_RESOURCE
 46

	)

349 
	#X509_V_ERR_PERMITTED_VIOLATION
 47

	)

350 
	#X509_V_ERR_EXCLUDED_VIOLATION
 48

	)

351 
	#X509_V_ERR_SUBTREE_MINMAX
 49

	)

352 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE
 51

	)

353 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX
 52

	)

354 
	#X509_V_ERR_UNSUPPORTED_NAME_SYNTAX
 53

	)

355 
	#X509_V_ERR_CRL_PATH_VALIDATION_ERROR
 54

	)

358 
	#X509_V_ERR_APPLICATION_VERIFICATION
 50

	)

363 
	#X509_V_FLAG_CB_ISSUER_CHECK
 0x1

	)

365 
	#X509_V_FLAG_USE_CHECK_TIME
 0x2

	)

367 
	#X509_V_FLAG_CRL_CHECK
 0x4

	)

369 
	#X509_V_FLAG_CRL_CHECK_ALL
 0x8

	)

371 
	#X509_V_FLAG_IGNORE_CRITICAL
 0x10

	)

373 
	#X509_V_FLAG_X509_STRICT
 0x20

	)

375 
	#X509_V_FLAG_ALLOW_PROXY_CERTS
 0x40

	)

377 
	#X509_V_FLAG_POLICY_CHECK
 0x80

	)

379 
	#X509_V_FLAG_EXPLICIT_POLICY
 0x100

	)

381 
	#X509_V_FLAG_INHIBIT_ANY
 0x200

	)

383 
	#X509_V_FLAG_INHIBIT_MAP
 0x400

	)

385 
	#X509_V_FLAG_NOTIFY_POLICY
 0x800

	)

387 
	#X509_V_FLAG_EXTENDED_CRL_SUPPORT
 0x1000

	)

389 
	#X509_V_FLAG_USE_DELTAS
 0x2000

	)

391 
	#X509_V_FLAG_CHECK_SS_SIGNATURE
 0x4000

	)

394 
	#X509_VP_FLAG_DEFAULT
 0x1

	)

395 
	#X509_VP_FLAG_OVERWRITE
 0x2

	)

396 
	#X509_VP_FLAG_RESET_FLAGS
 0x4

	)

397 
	#X509_VP_FLAG_LOCKED
 0x8

	)

398 
	#X509_VP_FLAG_ONCE
 0x10

	)

401 
	#X509_V_FLAG_POLICY_MASK
 (
X509_V_FLAG_POLICY_CHECK
 \

402 | 
X509_V_FLAG_EXPLICIT_POLICY
 \

403 | 
X509_V_FLAG_INHIBIT_ANY
 \

404 | 
X509_V_FLAG_INHIBIT_MAP
)

	)

406 
X509_OBJECT_idx_by_subje˘
(
STACK_OF
(
X509_OBJECT
Ë*
h
, 
ty≥
,

407 
X509_NAME
 *
«me
);

408 
X509_OBJECT
 *
X509_OBJECT_ªåõve_by_subje˘
(
STACK_OF
(X509_OBJECTË*
h
,
ty≥
,
X509_NAME
 *
«me
);

409 
X509_OBJECT
 *
X509_OBJECT_ªåõve_m©ch
(
STACK_OF
(X509_OBJECTË*
h
, X509_OBJECT *
x
);

410 
X509_OBJECT_up_ªf_cou¡
(
X509_OBJECT
 *
a
);

411 
X509_OBJECT_‰ì_c⁄ã¡s
(
X509_OBJECT
 *
a
);

412 
X509_STORE
 *
X509_STORE_√w
();

413 
X509_STORE_‰ì
(
X509_STORE
 *
v
);

415 
STACK_OF
(
X509
)* 
X509_STORE_gë1_˚πs
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

416 
STACK_OF
(
X509_CRL
)* 
X509_STORE_gë1_¸ls
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

417 
X509_STORE_£t_Êags
(
X509_STORE
 *
˘x
, 
Êags
);

418 
X509_STORE_£t_puΩo£
(
X509_STORE
 *
˘x
, 
puΩo£
);

419 
X509_STORE_£t_åu°
(
X509_STORE
 *
˘x
, 
åu°
);

420 
X509_STORE_£t1_∑øm
(
X509_STORE
 *
˘x
, 
X509_VERIFY_PARAM
 *
pm
);

422 
X509_STORE_£t_vîify_cb
(
X509_STORE
 *
˘x
,

423 (*
vîify_cb
)(, 
X509_STORE_CTX
 *));

425 
X509_STORE_CTX
 *
X509_STORE_CTX_√w
();

427 
X509_STORE_CTX_gë1_issuî
(
X509
 **
issuî
, 
X509_STORE_CTX
 *
˘x
, X509 *
x
);

429 
X509_STORE_CTX_‰ì
(
X509_STORE_CTX
 *
˘x
);

430 
X509_STORE_CTX_öô
(
X509_STORE_CTX
 *
˘x
, 
X509_STORE
 *
°‹e
,

431 
X509
 *
x509
, 
STACK_OF
(X509Ë*
chaö
);

432 
X509_STORE_CTX_åu°ed_°ack
(
X509_STORE_CTX
 *
˘x
, 
STACK_OF
(
X509
Ë*
sk
);

433 
X509_STORE_CTX_˛ónup
(
X509_STORE_CTX
 *
˘x
);

435 
X509_LOOKUP
 *
X509_STORE_add_lookup
(
X509_STORE
 *
v
, 
X509_LOOKUP_METHOD
 *
m
);

437 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_hash_dú
();

438 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_fûe
();

440 
X509_STORE_add_˚π
(
X509_STORE
 *
˘x
, 
X509
 *
x
);

441 
X509_STORE_add_¸l
(
X509_STORE
 *
˘x
, 
X509_CRL
 *
x
);

443 
X509_STORE_gë_by_subje˘
(
X509_STORE_CTX
 *
vs
,
ty≥
,
X509_NAME
 *
«me
,

444 
X509_OBJECT
 *
ªt
);

446 
X509_LOOKUP_˘æ
(
X509_LOOKUP
 *
˘x
, 
cmd
, c⁄° *
¨gc
,

447 
¨gl
, **
ªt
);

449 #i‚de‡
OPENSSL_NO_STDIO


450 
X509_lﬂd_˚π_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

451 
X509_lﬂd_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

452 
X509_lﬂd_˚π_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

456 
X509_LOOKUP
 *
X509_LOOKUP_√w
(
X509_LOOKUP_METHOD
 *
mëhod
);

457 
X509_LOOKUP_‰ì
(
X509_LOOKUP
 *
˘x
);

458 
X509_LOOKUP_öô
(
X509_LOOKUP
 *
˘x
);

459 
X509_LOOKUP_by_subje˘
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

460 
X509_OBJECT
 *
ªt
);

461 
X509_LOOKUP_by_issuî_£rül
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

462 
ASN1_INTEGER
 *
£rül
, 
X509_OBJECT
 *
ªt
);

463 
X509_LOOKUP_by_fögî¥öt
(
X509_LOOKUP
 *
˘x
, 
ty≥
,

464 *
byãs
, 
Àn
, 
X509_OBJECT
 *
ªt
);

465 
X509_LOOKUP_by_Æüs
(
X509_LOOKUP
 *
˘x
, 
ty≥
, *
°r
,

466 
Àn
, 
X509_OBJECT
 *
ªt
);

467 
X509_LOOKUP_shutdown
(
X509_LOOKUP
 *
˘x
);

469 #i‚de‡
OPENSSL_NO_STDIO


470 
X509_STORE_lﬂd_loˇti⁄s
 (
X509_STORE
 *
˘x
,

471 c⁄° *
fûe
, c⁄° *
dú
);

472 
X509_STORE_£t_deÁu…_∑ths
(
X509_STORE
 *
˘x
);

475 
X509_STORE_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

476 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

477 
X509_STORE_CTX_£t_ex_d©a
(
X509_STORE_CTX
 *
˘x
,
idx
,*
d©a
);

478 * 
X509_STORE_CTX_gë_ex_d©a
(
X509_STORE_CTX
 *
˘x
,
idx
);

479 
X509_STORE_CTX_gë_îr‹
(
X509_STORE_CTX
 *
˘x
);

480 
X509_STORE_CTX_£t_îr‹
(
X509_STORE_CTX
 *
˘x
,
s
);

481 
X509_STORE_CTX_gë_îr‹_dïth
(
X509_STORE_CTX
 *
˘x
);

482 
X509
 * 
X509_STORE_CTX_gë_cuºít_˚π
(
X509_STORE_CTX
 *
˘x
);

483 
X509
 *
X509_STORE_CTX_gë0_cuºít_issuî
(
X509_STORE_CTX
 *
˘x
);

484 
X509_CRL
 *
X509_STORE_CTX_gë0_cuºít_¸l
(
X509_STORE_CTX
 *
˘x
);

485 
X509_STORE_CTX
 *
X509_STORE_CTX_gë0_∑ª¡_˘x
(X509_STORE_CTX *
˘x
);

486 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë_chaö
(
X509_STORE_CTX
 *
˘x
);

487 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë1_chaö
(
X509_STORE_CTX
 *
˘x
);

488 
X509_STORE_CTX_£t_˚π
(
X509_STORE_CTX
 *
c
,
X509
 *
x
);

489 
X509_STORE_CTX_£t_chaö
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509
Ë*
sk
);

490 
X509_STORE_CTX_£t0_¸ls
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509_CRL
Ë*
sk
);

491 
X509_STORE_CTX_£t_puΩo£
(
X509_STORE_CTX
 *
˘x
, 
puΩo£
);

492 
X509_STORE_CTX_£t_åu°
(
X509_STORE_CTX
 *
˘x
, 
åu°
);

493 
X509_STORE_CTX_puΩo£_öhîô
(
X509_STORE_CTX
 *
˘x
, 
def_puΩo£
,

494 
puΩo£
, 
åu°
);

495 
X509_STORE_CTX_£t_Êags
(
X509_STORE_CTX
 *
˘x
, 
Êags
);

496 
X509_STORE_CTX_£t_time
(
X509_STORE_CTX
 *
˘x
, 
Êags
,

497 
time_t
 
t
);

498 
X509_STORE_CTX_£t_vîify_cb
(
X509_STORE_CTX
 *
˘x
,

499 (*
vîify_cb
)(, 
X509_STORE_CTX
 *));

501 
X509_POLICY_TREE
 *
X509_STORE_CTX_gë0_pﬁicy_åì
(
X509_STORE_CTX
 *
˘x
);

502 
X509_STORE_CTX_gë_ex∂icô_pﬁicy
(
X509_STORE_CTX
 *
˘x
);

504 
X509_VERIFY_PARAM
 *
X509_STORE_CTX_gë0_∑øm
(
X509_STORE_CTX
 *
˘x
);

505 
X509_STORE_CTX_£t0_∑øm
(
X509_STORE_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
∑øm
);

506 
X509_STORE_CTX_£t_deÁu…
(
X509_STORE_CTX
 *
˘x
, c⁄° *
«me
);

510 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_√w
();

511 
X509_VERIFY_PARAM_‰ì
(
X509_VERIFY_PARAM
 *
∑øm
);

512 
X509_VERIFY_PARAM_öhîô
(
X509_VERIFY_PARAM
 *
to
,

513 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

514 
X509_VERIFY_PARAM_£t1
(
X509_VERIFY_PARAM
 *
to
,

515 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

516 
X509_VERIFY_PARAM_£t1_«me
(
X509_VERIFY_PARAM
 *
∑øm
, c⁄° *
«me
);

517 
X509_VERIFY_PARAM_£t_Êags
(
X509_VERIFY_PARAM
 *
∑øm
, 
Êags
);

518 
X509_VERIFY_PARAM_˛ór_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

519 
Êags
);

520 
X509_VERIFY_PARAM_gë_Êags
(
X509_VERIFY_PARAM
 *
∑øm
);

521 
X509_VERIFY_PARAM_£t_puΩo£
(
X509_VERIFY_PARAM
 *
∑øm
, 
puΩo£
);

522 
X509_VERIFY_PARAM_£t_åu°
(
X509_VERIFY_PARAM
 *
∑øm
, 
åu°
);

523 
X509_VERIFY_PARAM_£t_dïth
(
X509_VERIFY_PARAM
 *
∑øm
, 
dïth
);

524 
X509_VERIFY_PARAM_£t_time
(
X509_VERIFY_PARAM
 *
∑øm
, 
time_t
 
t
);

525 
X509_VERIFY_PARAM_add0_pﬁicy
(
X509_VERIFY_PARAM
 *
∑øm
,

526 
ASN1_OBJECT
 *
pﬁicy
);

527 
X509_VERIFY_PARAM_£t1_pﬁicõs
(
X509_VERIFY_PARAM
 *
∑øm
,

528 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicõs
);

529 
X509_VERIFY_PARAM_gë_dïth
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

531 
X509_VERIFY_PARAM_add0_èbÀ
(
X509_VERIFY_PARAM
 *
∑øm
);

532 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_lookup
(c⁄° *
«me
);

533 
X509_VERIFY_PARAM_èbÀ_˛ónup
();

535 
X509_pﬁicy_check
(
X509_POLICY_TREE
 **
±ªe
, *
≥x∂icô_pﬁicy
,

536 
STACK_OF
(
X509
Ë*
˚πs
,

537 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicy_oids
,

538 
Êags
);

540 
X509_pﬁicy_åì_‰ì
(
X509_POLICY_TREE
 *
åì
);

542 
X509_pﬁicy_åì_Àvñ_cou¡
(c⁄° 
X509_POLICY_TREE
 *
åì
);

543 
X509_POLICY_LEVEL
 *

544 
X509_pﬁicy_åì_gë0_Àvñ
(c⁄° 
X509_POLICY_TREE
 *
åì
, 
i
);

546 
STACK_OF
(
X509_POLICY_NODE
) *

547 
X509_pﬁicy_åì_gë0_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

549 
STACK_OF
(
X509_POLICY_NODE
) *

550 
X509_pﬁicy_åì_gë0_u£r_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

552 
X509_pﬁicy_Àvñ_node_cou¡
(
X509_POLICY_LEVEL
 *
Àvñ
);

554 
X509_POLICY_NODE
 *
X509_pﬁicy_Àvñ_gë0_node
(
X509_POLICY_LEVEL
 *
Àvñ
, 
i
);

556 c⁄° 
ASN1_OBJECT
 *
X509_pﬁicy_node_gë0_pﬁicy
(c⁄° 
X509_POLICY_NODE
 *
node
);

558 
STACK_OF
(
POLICYQUALINFO
) *

559 
X509_pﬁicy_node_gë0_quÆifõrs
(c⁄° 
X509_POLICY_NODE
 *
node
);

560 c⁄° 
X509_POLICY_NODE
 *

561 
X509_pﬁicy_node_gë0_∑ª¡
(c⁄° 
X509_POLICY_NODE
 *
node
);

563 #ifde‡ 
__˝lu•lus


	@/usr/include/pcap/bpf.h

73 #i‡!
deföed
(
_NET_BPF_H_
Ë&& !deföed(
_BPF_H_
Ë&& !deföed(
_H_BPF
Ë&& !deföed(
lib_pˇp_bpf_h
)

74 
	#lib_pˇp_bpf_h


	)

76 #ifde‡
__˝lu•lus


81 
	#BPF_RELEASE
 199606

	)

83 #ifde‡
MSDOS


84 
	tbpf_öt32
;

85 
	tbpf_u_öt32
;

87 
	tbpf_öt32
;

88 
u_öt
 
	tbpf_u_öt32
;

97 #i‚de‡
__NëBSD__


98 
	#BPF_ALIGNMENT
 (
bpf_öt32
)

	)

100 
	#BPF_ALIGNMENT
 ()

	)

102 
	#BPF_WORDALIGN
(
x
Ë(((x)+(
BPF_ALIGNMENT
-1))&~(BPF_ALIGNMENT-1))

	)

107 
	sbpf_¥ogøm
 {

108 
u_öt
 
bf_Àn
;

109 
bpf_ö¢
 *
bf_ö¢s
;

134 
	#DLT_NULL
 0

	)

135 
	#DLT_EN10MB
 1

	)

136 
	#DLT_EN3MB
 2

	)

137 
	#DLT_AX25
 3

	)

138 
	#DLT_PRONET
 4

	)

139 
	#DLT_CHAOS
 5

	)

140 
	#DLT_IEEE802
 6

	)

141 
	#DLT_ARCNET
 7

	)

142 
	#DLT_SLIP
 8

	)

143 
	#DLT_PPP
 9

	)

144 
	#DLT_FDDI
 10

	)

155 
	#DLT_ATM_RFC1483
 11

	)

157 #ifde‡
__O≥nBSD__


158 
	#DLT_RAW
 14

	)

160 
	#DLT_RAW
 12

	)

169 #i‡
deföed
(
__NëBSD__
Ë|| deföed(
__FªeBSD__
)

170 #i‚de‡
DLT_SLIP_BSDOS


171 
	#DLT_SLIP_BSDOS
 13

	)

172 
	#DLT_PPP_BSDOS
 14

	)

175 
	#DLT_SLIP_BSDOS
 15

	)

176 
	#DLT_PPP_BSDOS
 16

	)

207 #i‡
deföed
(
__O≥nBSD__
Ë|| deföed(
__NëBSD__
Ë|| deföed(
__Døg⁄Fly__
Ë|| deföed(
__APPLE__
)

208 
	#DLT_PFSYNC
 18

	)

211 
	#DLT_ATM_CLIP
 19

	)

217 
	#DLT_REDBACK_SMARTEDGE
 32

	)

224 
	#DLT_PPP_SERIAL
 50

	)

225 
	#DLT_PPP_ETHER
 51

	)

234 
	#DLT_SYMANTEC_FIREWALL
 99

	)

253 
	#DLT_MATCHING_MIN
 104

	)

269 
	#DLT_C_HDLC
 104

	)

270 
	#DLT_CHDLC
 
DLT_C_HDLC


	)

272 
	#DLT_IEEE802_11
 105

	)

287 
	#DLT_FRELAY
 107

	)

296 #ifde‡
__O≥nBSD__


297 
	#DLT_LOOP
 12

	)

299 
	#DLT_LOOP
 108

	)

307 #ifde‡
__O≥nBSD__


308 
	#DLT_ENC
 13

	)

310 
	#DLT_ENC
 109

	)

323 
	#DLT_LINUX_SLL
 113

	)

328 
	#DLT_LTALK
 114

	)

333 
	#DLT_ECONET
 115

	)

338 
	#DLT_IPFILTER
 116

	)

343 
	#DLT_PFLOG
 117

	)

348 
	#DLT_CISCO_IOS
 118

	)

355 
	#DLT_PRISM_HEADER
 119

	)

361 
	#DLT_AIRONET_HEADER
 120

	)

401 #ifde‡
__FªeBSD__


402 
	#DLT_PFSYNC
 121

	)

404 
	#DLT_HHDLC
 121

	)

415 
	#DLT_IP_OVER_FC
 122

	)

431 
	#DLT_SUNATM
 123

	)

437 
	#DLT_RIO
 124

	)

438 
	#DLT_PCI_EXP
 125

	)

439 
	#DLT_AURORA
 126

	)

446 
	#DLT_IEEE802_11_RADIO
 127

	)

456 
	#DLT_TZSP
 128

	)

469 
	#DLT_ARCNET_LINUX
 129

	)

477 
	#DLT_JUNIPER_MLPPP
 130

	)

478 
	#DLT_JUNIPER_MLFR
 131

	)

479 
	#DLT_JUNIPER_ES
 132

	)

480 
	#DLT_JUNIPER_GGSN
 133

	)

481 
	#DLT_JUNIPER_MFR
 134

	)

482 
	#DLT_JUNIPER_ATM2
 135

	)

483 
	#DLT_JUNIPER_SERVICES
 136

	)

484 
	#DLT_JUNIPER_ATM1
 137

	)

501 
	#DLT_APPLE_IP_OVER_IEEE1394
 138

	)

507 
	#DLT_MTP2_WITH_PHDR
 139

	)

508 
	#DLT_MTP2
 140

	)

509 
	#DLT_MTP3
 141

	)

510 
	#DLT_SCCP
 142

	)

515 
	#DLT_DOCSIS
 143

	)

532 
	#DLT_LINUX_IRDA
 144

	)

537 
	#DLT_IBM_SP
 145

	)

538 
	#DLT_IBM_SN
 146

	)

565 
	#DLT_USER0
 147

	)

566 
	#DLT_USER1
 148

	)

567 
	#DLT_USER2
 149

	)

568 
	#DLT_USER3
 150

	)

569 
	#DLT_USER4
 151

	)

570 
	#DLT_USER5
 152

	)

571 
	#DLT_USER6
 153

	)

572 
	#DLT_USER7
 154

	)

573 
	#DLT_USER8
 155

	)

574 
	#DLT_USER9
 156

	)

575 
	#DLT_USER10
 157

	)

576 
	#DLT_USER11
 158

	)

577 
	#DLT_USER12
 159

	)

578 
	#DLT_USER13
 160

	)

579 
	#DLT_USER14
 161

	)

580 
	#DLT_USER15
 162

	)

592 
	#DLT_IEEE802_11_RADIO_AVS
 163

	)

600 
	#DLT_JUNIPER_MONITOR
 164

	)

605 
	#DLT_BACNET_MS_TP
 165

	)

621 
	#DLT_PPP_PPPD
 166

	)

627 
	#DLT_PPP_WITH_DIRECTION
 
DLT_PPP_PPPD


	)

628 
	#DLT_LINUX_PPP_WITHDIRECTION
 
DLT_PPP_PPPD


	)

636 
	#DLT_JUNIPER_PPPOE
 167

	)

637 
	#DLT_JUNIPER_PPPOE_ATM
 168

	)

639 
	#DLT_GPRS_LLC
 169

	)

640 
	#DLT_GPF_T
 170

	)

641 
	#DLT_GPF_F
 171

	)

647 
	#DLT_GCOM_T1E1
 172

	)

648 
	#DLT_GCOM_SERIAL
 173

	)

655 
	#DLT_JUNIPER_PIC_PEER
 174

	)

663 
	#DLT_ERF_ETH
 175

	)

664 
	#DLT_ERF_POS
 176

	)

672 
	#DLT_LINUX_LAPD
 177

	)

681 
	#DLT_JUNIPER_ETHER
 178

	)

682 
	#DLT_JUNIPER_PPP
 179

	)

683 
	#DLT_JUNIPER_FRELAY
 180

	)

684 
	#DLT_JUNIPER_CHDLC
 181

	)

689 
	#DLT_MFR
 182

	)

697 
	#DLT_JUNIPER_VP
 183

	)

706 
	#DLT_A429
 184

	)

713 
	#DLT_A653_ICM
 185

	)

719 
	#DLT_USB
 186

	)

725 
	#DLT_BLUETOOTH_HCI_H4
 187

	)

731 
	#DLT_IEEE802_16_MAC_CPS
 188

	)

737 
	#DLT_USB_LINUX
 189

	)

746 
	#DLT_CAN20B
 190

	)

752 
	#DLT_IEEE802_15_4_LINUX
 191

	)

758 
	#DLT_PPI
 192

	)

764 
	#DLT_IEEE802_16_MAC_CPS_RADIO
 193

	)

772 
	#DLT_JUNIPER_ISM
 194

	)

780 
	#DLT_IEEE802_15_4
 195

	)

786 
	#DLT_SITA
 196

	)

793 
	#DLT_ERF
 197

	)

800 
	#DLT_RAIF1
 198

	)

807 
	#DLT_IPMB
 199

	)

814 
	#DLT_JUNIPER_ST
 200

	)

820 
	#DLT_BLUETOOTH_HCI_H4_WITH_PHDR
 201

	)

829 
	#DLT_AX25_KISS
 202

	)

836 
	#DLT_LAPD
 203

	)

844 
	#DLT_PPP_WITH_DIR
 204

	)

845 
	#DLT_C_HDLC_WITH_DIR
 205

	)

846 
	#DLT_FRELAY_WITH_DIR
 206

	)

847 
	#DLT_LAPB_WITH_DIR
 207

	)

858 
	#DLT_IPMB_LINUX
 209

	)

864 
	#DLT_FLEXRAY
 210

	)

871 
	#DLT_MOST
 211

	)

878 
	#DLT_LIN
 212

	)

884 
	#DLT_X2E_SERIAL
 213

	)

890 
	#DLT_X2E_XORAYA
 214

	)

901 
	#DLT_IEEE802_15_4_NONASK_PHY
 215

	)

909 
	#DLT_LINUX_EVDEV
 216

	)

916 
	#DLT_GSMTAP_UM
 217

	)

917 
	#DLT_GSMTAP_ABIS
 218

	)

924 
	#DLT_MPLS
 219

	)

930 
	#DLT_USB_LINUX_MMAPPED
 220

	)

936 
	#DLT_DECT
 221

	)

947 
	#DLT_AOS
 222

	)

956 
	#DLT_WIHART
 223

	)

962 
	#DLT_FC_2
 224

	)

976 
	#DLT_FC_2_WITH_FRAME_DELIMS
 225

	)

1024 
	#DLT_IPNET
 226

	)

1033 
	#DLT_CAN_SOCKETCAN
 227

	)

1039 
	#DLT_IPV4
 228

	)

1040 
	#DLT_IPV6
 229

	)

1047 
	#DLT_IEEE802_15_4_NOFCS
 230

	)

1065 
	#DLT_DBUS
 231

	)

1071 
	#DLT_JUNIPER_VS
 232

	)

1072 
	#DLT_JUNIPER_SRX_E2E
 233

	)

1073 
	#DLT_JUNIPER_FIBRECHANNEL
 234

	)

1085 
	#DLT_DVB_CI
 235

	)

1092 
	#DLT_MUX27010
 236

	)

1098 
	#DLT_STANAG_5066_D_PDU
 237

	)

1104 
	#DLT_JUNIPER_ATM_CEMIC
 238

	)

1112 
	#DLT_NFLOG
 239

	)

1122 
	#DLT_NETANALYZER
 240

	)

1133 
	#DLT_NETANALYZER_TRANSPARENT
 241

	)

1140 
	#DLT_IPOIB
 242

	)

1147 
	#DLT_MPEG_2_TS
 243

	)

1155 
	#DLT_NG40
 244

	)

1165 
	#DLT_NFC_LLCP
 245

	)

1174 #i‡!
deföed
(
__FªeBSD__
Ë&& !deföed(
__O≥nBSD__
Ë&& !deföed(
__NëBSD__
Ë&& !deföed(
__Døg⁄Fly__
Ë&& !deföed(
__APPLE__
)

1175 
	#DLT_PFSYNC
 246

	)

1178 
	#DLT_MATCHING_MAX
 246

	)

1185 
	#DLT_CLASS
(
x
Ë((xË& 0x03ff0000)

	)

1194 
	#DLT_CLASS_NETBSD_RAWAF
 0x02240000

	)

1195 
	#DLT_NETBSD_RAWAF
(
af
Ë(
DLT_CLASS_NETBSD_RAWAF
 | (af))

	)

1196 
	#DLT_NETBSD_RAWAF_AF
(
x
Ë((xË& 0x0000ffff)

	)

1197 
	#DLT_IS_NETBSD_RAWAF
(
x
Ë(
	`DLT_CLASS
(xË=
DLT_CLASS_NETBSD_RAWAF
)

	)

1204 
	#BPF_CLASS
(
code
Ë((codeË& 0x07)

	)

1205 
	#BPF_LD
 0x00

	)

1206 
	#BPF_LDX
 0x01

	)

1207 
	#BPF_ST
 0x02

	)

1208 
	#BPF_STX
 0x03

	)

1209 
	#BPF_ALU
 0x04

	)

1210 
	#BPF_JMP
 0x05

	)

1211 
	#BPF_RET
 0x06

	)

1212 
	#BPF_MISC
 0x07

	)

1215 
	#BPF_SIZE
(
code
Ë((codeË& 0x18)

	)

1216 
	#BPF_W
 0x00

	)

1217 
	#BPF_H
 0x08

	)

1218 
	#BPF_B
 0x10

	)

1219 
	#BPF_MODE
(
code
Ë((codeË& 0xe0)

	)

1220 
	#BPF_IMM
 0x00

	)

1221 
	#BPF_ABS
 0x20

	)

1222 
	#BPF_IND
 0x40

	)

1223 
	#BPF_MEM
 0x60

	)

1224 
	#BPF_LEN
 0x80

	)

1225 
	#BPF_MSH
 0xa0

	)

1228 
	#BPF_OP
(
code
Ë((codeË& 0xf0)

	)

1229 
	#BPF_ADD
 0x00

	)

1230 
	#BPF_SUB
 0x10

	)

1231 
	#BPF_MUL
 0x20

	)

1232 
	#BPF_DIV
 0x30

	)

1233 
	#BPF_OR
 0x40

	)

1234 
	#BPF_AND
 0x50

	)

1235 
	#BPF_LSH
 0x60

	)

1236 
	#BPF_RSH
 0x70

	)

1237 
	#BPF_NEG
 0x80

	)

1238 
	#BPF_JA
 0x00

	)

1239 
	#BPF_JEQ
 0x10

	)

1240 
	#BPF_JGT
 0x20

	)

1241 
	#BPF_JGE
 0x30

	)

1242 
	#BPF_JSET
 0x40

	)

1243 
	#BPF_SRC
(
code
Ë((codeË& 0x08)

	)

1244 
	#BPF_K
 0x00

	)

1245 
	#BPF_X
 0x08

	)

1248 
	#BPF_RVAL
(
code
Ë((codeË& 0x18)

	)

1249 
	#BPF_A
 0x10

	)

1252 
	#BPF_MISCOP
(
code
Ë((codeË& 0xf8)

	)

1253 
	#BPF_TAX
 0x00

	)

1254 
	#BPF_TXA
 0x80

	)

1259 
	sbpf_ö¢
 {

1260 
u_sh‹t
 
code
;

1261 
u_ch¨
 
jt
;

1262 
u_ch¨
 
jf
;

1263 
bpf_u_öt32
 
k
;

1269 
	#BPF_STMT
(
code
, 
k
Ë{ (
u_sh‹t
)(code), 0, 0, k }

	)

1270 
	#BPF_JUMP
(
code
, 
k
, 
jt
, 
jf
Ë{ (
u_sh‹t
)(code), jt, jf, k }

	)

1272 #i‡
__STDC__
 || 
deföed
(
__˝lu•lus
)

1273 
bpf_vÆid©e
(c⁄° 
bpf_ö¢
 *, );

1274 
u_öt
 
bpf_fûãr
(c⁄° 
bpf_ö¢
 *, c⁄° 
u_ch¨
 *, u_int, u_int);

1276 
bpf_vÆid©e
();

1277 
u_öt
 
bpf_fûãr
();

1283 
	#BPF_MEMWORDS
 16

	)

1285 #ifde‡
__˝lu•lus


	@/usr/include/boost/config/no_tr1/utility.hpp

13 #i‚de‡
BOOST_CONFIG_UTILITY


14 
	#BOOST_CONFIG_UTILITY


	)

16 #i‚de‡
BOOST_TR1_NO_RECURSION


17 
	#BOOST_TR1_NO_RECURSION


	)

18 
	#BOOST_CONFIG_NO_UTILITY_RECURSION


	)

21 
	~<utûôy
>

23 #ifde‡
BOOST_CONFIG_NO_UTILITY_RECURSION


24 #unde‡
BOOST_TR1_NO_RECURSION


25 #unde‡
BOOST_CONFIG_NO_UTILITY_RECURSION


	@/usr/include/boost/config/posix_features.hpp

17 #i‡
deföed
(
BOOST_HAS_UNISTD_H
)

18 
	~<uni°d.h
>

21 #i‡
deföed
(
_XOPEN_VERSION
) && (_XOPEN_VERSION >= 3)

22 
	#BOOST_HAS_NL_TYPES_H


	)

26 #i‡
deföed
(
_POSIX_VERSION
) && (_POSIX_VERSION >= 200100)

27 
	#BOOST_HAS_STDINT_H


	)

31 #i‡
deföed
(
_POSIX_VERSION
) && (_POSIX_VERSION >= 199009L)

32 
	#BOOST_HAS_DIRENT_H


	)

36 #i‡
deföed
(
_POSIX_VERSION
) && (_POSIX_VERSION >= 199506L)

37 
	#BOOST_HAS_SIGACTION


	)

45 #i‡
deföed
(
_POSIX_THREADS
Ë&& (_POSIX_THREADS+0 >0Ë&& !deföed(
BOOST_HAS_WINTHREADS
Ë&& !deföed(
BOOST_HAS_MPTASKS
)

46 
	#BOOST_HAS_PTHREADS


	)

51 #i‡(
deföed
(
_POSIX_TIMERS
) && (_POSIX_TIMERS+0 >= 0)) \

52 || (
deföed
(
_XOPEN_REALTIME
Ë&& (
	g_XOPEN_REALTIME
+0 >= 0))

53 
	#BOOST_HAS_NANOSLEEP


	)

60 #i‡(
deföed
(
_POSIX_TIMERS
) && (_POSIX_TIMERS+0 >= 0))

61 
	#BOOST_HAS_CLOCK_GETTIME


	)

67 #i‡
deföed
(
_POSIX_PRIORITY_SCHEDULING
) && (_POSIX_PRIORITY_SCHEDULING+0 > 0)\

68 || (
deföed
(
_POSIX_THREAD_PRIORITY_SCHEDULING
) && (_POSIX_THREAD_PRIORITY_SCHEDULING+0 > 0))\

69 || (
deföed
(
_XOPEN_REALTIME
) && (_XOPEN_REALTIME+0 >= 0))

70 
	#BOOST_HAS_SCHED_YIELD


	)

78 #i‡
deföed
(
_XOPEN_VERSION
) && (_XOPEN_VERSION+0 >= 500)

79 
	#BOOST_HAS_GETTIMEOFDAY


	)

80 #i‡
deföed
(
_XOPEN_SOURCE
) && (_XOPEN_SOURCE+0 >= 500)

81 
	#BOOST_HAS_PTHREAD_MUTEXATTR_SETTYPE


	)

83 #i‚de‡
BOOST_HAS_LOG1P


84 
	#BOOST_HAS_LOG1P


	)

86 #i‚de‡
BOOST_HAS_EXPM1


87 
	#BOOST_HAS_EXPM1


	)

	@/usr/include/boost/non_type.hpp

11 #i‚de‡
BOOST_NON_TYPE_HPP_GP_20030417


12 
	#BOOST_NON_TYPE_HPP_GP_20030417


	)

15 
«me•a˚
 
	gboo°
 {

20 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
T
 
	gn
>

21 
	sn⁄_ty≥
 { };

	@/usr/include/boost/type.hpp

6 #i‚de‡
BOOST_TYPE_DWA20010120_HPP


7 
	#BOOST_TYPE_DWA20010120_HPP


	)

9 
«me•a˚
 
	gboo°
 {

13 
	gãm∂©e
 <
˛ass
 
	gT
>

14 
	sty≥
 {};

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

60 
	m__GCONV_SWAP
 = 0x0004

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

68 
	g__gc⁄v_å™s_d©a
;

72 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 
	t__c⁄°
 **, __const *,

74 **, 
	tsize_t
 *, , );

77 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

80 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

81 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

85 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

86 
	t__gc⁄v_°ï_d©a
 *, *,

87 
	t__c⁄°
 *,

88 
	t__c⁄°
 **,

89 
	t__c⁄°
 *, **,

90 
	tsize_t
 *);

93 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

94 
	t__c⁄°
 *,

98 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

99 
	tsize_t
 *);

102 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

103 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

105 
	s__gc⁄v_å™s_d©a


108 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

109 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

110 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

111 *
__d©a
;

112 
__gc⁄v_å™s_d©a
 *
__√xt
;

117 
	s__gc⁄v_°ï


119 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

120 
__c⁄°
 *
__mod«me
;

122 
__cou¡î
;

124 *
__‰om_«me
;

125 *
__to_«me
;

127 
__gc⁄v_f˘
 
__f˘
;

128 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

129 
__gc⁄v_öô_f˘
 
__öô_f˘
;

130 
__gc⁄v_íd_f˘
 
__íd_f˘
;

134 
__mö_√eded_‰om
;

135 
__max_√eded_‰om
;

136 
__mö_√eded_to
;

137 
__max_√eded_to
;

140 
__°©eful
;

142 *
__d©a
;

147 
	s__gc⁄v_°ï_d©a


149 *
__outbuf
;

150 *
__outbu„nd
;

154 
__Êags
;

158 
__övoˇti⁄_cou¡î
;

162 
__öã∫Æ_u£
;

164 
__mb°©e_t
 *
__°©ï
;

165 
__mb°©e_t
 
__°©e
;

169 
__gc⁄v_å™s_d©a
 *
__å™s
;

174 
	s__gc⁄v_öfo


176 
size_t
 
__n°ïs
;

177 
__gc⁄v_°ï
 *
__°ïs
;

178 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

179 } *
	t__gc⁄v_t
;

	@/usr/include/openssl/objects.h

59 #i‚de‡
HEADER_OBJECTS_H


60 
	#HEADER_OBJECTS_H


	)

62 
	#USE_OBJ_MAC


	)

64 #ifde‡
USE_OBJ_MAC


65 
	~<›ís¶/obj_mac.h
>

67 
	#SN_undef
 "UNDEF"

	)

68 
	#LN_undef
 "undeföed"

	)

69 
	#NID_undef
 0

	)

70 
	#OBJ_undef
 0L

	)

72 
	#SN_Alg‹ôhm
 "Alg‹ôhm"

	)

73 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

74 
	#NID_Æg‹ôhm
 38

	)

75 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

77 
	#LN_rßdsi
 "rßdsi"

	)

78 
	#NID_rßdsi
 1

	)

79 
	#OBJ_rßdsi
 1L,2L,840L,113549L

	)

81 
	#LN_pkcs
 "pkcs"

	)

82 
	#NID_pkcs
 2

	)

83 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

85 
	#SN_md2
 "MD2"

	)

86 
	#LN_md2
 "md2"

	)

87 
	#NID_md2
 3

	)

88 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

90 
	#SN_md5
 "MD5"

	)

91 
	#LN_md5
 "md5"

	)

92 
	#NID_md5
 4

	)

93 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

95 
	#SN_rc4
 "RC4"

	)

96 
	#LN_rc4
 "rc4"

	)

97 
	#NID_rc4
 5

	)

98 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

100 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

101 
	#NID_rßEn¸y±i⁄
 6

	)

102 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs
,1L,1L

	)

104 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

105 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

106 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

107 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,2L

	)

109 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

110 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

111 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

112 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,4L

	)

114 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

115 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

116 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

117 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs
,5L,1L

	)

119 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

120 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

121 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

122 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs
,5L,3L

	)

124 
	#LN_X500
 "X500"

	)

125 
	#NID_X500
 11

	)

126 
	#OBJ_X500
 2L,5L

	)

128 
	#LN_X509
 "X509"

	)

129 
	#NID_X509
 12

	)

130 
	#OBJ_X509
 
OBJ_X500
,4L

	)

132 
	#SN_comm⁄Name
 "CN"

	)

133 
	#LN_comm⁄Name
 "comm⁄Name"

	)

134 
	#NID_comm⁄Name
 13

	)

135 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

137 
	#SN_cou¡ryName
 "C"

	)

138 
	#LN_cou¡ryName
 "cou¡ryName"

	)

139 
	#NID_cou¡ryName
 14

	)

140 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

142 
	#SN_loˇlôyName
 "L"

	)

143 
	#LN_loˇlôyName
 "loˇlôyName"

	)

144 
	#NID_loˇlôyName
 15

	)

145 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

150 
	#SN_°©eOrProvö˚Name
 "ST"

	)

151 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

152 
	#NID_°©eOrProvö˚Name
 16

	)

153 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

155 
	#SN_‹g™iz©i⁄Name
 "O"

	)

156 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

157 
	#NID_‹g™iz©i⁄Name
 17

	)

158 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

160 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

161 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

162 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

163 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

165 
	#SN_rß
 "RSA"

	)

166 
	#LN_rß
 "rß"

	)

167 
	#NID_rß
 19

	)

168 
	#OBJ_rß
 
OBJ_X500
,8L,1L,1L

	)

170 
	#LN_pkcs7
 "pkcs7"

	)

171 
	#NID_pkcs7
 20

	)

172 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

174 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

175 
	#NID_pkcs7_d©a
 21

	)

176 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

178 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

179 
	#NID_pkcs7_sig√d
 22

	)

180 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

182 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

183 
	#NID_pkcs7_ívñ›ed
 23

	)

184 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

186 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

187 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

188 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

190 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

191 
	#NID_pkcs7_dige°
 25

	)

192 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

194 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

195 
	#NID_pkcs7_í¸y±ed
 26

	)

196 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

198 
	#LN_pkcs3
 "pkcs3"

	)

199 
	#NID_pkcs3
 27

	)

200 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

202 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

203 
	#NID_dhKeyAgªemít
 28

	)

204 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

206 
	#SN_des_ecb
 "DES-ECB"

	)

207 
	#LN_des_ecb
 "des-ecb"

	)

208 
	#NID_des_ecb
 29

	)

209 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

211 
	#SN_des_cfb64
 "DES-CFB"

	)

212 
	#LN_des_cfb64
 "des-cfb"

	)

213 
	#NID_des_cfb64
 30

	)

215 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

217 
	#SN_des_cbc
 "DES-CBC"

	)

218 
	#LN_des_cbc
 "des-cbc"

	)

219 
	#NID_des_cbc
 31

	)

221 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

223 
	#SN_des_ede
 "DES-EDE"

	)

224 
	#LN_des_ede
 "des-ede"

	)

225 
	#NID_des_ede
 32

	)

227 
	#OBJ_des_ede
 
OBJ_Æg‹ôhm
,17L

	)

229 
	#SN_des_ede3
 "DES-EDE3"

	)

230 
	#LN_des_ede3
 "des-ede3"

	)

231 
	#NID_des_ede3
 33

	)

233 
	#SN_idó_cbc
 "IDEA-CBC"

	)

234 
	#LN_idó_cbc
 "idó-cbc"

	)

235 
	#NID_idó_cbc
 34

	)

236 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

238 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

239 
	#LN_idó_cfb64
 "idó-cfb"

	)

240 
	#NID_idó_cfb64
 35

	)

242 
	#SN_idó_ecb
 "IDEA-ECB"

	)

243 
	#LN_idó_ecb
 "idó-ecb"

	)

244 
	#NID_idó_ecb
 36

	)

246 
	#SN_rc2_cbc
 "RC2-CBC"

	)

247 
	#LN_rc2_cbc
 "rc2-cbc"

	)

248 
	#NID_rc2_cbc
 37

	)

249 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

251 
	#SN_rc2_ecb
 "RC2-ECB"

	)

252 
	#LN_rc2_ecb
 "rc2-ecb"

	)

253 
	#NID_rc2_ecb
 38

	)

255 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

256 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

257 
	#NID_rc2_cfb64
 39

	)

259 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

260 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

261 
	#NID_rc2_ofb64
 40

	)

263 
	#SN_sha
 "SHA"

	)

264 
	#LN_sha
 "sha"

	)

265 
	#NID_sha
 41

	)

266 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

268 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

269 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

270 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

271 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

273 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

274 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

275 
	#NID_des_ede_cbc
 43

	)

277 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

278 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

279 
	#NID_des_ede3_cbc
 44

	)

280 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

282 
	#SN_des_ofb64
 "DES-OFB"

	)

283 
	#LN_des_ofb64
 "des-ofb"

	)

284 
	#NID_des_ofb64
 45

	)

285 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

287 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

288 
	#LN_idó_ofb64
 "idó-ofb"

	)

289 
	#NID_idó_ofb64
 46

	)

291 
	#LN_pkcs9
 "pkcs9"

	)

292 
	#NID_pkcs9
 47

	)

293 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

295 
	#SN_pkcs9_emaûAddªss
 "Emaû"

	)

296 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

297 
	#NID_pkcs9_emaûAddªss
 48

	)

298 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

300 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

301 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

302 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

304 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

305 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

306 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

308 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

309 
	#NID_pkcs9_mesßgeDige°
 51

	)

310 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

312 
	#LN_pkcs9_signögTime
 "signögTime"

	)

313 
	#NID_pkcs9_signögTime
 52

	)

314 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

316 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

317 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

318 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

320 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

321 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

322 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

324 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

325 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

326 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

328 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

329 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

330 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

332 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

333 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

334 
	#NID_√tsˇ≥
 57

	)

335 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

337 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

338 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

339 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

340 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

342 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

343 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

344 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

345 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

347 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

348 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

349 
	#NID_des_ede_cfb64
 60

	)

351 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

352 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

353 
	#NID_des_ede3_cfb64
 61

	)

355 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

356 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

357 
	#NID_des_ede_ofb64
 62

	)

359 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

360 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

361 
	#NID_des_ede3_ofb64
 63

	)

364 
	#SN_sha1
 "SHA1"

	)

365 
	#LN_sha1
 "sha1"

	)

366 
	#NID_sha1
 64

	)

367 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

371 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

372 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

373 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

374 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,5L

	)

376 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

377 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

378 
	#NID_dßWôhSHA
 66

	)

379 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

381 
	#SN_dß_2
 "DSA-ﬁd"

	)

382 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

383 
	#NID_dß_2
 67

	)

384 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

387 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

388 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

389 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

390 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs
,5L,11L

	)

396 
	#LN_id_pbkdf2
 "PBKDF2"

	)

397 
	#NID_id_pbkdf2
 69

	)

398 
	#OBJ_id_pbkdf2
 
OBJ_pkcs
,5L,12L

	)

400 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

401 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

402 
	#NID_dßWôhSHA1_2
 70

	)

404 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

406 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

407 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

408 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

409 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

411 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

412 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

413 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

414 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

416 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

417 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

418 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

419 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

421 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

422 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

423 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

424 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

426 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

427 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

428 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

429 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

431 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

432 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

433 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

434 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

436 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

437 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

438 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

439 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

441 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

442 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

443 
	#NID_√tsˇ≥_commít
 78

	)

444 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

446 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

447 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

448 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

449 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

451 
	#SN_desx_cbc
 "DESX-CBC"

	)

452 
	#LN_desx_cbc
 "desx-cbc"

	)

453 
	#NID_desx_cbc
 80

	)

455 
	#SN_id_˚
 "id-˚"

	)

456 
	#NID_id_˚
 81

	)

457 
	#OBJ_id_˚
 2L,5L,29L

	)

459 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

460 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

461 
	#NID_subje˘_key_idítifõr
 82

	)

462 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

464 
	#SN_key_ußge
 "keyUßge"

	)

465 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

466 
	#NID_key_ußge
 83

	)

467 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

469 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

470 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

471 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

472 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

474 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

475 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

476 
	#NID_subje˘_Æt_«me
 85

	)

477 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

479 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

480 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

481 
	#NID_issuî_Æt_«me
 86

	)

482 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

484 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

485 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

486 
	#NID_basic_c⁄°øöts
 87

	)

487 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

489 
	#SN_¸l_numbî
 "¸lNumbî"

	)

490 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

491 
	#NID_¸l_numbî
 88

	)

492 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

494 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

495 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

496 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

497 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

499 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

500 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

501 
	#NID_auth‹ôy_key_idítifõr
 90

	)

502 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

504 
	#SN_bf_cbc
 "BF-CBC"

	)

505 
	#LN_bf_cbc
 "bf-cbc"

	)

506 
	#NID_bf_cbc
 91

	)

507 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

509 
	#SN_bf_ecb
 "BF-ECB"

	)

510 
	#LN_bf_ecb
 "bf-ecb"

	)

511 
	#NID_bf_ecb
 92

	)

513 
	#SN_bf_cfb64
 "BF-CFB"

	)

514 
	#LN_bf_cfb64
 "bf-cfb"

	)

515 
	#NID_bf_cfb64
 93

	)

517 
	#SN_bf_ofb64
 "BF-OFB"

	)

518 
	#LN_bf_ofb64
 "bf-ofb"

	)

519 
	#NID_bf_ofb64
 94

	)

521 
	#SN_mdc2
 "MDC2"

	)

522 
	#LN_mdc2
 "mdc2"

	)

523 
	#NID_mdc2
 95

	)

524 
	#OBJ_mdc2
 2L,5L,8L,3L,101L

	)

527 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

528 
	#LN_mdc2WôhRSA
 "mdc2wôhRSA"

	)

529 
	#NID_mdc2WôhRSA
 96

	)

530 
	#OBJ_mdc2WôhRSA
 2L,5L,8L,3L,100L

	)

532 
	#SN_rc4_40
 "RC4-40"

	)

533 
	#LN_rc4_40
 "rc4-40"

	)

534 
	#NID_rc4_40
 97

	)

536 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

537 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

538 
	#NID_rc2_40_cbc
 98

	)

540 
	#SN_givíName
 "G"

	)

541 
	#LN_givíName
 "givíName"

	)

542 
	#NID_givíName
 99

	)

543 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

545 
	#SN_su∫ame
 "S"

	)

546 
	#LN_su∫ame
 "su∫ame"

	)

547 
	#NID_su∫ame
 100

	)

548 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

550 
	#SN_öôüls
 "I"

	)

551 
	#LN_öôüls
 "öôüls"

	)

552 
	#NID_öôüls
 101

	)

553 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

555 
	#SN_uniqueIdítifõr
 "UID"

	)

556 
	#LN_uniqueIdítifõr
 "uniqueIdítifõr"

	)

557 
	#NID_uniqueIdítifõr
 102

	)

558 
	#OBJ_uniqueIdítifõr
 
OBJ_X509
,45L

	)

560 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

561 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

562 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

563 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

565 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

566 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

567 
	#NID_md5WôhRSA
 104

	)

568 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

570 
	#SN_£rülNumbî
 "SN"

	)

571 
	#LN_£rülNumbî
 "£rülNumbî"

	)

572 
	#NID_£rülNumbî
 105

	)

573 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

575 
	#SN_tôÀ
 "T"

	)

576 
	#LN_tôÀ
 "tôÀ"

	)

577 
	#NID_tôÀ
 106

	)

578 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

580 
	#SN_des¸ùti⁄
 "D"

	)

581 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

582 
	#NID_des¸ùti⁄
 107

	)

583 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

586 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

587 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

588 
	#NID_ˇ°5_cbc
 108

	)

589 
	#OBJ_ˇ°5_cbc
 1L,2L,840L,113533L,7L,66L,10L

	)

591 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

592 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

593 
	#NID_ˇ°5_ecb
 109

	)

595 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

596 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

597 
	#NID_ˇ°5_cfb64
 110

	)

599 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

600 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

601 
	#NID_ˇ°5_ofb64
 111

	)

603 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

604 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

605 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 1L,2L,840L,113533L,7L,66L,12L

	)

611 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

612 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

613 
	#NID_dßWôhSHA1
 113

	)

614 
	#OBJ_dßWôhSHA1
 1L,2L,840L,10040L,4L,3L

	)

616 
	#NID_md5_sha1
 114

	)

617 
	#SN_md5_sha1
 "MD5-SHA1"

	)

618 
	#LN_md5_sha1
 "md5-sha1"

	)

620 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

621 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

622 
	#NID_sha1WôhRSA
 115

	)

623 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

625 
	#SN_dß
 "DSA"

	)

626 
	#LN_dß
 "dßEn¸y±i⁄"

	)

627 
	#NID_dß
 116

	)

628 
	#OBJ_dß
 1L,2L,840L,10040L,4L,1L

	)

630 
	#SN_rùemd160
 "RIPEMD160"

	)

631 
	#LN_rùemd160
 "rùemd160"

	)

632 
	#NID_rùemd160
 117

	)

633 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

637 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

638 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

639 
	#NID_rùemd160WôhRSA
 119

	)

640 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

650 
	#SN_rc5_cbc
 "RC5-CBC"

	)

651 
	#LN_rc5_cbc
 "rc5-cbc"

	)

652 
	#NID_rc5_cbc
 120

	)

653 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

655 
	#SN_rc5_ecb
 "RC5-ECB"

	)

656 
	#LN_rc5_ecb
 "rc5-ecb"

	)

657 
	#NID_rc5_ecb
 121

	)

659 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

660 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

661 
	#NID_rc5_cfb64
 122

	)

663 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

664 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

665 
	#NID_rc5_ofb64
 123

	)

667 
	#SN_æe_com¥essi⁄
 "RLE"

	)

668 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

669 
	#NID_æe_com¥essi⁄
 124

	)

670 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

672 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

673 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

674 
	#NID_zlib_com¥essi⁄
 125

	)

675 
	#OBJ_zlib_com¥essi⁄
 1L,1L,1L,1L,666L,2L

	)

677 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

678 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

679 
	#NID_ext_key_ußge
 126

	)

680 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37

	)

682 
	#SN_id_pkix
 "PKIX"

	)

683 
	#NID_id_pkix
 127

	)

684 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

686 
	#SN_id_kp
 "id-kp"

	)

687 
	#NID_id_kp
 128

	)

688 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

692 
	#SN_£rvî_auth
 "£rvîAuth"

	)

693 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

694 
	#NID_£rvî_auth
 129

	)

695 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

697 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

698 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

699 
	#NID_˛õ¡_auth
 130

	)

700 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

702 
	#SN_code_sign
 "codeSignög"

	)

703 
	#LN_code_sign
 "CodêSignög"

	)

704 
	#NID_code_sign
 131

	)

705 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

707 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

708 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

709 
	#NID_emaû_¥Ÿe˘
 132

	)

710 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

712 
	#SN_time_°amp
 "timeSèmpög"

	)

713 
	#LN_time_°amp
 "TimêSèmpög"

	)

714 
	#NID_time_°amp
 133

	)

715 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

719 
	#SN_ms_code_öd
 "msCodeInd"

	)

720 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

721 
	#NID_ms_code_öd
 134

	)

722 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

724 
	#SN_ms_code_com
 "msCodeCom"

	)

725 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

726 
	#NID_ms_code_com
 135

	)

727 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

729 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

730 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

731 
	#NID_ms_˘l_sign
 136

	)

732 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

734 
	#SN_ms_sgc
 "msSGC"

	)

735 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

736 
	#NID_ms_sgc
 137

	)

737 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

739 
	#SN_ms_efs
 "msEFS"

	)

740 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

741 
	#NID_ms_efs
 138

	)

742 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

746 
	#SN_ns_sgc
 "nsSGC"

	)

747 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

748 
	#NID_ns_sgc
 139

	)

749 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

751 
	#SN_dñè_¸l
 "dñèCRL"

	)

752 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

753 
	#NID_dñè_¸l
 140

	)

754 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

756 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

757 
	#LN_¸l_ªas⁄
 "CRL Rós⁄ Code"

	)

758 
	#NID_¸l_ªas⁄
 141

	)

759 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

761 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

762 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

763 
	#NID_övÆidôy_d©e
 142

	)

764 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

766 
	#SN_sx√t
 "SXNëID"

	)

767 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

768 
	#NID_sx√t
 143

	)

769 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

773 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

774 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
, 1

	)

776 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

777 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

778 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

779 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
, 1L

	)

781 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

782 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

783 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

784 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
, 2L

	)

786 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

787 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

788 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

789 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 3L

	)

791 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

792 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

793 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

794 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 4L

	)

796 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

797 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

798 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

799 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 5L

	)

801 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

802 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

803 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

804 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 6L

	)

806 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
, 10L

	)

808 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
, 1L

	)

810 
	#LN_keyBag
 "keyBag"

	)

811 
	#NID_keyBag
 150

	)

812 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
, 1L

	)

814 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

815 
	#NID_pkcs8ShroudedKeyBag
 151

	)

816 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
, 2L

	)

818 
	#LN_˚πBag
 "˚πBag"

	)

819 
	#NID_˚πBag
 152

	)

820 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
, 3L

	)

822 
	#LN_¸lBag
 "¸lBag"

	)

823 
	#NID_¸lBag
 153

	)

824 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
, 4L

	)

826 
	#LN_£¸ëBag
 "£¸ëBag"

	)

827 
	#NID_£¸ëBag
 154

	)

828 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
, 5L

	)

830 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

831 
	#NID_ß„C⁄ã¡sBag
 155

	)

832 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
, 6L

	)

834 
	#LN_‰õndlyName
 "‰õndlyName"

	)

835 
	#NID_‰õndlyName
 156

	)

836 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
, 20L

	)

838 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

839 
	#NID_loˇlKeyID
 157

	)

840 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
, 21L

	)

842 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
, 22L

	)

844 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

845 
	#NID_x509Cîtifiˇã
 158

	)

846 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
, 1L

	)

848 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

849 
	#NID_sdsiCîtifiˇã
 159

	)

850 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
, 2L

	)

852 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
, 23L

	)

854 
	#LN_x509Cæ
 "x509Cæ"

	)

855 
	#NID_x509Cæ
 160

	)

856 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
, 1L

	)

860 
	#LN_pbes2
 "PBES2"

	)

861 
	#NID_pbes2
 161

	)

862 
	#OBJ_pbes2
 
OBJ_pkcs
,5L,13L

	)

864 
	#LN_pbmac1
 "PBMAC1"

	)

865 
	#NID_pbmac1
 162

	)

866 
	#OBJ_pbmac1
 
OBJ_pkcs
,5L,14L

	)

868 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

869 
	#NID_hmacWôhSHA1
 163

	)

870 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

874 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

875 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

876 
	#NID_id_qt_˝s
 164

	)

877 
	#OBJ_id_qt_˝s
 
OBJ_id_pkix
,2L,1L

	)

879 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

880 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

881 
	#NID_id_qt_unŸi˚
 165

	)

882 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_pkix
,2L,2L

	)

884 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

885 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

886 
	#NID_rc2_64_cbc
 166

	)

888 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

889 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

890 
	#NID_SMIMEC≠abûôõs
 167

	)

891 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

893 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

894 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

895 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

896 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs
,5L,4L

	)

898 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

899 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

900 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

901 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs
,5L,6L

	)

903 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

904 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

905 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

906 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs
,5L,10L

	)

910 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

911 
	#SN_ms_ext_ªq
 "msExtReq"

	)

912 
	#NID_ms_ext_ªq
 171

	)

913 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

915 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

916 
	#SN_ext_ªq
 "extReq"

	)

917 
	#NID_ext_ªq
 172

	)

918 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

920 
	#SN_«me
 "«me"

	)

921 
	#LN_«me
 "«me"

	)

922 
	#NID_«me
 173

	)

923 
	#OBJ_«me
 
OBJ_X509
,41L

	)

925 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

926 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

927 
	#NID_dnQuÆifõr
 174

	)

928 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

930 
	#SN_id_≥
 "id-≥"

	)

931 
	#NID_id_≥
 175

	)

932 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

934 
	#SN_id_ad
 "id-ad"

	)

935 
	#NID_id_ad
 176

	)

936 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

938 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

939 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

940 
	#NID_öfo_ac˚ss
 177

	)

941 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

943 
	#SN_ad_OCSP
 "OCSP"

	)

944 
	#LN_ad_OCSP
 "OCSP"

	)

945 
	#NID_ad_OCSP
 178

	)

946 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

948 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

949 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

950 
	#NID_ad_ˇ_issuîs
 179

	)

951 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

953 
	#SN_OCSP_sign
 "OCSPSignög"

	)

954 
	#LN_OCSP_sign
 "OCSP Signög"

	)

955 
	#NID_OCSP_sign
 180

	)

956 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

959 
	~<›ís¶/bio.h
>

960 
	~<›ís¶/a¢1.h
>

962 
	#OBJ_NAME_TYPE_UNDEF
 0x00

	)

963 
	#OBJ_NAME_TYPE_MD_METH
 0x01

	)

964 
	#OBJ_NAME_TYPE_CIPHER_METH
 0x02

	)

965 
	#OBJ_NAME_TYPE_PKEY_METH
 0x03

	)

966 
	#OBJ_NAME_TYPE_COMP_METH
 0x04

	)

967 
	#OBJ_NAME_TYPE_NUM
 0x05

	)

969 
	#OBJ_NAME_ALIAS
 0x8000

	)

971 
	#OBJ_BSEARCH_VALUE_ON_NOMATCH
 0x01

	)

972 
	#OBJ_BSEARCH_FIRST_VALUE_ON_MATCH
 0x02

	)

975 #ifde‡ 
__˝lu•lus


979 
	sobj_«me_°


981 
ty≥
;

982 
Æüs
;

983 c⁄° *
«me
;

984 c⁄° *
d©a
;

985 } 
	tOBJ_NAME
;

987 
	#OBJ_¸óã_™d_add_obje˘
(
a
,
b
,
c
Ë
	`OBJ_¸óã
◊,b,c)

	)

990 
OBJ_NAME_öô
();

991 
OBJ_NAME_√w_ödex
((*
hash_func
)(const *),

992 (*
cmp_func
)(const *, const *),

993 (*
‰ì_func
)(const *, , const *));

994 c⁄° *
OBJ_NAME_gë
(c⁄° *
«me
,
ty≥
);

995 
OBJ_NAME_add
(c⁄° *
«me
,
ty≥
,c⁄° *
d©a
);

996 
OBJ_NAME_ªmove
(c⁄° *
«me
,
ty≥
);

997 
OBJ_NAME_˛ónup
(
ty≥
);

998 
OBJ_NAME_do_Æl
(
ty≥
,(*
‚
)(c⁄° 
OBJ_NAME
 *,*
¨g
),

999 *
¨g
);

1000 
OBJ_NAME_do_Æl_s‹ãd
(
ty≥
,(*
‚
)(c⁄° 
OBJ_NAME
 *,*
¨g
),

1001 *
¨g
);

1003 
ASN1_OBJECT
 * 
OBJ_dup
(c⁄° ASN1_OBJECT *
o
);

1004 
ASN1_OBJECT
 * 
OBJ_nid2obj
(
n
);

1005 c⁄° * 
OBJ_nid2 
(
n
);

1006 c⁄° * 
OBJ_nid2¢
(
n
);

1007 
OBJ_obj2nid
(c⁄° 
ASN1_OBJECT
 *
o
);

1008 
ASN1_OBJECT
 * 
OBJ_txt2obj
(c⁄° *
s
, 
no_«me
);

1009 
OBJ_obj2txt
(*
buf
, 
buf_Àn
, c⁄° 
ASN1_OBJECT
 *
a
, 
no_«me
);

1010 
OBJ_txt2nid
(c⁄° *
s
);

1011 
OBJ_ 2nid
(c⁄° *
s
);

1012 
OBJ_¢2nid
(c⁄° *
s
);

1013 
OBJ_cmp
(c⁄° 
ASN1_OBJECT
 *
a
,c⁄° ASN1_OBJECT *
b
);

1014 c⁄° * 
OBJ_b£¨ch_
(c⁄° *
key
,c⁄° *
ba£
,
num
,
size
,

1015 (*
cmp
)(const *, const *));

1016 c⁄° * 
OBJ_b£¨ch_ex_
(c⁄° *
key
,c⁄° *
ba£
,
num
,

1017 
size
,

1018 (*
cmp
)(const *, const *),

1019 
Êags
);

1021 
	#_DECLARE_OBJ_BSEARCH_CMP_FN
(
sc›e
, 
ty≥1
, 
ty≥2
, 
nm
) \

1022 
nm
##
	`_cmp_BSEARCH_CMP_FN
(const *, const *); \

1023 
nm
##
	`_cmp
(
ty≥1
 c⁄° *, 
ty≥2
 const *); \

1024 
sc›e
 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

1026 
	#DECLARE_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
cmp
) \

1027 
	`_DECLARE_OBJ_BSEARCH_CMP_FN
(, 
ty≥1
, 
ty≥2
, 
cmp
)

	)

1028 
	#DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1029 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

1058 
	#IMPLEMENT_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1059 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1061 
ty≥1
 c⁄° *
a
 = 
a_
; \

1062 
ty≥2
 c⁄° *
b
 = 
b_
; \

1063  
nm
##
	`_cmp
(
a
,
b
); \

1065 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1067  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1068 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1070 
	`dummy_¥ŸŸy≥
()

	)

1072 
	#IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1073 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1075 
ty≥1
 c⁄° *
a
 = 
a_
; \

1076 
ty≥2
 c⁄° *
b
 = 
b_
; \

1077  
nm
##
	`_cmp
(
a
,
b
); \

1079 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1081  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1082 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1084 
	`dummy_¥ŸŸy≥
()

	)

1086 
	#OBJ_b£¨ch
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
) \

1087 ((
ty≥2
 *)
	`OBJ_b£¨ch_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1088 
num
,(
ty≥2
), \

1089 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1090 ()
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1091 
cmp
##
_BSEARCH_CMP_FN
)))

	)

1093 
	#OBJ_b£¨ch_ex
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
,
Êags
) \

1094 ((
ty≥2
 *)
	`OBJ_b£¨ch_ex_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1095 
num
,(
ty≥2
), \

1096 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1097 ()
ty≥_2
=
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1098 
cmp
##
_BSEARCH_CMP_FN
)),
Êags
)

	)

1100 
OBJ_√w_nid
(
num
);

1101 
OBJ_add_obje˘
(c⁄° 
ASN1_OBJECT
 *
obj
);

1102 
OBJ_¸óã
(c⁄° *
oid
,c⁄° *
¢
,c⁄° *
 
);

1103 
OBJ_˛ónup
();

1104 
OBJ_¸óã_obje˘s
(
BIO
 *
ö
);

1106 
OBJ_föd_sigid_Ægs
(
signid
, *
pdig_nid
, *
µkey_nid
);

1107 
OBJ_föd_sigid_by_Ægs
(*
psignid
, 
dig_nid
, 
pkey_nid
);

1108 
OBJ_add_sigid
(
signid
, 
dig_id
, 
pkey_id
);

1109 
OBJ_sigid_‰ì
();

1111 
obj_˛ónup_de„r
;

1112 
check_de„r
(
nid
);

1118 
ERR_lﬂd_OBJ_°rögs
();

1123 
	#OBJ_F_OBJ_ADD_OBJECT
 105

	)

1124 
	#OBJ_F_OBJ_CREATE
 100

	)

1125 
	#OBJ_F_OBJ_DUP
 101

	)

1126 
	#OBJ_F_OBJ_NAME_NEW_INDEX
 106

	)

1127 
	#OBJ_F_OBJ_NID2LN
 102

	)

1128 
	#OBJ_F_OBJ_NID2OBJ
 103

	)

1129 
	#OBJ_F_OBJ_NID2SN
 104

	)

1132 
	#OBJ_R_MALLOC_FAILURE
 100

	)

1133 
	#OBJ_R_UNKNOWN_NID
 101

	)

1135 #ifde‡ 
__˝lu•lus


	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

323 
__THROW
 
__©åibuã_puª__
;

326 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

331 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

332 
__THROW
;

335 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

336 
__END_NAMESPACE_STD


338 #ifde‡
__USE_GNU


341 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

342 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

343 
__THROW
;

347 
__BEGIN_NAMESPACE_STD


350 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

354 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

358 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

362 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

363 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

364 
mb°©e_t
 *
__p
Ë
__THROW
;

367 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

368 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

371 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

372 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

373 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

375 
__END_NAMESPACE_STD


377 #ifde‡
__USE_EXTERN_INLINES


383 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

384 
__exã∫_ölöe
 
wöt_t


385 
	`__NTH
 (
	$btowc
 (
__c
))

386 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

387 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

389 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

390 
__exã∫_ölöe
 

391 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

393 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

395 
__exã∫_ölöe
 
size_t


396 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

397 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

398 {  (
__ps
 !
NULL


399 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

402 
__BEGIN_NAMESPACE_STD


405 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

406 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

407 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

411 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

412 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
__END_NAMESPACE_STD


417 #ifdef 
__USE_XOPEN2K8


420 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

421 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

422 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

426 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

427 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

428 
size_t
 
__nwc
, size_à
__Àn
,

429 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

434 #ifde‡
__USE_XOPEN


436 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

440 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

444 
__BEGIN_NAMESPACE_STD


447 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

449 
__END_NAMESPACE_STD


451 #ifde‡
__USE_ISOC99


452 
__BEGIN_NAMESPACE_C99


454 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

456 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

457 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

458 
__END_NAMESPACE_C99


462 
__BEGIN_NAMESPACE_STD


465 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

470 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

471 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

472 
__THROW
;

473 
__END_NAMESPACE_STD


475 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

476 
__BEGIN_NAMESPACE_C99


479 
__exãnsi⁄__


480 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

481 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

482 
__THROW
;

486 
__exãnsi⁄__


487 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
Ë
__THROW
;

490 
__END_NAMESPACE_C99


493 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


496 
__exãnsi⁄__


497 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

499 
__THROW
;

503 
__exãnsi⁄__


504 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__ba£
Ë
__THROW
;

509 #ifde‡
__USE_GNU


523 
	~<xloˇÀ.h
>

527 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

528 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

529 
__loˇÀ_t
 
__loc
Ë
__THROW
;

531 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

532 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

533 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

535 
__exãnsi⁄__


536 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

540 
__exãnsi⁄__


541 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
__ba£
, 
__loˇÀ_t
 
__loc
)

544 
__THROW
;

546 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

547 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

548 
__THROW
;

550 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

551 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

552 
__THROW
;

554 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

555 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

556 
__loˇÀ_t
 
__loc
Ë
__THROW
;

560 #ifde‡
__USE_XOPEN2K8


563 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

564 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

569 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

570 
__THROW
;

577 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

580 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


581 
__BEGIN_NAMESPACE_STD


584 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

591 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

592 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

598 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

602 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

603 
__THROW
 ;

609 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

610 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

611 
__gnuc_va_li°
 
__¨g
)

617 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

618 
__gnuc_va_li°
 
__¨g
)

622 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

623 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

625 
__THROW
 ;

632 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

633 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

639 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

643 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

644 
__THROW
 ;

646 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

647 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

648 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

649 #ifde‡
__REDIRECT


653 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

654 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

655 
__isoc99_fwsˇnf
)

657 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_wsˇnf
)

660 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

661 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 ...), 
__isoc99_swsˇnf
)

665 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

666 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

667 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

669 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

670 
__THROW
;

671 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

672 
	#wsˇnf
 
__isoc99_wsˇnf


	)

673 
	#swsˇnf
 
__isoc99_swsˇnf


	)

677 
__END_NAMESPACE_STD


680 #ifde‡
__USE_ISOC99


681 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 #i‡!
deföed
 
__USE_GNU
 \

704 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

705 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

708 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

711 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

714 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

715 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

719 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

720 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
);

722 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

723 
__gnuc_va_li°
 
__¨g
);

724 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

725 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

727 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

728 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

729 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

733 
__END_NAMESPACE_C99


737 
__BEGIN_NAMESPACE_STD


742 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

743 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨
 ();

756 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

757 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

771 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

772 
__FILE
 *
__ª°ri˘
 
__°ªam
);

778 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

779 
__FILE
 *
__ª°ri˘
 
__°ªam
);

786 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

787 
__END_NAMESPACE_STD


790 #ifde‡
__USE_GNU


798 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

799 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

807 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

815 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

824 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

834 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

835 
__FILE
 *
__ª°ri˘
 
__°ªam
);

843 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

844 
__FILE
 *
__ª°ri˘
 
__°ªam
);

848 
__BEGIN_NAMESPACE_C99


852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

855 
__END_NAMESPACE_C99


857 #ifde‡
__USE_GNU


858 
	~<xloˇÀ.h
>

862 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

863 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

864 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

865 
__loˇÀ_t
 
__loc
Ë
__THROW
;

874 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


875 
	#__√ed_iswxxx


	)

876 
	~<w˘y≥.h
>

880 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


881 
	~<bôs/wch¨2.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/wch¨-ldbl.h
>

888 
__END_DECLS


896 #unde‡
__√ed_mb°©e_t


897 #unde‡
__√ed_wöt_t


	@/usr/include/openssl/obj_mac.h

65 
	#SN_undef
 "UNDEF"

	)

66 
	#LN_undef
 "undeföed"

	)

67 
	#NID_undef
 0

	)

68 
	#OBJ_undef
 0L

	)

70 
	#SN_ôu_t
 "ITU-T"

	)

71 
	#LN_ôu_t
 "ôu-t"

	)

72 
	#NID_ôu_t
 645

	)

73 
	#OBJ_ôu_t
 0L

	)

75 
	#NID_ccôt
 404

	)

76 
	#OBJ_ccôt
 
OBJ_ôu_t


	)

78 
	#SN_iso
 "ISO"

	)

79 
	#LN_iso
 "iso"

	)

80 
	#NID_iso
 181

	)

81 
	#OBJ_iso
 1L

	)

83 
	#SN_joöt_iso_ôu_t
 "JOINT-ISO-ITU-T"

	)

84 
	#LN_joöt_iso_ôu_t
 "joöt-iso-ôu-t"

	)

85 
	#NID_joöt_iso_ôu_t
 646

	)

86 
	#OBJ_joöt_iso_ôu_t
 2L

	)

88 
	#NID_joöt_iso_ccôt
 393

	)

89 
	#OBJ_joöt_iso_ccôt
 
OBJ_joöt_iso_ôu_t


	)

91 
	#SN_membî_body
 "membî-body"

	)

92 
	#LN_membî_body
 "ISO Membî Body"

	)

93 
	#NID_membî_body
 182

	)

94 
	#OBJ_membî_body
 
OBJ_iso
,2L

	)

96 
	#SN_idítifõd_‹g™iz©i⁄
 "idítifõd-‹g™iz©i⁄"

	)

97 
	#NID_idítifõd_‹g™iz©i⁄
 676

	)

98 
	#OBJ_idítifõd_‹g™iz©i⁄
 
OBJ_iso
,3L

	)

100 
	#SN_hmac_md5
 "HMAC-MD5"

	)

101 
	#LN_hmac_md5
 "hmac-md5"

	)

102 
	#NID_hmac_md5
 780

	)

103 
	#OBJ_hmac_md5
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,1L

	)

105 
	#SN_hmac_sha1
 "HMAC-SHA1"

	)

106 
	#LN_hmac_sha1
 "hmac-sha1"

	)

107 
	#NID_hmac_sha1
 781

	)

108 
	#OBJ_hmac_sha1
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,2L

	)

110 
	#SN_˚πicom_¨c
 "˚πicom-¨c"

	)

111 
	#NID_˚πicom_¨c
 677

	)

112 
	#OBJ_˚πicom_¨c
 
OBJ_idítifõd_‹g™iz©i⁄
,132L

	)

114 
	#SN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "öã∫©i⁄Æ-‹g™iz©i⁄s"

	)

115 
	#LN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "I¡î«ti⁄Æ Org™iz©i⁄s"

	)

116 
	#NID_öã∫©i⁄Æ_‹g™iz©i⁄s
 647

	)

117 
	#OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
 
OBJ_joöt_iso_ôu_t
,23L

	)

119 
	#SN_w≠
 "w≠"

	)

120 
	#NID_w≠
 678

	)

121 
	#OBJ_w≠
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,43L

	)

123 
	#SN_w≠_wsg
 "w≠-wsg"

	)

124 
	#NID_w≠_wsg
 679

	)

125 
	#OBJ_w≠_wsg
 
OBJ_w≠
,1L

	)

127 
	#SN_£À˘ed_©åibuã_ty≥s
 "£À˘ed-©åibuã-ty≥s"

	)

128 
	#LN_£À˘ed_©åibuã_ty≥s
 "Sñe˘ed Aâribuã Ty≥s"

	)

129 
	#NID_£À˘ed_©åibuã_ty≥s
 394

	)

130 
	#OBJ_£À˘ed_©åibuã_ty≥s
 
OBJ_joöt_iso_ôu_t
,5L,1L,5L

	)

132 
	#SN_˛óøn˚
 "˛óøn˚"

	)

133 
	#NID_˛óøn˚
 395

	)

134 
	#OBJ_˛óøn˚
 
OBJ_£À˘ed_©åibuã_ty≥s
,55L

	)

136 
	#SN_ISO_US
 "ISO-US"

	)

137 
	#LN_ISO_US
 "ISO US Membî Body"

	)

138 
	#NID_ISO_US
 183

	)

139 
	#OBJ_ISO_US
 
OBJ_membî_body
,840L

	)

141 
	#SN_X9_57
 "X9-57"

	)

142 
	#LN_X9_57
 "X9.57"

	)

143 
	#NID_X9_57
 184

	)

144 
	#OBJ_X9_57
 
OBJ_ISO_US
,10040L

	)

146 
	#SN_X9cm
 "X9cm"

	)

147 
	#LN_X9cm
 "X9.57 CM ?"

	)

148 
	#NID_X9cm
 185

	)

149 
	#OBJ_X9cm
 
OBJ_X9_57
,4L

	)

151 
	#SN_dß
 "DSA"

	)

152 
	#LN_dß
 "dßEn¸y±i⁄"

	)

153 
	#NID_dß
 116

	)

154 
	#OBJ_dß
 
OBJ_X9cm
,1L

	)

156 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

157 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

158 
	#NID_dßWôhSHA1
 113

	)

159 
	#OBJ_dßWôhSHA1
 
OBJ_X9cm
,3L

	)

161 
	#SN_™si_X9_62
 "™si-X9-62"

	)

162 
	#LN_™si_X9_62
 "ANSI X9.62"

	)

163 
	#NID_™si_X9_62
 405

	)

164 
	#OBJ_™si_X9_62
 
OBJ_ISO_US
,10045L

	)

166 
	#OBJ_X9_62_id_fõldTy≥
 
OBJ_™si_X9_62
,1L

	)

168 
	#SN_X9_62_¥ime_fõld
 "¥ime-fõld"

	)

169 
	#NID_X9_62_¥ime_fõld
 406

	)

170 
	#OBJ_X9_62_¥ime_fõld
 
OBJ_X9_62_id_fõldTy≥
,1L

	)

172 
	#SN_X9_62_ch¨a˘îi°ic_two_fõld
 "ch¨a˘îi°ic-two-fõld"

	)

173 
	#NID_X9_62_ch¨a˘îi°ic_two_fõld
 407

	)

174 
	#OBJ_X9_62_ch¨a˘îi°ic_two_fõld
 
OBJ_X9_62_id_fõldTy≥
,2L

	)

176 
	#SN_X9_62_id_ch¨a˘îi°ic_two_basis
 "id-ch¨a˘îi°ic-two-basis"

	)

177 
	#NID_X9_62_id_ch¨a˘îi°ic_two_basis
 680

	)

178 
	#OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
 
OBJ_X9_62_ch¨a˘îi°ic_two_fõld
,3L

	)

180 
	#SN_X9_62_⁄Basis
 "⁄Basis"

	)

181 
	#NID_X9_62_⁄Basis
 681

	)

182 
	#OBJ_X9_62_⁄Basis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,1L

	)

184 
	#SN_X9_62_çBasis
 "çBasis"

	)

185 
	#NID_X9_62_çBasis
 682

	)

186 
	#OBJ_X9_62_çBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,2L

	)

188 
	#SN_X9_62_µBasis
 "µBasis"

	)

189 
	#NID_X9_62_µBasis
 683

	)

190 
	#OBJ_X9_62_µBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,3L

	)

192 
	#OBJ_X9_62_id_publicKeyTy≥
 
OBJ_™si_X9_62
,2L

	)

194 
	#SN_X9_62_id_ecPublicKey
 "id-ecPublicKey"

	)

195 
	#NID_X9_62_id_ecPublicKey
 408

	)

196 
	#OBJ_X9_62_id_ecPublicKey
 
OBJ_X9_62_id_publicKeyTy≥
,1L

	)

198 
	#OBJ_X9_62_ñlùticCurve
 
OBJ_™si_X9_62
,3L

	)

200 
	#OBJ_X9_62_c_TwoCurve
 
OBJ_X9_62_ñlùticCurve
,0L

	)

202 
	#SN_X9_62_c2≤b163v1
 "c2≤b163v1"

	)

203 
	#NID_X9_62_c2≤b163v1
 684

	)

204 
	#OBJ_X9_62_c2≤b163v1
 
OBJ_X9_62_c_TwoCurve
,1L

	)

206 
	#SN_X9_62_c2≤b163v2
 "c2≤b163v2"

	)

207 
	#NID_X9_62_c2≤b163v2
 685

	)

208 
	#OBJ_X9_62_c2≤b163v2
 
OBJ_X9_62_c_TwoCurve
,2L

	)

210 
	#SN_X9_62_c2≤b163v3
 "c2≤b163v3"

	)

211 
	#NID_X9_62_c2≤b163v3
 686

	)

212 
	#OBJ_X9_62_c2≤b163v3
 
OBJ_X9_62_c_TwoCurve
,3L

	)

214 
	#SN_X9_62_c2≤b176v1
 "c2≤b176v1"

	)

215 
	#NID_X9_62_c2≤b176v1
 687

	)

216 
	#OBJ_X9_62_c2≤b176v1
 
OBJ_X9_62_c_TwoCurve
,4L

	)

218 
	#SN_X9_62_c2äb191v1
 "c2äb191v1"

	)

219 
	#NID_X9_62_c2äb191v1
 688

	)

220 
	#OBJ_X9_62_c2äb191v1
 
OBJ_X9_62_c_TwoCurve
,5L

	)

222 
	#SN_X9_62_c2äb191v2
 "c2äb191v2"

	)

223 
	#NID_X9_62_c2äb191v2
 689

	)

224 
	#OBJ_X9_62_c2äb191v2
 
OBJ_X9_62_c_TwoCurve
,6L

	)

226 
	#SN_X9_62_c2äb191v3
 "c2äb191v3"

	)

227 
	#NID_X9_62_c2äb191v3
 690

	)

228 
	#OBJ_X9_62_c2äb191v3
 
OBJ_X9_62_c_TwoCurve
,7L

	)

230 
	#SN_X9_62_c2⁄b191v4
 "c2⁄b191v4"

	)

231 
	#NID_X9_62_c2⁄b191v4
 691

	)

232 
	#OBJ_X9_62_c2⁄b191v4
 
OBJ_X9_62_c_TwoCurve
,8L

	)

234 
	#SN_X9_62_c2⁄b191v5
 "c2⁄b191v5"

	)

235 
	#NID_X9_62_c2⁄b191v5
 692

	)

236 
	#OBJ_X9_62_c2⁄b191v5
 
OBJ_X9_62_c_TwoCurve
,9L

	)

238 
	#SN_X9_62_c2≤b208w1
 "c2≤b208w1"

	)

239 
	#NID_X9_62_c2≤b208w1
 693

	)

240 
	#OBJ_X9_62_c2≤b208w1
 
OBJ_X9_62_c_TwoCurve
,10L

	)

242 
	#SN_X9_62_c2äb239v1
 "c2äb239v1"

	)

243 
	#NID_X9_62_c2äb239v1
 694

	)

244 
	#OBJ_X9_62_c2äb239v1
 
OBJ_X9_62_c_TwoCurve
,11L

	)

246 
	#SN_X9_62_c2äb239v2
 "c2äb239v2"

	)

247 
	#NID_X9_62_c2äb239v2
 695

	)

248 
	#OBJ_X9_62_c2äb239v2
 
OBJ_X9_62_c_TwoCurve
,12L

	)

250 
	#SN_X9_62_c2äb239v3
 "c2äb239v3"

	)

251 
	#NID_X9_62_c2äb239v3
 696

	)

252 
	#OBJ_X9_62_c2äb239v3
 
OBJ_X9_62_c_TwoCurve
,13L

	)

254 
	#SN_X9_62_c2⁄b239v4
 "c2⁄b239v4"

	)

255 
	#NID_X9_62_c2⁄b239v4
 697

	)

256 
	#OBJ_X9_62_c2⁄b239v4
 
OBJ_X9_62_c_TwoCurve
,14L

	)

258 
	#SN_X9_62_c2⁄b239v5
 "c2⁄b239v5"

	)

259 
	#NID_X9_62_c2⁄b239v5
 698

	)

260 
	#OBJ_X9_62_c2⁄b239v5
 
OBJ_X9_62_c_TwoCurve
,15L

	)

262 
	#SN_X9_62_c2≤b272w1
 "c2≤b272w1"

	)

263 
	#NID_X9_62_c2≤b272w1
 699

	)

264 
	#OBJ_X9_62_c2≤b272w1
 
OBJ_X9_62_c_TwoCurve
,16L

	)

266 
	#SN_X9_62_c2≤b304w1
 "c2≤b304w1"

	)

267 
	#NID_X9_62_c2≤b304w1
 700

	)

268 
	#OBJ_X9_62_c2≤b304w1
 
OBJ_X9_62_c_TwoCurve
,17L

	)

270 
	#SN_X9_62_c2äb359v1
 "c2äb359v1"

	)

271 
	#NID_X9_62_c2äb359v1
 701

	)

272 
	#OBJ_X9_62_c2äb359v1
 
OBJ_X9_62_c_TwoCurve
,18L

	)

274 
	#SN_X9_62_c2≤b368w1
 "c2≤b368w1"

	)

275 
	#NID_X9_62_c2≤b368w1
 702

	)

276 
	#OBJ_X9_62_c2≤b368w1
 
OBJ_X9_62_c_TwoCurve
,19L

	)

278 
	#SN_X9_62_c2äb431r1
 "c2äb431r1"

	)

279 
	#NID_X9_62_c2äb431r1
 703

	)

280 
	#OBJ_X9_62_c2äb431r1
 
OBJ_X9_62_c_TwoCurve
,20L

	)

282 
	#OBJ_X9_62_¥imeCurve
 
OBJ_X9_62_ñlùticCurve
,1L

	)

284 
	#SN_X9_62_¥ime192v1
 "¥ime192v1"

	)

285 
	#NID_X9_62_¥ime192v1
 409

	)

286 
	#OBJ_X9_62_¥ime192v1
 
OBJ_X9_62_¥imeCurve
,1L

	)

288 
	#SN_X9_62_¥ime192v2
 "¥ime192v2"

	)

289 
	#NID_X9_62_¥ime192v2
 410

	)

290 
	#OBJ_X9_62_¥ime192v2
 
OBJ_X9_62_¥imeCurve
,2L

	)

292 
	#SN_X9_62_¥ime192v3
 "¥ime192v3"

	)

293 
	#NID_X9_62_¥ime192v3
 411

	)

294 
	#OBJ_X9_62_¥ime192v3
 
OBJ_X9_62_¥imeCurve
,3L

	)

296 
	#SN_X9_62_¥ime239v1
 "¥ime239v1"

	)

297 
	#NID_X9_62_¥ime239v1
 412

	)

298 
	#OBJ_X9_62_¥ime239v1
 
OBJ_X9_62_¥imeCurve
,4L

	)

300 
	#SN_X9_62_¥ime239v2
 "¥ime239v2"

	)

301 
	#NID_X9_62_¥ime239v2
 413

	)

302 
	#OBJ_X9_62_¥ime239v2
 
OBJ_X9_62_¥imeCurve
,5L

	)

304 
	#SN_X9_62_¥ime239v3
 "¥ime239v3"

	)

305 
	#NID_X9_62_¥ime239v3
 414

	)

306 
	#OBJ_X9_62_¥ime239v3
 
OBJ_X9_62_¥imeCurve
,6L

	)

308 
	#SN_X9_62_¥ime256v1
 "¥ime256v1"

	)

309 
	#NID_X9_62_¥ime256v1
 415

	)

310 
	#OBJ_X9_62_¥ime256v1
 
OBJ_X9_62_¥imeCurve
,7L

	)

312 
	#OBJ_X9_62_id_ecSigTy≥
 
OBJ_™si_X9_62
,4L

	)

314 
	#SN_ecdß_wôh_SHA1
 "ecdß-wôh-SHA1"

	)

315 
	#NID_ecdß_wôh_SHA1
 416

	)

316 
	#OBJ_ecdß_wôh_SHA1
 
OBJ_X9_62_id_ecSigTy≥
,1L

	)

318 
	#SN_ecdß_wôh_Recommíded
 "ecdß-wôh-Recommíded"

	)

319 
	#NID_ecdß_wôh_Recommíded
 791

	)

320 
	#OBJ_ecdß_wôh_Recommíded
 
OBJ_X9_62_id_ecSigTy≥
,2L

	)

322 
	#SN_ecdß_wôh_S≥cifõd
 "ecdß-wôh-S≥cifõd"

	)

323 
	#NID_ecdß_wôh_S≥cifõd
 792

	)

324 
	#OBJ_ecdß_wôh_S≥cifõd
 
OBJ_X9_62_id_ecSigTy≥
,3L

	)

326 
	#SN_ecdß_wôh_SHA224
 "ecdß-wôh-SHA224"

	)

327 
	#NID_ecdß_wôh_SHA224
 793

	)

328 
	#OBJ_ecdß_wôh_SHA224
 
OBJ_ecdß_wôh_S≥cifõd
,1L

	)

330 
	#SN_ecdß_wôh_SHA256
 "ecdß-wôh-SHA256"

	)

331 
	#NID_ecdß_wôh_SHA256
 794

	)

332 
	#OBJ_ecdß_wôh_SHA256
 
OBJ_ecdß_wôh_S≥cifõd
,2L

	)

334 
	#SN_ecdß_wôh_SHA384
 "ecdß-wôh-SHA384"

	)

335 
	#NID_ecdß_wôh_SHA384
 795

	)

336 
	#OBJ_ecdß_wôh_SHA384
 
OBJ_ecdß_wôh_S≥cifõd
,3L

	)

338 
	#SN_ecdß_wôh_SHA512
 "ecdß-wôh-SHA512"

	)

339 
	#NID_ecdß_wôh_SHA512
 796

	)

340 
	#OBJ_ecdß_wôh_SHA512
 
OBJ_ecdß_wôh_S≥cifõd
,4L

	)

342 
	#OBJ_£cg_ñlùticCurve
 
OBJ_˚πicom_¨c
,0L

	)

344 
	#SN_£˝112r1
 "£˝112r1"

	)

345 
	#NID_£˝112r1
 704

	)

346 
	#OBJ_£˝112r1
 
OBJ_£cg_ñlùticCurve
,6L

	)

348 
	#SN_£˝112r2
 "£˝112r2"

	)

349 
	#NID_£˝112r2
 705

	)

350 
	#OBJ_£˝112r2
 
OBJ_£cg_ñlùticCurve
,7L

	)

352 
	#SN_£˝128r1
 "£˝128r1"

	)

353 
	#NID_£˝128r1
 706

	)

354 
	#OBJ_£˝128r1
 
OBJ_£cg_ñlùticCurve
,28L

	)

356 
	#SN_£˝128r2
 "£˝128r2"

	)

357 
	#NID_£˝128r2
 707

	)

358 
	#OBJ_£˝128r2
 
OBJ_£cg_ñlùticCurve
,29L

	)

360 
	#SN_£˝160k1
 "£˝160k1"

	)

361 
	#NID_£˝160k1
 708

	)

362 
	#OBJ_£˝160k1
 
OBJ_£cg_ñlùticCurve
,9L

	)

364 
	#SN_£˝160r1
 "£˝160r1"

	)

365 
	#NID_£˝160r1
 709

	)

366 
	#OBJ_£˝160r1
 
OBJ_£cg_ñlùticCurve
,8L

	)

368 
	#SN_£˝160r2
 "£˝160r2"

	)

369 
	#NID_£˝160r2
 710

	)

370 
	#OBJ_£˝160r2
 
OBJ_£cg_ñlùticCurve
,30L

	)

372 
	#SN_£˝192k1
 "£˝192k1"

	)

373 
	#NID_£˝192k1
 711

	)

374 
	#OBJ_£˝192k1
 
OBJ_£cg_ñlùticCurve
,31L

	)

376 
	#SN_£˝224k1
 "£˝224k1"

	)

377 
	#NID_£˝224k1
 712

	)

378 
	#OBJ_£˝224k1
 
OBJ_£cg_ñlùticCurve
,32L

	)

380 
	#SN_£˝224r1
 "£˝224r1"

	)

381 
	#NID_£˝224r1
 713

	)

382 
	#OBJ_£˝224r1
 
OBJ_£cg_ñlùticCurve
,33L

	)

384 
	#SN_£˝256k1
 "£˝256k1"

	)

385 
	#NID_£˝256k1
 714

	)

386 
	#OBJ_£˝256k1
 
OBJ_£cg_ñlùticCurve
,10L

	)

388 
	#SN_£˝384r1
 "£˝384r1"

	)

389 
	#NID_£˝384r1
 715

	)

390 
	#OBJ_£˝384r1
 
OBJ_£cg_ñlùticCurve
,34L

	)

392 
	#SN_£˝521r1
 "£˝521r1"

	)

393 
	#NID_£˝521r1
 716

	)

394 
	#OBJ_£˝521r1
 
OBJ_£cg_ñlùticCurve
,35L

	)

396 
	#SN_£˘113r1
 "£˘113r1"

	)

397 
	#NID_£˘113r1
 717

	)

398 
	#OBJ_£˘113r1
 
OBJ_£cg_ñlùticCurve
,4L

	)

400 
	#SN_£˘113r2
 "£˘113r2"

	)

401 
	#NID_£˘113r2
 718

	)

402 
	#OBJ_£˘113r2
 
OBJ_£cg_ñlùticCurve
,5L

	)

404 
	#SN_£˘131r1
 "£˘131r1"

	)

405 
	#NID_£˘131r1
 719

	)

406 
	#OBJ_£˘131r1
 
OBJ_£cg_ñlùticCurve
,22L

	)

408 
	#SN_£˘131r2
 "£˘131r2"

	)

409 
	#NID_£˘131r2
 720

	)

410 
	#OBJ_£˘131r2
 
OBJ_£cg_ñlùticCurve
,23L

	)

412 
	#SN_£˘163k1
 "£˘163k1"

	)

413 
	#NID_£˘163k1
 721

	)

414 
	#OBJ_£˘163k1
 
OBJ_£cg_ñlùticCurve
,1L

	)

416 
	#SN_£˘163r1
 "£˘163r1"

	)

417 
	#NID_£˘163r1
 722

	)

418 
	#OBJ_£˘163r1
 
OBJ_£cg_ñlùticCurve
,2L

	)

420 
	#SN_£˘163r2
 "£˘163r2"

	)

421 
	#NID_£˘163r2
 723

	)

422 
	#OBJ_£˘163r2
 
OBJ_£cg_ñlùticCurve
,15L

	)

424 
	#SN_£˘193r1
 "£˘193r1"

	)

425 
	#NID_£˘193r1
 724

	)

426 
	#OBJ_£˘193r1
 
OBJ_£cg_ñlùticCurve
,24L

	)

428 
	#SN_£˘193r2
 "£˘193r2"

	)

429 
	#NID_£˘193r2
 725

	)

430 
	#OBJ_£˘193r2
 
OBJ_£cg_ñlùticCurve
,25L

	)

432 
	#SN_£˘233k1
 "£˘233k1"

	)

433 
	#NID_£˘233k1
 726

	)

434 
	#OBJ_£˘233k1
 
OBJ_£cg_ñlùticCurve
,26L

	)

436 
	#SN_£˘233r1
 "£˘233r1"

	)

437 
	#NID_£˘233r1
 727

	)

438 
	#OBJ_£˘233r1
 
OBJ_£cg_ñlùticCurve
,27L

	)

440 
	#SN_£˘239k1
 "£˘239k1"

	)

441 
	#NID_£˘239k1
 728

	)

442 
	#OBJ_£˘239k1
 
OBJ_£cg_ñlùticCurve
,3L

	)

444 
	#SN_£˘283k1
 "£˘283k1"

	)

445 
	#NID_£˘283k1
 729

	)

446 
	#OBJ_£˘283k1
 
OBJ_£cg_ñlùticCurve
,16L

	)

448 
	#SN_£˘283r1
 "£˘283r1"

	)

449 
	#NID_£˘283r1
 730

	)

450 
	#OBJ_£˘283r1
 
OBJ_£cg_ñlùticCurve
,17L

	)

452 
	#SN_£˘409k1
 "£˘409k1"

	)

453 
	#NID_£˘409k1
 731

	)

454 
	#OBJ_£˘409k1
 
OBJ_£cg_ñlùticCurve
,36L

	)

456 
	#SN_£˘409r1
 "£˘409r1"

	)

457 
	#NID_£˘409r1
 732

	)

458 
	#OBJ_£˘409r1
 
OBJ_£cg_ñlùticCurve
,37L

	)

460 
	#SN_£˘571k1
 "£˘571k1"

	)

461 
	#NID_£˘571k1
 733

	)

462 
	#OBJ_£˘571k1
 
OBJ_£cg_ñlùticCurve
,38L

	)

464 
	#SN_£˘571r1
 "£˘571r1"

	)

465 
	#NID_£˘571r1
 734

	)

466 
	#OBJ_£˘571r1
 
OBJ_£cg_ñlùticCurve
,39L

	)

468 
	#OBJ_w≠_wsg_idm_ecid
 
OBJ_w≠_wsg
,4L

	)

470 
	#SN_w≠_wsg_idm_ecid_wés1
 "w≠-wsg-idm-ecid-wés1"

	)

471 
	#NID_w≠_wsg_idm_ecid_wés1
 735

	)

472 
	#OBJ_w≠_wsg_idm_ecid_wés1
 
OBJ_w≠_wsg_idm_ecid
,1L

	)

474 
	#SN_w≠_wsg_idm_ecid_wés3
 "w≠-wsg-idm-ecid-wés3"

	)

475 
	#NID_w≠_wsg_idm_ecid_wés3
 736

	)

476 
	#OBJ_w≠_wsg_idm_ecid_wés3
 
OBJ_w≠_wsg_idm_ecid
,3L

	)

478 
	#SN_w≠_wsg_idm_ecid_wés4
 "w≠-wsg-idm-ecid-wés4"

	)

479 
	#NID_w≠_wsg_idm_ecid_wés4
 737

	)

480 
	#OBJ_w≠_wsg_idm_ecid_wés4
 
OBJ_w≠_wsg_idm_ecid
,4L

	)

482 
	#SN_w≠_wsg_idm_ecid_wés5
 "w≠-wsg-idm-ecid-wés5"

	)

483 
	#NID_w≠_wsg_idm_ecid_wés5
 738

	)

484 
	#OBJ_w≠_wsg_idm_ecid_wés5
 
OBJ_w≠_wsg_idm_ecid
,5L

	)

486 
	#SN_w≠_wsg_idm_ecid_wés6
 "w≠-wsg-idm-ecid-wés6"

	)

487 
	#NID_w≠_wsg_idm_ecid_wés6
 739

	)

488 
	#OBJ_w≠_wsg_idm_ecid_wés6
 
OBJ_w≠_wsg_idm_ecid
,6L

	)

490 
	#SN_w≠_wsg_idm_ecid_wés7
 "w≠-wsg-idm-ecid-wés7"

	)

491 
	#NID_w≠_wsg_idm_ecid_wés7
 740

	)

492 
	#OBJ_w≠_wsg_idm_ecid_wés7
 
OBJ_w≠_wsg_idm_ecid
,7L

	)

494 
	#SN_w≠_wsg_idm_ecid_wés8
 "w≠-wsg-idm-ecid-wés8"

	)

495 
	#NID_w≠_wsg_idm_ecid_wés8
 741

	)

496 
	#OBJ_w≠_wsg_idm_ecid_wés8
 
OBJ_w≠_wsg_idm_ecid
,8L

	)

498 
	#SN_w≠_wsg_idm_ecid_wés9
 "w≠-wsg-idm-ecid-wés9"

	)

499 
	#NID_w≠_wsg_idm_ecid_wés9
 742

	)

500 
	#OBJ_w≠_wsg_idm_ecid_wés9
 
OBJ_w≠_wsg_idm_ecid
,9L

	)

502 
	#SN_w≠_wsg_idm_ecid_wés10
 "w≠-wsg-idm-ecid-wés10"

	)

503 
	#NID_w≠_wsg_idm_ecid_wés10
 743

	)

504 
	#OBJ_w≠_wsg_idm_ecid_wés10
 
OBJ_w≠_wsg_idm_ecid
,10L

	)

506 
	#SN_w≠_wsg_idm_ecid_wés11
 "w≠-wsg-idm-ecid-wés11"

	)

507 
	#NID_w≠_wsg_idm_ecid_wés11
 744

	)

508 
	#OBJ_w≠_wsg_idm_ecid_wés11
 
OBJ_w≠_wsg_idm_ecid
,11L

	)

510 
	#SN_w≠_wsg_idm_ecid_wés12
 "w≠-wsg-idm-ecid-wés12"

	)

511 
	#NID_w≠_wsg_idm_ecid_wés12
 745

	)

512 
	#OBJ_w≠_wsg_idm_ecid_wés12
 
OBJ_w≠_wsg_idm_ecid
,12L

	)

514 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

515 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

516 
	#NID_ˇ°5_cbc
 108

	)

517 
	#OBJ_ˇ°5_cbc
 
OBJ_ISO_US
,113533L,7L,66L,10L

	)

519 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

520 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

521 
	#NID_ˇ°5_ecb
 109

	)

523 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

524 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

525 
	#NID_ˇ°5_cfb64
 110

	)

527 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

528 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

529 
	#NID_ˇ°5_ofb64
 111

	)

531 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

532 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

533 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 
OBJ_ISO_US
,113533L,7L,66L,12L

	)

535 
	#SN_id_Passw‹dBa£dMAC
 "id-Passw‹dBa£dMAC"

	)

536 
	#LN_id_Passw‹dBa£dMAC
 "∑ssw‹d ba£d MAC"

	)

537 
	#NID_id_Passw‹dBa£dMAC
 782

	)

538 
	#OBJ_id_Passw‹dBa£dMAC
 
OBJ_ISO_US
,113533L,7L,66L,13L

	)

540 
	#SN_id_DHBa£dMac
 "id-DHBa£dMac"

	)

541 
	#LN_id_DHBa£dMac
 "Diffõ-Hñlm™ ba£d MAC"

	)

542 
	#NID_id_DHBa£dMac
 783

	)

543 
	#OBJ_id_DHBa£dMac
 
OBJ_ISO_US
,113533L,7L,66L,30L

	)

545 
	#SN_rßdsi
 "rßdsi"

	)

546 
	#LN_rßdsi
 "RSA D©®Securôy, Inc."

	)

547 
	#NID_rßdsi
 1

	)

548 
	#OBJ_rßdsi
 
OBJ_ISO_US
,113549L

	)

550 
	#SN_pkcs
 "pkcs"

	)

551 
	#LN_pkcs
 "RSA D©®Securôy, Inc. PKCS"

	)

552 
	#NID_pkcs
 2

	)

553 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

555 
	#SN_pkcs1
 "pkcs1"

	)

556 
	#NID_pkcs1
 186

	)

557 
	#OBJ_pkcs1
 
OBJ_pkcs
,1L

	)

559 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

560 
	#NID_rßEn¸y±i⁄
 6

	)

561 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs1
,1L

	)

563 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

564 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

565 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

566 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,2L

	)

568 
	#SN_md4WôhRSAEn¸y±i⁄
 "RSA-MD4"

	)

569 
	#LN_md4WôhRSAEn¸y±i⁄
 "md4WôhRSAEn¸y±i⁄"

	)

570 
	#NID_md4WôhRSAEn¸y±i⁄
 396

	)

571 
	#OBJ_md4WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,3L

	)

573 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

574 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

575 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

576 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,4L

	)

578 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

579 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

580 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

581 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,5L

	)

583 
	#SN_rßesO´p
 "RSAES-OAEP"

	)

584 
	#LN_rßesO´p
 "rßesO´p"

	)

585 
	#NID_rßesO´p
 919

	)

586 
	#OBJ_rßesO´p
 
OBJ_pkcs1
,7L

	)

588 
	#SN_mgf1
 "MGF1"

	)

589 
	#LN_mgf1
 "mgf1"

	)

590 
	#NID_mgf1
 911

	)

591 
	#OBJ_mgf1
 
OBJ_pkcs1
,8L

	)

593 
	#SN_rßsßPss
 "RSASSA-PSS"

	)

594 
	#LN_rßsßPss
 "rßsßPss"

	)

595 
	#NID_rßsßPss
 912

	)

596 
	#OBJ_rßsßPss
 
OBJ_pkcs1
,10L

	)

598 
	#SN_sha256WôhRSAEn¸y±i⁄
 "RSA-SHA256"

	)

599 
	#LN_sha256WôhRSAEn¸y±i⁄
 "sha256WôhRSAEn¸y±i⁄"

	)

600 
	#NID_sha256WôhRSAEn¸y±i⁄
 668

	)

601 
	#OBJ_sha256WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,11L

	)

603 
	#SN_sha384WôhRSAEn¸y±i⁄
 "RSA-SHA384"

	)

604 
	#LN_sha384WôhRSAEn¸y±i⁄
 "sha384WôhRSAEn¸y±i⁄"

	)

605 
	#NID_sha384WôhRSAEn¸y±i⁄
 669

	)

606 
	#OBJ_sha384WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,12L

	)

608 
	#SN_sha512WôhRSAEn¸y±i⁄
 "RSA-SHA512"

	)

609 
	#LN_sha512WôhRSAEn¸y±i⁄
 "sha512WôhRSAEn¸y±i⁄"

	)

610 
	#NID_sha512WôhRSAEn¸y±i⁄
 670

	)

611 
	#OBJ_sha512WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,13L

	)

613 
	#SN_sha224WôhRSAEn¸y±i⁄
 "RSA-SHA224"

	)

614 
	#LN_sha224WôhRSAEn¸y±i⁄
 "sha224WôhRSAEn¸y±i⁄"

	)

615 
	#NID_sha224WôhRSAEn¸y±i⁄
 671

	)

616 
	#OBJ_sha224WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,14L

	)

618 
	#SN_pkcs3
 "pkcs3"

	)

619 
	#NID_pkcs3
 27

	)

620 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

622 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

623 
	#NID_dhKeyAgªemít
 28

	)

624 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

626 
	#SN_pkcs5
 "pkcs5"

	)

627 
	#NID_pkcs5
 187

	)

628 
	#OBJ_pkcs5
 
OBJ_pkcs
,5L

	)

630 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

631 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

632 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

633 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs5
,1L

	)

635 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

636 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

637 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

638 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs5
,3L

	)

640 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

641 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

642 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

643 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs5
,4L

	)

645 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

646 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

647 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

648 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs5
,6L

	)

650 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

651 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

652 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

653 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs5
,10L

	)

655 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

656 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

657 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

658 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs5
,11L

	)

660 
	#LN_id_pbkdf2
 "PBKDF2"

	)

661 
	#NID_id_pbkdf2
 69

	)

662 
	#OBJ_id_pbkdf2
 
OBJ_pkcs5
,12L

	)

664 
	#LN_pbes2
 "PBES2"

	)

665 
	#NID_pbes2
 161

	)

666 
	#OBJ_pbes2
 
OBJ_pkcs5
,13L

	)

668 
	#LN_pbmac1
 "PBMAC1"

	)

669 
	#NID_pbmac1
 162

	)

670 
	#OBJ_pbmac1
 
OBJ_pkcs5
,14L

	)

672 
	#SN_pkcs7
 "pkcs7"

	)

673 
	#NID_pkcs7
 20

	)

674 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

676 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

677 
	#NID_pkcs7_d©a
 21

	)

678 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

680 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

681 
	#NID_pkcs7_sig√d
 22

	)

682 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

684 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

685 
	#NID_pkcs7_ívñ›ed
 23

	)

686 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

688 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

689 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

690 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

692 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

693 
	#NID_pkcs7_dige°
 25

	)

694 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

696 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

697 
	#NID_pkcs7_í¸y±ed
 26

	)

698 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

700 
	#SN_pkcs9
 "pkcs9"

	)

701 
	#NID_pkcs9
 47

	)

702 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

704 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

705 
	#NID_pkcs9_emaûAddªss
 48

	)

706 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

708 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

709 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

710 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

712 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

713 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

714 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

716 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

717 
	#NID_pkcs9_mesßgeDige°
 51

	)

718 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

720 
	#LN_pkcs9_signögTime
 "signögTime"

	)

721 
	#NID_pkcs9_signögTime
 52

	)

722 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

724 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

725 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

726 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

728 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

729 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

730 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

732 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

733 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

734 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

736 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

737 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

738 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

740 
	#SN_ext_ªq
 "extReq"

	)

741 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

742 
	#NID_ext_ªq
 172

	)

743 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

745 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

746 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

747 
	#NID_SMIMEC≠abûôõs
 167

	)

748 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

750 
	#SN_SMIME
 "SMIME"

	)

751 
	#LN_SMIME
 "S/MIME"

	)

752 
	#NID_SMIME
 188

	)

753 
	#OBJ_SMIME
 
OBJ_pkcs9
,16L

	)

755 
	#SN_id_smime_mod
 "id-smime-mod"

	)

756 
	#NID_id_smime_mod
 189

	)

757 
	#OBJ_id_smime_mod
 
OBJ_SMIME
,0L

	)

759 
	#SN_id_smime_˘
 "id-smime-˘"

	)

760 
	#NID_id_smime_˘
 190

	)

761 
	#OBJ_id_smime_˘
 
OBJ_SMIME
,1L

	)

763 
	#SN_id_smime_Ø
 "id-smime-Ø"

	)

764 
	#NID_id_smime_Ø
 191

	)

765 
	#OBJ_id_smime_Ø
 
OBJ_SMIME
,2L

	)

767 
	#SN_id_smime_Æg
 "id-smime-Æg"

	)

768 
	#NID_id_smime_Æg
 192

	)

769 
	#OBJ_id_smime_Æg
 
OBJ_SMIME
,3L

	)

771 
	#SN_id_smime_cd
 "id-smime-cd"

	)

772 
	#NID_id_smime_cd
 193

	)

773 
	#OBJ_id_smime_cd
 
OBJ_SMIME
,4L

	)

775 
	#SN_id_smime_•q
 "id-smime-•q"

	)

776 
	#NID_id_smime_•q
 194

	)

777 
	#OBJ_id_smime_•q
 
OBJ_SMIME
,5L

	)

779 
	#SN_id_smime_˘i
 "id-smime-˘i"

	)

780 
	#NID_id_smime_˘i
 195

	)

781 
	#OBJ_id_smime_˘i
 
OBJ_SMIME
,6L

	)

783 
	#SN_id_smime_mod_cms
 "id-smime-mod-cms"

	)

784 
	#NID_id_smime_mod_cms
 196

	)

785 
	#OBJ_id_smime_mod_cms
 
OBJ_id_smime_mod
,1L

	)

787 
	#SN_id_smime_mod_ess
 "id-smime-mod-ess"

	)

788 
	#NID_id_smime_mod_ess
 197

	)

789 
	#OBJ_id_smime_mod_ess
 
OBJ_id_smime_mod
,2L

	)

791 
	#SN_id_smime_mod_oid
 "id-smime-mod-oid"

	)

792 
	#NID_id_smime_mod_oid
 198

	)

793 
	#OBJ_id_smime_mod_oid
 
OBJ_id_smime_mod
,3L

	)

795 
	#SN_id_smime_mod_msg_v3
 "id-smime-mod-msg-v3"

	)

796 
	#NID_id_smime_mod_msg_v3
 199

	)

797 
	#OBJ_id_smime_mod_msg_v3
 
OBJ_id_smime_mod
,4L

	)

799 
	#SN_id_smime_mod_ës_eSig«tuª_88
 "id-smime-mod-ës-eSig«tuª-88"

	)

800 
	#NID_id_smime_mod_ës_eSig«tuª_88
 200

	)

801 
	#OBJ_id_smime_mod_ës_eSig«tuª_88
 
OBJ_id_smime_mod
,5L

	)

803 
	#SN_id_smime_mod_ës_eSig«tuª_97
 "id-smime-mod-ës-eSig«tuª-97"

	)

804 
	#NID_id_smime_mod_ës_eSig«tuª_97
 201

	)

805 
	#OBJ_id_smime_mod_ës_eSig«tuª_97
 
OBJ_id_smime_mod
,6L

	)

807 
	#SN_id_smime_mod_ës_eSigPﬁicy_88
 "id-smime-mod-ës-eSigPﬁicy-88"

	)

808 
	#NID_id_smime_mod_ës_eSigPﬁicy_88
 202

	)

809 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_88
 
OBJ_id_smime_mod
,7L

	)

811 
	#SN_id_smime_mod_ës_eSigPﬁicy_97
 "id-smime-mod-ës-eSigPﬁicy-97"

	)

812 
	#NID_id_smime_mod_ës_eSigPﬁicy_97
 203

	)

813 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_97
 
OBJ_id_smime_mod
,8L

	)

815 
	#SN_id_smime_˘_ª˚ùt
 "id-smime-˘-ª˚ùt"

	)

816 
	#NID_id_smime_˘_ª˚ùt
 204

	)

817 
	#OBJ_id_smime_˘_ª˚ùt
 
OBJ_id_smime_˘
,1L

	)

819 
	#SN_id_smime_˘_authD©a
 "id-smime-˘-authD©a"

	)

820 
	#NID_id_smime_˘_authD©a
 205

	)

821 
	#OBJ_id_smime_˘_authD©a
 
OBJ_id_smime_˘
,2L

	)

823 
	#SN_id_smime_˘_publishCît
 "id-smime-˘-publishCît"

	)

824 
	#NID_id_smime_˘_publishCît
 206

	)

825 
	#OBJ_id_smime_˘_publishCît
 
OBJ_id_smime_˘
,3L

	)

827 
	#SN_id_smime_˘_TSTInfo
 "id-smime-˘-TSTInfo"

	)

828 
	#NID_id_smime_˘_TSTInfo
 207

	)

829 
	#OBJ_id_smime_˘_TSTInfo
 
OBJ_id_smime_˘
,4L

	)

831 
	#SN_id_smime_˘_TDTInfo
 "id-smime-˘-TDTInfo"

	)

832 
	#NID_id_smime_˘_TDTInfo
 208

	)

833 
	#OBJ_id_smime_˘_TDTInfo
 
OBJ_id_smime_˘
,5L

	)

835 
	#SN_id_smime_˘_c⁄ã¡Info
 "id-smime-˘-c⁄ã¡Info"

	)

836 
	#NID_id_smime_˘_c⁄ã¡Info
 209

	)

837 
	#OBJ_id_smime_˘_c⁄ã¡Info
 
OBJ_id_smime_˘
,6L

	)

839 
	#SN_id_smime_˘_DVCSReque°D©a
 "id-smime-˘-DVCSReque°D©a"

	)

840 
	#NID_id_smime_˘_DVCSReque°D©a
 210

	)

841 
	#OBJ_id_smime_˘_DVCSReque°D©a
 
OBJ_id_smime_˘
,7L

	)

843 
	#SN_id_smime_˘_DVCSRe•⁄£D©a
 "id-smime-˘-DVCSRe•⁄£D©a"

	)

844 
	#NID_id_smime_˘_DVCSRe•⁄£D©a
 211

	)

845 
	#OBJ_id_smime_˘_DVCSRe•⁄£D©a
 
OBJ_id_smime_˘
,8L

	)

847 
	#SN_id_smime_˘_com¥es£dD©a
 "id-smime-˘-com¥es£dD©a"

	)

848 
	#NID_id_smime_˘_com¥es£dD©a
 786

	)

849 
	#OBJ_id_smime_˘_com¥es£dD©a
 
OBJ_id_smime_˘
,9L

	)

851 
	#SN_id_˘_asciiTextWôhCRLF
 "id-˘-asciiTextWôhCRLF"

	)

852 
	#NID_id_˘_asciiTextWôhCRLF
 787

	)

853 
	#OBJ_id_˘_asciiTextWôhCRLF
 
OBJ_id_smime_˘
,27L

	)

855 
	#SN_id_smime_Ø_ª˚ùtReque°
 "id-smime-Ø-ª˚ùtReque°"

	)

856 
	#NID_id_smime_Ø_ª˚ùtReque°
 212

	)

857 
	#OBJ_id_smime_Ø_ª˚ùtReque°
 
OBJ_id_smime_Ø
,1L

	)

859 
	#SN_id_smime_Ø_£curôyLabñ
 "id-smime-Ø-£curôyLabñ"

	)

860 
	#NID_id_smime_Ø_£curôyLabñ
 213

	)

861 
	#OBJ_id_smime_Ø_£curôyLabñ
 
OBJ_id_smime_Ø
,2L

	)

863 
	#SN_id_smime_Ø_mlEx∑ndHi°‹y
 "id-smime-Ø-mlEx∑ndHi°‹y"

	)

864 
	#NID_id_smime_Ø_mlEx∑ndHi°‹y
 214

	)

865 
	#OBJ_id_smime_Ø_mlEx∑ndHi°‹y
 
OBJ_id_smime_Ø
,3L

	)

867 
	#SN_id_smime_Ø_c⁄ã¡Höt
 "id-smime-Ø-c⁄ã¡Höt"

	)

868 
	#NID_id_smime_Ø_c⁄ã¡Höt
 215

	)

869 
	#OBJ_id_smime_Ø_c⁄ã¡Höt
 
OBJ_id_smime_Ø
,4L

	)

871 
	#SN_id_smime_Ø_msgSigDige°
 "id-smime-Ø-msgSigDige°"

	)

872 
	#NID_id_smime_Ø_msgSigDige°
 216

	)

873 
	#OBJ_id_smime_Ø_msgSigDige°
 
OBJ_id_smime_Ø
,5L

	)

875 
	#SN_id_smime_Ø_íˇpC⁄ã¡Ty≥
 "id-smime-Ø-íˇpC⁄ã¡Ty≥"

	)

876 
	#NID_id_smime_Ø_íˇpC⁄ã¡Ty≥
 217

	)

877 
	#OBJ_id_smime_Ø_íˇpC⁄ã¡Ty≥
 
OBJ_id_smime_Ø
,6L

	)

879 
	#SN_id_smime_Ø_c⁄ã¡Idítifõr
 "id-smime-Ø-c⁄ã¡Idítifõr"

	)

880 
	#NID_id_smime_Ø_c⁄ã¡Idítifõr
 218

	)

881 
	#OBJ_id_smime_Ø_c⁄ã¡Idítifõr
 
OBJ_id_smime_Ø
,7L

	)

883 
	#SN_id_smime_Ø_macVÆue
 "id-smime-Ø-macVÆue"

	)

884 
	#NID_id_smime_Ø_macVÆue
 219

	)

885 
	#OBJ_id_smime_Ø_macVÆue
 
OBJ_id_smime_Ø
,8L

	)

887 
	#SN_id_smime_Ø_equivÆítLabñs
 "id-smime-Ø-equivÆítLabñs"

	)

888 
	#NID_id_smime_Ø_equivÆítLabñs
 220

	)

889 
	#OBJ_id_smime_Ø_equivÆítLabñs
 
OBJ_id_smime_Ø
,9L

	)

891 
	#SN_id_smime_Ø_c⁄ã¡Re„ªn˚
 "id-smime-Ø-c⁄ã¡Re„ªn˚"

	)

892 
	#NID_id_smime_Ø_c⁄ã¡Re„ªn˚
 221

	)

893 
	#OBJ_id_smime_Ø_c⁄ã¡Re„ªn˚
 
OBJ_id_smime_Ø
,10L

	)

895 
	#SN_id_smime_Ø_í¸ypKeyPªf
 "id-smime-Ø-í¸ypKeyPªf"

	)

896 
	#NID_id_smime_Ø_í¸ypKeyPªf
 222

	)

897 
	#OBJ_id_smime_Ø_í¸ypKeyPªf
 
OBJ_id_smime_Ø
,11L

	)

899 
	#SN_id_smime_Ø_signögCîtifiˇã
 "id-smime-Ø-signögCîtifiˇã"

	)

900 
	#NID_id_smime_Ø_signögCîtifiˇã
 223

	)

901 
	#OBJ_id_smime_Ø_signögCîtifiˇã
 
OBJ_id_smime_Ø
,12L

	)

903 
	#SN_id_smime_Ø_smimeEn¸y±Cîts
 "id-smime-Ø-smimeEn¸y±Cîts"

	)

904 
	#NID_id_smime_Ø_smimeEn¸y±Cîts
 224

	)

905 
	#OBJ_id_smime_Ø_smimeEn¸y±Cîts
 
OBJ_id_smime_Ø
,13L

	)

907 
	#SN_id_smime_Ø_timeSèmpTokí
 "id-smime-Ø-timeSèmpTokí"

	)

908 
	#NID_id_smime_Ø_timeSèmpTokí
 225

	)

909 
	#OBJ_id_smime_Ø_timeSèmpTokí
 
OBJ_id_smime_Ø
,14L

	)

911 
	#SN_id_smime_Ø_ës_sigPﬁicyId
 "id-smime-Ø-ës-sigPﬁicyId"

	)

912 
	#NID_id_smime_Ø_ës_sigPﬁicyId
 226

	)

913 
	#OBJ_id_smime_Ø_ës_sigPﬁicyId
 
OBJ_id_smime_Ø
,15L

	)

915 
	#SN_id_smime_Ø_ës_commômítTy≥
 "id-smime-Ø-ës-commômítTy≥"

	)

916 
	#NID_id_smime_Ø_ës_commômítTy≥
 227

	)

917 
	#OBJ_id_smime_Ø_ës_commômítTy≥
 
OBJ_id_smime_Ø
,16L

	)

919 
	#SN_id_smime_Ø_ës_sig√rLoˇti⁄
 "id-smime-Ø-ës-sig√rLoˇti⁄"

	)

920 
	#NID_id_smime_Ø_ës_sig√rLoˇti⁄
 228

	)

921 
	#OBJ_id_smime_Ø_ës_sig√rLoˇti⁄
 
OBJ_id_smime_Ø
,17L

	)

923 
	#SN_id_smime_Ø_ës_sig√rAâr
 "id-smime-Ø-ës-sig√rAâr"

	)

924 
	#NID_id_smime_Ø_ës_sig√rAâr
 229

	)

925 
	#OBJ_id_smime_Ø_ës_sig√rAâr
 
OBJ_id_smime_Ø
,18L

	)

927 
	#SN_id_smime_Ø_ës_ŸhîSigCît
 "id-smime-Ø-ës-ŸhîSigCît"

	)

928 
	#NID_id_smime_Ø_ës_ŸhîSigCît
 230

	)

929 
	#OBJ_id_smime_Ø_ës_ŸhîSigCît
 
OBJ_id_smime_Ø
,19L

	)

931 
	#SN_id_smime_Ø_ës_c⁄ã¡Time°amp
 "id-smime-Ø-ës-c⁄ã¡Time°amp"

	)

932 
	#NID_id_smime_Ø_ës_c⁄ã¡Time°amp
 231

	)

933 
	#OBJ_id_smime_Ø_ës_c⁄ã¡Time°amp
 
OBJ_id_smime_Ø
,20L

	)

935 
	#SN_id_smime_Ø_ës_CîtifiˇãRefs
 "id-smime-Ø-ës-CîtifiˇãRefs"

	)

936 
	#NID_id_smime_Ø_ës_CîtifiˇãRefs
 232

	)

937 
	#OBJ_id_smime_Ø_ës_CîtifiˇãRefs
 
OBJ_id_smime_Ø
,21L

	)

939 
	#SN_id_smime_Ø_ës_Revoˇti⁄Refs
 "id-smime-Ø-ës-Revoˇti⁄Refs"

	)

940 
	#NID_id_smime_Ø_ës_Revoˇti⁄Refs
 233

	)

941 
	#OBJ_id_smime_Ø_ës_Revoˇti⁄Refs
 
OBJ_id_smime_Ø
,22L

	)

943 
	#SN_id_smime_Ø_ës_˚πVÆues
 "id-smime-Ø-ës-˚πVÆues"

	)

944 
	#NID_id_smime_Ø_ës_˚πVÆues
 234

	)

945 
	#OBJ_id_smime_Ø_ës_˚πVÆues
 
OBJ_id_smime_Ø
,23L

	)

947 
	#SN_id_smime_Ø_ës_ªvoˇti⁄VÆues
 "id-smime-Ø-ës-ªvoˇti⁄VÆues"

	)

948 
	#NID_id_smime_Ø_ës_ªvoˇti⁄VÆues
 235

	)

949 
	#OBJ_id_smime_Ø_ës_ªvoˇti⁄VÆues
 
OBJ_id_smime_Ø
,24L

	)

951 
	#SN_id_smime_Ø_ës_escTimeSèmp
 "id-smime-Ø-ës-escTimeSèmp"

	)

952 
	#NID_id_smime_Ø_ës_escTimeSèmp
 236

	)

953 
	#OBJ_id_smime_Ø_ës_escTimeSèmp
 
OBJ_id_smime_Ø
,25L

	)

955 
	#SN_id_smime_Ø_ës_˚πCRLTime°amp
 "id-smime-Ø-ës-˚πCRLTime°amp"

	)

956 
	#NID_id_smime_Ø_ës_˚πCRLTime°amp
 237

	)

957 
	#OBJ_id_smime_Ø_ës_˚πCRLTime°amp
 
OBJ_id_smime_Ø
,26L

	)

959 
	#SN_id_smime_Ø_ës_¨chiveTimeSèmp
 "id-smime-Ø-ës-¨chiveTimeSèmp"

	)

960 
	#NID_id_smime_Ø_ës_¨chiveTimeSèmp
 238

	)

961 
	#OBJ_id_smime_Ø_ës_¨chiveTimeSèmp
 
OBJ_id_smime_Ø
,27L

	)

963 
	#SN_id_smime_Ø_sig«tuªTy≥
 "id-smime-Ø-sig«tuªTy≥"

	)

964 
	#NID_id_smime_Ø_sig«tuªTy≥
 239

	)

965 
	#OBJ_id_smime_Ø_sig«tuªTy≥
 
OBJ_id_smime_Ø
,28L

	)

967 
	#SN_id_smime_Ø_dvcs_dvc
 "id-smime-Ø-dvcs-dvc"

	)

968 
	#NID_id_smime_Ø_dvcs_dvc
 240

	)

969 
	#OBJ_id_smime_Ø_dvcs_dvc
 
OBJ_id_smime_Ø
,29L

	)

971 
	#SN_id_smime_Æg_ESDHwôh3DES
 "id-smime-Æg-ESDHwôh3DES"

	)

972 
	#NID_id_smime_Æg_ESDHwôh3DES
 241

	)

973 
	#OBJ_id_smime_Æg_ESDHwôh3DES
 
OBJ_id_smime_Æg
,1L

	)

975 
	#SN_id_smime_Æg_ESDHwôhRC2
 "id-smime-Æg-ESDHwôhRC2"

	)

976 
	#NID_id_smime_Æg_ESDHwôhRC2
 242

	)

977 
	#OBJ_id_smime_Æg_ESDHwôhRC2
 
OBJ_id_smime_Æg
,2L

	)

979 
	#SN_id_smime_Æg_3DESwøp
 "id-smime-Æg-3DESwøp"

	)

980 
	#NID_id_smime_Æg_3DESwøp
 243

	)

981 
	#OBJ_id_smime_Æg_3DESwøp
 
OBJ_id_smime_Æg
,3L

	)

983 
	#SN_id_smime_Æg_RC2wøp
 "id-smime-Æg-RC2wøp"

	)

984 
	#NID_id_smime_Æg_RC2wøp
 244

	)

985 
	#OBJ_id_smime_Æg_RC2wøp
 
OBJ_id_smime_Æg
,4L

	)

987 
	#SN_id_smime_Æg_ESDH
 "id-smime-Æg-ESDH"

	)

988 
	#NID_id_smime_Æg_ESDH
 245

	)

989 
	#OBJ_id_smime_Æg_ESDH
 
OBJ_id_smime_Æg
,5L

	)

991 
	#SN_id_smime_Æg_CMS3DESwøp
 "id-smime-Æg-CMS3DESwøp"

	)

992 
	#NID_id_smime_Æg_CMS3DESwøp
 246

	)

993 
	#OBJ_id_smime_Æg_CMS3DESwøp
 
OBJ_id_smime_Æg
,6L

	)

995 
	#SN_id_smime_Æg_CMSRC2wøp
 "id-smime-Æg-CMSRC2wøp"

	)

996 
	#NID_id_smime_Æg_CMSRC2wøp
 247

	)

997 
	#OBJ_id_smime_Æg_CMSRC2wøp
 
OBJ_id_smime_Æg
,7L

	)

999 
	#SN_id_Æg_PWRI_KEK
 "id-Æg-PWRI-KEK"

	)

1000 
	#NID_id_Æg_PWRI_KEK
 893

	)

1001 
	#OBJ_id_Æg_PWRI_KEK
 
OBJ_id_smime_Æg
,9L

	)

1003 
	#SN_id_smime_cd_ld≠
 "id-smime-cd-ld≠"

	)

1004 
	#NID_id_smime_cd_ld≠
 248

	)

1005 
	#OBJ_id_smime_cd_ld≠
 
OBJ_id_smime_cd
,1L

	)

1007 
	#SN_id_smime_•q_ës_sqt_uri
 "id-smime-•q-ës-sqt-uri"

	)

1008 
	#NID_id_smime_•q_ës_sqt_uri
 249

	)

1009 
	#OBJ_id_smime_•q_ës_sqt_uri
 
OBJ_id_smime_•q
,1L

	)

1011 
	#SN_id_smime_•q_ës_sqt_unŸi˚
 "id-smime-•q-ës-sqt-unŸi˚"

	)

1012 
	#NID_id_smime_•q_ës_sqt_unŸi˚
 250

	)

1013 
	#OBJ_id_smime_•q_ës_sqt_unŸi˚
 
OBJ_id_smime_•q
,2L

	)

1015 
	#SN_id_smime_˘i_ës_¥oofOfOrigö
 "id-smime-˘i-ës-¥oofOfOrigö"

	)

1016 
	#NID_id_smime_˘i_ës_¥oofOfOrigö
 251

	)

1017 
	#OBJ_id_smime_˘i_ës_¥oofOfOrigö
 
OBJ_id_smime_˘i
,1L

	)

1019 
	#SN_id_smime_˘i_ës_¥oofOfRe˚ùt
 "id-smime-˘i-ës-¥oofOfRe˚ùt"

	)

1020 
	#NID_id_smime_˘i_ës_¥oofOfRe˚ùt
 252

	)

1021 
	#OBJ_id_smime_˘i_ës_¥oofOfRe˚ùt
 
OBJ_id_smime_˘i
,2L

	)

1023 
	#SN_id_smime_˘i_ës_¥oofOfDñivîy
 "id-smime-˘i-ës-¥oofOfDñivîy"

	)

1024 
	#NID_id_smime_˘i_ës_¥oofOfDñivîy
 253

	)

1025 
	#OBJ_id_smime_˘i_ës_¥oofOfDñivîy
 
OBJ_id_smime_˘i
,3L

	)

1027 
	#SN_id_smime_˘i_ës_¥oofOfSídî
 "id-smime-˘i-ës-¥oofOfSídî"

	)

1028 
	#NID_id_smime_˘i_ës_¥oofOfSídî
 254

	)

1029 
	#OBJ_id_smime_˘i_ës_¥oofOfSídî
 
OBJ_id_smime_˘i
,4L

	)

1031 
	#SN_id_smime_˘i_ës_¥oofOfAµrovÆ
 "id-smime-˘i-ës-¥oofOfAµrovÆ"

	)

1032 
	#NID_id_smime_˘i_ës_¥oofOfAµrovÆ
 255

	)

1033 
	#OBJ_id_smime_˘i_ës_¥oofOfAµrovÆ
 
OBJ_id_smime_˘i
,5L

	)

1035 
	#SN_id_smime_˘i_ës_¥oofOfCª©i⁄
 "id-smime-˘i-ës-¥oofOfCª©i⁄"

	)

1036 
	#NID_id_smime_˘i_ës_¥oofOfCª©i⁄
 256

	)

1037 
	#OBJ_id_smime_˘i_ës_¥oofOfCª©i⁄
 
OBJ_id_smime_˘i
,6L

	)

1039 
	#LN_‰õndlyName
 "‰õndlyName"

	)

1040 
	#NID_‰õndlyName
 156

	)

1041 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
,20L

	)

1043 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

1044 
	#NID_loˇlKeyID
 157

	)

1045 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
,21L

	)

1047 
	#SN_ms_c•_«me
 "CSPName"

	)

1048 
	#LN_ms_c•_«me
 "Mi¸oso· CSP Name"

	)

1049 
	#NID_ms_c•_«me
 417

	)

1050 
	#OBJ_ms_c•_«me
 1L,3L,6L,1L,4L,1L,311L,17L,1L

	)

1052 
	#SN_LoˇlKeySë
 "LoˇlKeySë"

	)

1053 
	#LN_LoˇlKeySë
 "Mi¸oso· Loˇ»Key së"

	)

1054 
	#NID_LoˇlKeySë
 856

	)

1055 
	#OBJ_LoˇlKeySë
 1L,3L,6L,1L,4L,1L,311L,17L,2L

	)

1057 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
,22L

	)

1059 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

1060 
	#NID_x509Cîtifiˇã
 158

	)

1061 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
,1L

	)

1063 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

1064 
	#NID_sdsiCîtifiˇã
 159

	)

1065 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
,2L

	)

1067 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
,23L

	)

1069 
	#LN_x509Cæ
 "x509Cæ"

	)

1070 
	#NID_x509Cæ
 160

	)

1071 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
,1L

	)

1073 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

1075 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
,1L

	)

1077 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

1078 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

1079 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

1080 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
,1L

	)

1082 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

1083 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

1084 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

1085 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
,2L

	)

1087 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

1088 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

1089 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

1090 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,3L

	)

1092 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

1093 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

1094 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

1095 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,4L

	)

1097 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

1098 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

1099 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

1100 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
,5L

	)

1102 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

1103 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

1104 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

1105 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
,6L

	)

1107 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
,10L

	)

1109 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
,1L

	)

1111 
	#LN_keyBag
 "keyBag"

	)

1112 
	#NID_keyBag
 150

	)

1113 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
,1L

	)

1115 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

1116 
	#NID_pkcs8ShroudedKeyBag
 151

	)

1117 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
,2L

	)

1119 
	#LN_˚πBag
 "˚πBag"

	)

1120 
	#NID_˚πBag
 152

	)

1121 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
,3L

	)

1123 
	#LN_¸lBag
 "¸lBag"

	)

1124 
	#NID_¸lBag
 153

	)

1125 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
,4L

	)

1127 
	#LN_£¸ëBag
 "£¸ëBag"

	)

1128 
	#NID_£¸ëBag
 154

	)

1129 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
,5L

	)

1131 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

1132 
	#NID_ß„C⁄ã¡sBag
 155

	)

1133 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
,6L

	)

1135 
	#SN_md2
 "MD2"

	)

1136 
	#LN_md2
 "md2"

	)

1137 
	#NID_md2
 3

	)

1138 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

1140 
	#SN_md4
 "MD4"

	)

1141 
	#LN_md4
 "md4"

	)

1142 
	#NID_md4
 257

	)

1143 
	#OBJ_md4
 
OBJ_rßdsi
,2L,4L

	)

1145 
	#SN_md5
 "MD5"

	)

1146 
	#LN_md5
 "md5"

	)

1147 
	#NID_md5
 4

	)

1148 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

1150 
	#SN_md5_sha1
 "MD5-SHA1"

	)

1151 
	#LN_md5_sha1
 "md5-sha1"

	)

1152 
	#NID_md5_sha1
 114

	)

1154 
	#LN_hmacWôhMD5
 "hmacWôhMD5"

	)

1155 
	#NID_hmacWôhMD5
 797

	)

1156 
	#OBJ_hmacWôhMD5
 
OBJ_rßdsi
,2L,6L

	)

1158 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

1159 
	#NID_hmacWôhSHA1
 163

	)

1160 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

1162 
	#LN_hmacWôhSHA224
 "hmacWôhSHA224"

	)

1163 
	#NID_hmacWôhSHA224
 798

	)

1164 
	#OBJ_hmacWôhSHA224
 
OBJ_rßdsi
,2L,8L

	)

1166 
	#LN_hmacWôhSHA256
 "hmacWôhSHA256"

	)

1167 
	#NID_hmacWôhSHA256
 799

	)

1168 
	#OBJ_hmacWôhSHA256
 
OBJ_rßdsi
,2L,9L

	)

1170 
	#LN_hmacWôhSHA384
 "hmacWôhSHA384"

	)

1171 
	#NID_hmacWôhSHA384
 800

	)

1172 
	#OBJ_hmacWôhSHA384
 
OBJ_rßdsi
,2L,10L

	)

1174 
	#LN_hmacWôhSHA512
 "hmacWôhSHA512"

	)

1175 
	#NID_hmacWôhSHA512
 801

	)

1176 
	#OBJ_hmacWôhSHA512
 
OBJ_rßdsi
,2L,11L

	)

1178 
	#SN_rc2_cbc
 "RC2-CBC"

	)

1179 
	#LN_rc2_cbc
 "rc2-cbc"

	)

1180 
	#NID_rc2_cbc
 37

	)

1181 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

1183 
	#SN_rc2_ecb
 "RC2-ECB"

	)

1184 
	#LN_rc2_ecb
 "rc2-ecb"

	)

1185 
	#NID_rc2_ecb
 38

	)

1187 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

1188 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

1189 
	#NID_rc2_cfb64
 39

	)

1191 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

1192 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

1193 
	#NID_rc2_ofb64
 40

	)

1195 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

1196 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

1197 
	#NID_rc2_40_cbc
 98

	)

1199 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

1200 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

1201 
	#NID_rc2_64_cbc
 166

	)

1203 
	#SN_rc4
 "RC4"

	)

1204 
	#LN_rc4
 "rc4"

	)

1205 
	#NID_rc4
 5

	)

1206 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

1208 
	#SN_rc4_40
 "RC4-40"

	)

1209 
	#LN_rc4_40
 "rc4-40"

	)

1210 
	#NID_rc4_40
 97

	)

1212 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

1213 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

1214 
	#NID_des_ede3_cbc
 44

	)

1215 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

1217 
	#SN_rc5_cbc
 "RC5-CBC"

	)

1218 
	#LN_rc5_cbc
 "rc5-cbc"

	)

1219 
	#NID_rc5_cbc
 120

	)

1220 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

1222 
	#SN_rc5_ecb
 "RC5-ECB"

	)

1223 
	#LN_rc5_ecb
 "rc5-ecb"

	)

1224 
	#NID_rc5_ecb
 121

	)

1226 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

1227 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

1228 
	#NID_rc5_cfb64
 122

	)

1230 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

1231 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

1232 
	#NID_rc5_ofb64
 123

	)

1234 
	#SN_ms_ext_ªq
 "msExtReq"

	)

1235 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

1236 
	#NID_ms_ext_ªq
 171

	)

1237 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

1239 
	#SN_ms_code_öd
 "msCodeInd"

	)

1240 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

1241 
	#NID_ms_code_öd
 134

	)

1242 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

1244 
	#SN_ms_code_com
 "msCodeCom"

	)

1245 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

1246 
	#NID_ms_code_com
 135

	)

1247 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

1249 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

1250 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

1251 
	#NID_ms_˘l_sign
 136

	)

1252 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

1254 
	#SN_ms_sgc
 "msSGC"

	)

1255 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

1256 
	#NID_ms_sgc
 137

	)

1257 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

1259 
	#SN_ms_efs
 "msEFS"

	)

1260 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

1261 
	#NID_ms_efs
 138

	)

1262 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

1264 
	#SN_ms_sm¨tˇrd_logö
 "msSm¨tˇrdLogö"

	)

1265 
	#LN_ms_sm¨tˇrd_logö
 "Mi¸oso· Sm¨tˇrdlogö"

	)

1266 
	#NID_ms_sm¨tˇrd_logö
 648

	)

1267 
	#OBJ_ms_sm¨tˇrd_logö
 1L,3L,6L,1L,4L,1L,311L,20L,2L,2L

	)

1269 
	#SN_ms_u≤
 "msUPN"

	)

1270 
	#LN_ms_u≤
 "Mi¸oso· Univîß»PröcùÆ Name"

	)

1271 
	#NID_ms_u≤
 649

	)

1272 
	#OBJ_ms_u≤
 1L,3L,6L,1L,4L,1L,311L,20L,2L,3L

	)

1274 
	#SN_idó_cbc
 "IDEA-CBC"

	)

1275 
	#LN_idó_cbc
 "idó-cbc"

	)

1276 
	#NID_idó_cbc
 34

	)

1277 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

1279 
	#SN_idó_ecb
 "IDEA-ECB"

	)

1280 
	#LN_idó_ecb
 "idó-ecb"

	)

1281 
	#NID_idó_ecb
 36

	)

1283 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

1284 
	#LN_idó_cfb64
 "idó-cfb"

	)

1285 
	#NID_idó_cfb64
 35

	)

1287 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

1288 
	#LN_idó_ofb64
 "idó-ofb"

	)

1289 
	#NID_idó_ofb64
 46

	)

1291 
	#SN_bf_cbc
 "BF-CBC"

	)

1292 
	#LN_bf_cbc
 "bf-cbc"

	)

1293 
	#NID_bf_cbc
 91

	)

1294 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

1296 
	#SN_bf_ecb
 "BF-ECB"

	)

1297 
	#LN_bf_ecb
 "bf-ecb"

	)

1298 
	#NID_bf_ecb
 92

	)

1300 
	#SN_bf_cfb64
 "BF-CFB"

	)

1301 
	#LN_bf_cfb64
 "bf-cfb"

	)

1302 
	#NID_bf_cfb64
 93

	)

1304 
	#SN_bf_ofb64
 "BF-OFB"

	)

1305 
	#LN_bf_ofb64
 "bf-ofb"

	)

1306 
	#NID_bf_ofb64
 94

	)

1308 
	#SN_id_pkix
 "PKIX"

	)

1309 
	#NID_id_pkix
 127

	)

1310 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

1312 
	#SN_id_pkix_mod
 "id-pkix-mod"

	)

1313 
	#NID_id_pkix_mod
 258

	)

1314 
	#OBJ_id_pkix_mod
 
OBJ_id_pkix
,0L

	)

1316 
	#SN_id_≥
 "id-≥"

	)

1317 
	#NID_id_≥
 175

	)

1318 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

1320 
	#SN_id_qt
 "id-qt"

	)

1321 
	#NID_id_qt
 259

	)

1322 
	#OBJ_id_qt
 
OBJ_id_pkix
,2L

	)

1324 
	#SN_id_kp
 "id-kp"

	)

1325 
	#NID_id_kp
 128

	)

1326 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

1328 
	#SN_id_ô
 "id-ô"

	)

1329 
	#NID_id_ô
 260

	)

1330 
	#OBJ_id_ô
 
OBJ_id_pkix
,4L

	)

1332 
	#SN_id_pkù
 "id-pkù"

	)

1333 
	#NID_id_pkù
 261

	)

1334 
	#OBJ_id_pkù
 
OBJ_id_pkix
,5L

	)

1336 
	#SN_id_Æg
 "id-Æg"

	)

1337 
	#NID_id_Æg
 262

	)

1338 
	#OBJ_id_Æg
 
OBJ_id_pkix
,6L

	)

1340 
	#SN_id_cmc
 "id-cmc"

	)

1341 
	#NID_id_cmc
 263

	)

1342 
	#OBJ_id_cmc
 
OBJ_id_pkix
,7L

	)

1344 
	#SN_id_⁄
 "id-⁄"

	)

1345 
	#NID_id_⁄
 264

	)

1346 
	#OBJ_id_⁄
 
OBJ_id_pkix
,8L

	)

1348 
	#SN_id_pda
 "id-pda"

	)

1349 
	#NID_id_pda
 265

	)

1350 
	#OBJ_id_pda
 
OBJ_id_pkix
,9L

	)

1352 
	#SN_id_aˇ
 "id-aˇ"

	)

1353 
	#NID_id_aˇ
 266

	)

1354 
	#OBJ_id_aˇ
 
OBJ_id_pkix
,10L

	)

1356 
	#SN_id_qcs
 "id-qcs"

	)

1357 
	#NID_id_qcs
 267

	)

1358 
	#OBJ_id_qcs
 
OBJ_id_pkix
,11L

	)

1360 
	#SN_id_c˘
 "id-c˘"

	)

1361 
	#NID_id_c˘
 268

	)

1362 
	#OBJ_id_c˘
 
OBJ_id_pkix
,12L

	)

1364 
	#SN_id_µl
 "id-µl"

	)

1365 
	#NID_id_µl
 662

	)

1366 
	#OBJ_id_µl
 
OBJ_id_pkix
,21L

	)

1368 
	#SN_id_ad
 "id-ad"

	)

1369 
	#NID_id_ad
 176

	)

1370 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

1372 
	#SN_id_pkix1_ex∂icô_88
 "id-pkix1-ex∂icô-88"

	)

1373 
	#NID_id_pkix1_ex∂icô_88
 269

	)

1374 
	#OBJ_id_pkix1_ex∂icô_88
 
OBJ_id_pkix_mod
,1L

	)

1376 
	#SN_id_pkix1_im∂icô_88
 "id-pkix1-im∂icô-88"

	)

1377 
	#NID_id_pkix1_im∂icô_88
 270

	)

1378 
	#OBJ_id_pkix1_im∂icô_88
 
OBJ_id_pkix_mod
,2L

	)

1380 
	#SN_id_pkix1_ex∂icô_93
 "id-pkix1-ex∂icô-93"

	)

1381 
	#NID_id_pkix1_ex∂icô_93
 271

	)

1382 
	#OBJ_id_pkix1_ex∂icô_93
 
OBJ_id_pkix_mod
,3L

	)

1384 
	#SN_id_pkix1_im∂icô_93
 "id-pkix1-im∂icô-93"

	)

1385 
	#NID_id_pkix1_im∂icô_93
 272

	)

1386 
	#OBJ_id_pkix1_im∂icô_93
 
OBJ_id_pkix_mod
,4L

	)

1388 
	#SN_id_mod_¸mf
 "id-mod-¸mf"

	)

1389 
	#NID_id_mod_¸mf
 273

	)

1390 
	#OBJ_id_mod_¸mf
 
OBJ_id_pkix_mod
,5L

	)

1392 
	#SN_id_mod_cmc
 "id-mod-cmc"

	)

1393 
	#NID_id_mod_cmc
 274

	)

1394 
	#OBJ_id_mod_cmc
 
OBJ_id_pkix_mod
,6L

	)

1396 
	#SN_id_mod_kó_¥ofûe_88
 "id-mod-kó-¥ofûe-88"

	)

1397 
	#NID_id_mod_kó_¥ofûe_88
 275

	)

1398 
	#OBJ_id_mod_kó_¥ofûe_88
 
OBJ_id_pkix_mod
,7L

	)

1400 
	#SN_id_mod_kó_¥ofûe_93
 "id-mod-kó-¥ofûe-93"

	)

1401 
	#NID_id_mod_kó_¥ofûe_93
 276

	)

1402 
	#OBJ_id_mod_kó_¥ofûe_93
 
OBJ_id_pkix_mod
,8L

	)

1404 
	#SN_id_mod_cmp
 "id-mod-cmp"

	)

1405 
	#NID_id_mod_cmp
 277

	)

1406 
	#OBJ_id_mod_cmp
 
OBJ_id_pkix_mod
,9L

	)

1408 
	#SN_id_mod_quÆifõd_˚π_88
 "id-mod-quÆifõd-˚π-88"

	)

1409 
	#NID_id_mod_quÆifõd_˚π_88
 278

	)

1410 
	#OBJ_id_mod_quÆifõd_˚π_88
 
OBJ_id_pkix_mod
,10L

	)

1412 
	#SN_id_mod_quÆifõd_˚π_93
 "id-mod-quÆifõd-˚π-93"

	)

1413 
	#NID_id_mod_quÆifõd_˚π_93
 279

	)

1414 
	#OBJ_id_mod_quÆifõd_˚π_93
 
OBJ_id_pkix_mod
,11L

	)

1416 
	#SN_id_mod_©åibuã_˚π
 "id-mod-©åibuã-˚π"

	)

1417 
	#NID_id_mod_©åibuã_˚π
 280

	)

1418 
	#OBJ_id_mod_©åibuã_˚π
 
OBJ_id_pkix_mod
,12L

	)

1420 
	#SN_id_mod_time°amp_¥Ÿocﬁ
 "id-mod-time°amp-¥Ÿocﬁ"

	)

1421 
	#NID_id_mod_time°amp_¥Ÿocﬁ
 281

	)

1422 
	#OBJ_id_mod_time°amp_¥Ÿocﬁ
 
OBJ_id_pkix_mod
,13L

	)

1424 
	#SN_id_mod_oc•
 "id-mod-oc•"

	)

1425 
	#NID_id_mod_oc•
 282

	)

1426 
	#OBJ_id_mod_oc•
 
OBJ_id_pkix_mod
,14L

	)

1428 
	#SN_id_mod_dvcs
 "id-mod-dvcs"

	)

1429 
	#NID_id_mod_dvcs
 283

	)

1430 
	#OBJ_id_mod_dvcs
 
OBJ_id_pkix_mod
,15L

	)

1432 
	#SN_id_mod_cmp2000
 "id-mod-cmp2000"

	)

1433 
	#NID_id_mod_cmp2000
 284

	)

1434 
	#OBJ_id_mod_cmp2000
 
OBJ_id_pkix_mod
,16L

	)

1436 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

1437 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

1438 
	#NID_öfo_ac˚ss
 177

	)

1439 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

1441 
	#SN_biomëricInfo
 "biomëricInfo"

	)

1442 
	#LN_biomëricInfo
 "Biomëri¯Info"

	)

1443 
	#NID_biomëricInfo
 285

	)

1444 
	#OBJ_biomëricInfo
 
OBJ_id_≥
,2L

	)

1446 
	#SN_qcSèãmíts
 "qcSèãmíts"

	)

1447 
	#NID_qcSèãmíts
 286

	)

1448 
	#OBJ_qcSèãmíts
 
OBJ_id_≥
,3L

	)

1450 
	#SN_ac_audôE¡ôy
 "ac-audôE¡ôy"

	)

1451 
	#NID_ac_audôE¡ôy
 287

	)

1452 
	#OBJ_ac_audôE¡ôy
 
OBJ_id_≥
,4L

	)

1454 
	#SN_ac_èrgëög
 "ac-èrgëög"

	)

1455 
	#NID_ac_èrgëög
 288

	)

1456 
	#OBJ_ac_èrgëög
 
OBJ_id_≥
,5L

	)

1458 
	#SN_ØC⁄åﬁs
 "ØC⁄åﬁs"

	)

1459 
	#NID_ØC⁄åﬁs
 289

	)

1460 
	#OBJ_ØC⁄åﬁs
 
OBJ_id_≥
,6L

	)

1462 
	#SN_sbgp_ùAddrBlock
 "sbgp-ùAddrBlock"

	)

1463 
	#NID_sbgp_ùAddrBlock
 290

	)

1464 
	#OBJ_sbgp_ùAddrBlock
 
OBJ_id_≥
,7L

	)

1466 
	#SN_sbgp_aut⁄omousSysNum
 "sbgp-aut⁄omousSysNum"

	)

1467 
	#NID_sbgp_aut⁄omousSysNum
 291

	)

1468 
	#OBJ_sbgp_aut⁄omousSysNum
 
OBJ_id_≥
,8L

	)

1470 
	#SN_sbgp_rouãrIdítifõr
 "sbgp-rouãrIdítifõr"

	)

1471 
	#NID_sbgp_rouãrIdítifõr
 292

	)

1472 
	#OBJ_sbgp_rouãrIdítifõr
 
OBJ_id_≥
,9L

	)

1474 
	#SN_ac_¥oxyög
 "ac-¥oxyög"

	)

1475 
	#NID_ac_¥oxyög
 397

	)

1476 
	#OBJ_ac_¥oxyög
 
OBJ_id_≥
,10L

	)

1478 
	#SN_söfo_ac˚ss
 "subje˘InfoAc˚ss"

	)

1479 
	#LN_söfo_ac˚ss
 "Subje˘ Inf‹m©i⁄ Ac˚ss"

	)

1480 
	#NID_söfo_ac˚ss
 398

	)

1481 
	#OBJ_söfo_ac˚ss
 
OBJ_id_≥
,11L

	)

1483 
	#SN_¥oxyCîtInfo
 "¥oxyCîtInfo"

	)

1484 
	#LN_¥oxyCîtInfo
 "Proxy Cîtifiˇã Inf‹m©i⁄"

	)

1485 
	#NID_¥oxyCîtInfo
 663

	)

1486 
	#OBJ_¥oxyCîtInfo
 
OBJ_id_≥
,14L

	)

1488 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

1489 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

1490 
	#NID_id_qt_˝s
 164

	)

1491 
	#OBJ_id_qt_˝s
 
OBJ_id_qt
,1L

	)

1493 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

1494 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

1495 
	#NID_id_qt_unŸi˚
 165

	)

1496 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_qt
,2L

	)

1498 
	#SN_ãxtNŸi˚
 "ãxtNŸi˚"

	)

1499 
	#NID_ãxtNŸi˚
 293

	)

1500 
	#OBJ_ãxtNŸi˚
 
OBJ_id_qt
,3L

	)

1502 
	#SN_£rvî_auth
 "£rvîAuth"

	)

1503 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

1504 
	#NID_£rvî_auth
 129

	)

1505 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

1507 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

1508 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

1509 
	#NID_˛õ¡_auth
 130

	)

1510 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

1512 
	#SN_code_sign
 "codeSignög"

	)

1513 
	#LN_code_sign
 "CodêSignög"

	)

1514 
	#NID_code_sign
 131

	)

1515 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

1517 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

1518 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

1519 
	#NID_emaû_¥Ÿe˘
 132

	)

1520 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

1522 
	#SN_ù£cEndSy°em
 "ù£cEndSy°em"

	)

1523 
	#LN_ù£cEndSy°em
 "IPSe¯End Sy°em"

	)

1524 
	#NID_ù£cEndSy°em
 294

	)

1525 
	#OBJ_ù£cEndSy°em
 
OBJ_id_kp
,5L

	)

1527 
	#SN_ù£cTu¬ñ
 "ù£cTu¬ñ"

	)

1528 
	#LN_ù£cTu¬ñ
 "IPSe¯Tu¬ñ"

	)

1529 
	#NID_ù£cTu¬ñ
 295

	)

1530 
	#OBJ_ù£cTu¬ñ
 
OBJ_id_kp
,6L

	)

1532 
	#SN_ù£cU£r
 "ù£cU£r"

	)

1533 
	#LN_ù£cU£r
 "IPSe¯U£r"

	)

1534 
	#NID_ù£cU£r
 296

	)

1535 
	#OBJ_ù£cU£r
 
OBJ_id_kp
,7L

	)

1537 
	#SN_time_°amp
 "timeSèmpög"

	)

1538 
	#LN_time_°amp
 "TimêSèmpög"

	)

1539 
	#NID_time_°amp
 133

	)

1540 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

1542 
	#SN_OCSP_sign
 "OCSPSignög"

	)

1543 
	#LN_OCSP_sign
 "OCSP Signög"

	)

1544 
	#NID_OCSP_sign
 180

	)

1545 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

1547 
	#SN_dvcs
 "DVCS"

	)

1548 
	#LN_dvcs
 "dvcs"

	)

1549 
	#NID_dvcs
 297

	)

1550 
	#OBJ_dvcs
 
OBJ_id_kp
,10L

	)

1552 
	#SN_id_ô_ˇPrŸEncCît
 "id-ô-ˇPrŸEncCît"

	)

1553 
	#NID_id_ô_ˇPrŸEncCît
 298

	)

1554 
	#OBJ_id_ô_ˇPrŸEncCît
 
OBJ_id_ô
,1L

	)

1556 
	#SN_id_ô_signKeyPaúTy≥s
 "id-ô-signKeyPaúTy≥s"

	)

1557 
	#NID_id_ô_signKeyPaúTy≥s
 299

	)

1558 
	#OBJ_id_ô_signKeyPaúTy≥s
 
OBJ_id_ô
,2L

	)

1560 
	#SN_id_ô_ícKeyPaúTy≥s
 "id-ô-ícKeyPaúTy≥s"

	)

1561 
	#NID_id_ô_ícKeyPaúTy≥s
 300

	)

1562 
	#OBJ_id_ô_ícKeyPaúTy≥s
 
OBJ_id_ô
,3L

	)

1564 
	#SN_id_ô_¥e„ºedSymmAlg
 "id-ô-¥e„ºedSymmAlg"

	)

1565 
	#NID_id_ô_¥e„ºedSymmAlg
 301

	)

1566 
	#OBJ_id_ô_¥e„ºedSymmAlg
 
OBJ_id_ô
,4L

	)

1568 
	#SN_id_ô_ˇKeyUpd©eInfo
 "id-ô-ˇKeyUpd©eInfo"

	)

1569 
	#NID_id_ô_ˇKeyUpd©eInfo
 302

	)

1570 
	#OBJ_id_ô_ˇKeyUpd©eInfo
 
OBJ_id_ô
,5L

	)

1572 
	#SN_id_ô_cuºítCRL
 "id-ô-cuºítCRL"

	)

1573 
	#NID_id_ô_cuºítCRL
 303

	)

1574 
	#OBJ_id_ô_cuºítCRL
 
OBJ_id_ô
,6L

	)

1576 
	#SN_id_ô_unsuµ‹ãdOIDs
 "id-ô-unsuµ‹ãdOIDs"

	)

1577 
	#NID_id_ô_unsuµ‹ãdOIDs
 304

	)

1578 
	#OBJ_id_ô_unsuµ‹ãdOIDs
 
OBJ_id_ô
,7L

	)

1580 
	#SN_id_ô_subs¸ùti⁄Reque°
 "id-ô-subs¸ùti⁄Reque°"

	)

1581 
	#NID_id_ô_subs¸ùti⁄Reque°
 305

	)

1582 
	#OBJ_id_ô_subs¸ùti⁄Reque°
 
OBJ_id_ô
,8L

	)

1584 
	#SN_id_ô_subs¸ùti⁄Re•⁄£
 "id-ô-subs¸ùti⁄Re•⁄£"

	)

1585 
	#NID_id_ô_subs¸ùti⁄Re•⁄£
 306

	)

1586 
	#OBJ_id_ô_subs¸ùti⁄Re•⁄£
 
OBJ_id_ô
,9L

	)

1588 
	#SN_id_ô_keyPaúP¨amReq
 "id-ô-keyPaúP¨amReq"

	)

1589 
	#NID_id_ô_keyPaúP¨amReq
 307

	)

1590 
	#OBJ_id_ô_keyPaúP¨amReq
 
OBJ_id_ô
,10L

	)

1592 
	#SN_id_ô_keyPaúP¨amRï
 "id-ô-keyPaúP¨amRï"

	)

1593 
	#NID_id_ô_keyPaúP¨amRï
 308

	)

1594 
	#OBJ_id_ô_keyPaúP¨amRï
 
OBJ_id_ô
,11L

	)

1596 
	#SN_id_ô_ªvPas•hø£
 "id-ô-ªvPas•hø£"

	)

1597 
	#NID_id_ô_ªvPas•hø£
 309

	)

1598 
	#OBJ_id_ô_ªvPas•hø£
 
OBJ_id_ô
,12L

	)

1600 
	#SN_id_ô_im∂icôC⁄fúm
 "id-ô-im∂icôC⁄fúm"

	)

1601 
	#NID_id_ô_im∂icôC⁄fúm
 310

	)

1602 
	#OBJ_id_ô_im∂icôC⁄fúm
 
OBJ_id_ô
,13L

	)

1604 
	#SN_id_ô_c⁄fúmWaôTime
 "id-ô-c⁄fúmWaôTime"

	)

1605 
	#NID_id_ô_c⁄fúmWaôTime
 311

	)

1606 
	#OBJ_id_ô_c⁄fúmWaôTime
 
OBJ_id_ô
,14L

	)

1608 
	#SN_id_ô_‹igPKIMesßge
 "id-ô-‹igPKIMesßge"

	)

1609 
	#NID_id_ô_‹igPKIMesßge
 312

	)

1610 
	#OBJ_id_ô_‹igPKIMesßge
 
OBJ_id_ô
,15L

	)

1612 
	#SN_id_ô_suµL™gTags
 "id-ô-suµL™gTags"

	)

1613 
	#NID_id_ô_suµL™gTags
 784

	)

1614 
	#OBJ_id_ô_suµL™gTags
 
OBJ_id_ô
,16L

	)

1616 
	#SN_id_ªgCål
 "id-ªgCål"

	)

1617 
	#NID_id_ªgCål
 313

	)

1618 
	#OBJ_id_ªgCål
 
OBJ_id_pkù
,1L

	)

1620 
	#SN_id_ªgInfo
 "id-ªgInfo"

	)

1621 
	#NID_id_ªgInfo
 314

	)

1622 
	#OBJ_id_ªgInfo
 
OBJ_id_pkù
,2L

	)

1624 
	#SN_id_ªgCål_ªgTokí
 "id-ªgCål-ªgTokí"

	)

1625 
	#NID_id_ªgCål_ªgTokí
 315

	)

1626 
	#OBJ_id_ªgCål_ªgTokí
 
OBJ_id_ªgCål
,1L

	)

1628 
	#SN_id_ªgCål_authítiˇt‹
 "id-ªgCål-authítiˇt‹"

	)

1629 
	#NID_id_ªgCål_authítiˇt‹
 316

	)

1630 
	#OBJ_id_ªgCål_authítiˇt‹
 
OBJ_id_ªgCål
,2L

	)

1632 
	#SN_id_ªgCål_pkiPubliˇti⁄Info
 "id-ªgCål-pkiPubliˇti⁄Info"

	)

1633 
	#NID_id_ªgCål_pkiPubliˇti⁄Info
 317

	)

1634 
	#OBJ_id_ªgCål_pkiPubliˇti⁄Info
 
OBJ_id_ªgCål
,3L

	)

1636 
	#SN_id_ªgCål_pkiArchiveO±i⁄s
 "id-ªgCål-pkiArchiveO±i⁄s"

	)

1637 
	#NID_id_ªgCål_pkiArchiveO±i⁄s
 318

	)

1638 
	#OBJ_id_ªgCål_pkiArchiveO±i⁄s
 
OBJ_id_ªgCål
,4L

	)

1640 
	#SN_id_ªgCål_ﬁdCîtID
 "id-ªgCål-ﬁdCîtID"

	)

1641 
	#NID_id_ªgCål_ﬁdCîtID
 319

	)

1642 
	#OBJ_id_ªgCål_ﬁdCîtID
 
OBJ_id_ªgCål
,5L

	)

1644 
	#SN_id_ªgCål_¥ŸocﬁEn¸Key
 "id-ªgCål-¥ŸocﬁEn¸Key"

	)

1645 
	#NID_id_ªgCål_¥ŸocﬁEn¸Key
 320

	)

1646 
	#OBJ_id_ªgCål_¥ŸocﬁEn¸Key
 
OBJ_id_ªgCål
,6L

	)

1648 
	#SN_id_ªgInfo_utf8Paús
 "id-ªgInfo-utf8Paús"

	)

1649 
	#NID_id_ªgInfo_utf8Paús
 321

	)

1650 
	#OBJ_id_ªgInfo_utf8Paús
 
OBJ_id_ªgInfo
,1L

	)

1652 
	#SN_id_ªgInfo_˚πReq
 "id-ªgInfo-˚πReq"

	)

1653 
	#NID_id_ªgInfo_˚πReq
 322

	)

1654 
	#OBJ_id_ªgInfo_˚πReq
 
OBJ_id_ªgInfo
,2L

	)

1656 
	#SN_id_Æg_des40
 "id-Æg-des40"

	)

1657 
	#NID_id_Æg_des40
 323

	)

1658 
	#OBJ_id_Æg_des40
 
OBJ_id_Æg
,1L

	)

1660 
	#SN_id_Æg_noSig«tuª
 "id-Æg-noSig«tuª"

	)

1661 
	#NID_id_Æg_noSig«tuª
 324

	)

1662 
	#OBJ_id_Æg_noSig«tuª
 
OBJ_id_Æg
,2L

	)

1664 
	#SN_id_Æg_dh_sig_hmac_sha1
 "id-Æg-dh-sig-hmac-sha1"

	)

1665 
	#NID_id_Æg_dh_sig_hmac_sha1
 325

	)

1666 
	#OBJ_id_Æg_dh_sig_hmac_sha1
 
OBJ_id_Æg
,3L

	)

1668 
	#SN_id_Æg_dh_p›
 "id-Æg-dh-p›"

	)

1669 
	#NID_id_Æg_dh_p›
 326

	)

1670 
	#OBJ_id_Æg_dh_p›
 
OBJ_id_Æg
,4L

	)

1672 
	#SN_id_cmc_°©usInfo
 "id-cmc-°©usInfo"

	)

1673 
	#NID_id_cmc_°©usInfo
 327

	)

1674 
	#OBJ_id_cmc_°©usInfo
 
OBJ_id_cmc
,1L

	)

1676 
	#SN_id_cmc_idítifiˇti⁄
 "id-cmc-idítifiˇti⁄"

	)

1677 
	#NID_id_cmc_idítifiˇti⁄
 328

	)

1678 
	#OBJ_id_cmc_idítifiˇti⁄
 
OBJ_id_cmc
,2L

	)

1680 
	#SN_id_cmc_idítôyProof
 "id-cmc-idítôyProof"

	)

1681 
	#NID_id_cmc_idítôyProof
 329

	)

1682 
	#OBJ_id_cmc_idítôyProof
 
OBJ_id_cmc
,3L

	)

1684 
	#SN_id_cmc_d©aRëu∫
 "id-cmc-d©aRëu∫"

	)

1685 
	#NID_id_cmc_d©aRëu∫
 330

	)

1686 
	#OBJ_id_cmc_d©aRëu∫
 
OBJ_id_cmc
,4L

	)

1688 
	#SN_id_cmc_å™ß˘i⁄Id
 "id-cmc-å™ß˘i⁄Id"

	)

1689 
	#NID_id_cmc_å™ß˘i⁄Id
 331

	)

1690 
	#OBJ_id_cmc_å™ß˘i⁄Id
 
OBJ_id_cmc
,5L

	)

1692 
	#SN_id_cmc_£ndîN⁄˚
 "id-cmc-£ndîN⁄˚"

	)

1693 
	#NID_id_cmc_£ndîN⁄˚
 332

	)

1694 
	#OBJ_id_cmc_£ndîN⁄˚
 
OBJ_id_cmc
,6L

	)

1696 
	#SN_id_cmc_ªcùõ¡N⁄˚
 "id-cmc-ªcùõ¡N⁄˚"

	)

1697 
	#NID_id_cmc_ªcùõ¡N⁄˚
 333

	)

1698 
	#OBJ_id_cmc_ªcùõ¡N⁄˚
 
OBJ_id_cmc
,7L

	)

1700 
	#SN_id_cmc_addExãnsi⁄s
 "id-cmc-addExãnsi⁄s"

	)

1701 
	#NID_id_cmc_addExãnsi⁄s
 334

	)

1702 
	#OBJ_id_cmc_addExãnsi⁄s
 
OBJ_id_cmc
,8L

	)

1704 
	#SN_id_cmc_í¸y±edPOP
 "id-cmc-í¸y±edPOP"

	)

1705 
	#NID_id_cmc_í¸y±edPOP
 335

	)

1706 
	#OBJ_id_cmc_í¸y±edPOP
 
OBJ_id_cmc
,9L

	)

1708 
	#SN_id_cmc_de¸y±edPOP
 "id-cmc-de¸y±edPOP"

	)

1709 
	#NID_id_cmc_de¸y±edPOP
 336

	)

1710 
	#OBJ_id_cmc_de¸y±edPOP
 
OBJ_id_cmc
,10L

	)

1712 
	#SN_id_cmc_ÃaPOPWô√ss
 "id-cmc-ÃaPOPWô√ss"

	)

1713 
	#NID_id_cmc_ÃaPOPWô√ss
 337

	)

1714 
	#OBJ_id_cmc_ÃaPOPWô√ss
 
OBJ_id_cmc
,11L

	)

1716 
	#SN_id_cmc_gëCît
 "id-cmc-gëCît"

	)

1717 
	#NID_id_cmc_gëCît
 338

	)

1718 
	#OBJ_id_cmc_gëCît
 
OBJ_id_cmc
,15L

	)

1720 
	#SN_id_cmc_gëCRL
 "id-cmc-gëCRL"

	)

1721 
	#NID_id_cmc_gëCRL
 339

	)

1722 
	#OBJ_id_cmc_gëCRL
 
OBJ_id_cmc
,16L

	)

1724 
	#SN_id_cmc_ªvokeReque°
 "id-cmc-ªvokeReque°"

	)

1725 
	#NID_id_cmc_ªvokeReque°
 340

	)

1726 
	#OBJ_id_cmc_ªvokeReque°
 
OBJ_id_cmc
,17L

	)

1728 
	#SN_id_cmc_ªgInfo
 "id-cmc-ªgInfo"

	)

1729 
	#NID_id_cmc_ªgInfo
 341

	)

1730 
	#OBJ_id_cmc_ªgInfo
 
OBJ_id_cmc
,18L

	)

1732 
	#SN_id_cmc_ª•⁄£Info
 "id-cmc-ª•⁄£Info"

	)

1733 
	#NID_id_cmc_ª•⁄£Info
 342

	)

1734 
	#OBJ_id_cmc_ª•⁄£Info
 
OBJ_id_cmc
,19L

	)

1736 
	#SN_id_cmc_quîyPídög
 "id-cmc-quîyPídög"

	)

1737 
	#NID_id_cmc_quîyPídög
 343

	)

1738 
	#OBJ_id_cmc_quîyPídög
 
OBJ_id_cmc
,21L

	)

1740 
	#SN_id_cmc_p›LökR™dom
 "id-cmc-p›LökR™dom"

	)

1741 
	#NID_id_cmc_p›LökR™dom
 344

	)

1742 
	#OBJ_id_cmc_p›LökR™dom
 
OBJ_id_cmc
,22L

	)

1744 
	#SN_id_cmc_p›LökWô√ss
 "id-cmc-p›LökWô√ss"

	)

1745 
	#NID_id_cmc_p›LökWô√ss
 345

	)

1746 
	#OBJ_id_cmc_p›LökWô√ss
 
OBJ_id_cmc
,23L

	)

1748 
	#SN_id_cmc_c⁄fúmCîtAc˚±™˚
 "id-cmc-c⁄fúmCîtAc˚±™˚"

	)

1749 
	#NID_id_cmc_c⁄fúmCîtAc˚±™˚
 346

	)

1750 
	#OBJ_id_cmc_c⁄fúmCîtAc˚±™˚
 
OBJ_id_cmc
,24L

	)

1752 
	#SN_id_⁄_≥rs⁄ÆD©a
 "id-⁄-≥rs⁄ÆD©a"

	)

1753 
	#NID_id_⁄_≥rs⁄ÆD©a
 347

	)

1754 
	#OBJ_id_⁄_≥rs⁄ÆD©a
 
OBJ_id_⁄
,1L

	)

1756 
	#SN_id_⁄_≥rm™ítIdítifõr
 "id-⁄-≥rm™ítIdítifõr"

	)

1757 
	#LN_id_⁄_≥rm™ítIdítifõr
 "Pîm™íàIdítifõr"

	)

1758 
	#NID_id_⁄_≥rm™ítIdítifõr
 858

	)

1759 
	#OBJ_id_⁄_≥rm™ítIdítifõr
 
OBJ_id_⁄
,3L

	)

1761 
	#SN_id_pda_d©eOfBúth
 "id-pda-d©eOfBúth"

	)

1762 
	#NID_id_pda_d©eOfBúth
 348

	)

1763 
	#OBJ_id_pda_d©eOfBúth
 
OBJ_id_pda
,1L

	)

1765 
	#SN_id_pda_∂a˚OfBúth
 "id-pda-∂a˚OfBúth"

	)

1766 
	#NID_id_pda_∂a˚OfBúth
 349

	)

1767 
	#OBJ_id_pda_∂a˚OfBúth
 
OBJ_id_pda
,2L

	)

1769 
	#SN_id_pda_gídî
 "id-pda-gídî"

	)

1770 
	#NID_id_pda_gídî
 351

	)

1771 
	#OBJ_id_pda_gídî
 
OBJ_id_pda
,3L

	)

1773 
	#SN_id_pda_cou¡ryOfCôizíshù
 "id-pda-cou¡ryOfCôizíshù"

	)

1774 
	#NID_id_pda_cou¡ryOfCôizíshù
 352

	)

1775 
	#OBJ_id_pda_cou¡ryOfCôizíshù
 
OBJ_id_pda
,4L

	)

1777 
	#SN_id_pda_cou¡ryOfResidí˚
 "id-pda-cou¡ryOfResidí˚"

	)

1778 
	#NID_id_pda_cou¡ryOfResidí˚
 353

	)

1779 
	#OBJ_id_pda_cou¡ryOfResidí˚
 
OBJ_id_pda
,5L

	)

1781 
	#SN_id_aˇ_authítiˇti⁄Info
 "id-aˇ-authítiˇti⁄Info"

	)

1782 
	#NID_id_aˇ_authítiˇti⁄Info
 354

	)

1783 
	#OBJ_id_aˇ_authítiˇti⁄Info
 
OBJ_id_aˇ
,1L

	)

1785 
	#SN_id_aˇ_ac˚ssIdítôy
 "id-aˇ-ac˚ssIdítôy"

	)

1786 
	#NID_id_aˇ_ac˚ssIdítôy
 355

	)

1787 
	#OBJ_id_aˇ_ac˚ssIdítôy
 
OBJ_id_aˇ
,2L

	)

1789 
	#SN_id_aˇ_ch¨gögIdítôy
 "id-aˇ-ch¨gögIdítôy"

	)

1790 
	#NID_id_aˇ_ch¨gögIdítôy
 356

	)

1791 
	#OBJ_id_aˇ_ch¨gögIdítôy
 
OBJ_id_aˇ
,3L

	)

1793 
	#SN_id_aˇ_group
 "id-aˇ-group"

	)

1794 
	#NID_id_aˇ_group
 357

	)

1795 
	#OBJ_id_aˇ_group
 
OBJ_id_aˇ
,4L

	)

1797 
	#SN_id_aˇ_rﬁe
 "id-aˇ-rﬁe"

	)

1798 
	#NID_id_aˇ_rﬁe
 358

	)

1799 
	#OBJ_id_aˇ_rﬁe
 
OBJ_id_aˇ
,5L

	)

1801 
	#SN_id_aˇ_ícAârs
 "id-aˇ-ícAârs"

	)

1802 
	#NID_id_aˇ_ícAârs
 399

	)

1803 
	#OBJ_id_aˇ_ícAârs
 
OBJ_id_aˇ
,6L

	)

1805 
	#SN_id_qcs_pkixQCSy¡ax_v1
 "id-qcs-pkixQCSy¡ax-v1"

	)

1806 
	#NID_id_qcs_pkixQCSy¡ax_v1
 359

	)

1807 
	#OBJ_id_qcs_pkixQCSy¡ax_v1
 
OBJ_id_qcs
,1L

	)

1809 
	#SN_id_c˘_¸s
 "id-c˘-¸s"

	)

1810 
	#NID_id_c˘_¸s
 360

	)

1811 
	#OBJ_id_c˘_¸s
 
OBJ_id_c˘
,1L

	)

1813 
	#SN_id_c˘_PKID©a
 "id-c˘-PKID©a"

	)

1814 
	#NID_id_c˘_PKID©a
 361

	)

1815 
	#OBJ_id_c˘_PKID©a
 
OBJ_id_c˘
,2L

	)

1817 
	#SN_id_c˘_PKIRe•⁄£
 "id-c˘-PKIRe•⁄£"

	)

1818 
	#NID_id_c˘_PKIRe•⁄£
 362

	)

1819 
	#OBJ_id_c˘_PKIRe•⁄£
 
OBJ_id_c˘
,3L

	)

1821 
	#SN_id_µl_™yL™guage
 "id-µl-™yL™guage"

	)

1822 
	#LN_id_µl_™yL™guage
 "AnyÜ™guage"

	)

1823 
	#NID_id_µl_™yL™guage
 664

	)

1824 
	#OBJ_id_µl_™yL™guage
 
OBJ_id_µl
,0L

	)

1826 
	#SN_id_µl_öhîôAŒ
 "id-µl-öhîôAŒ"

	)

1827 
	#LN_id_µl_öhîôAŒ
 "InhîôáŒ"

	)

1828 
	#NID_id_µl_öhîôAŒ
 665

	)

1829 
	#OBJ_id_µl_öhîôAŒ
 
OBJ_id_µl
,1L

	)

1831 
	#SN_Indïídít
 "id-µl-ödïídít"

	)

1832 
	#LN_Indïídít
 "Indïídít"

	)

1833 
	#NID_Indïídít
 667

	)

1834 
	#OBJ_Indïídít
 
OBJ_id_µl
,2L

	)

1836 
	#SN_ad_OCSP
 "OCSP"

	)

1837 
	#LN_ad_OCSP
 "OCSP"

	)

1838 
	#NID_ad_OCSP
 178

	)

1839 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

1841 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

1842 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

1843 
	#NID_ad_ˇ_issuîs
 179

	)

1844 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

1846 
	#SN_ad_timeSèmpög
 "ad_time°ampög"

	)

1847 
	#LN_ad_timeSèmpög
 "AD TimêSèmpög"

	)

1848 
	#NID_ad_timeSèmpög
 363

	)

1849 
	#OBJ_ad_timeSèmpög
 
OBJ_id_ad
,3L

	)

1851 
	#SN_ad_dvcs
 "AD_DVCS"

	)

1852 
	#LN_ad_dvcs
 "ad dvcs"

	)

1853 
	#NID_ad_dvcs
 364

	)

1854 
	#OBJ_ad_dvcs
 
OBJ_id_ad
,4L

	)

1856 
	#SN_ˇRïosô‹y
 "ˇRïosô‹y"

	)

1857 
	#LN_ˇRïosô‹y
 "CA Rïosô‹y"

	)

1858 
	#NID_ˇRïosô‹y
 785

	)

1859 
	#OBJ_ˇRïosô‹y
 
OBJ_id_ad
,5L

	)

1861 
	#OBJ_id_pkix_OCSP
 
OBJ_ad_OCSP


	)

1863 
	#SN_id_pkix_OCSP_basic
 "basicOCSPRe•⁄£"

	)

1864 
	#LN_id_pkix_OCSP_basic
 "Basi¯OCSP Re•⁄£"

	)

1865 
	#NID_id_pkix_OCSP_basic
 365

	)

1866 
	#OBJ_id_pkix_OCSP_basic
 
OBJ_id_pkix_OCSP
,1L

	)

1868 
	#SN_id_pkix_OCSP_N⁄˚
 "N⁄˚"

	)

1869 
	#LN_id_pkix_OCSP_N⁄˚
 "OCSP N⁄˚"

	)

1870 
	#NID_id_pkix_OCSP_N⁄˚
 366

	)

1871 
	#OBJ_id_pkix_OCSP_N⁄˚
 
OBJ_id_pkix_OCSP
,2L

	)

1873 
	#SN_id_pkix_OCSP_CæID
 "CæID"

	)

1874 
	#LN_id_pkix_OCSP_CæID
 "OCSP CRL ID"

	)

1875 
	#NID_id_pkix_OCSP_CæID
 367

	)

1876 
	#OBJ_id_pkix_OCSP_CæID
 
OBJ_id_pkix_OCSP
,3L

	)

1878 
	#SN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "ac˚±abÀRe•⁄£s"

	)

1879 
	#LN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "Ac˚±abÀ OCSP Re•⁄£s"

	)

1880 
	#NID_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 368

	)

1881 
	#OBJ_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 
OBJ_id_pkix_OCSP
,4L

	)

1883 
	#SN_id_pkix_OCSP_noCheck
 "noCheck"

	)

1884 
	#LN_id_pkix_OCSP_noCheck
 "OCSP NÿCheck"

	)

1885 
	#NID_id_pkix_OCSP_noCheck
 369

	)

1886 
	#OBJ_id_pkix_OCSP_noCheck
 
OBJ_id_pkix_OCSP
,5L

	)

1888 
	#SN_id_pkix_OCSP_¨chiveCutoff
 "¨chiveCutoff"

	)

1889 
	#LN_id_pkix_OCSP_¨chiveCutoff
 "OCSP ArchivêCutoff"

	)

1890 
	#NID_id_pkix_OCSP_¨chiveCutoff
 370

	)

1891 
	#OBJ_id_pkix_OCSP_¨chiveCutoff
 
OBJ_id_pkix_OCSP
,6L

	)

1893 
	#SN_id_pkix_OCSP_£rvi˚Loˇt‹
 "£rvi˚Loˇt‹"

	)

1894 
	#LN_id_pkix_OCSP_£rvi˚Loˇt‹
 "OCSP Sîvi˚ Loˇt‹"

	)

1895 
	#NID_id_pkix_OCSP_£rvi˚Loˇt‹
 371

	)

1896 
	#OBJ_id_pkix_OCSP_£rvi˚Loˇt‹
 
OBJ_id_pkix_OCSP
,7L

	)

1898 
	#SN_id_pkix_OCSP_exãndedSètus
 "exãndedSètus"

	)

1899 
	#LN_id_pkix_OCSP_exãndedSètus
 "Exãnded OCSP Sètus"

	)

1900 
	#NID_id_pkix_OCSP_exãndedSètus
 372

	)

1901 
	#OBJ_id_pkix_OCSP_exãndedSètus
 
OBJ_id_pkix_OCSP
,8L

	)

1903 
	#SN_id_pkix_OCSP_vÆid
 "vÆid"

	)

1904 
	#NID_id_pkix_OCSP_vÆid
 373

	)

1905 
	#OBJ_id_pkix_OCSP_vÆid
 
OBJ_id_pkix_OCSP
,9L

	)

1907 
	#SN_id_pkix_OCSP_∑th
 "∑th"

	)

1908 
	#NID_id_pkix_OCSP_∑th
 374

	)

1909 
	#OBJ_id_pkix_OCSP_∑th
 
OBJ_id_pkix_OCSP
,10L

	)

1911 
	#SN_id_pkix_OCSP_åu°RoŸ
 "åu°RoŸ"

	)

1912 
	#LN_id_pkix_OCSP_åu°RoŸ
 "Tru° RoŸ"

	)

1913 
	#NID_id_pkix_OCSP_åu°RoŸ
 375

	)

1914 
	#OBJ_id_pkix_OCSP_åu°RoŸ
 
OBJ_id_pkix_OCSP
,11L

	)

1916 
	#SN_Æg‹ôhm
 "Æg‹ôhm"

	)

1917 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

1918 
	#NID_Æg‹ôhm
 376

	)

1919 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

1921 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

1922 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

1923 
	#NID_md5WôhRSA
 104

	)

1924 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

1926 
	#SN_des_ecb
 "DES-ECB"

	)

1927 
	#LN_des_ecb
 "des-ecb"

	)

1928 
	#NID_des_ecb
 29

	)

1929 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

1931 
	#SN_des_cbc
 "DES-CBC"

	)

1932 
	#LN_des_cbc
 "des-cbc"

	)

1933 
	#NID_des_cbc
 31

	)

1934 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

1936 
	#SN_des_ofb64
 "DES-OFB"

	)

1937 
	#LN_des_ofb64
 "des-ofb"

	)

1938 
	#NID_des_ofb64
 45

	)

1939 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

1941 
	#SN_des_cfb64
 "DES-CFB"

	)

1942 
	#LN_des_cfb64
 "des-cfb"

	)

1943 
	#NID_des_cfb64
 30

	)

1944 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

1946 
	#SN_rßSig«tuª
 "rßSig«tuª"

	)

1947 
	#NID_rßSig«tuª
 377

	)

1948 
	#OBJ_rßSig«tuª
 
OBJ_Æg‹ôhm
,11L

	)

1950 
	#SN_dß_2
 "DSA-ﬁd"

	)

1951 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

1952 
	#NID_dß_2
 67

	)

1953 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

1955 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

1956 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

1957 
	#NID_dßWôhSHA
 66

	)

1958 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

1960 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

1961 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

1962 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

1963 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

1965 
	#SN_des_ede_ecb
 "DES-EDE"

	)

1966 
	#LN_des_ede_ecb
 "des-ede"

	)

1967 
	#NID_des_ede_ecb
 32

	)

1968 
	#OBJ_des_ede_ecb
 
OBJ_Æg‹ôhm
,17L

	)

1970 
	#SN_des_ede3_ecb
 "DES-EDE3"

	)

1971 
	#LN_des_ede3_ecb
 "des-ede3"

	)

1972 
	#NID_des_ede3_ecb
 33

	)

1974 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

1975 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

1976 
	#NID_des_ede_cbc
 43

	)

1978 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

1979 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

1980 
	#NID_des_ede_cfb64
 60

	)

1982 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

1983 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

1984 
	#NID_des_ede3_cfb64
 61

	)

1986 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

1987 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

1988 
	#NID_des_ede_ofb64
 62

	)

1990 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

1991 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

1992 
	#NID_des_ede3_ofb64
 63

	)

1994 
	#SN_desx_cbc
 "DESX-CBC"

	)

1995 
	#LN_desx_cbc
 "desx-cbc"

	)

1996 
	#NID_desx_cbc
 80

	)

1998 
	#SN_sha
 "SHA"

	)

1999 
	#LN_sha
 "sha"

	)

2000 
	#NID_sha
 41

	)

2001 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

2003 
	#SN_sha1
 "SHA1"

	)

2004 
	#LN_sha1
 "sha1"

	)

2005 
	#NID_sha1
 64

	)

2006 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

2008 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

2009 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

2010 
	#NID_dßWôhSHA1_2
 70

	)

2011 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

2013 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

2014 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

2015 
	#NID_sha1WôhRSA
 115

	)

2016 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

2018 
	#SN_rùemd160
 "RIPEMD160"

	)

2019 
	#LN_rùemd160
 "rùemd160"

	)

2020 
	#NID_rùemd160
 117

	)

2021 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

2023 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

2024 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

2025 
	#NID_rùemd160WôhRSA
 119

	)

2026 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

2028 
	#SN_sx√t
 "SXNëID"

	)

2029 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

2030 
	#NID_sx√t
 143

	)

2031 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

2033 
	#SN_X500
 "X500"

	)

2034 
	#LN_X500
 "dúe˘‹y sîvi˚†(X.500)"

	)

2035 
	#NID_X500
 11

	)

2036 
	#OBJ_X500
 2L,5L

	)

2038 
	#SN_X509
 "X509"

	)

2039 
	#NID_X509
 12

	)

2040 
	#OBJ_X509
 
OBJ_X500
,4L

	)

2042 
	#SN_comm⁄Name
 "CN"

	)

2043 
	#LN_comm⁄Name
 "comm⁄Name"

	)

2044 
	#NID_comm⁄Name
 13

	)

2045 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

2047 
	#SN_su∫ame
 "SN"

	)

2048 
	#LN_su∫ame
 "su∫ame"

	)

2049 
	#NID_su∫ame
 100

	)

2050 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

2052 
	#LN_£rülNumbî
 "£rülNumbî"

	)

2053 
	#NID_£rülNumbî
 105

	)

2054 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

2056 
	#SN_cou¡ryName
 "C"

	)

2057 
	#LN_cou¡ryName
 "cou¡ryName"

	)

2058 
	#NID_cou¡ryName
 14

	)

2059 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

2061 
	#SN_loˇlôyName
 "L"

	)

2062 
	#LN_loˇlôyName
 "loˇlôyName"

	)

2063 
	#NID_loˇlôyName
 15

	)

2064 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

2066 
	#SN_°©eOrProvö˚Name
 "ST"

	)

2067 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

2068 
	#NID_°©eOrProvö˚Name
 16

	)

2069 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

2071 
	#SN_°ªëAddªss
 "°ªë"

	)

2072 
	#LN_°ªëAddªss
 "°ªëAddªss"

	)

2073 
	#NID_°ªëAddªss
 660

	)

2074 
	#OBJ_°ªëAddªss
 
OBJ_X509
,9L

	)

2076 
	#SN_‹g™iz©i⁄Name
 "O"

	)

2077 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

2078 
	#NID_‹g™iz©i⁄Name
 17

	)

2079 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

2081 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

2082 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

2083 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

2084 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

2086 
	#SN_tôÀ
 "tôÀ"

	)

2087 
	#LN_tôÀ
 "tôÀ"

	)

2088 
	#NID_tôÀ
 106

	)

2089 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

2091 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

2092 
	#NID_des¸ùti⁄
 107

	)

2093 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

2095 
	#LN_£¨chGuide
 "£¨chGuide"

	)

2096 
	#NID_£¨chGuide
 859

	)

2097 
	#OBJ_£¨chGuide
 
OBJ_X509
,14L

	)

2099 
	#LN_busöessC©eg‹y
 "busöessC©eg‹y"

	)

2100 
	#NID_busöessC©eg‹y
 860

	)

2101 
	#OBJ_busöessC©eg‹y
 
OBJ_X509
,15L

	)

2103 
	#LN_po°ÆAddªss
 "po°ÆAddªss"

	)

2104 
	#NID_po°ÆAddªss
 861

	)

2105 
	#OBJ_po°ÆAddªss
 
OBJ_X509
,16L

	)

2107 
	#LN_po°ÆCode
 "po°ÆCode"

	)

2108 
	#NID_po°ÆCode
 661

	)

2109 
	#OBJ_po°ÆCode
 
OBJ_X509
,17L

	)

2111 
	#LN_po°Offi˚Box
 "po°Offi˚Box"

	)

2112 
	#NID_po°Offi˚Box
 862

	)

2113 
	#OBJ_po°Offi˚Box
 
OBJ_X509
,18L

	)

2115 
	#LN_physiˇlDñivîyOffi˚Name
 "physiˇlDñivîyOffi˚Name"

	)

2116 
	#NID_physiˇlDñivîyOffi˚Name
 863

	)

2117 
	#OBJ_physiˇlDñivîyOffi˚Name
 
OBJ_X509
,19L

	)

2119 
	#LN_ãÀph⁄eNumbî
 "ãÀph⁄eNumbî"

	)

2120 
	#NID_ãÀph⁄eNumbî
 864

	)

2121 
	#OBJ_ãÀph⁄eNumbî
 
OBJ_X509
,20L

	)

2123 
	#LN_ãÀxNumbî
 "ãÀxNumbî"

	)

2124 
	#NID_ãÀxNumbî
 865

	)

2125 
	#OBJ_ãÀxNumbî
 
OBJ_X509
,21L

	)

2127 
	#LN_ãÀãxTîmöÆIdítifõr
 "ãÀãxTîmöÆIdítifõr"

	)

2128 
	#NID_ãÀãxTîmöÆIdítifõr
 866

	)

2129 
	#OBJ_ãÀãxTîmöÆIdítifõr
 
OBJ_X509
,22L

	)

2131 
	#LN_ÁcsimûeTñïh⁄eNumbî
 "ÁcsimûeTñïh⁄eNumbî"

	)

2132 
	#NID_ÁcsimûeTñïh⁄eNumbî
 867

	)

2133 
	#OBJ_ÁcsimûeTñïh⁄eNumbî
 
OBJ_X509
,23L

	)

2135 
	#LN_x121Addªss
 "x121Addªss"

	)

2136 
	#NID_x121Addªss
 868

	)

2137 
	#OBJ_x121Addªss
 
OBJ_X509
,24L

	)

2139 
	#LN_öã∫©i⁄ÆiSDNNumbî
 "öã∫©i⁄ÆiSDNNumbî"

	)

2140 
	#NID_öã∫©i⁄ÆiSDNNumbî
 869

	)

2141 
	#OBJ_öã∫©i⁄ÆiSDNNumbî
 
OBJ_X509
,25L

	)

2143 
	#LN_ªgi°îedAddªss
 "ªgi°îedAddªss"

	)

2144 
	#NID_ªgi°îedAddªss
 870

	)

2145 
	#OBJ_ªgi°îedAddªss
 
OBJ_X509
,26L

	)

2147 
	#LN_de°ö©i⁄Indiˇt‹
 "de°ö©i⁄Indiˇt‹"

	)

2148 
	#NID_de°ö©i⁄Indiˇt‹
 871

	)

2149 
	#OBJ_de°ö©i⁄Indiˇt‹
 
OBJ_X509
,27L

	)

2151 
	#LN_¥e„ºedDñivîyMëhod
 "¥e„ºedDñivîyMëhod"

	)

2152 
	#NID_¥e„ºedDñivîyMëhod
 872

	)

2153 
	#OBJ_¥e„ºedDñivîyMëhod
 
OBJ_X509
,28L

	)

2155 
	#LN_¥e£¡©i⁄Addªss
 "¥e£¡©i⁄Addªss"

	)

2156 
	#NID_¥e£¡©i⁄Addªss
 873

	)

2157 
	#OBJ_¥e£¡©i⁄Addªss
 
OBJ_X509
,29L

	)

2159 
	#LN_suµ‹ãdAµliˇti⁄C⁄ãxt
 "suµ‹ãdAµliˇti⁄C⁄ãxt"

	)

2160 
	#NID_suµ‹ãdAµliˇti⁄C⁄ãxt
 874

	)

2161 
	#OBJ_suµ‹ãdAµliˇti⁄C⁄ãxt
 
OBJ_X509
,30L

	)

2163 
	#SN_membî
 "membî"

	)

2164 
	#NID_membî
 875

	)

2165 
	#OBJ_membî
 
OBJ_X509
,31L

	)

2167 
	#SN_ow√r
 "ow√r"

	)

2168 
	#NID_ow√r
 876

	)

2169 
	#OBJ_ow√r
 
OBJ_X509
,32L

	)

2171 
	#LN_rﬁeOccu∑¡
 "rﬁeOccu∑¡"

	)

2172 
	#NID_rﬁeOccu∑¡
 877

	)

2173 
	#OBJ_rﬁeOccu∑¡
 
OBJ_X509
,33L

	)

2175 
	#SN_£eAlso
 "£eAlso"

	)

2176 
	#NID_£eAlso
 878

	)

2177 
	#OBJ_£eAlso
 
OBJ_X509
,34L

	)

2179 
	#LN_u£rPassw‹d
 "u£rPassw‹d"

	)

2180 
	#NID_u£rPassw‹d
 879

	)

2181 
	#OBJ_u£rPassw‹d
 
OBJ_X509
,35L

	)

2183 
	#LN_u£rCîtifiˇã
 "u£rCîtifiˇã"

	)

2184 
	#NID_u£rCîtifiˇã
 880

	)

2185 
	#OBJ_u£rCîtifiˇã
 
OBJ_X509
,36L

	)

2187 
	#LN_cACîtifiˇã
 "cACîtifiˇã"

	)

2188 
	#NID_cACîtifiˇã
 881

	)

2189 
	#OBJ_cACîtifiˇã
 
OBJ_X509
,37L

	)

2191 
	#LN_auth‹ôyRevoˇti⁄Li°
 "auth‹ôyRevoˇti⁄Li°"

	)

2192 
	#NID_auth‹ôyRevoˇti⁄Li°
 882

	)

2193 
	#OBJ_auth‹ôyRevoˇti⁄Li°
 
OBJ_X509
,38L

	)

2195 
	#LN_˚πifiˇãRevoˇti⁄Li°
 "˚πifiˇãRevoˇti⁄Li°"

	)

2196 
	#NID_˚πifiˇãRevoˇti⁄Li°
 883

	)

2197 
	#OBJ_˚πifiˇãRevoˇti⁄Li°
 
OBJ_X509
,39L

	)

2199 
	#LN_¸ossCîtifiˇãPaú
 "¸ossCîtifiˇãPaú"

	)

2200 
	#NID_¸ossCîtifiˇãPaú
 884

	)

2201 
	#OBJ_¸ossCîtifiˇãPaú
 
OBJ_X509
,40L

	)

2203 
	#SN_«me
 "«me"

	)

2204 
	#LN_«me
 "«me"

	)

2205 
	#NID_«me
 173

	)

2206 
	#OBJ_«me
 
OBJ_X509
,41L

	)

2208 
	#SN_givíName
 "GN"

	)

2209 
	#LN_givíName
 "givíName"

	)

2210 
	#NID_givíName
 99

	)

2211 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

2213 
	#SN_öôüls
 "öôüls"

	)

2214 
	#LN_öôüls
 "öôüls"

	)

2215 
	#NID_öôüls
 101

	)

2216 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

2218 
	#LN_gíî©i⁄QuÆifõr
 "gíî©i⁄QuÆifõr"

	)

2219 
	#NID_gíî©i⁄QuÆifõr
 509

	)

2220 
	#OBJ_gíî©i⁄QuÆifõr
 
OBJ_X509
,44L

	)

2222 
	#LN_x500UniqueIdítifõr
 "x500UniqueIdítifõr"

	)

2223 
	#NID_x500UniqueIdítifõr
 503

	)

2224 
	#OBJ_x500UniqueIdítifõr
 
OBJ_X509
,45L

	)

2226 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

2227 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

2228 
	#NID_dnQuÆifõr
 174

	)

2229 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

2231 
	#LN_íh™˚dSórchGuide
 "íh™˚dSórchGuide"

	)

2232 
	#NID_íh™˚dSórchGuide
 885

	)

2233 
	#OBJ_íh™˚dSórchGuide
 
OBJ_X509
,47L

	)

2235 
	#LN_¥ŸocﬁInf‹m©i⁄
 "¥ŸocﬁInf‹m©i⁄"

	)

2236 
	#NID_¥ŸocﬁInf‹m©i⁄
 886

	)

2237 
	#OBJ_¥ŸocﬁInf‹m©i⁄
 
OBJ_X509
,48L

	)

2239 
	#LN_di°öguishedName
 "di°öguishedName"

	)

2240 
	#NID_di°öguishedName
 887

	)

2241 
	#OBJ_di°öguishedName
 
OBJ_X509
,49L

	)

2243 
	#LN_uniqueMembî
 "uniqueMembî"

	)

2244 
	#NID_uniqueMembî
 888

	)

2245 
	#OBJ_uniqueMembî
 
OBJ_X509
,50L

	)

2247 
	#LN_hou£Idítifõr
 "hou£Idítifõr"

	)

2248 
	#NID_hou£Idítifõr
 889

	)

2249 
	#OBJ_hou£Idítifõr
 
OBJ_X509
,51L

	)

2251 
	#LN_suµ‹ãdAlg‹ôhms
 "suµ‹ãdAlg‹ôhms"

	)

2252 
	#NID_suµ‹ãdAlg‹ôhms
 890

	)

2253 
	#OBJ_suµ‹ãdAlg‹ôhms
 
OBJ_X509
,52L

	)

2255 
	#LN_dñèRevoˇti⁄Li°
 "dñèRevoˇti⁄Li°"

	)

2256 
	#NID_dñèRevoˇti⁄Li°
 891

	)

2257 
	#OBJ_dñèRevoˇti⁄Li°
 
OBJ_X509
,53L

	)

2259 
	#SN_dmdName
 "dmdName"

	)

2260 
	#NID_dmdName
 892

	)

2261 
	#OBJ_dmdName
 
OBJ_X509
,54L

	)

2263 
	#LN_p£ud⁄ym
 "p£ud⁄ym"

	)

2264 
	#NID_p£ud⁄ym
 510

	)

2265 
	#OBJ_p£ud⁄ym
 
OBJ_X509
,65L

	)

2267 
	#SN_rﬁe
 "rﬁe"

	)

2268 
	#LN_rﬁe
 "rﬁe"

	)

2269 
	#NID_rﬁe
 400

	)

2270 
	#OBJ_rﬁe
 
OBJ_X509
,72L

	)

2272 
	#SN_X500Æg‹ôhms
 "X500Æg‹ôhms"

	)

2273 
	#LN_X500Æg‹ôhms
 "dúe˘‹y sîvi˚†-álg‹ôhms"

	)

2274 
	#NID_X500Æg‹ôhms
 378

	)

2275 
	#OBJ_X500Æg‹ôhms
 
OBJ_X500
,8L

	)

2277 
	#SN_rß
 "RSA"

	)

2278 
	#LN_rß
 "rß"

	)

2279 
	#NID_rß
 19

	)

2280 
	#OBJ_rß
 
OBJ_X500Æg‹ôhms
,1L,1L

	)

2282 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

2283 
	#LN_mdc2WôhRSA
 "mdc2WôhRSA"

	)

2284 
	#NID_mdc2WôhRSA
 96

	)

2285 
	#OBJ_mdc2WôhRSA
 
OBJ_X500Æg‹ôhms
,3L,100L

	)

2287 
	#SN_mdc2
 "MDC2"

	)

2288 
	#LN_mdc2
 "mdc2"

	)

2289 
	#NID_mdc2
 95

	)

2290 
	#OBJ_mdc2
 
OBJ_X500Æg‹ôhms
,3L,101L

	)

2292 
	#SN_id_˚
 "id-˚"

	)

2293 
	#NID_id_˚
 81

	)

2294 
	#OBJ_id_˚
 
OBJ_X500
,29L

	)

2296 
	#SN_subje˘_dúe˘‹y_©åibuãs
 "subje˘Dúe˘‹yAâribuãs"

	)

2297 
	#LN_subje˘_dúe˘‹y_©åibuãs
 "X509v3 Subje˘ Dúe˘‹y Aâribuãs"

	)

2298 
	#NID_subje˘_dúe˘‹y_©åibuãs
 769

	)

2299 
	#OBJ_subje˘_dúe˘‹y_©åibuãs
 
OBJ_id_˚
,9L

	)

2301 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

2302 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

2303 
	#NID_subje˘_key_idítifõr
 82

	)

2304 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

2306 
	#SN_key_ußge
 "keyUßge"

	)

2307 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

2308 
	#NID_key_ußge
 83

	)

2309 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

2311 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

2312 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

2313 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

2314 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

2316 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

2317 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

2318 
	#NID_subje˘_Æt_«me
 85

	)

2319 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

2321 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

2322 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

2323 
	#NID_issuî_Æt_«me
 86

	)

2324 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

2326 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

2327 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

2328 
	#NID_basic_c⁄°øöts
 87

	)

2329 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

2331 
	#SN_¸l_numbî
 "¸lNumbî"

	)

2332 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

2333 
	#NID_¸l_numbî
 88

	)

2334 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

2336 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

2337 
	#LN_¸l_ªas⁄
 "X509v3 CRL Rós⁄ Code"

	)

2338 
	#NID_¸l_ªas⁄
 141

	)

2339 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

2341 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

2342 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

2343 
	#NID_övÆidôy_d©e
 142

	)

2344 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

2346 
	#SN_dñè_¸l
 "dñèCRL"

	)

2347 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

2348 
	#NID_dñè_¸l
 140

	)

2349 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

2351 
	#SN_issuög_di°ributi⁄_poöt
 "issuögDi°ributi⁄Poöt"

	)

2352 
	#LN_issuög_di°ributi⁄_poöt
 "X509v3 Issuög Di°rubuti⁄ Poöt"

	)

2353 
	#NID_issuög_di°ributi⁄_poöt
 770

	)

2354 
	#OBJ_issuög_di°ributi⁄_poöt
 
OBJ_id_˚
,28L

	)

2356 
	#SN_˚πifiˇã_issuî
 "˚πifiˇãIssuî"

	)

2357 
	#LN_˚πifiˇã_issuî
 "X509v3 Cîtifiˇã Issuî"

	)

2358 
	#NID_˚πifiˇã_issuî
 771

	)

2359 
	#OBJ_˚πifiˇã_issuî
 
OBJ_id_˚
,29L

	)

2361 
	#SN_«me_c⁄°øöts
 "«meC⁄°øöts"

	)

2362 
	#LN_«me_c⁄°øöts
 "X509v3 NamêC⁄°øöts"

	)

2363 
	#NID_«me_c⁄°øöts
 666

	)

2364 
	#OBJ_«me_c⁄°øöts
 
OBJ_id_˚
,30L

	)

2366 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

2367 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

2368 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

2369 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

2371 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

2372 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

2373 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

2374 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

2376 
	#SN_™y_pﬁicy
 "™yPﬁicy"

	)

2377 
	#LN_™y_pﬁicy
 "X509v3 Any Pﬁicy"

	)

2378 
	#NID_™y_pﬁicy
 746

	)

2379 
	#OBJ_™y_pﬁicy
 
OBJ_˚πifiˇã_pﬁicõs
,0L

	)

2381 
	#SN_pﬁicy_m≠pögs
 "pﬁicyM≠pögs"

	)

2382 
	#LN_pﬁicy_m≠pögs
 "X509v3 Pﬁicy M≠pögs"

	)

2383 
	#NID_pﬁicy_m≠pögs
 747

	)

2384 
	#OBJ_pﬁicy_m≠pögs
 
OBJ_id_˚
,33L

	)

2386 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

2387 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

2388 
	#NID_auth‹ôy_key_idítifõr
 90

	)

2389 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

2391 
	#SN_pﬁicy_c⁄°øöts
 "pﬁicyC⁄°øöts"

	)

2392 
	#LN_pﬁicy_c⁄°øöts
 "X509v3 Pﬁicy C⁄°øöts"

	)

2393 
	#NID_pﬁicy_c⁄°øöts
 401

	)

2394 
	#OBJ_pﬁicy_c⁄°øöts
 
OBJ_id_˚
,36L

	)

2396 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

2397 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

2398 
	#NID_ext_key_ußge
 126

	)

2399 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37L

	)

2401 
	#SN_‰eshe°_¸l
 "‰eshe°CRL"

	)

2402 
	#LN_‰eshe°_¸l
 "X509v3 Fªshe° CRL"

	)

2403 
	#NID_‰eshe°_¸l
 857

	)

2404 
	#OBJ_‰eshe°_¸l
 
OBJ_id_˚
,46L

	)

2406 
	#SN_öhibô_™y_pﬁicy
 "öhibôAnyPﬁicy"

	)

2407 
	#LN_öhibô_™y_pﬁicy
 "X509v3 Inhibô Any Pﬁicy"

	)

2408 
	#NID_öhibô_™y_pﬁicy
 748

	)

2409 
	#OBJ_öhibô_™y_pﬁicy
 
OBJ_id_˚
,54L

	)

2411 
	#SN_èrgë_öf‹m©i⁄
 "èrgëInf‹m©i⁄"

	)

2412 
	#LN_èrgë_öf‹m©i⁄
 "X509v3 AC T¨gëög"

	)

2413 
	#NID_èrgë_öf‹m©i⁄
 402

	)

2414 
	#OBJ_èrgë_öf‹m©i⁄
 
OBJ_id_˚
,55L

	)

2416 
	#SN_no_ªv_avaû
 "noRevAvaû"

	)

2417 
	#LN_no_ªv_avaû
 "X509v3 NÿRevoˇti⁄ AvaûabÀ"

	)

2418 
	#NID_no_ªv_avaû
 403

	)

2419 
	#OBJ_no_ªv_avaû
 
OBJ_id_˚
,56L

	)

2421 
	#SN_™yExãndedKeyUßge
 "™yExãndedKeyUßge"

	)

2422 
	#LN_™yExãndedKeyUßge
 "Any Exãnded Key Ußge"

	)

2423 
	#NID_™yExãndedKeyUßge
 910

	)

2424 
	#OBJ_™yExãndedKeyUßge
 
OBJ_ext_key_ußge
,0L

	)

2426 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

2427 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

2428 
	#NID_√tsˇ≥
 57

	)

2429 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

2431 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

2432 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

2433 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

2434 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

2436 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

2437 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

2438 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

2439 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

2441 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

2442 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

2443 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

2444 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

2446 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

2447 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

2448 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

2449 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

2451 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

2452 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

2453 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

2454 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

2456 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

2457 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

2458 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

2459 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

2461 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

2462 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

2463 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

2464 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

2466 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

2467 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

2468 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

2469 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

2471 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

2472 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

2473 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

2474 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

2476 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

2477 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

2478 
	#NID_√tsˇ≥_commít
 78

	)

2479 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

2481 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

2482 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

2483 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

2484 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

2486 
	#SN_ns_sgc
 "nsSGC"

	)

2487 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

2488 
	#NID_ns_sgc
 139

	)

2489 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

2491 
	#SN_‹g
 "ORG"

	)

2492 
	#LN_‹g
 "‹g"

	)

2493 
	#NID_‹g
 379

	)

2494 
	#OBJ_‹g
 
OBJ_iso
,3L

	)

2496 
	#SN_dod
 "DOD"

	)

2497 
	#LN_dod
 "dod"

	)

2498 
	#NID_dod
 380

	)

2499 
	#OBJ_dod
 
OBJ_‹g
,6L

	)

2501 
	#SN_ü«
 "IANA"

	)

2502 
	#LN_ü«
 "ü«"

	)

2503 
	#NID_ü«
 381

	)

2504 
	#OBJ_ü«
 
OBJ_dod
,1L

	)

2506 
	#OBJ_öã∫ë
 
OBJ_ü«


	)

2508 
	#SN_Dúe˘‹y
 "dúe˘‹y"

	)

2509 
	#LN_Dúe˘‹y
 "Dúe˘‹y"

	)

2510 
	#NID_Dúe˘‹y
 382

	)

2511 
	#OBJ_Dúe˘‹y
 
OBJ_öã∫ë
,1L

	)

2513 
	#SN_M™agemít
 "mgmt"

	)

2514 
	#LN_M™agemít
 "M™agemít"

	)

2515 
	#NID_M™agemít
 383

	)

2516 
	#OBJ_M™agemít
 
OBJ_öã∫ë
,2L

	)

2518 
	#SN_Ex≥rimíèl
 "ex≥rimíèl"

	)

2519 
	#LN_Ex≥rimíèl
 "Ex≥rimíèl"

	)

2520 
	#NID_Ex≥rimíèl
 384

	)

2521 
	#OBJ_Ex≥rimíèl
 
OBJ_öã∫ë
,3L

	)

2523 
	#SN_Priv©e
 "¥iv©e"

	)

2524 
	#LN_Priv©e
 "Priv©e"

	)

2525 
	#NID_Priv©e
 385

	)

2526 
	#OBJ_Priv©e
 
OBJ_öã∫ë
,4L

	)

2528 
	#SN_Securôy
 "£curôy"

	)

2529 
	#LN_Securôy
 "Securôy"

	)

2530 
	#NID_Securôy
 386

	)

2531 
	#OBJ_Securôy
 
OBJ_öã∫ë
,5L

	)

2533 
	#SN_SNMPv2
 "¢mpv2"

	)

2534 
	#LN_SNMPv2
 "SNMPv2"

	)

2535 
	#NID_SNMPv2
 387

	)

2536 
	#OBJ_SNMPv2
 
OBJ_öã∫ë
,6L

	)

2538 
	#LN_Maû
 "Maû"

	)

2539 
	#NID_Maû
 388

	)

2540 
	#OBJ_Maû
 
OBJ_öã∫ë
,7L

	)

2542 
	#SN_E¡î¥i£s
 "íãΩri£s"

	)

2543 
	#LN_E¡î¥i£s
 "E¡î¥i£s"

	)

2544 
	#NID_E¡î¥i£s
 389

	)

2545 
	#OBJ_E¡î¥i£s
 
OBJ_Priv©e
,1L

	)

2547 
	#SN_dcObje˘
 "dcobje˘"

	)

2548 
	#LN_dcObje˘
 "dcObje˘"

	)

2549 
	#NID_dcObje˘
 390

	)

2550 
	#OBJ_dcObje˘
 
OBJ_E¡î¥i£s
,1466L,344L

	)

2552 
	#SN_mime_mhs
 "mime-mhs"

	)

2553 
	#LN_mime_mhs
 "MIME MHS"

	)

2554 
	#NID_mime_mhs
 504

	)

2555 
	#OBJ_mime_mhs
 
OBJ_Maû
,1L

	)

2557 
	#SN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2558 
	#LN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2559 
	#NID_mime_mhs_hódögs
 505

	)

2560 
	#OBJ_mime_mhs_hódögs
 
OBJ_mime_mhs
,1L

	)

2562 
	#SN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2563 
	#LN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2564 
	#NID_mime_mhs_bodõs
 506

	)

2565 
	#OBJ_mime_mhs_bodõs
 
OBJ_mime_mhs
,2L

	)

2567 
	#SN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2568 
	#LN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2569 
	#NID_id_hex_∑πül_mesßge
 507

	)

2570 
	#OBJ_id_hex_∑πül_mesßge
 
OBJ_mime_mhs_hódögs
,1L

	)

2572 
	#SN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2573 
	#LN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2574 
	#NID_id_hex_mu…ù¨t_mesßge
 508

	)

2575 
	#OBJ_id_hex_mu…ù¨t_mesßge
 
OBJ_mime_mhs_hódögs
,2L

	)

2577 
	#SN_æe_com¥essi⁄
 "RLE"

	)

2578 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

2579 
	#NID_æe_com¥essi⁄
 124

	)

2580 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

2582 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

2583 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

2584 
	#NID_zlib_com¥essi⁄
 125

	)

2585 
	#OBJ_zlib_com¥essi⁄
 
OBJ_id_smime_Æg
,8L

	)

2587 
	#OBJ_cs‹
 2L,16L,840L,1L,101L,3L

	)

2589 
	#OBJ_ni°Alg‹ôhms
 
OBJ_cs‹
,4L

	)

2591 
	#OBJ_´s
 
OBJ_ni°Alg‹ôhms
,1L

	)

2593 
	#SN_´s_128_ecb
 "AES-128-ECB"

	)

2594 
	#LN_´s_128_ecb
 "´s-128-ecb"

	)

2595 
	#NID_´s_128_ecb
 418

	)

2596 
	#OBJ_´s_128_ecb
 
OBJ_´s
,1L

	)

2598 
	#SN_´s_128_cbc
 "AES-128-CBC"

	)

2599 
	#LN_´s_128_cbc
 "´s-128-cbc"

	)

2600 
	#NID_´s_128_cbc
 419

	)

2601 
	#OBJ_´s_128_cbc
 
OBJ_´s
,2L

	)

2603 
	#SN_´s_128_ofb128
 "AES-128-OFB"

	)

2604 
	#LN_´s_128_ofb128
 "´s-128-ofb"

	)

2605 
	#NID_´s_128_ofb128
 420

	)

2606 
	#OBJ_´s_128_ofb128
 
OBJ_´s
,3L

	)

2608 
	#SN_´s_128_cfb128
 "AES-128-CFB"

	)

2609 
	#LN_´s_128_cfb128
 "´s-128-cfb"

	)

2610 
	#NID_´s_128_cfb128
 421

	)

2611 
	#OBJ_´s_128_cfb128
 
OBJ_´s
,4L

	)

2613 
	#SN_id_´s128_wøp
 "id-´s128-wøp"

	)

2614 
	#NID_id_´s128_wøp
 788

	)

2615 
	#OBJ_id_´s128_wøp
 
OBJ_´s
,5L

	)

2617 
	#SN_´s_128_gcm
 "id-´s128-GCM"

	)

2618 
	#LN_´s_128_gcm
 "´s-128-gcm"

	)

2619 
	#NID_´s_128_gcm
 895

	)

2620 
	#OBJ_´s_128_gcm
 
OBJ_´s
,6L

	)

2622 
	#SN_´s_128_ccm
 "id-´s128-CCM"

	)

2623 
	#LN_´s_128_ccm
 "´s-128-ccm"

	)

2624 
	#NID_´s_128_ccm
 896

	)

2625 
	#OBJ_´s_128_ccm
 
OBJ_´s
,7L

	)

2627 
	#SN_id_´s128_wøp_∑d
 "id-´s128-wøp-∑d"

	)

2628 
	#NID_id_´s128_wøp_∑d
 897

	)

2629 
	#OBJ_id_´s128_wøp_∑d
 
OBJ_´s
,8L

	)

2631 
	#SN_´s_192_ecb
 "AES-192-ECB"

	)

2632 
	#LN_´s_192_ecb
 "´s-192-ecb"

	)

2633 
	#NID_´s_192_ecb
 422

	)

2634 
	#OBJ_´s_192_ecb
 
OBJ_´s
,21L

	)

2636 
	#SN_´s_192_cbc
 "AES-192-CBC"

	)

2637 
	#LN_´s_192_cbc
 "´s-192-cbc"

	)

2638 
	#NID_´s_192_cbc
 423

	)

2639 
	#OBJ_´s_192_cbc
 
OBJ_´s
,22L

	)

2641 
	#SN_´s_192_ofb128
 "AES-192-OFB"

	)

2642 
	#LN_´s_192_ofb128
 "´s-192-ofb"

	)

2643 
	#NID_´s_192_ofb128
 424

	)

2644 
	#OBJ_´s_192_ofb128
 
OBJ_´s
,23L

	)

2646 
	#SN_´s_192_cfb128
 "AES-192-CFB"

	)

2647 
	#LN_´s_192_cfb128
 "´s-192-cfb"

	)

2648 
	#NID_´s_192_cfb128
 425

	)

2649 
	#OBJ_´s_192_cfb128
 
OBJ_´s
,24L

	)

2651 
	#SN_id_´s192_wøp
 "id-´s192-wøp"

	)

2652 
	#NID_id_´s192_wøp
 789

	)

2653 
	#OBJ_id_´s192_wøp
 
OBJ_´s
,25L

	)

2655 
	#SN_´s_192_gcm
 "id-´s192-GCM"

	)

2656 
	#LN_´s_192_gcm
 "´s-192-gcm"

	)

2657 
	#NID_´s_192_gcm
 898

	)

2658 
	#OBJ_´s_192_gcm
 
OBJ_´s
,26L

	)

2660 
	#SN_´s_192_ccm
 "id-´s192-CCM"

	)

2661 
	#LN_´s_192_ccm
 "´s-192-ccm"

	)

2662 
	#NID_´s_192_ccm
 899

	)

2663 
	#OBJ_´s_192_ccm
 
OBJ_´s
,27L

	)

2665 
	#SN_id_´s192_wøp_∑d
 "id-´s192-wøp-∑d"

	)

2666 
	#NID_id_´s192_wøp_∑d
 900

	)

2667 
	#OBJ_id_´s192_wøp_∑d
 
OBJ_´s
,28L

	)

2669 
	#SN_´s_256_ecb
 "AES-256-ECB"

	)

2670 
	#LN_´s_256_ecb
 "´s-256-ecb"

	)

2671 
	#NID_´s_256_ecb
 426

	)

2672 
	#OBJ_´s_256_ecb
 
OBJ_´s
,41L

	)

2674 
	#SN_´s_256_cbc
 "AES-256-CBC"

	)

2675 
	#LN_´s_256_cbc
 "´s-256-cbc"

	)

2676 
	#NID_´s_256_cbc
 427

	)

2677 
	#OBJ_´s_256_cbc
 
OBJ_´s
,42L

	)

2679 
	#SN_´s_256_ofb128
 "AES-256-OFB"

	)

2680 
	#LN_´s_256_ofb128
 "´s-256-ofb"

	)

2681 
	#NID_´s_256_ofb128
 428

	)

2682 
	#OBJ_´s_256_ofb128
 
OBJ_´s
,43L

	)

2684 
	#SN_´s_256_cfb128
 "AES-256-CFB"

	)

2685 
	#LN_´s_256_cfb128
 "´s-256-cfb"

	)

2686 
	#NID_´s_256_cfb128
 429

	)

2687 
	#OBJ_´s_256_cfb128
 
OBJ_´s
,44L

	)

2689 
	#SN_id_´s256_wøp
 "id-´s256-wøp"

	)

2690 
	#NID_id_´s256_wøp
 790

	)

2691 
	#OBJ_id_´s256_wøp
 
OBJ_´s
,45L

	)

2693 
	#SN_´s_256_gcm
 "id-´s256-GCM"

	)

2694 
	#LN_´s_256_gcm
 "´s-256-gcm"

	)

2695 
	#NID_´s_256_gcm
 901

	)

2696 
	#OBJ_´s_256_gcm
 
OBJ_´s
,46L

	)

2698 
	#SN_´s_256_ccm
 "id-´s256-CCM"

	)

2699 
	#LN_´s_256_ccm
 "´s-256-ccm"

	)

2700 
	#NID_´s_256_ccm
 902

	)

2701 
	#OBJ_´s_256_ccm
 
OBJ_´s
,47L

	)

2703 
	#SN_id_´s256_wøp_∑d
 "id-´s256-wøp-∑d"

	)

2704 
	#NID_id_´s256_wøp_∑d
 903

	)

2705 
	#OBJ_id_´s256_wøp_∑d
 
OBJ_´s
,48L

	)

2707 
	#SN_´s_128_cfb1
 "AES-128-CFB1"

	)

2708 
	#LN_´s_128_cfb1
 "´s-128-cfb1"

	)

2709 
	#NID_´s_128_cfb1
 650

	)

2711 
	#SN_´s_192_cfb1
 "AES-192-CFB1"

	)

2712 
	#LN_´s_192_cfb1
 "´s-192-cfb1"

	)

2713 
	#NID_´s_192_cfb1
 651

	)

2715 
	#SN_´s_256_cfb1
 "AES-256-CFB1"

	)

2716 
	#LN_´s_256_cfb1
 "´s-256-cfb1"

	)

2717 
	#NID_´s_256_cfb1
 652

	)

2719 
	#SN_´s_128_cfb8
 "AES-128-CFB8"

	)

2720 
	#LN_´s_128_cfb8
 "´s-128-cfb8"

	)

2721 
	#NID_´s_128_cfb8
 653

	)

2723 
	#SN_´s_192_cfb8
 "AES-192-CFB8"

	)

2724 
	#LN_´s_192_cfb8
 "´s-192-cfb8"

	)

2725 
	#NID_´s_192_cfb8
 654

	)

2727 
	#SN_´s_256_cfb8
 "AES-256-CFB8"

	)

2728 
	#LN_´s_256_cfb8
 "´s-256-cfb8"

	)

2729 
	#NID_´s_256_cfb8
 655

	)

2731 
	#SN_´s_128_˘r
 "AES-128-CTR"

	)

2732 
	#LN_´s_128_˘r
 "´s-128-˘r"

	)

2733 
	#NID_´s_128_˘r
 904

	)

2735 
	#SN_´s_192_˘r
 "AES-192-CTR"

	)

2736 
	#LN_´s_192_˘r
 "´s-192-˘r"

	)

2737 
	#NID_´s_192_˘r
 905

	)

2739 
	#SN_´s_256_˘r
 "AES-256-CTR"

	)

2740 
	#LN_´s_256_˘r
 "´s-256-˘r"

	)

2741 
	#NID_´s_256_˘r
 906

	)

2743 
	#SN_´s_128_xts
 "AES-128-XTS"

	)

2744 
	#LN_´s_128_xts
 "´s-128-xts"

	)

2745 
	#NID_´s_128_xts
 913

	)

2747 
	#SN_´s_256_xts
 "AES-256-XTS"

	)

2748 
	#LN_´s_256_xts
 "´s-256-xts"

	)

2749 
	#NID_´s_256_xts
 914

	)

2751 
	#SN_des_cfb1
 "DES-CFB1"

	)

2752 
	#LN_des_cfb1
 "des-cfb1"

	)

2753 
	#NID_des_cfb1
 656

	)

2755 
	#SN_des_cfb8
 "DES-CFB8"

	)

2756 
	#LN_des_cfb8
 "des-cfb8"

	)

2757 
	#NID_des_cfb8
 657

	)

2759 
	#SN_des_ede3_cfb1
 "DES-EDE3-CFB1"

	)

2760 
	#LN_des_ede3_cfb1
 "des-ede3-cfb1"

	)

2761 
	#NID_des_ede3_cfb1
 658

	)

2763 
	#SN_des_ede3_cfb8
 "DES-EDE3-CFB8"

	)

2764 
	#LN_des_ede3_cfb8
 "des-ede3-cfb8"

	)

2765 
	#NID_des_ede3_cfb8
 659

	)

2767 
	#OBJ_ni°_hashÆgs
 
OBJ_ni°Alg‹ôhms
,2L

	)

2769 
	#SN_sha256
 "SHA256"

	)

2770 
	#LN_sha256
 "sha256"

	)

2771 
	#NID_sha256
 672

	)

2772 
	#OBJ_sha256
 
OBJ_ni°_hashÆgs
,1L

	)

2774 
	#SN_sha384
 "SHA384"

	)

2775 
	#LN_sha384
 "sha384"

	)

2776 
	#NID_sha384
 673

	)

2777 
	#OBJ_sha384
 
OBJ_ni°_hashÆgs
,2L

	)

2779 
	#SN_sha512
 "SHA512"

	)

2780 
	#LN_sha512
 "sha512"

	)

2781 
	#NID_sha512
 674

	)

2782 
	#OBJ_sha512
 
OBJ_ni°_hashÆgs
,3L

	)

2784 
	#SN_sha224
 "SHA224"

	)

2785 
	#LN_sha224
 "sha224"

	)

2786 
	#NID_sha224
 675

	)

2787 
	#OBJ_sha224
 
OBJ_ni°_hashÆgs
,4L

	)

2789 
	#OBJ_dß_wôh_sha2
 
OBJ_ni°Alg‹ôhms
,3L

	)

2791 
	#SN_dß_wôh_SHA224
 "dß_wôh_SHA224"

	)

2792 
	#NID_dß_wôh_SHA224
 802

	)

2793 
	#OBJ_dß_wôh_SHA224
 
OBJ_dß_wôh_sha2
,1L

	)

2795 
	#SN_dß_wôh_SHA256
 "dß_wôh_SHA256"

	)

2796 
	#NID_dß_wôh_SHA256
 803

	)

2797 
	#OBJ_dß_wôh_SHA256
 
OBJ_dß_wôh_sha2
,2L

	)

2799 
	#SN_hﬁd_ö°ru˘i⁄_code
 "hﬁdIn°ru˘i⁄Code"

	)

2800 
	#LN_hﬁd_ö°ru˘i⁄_code
 "Hﬁd In°ru˘i⁄ Code"

	)

2801 
	#NID_hﬁd_ö°ru˘i⁄_code
 430

	)

2802 
	#OBJ_hﬁd_ö°ru˘i⁄_code
 
OBJ_id_˚
,23L

	)

2804 
	#OBJ_hﬁdIn°ru˘i⁄
 
OBJ_X9_57
,2L

	)

2806 
	#SN_hﬁd_ö°ru˘i⁄_n⁄e
 "hﬁdIn°ru˘i⁄N⁄e"

	)

2807 
	#LN_hﬁd_ö°ru˘i⁄_n⁄e
 "Hﬁd In°ru˘i⁄ N⁄e"

	)

2808 
	#NID_hﬁd_ö°ru˘i⁄_n⁄e
 431

	)

2809 
	#OBJ_hﬁd_ö°ru˘i⁄_n⁄e
 
OBJ_hﬁdIn°ru˘i⁄
,1L

	)

2811 
	#SN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "hﬁdIn°ru˘i⁄CÆlIssuî"

	)

2812 
	#LN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "Hﬁd In°ru˘i⁄ CÆ»Issuî"

	)

2813 
	#NID_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 432

	)

2814 
	#OBJ_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 
OBJ_hﬁdIn°ru˘i⁄
,2L

	)

2816 
	#SN_hﬁd_ö°ru˘i⁄_ªje˘
 "hﬁdIn°ru˘i⁄Reje˘"

	)

2817 
	#LN_hﬁd_ö°ru˘i⁄_ªje˘
 "Hﬁd In°ru˘i⁄ Reje˘"

	)

2818 
	#NID_hﬁd_ö°ru˘i⁄_ªje˘
 433

	)

2819 
	#OBJ_hﬁd_ö°ru˘i⁄_ªje˘
 
OBJ_hﬁdIn°ru˘i⁄
,3L

	)

2821 
	#SN_d©a
 "d©a"

	)

2822 
	#NID_d©a
 434

	)

2823 
	#OBJ_d©a
 
OBJ_ôu_t
,9L

	)

2825 
	#SN_pss
 "pss"

	)

2826 
	#NID_pss
 435

	)

2827 
	#OBJ_pss
 
OBJ_d©a
,2342L

	)

2829 
	#SN_u˛
 "u˛"

	)

2830 
	#NID_u˛
 436

	)

2831 
	#OBJ_u˛
 
OBJ_pss
,19200300L

	)

2833 
	#SN_pûŸ
 "pûŸ"

	)

2834 
	#NID_pûŸ
 437

	)

2835 
	#OBJ_pûŸ
 
OBJ_u˛
,100L

	)

2837 
	#LN_pûŸAâribuãTy≥
 "pûŸAâribuãTy≥"

	)

2838 
	#NID_pûŸAâribuãTy≥
 438

	)

2839 
	#OBJ_pûŸAâribuãTy≥
 
OBJ_pûŸ
,1L

	)

2841 
	#LN_pûŸAâribuãSy¡ax
 "pûŸAâribuãSy¡ax"

	)

2842 
	#NID_pûŸAâribuãSy¡ax
 439

	)

2843 
	#OBJ_pûŸAâribuãSy¡ax
 
OBJ_pûŸ
,3L

	)

2845 
	#LN_pûŸObje˘Cœss
 "pûŸObje˘Cœss"

	)

2846 
	#NID_pûŸObje˘Cœss
 440

	)

2847 
	#OBJ_pûŸObje˘Cœss
 
OBJ_pûŸ
,4L

	)

2849 
	#LN_pûŸGroups
 "pûŸGroups"

	)

2850 
	#NID_pûŸGroups
 441

	)

2851 
	#OBJ_pûŸGroups
 
OBJ_pûŸ
,10L

	)

2853 
	#LN_iA5SåögSy¡ax
 "iA5SåögSy¡ax"

	)

2854 
	#NID_iA5SåögSy¡ax
 442

	)

2855 
	#OBJ_iA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,4L

	)

2857 
	#LN_ˇ£Ign‹eIA5SåögSy¡ax
 "ˇ£Ign‹eIA5SåögSy¡ax"

	)

2858 
	#NID_ˇ£Ign‹eIA5SåögSy¡ax
 443

	)

2859 
	#OBJ_ˇ£Ign‹eIA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,5L

	)

2861 
	#LN_pûŸObje˘
 "pûŸObje˘"

	)

2862 
	#NID_pûŸObje˘
 444

	)

2863 
	#OBJ_pûŸObje˘
 
OBJ_pûŸObje˘Cœss
,3L

	)

2865 
	#LN_pûŸPîs⁄
 "pûŸPîs⁄"

	)

2866 
	#NID_pûŸPîs⁄
 445

	)

2867 
	#OBJ_pûŸPîs⁄
 
OBJ_pûŸObje˘Cœss
,4L

	)

2869 
	#SN_accou¡
 "accou¡"

	)

2870 
	#NID_accou¡
 446

	)

2871 
	#OBJ_accou¡
 
OBJ_pûŸObje˘Cœss
,5L

	)

2873 
	#SN_documít
 "documít"

	)

2874 
	#NID_documít
 447

	)

2875 
	#OBJ_documít
 
OBJ_pûŸObje˘Cœss
,6L

	)

2877 
	#SN_room
 "room"

	)

2878 
	#NID_room
 448

	)

2879 
	#OBJ_room
 
OBJ_pûŸObje˘Cœss
,7L

	)

2881 
	#LN_documítSîõs
 "documítSîõs"

	)

2882 
	#NID_documítSîõs
 449

	)

2883 
	#OBJ_documítSîõs
 
OBJ_pûŸObje˘Cœss
,9L

	)

2885 
	#SN_Domaö
 "domaö"

	)

2886 
	#LN_Domaö
 "Domaö"

	)

2887 
	#NID_Domaö
 392

	)

2888 
	#OBJ_Domaö
 
OBJ_pûŸObje˘Cœss
,13L

	)

2890 
	#LN_rFC822loˇlP¨t
 "rFC822loˇlP¨t"

	)

2891 
	#NID_rFC822loˇlP¨t
 450

	)

2892 
	#OBJ_rFC822loˇlP¨t
 
OBJ_pûŸObje˘Cœss
,14L

	)

2894 
	#LN_dNSDomaö
 "dNSDomaö"

	)

2895 
	#NID_dNSDomaö
 451

	)

2896 
	#OBJ_dNSDomaö
 
OBJ_pûŸObje˘Cœss
,15L

	)

2898 
	#LN_domaöRñ©edObje˘
 "domaöRñ©edObje˘"

	)

2899 
	#NID_domaöRñ©edObje˘
 452

	)

2900 
	#OBJ_domaöRñ©edObje˘
 
OBJ_pûŸObje˘Cœss
,17L

	)

2902 
	#LN_‰õndlyCou¡ry
 "‰õndlyCou¡ry"

	)

2903 
	#NID_‰õndlyCou¡ry
 453

	)

2904 
	#OBJ_‰õndlyCou¡ry
 
OBJ_pûŸObje˘Cœss
,18L

	)

2906 
	#LN_sim∂eSecurôyObje˘
 "sim∂eSecurôyObje˘"

	)

2907 
	#NID_sim∂eSecurôyObje˘
 454

	)

2908 
	#OBJ_sim∂eSecurôyObje˘
 
OBJ_pûŸObje˘Cœss
,19L

	)

2910 
	#LN_pûŸOrg™iz©i⁄
 "pûŸOrg™iz©i⁄"

	)

2911 
	#NID_pûŸOrg™iz©i⁄
 455

	)

2912 
	#OBJ_pûŸOrg™iz©i⁄
 
OBJ_pûŸObje˘Cœss
,20L

	)

2914 
	#LN_pûŸDSA
 "pûŸDSA"

	)

2915 
	#NID_pûŸDSA
 456

	)

2916 
	#OBJ_pûŸDSA
 
OBJ_pûŸObje˘Cœss
,21L

	)

2918 
	#LN_quÆôyLabñÀdD©a
 "quÆôyLabñÀdD©a"

	)

2919 
	#NID_quÆôyLabñÀdD©a
 457

	)

2920 
	#OBJ_quÆôyLabñÀdD©a
 
OBJ_pûŸObje˘Cœss
,22L

	)

2922 
	#SN_u£rId
 "UID"

	)

2923 
	#LN_u£rId
 "u£rId"

	)

2924 
	#NID_u£rId
 458

	)

2925 
	#OBJ_u£rId
 
OBJ_pûŸAâribuãTy≥
,1L

	)

2927 
	#LN_ãxtEncodedORAddªss
 "ãxtEncodedORAddªss"

	)

2928 
	#NID_ãxtEncodedORAddªss
 459

	)

2929 
	#OBJ_ãxtEncodedORAddªss
 
OBJ_pûŸAâribuãTy≥
,2L

	)

2931 
	#SN_rfc822Maûbox
 "maû"

	)

2932 
	#LN_rfc822Maûbox
 "rfc822Maûbox"

	)

2933 
	#NID_rfc822Maûbox
 460

	)

2934 
	#OBJ_rfc822Maûbox
 
OBJ_pûŸAâribuãTy≥
,3L

	)

2936 
	#SN_öfo
 "öfo"

	)

2937 
	#NID_öfo
 461

	)

2938 
	#OBJ_öfo
 
OBJ_pûŸAâribuãTy≥
,4L

	)

2940 
	#LN_ÁvourôeDrök
 "ÁvourôeDrök"

	)

2941 
	#NID_ÁvourôeDrök
 462

	)

2942 
	#OBJ_ÁvourôeDrök
 
OBJ_pûŸAâribuãTy≥
,5L

	)

2944 
	#LN_roomNumbî
 "roomNumbî"

	)

2945 
	#NID_roomNumbî
 463

	)

2946 
	#OBJ_roomNumbî
 
OBJ_pûŸAâribuãTy≥
,6L

	)

2948 
	#SN_phŸo
 "phŸo"

	)

2949 
	#NID_phŸo
 464

	)

2950 
	#OBJ_phŸo
 
OBJ_pûŸAâribuãTy≥
,7L

	)

2952 
	#LN_u£rCœss
 "u£rCœss"

	)

2953 
	#NID_u£rCœss
 465

	)

2954 
	#OBJ_u£rCœss
 
OBJ_pûŸAâribuãTy≥
,8L

	)

2956 
	#SN_ho°
 "ho°"

	)

2957 
	#NID_ho°
 466

	)

2958 
	#OBJ_ho°
 
OBJ_pûŸAâribuãTy≥
,9L

	)

2960 
	#SN_m™agî
 "m™agî"

	)

2961 
	#NID_m™agî
 467

	)

2962 
	#OBJ_m™agî
 
OBJ_pûŸAâribuãTy≥
,10L

	)

2964 
	#LN_documítIdítifõr
 "documítIdítifõr"

	)

2965 
	#NID_documítIdítifõr
 468

	)

2966 
	#OBJ_documítIdítifõr
 
OBJ_pûŸAâribuãTy≥
,11L

	)

2968 
	#LN_documítTôÀ
 "documítTôÀ"

	)

2969 
	#NID_documítTôÀ
 469

	)

2970 
	#OBJ_documítTôÀ
 
OBJ_pûŸAâribuãTy≥
,12L

	)

2972 
	#LN_documítVîsi⁄
 "documítVîsi⁄"

	)

2973 
	#NID_documítVîsi⁄
 470

	)

2974 
	#OBJ_documítVîsi⁄
 
OBJ_pûŸAâribuãTy≥
,13L

	)

2976 
	#LN_documítAuth‹
 "documítAuth‹"

	)

2977 
	#NID_documítAuth‹
 471

	)

2978 
	#OBJ_documítAuth‹
 
OBJ_pûŸAâribuãTy≥
,14L

	)

2980 
	#LN_documítLoˇti⁄
 "documítLoˇti⁄"

	)

2981 
	#NID_documítLoˇti⁄
 472

	)

2982 
	#OBJ_documítLoˇti⁄
 
OBJ_pûŸAâribuãTy≥
,15L

	)

2984 
	#LN_homeTñïh⁄eNumbî
 "homeTñïh⁄eNumbî"

	)

2985 
	#NID_homeTñïh⁄eNumbî
 473

	)

2986 
	#OBJ_homeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,20L

	)

2988 
	#SN_£¸ë¨y
 "£¸ë¨y"

	)

2989 
	#NID_£¸ë¨y
 474

	)

2990 
	#OBJ_£¸ë¨y
 
OBJ_pûŸAâribuãTy≥
,21L

	)

2992 
	#LN_ŸhîMaûbox
 "ŸhîMaûbox"

	)

2993 
	#NID_ŸhîMaûbox
 475

	)

2994 
	#OBJ_ŸhîMaûbox
 
OBJ_pûŸAâribuãTy≥
,22L

	)

2996 
	#LN_œ°ModifõdTime
 "œ°ModifõdTime"

	)

2997 
	#NID_œ°ModifõdTime
 476

	)

2998 
	#OBJ_œ°ModifõdTime
 
OBJ_pûŸAâribuãTy≥
,23L

	)

3000 
	#LN_œ°ModifõdBy
 "œ°ModifõdBy"

	)

3001 
	#NID_œ°ModifõdBy
 477

	)

3002 
	#OBJ_œ°ModifõdBy
 
OBJ_pûŸAâribuãTy≥
,24L

	)

3004 
	#SN_domaöComp⁄ít
 "DC"

	)

3005 
	#LN_domaöComp⁄ít
 "domaöComp⁄ít"

	)

3006 
	#NID_domaöComp⁄ít
 391

	)

3007 
	#OBJ_domaöComp⁄ít
 
OBJ_pûŸAâribuãTy≥
,25L

	)

3009 
	#LN_aRec‹d
 "aRec‹d"

	)

3010 
	#NID_aRec‹d
 478

	)

3011 
	#OBJ_aRec‹d
 
OBJ_pûŸAâribuãTy≥
,26L

	)

3013 
	#LN_pûŸAâribuãTy≥27
 "pûŸAâribuãTy≥27"

	)

3014 
	#NID_pûŸAâribuãTy≥27
 479

	)

3015 
	#OBJ_pûŸAâribuãTy≥27
 
OBJ_pûŸAâribuãTy≥
,27L

	)

3017 
	#LN_mXRec‹d
 "mXRec‹d"

	)

3018 
	#NID_mXRec‹d
 480

	)

3019 
	#OBJ_mXRec‹d
 
OBJ_pûŸAâribuãTy≥
,28L

	)

3021 
	#LN_nSRec‹d
 "nSRec‹d"

	)

3022 
	#NID_nSRec‹d
 481

	)

3023 
	#OBJ_nSRec‹d
 
OBJ_pûŸAâribuãTy≥
,29L

	)

3025 
	#LN_sOARec‹d
 "sOARec‹d"

	)

3026 
	#NID_sOARec‹d
 482

	)

3027 
	#OBJ_sOARec‹d
 
OBJ_pûŸAâribuãTy≥
,30L

	)

3029 
	#LN_cNAMERec‹d
 "cNAMERec‹d"

	)

3030 
	#NID_cNAMERec‹d
 483

	)

3031 
	#OBJ_cNAMERec‹d
 
OBJ_pûŸAâribuãTy≥
,31L

	)

3033 
	#LN_assocüãdDomaö
 "assocüãdDomaö"

	)

3034 
	#NID_assocüãdDomaö
 484

	)

3035 
	#OBJ_assocüãdDomaö
 
OBJ_pûŸAâribuãTy≥
,37L

	)

3037 
	#LN_assocüãdName
 "assocüãdName"

	)

3038 
	#NID_assocüãdName
 485

	)

3039 
	#OBJ_assocüãdName
 
OBJ_pûŸAâribuãTy≥
,38L

	)

3041 
	#LN_homePo°ÆAddªss
 "homePo°ÆAddªss"

	)

3042 
	#NID_homePo°ÆAddªss
 486

	)

3043 
	#OBJ_homePo°ÆAddªss
 
OBJ_pûŸAâribuãTy≥
,39L

	)

3045 
	#LN_≥rs⁄ÆTôÀ
 "≥rs⁄ÆTôÀ"

	)

3046 
	#NID_≥rs⁄ÆTôÀ
 487

	)

3047 
	#OBJ_≥rs⁄ÆTôÀ
 
OBJ_pûŸAâribuãTy≥
,40L

	)

3049 
	#LN_mobûeTñïh⁄eNumbî
 "mobûeTñïh⁄eNumbî"

	)

3050 
	#NID_mobûeTñïh⁄eNumbî
 488

	)

3051 
	#OBJ_mobûeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,41L

	)

3053 
	#LN_∑gîTñïh⁄eNumbî
 "∑gîTñïh⁄eNumbî"

	)

3054 
	#NID_∑gîTñïh⁄eNumbî
 489

	)

3055 
	#OBJ_∑gîTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,42L

	)

3057 
	#LN_‰õndlyCou¡ryName
 "‰õndlyCou¡ryName"

	)

3058 
	#NID_‰õndlyCou¡ryName
 490

	)

3059 
	#OBJ_‰õndlyCou¡ryName
 
OBJ_pûŸAâribuãTy≥
,43L

	)

3061 
	#LN_‹g™iz©i⁄ÆSètus
 "‹g™iz©i⁄ÆSètus"

	)

3062 
	#NID_‹g™iz©i⁄ÆSètus
 491

	)

3063 
	#OBJ_‹g™iz©i⁄ÆSètus
 
OBJ_pûŸAâribuãTy≥
,45L

	)

3065 
	#LN_j™ëMaûbox
 "j™ëMaûbox"

	)

3066 
	#NID_j™ëMaûbox
 492

	)

3067 
	#OBJ_j™ëMaûbox
 
OBJ_pûŸAâribuãTy≥
,46L

	)

3069 
	#LN_maûPª„ªn˚O±i⁄
 "maûPª„ªn˚O±i⁄"

	)

3070 
	#NID_maûPª„ªn˚O±i⁄
 493

	)

3071 
	#OBJ_maûPª„ªn˚O±i⁄
 
OBJ_pûŸAâribuãTy≥
,47L

	)

3073 
	#LN_buûdögName
 "buûdögName"

	)

3074 
	#NID_buûdögName
 494

	)

3075 
	#OBJ_buûdögName
 
OBJ_pûŸAâribuãTy≥
,48L

	)

3077 
	#LN_dSAQuÆôy
 "dSAQuÆôy"

	)

3078 
	#NID_dSAQuÆôy
 495

	)

3079 
	#OBJ_dSAQuÆôy
 
OBJ_pûŸAâribuãTy≥
,49L

	)

3081 
	#LN_sögÀLevñQuÆôy
 "sögÀLevñQuÆôy"

	)

3082 
	#NID_sögÀLevñQuÆôy
 496

	)

3083 
	#OBJ_sögÀLevñQuÆôy
 
OBJ_pûŸAâribuãTy≥
,50L

	)

3085 
	#LN_subåìMöimumQuÆôy
 "subåìMöimumQuÆôy"

	)

3086 
	#NID_subåìMöimumQuÆôy
 497

	)

3087 
	#OBJ_subåìMöimumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,51L

	)

3089 
	#LN_subåìMaximumQuÆôy
 "subåìMaximumQuÆôy"

	)

3090 
	#NID_subåìMaximumQuÆôy
 498

	)

3091 
	#OBJ_subåìMaximumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,52L

	)

3093 
	#LN_≥rs⁄ÆSig«tuª
 "≥rs⁄ÆSig«tuª"

	)

3094 
	#NID_≥rs⁄ÆSig«tuª
 499

	)

3095 
	#OBJ_≥rs⁄ÆSig«tuª
 
OBJ_pûŸAâribuãTy≥
,53L

	)

3097 
	#LN_dITRedúe˘
 "dITRedúe˘"

	)

3098 
	#NID_dITRedúe˘
 500

	)

3099 
	#OBJ_dITRedúe˘
 
OBJ_pûŸAâribuãTy≥
,54L

	)

3101 
	#SN_audio
 "audio"

	)

3102 
	#NID_audio
 501

	)

3103 
	#OBJ_audio
 
OBJ_pûŸAâribuãTy≥
,55L

	)

3105 
	#LN_documítPublishî
 "documítPublishî"

	)

3106 
	#NID_documítPublishî
 502

	)

3107 
	#OBJ_documítPublishî
 
OBJ_pûŸAâribuãTy≥
,56L

	)

3109 
	#SN_id_£t
 "id-£t"

	)

3110 
	#LN_id_£t
 "Secuª EÀ˘r⁄i¯Tønß˘i⁄s"

	)

3111 
	#NID_id_£t
 512

	)

3112 
	#OBJ_id_£t
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,42L

	)

3114 
	#SN_£t_˘y≥
 "£t-˘y≥"

	)

3115 
	#LN_£t_˘y≥
 "c⁄ã¡Åy≥s"

	)

3116 
	#NID_£t_˘y≥
 513

	)

3117 
	#OBJ_£t_˘y≥
 
OBJ_id_£t
,0L

	)

3119 
	#SN_£t_msgExt
 "£t-msgExt"

	)

3120 
	#LN_£t_msgExt
 "mesßgêexãnsi⁄s"

	)

3121 
	#NID_£t_msgExt
 514

	)

3122 
	#OBJ_£t_msgExt
 
OBJ_id_£t
,1L

	)

3124 
	#SN_£t_©å
 "£t-©å"

	)

3125 
	#NID_£t_©å
 515

	)

3126 
	#OBJ_£t_©å
 
OBJ_id_£t
,3L

	)

3128 
	#SN_£t_pﬁicy
 "£t-pﬁicy"

	)

3129 
	#NID_£t_pﬁicy
 516

	)

3130 
	#OBJ_£t_pﬁicy
 
OBJ_id_£t
,5L

	)

3132 
	#SN_£t_˚πExt
 "£t-˚πExt"

	)

3133 
	#LN_£t_˚πExt
 "˚πifiˇãÉxãnsi⁄s"

	)

3134 
	#NID_£t_˚πExt
 517

	)

3135 
	#OBJ_£t_˚πExt
 
OBJ_id_£t
,7L

	)

3137 
	#SN_£t_bønd
 "£t-bønd"

	)

3138 
	#NID_£t_bønd
 518

	)

3139 
	#OBJ_£t_bønd
 
OBJ_id_£t
,8L

	)

3141 
	#SN_£t˘_PAND©a
 "£t˘-PAND©a"

	)

3142 
	#NID_£t˘_PAND©a
 519

	)

3143 
	#OBJ_£t˘_PAND©a
 
OBJ_£t_˘y≥
,0L

	)

3145 
	#SN_£t˘_PANTokí
 "£t˘-PANTokí"

	)

3146 
	#NID_£t˘_PANTokí
 520

	)

3147 
	#OBJ_£t˘_PANTokí
 
OBJ_£t_˘y≥
,1L

	)

3149 
	#SN_£t˘_PANO∆y
 "£t˘-PANO∆y"

	)

3150 
	#NID_£t˘_PANO∆y
 521

	)

3151 
	#OBJ_£t˘_PANO∆y
 
OBJ_£t_˘y≥
,2L

	)

3153 
	#SN_£t˘_OID©a
 "£t˘-OID©a"

	)

3154 
	#NID_£t˘_OID©a
 522

	)

3155 
	#OBJ_£t˘_OID©a
 
OBJ_£t_˘y≥
,3L

	)

3157 
	#SN_£t˘_PI
 "£t˘-PI"

	)

3158 
	#NID_£t˘_PI
 523

	)

3159 
	#OBJ_£t˘_PI
 
OBJ_£t_˘y≥
,4L

	)

3161 
	#SN_£t˘_PID©a
 "£t˘-PID©a"

	)

3162 
	#NID_£t˘_PID©a
 524

	)

3163 
	#OBJ_£t˘_PID©a
 
OBJ_£t_˘y≥
,5L

	)

3165 
	#SN_£t˘_PID©aUnsig√d
 "£t˘-PID©aUnsig√d"

	)

3166 
	#NID_£t˘_PID©aUnsig√d
 525

	)

3167 
	#OBJ_£t˘_PID©aUnsig√d
 
OBJ_£t_˘y≥
,6L

	)

3169 
	#SN_£t˘_HODI≈ut
 "£t˘-HODI≈ut"

	)

3170 
	#NID_£t˘_HODI≈ut
 526

	)

3171 
	#OBJ_£t˘_HODI≈ut
 
OBJ_£t_˘y≥
,7L

	)

3173 
	#SN_£t˘_AuthResBaggage
 "£t˘-AuthResBaggage"

	)

3174 
	#NID_£t˘_AuthResBaggage
 527

	)

3175 
	#OBJ_£t˘_AuthResBaggage
 
OBJ_£t_˘y≥
,8L

	)

3177 
	#SN_£t˘_AuthRevReqBaggage
 "£t˘-AuthRevReqBaggage"

	)

3178 
	#NID_£t˘_AuthRevReqBaggage
 528

	)

3179 
	#OBJ_£t˘_AuthRevReqBaggage
 
OBJ_£t_˘y≥
,9L

	)

3181 
	#SN_£t˘_AuthRevResBaggage
 "£t˘-AuthRevResBaggage"

	)

3182 
	#NID_£t˘_AuthRevResBaggage
 529

	)

3183 
	#OBJ_£t˘_AuthRevResBaggage
 
OBJ_£t_˘y≥
,10L

	)

3185 
	#SN_£t˘_C≠TokíSeq
 "£t˘-C≠TokíSeq"

	)

3186 
	#NID_£t˘_C≠TokíSeq
 530

	)

3187 
	#OBJ_£t˘_C≠TokíSeq
 
OBJ_£t_˘y≥
,11L

	)

3189 
	#SN_£t˘_PInôResD©a
 "£t˘-PInôResD©a"

	)

3190 
	#NID_£t˘_PInôResD©a
 531

	)

3191 
	#OBJ_£t˘_PInôResD©a
 
OBJ_£t_˘y≥
,12L

	)

3193 
	#SN_£t˘_PI_TBS
 "£t˘-PI-TBS"

	)

3194 
	#NID_£t˘_PI_TBS
 532

	)

3195 
	#OBJ_£t˘_PI_TBS
 
OBJ_£t_˘y≥
,13L

	)

3197 
	#SN_£t˘_PResD©a
 "£t˘-PResD©a"

	)

3198 
	#NID_£t˘_PResD©a
 533

	)

3199 
	#OBJ_£t˘_PResD©a
 
OBJ_£t_˘y≥
,14L

	)

3201 
	#SN_£t˘_AuthReqTBS
 "£t˘-AuthReqTBS"

	)

3202 
	#NID_£t˘_AuthReqTBS
 534

	)

3203 
	#OBJ_£t˘_AuthReqTBS
 
OBJ_£t_˘y≥
,16L

	)

3205 
	#SN_£t˘_AuthResTBS
 "£t˘-AuthResTBS"

	)

3206 
	#NID_£t˘_AuthResTBS
 535

	)

3207 
	#OBJ_£t˘_AuthResTBS
 
OBJ_£t_˘y≥
,17L

	)

3209 
	#SN_£t˘_AuthResTBSX
 "£t˘-AuthResTBSX"

	)

3210 
	#NID_£t˘_AuthResTBSX
 536

	)

3211 
	#OBJ_£t˘_AuthResTBSX
 
OBJ_£t_˘y≥
,18L

	)

3213 
	#SN_£t˘_AuthTokíTBS
 "£t˘-AuthTokíTBS"

	)

3214 
	#NID_£t˘_AuthTokíTBS
 537

	)

3215 
	#OBJ_£t˘_AuthTokíTBS
 
OBJ_£t_˘y≥
,19L

	)

3217 
	#SN_£t˘_C≠TokíD©a
 "£t˘-C≠TokíD©a"

	)

3218 
	#NID_£t˘_C≠TokíD©a
 538

	)

3219 
	#OBJ_£t˘_C≠TokíD©a
 
OBJ_£t_˘y≥
,20L

	)

3221 
	#SN_£t˘_C≠TokíTBS
 "£t˘-C≠TokíTBS"

	)

3222 
	#NID_£t˘_C≠TokíTBS
 539

	)

3223 
	#OBJ_£t˘_C≠TokíTBS
 
OBJ_£t_˘y≥
,21L

	)

3225 
	#SN_£t˘_AcqC¨dCodeMsg
 "£t˘-AcqC¨dCodeMsg"

	)

3226 
	#NID_£t˘_AcqC¨dCodeMsg
 540

	)

3227 
	#OBJ_£t˘_AcqC¨dCodeMsg
 
OBJ_£t_˘y≥
,22L

	)

3229 
	#SN_£t˘_AuthRevReqTBS
 "£t˘-AuthRevReqTBS"

	)

3230 
	#NID_£t˘_AuthRevReqTBS
 541

	)

3231 
	#OBJ_£t˘_AuthRevReqTBS
 
OBJ_£t_˘y≥
,23L

	)

3233 
	#SN_£t˘_AuthRevResD©a
 "£t˘-AuthRevResD©a"

	)

3234 
	#NID_£t˘_AuthRevResD©a
 542

	)

3235 
	#OBJ_£t˘_AuthRevResD©a
 
OBJ_£t_˘y≥
,24L

	)

3237 
	#SN_£t˘_AuthRevResTBS
 "£t˘-AuthRevResTBS"

	)

3238 
	#NID_£t˘_AuthRevResTBS
 543

	)

3239 
	#OBJ_£t˘_AuthRevResTBS
 
OBJ_£t_˘y≥
,25L

	)

3241 
	#SN_£t˘_C≠ReqTBS
 "£t˘-C≠ReqTBS"

	)

3242 
	#NID_£t˘_C≠ReqTBS
 544

	)

3243 
	#OBJ_£t˘_C≠ReqTBS
 
OBJ_£t_˘y≥
,26L

	)

3245 
	#SN_£t˘_C≠ReqTBSX
 "£t˘-C≠ReqTBSX"

	)

3246 
	#NID_£t˘_C≠ReqTBSX
 545

	)

3247 
	#OBJ_£t˘_C≠ReqTBSX
 
OBJ_£t_˘y≥
,27L

	)

3249 
	#SN_£t˘_C≠ResD©a
 "£t˘-C≠ResD©a"

	)

3250 
	#NID_£t˘_C≠ResD©a
 546

	)

3251 
	#OBJ_£t˘_C≠ResD©a
 
OBJ_£t_˘y≥
,28L

	)

3253 
	#SN_£t˘_C≠RevReqTBS
 "£t˘-C≠RevReqTBS"

	)

3254 
	#NID_£t˘_C≠RevReqTBS
 547

	)

3255 
	#OBJ_£t˘_C≠RevReqTBS
 
OBJ_£t_˘y≥
,29L

	)

3257 
	#SN_£t˘_C≠RevReqTBSX
 "£t˘-C≠RevReqTBSX"

	)

3258 
	#NID_£t˘_C≠RevReqTBSX
 548

	)

3259 
	#OBJ_£t˘_C≠RevReqTBSX
 
OBJ_£t_˘y≥
,30L

	)

3261 
	#SN_£t˘_C≠RevResD©a
 "£t˘-C≠RevResD©a"

	)

3262 
	#NID_£t˘_C≠RevResD©a
 549

	)

3263 
	#OBJ_£t˘_C≠RevResD©a
 
OBJ_£t_˘y≥
,31L

	)

3265 
	#SN_£t˘_CªdReqTBS
 "£t˘-CªdReqTBS"

	)

3266 
	#NID_£t˘_CªdReqTBS
 550

	)

3267 
	#OBJ_£t˘_CªdReqTBS
 
OBJ_£t_˘y≥
,32L

	)

3269 
	#SN_£t˘_CªdReqTBSX
 "£t˘-CªdReqTBSX"

	)

3270 
	#NID_£t˘_CªdReqTBSX
 551

	)

3271 
	#OBJ_£t˘_CªdReqTBSX
 
OBJ_£t_˘y≥
,33L

	)

3273 
	#SN_£t˘_CªdResD©a
 "£t˘-CªdResD©a"

	)

3274 
	#NID_£t˘_CªdResD©a
 552

	)

3275 
	#OBJ_£t˘_CªdResD©a
 
OBJ_£t_˘y≥
,34L

	)

3277 
	#SN_£t˘_CªdRevReqTBS
 "£t˘-CªdRevReqTBS"

	)

3278 
	#NID_£t˘_CªdRevReqTBS
 553

	)

3279 
	#OBJ_£t˘_CªdRevReqTBS
 
OBJ_£t_˘y≥
,35L

	)

3281 
	#SN_£t˘_CªdRevReqTBSX
 "£t˘-CªdRevReqTBSX"

	)

3282 
	#NID_£t˘_CªdRevReqTBSX
 554

	)

3283 
	#OBJ_£t˘_CªdRevReqTBSX
 
OBJ_£t_˘y≥
,36L

	)

3285 
	#SN_£t˘_CªdRevResD©a
 "£t˘-CªdRevResD©a"

	)

3286 
	#NID_£t˘_CªdRevResD©a
 555

	)

3287 
	#OBJ_£t˘_CªdRevResD©a
 
OBJ_£t_˘y≥
,37L

	)

3289 
	#SN_£t˘_PCîtReqD©a
 "£t˘-PCîtReqD©a"

	)

3290 
	#NID_£t˘_PCîtReqD©a
 556

	)

3291 
	#OBJ_£t˘_PCîtReqD©a
 
OBJ_£t_˘y≥
,38L

	)

3293 
	#SN_£t˘_PCîtResTBS
 "£t˘-PCîtResTBS"

	)

3294 
	#NID_£t˘_PCîtResTBS
 557

	)

3295 
	#OBJ_£t˘_PCîtResTBS
 
OBJ_£t_˘y≥
,39L

	)

3297 
	#SN_£t˘_B©chAdmöReqD©a
 "£t˘-B©chAdmöReqD©a"

	)

3298 
	#NID_£t˘_B©chAdmöReqD©a
 558

	)

3299 
	#OBJ_£t˘_B©chAdmöReqD©a
 
OBJ_£t_˘y≥
,40L

	)

3301 
	#SN_£t˘_B©chAdmöResD©a
 "£t˘-B©chAdmöResD©a"

	)

3302 
	#NID_£t˘_B©chAdmöResD©a
 559

	)

3303 
	#OBJ_£t˘_B©chAdmöResD©a
 
OBJ_£t_˘y≥
,41L

	)

3305 
	#SN_£t˘_C¨dCInôResTBS
 "£t˘-C¨dCInôResTBS"

	)

3306 
	#NID_£t˘_C¨dCInôResTBS
 560

	)

3307 
	#OBJ_£t˘_C¨dCInôResTBS
 
OBJ_£t_˘y≥
,42L

	)

3309 
	#SN_£t˘_MeAqCInôResTBS
 "£t˘-MeAqCInôResTBS"

	)

3310 
	#NID_£t˘_MeAqCInôResTBS
 561

	)

3311 
	#OBJ_£t˘_MeAqCInôResTBS
 
OBJ_£t_˘y≥
,43L

	)

3313 
	#SN_£t˘_RegF‹mResTBS
 "£t˘-RegF‹mResTBS"

	)

3314 
	#NID_£t˘_RegF‹mResTBS
 562

	)

3315 
	#OBJ_£t˘_RegF‹mResTBS
 
OBJ_£t_˘y≥
,44L

	)

3317 
	#SN_£t˘_CîtReqD©a
 "£t˘-CîtReqD©a"

	)

3318 
	#NID_£t˘_CîtReqD©a
 563

	)

3319 
	#OBJ_£t˘_CîtReqD©a
 
OBJ_£t_˘y≥
,45L

	)

3321 
	#SN_£t˘_CîtReqTBS
 "£t˘-CîtReqTBS"

	)

3322 
	#NID_£t˘_CîtReqTBS
 564

	)

3323 
	#OBJ_£t˘_CîtReqTBS
 
OBJ_£t_˘y≥
,46L

	)

3325 
	#SN_£t˘_CîtResD©a
 "£t˘-CîtResD©a"

	)

3326 
	#NID_£t˘_CîtResD©a
 565

	)

3327 
	#OBJ_£t˘_CîtResD©a
 
OBJ_£t_˘y≥
,47L

	)

3329 
	#SN_£t˘_CîtInqReqTBS
 "£t˘-CîtInqReqTBS"

	)

3330 
	#NID_£t˘_CîtInqReqTBS
 566

	)

3331 
	#OBJ_£t˘_CîtInqReqTBS
 
OBJ_£t_˘y≥
,48L

	)

3333 
	#SN_£t˘_Eº‹TBS
 "£t˘-Eº‹TBS"

	)

3334 
	#NID_£t˘_Eº‹TBS
 567

	)

3335 
	#OBJ_£t˘_Eº‹TBS
 
OBJ_£t_˘y≥
,49L

	)

3337 
	#SN_£t˘_PIDuÆSig√dTBE
 "£t˘-PIDuÆSig√dTBE"

	)

3338 
	#NID_£t˘_PIDuÆSig√dTBE
 568

	)

3339 
	#OBJ_£t˘_PIDuÆSig√dTBE
 
OBJ_£t_˘y≥
,50L

	)

3341 
	#SN_£t˘_PIUnsig√dTBE
 "£t˘-PIUnsig√dTBE"

	)

3342 
	#NID_£t˘_PIUnsig√dTBE
 569

	)

3343 
	#OBJ_£t˘_PIUnsig√dTBE
 
OBJ_£t_˘y≥
,51L

	)

3345 
	#SN_£t˘_AuthReqTBE
 "£t˘-AuthReqTBE"

	)

3346 
	#NID_£t˘_AuthReqTBE
 570

	)

3347 
	#OBJ_£t˘_AuthReqTBE
 
OBJ_£t_˘y≥
,52L

	)

3349 
	#SN_£t˘_AuthResTBE
 "£t˘-AuthResTBE"

	)

3350 
	#NID_£t˘_AuthResTBE
 571

	)

3351 
	#OBJ_£t˘_AuthResTBE
 
OBJ_£t_˘y≥
,53L

	)

3353 
	#SN_£t˘_AuthResTBEX
 "£t˘-AuthResTBEX"

	)

3354 
	#NID_£t˘_AuthResTBEX
 572

	)

3355 
	#OBJ_£t˘_AuthResTBEX
 
OBJ_£t_˘y≥
,54L

	)

3357 
	#SN_£t˘_AuthTokíTBE
 "£t˘-AuthTokíTBE"

	)

3358 
	#NID_£t˘_AuthTokíTBE
 573

	)

3359 
	#OBJ_£t˘_AuthTokíTBE
 
OBJ_£t_˘y≥
,55L

	)

3361 
	#SN_£t˘_C≠TokíTBE
 "£t˘-C≠TokíTBE"

	)

3362 
	#NID_£t˘_C≠TokíTBE
 574

	)

3363 
	#OBJ_£t˘_C≠TokíTBE
 
OBJ_£t_˘y≥
,56L

	)

3365 
	#SN_£t˘_C≠TokíTBEX
 "£t˘-C≠TokíTBEX"

	)

3366 
	#NID_£t˘_C≠TokíTBEX
 575

	)

3367 
	#OBJ_£t˘_C≠TokíTBEX
 
OBJ_£t_˘y≥
,57L

	)

3369 
	#SN_£t˘_AcqC¨dCodeMsgTBE
 "£t˘-AcqC¨dCodeMsgTBE"

	)

3370 
	#NID_£t˘_AcqC¨dCodeMsgTBE
 576

	)

3371 
	#OBJ_£t˘_AcqC¨dCodeMsgTBE
 
OBJ_£t_˘y≥
,58L

	)

3373 
	#SN_£t˘_AuthRevReqTBE
 "£t˘-AuthRevReqTBE"

	)

3374 
	#NID_£t˘_AuthRevReqTBE
 577

	)

3375 
	#OBJ_£t˘_AuthRevReqTBE
 
OBJ_£t_˘y≥
,59L

	)

3377 
	#SN_£t˘_AuthRevResTBE
 "£t˘-AuthRevResTBE"

	)

3378 
	#NID_£t˘_AuthRevResTBE
 578

	)

3379 
	#OBJ_£t˘_AuthRevResTBE
 
OBJ_£t_˘y≥
,60L

	)

3381 
	#SN_£t˘_AuthRevResTBEB
 "£t˘-AuthRevResTBEB"

	)

3382 
	#NID_£t˘_AuthRevResTBEB
 579

	)

3383 
	#OBJ_£t˘_AuthRevResTBEB
 
OBJ_£t_˘y≥
,61L

	)

3385 
	#SN_£t˘_C≠ReqTBE
 "£t˘-C≠ReqTBE"

	)

3386 
	#NID_£t˘_C≠ReqTBE
 580

	)

3387 
	#OBJ_£t˘_C≠ReqTBE
 
OBJ_£t_˘y≥
,62L

	)

3389 
	#SN_£t˘_C≠ReqTBEX
 "£t˘-C≠ReqTBEX"

	)

3390 
	#NID_£t˘_C≠ReqTBEX
 581

	)

3391 
	#OBJ_£t˘_C≠ReqTBEX
 
OBJ_£t_˘y≥
,63L

	)

3393 
	#SN_£t˘_C≠ResTBE
 "£t˘-C≠ResTBE"

	)

3394 
	#NID_£t˘_C≠ResTBE
 582

	)

3395 
	#OBJ_£t˘_C≠ResTBE
 
OBJ_£t_˘y≥
,64L

	)

3397 
	#SN_£t˘_C≠RevReqTBE
 "£t˘-C≠RevReqTBE"

	)

3398 
	#NID_£t˘_C≠RevReqTBE
 583

	)

3399 
	#OBJ_£t˘_C≠RevReqTBE
 
OBJ_£t_˘y≥
,65L

	)

3401 
	#SN_£t˘_C≠RevReqTBEX
 "£t˘-C≠RevReqTBEX"

	)

3402 
	#NID_£t˘_C≠RevReqTBEX
 584

	)

3403 
	#OBJ_£t˘_C≠RevReqTBEX
 
OBJ_£t_˘y≥
,66L

	)

3405 
	#SN_£t˘_C≠RevResTBE
 "£t˘-C≠RevResTBE"

	)

3406 
	#NID_£t˘_C≠RevResTBE
 585

	)

3407 
	#OBJ_£t˘_C≠RevResTBE
 
OBJ_£t_˘y≥
,67L

	)

3409 
	#SN_£t˘_CªdReqTBE
 "£t˘-CªdReqTBE"

	)

3410 
	#NID_£t˘_CªdReqTBE
 586

	)

3411 
	#OBJ_£t˘_CªdReqTBE
 
OBJ_£t_˘y≥
,68L

	)

3413 
	#SN_£t˘_CªdReqTBEX
 "£t˘-CªdReqTBEX"

	)

3414 
	#NID_£t˘_CªdReqTBEX
 587

	)

3415 
	#OBJ_£t˘_CªdReqTBEX
 
OBJ_£t_˘y≥
,69L

	)

3417 
	#SN_£t˘_CªdResTBE
 "£t˘-CªdResTBE"

	)

3418 
	#NID_£t˘_CªdResTBE
 588

	)

3419 
	#OBJ_£t˘_CªdResTBE
 
OBJ_£t_˘y≥
,70L

	)

3421 
	#SN_£t˘_CªdRevReqTBE
 "£t˘-CªdRevReqTBE"

	)

3422 
	#NID_£t˘_CªdRevReqTBE
 589

	)

3423 
	#OBJ_£t˘_CªdRevReqTBE
 
OBJ_£t_˘y≥
,71L

	)

3425 
	#SN_£t˘_CªdRevReqTBEX
 "£t˘-CªdRevReqTBEX"

	)

3426 
	#NID_£t˘_CªdRevReqTBEX
 590

	)

3427 
	#OBJ_£t˘_CªdRevReqTBEX
 
OBJ_£t_˘y≥
,72L

	)

3429 
	#SN_£t˘_CªdRevResTBE
 "£t˘-CªdRevResTBE"

	)

3430 
	#NID_£t˘_CªdRevResTBE
 591

	)

3431 
	#OBJ_£t˘_CªdRevResTBE
 
OBJ_£t_˘y≥
,73L

	)

3433 
	#SN_£t˘_B©chAdmöReqTBE
 "£t˘-B©chAdmöReqTBE"

	)

3434 
	#NID_£t˘_B©chAdmöReqTBE
 592

	)

3435 
	#OBJ_£t˘_B©chAdmöReqTBE
 
OBJ_£t_˘y≥
,74L

	)

3437 
	#SN_£t˘_B©chAdmöResTBE
 "£t˘-B©chAdmöResTBE"

	)

3438 
	#NID_£t˘_B©chAdmöResTBE
 593

	)

3439 
	#OBJ_£t˘_B©chAdmöResTBE
 
OBJ_£t_˘y≥
,75L

	)

3441 
	#SN_£t˘_RegF‹mReqTBE
 "£t˘-RegF‹mReqTBE"

	)

3442 
	#NID_£t˘_RegF‹mReqTBE
 594

	)

3443 
	#OBJ_£t˘_RegF‹mReqTBE
 
OBJ_£t_˘y≥
,76L

	)

3445 
	#SN_£t˘_CîtReqTBE
 "£t˘-CîtReqTBE"

	)

3446 
	#NID_£t˘_CîtReqTBE
 595

	)

3447 
	#OBJ_£t˘_CîtReqTBE
 
OBJ_£t_˘y≥
,77L

	)

3449 
	#SN_£t˘_CîtReqTBEX
 "£t˘-CîtReqTBEX"

	)

3450 
	#NID_£t˘_CîtReqTBEX
 596

	)

3451 
	#OBJ_£t˘_CîtReqTBEX
 
OBJ_£t_˘y≥
,78L

	)

3453 
	#SN_£t˘_CîtResTBE
 "£t˘-CîtResTBE"

	)

3454 
	#NID_£t˘_CîtResTBE
 597

	)

3455 
	#OBJ_£t˘_CîtResTBE
 
OBJ_£t_˘y≥
,79L

	)

3457 
	#SN_£t˘_CRLNŸifiˇti⁄TBS
 "£t˘-CRLNŸifiˇti⁄TBS"

	)

3458 
	#NID_£t˘_CRLNŸifiˇti⁄TBS
 598

	)

3459 
	#OBJ_£t˘_CRLNŸifiˇti⁄TBS
 
OBJ_£t_˘y≥
,80L

	)

3461 
	#SN_£t˘_CRLNŸifiˇti⁄ResTBS
 "£t˘-CRLNŸifiˇti⁄ResTBS"

	)

3462 
	#NID_£t˘_CRLNŸifiˇti⁄ResTBS
 599

	)

3463 
	#OBJ_£t˘_CRLNŸifiˇti⁄ResTBS
 
OBJ_£t_˘y≥
,81L

	)

3465 
	#SN_£t˘_BCIDi°ributi⁄TBS
 "£t˘-BCIDi°ributi⁄TBS"

	)

3466 
	#NID_£t˘_BCIDi°ributi⁄TBS
 600

	)

3467 
	#OBJ_£t˘_BCIDi°ributi⁄TBS
 
OBJ_£t_˘y≥
,82L

	)

3469 
	#SN_£ãxt_gíCry±
 "£ãxt-gíCry±"

	)

3470 
	#LN_£ãxt_gíCry±
 "gíîi¯¸y±ogøm"

	)

3471 
	#NID_£ãxt_gíCry±
 601

	)

3472 
	#OBJ_£ãxt_gíCry±
 
OBJ_£t_msgExt
,1L

	)

3474 
	#SN_£ãxt_miAuth
 "£ãxt-miAuth"

	)

3475 
	#LN_£ãxt_miAuth
 "mîch™àöôüãdáuth"

	)

3476 
	#NID_£ãxt_miAuth
 602

	)

3477 
	#OBJ_£ãxt_miAuth
 
OBJ_£t_msgExt
,3L

	)

3479 
	#SN_£ãxt_pöSecuª
 "£ãxt-pöSecuª"

	)

3480 
	#NID_£ãxt_pöSecuª
 603

	)

3481 
	#OBJ_£ãxt_pöSecuª
 
OBJ_£t_msgExt
,4L

	)

3483 
	#SN_£ãxt_pöAny
 "£ãxt-pöAny"

	)

3484 
	#NID_£ãxt_pöAny
 604

	)

3485 
	#OBJ_£ãxt_pöAny
 
OBJ_£t_msgExt
,5L

	)

3487 
	#SN_£ãxt_åack2
 "£ãxt-åack2"

	)

3488 
	#NID_£ãxt_åack2
 605

	)

3489 
	#OBJ_£ãxt_åack2
 
OBJ_£t_msgExt
,7L

	)

3491 
	#SN_£ãxt_cv
 "£ãxt-cv"

	)

3492 
	#LN_£ãxt_cv
 "addôi⁄Æ vîifiˇti⁄"

	)

3493 
	#NID_£ãxt_cv
 606

	)

3494 
	#OBJ_£ãxt_cv
 
OBJ_£t_msgExt
,8L

	)

3496 
	#SN_£t_pﬁicy_roŸ
 "£t-pﬁicy-roŸ"

	)

3497 
	#NID_£t_pﬁicy_roŸ
 607

	)

3498 
	#OBJ_£t_pﬁicy_roŸ
 
OBJ_£t_pﬁicy
,0L

	)

3500 
	#SN_£tCext_hashedRoŸ
 "£tCext-hashedRoŸ"

	)

3501 
	#NID_£tCext_hashedRoŸ
 608

	)

3502 
	#OBJ_£tCext_hashedRoŸ
 
OBJ_£t_˚πExt
,0L

	)

3504 
	#SN_£tCext_˚πTy≥
 "£tCext-˚πTy≥"

	)

3505 
	#NID_£tCext_˚πTy≥
 609

	)

3506 
	#OBJ_£tCext_˚πTy≥
 
OBJ_£t_˚πExt
,1L

	)

3508 
	#SN_£tCext_mîchD©a
 "£tCext-mîchD©a"

	)

3509 
	#NID_£tCext_mîchD©a
 610

	)

3510 
	#OBJ_£tCext_mîchD©a
 
OBJ_£t_˚πExt
,2L

	)

3512 
	#SN_£tCext_cCîtRequúed
 "£tCext-cCîtRequúed"

	)

3513 
	#NID_£tCext_cCîtRequúed
 611

	)

3514 
	#OBJ_£tCext_cCîtRequúed
 
OBJ_£t_˚πExt
,3L

	)

3516 
	#SN_£tCext_tu¬ñög
 "£tCext-tu¬ñög"

	)

3517 
	#NID_£tCext_tu¬ñög
 612

	)

3518 
	#OBJ_£tCext_tu¬ñög
 
OBJ_£t_˚πExt
,4L

	)

3520 
	#SN_£tCext_£tExt
 "£tCext-£tExt"

	)

3521 
	#NID_£tCext_£tExt
 613

	)

3522 
	#OBJ_£tCext_£tExt
 
OBJ_£t_˚πExt
,5L

	)

3524 
	#SN_£tCext_£tQuÆf
 "£tCext-£tQuÆf"

	)

3525 
	#NID_£tCext_£tQuÆf
 614

	)

3526 
	#OBJ_£tCext_£tQuÆf
 
OBJ_£t_˚πExt
,6L

	)

3528 
	#SN_£tCext_PGWYˇ∑bûôõs
 "£tCext-PGWYˇ∑bûôõs"

	)

3529 
	#NID_£tCext_PGWYˇ∑bûôõs
 615

	)

3530 
	#OBJ_£tCext_PGWYˇ∑bûôõs
 
OBJ_£t_˚πExt
,7L

	)

3532 
	#SN_£tCext_TokíIdítifõr
 "£tCext-TokíIdítifõr"

	)

3533 
	#NID_£tCext_TokíIdítifõr
 616

	)

3534 
	#OBJ_£tCext_TokíIdítifõr
 
OBJ_£t_˚πExt
,8L

	)

3536 
	#SN_£tCext_Tøck2D©a
 "£tCext-Tøck2D©a"

	)

3537 
	#NID_£tCext_Tøck2D©a
 617

	)

3538 
	#OBJ_£tCext_Tøck2D©a
 
OBJ_£t_˚πExt
,9L

	)

3540 
	#SN_£tCext_TokíTy≥
 "£tCext-TokíTy≥"

	)

3541 
	#NID_£tCext_TokíTy≥
 618

	)

3542 
	#OBJ_£tCext_TokíTy≥
 
OBJ_£t_˚πExt
,10L

	)

3544 
	#SN_£tCext_IssuîC≠abûôõs
 "£tCext-IssuîC≠abûôõs"

	)

3545 
	#NID_£tCext_IssuîC≠abûôõs
 619

	)

3546 
	#OBJ_£tCext_IssuîC≠abûôõs
 
OBJ_£t_˚πExt
,11L

	)

3548 
	#SN_£tAâr_Cît
 "£tAâr-Cît"

	)

3549 
	#NID_£tAâr_Cît
 620

	)

3550 
	#OBJ_£tAâr_Cît
 
OBJ_£t_©å
,0L

	)

3552 
	#SN_£tAâr_PGWYˇp
 "£tAâr-PGWYˇp"

	)

3553 
	#LN_£tAâr_PGWYˇp
 "∑ymíàg©eway c≠abûôõs"

	)

3554 
	#NID_£tAâr_PGWYˇp
 621

	)

3555 
	#OBJ_£tAâr_PGWYˇp
 
OBJ_£t_©å
,1L

	)

3557 
	#SN_£tAâr_TokíTy≥
 "£tAâr-TokíTy≥"

	)

3558 
	#NID_£tAâr_TokíTy≥
 622

	)

3559 
	#OBJ_£tAâr_TokíTy≥
 
OBJ_£t_©å
,2L

	)

3561 
	#SN_£tAâr_IssC≠
 "£tAâr-IssC≠"

	)

3562 
	#LN_£tAâr_IssC≠
 "issuî c≠abûôõs"

	)

3563 
	#NID_£tAâr_IssC≠
 623

	)

3564 
	#OBJ_£tAâr_IssC≠
 
OBJ_£t_©å
,3L

	)

3566 
	#SN_£t_roŸKeyThumb
 "£t-roŸKeyThumb"

	)

3567 
	#NID_£t_roŸKeyThumb
 624

	)

3568 
	#OBJ_£t_roŸKeyThumb
 
OBJ_£tAâr_Cît
,0L

	)

3570 
	#SN_£t_addPﬁicy
 "£t-addPﬁicy"

	)

3571 
	#NID_£t_addPﬁicy
 625

	)

3572 
	#OBJ_£t_addPﬁicy
 
OBJ_£tAâr_Cît
,1L

	)

3574 
	#SN_£tAâr_Tokí_EMV
 "£tAâr-Tokí-EMV"

	)

3575 
	#NID_£tAâr_Tokí_EMV
 626

	)

3576 
	#OBJ_£tAâr_Tokí_EMV
 
OBJ_£tAâr_TokíTy≥
,1L

	)

3578 
	#SN_£tAâr_Tokí_B0Prime
 "£tAâr-Tokí-B0Prime"

	)

3579 
	#NID_£tAâr_Tokí_B0Prime
 627

	)

3580 
	#OBJ_£tAâr_Tokí_B0Prime
 
OBJ_£tAâr_TokíTy≥
,2L

	)

3582 
	#SN_£tAâr_IssC≠_CVM
 "£tAâr-IssC≠-CVM"

	)

3583 
	#NID_£tAâr_IssC≠_CVM
 628

	)

3584 
	#OBJ_£tAâr_IssC≠_CVM
 
OBJ_£tAâr_IssC≠
,3L

	)

3586 
	#SN_£tAâr_IssC≠_T2
 "£tAâr-IssC≠-T2"

	)

3587 
	#NID_£tAâr_IssC≠_T2
 629

	)

3588 
	#OBJ_£tAâr_IssC≠_T2
 
OBJ_£tAâr_IssC≠
,4L

	)

3590 
	#SN_£tAâr_IssC≠_Sig
 "£tAâr-IssC≠-Sig"

	)

3591 
	#NID_£tAâr_IssC≠_Sig
 630

	)

3592 
	#OBJ_£tAâr_IssC≠_Sig
 
OBJ_£tAâr_IssC≠
,5L

	)

3594 
	#SN_£tAâr_GíCry±grm
 "£tAâr-GíCry±grm"

	)

3595 
	#LN_£tAâr_GíCry±grm
 "gíî©ê¸y±ogøm"

	)

3596 
	#NID_£tAâr_GíCry±grm
 631

	)

3597 
	#OBJ_£tAâr_GíCry±grm
 
OBJ_£tAâr_IssC≠_CVM
,1L

	)

3599 
	#SN_£tAâr_T2Enc
 "£tAâr-T2Enc"

	)

3600 
	#LN_£tAâr_T2Enc
 "í¸y±edÅøck 2"

	)

3601 
	#NID_£tAâr_T2Enc
 632

	)

3602 
	#OBJ_£tAâr_T2Enc
 
OBJ_£tAâr_IssC≠_T2
,1L

	)

3604 
	#SN_£tAâr_T2˛óπxt
 "£tAâr-T2˛óπxt"

	)

3605 
	#LN_£tAâr_T2˛óπxt
 "˛óπexàåack 2"

	)

3606 
	#NID_£tAâr_T2˛óπxt
 633

	)

3607 
	#OBJ_£tAâr_T2˛óπxt
 
OBJ_£tAâr_IssC≠_T2
,2L

	)

3609 
	#SN_£tAâr_TokICCsig
 "£tAâr-TokICCsig"

	)

3610 
	#LN_£tAâr_TokICCsig
 "ICC o∏tokí sig«tuª"

	)

3611 
	#NID_£tAâr_TokICCsig
 634

	)

3612 
	#OBJ_£tAâr_TokICCsig
 
OBJ_£tAâr_IssC≠_Sig
,1L

	)

3614 
	#SN_£tAâr_SecDevSig
 "£tAâr-SecDevSig"

	)

3615 
	#LN_£tAâr_SecDevSig
 "£cuª devi˚ sig«tuª"

	)

3616 
	#NID_£tAâr_SecDevSig
 635

	)

3617 
	#OBJ_£tAâr_SecDevSig
 
OBJ_£tAâr_IssC≠_Sig
,2L

	)

3619 
	#SN_£t_bønd_IATA_ATA
 "£t-bønd-IATA-ATA"

	)

3620 
	#NID_£t_bønd_IATA_ATA
 636

	)

3621 
	#OBJ_£t_bønd_IATA_ATA
 
OBJ_£t_bønd
,1L

	)

3623 
	#SN_£t_bønd_Döîs
 "£t-bønd-Döîs"

	)

3624 
	#NID_£t_bønd_Döîs
 637

	)

3625 
	#OBJ_£t_bønd_Döîs
 
OBJ_£t_bønd
,30L

	)

3627 
	#SN_£t_bønd_AmîiˇnEx¥ess
 "£t-bønd-AmîiˇnEx¥ess"

	)

3628 
	#NID_£t_bønd_AmîiˇnEx¥ess
 638

	)

3629 
	#OBJ_£t_bønd_AmîiˇnEx¥ess
 
OBJ_£t_bønd
,34L

	)

3631 
	#SN_£t_bønd_JCB
 "£t-bønd-JCB"

	)

3632 
	#NID_£t_bønd_JCB
 639

	)

3633 
	#OBJ_£t_bønd_JCB
 
OBJ_£t_bønd
,35L

	)

3635 
	#SN_£t_bønd_Viß
 "£t-bønd-Viß"

	)

3636 
	#NID_£t_bønd_Viß
 640

	)

3637 
	#OBJ_£t_bønd_Viß
 
OBJ_£t_bønd
,4L

	)

3639 
	#SN_£t_bønd_Ma°îC¨d
 "£t-bønd-Ma°îC¨d"

	)

3640 
	#NID_£t_bønd_Ma°îC¨d
 641

	)

3641 
	#OBJ_£t_bønd_Ma°îC¨d
 
OBJ_£t_bønd
,5L

	)

3643 
	#SN_£t_bønd_Novus
 "£t-bønd-Novus"

	)

3644 
	#NID_£t_bønd_Novus
 642

	)

3645 
	#OBJ_£t_bønd_Novus
 
OBJ_£t_bønd
,6011L

	)

3647 
	#SN_des_cdmf
 "DES-CDMF"

	)

3648 
	#LN_des_cdmf
 "des-cdmf"

	)

3649 
	#NID_des_cdmf
 643

	)

3650 
	#OBJ_des_cdmf
 
OBJ_rßdsi
,3L,10L

	)

3652 
	#SN_rßOAEPEn¸y±i⁄SET
 "rßOAEPEn¸y±i⁄SET"

	)

3653 
	#NID_rßOAEPEn¸y±i⁄SET
 644

	)

3654 
	#OBJ_rßOAEPEn¸y±i⁄SET
 
OBJ_rßdsi
,1L,1L,6L

	)

3656 
	#SN_ù£c3
 "OakÀy-EC2N-3"

	)

3657 
	#LN_ù£c3
 "ù£c3"

	)

3658 
	#NID_ù£c3
 749

	)

3660 
	#SN_ù£c4
 "OakÀy-EC2N-4"

	)

3661 
	#LN_ù£c4
 "ù£c4"

	)

3662 
	#NID_ù£c4
 750

	)

3664 
	#SN_whúÕoﬁ
 "whúÕoﬁ"

	)

3665 
	#NID_whúÕoﬁ
 804

	)

3666 
	#OBJ_whúÕoﬁ
 
OBJ_iso
,0L,10118L,3L,0L,55L

	)

3668 
	#SN_¸y±›ro
 "¸y±›ro"

	)

3669 
	#NID_¸y±›ro
 805

	)

3670 
	#OBJ_¸y±›ro
 
OBJ_membî_body
,643L,2L,2L

	)

3672 
	#SN_¸y±ocom
 "¸y±ocom"

	)

3673 
	#NID_¸y±ocom
 806

	)

3674 
	#OBJ_¸y±ocom
 
OBJ_membî_body
,643L,2L,9L

	)

3676 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001
 "id-Go°R3411-94-wôh-Go°R3410-2001"

	)

3677 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001
 "GOST R 34.11-94 wôh GOST R 34.10-2001"

	)

3678 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001
 807

	)

3679 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001
 
OBJ_¸y±›ro
,3L

	)

3681 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94
 "id-Go°R3411-94-wôh-Go°R3410-94"

	)

3682 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94
 "GOST R 34.11-94 wôh GOST R 34.10-94"

	)

3683 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94
 808

	)

3684 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94
 
OBJ_¸y±›ro
,4L

	)

3686 
	#SN_id_Go°R3411_94
 "md_go°94"

	)

3687 
	#LN_id_Go°R3411_94
 "GOST R 34.11-94"

	)

3688 
	#NID_id_Go°R3411_94
 809

	)

3689 
	#OBJ_id_Go°R3411_94
 
OBJ_¸y±›ro
,9L

	)

3691 
	#SN_id_HMACGo°R3411_94
 "id-HMACGo°R3411-94"

	)

3692 
	#LN_id_HMACGo°R3411_94
 "HMAC GOST 34.11-94"

	)

3693 
	#NID_id_HMACGo°R3411_94
 810

	)

3694 
	#OBJ_id_HMACGo°R3411_94
 
OBJ_¸y±›ro
,10L

	)

3696 
	#SN_id_Go°R3410_2001
 "go°2001"

	)

3697 
	#LN_id_Go°R3410_2001
 "GOST R 34.10-2001"

	)

3698 
	#NID_id_Go°R3410_2001
 811

	)

3699 
	#OBJ_id_Go°R3410_2001
 
OBJ_¸y±›ro
,19L

	)

3701 
	#SN_id_Go°R3410_94
 "go°94"

	)

3702 
	#LN_id_Go°R3410_94
 "GOST R 34.10-94"

	)

3703 
	#NID_id_Go°R3410_94
 812

	)

3704 
	#OBJ_id_Go°R3410_94
 
OBJ_¸y±›ro
,20L

	)

3706 
	#SN_id_Go°28147_89
 "go°89"

	)

3707 
	#LN_id_Go°28147_89
 "GOST 28147-89"

	)

3708 
	#NID_id_Go°28147_89
 813

	)

3709 
	#OBJ_id_Go°28147_89
 
OBJ_¸y±›ro
,21L

	)

3711 
	#SN_go°89_˙t
 "go°89-˙t"

	)

3712 
	#NID_go°89_˙t
 814

	)

3714 
	#SN_id_Go°28147_89_MAC
 "go°-mac"

	)

3715 
	#LN_id_Go°28147_89_MAC
 "GOST 28147-89 MAC"

	)

3716 
	#NID_id_Go°28147_89_MAC
 815

	)

3717 
	#OBJ_id_Go°28147_89_MAC
 
OBJ_¸y±›ro
,22L

	)

3719 
	#SN_id_Go°R3411_94_¥f
 "¥f-go°r3411-94"

	)

3720 
	#LN_id_Go°R3411_94_¥f
 "GOST R 34.11-94 PRF"

	)

3721 
	#NID_id_Go°R3411_94_¥f
 816

	)

3722 
	#OBJ_id_Go°R3411_94_¥f
 
OBJ_¸y±›ro
,23L

	)

3724 
	#SN_id_Go°R3410_2001DH
 "id-Go°R3410-2001DH"

	)

3725 
	#LN_id_Go°R3410_2001DH
 "GOST R 34.10-2001 DH"

	)

3726 
	#NID_id_Go°R3410_2001DH
 817

	)

3727 
	#OBJ_id_Go°R3410_2001DH
 
OBJ_¸y±›ro
,98L

	)

3729 
	#SN_id_Go°R3410_94DH
 "id-Go°R3410-94DH"

	)

3730 
	#LN_id_Go°R3410_94DH
 "GOST R 34.10-94 DH"

	)

3731 
	#NID_id_Go°R3410_94DH
 818

	)

3732 
	#OBJ_id_Go°R3410_94DH
 
OBJ_¸y±›ro
,99L

	)

3734 
	#SN_id_Go°28147_89_Cry±oPro_KeyMeshög
 "id-Go°28147-89-Cry±oPro-KeyMeshög"

	)

3735 
	#NID_id_Go°28147_89_Cry±oPro_KeyMeshög
 819

	)

3736 
	#OBJ_id_Go°28147_89_Cry±oPro_KeyMeshög
 
OBJ_¸y±›ro
,14L,1L

	)

3738 
	#SN_id_Go°28147_89_N⁄e_KeyMeshög
 "id-Go°28147-89-N⁄e-KeyMeshög"

	)

3739 
	#NID_id_Go°28147_89_N⁄e_KeyMeshög
 820

	)

3740 
	#OBJ_id_Go°28147_89_N⁄e_KeyMeshög
 
OBJ_¸y±›ro
,14L,0L

	)

3742 
	#SN_id_Go°R3411_94_Te°P¨amSë
 "id-Go°R3411-94-Te°P¨amSë"

	)

3743 
	#NID_id_Go°R3411_94_Te°P¨amSë
 821

	)

3744 
	#OBJ_id_Go°R3411_94_Te°P¨amSë
 
OBJ_¸y±›ro
,30L,0L

	)

3746 
	#SN_id_Go°R3411_94_Cry±oProP¨amSë
 "id-Go°R3411-94-Cry±oProP¨amSë"

	)

3747 
	#NID_id_Go°R3411_94_Cry±oProP¨amSë
 822

	)

3748 
	#OBJ_id_Go°R3411_94_Cry±oProP¨amSë
 
OBJ_¸y±›ro
,30L,1L

	)

3750 
	#SN_id_Go°28147_89_Te°P¨amSë
 "id-Go°28147-89-Te°P¨amSë"

	)

3751 
	#NID_id_Go°28147_89_Te°P¨amSë
 823

	)

3752 
	#OBJ_id_Go°28147_89_Te°P¨amSë
 
OBJ_¸y±›ro
,31L,0L

	)

3754 
	#SN_id_Go°28147_89_Cry±oPro_A_P¨amSë
 "id-Go°28147-89-Cry±oPro-A-P¨amSë"

	)

3755 
	#NID_id_Go°28147_89_Cry±oPro_A_P¨amSë
 824

	)

3756 
	#OBJ_id_Go°28147_89_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,31L,1L

	)

3758 
	#SN_id_Go°28147_89_Cry±oPro_B_P¨amSë
 "id-Go°28147-89-Cry±oPro-B-P¨amSë"

	)

3759 
	#NID_id_Go°28147_89_Cry±oPro_B_P¨amSë
 825

	)

3760 
	#OBJ_id_Go°28147_89_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,31L,2L

	)

3762 
	#SN_id_Go°28147_89_Cry±oPro_C_P¨amSë
 "id-Go°28147-89-Cry±oPro-C-P¨amSë"

	)

3763 
	#NID_id_Go°28147_89_Cry±oPro_C_P¨amSë
 826

	)

3764 
	#OBJ_id_Go°28147_89_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,31L,3L

	)

3766 
	#SN_id_Go°28147_89_Cry±oPro_D_P¨amSë
 "id-Go°28147-89-Cry±oPro-D-P¨amSë"

	)

3767 
	#NID_id_Go°28147_89_Cry±oPro_D_P¨amSë
 827

	)

3768 
	#OBJ_id_Go°28147_89_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,31L,4L

	)

3770 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-1-P¨amSë"

	)

3771 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 828

	)

3772 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 
OBJ_¸y±›ro
,31L,5L

	)

3774 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-0-P¨amSë"

	)

3775 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 829

	)

3776 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 
OBJ_¸y±›ro
,31L,6L

	)

3778 
	#SN_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-RIC-1-P¨amSë"

	)

3779 
	#NID_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 830

	)

3780 
	#OBJ_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 
OBJ_¸y±›ro
,31L,7L

	)

3782 
	#SN_id_Go°R3410_94_Te°P¨amSë
 "id-Go°R3410-94-Te°P¨amSë"

	)

3783 
	#NID_id_Go°R3410_94_Te°P¨amSë
 831

	)

3784 
	#OBJ_id_Go°R3410_94_Te°P¨amSë
 
OBJ_¸y±›ro
,32L,0L

	)

3786 
	#SN_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 "id-Go°R3410-94-Cry±oPro-A-P¨amSë"

	)

3787 
	#NID_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 832

	)

3788 
	#OBJ_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,32L,2L

	)

3790 
	#SN_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 "id-Go°R3410-94-Cry±oPro-B-P¨amSë"

	)

3791 
	#NID_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 833

	)

3792 
	#OBJ_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,32L,3L

	)

3794 
	#SN_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 "id-Go°R3410-94-Cry±oPro-C-P¨amSë"

	)

3795 
	#NID_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 834

	)

3796 
	#OBJ_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,32L,4L

	)

3798 
	#SN_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 "id-Go°R3410-94-Cry±oPro-D-P¨amSë"

	)

3799 
	#NID_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 835

	)

3800 
	#OBJ_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,32L,5L

	)

3802 
	#SN_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchA-P¨amSë"

	)

3803 
	#NID_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 836

	)

3804 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,33L,1L

	)

3806 
	#SN_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchB-P¨amSë"

	)

3807 
	#NID_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 837

	)

3808 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,33L,2L

	)

3810 
	#SN_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchC-P¨amSë"

	)

3811 
	#NID_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 838

	)

3812 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 
OBJ_¸y±›ro
,33L,3L

	)

3814 
	#SN_id_Go°R3410_2001_Te°P¨amSë
 "id-Go°R3410-2001-Te°P¨amSë"

	)

3815 
	#NID_id_Go°R3410_2001_Te°P¨amSë
 839

	)

3816 
	#OBJ_id_Go°R3410_2001_Te°P¨amSë
 
OBJ_¸y±›ro
,35L,0L

	)

3818 
	#SN_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-A-P¨amSë"

	)

3819 
	#NID_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 840

	)

3820 
	#OBJ_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,35L,1L

	)

3822 
	#SN_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-B-P¨amSë"

	)

3823 
	#NID_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 841

	)

3824 
	#OBJ_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,35L,2L

	)

3826 
	#SN_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-C-P¨amSë"

	)

3827 
	#NID_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 842

	)

3828 
	#OBJ_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,35L,3L

	)

3830 
	#SN_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchA-P¨amSë"

	)

3831 
	#NID_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 843

	)

3832 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,36L,0L

	)

3834 
	#SN_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchB-P¨amSë"

	)

3835 
	#NID_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 844

	)

3836 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,36L,1L

	)

3838 
	#SN_id_Go°R3410_94_a
 "id-Go°R3410-94-a"

	)

3839 
	#NID_id_Go°R3410_94_a
 845

	)

3840 
	#OBJ_id_Go°R3410_94_a
 
OBJ_id_Go°R3410_94
,1L

	)

3842 
	#SN_id_Go°R3410_94_aBis
 "id-Go°R3410-94-aBis"

	)

3843 
	#NID_id_Go°R3410_94_aBis
 846

	)

3844 
	#OBJ_id_Go°R3410_94_aBis
 
OBJ_id_Go°R3410_94
,2L

	)

3846 
	#SN_id_Go°R3410_94_b
 "id-Go°R3410-94-b"

	)

3847 
	#NID_id_Go°R3410_94_b
 847

	)

3848 
	#OBJ_id_Go°R3410_94_b
 
OBJ_id_Go°R3410_94
,3L

	)

3850 
	#SN_id_Go°R3410_94_bBis
 "id-Go°R3410-94-bBis"

	)

3851 
	#NID_id_Go°R3410_94_bBis
 848

	)

3852 
	#OBJ_id_Go°R3410_94_bBis
 
OBJ_id_Go°R3410_94
,4L

	)

3854 
	#SN_id_Go°28147_89_cc
 "id-Go°28147-89-cc"

	)

3855 
	#LN_id_Go°28147_89_cc
 "GOST 28147-89 Cry±ocom P¨amSë"

	)

3856 
	#NID_id_Go°28147_89_cc
 849

	)

3857 
	#OBJ_id_Go°28147_89_cc
 
OBJ_¸y±ocom
,1L,6L,1L

	)

3859 
	#SN_id_Go°R3410_94_cc
 "go°94cc"

	)

3860 
	#LN_id_Go°R3410_94_cc
 "GOST 34.10-94 Cry±ocom"

	)

3861 
	#NID_id_Go°R3410_94_cc
 850

	)

3862 
	#OBJ_id_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,5L,3L

	)

3864 
	#SN_id_Go°R3410_2001_cc
 "go°2001cc"

	)

3865 
	#LN_id_Go°R3410_2001_cc
 "GOST 34.10-2001 Cry±ocom"

	)

3866 
	#NID_id_Go°R3410_2001_cc
 851

	)

3867 
	#OBJ_id_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,5L,4L

	)

3869 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "id-Go°R3411-94-wôh-Go°R3410-94-cc"

	)

3870 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "GOST R 34.11-94 wôh GOST R 34.10-94 Cry±ocom"

	)

3871 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94_cc
 852

	)

3872 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,3L,3L

	)

3874 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "id-Go°R3411-94-wôh-Go°R3410-2001-cc"

	)

3875 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "GOST R 34.11-94 wôh GOST R 34.10-2001 Cry±ocom"

	)

3876 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 853

	)

3877 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,3L,4L

	)

3879 
	#SN_id_Go°R3410_2001_P¨amSë_cc
 "id-Go°R3410-2001-P¨amSë-cc"

	)

3880 
	#LN_id_Go°R3410_2001_P¨amSë_cc
 "GOST R 3410-2001 P¨amëî Së Cry±ocom"

	)

3881 
	#NID_id_Go°R3410_2001_P¨amSë_cc
 854

	)

3882 
	#OBJ_id_Go°R3410_2001_P¨amSë_cc
 
OBJ_¸y±ocom
,1L,8L,1L

	)

3884 
	#SN_ˇmñlü_128_cbc
 "CAMELLIA-128-CBC"

	)

3885 
	#LN_ˇmñlü_128_cbc
 "ˇmñlü-128-cbc"

	)

3886 
	#NID_ˇmñlü_128_cbc
 751

	)

3887 
	#OBJ_ˇmñlü_128_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,2L

	)

3889 
	#SN_ˇmñlü_192_cbc
 "CAMELLIA-192-CBC"

	)

3890 
	#LN_ˇmñlü_192_cbc
 "ˇmñlü-192-cbc"

	)

3891 
	#NID_ˇmñlü_192_cbc
 752

	)

3892 
	#OBJ_ˇmñlü_192_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,3L

	)

3894 
	#SN_ˇmñlü_256_cbc
 "CAMELLIA-256-CBC"

	)

3895 
	#LN_ˇmñlü_256_cbc
 "ˇmñlü-256-cbc"

	)

3896 
	#NID_ˇmñlü_256_cbc
 753

	)

3897 
	#OBJ_ˇmñlü_256_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,4L

	)

3899 
	#SN_id_ˇmñlü128_wøp
 "id-ˇmñlü128-wøp"

	)

3900 
	#NID_id_ˇmñlü128_wøp
 907

	)

3901 
	#OBJ_id_ˇmñlü128_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,2L

	)

3903 
	#SN_id_ˇmñlü192_wøp
 "id-ˇmñlü192-wøp"

	)

3904 
	#NID_id_ˇmñlü192_wøp
 908

	)

3905 
	#OBJ_id_ˇmñlü192_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,3L

	)

3907 
	#SN_id_ˇmñlü256_wøp
 "id-ˇmñlü256-wøp"

	)

3908 
	#NID_id_ˇmñlü256_wøp
 909

	)

3909 
	#OBJ_id_ˇmñlü256_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,4L

	)

3911 
	#OBJ_¡t_ds
 0L,3L,4401L,5L

	)

3913 
	#OBJ_ˇmñlü
 
OBJ_¡t_ds
,3L,1L,9L

	)

3915 
	#SN_ˇmñlü_128_ecb
 "CAMELLIA-128-ECB"

	)

3916 
	#LN_ˇmñlü_128_ecb
 "ˇmñlü-128-ecb"

	)

3917 
	#NID_ˇmñlü_128_ecb
 754

	)

3918 
	#OBJ_ˇmñlü_128_ecb
 
OBJ_ˇmñlü
,1L

	)

3920 
	#SN_ˇmñlü_128_ofb128
 "CAMELLIA-128-OFB"

	)

3921 
	#LN_ˇmñlü_128_ofb128
 "ˇmñlü-128-ofb"

	)

3922 
	#NID_ˇmñlü_128_ofb128
 766

	)

3923 
	#OBJ_ˇmñlü_128_ofb128
 
OBJ_ˇmñlü
,3L

	)

3925 
	#SN_ˇmñlü_128_cfb128
 "CAMELLIA-128-CFB"

	)

3926 
	#LN_ˇmñlü_128_cfb128
 "ˇmñlü-128-cfb"

	)

3927 
	#NID_ˇmñlü_128_cfb128
 757

	)

3928 
	#OBJ_ˇmñlü_128_cfb128
 
OBJ_ˇmñlü
,4L

	)

3930 
	#SN_ˇmñlü_192_ecb
 "CAMELLIA-192-ECB"

	)

3931 
	#LN_ˇmñlü_192_ecb
 "ˇmñlü-192-ecb"

	)

3932 
	#NID_ˇmñlü_192_ecb
 755

	)

3933 
	#OBJ_ˇmñlü_192_ecb
 
OBJ_ˇmñlü
,21L

	)

3935 
	#SN_ˇmñlü_192_ofb128
 "CAMELLIA-192-OFB"

	)

3936 
	#LN_ˇmñlü_192_ofb128
 "ˇmñlü-192-ofb"

	)

3937 
	#NID_ˇmñlü_192_ofb128
 767

	)

3938 
	#OBJ_ˇmñlü_192_ofb128
 
OBJ_ˇmñlü
,23L

	)

3940 
	#SN_ˇmñlü_192_cfb128
 "CAMELLIA-192-CFB"

	)

3941 
	#LN_ˇmñlü_192_cfb128
 "ˇmñlü-192-cfb"

	)

3942 
	#NID_ˇmñlü_192_cfb128
 758

	)

3943 
	#OBJ_ˇmñlü_192_cfb128
 
OBJ_ˇmñlü
,24L

	)

3945 
	#SN_ˇmñlü_256_ecb
 "CAMELLIA-256-ECB"

	)

3946 
	#LN_ˇmñlü_256_ecb
 "ˇmñlü-256-ecb"

	)

3947 
	#NID_ˇmñlü_256_ecb
 756

	)

3948 
	#OBJ_ˇmñlü_256_ecb
 
OBJ_ˇmñlü
,41L

	)

3950 
	#SN_ˇmñlü_256_ofb128
 "CAMELLIA-256-OFB"

	)

3951 
	#LN_ˇmñlü_256_ofb128
 "ˇmñlü-256-ofb"

	)

3952 
	#NID_ˇmñlü_256_ofb128
 768

	)

3953 
	#OBJ_ˇmñlü_256_ofb128
 
OBJ_ˇmñlü
,43L

	)

3955 
	#SN_ˇmñlü_256_cfb128
 "CAMELLIA-256-CFB"

	)

3956 
	#LN_ˇmñlü_256_cfb128
 "ˇmñlü-256-cfb"

	)

3957 
	#NID_ˇmñlü_256_cfb128
 759

	)

3958 
	#OBJ_ˇmñlü_256_cfb128
 
OBJ_ˇmñlü
,44L

	)

3960 
	#SN_ˇmñlü_128_cfb1
 "CAMELLIA-128-CFB1"

	)

3961 
	#LN_ˇmñlü_128_cfb1
 "ˇmñlü-128-cfb1"

	)

3962 
	#NID_ˇmñlü_128_cfb1
 760

	)

3964 
	#SN_ˇmñlü_192_cfb1
 "CAMELLIA-192-CFB1"

	)

3965 
	#LN_ˇmñlü_192_cfb1
 "ˇmñlü-192-cfb1"

	)

3966 
	#NID_ˇmñlü_192_cfb1
 761

	)

3968 
	#SN_ˇmñlü_256_cfb1
 "CAMELLIA-256-CFB1"

	)

3969 
	#LN_ˇmñlü_256_cfb1
 "ˇmñlü-256-cfb1"

	)

3970 
	#NID_ˇmñlü_256_cfb1
 762

	)

3972 
	#SN_ˇmñlü_128_cfb8
 "CAMELLIA-128-CFB8"

	)

3973 
	#LN_ˇmñlü_128_cfb8
 "ˇmñlü-128-cfb8"

	)

3974 
	#NID_ˇmñlü_128_cfb8
 763

	)

3976 
	#SN_ˇmñlü_192_cfb8
 "CAMELLIA-192-CFB8"

	)

3977 
	#LN_ˇmñlü_192_cfb8
 "ˇmñlü-192-cfb8"

	)

3978 
	#NID_ˇmñlü_192_cfb8
 764

	)

3980 
	#SN_ˇmñlü_256_cfb8
 "CAMELLIA-256-CFB8"

	)

3981 
	#LN_ˇmñlü_256_cfb8
 "ˇmñlü-256-cfb8"

	)

3982 
	#NID_ˇmñlü_256_cfb8
 765

	)

3984 
	#SN_kiß
 "KISA"

	)

3985 
	#LN_kiß
 "kiß"

	)

3986 
	#NID_kiß
 773

	)

3987 
	#OBJ_kiß
 
OBJ_membî_body
,410L,200004L

	)

3989 
	#SN_£ed_ecb
 "SEED-ECB"

	)

3990 
	#LN_£ed_ecb
 "£ed-ecb"

	)

3991 
	#NID_£ed_ecb
 776

	)

3992 
	#OBJ_£ed_ecb
 
OBJ_kiß
,1L,3L

	)

3994 
	#SN_£ed_cbc
 "SEED-CBC"

	)

3995 
	#LN_£ed_cbc
 "£ed-cbc"

	)

3996 
	#NID_£ed_cbc
 777

	)

3997 
	#OBJ_£ed_cbc
 
OBJ_kiß
,1L,4L

	)

3999 
	#SN_£ed_cfb128
 "SEED-CFB"

	)

4000 
	#LN_£ed_cfb128
 "£ed-cfb"

	)

4001 
	#NID_£ed_cfb128
 779

	)

4002 
	#OBJ_£ed_cfb128
 
OBJ_kiß
,1L,5L

	)

4004 
	#SN_£ed_ofb128
 "SEED-OFB"

	)

4005 
	#LN_£ed_ofb128
 "£ed-ofb"

	)

4006 
	#NID_£ed_ofb128
 778

	)

4007 
	#OBJ_£ed_ofb128
 
OBJ_kiß
,1L,6L

	)

4009 
	#SN_hmac
 "HMAC"

	)

4010 
	#LN_hmac
 "hmac"

	)

4011 
	#NID_hmac
 855

	)

4013 
	#SN_cmac
 "CMAC"

	)

4014 
	#LN_cmac
 "cmac"

	)

4015 
	#NID_cmac
 894

	)

4017 
	#SN_rc4_hmac_md5
 "RC4-HMAC-MD5"

	)

4018 
	#LN_rc4_hmac_md5
 "rc4-hmac-md5"

	)

4019 
	#NID_rc4_hmac_md5
 915

	)

4021 
	#SN_´s_128_cbc_hmac_sha1
 "AES-128-CBC-HMAC-SHA1"

	)

4022 
	#LN_´s_128_cbc_hmac_sha1
 "´s-128-cbc-hmac-sha1"

	)

4023 
	#NID_´s_128_cbc_hmac_sha1
 916

	)

4025 
	#SN_´s_192_cbc_hmac_sha1
 "AES-192-CBC-HMAC-SHA1"

	)

4026 
	#LN_´s_192_cbc_hmac_sha1
 "´s-192-cbc-hmac-sha1"

	)

4027 
	#NID_´s_192_cbc_hmac_sha1
 917

	)

4029 
	#SN_´s_256_cbc_hmac_sha1
 "AES-256-CBC-HMAC-SHA1"

	)

4030 
	#LN_´s_256_cbc_hmac_sha1
 "´s-256-cbc-hmac-sha1"

	)

4031 
	#NID_´s_256_cbc_hmac_sha1
 918

	)

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
336
7496
config.h
include/openflow/bme-ext.h
include/openflow/nicira-ext.h
include/openflow/of_hw_api.h
include/openflow/openflow-ext.h
include/openflow/openflow-netlink.h
include/openflow/openflow.h
include/openflow/private-ext.h
lib/backtrace.c
lib/backtrace.h
lib/byte-order.h
lib/command-line.c
lib/command-line.h
lib/compiler.h
lib/csum.c
lib/csum.h
lib/daemon.c
lib/daemon.h
lib/dhcp-client.c
lib/dhcp-client.h
lib/dhcp.c
lib/dhcp.h
lib/dhparams.h
lib/dirs.c
lib/dirs.h
lib/dpif.c
lib/dpif.h
lib/dynamic-string.c
lib/dynamic-string.h
lib/fatal-signal.c
lib/fatal-signal.h
lib/fault.c
lib/fault.h
lib/flow.c
lib/flow.h
lib/hash.c
lib/hash.h
lib/hmap.c
lib/hmap.h
lib/ipv6_util.c
lib/ipv6_util.h
lib/leak-checker.c
lib/leak-checker.h
lib/list.c
lib/list.h
lib/mac-learning.c
lib/mac-learning.h
lib/netdev.c
lib/netdev.h
lib/netlink-protocol.h
lib/netlink.c
lib/netlink.h
lib/ofp.c
lib/ofp.h
lib/ofpbuf.c
lib/ofpbuf.h
lib/ofpstat.c
lib/ofpstat.h
lib/packets.h
lib/pcap.c
lib/pcap.h
lib/poll-loop.c
lib/poll-loop.h
lib/port-array.c
lib/port-array.h
lib/process.c
lib/process.h
lib/queue.c
lib/queue.h
lib/random.c
lib/random.h
lib/rconn.c
lib/rconn.h
lib/sat-math.h
lib/shash.c
lib/shash.h
lib/signals.c
lib/signals.h
lib/socket-util.c
lib/socket-util.h
lib/stp.c
lib/stp.h
lib/svec.c
lib/svec.h
lib/tag.c
lib/tag.h
lib/timeval.c
lib/timeval.h
lib/type-props.h
lib/unaligned.h
lib/util.c
lib/util.h
lib/vconn-netlink.c
lib/vconn-provider.h
lib/vconn-ssl.c
lib/vconn-ssl.h
lib/vconn-stream.c
lib/vconn-stream.h
lib/vconn-tcp.c
lib/vconn-unix.c
lib/vconn.c
lib/vconn.h
lib/vlog-socket.c
lib/vlog-socket.h
lib/vlog.c
lib/vlog.h
lib/xtoxll.h
nbee_link/nbee_link.cpp
nbee_link/nbee_link.h
oflib-exp/ofl-exp-bme.c
oflib-exp/ofl-exp-bme.h
oflib-exp/ofl-exp-nicira.c
oflib-exp/ofl-exp-nicira.h
oflib-exp/ofl-exp-openflow.c
oflib-exp/ofl-exp-openflow.h
oflib-exp/ofl-exp.c
oflib-exp/ofl-exp.h
oflib/ofl-actions-pack.c
oflib/ofl-actions-print.c
oflib/ofl-actions-unpack.c
oflib/ofl-actions.c
oflib/ofl-actions.h
oflib/ofl-log-vlog-cc.h
oflib/ofl-log-vlog.h
oflib/ofl-log.h
oflib/ofl-messages-pack.c
oflib/ofl-messages-print.c
oflib/ofl-messages-unpack.c
oflib/ofl-messages.c
oflib/ofl-messages.h
oflib/ofl-packets.h
oflib/ofl-print.c
oflib/ofl-print.h
oflib/ofl-structs-match.c
oflib/ofl-structs-pack.c
oflib/ofl-structs-print.c
oflib/ofl-structs-unpack.c
oflib/ofl-structs.c
oflib/ofl-structs.h
oflib/ofl-utils.h
oflib/ofl.h
oflib/oxm-match.c
oflib/oxm-match.h
secchan/discovery.c
secchan/discovery.h
secchan/failover.c
secchan/failover.h
secchan/in-band.c
secchan/in-band.h
secchan/port-watcher.c
secchan/port-watcher.h
secchan/ratelimit.c
secchan/ratelimit.h
secchan/secchan.c
secchan/secchan.h
secchan/status.c
secchan/status.h
secchan/stp-secchan.c
secchan/stp-secchan.h
udatapath/action_set.c
udatapath/action_set.h
udatapath/crc32.c
udatapath/crc32.h
udatapath/datapath.c
udatapath/datapath.h
udatapath/dp_actions.c
udatapath/dp_actions.h
udatapath/dp_buffers.c
udatapath/dp_buffers.h
udatapath/dp_capabilities.h
udatapath/dp_control.c
udatapath/dp_control.h
udatapath/dp_exp.c
udatapath/dp_exp.h
udatapath/dp_exp_bme.c
udatapath/dp_exp_bme.h
udatapath/dp_ports.c
udatapath/dp_ports.h
udatapath/flow_entry.c
udatapath/flow_entry.h
udatapath/flow_table.c
udatapath/flow_table.h
udatapath/group_entry.c
udatapath/group_entry.h
udatapath/group_table.c
udatapath/group_table.h
udatapath/match_std.c
udatapath/match_std.h
udatapath/meter_entry.c
udatapath/meter_entry.h
udatapath/meter_table.c
udatapath/meter_table.h
udatapath/packet.c
udatapath/packet.h
udatapath/packet_handle_std.c
udatapath/packet_handle_std.h
udatapath/pipeline.c
udatapath/pipeline.h
udatapath/udatapath.c
utilities/dpctl.c
utilities/dpctl.h
utilities/ofp-discover.c
utilities/ofp-kill.c
utilities/vlogconf.c
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/boost/static_assert.hpp
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/endian.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/getopt.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/linux/ethtool.h
/usr/include/linux/if_packet.h
/usr/include/linux/if_tun.h
/usr/include/linux/rtnetlink.h
/usr/include/linux/sockios.h
/usr/include/linux/types.h
/usr/include/linux/version.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/nbee.h
/usr/include/net/ethernet.h
/usr/include/net/if.h
/usr/include/net/if_arp.h
/usr/include/net/route.h
/usr/include/netdb.h
/usr/include/netinet/icmp6.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/openssl/dh.h
/usr/include/openssl/err.h
/usr/include/openssl/ssl.h
/usr/include/openssl/x509v3.h
/usr/include/pcap.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/regex.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/syslog.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/boost/config.hpp
/usr/include/boost/detail/workaround.hpp
/usr/include/features.h
/usr/include/libio.h
/usr/include/linux/filter.h
/usr/include/linux/if_addr.h
/usr/include/linux/if_ether.h
/usr/include/linux/if_link.h
/usr/include/linux/neighbour.h
/usr/include/linux/netlink.h
/usr/include/linux/posix_types.h
/usr/include/nbee_extractedfieldreader.h
/usr/include/nbee_initcleanup.h
/usr/include/nbee_netpdlutils.h
/usr/include/nbee_packetdecoder.h
/usr/include/nbee_packetdumpfiles.h
/usr/include/nbee_packetengine.h
/usr/include/nbee_profiler.h
/usr/include/nbee_pxmlreader.h
/usr/include/nbpflcompiler.h
/usr/include/nbprotodb.h
/usr/include/nbsockutils.h
/usr/include/openssl/bio.h
/usr/include/openssl/bn.h
/usr/include/openssl/buffer.h
/usr/include/openssl/comp.h
/usr/include/openssl/conf.h
/usr/include/openssl/crypto.h
/usr/include/openssl/dtls1.h
/usr/include/openssl/e_os2.h
/usr/include/openssl/hmac.h
/usr/include/openssl/kssl.h
/usr/include/openssl/lhash.h
/usr/include/openssl/ossl_typ.h
/usr/include/openssl/pem.h
/usr/include/openssl/safestack.h
/usr/include/openssl/srtp.h
/usr/include/openssl/ssl2.h
/usr/include/openssl/ssl23.h
/usr/include/openssl/ssl3.h
/usr/include/openssl/symhacks.h
/usr/include/openssl/tls1.h
/usr/include/openssl/x509.h
/usr/include/pcap/pcap.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/boost/config/select_compiler_config.hpp
/usr/include/boost/config/select_platform_config.hpp
/usr/include/boost/config/select_stdlib_config.hpp
/usr/include/boost/config/suffix.hpp
/usr/include/linux/socket.h
/usr/include/linux/stddef.h
/usr/include/nbee_packetdecoderutils.h
/usr/include/nbpflcompiler_exports.h
/usr/include/nbprotodb_defs.h
/usr/include/nbprotodb_elements_xml.h
/usr/include/nbprotodb_exports.h
/usr/include/openssl/asn1.h
/usr/include/openssl/dsa.h
/usr/include/openssl/ebcdic.h
/usr/include/openssl/ec.h
/usr/include/openssl/ecdh.h
/usr/include/openssl/ecdsa.h
/usr/include/openssl/evp.h
/usr/include/openssl/opensslconf.h
/usr/include/openssl/opensslv.h
/usr/include/openssl/pem2.h
/usr/include/openssl/pkcs7.h
/usr/include/openssl/pqueue.h
/usr/include/openssl/rsa.h
/usr/include/openssl/sha.h
/usr/include/openssl/stack.h
/usr/include/openssl/x509_vfy.h
/usr/include/pcap/bpf.h
/usr/include/boost/config/no_tr1/utility.hpp
/usr/include/boost/config/posix_features.hpp
/usr/include/boost/non_type.hpp
/usr/include/boost/type.hpp
/usr/include/gconv.h
/usr/include/openssl/objects.h
/usr/include/wchar.h
/usr/include/openssl/obj_mac.h
/usr/include/wctype.h
