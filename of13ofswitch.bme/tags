!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
-dbg-package	debian/rules	/^	dh_strip --dbg-package=openflow-dbg$/;"	m
-destdir	debian/rules	/^	dh_builddeb --destdir=$(DEB_DESTDIR)$/;"	m
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/home\/mininet\/of13ofswitch.bme\/build-aux\/missing --run aclocal-1.11$/;"	m
ACLOCAL_AMFLAGS	Makefile	/^ACLOCAL_AMFLAGS = -I m4$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACTION_ALIGNMENT	lib/ofp.c	587;"	d	file:
ACTION_SET_H	udatapath/action_set.h	33;"	d
ADD	utilities/dpctl.h	254;"	d
AMTAR	Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_CFLAGS	Makefile	/^AM_CFLAGS = -Wstrict-prototypes $(am__append_2)$/;"	m
AM_CPPFLAGS	Makefile	/^AM_CPPFLAGS = $(SSL_CFLAGS) -g -I $(top_srcdir)\/include -I \\$/;"	m
AM_LDFLAGS	Makefile	/^AM_LDFLAGS = -export-dynamic$/;"	m
AM_RECURSIVE_TARGETS	Makefile	/^AM_RECURSIVE_TARGETS = $(RECURSIVE_TARGETS:-recursive=) \\$/;"	m
AR	Makefile	/^AR = ar$/;"	m
ARFLAGS	Makefile	/^ARFLAGS = cru$/;"	m
ARP_ETH_HEADER_LEN	lib/packets.h	357;"	d
ARP_HRD_ETHERNET	lib/packets.h	352;"	d
ARP_OP_REPLY	lib/packets.h	355;"	d
ARP_OP_REQUEST	lib/packets.h	354;"	d
ARP_PRO_IP	lib/packets.h	353;"	d
ARRAY_SIZE	lib/util.h	70;"	d
AUTHENTICATION	lib/packets.h	/^    AUTHENTICATION = 1 << 4,$/;"	e	enum:ipv6_ext_hdr_order_T1
AUTH_ALLOWED	nbee_link/nbee_link.h	29;"	d
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/home\/mininet\/of13ofswitch.bme\/build-aux\/missing --run autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/home\/mininet\/of13ofswitch.bme\/build-aux\/missing --run autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/home\/mininet\/of13ofswitch.bme\/build-aux\/missing --run automake-1.11$/;"	m
AUTOMAKE_OPTIONS	Makefile	/^AUTOMAKE_OPTIONS = foreign -Wno-syntax subdir-objects$/;"	m
AWK	Makefile	/^AWK = mawk$/;"	m
BACKTRACE_H	lib/backtrace.h	35;"	d
BACKTRACE_MAX_FRAMES	lib/backtrace.h	39;"	d
BAND_BURST_SIZE	utilities/dpctl.h	232;"	d
BAND_PREC_LEVEL	utilities/dpctl.h	233;"	d
BAND_RATE	utilities/dpctl.h	231;"	d
BME_EXPERIMENTER_ID	include/openflow/bme-ext.h	37;"	d
BME_OUTPUT_BY_METADATA	include/openflow/bme-ext.h	/^  BME_OUTPUT_BY_METADATA = 1,$/;"	e	enum:bme_action_type
BME_RACE_MPLS_LABEL	include/openflow/bme-ext.h	/^  BME_RACE_MPLS_LABEL = 10,$/;"	e	enum:bme_action_type
BME_SERIALIZE	include/openflow/bme-ext.h	/^  BME_SERIALIZE = 9,$/;"	e	enum:bme_action_type
BME_SET_FIELD_FROM_METADATA	include/openflow/bme-ext.h	/^  BME_SET_FIELD_FROM_METADATA = 8,$/;"	e	enum:bme_action_type
BME_SET_METADATA_FROM_COUNTER	include/openflow/bme-ext.h	/^  BME_SET_METADATA_FROM_COUNTER = 7,$/;"	e	enum:bme_action_type
BME_SET_METADATA_FROM_PACKET	include/openflow/bme-ext.h	/^  BME_SET_METADATA_FROM_PACKET = 2,$/;"	e	enum:bme_action_type
BME_SET_MPLS_LABEL_FROM_COUNTER	include/openflow/bme-ext.h	/^  BME_SET_MPLS_LABEL_FROM_COUNTER = 3,$/;"	e	enum:bme_action_type
BME_UPDATE_DISTANCE_IN_METADATA	include/openflow/bme-ext.h	/^  BME_UPDATE_DISTANCE_IN_METADATA = 6,$/;"	e	enum:bme_action_type
BME_XOR_DECODE	include/openflow/bme-ext.h	/^  BME_XOR_DECODE = 4,$/;"	e	enum:bme_action_type
BME_XOR_ENCODE	include/openflow/bme-ext.h	/^  BME_XOR_ENCODE = 5,$/;"	e	enum:bme_action_type
BUCKET_WATCH_GROUP	utilities/dpctl.h	225;"	d
BUCKET_WATCH_PORT	utilities/dpctl.h	224;"	d
BUCKET_WEIGHT	utilities/dpctl.h	223;"	d
BUFFER_SIZE	lib/socket-util.c	189;"	d	file:
BUILDNR	Makefile	/^BUILDNR = 0$/;"	m
BUILDNR	config.h	6;"	d
BUILD_ASSERT	lib/util.h	56;"	d
BUILD_ASSERT	lib/util.h	64;"	d
BUILD_ASSERT_DECL	lib/util.h	60;"	d
BUILD_ASSERT_DECL	lib/util.h	65;"	d
BUILD_NUMBER	debian/rules	/^BUILD_NUMBER = 0$/;"	m
BYTE_ORDER_H	lib/byte-order.h	17;"	d
CC	Makefile	/^CC = gcc$/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	Makefile	/^CCLD = $(CC)$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -O2 -Wall -Wno-sign-compare -Wpointer-arith -Wdeclaration-after-statement -Wformat-security -Wswitch-enum -Wunused-parameter -Wstrict-aliasing -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wold-style-definition -Wmissing-prototypes -Wmissing-field-initializers -Wno-override-init$/;"	m
CLEANFILES	Makefile	/^CLEANFILES = lib\/dirs.c$/;"	m
CLIENT	lib/vconn-ssl.c	/^    CLIENT,$/;"	e	enum:session_type	file:
COMMAND_ADD_CLASS	lib/netdev.c	237;"	d	file:
COMMAND_ADD_DEV_QDISC	lib/netdev.c	234;"	d	file:
COMMAND_CHANGE_CLASS	lib/netdev.c	239;"	d	file:
COMMAND_DEL_CLASS	lib/netdev.c	241;"	d	file:
COMMAND_DEL_DEV_QDISC	lib/netdev.c	236;"	d	file:
COMMAND_LINE_H	lib/command-line.h	35;"	d
COMPILE	Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPILER_H	lib/compiler.h	35;"	d
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_FLAGS	utilities/dpctl.h	235;"	d
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = config.h$/;"	m
CONFIG_MISS	utilities/dpctl.h	236;"	d
CONSTANT_HTONL	lib/byte-order.h	48;"	d
CONSTANT_HTONL	lib/byte-order.h	54;"	d
CONSTANT_HTONLL	lib/byte-order.h	49;"	d
CONSTANT_HTONLL	lib/byte-order.h	59;"	d
CONSTANT_HTONS	lib/byte-order.h	47;"	d
CONSTANT_HTONS	lib/byte-order.h	51;"	d
CONTAINER_OF	lib/util.h	89;"	d
CPP	Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = $/;"	m
CRC32_H	udatapath/crc32.h	35;"	d
CRC32_TABLE_BITS	udatapath/crc32.h	40;"	d
CRC32_TABLE_SIZE	udatapath/crc32.h	41;"	d
CSUM_H	lib/csum.h	35;"	d
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CTRL_ATTR_FAMILY_ID	lib/netlink-protocol.h	/^        CTRL_ATTR_FAMILY_ID,$/;"	e	enum:__anon7
CTRL_ATTR_FAMILY_NAME	lib/netlink-protocol.h	/^        CTRL_ATTR_FAMILY_NAME,$/;"	e	enum:__anon7
CTRL_ATTR_HDRSIZE	lib/netlink-protocol.h	/^        CTRL_ATTR_HDRSIZE,$/;"	e	enum:__anon7
CTRL_ATTR_MAX	lib/netlink-protocol.h	147;"	d
CTRL_ATTR_MAXATTR	lib/netlink-protocol.h	/^        CTRL_ATTR_MAXATTR,$/;"	e	enum:__anon7
CTRL_ATTR_OPS	lib/netlink-protocol.h	/^        CTRL_ATTR_OPS,$/;"	e	enum:__anon7
CTRL_ATTR_OP_FLAGS	lib/netlink-protocol.h	/^        CTRL_ATTR_OP_FLAGS,$/;"	e	enum:__anon8
CTRL_ATTR_OP_ID	lib/netlink-protocol.h	/^        CTRL_ATTR_OP_ID,$/;"	e	enum:__anon8
CTRL_ATTR_OP_MAX	lib/netlink-protocol.h	156;"	d
CTRL_ATTR_OP_UNSPEC	lib/netlink-protocol.h	/^        CTRL_ATTR_OP_UNSPEC,$/;"	e	enum:__anon8
CTRL_ATTR_UNSPEC	lib/netlink-protocol.h	/^        CTRL_ATTR_UNSPEC,$/;"	e	enum:__anon7
CTRL_ATTR_VERSION	lib/netlink-protocol.h	/^        CTRL_ATTR_VERSION,$/;"	e	enum:__anon7
CTRL_CMD_DELFAMILY	lib/netlink-protocol.h	/^        CTRL_CMD_DELFAMILY,$/;"	e	enum:__anon6
CTRL_CMD_DELOPS	lib/netlink-protocol.h	/^        CTRL_CMD_DELOPS,$/;"	e	enum:__anon6
CTRL_CMD_GETFAMILY	lib/netlink-protocol.h	/^        CTRL_CMD_GETFAMILY,$/;"	e	enum:__anon6
CTRL_CMD_GETOPS	lib/netlink-protocol.h	/^        CTRL_CMD_GETOPS,$/;"	e	enum:__anon6
CTRL_CMD_MAX	lib/netlink-protocol.h	134;"	d
CTRL_CMD_NEWFAMILY	lib/netlink-protocol.h	/^        CTRL_CMD_NEWFAMILY,$/;"	e	enum:__anon6
CTRL_CMD_NEWOPS	lib/netlink-protocol.h	/^        CTRL_CMD_NEWOPS,$/;"	e	enum:__anon6
CTRL_CMD_UNSPEC	lib/netlink-protocol.h	/^        CTRL_CMD_UNSPEC,$/;"	e	enum:__anon6
CXX	Makefile	/^CXX = g++$/;"	m
CXXCOMPILE	Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXDEPMODE	Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXLD	Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLINK	Makefile	/^CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \\$/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
DAEMON_H	lib/daemon.h	35;"	d
DAEMON_LONG_OPTIONS	lib/daemon.h	40;"	d
DAEMON_OPTION_HANDLERS	lib/daemon.h	45;"	d
DATA	Makefile	/^DATA = $(netpdl_DATA)$/;"	m
DATAPATH_CONFIGURE_OPTS	debian/rules	/^DATAPATH_CONFIGURE_OPTS = --enable-snat$/;"	m
DATAPATH_H	udatapath/datapath.h	40;"	d
DEFAULT_INCLUDES	Makefile	/^DEFAULT_INCLUDES = -I.$/;"	m
DEFAULT_MAX_BAND_PER_METER	udatapath/meter_table.h	44;"	d
DEFAULT_MAX_METER	udatapath/meter_table.h	43;"	d
DEFAULT_MAX_METER_COLOR	udatapath/meter_table.h	45;"	d
DEFINE_FIELD	oflib/oxm-match.c	106;"	d	file:
DEFINE_FIELD	oflib/oxm-match.c	81;"	d	file:
DEFINE_FIELD	oflib/oxm-match.h	284;"	d
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DESC_STR_LEN	include/openflow/openflow.h	1075;"	d
DESTINATION	lib/packets.h	/^    DESTINATION = 1 << 1,$/;"	e	enum:ipv6_ext_hdr_order_T1
DESTINATION_ALLOWED	nbee_link/nbee_link.h	26;"	d
DHCLIENT_STATE	lib/dhcp-client.c	69;"	d	file:
DHCLIENT_STATE	lib/dhcp-client.c	71;"	d	file:
DHCLIENT_STATE	lib/dhcp-client.c	802;"	d	file:
DHCLIENT_STATE	lib/dhcp-client.c	805;"	d	file:
DHCLIENT_STATE	lib/dhcp-client.c	80;"	d	file:
DHCLIENT_STATE	lib/dhcp-client.c	82;"	d	file:
DHCLIENT_STATES	lib/dhcp-client.c	/^    DHCLIENT_STATES$/;"	e	enum:dhclient_state	file:
DHCLIENT_STATES	lib/dhcp-client.c	58;"	d	file:
DHCP_ARG	lib/dhcp.c	55;"	d	file:
DHCP_ARG	lib/dhcp.c	57;"	d	file:
DHCP_ARG	lib/dhcp.h	87;"	d
DHCP_ARG	lib/dhcp.h	89;"	d
DHCP_ARGS	lib/dhcp.h	/^    DHCP_ARGS$/;"	e	enum:dhcp_arg_type
DHCP_ARGS	lib/dhcp.h	75;"	d
DHCP_BOOTREPLY	lib/dhcp.h	46;"	d
DHCP_BOOTREQUEST	lib/dhcp.h	45;"	d
DHCP_CLIENT_H	lib/dhcp-client.h	35;"	d
DHCP_FLAGS_BROADCAST	lib/dhcp.h	49;"	d
DHCP_FLAGS_MBZ	lib/dhcp.h	50;"	d
DHCP_H	lib/dhcp.h	35;"	d
DHCP_HEADER_LEN	lib/dhcp.h	55;"	d
DHCP_MSG	lib/dhcp.c	109;"	d	file:
DHCP_MSG	lib/dhcp.c	111;"	d	file:
DHCP_MSG	lib/dhcp.h	104;"	d
DHCP_MSG	lib/dhcp.h	106;"	d
DHCP_MSGS	lib/dhcp.h	/^    DHCP_MSGS$/;"	e	enum:dhcp_msg_type
DHCP_MSGS	lib/dhcp.h	92;"	d
DHCP_N_OPTIONS	lib/dhcp.h	113;"	d
DHCP_OPT	lib/dhcp.c	77;"	d	file:
DHCP_OPT	lib/dhcp.c	83;"	d	file:
DHCP_OPT	lib/dhcp.h	205;"	d
DHCP_OPT	lib/dhcp.h	208;"	d
DHCP_OPTS	lib/dhcp.h	/^DHCP_OPTS$/;"	e	enum:__anon5
DHCP_OPTS	lib/dhcp.h	117;"	d
DHCP_OPTS_COOKIE	lib/dhcp.h	53;"	d
DHCP_VENDOR_OFS	lib/dhcp.h	114;"	d
DHCP_VNDOPT	lib/dhcp.h	200;"	d
DHPARAMS_H	lib/dhparams.h	2;"	d
DIRS_H	lib/dirs.h	35;"	d
DISCOVERY_H	secchan/discovery.h	35;"	d
DISTCLEANFILES	Makefile	/^DISTCLEANFILES = secchan\/ofprotocol.8 utilities\/dpctl.8 \\$/;"	m
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_ARCHIVES	Makefile	/^DIST_ARCHIVES = $(distdir).tar.gz$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = $(am__configure_deps) $(dist_commands_SCRIPTS) \\$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES = $(am__lib_libopenflow_a_SOURCES_DIST) \\$/;"	m
DIST_SUBDIRS	Makefile	/^DIST_SUBDIRS = $(SUBDIRS)$/;"	m
DL_CONVERT	oflib/oxm-match.c	84;"	d	file:
DOH_AFTER_RH	nbee_link/nbee_link.h	33;"	d
DOH_BEF_RH	nbee_link/nbee_link.h	32;"	d
DOH_NO_RH	nbee_link/nbee_link.h	34;"	d
DPCTL_H	utilities/dpctl.h	33;"	d
DPIF_H	lib/dpif.h	36;"	d
DP_ACTIONS_H	udatapath/dp_actions.h	33;"	d
DP_BUFFERS_H	udatapath/dp_buffers.h	41;"	d
DP_CAPABILITIES_H	udatapath/dp_capabilities.h	35;"	d
DP_CONTROL_H	udatapath/dp_control.h	33;"	d
DP_DESC	udatapath/datapath.c	84;"	d	file:
DP_EXP_H	udatapath/dp_exp.h	33;"	d
DP_GENL_A_DP_IDX	include/openflow/openflow-netlink.h	/^	DP_GENL_A_DP_IDX,	 \/* Datapath device index. *\/$/;"	e	enum:__anon1
DP_GENL_A_DP_NAME	include/openflow/openflow-netlink.h	/^	DP_GENL_A_DP_NAME,	 \/* Datapath device name. *\/$/;"	e	enum:__anon1
DP_GENL_A_MAX	include/openflow/openflow-netlink.h	/^	DP_GENL_A_MAX = __DP_GENL_A_MAX - 1$/;"	e	enum:__anon1
DP_GENL_A_MC_GROUP	include/openflow/openflow-netlink.h	/^	DP_GENL_A_MC_GROUP,	 \/* Generic netlink multicast group. *\/$/;"	e	enum:__anon1
DP_GENL_A_OPENFLOW	include/openflow/openflow-netlink.h	/^	DP_GENL_A_OPENFLOW,  \/* OpenFlow packet. *\/$/;"	e	enum:__anon1
DP_GENL_A_PORTNAME	include/openflow/openflow-netlink.h	/^	DP_GENL_A_PORTNAME,	 \/* Device name for datapath port. *\/$/;"	e	enum:__anon1
DP_GENL_A_UNSPEC	include/openflow/openflow-netlink.h	/^	DP_GENL_A_UNSPEC,$/;"	e	enum:__anon1
DP_GENL_C_ADD_DP	include/openflow/openflow-netlink.h	/^	DP_GENL_C_ADD_DP,	 \/* Create datapath. *\/$/;"	e	enum:dp_genl_command
DP_GENL_C_ADD_PORT	include/openflow/openflow-netlink.h	/^	DP_GENL_C_ADD_PORT,	 \/* Add port to datapath. *\/$/;"	e	enum:dp_genl_command
DP_GENL_C_DEL_DP	include/openflow/openflow-netlink.h	/^	DP_GENL_C_DEL_DP,	 \/* Destroy datapath. *\/$/;"	e	enum:dp_genl_command
DP_GENL_C_DEL_PORT	include/openflow/openflow-netlink.h	/^	DP_GENL_C_DEL_PORT,	 \/* Remove port from datapath. *\/$/;"	e	enum:dp_genl_command
DP_GENL_C_MAX	include/openflow/openflow-netlink.h	/^	DP_GENL_C_MAX = __DP_GENL_C_MAX - 1$/;"	e	enum:dp_genl_command
DP_GENL_C_OPENFLOW	include/openflow/openflow-netlink.h	/^	DP_GENL_C_OPENFLOW,  \/* Encapsulated OpenFlow protocol. *\/$/;"	e	enum:dp_genl_command
DP_GENL_C_QUERY_DP	include/openflow/openflow-netlink.h	/^	DP_GENL_C_QUERY_DP,	 \/* Get multicast group for datapath. *\/$/;"	e	enum:dp_genl_command
DP_GENL_C_UNSPEC	include/openflow/openflow-netlink.h	/^	DP_GENL_C_UNSPEC,$/;"	e	enum:dp_genl_command
DP_GENL_FAMILY_NAME	include/openflow/openflow-netlink.h	37;"	d
DP_MAX	include/openflow/openflow-netlink.h	67;"	d
DP_MAX_PORTS	udatapath/dp_ports.h	112;"	d
DP_PORTS_H	udatapath/dp_ports.h	41;"	d
DP_SUPPORTED_ACTIONS	udatapath/dp_capabilities.h	53;"	d
DP_SUPPORTED_CAPABILITIES	udatapath/dp_capabilities.h	45;"	d
DP_SUPPORTED_GROUPS	udatapath/dp_capabilities.h	104;"	d
DP_SUPPORTED_GROUP_CAPABILITIES	udatapath/dp_capabilities.h	109;"	d
DP_SUPPORTED_MATCH_FIELDS	udatapath/dp_capabilities.h	67;"	d
DSTDIR	debian/rules	/^binary-modules: DSTDIR = $(CURDIR)\/debian\/$(PKGNAME)\/lib\/modules\/$(KVERS)$/;"	m
DS_EMPTY_INITIALIZER	lib/dynamic-string.h	52;"	d
DYNAMIC_STRING_H	lib/dynamic-string.h	35;"	d
Decoder	nbee_link/nbee_link.cpp	/^nbPacketDecoder *Decoder;$/;"	v
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
EGREP	Makefile	/^EGREP = \/bin\/grep -E$/;"	m
ERRBUF_SIZE	nbee_link/nbee_link.h	22;"	d
ESP	lib/packets.h	/^    ESP = 1 << 5,$/;"	e	enum:ipv6_ext_hdr_order_T1
ESP_ALLOWED	nbee_link/nbee_link.h	30;"	d
ETAGS	Makefile	/^ETAGS = etags$/;"	m
ETHADDLEN	nbee_link/nbee_link.h	19;"	d
ETHTYPELEN	nbee_link/nbee_link.h	21;"	d
ETH_ADDR_ARGS	lib/packets.h	108;"	d
ETH_ADDR_ARGS	oflib-exp/ofl-exp-bme.c	50;"	d	file:
ETH_ADDR_ARGS	oflib/ofl-actions-print.c	49;"	d	file:
ETH_ADDR_ARGS	oflib/ofl-messages-print.c	51;"	d	file:
ETH_ADDR_ARGS	oflib/ofl-structs-print.c	52;"	d	file:
ETH_ADDR_FMT	lib/packets.h	106;"	d
ETH_ADDR_FMT	oflib-exp/ofl-exp-bme.c	48;"	d	file:
ETH_ADDR_FMT	oflib/ofl-actions-print.c	47;"	d	file:
ETH_ADDR_FMT	oflib/ofl-messages-print.c	49;"	d	file:
ETH_ADDR_FMT	oflib/ofl-structs-print.c	50;"	d	file:
ETH_ADDR_LEN	lib/packets.h	44;"	d
ETH_ADDR_LEN	oflib/ofl-packets.h	43;"	d
ETH_HEADER_LEN	lib/packets.h	124;"	d
ETH_PAYLOAD_MAX	lib/packets.h	126;"	d
ETH_PAYLOAD_MIN	lib/packets.h	125;"	d
ETH_TOTAL_MAX	lib/packets.h	128;"	d
ETH_TOTAL_MIN	lib/packets.h	127;"	d
ETH_TYPE_ARP	lib/packets.h	115;"	d
ETH_TYPE_ARP	oflib/ofl-packets.h	36;"	d
ETH_TYPE_II_START	lib/packets.h	112;"	d
ETH_TYPE_II_START	oflib/ofl-packets.h	34;"	d
ETH_TYPE_IP	lib/packets.h	113;"	d
ETH_TYPE_IP	oflib/ofl-packets.h	35;"	d
ETH_TYPE_IPV6	lib/packets.h	114;"	d
ETH_TYPE_MPLS	lib/packets.h	121;"	d
ETH_TYPE_MPLS	oflib/ofl-packets.h	40;"	d
ETH_TYPE_MPLS_MCAST	lib/packets.h	122;"	d
ETH_TYPE_MPLS_MCAST	oflib/ofl-packets.h	41;"	d
ETH_TYPE_PBB	oflib/ofl-packets.h	39;"	d
ETH_TYPE_SVLAN	lib/packets.h	117;"	d
ETH_TYPE_VLAN	lib/packets.h	116;"	d
ETH_TYPE_VLAN	oflib/ofl-packets.h	37;"	d
ETH_TYPE_VLAN_PBB	oflib/ofl-packets.h	38;"	d
ETH_TYPE_VLAN_PBB_B	lib/packets.h	119;"	d
ETH_TYPE_VLAN_PBB_S	lib/packets.h	120;"	d
ETH_TYPE_VLAN_QinQ	lib/packets.h	118;"	d
ETH_VLAN_TOTAL_MAX	lib/packets.h	129;"	d
EXEEXT	Makefile	/^EXEEXT = $/;"	m
EXTRA_DIST	Makefile	/^EXTRA_DIST = README.hwtables soexpand.pl regress lib\/dh1024.pem \\$/;"	m
FAILOVER_H_	secchan/failover.h	34;"	d
FATAL_SIGNAL_H	lib/fatal-signal.h	35;"	d
FAULT_H	lib/fault.h	35;"	d
FAULT_LIBS	Makefile	/^FAULT_LIBS = -ldl$/;"	m
FIELD_FROM_TYPE	oflib/oxm-match.h	76;"	d
FLOW_H	lib/flow.h	34;"	d
FLOW_MOD_BUFFER	utilities/dpctl.h	167;"	d
FLOW_MOD_COMMAND	utilities/dpctl.h	160;"	d
FLOW_MOD_COOKIE	utilities/dpctl.h	161;"	d
FLOW_MOD_COOKIE_MASK	utilities/dpctl.h	162;"	d
FLOW_MOD_FLAGS	utilities/dpctl.h	170;"	d
FLOW_MOD_HARD	utilities/dpctl.h	165;"	d
FLOW_MOD_IDLE	utilities/dpctl.h	164;"	d
FLOW_MOD_MATCH	utilities/dpctl.h	171;"	d
FLOW_MOD_OUT_GROUP	utilities/dpctl.h	169;"	d
FLOW_MOD_OUT_PORT	utilities/dpctl.h	168;"	d
FLOW_MOD_PRIO	utilities/dpctl.h	166;"	d
FLOW_MOD_TABLE_ID	utilities/dpctl.h	163;"	d
FLOW_TABLE_H	udatapath/flow_table.h	32;"	d
FLOW_TABLE_MAX_ENTRIES	udatapath/flow_table.h	40;"	d
FLOW_entry_H	udatapath/flow_entry.h	32;"	d
FOR_EACH_ENABLED_PORT	lib/stp.c	151;"	d	file:
FRAGMENT	lib/packets.h	/^    FRAGMENT = 1 << 3,$/;"	e	enum:ipv6_ext_hdr_order_T1
FRAG_ALLOWED	nbee_link/nbee_link.h	28;"	d
GENL_HDRLEN	lib/netlink-protocol.h	106;"	d
GENL_ID_CTRL	lib/netlink-protocol.h	121;"	d
GENL_MAX_ID	lib/netlink-protocol.h	119;"	d
GENL_MIN_ID	lib/netlink-protocol.h	118;"	d
GREP	Makefile	/^GREP = \/bin\/grep$/;"	m
GROUP_MOD_COMMAND	utilities/dpctl.h	219;"	d
GROUP_MOD_GROUP	utilities/dpctl.h	221;"	d
GROUP_MOD_TYPE	utilities/dpctl.h	220;"	d
GROUP_TABLE_H	udatapath/group_table.h	33;"	d
GROUP_TABLE_MAX_BUCKETS	udatapath/group_table.h	48;"	d
GROUP_TABLE_MAX_ENTRIES	udatapath/group_table.h	47;"	d
GROUP_entry_H	udatapath/group_entry.h	33;"	d
GZIP_ENV	Makefile	/^GZIP_ENV = --best$/;"	m
HALF_LOCAL	secchan/secchan.h	91;"	d
HALF_REMOTE	secchan/secchan.h	92;"	d
HASH_FINAL	lib/hash.h	40;"	d
HASH_H	lib/hash.h	17;"	d
HASH_MIX	lib/hash.h	30;"	d
HASH_ROT	lib/hash.h	28;"	d
HAVE_DPKG_BUILDPACKAGE	Makefile	/^HAVE_DPKG_BUILDPACKAGE = yes$/;"	m
HAVE_IF_PACKET	config.h	12;"	d
HAVE_INTTYPES_H	config.h	15;"	d
HAVE_LIBNBEE	config.h	18;"	d
HAVE_MALLOC_HOOKS	config.h	25;"	d
HAVE_MEMORY_H	config.h	28;"	d
HAVE_NETLINK	config.h	31;"	d
HAVE_PACKET_AUXDATA	lib/netdev.c	79;"	d	file:
HAVE_STDINT_H	config.h	37;"	d
HAVE_STDLIB_H	config.h	40;"	d
HAVE_STRINGS_H	config.h	43;"	d
HAVE_STRING_H	config.h	46;"	d
HAVE_STRSIGNAL	config.h	52;"	d
HAVE_SYS_STAT_H	config.h	55;"	d
HAVE_SYS_TYPES_H	config.h	58;"	d
HAVE_UNISTD_H	config.h	61;"	d
HBH	lib/packets.h	/^    HBH = 1 << 0,$/;"	e	enum:ipv6_ext_hdr_order_T1
HBH_ALLOWED	nbee_link/nbee_link.h	25;"	d
HEADERS	Makefile	/^HEADERS = $(noinst_HEADERS)$/;"	m
HMAP_FOR_EACH	lib/hmap.h	104;"	d
HMAP_FOR_EACH_SAFE	lib/hmap.h	110;"	d
HMAP_FOR_EACH_WITH_HASH	lib/hmap.h	88;"	d
HMAP_H	lib/hmap.h	35;"	d
HMAP_INITIALIZER	lib/hmap.h	62;"	d
HMAP_NODE_NULL	lib/hmap.h	64;"	d
HMAP_NODE_NULL_INITIALIZER	lib/hmap.h	65;"	d
HOST_ORDER	lib/byte-order.h	/^    HOST_ORDER = 1,$/;"	e	enum:byte_order
HW_DESC	udatapath/datapath.c	82;"	d	file:
HW_LIB	Makefile	/^HW_LIB = $/;"	m
HW_TABLES	Makefile	/^HW_TABLES = $/;"	m
ICMPV6_NEIGHADV	lib/packets.h	285;"	d
ICMPV6_NEIGHSOL	lib/packets.h	284;"	d
ICMP_HEADER_LEN	lib/packets.h	287;"	d
IFF_LOWER_UP	lib/netdev.c	128;"	d	file:
IN6ADDR_EXACT_INIT	lib/ipv6_util.h	19;"	d
IN6ADDR_ZERO_INIT	lib/ipv6_util.h	22;"	d
INC_IFP_STAT	lib/ofpstat.c	39;"	d	file:
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
IN_BAND_H	secchan/in-band.h	35;"	d
IPV6ADDLEN	nbee_link/nbee_link.h	20;"	d
IPV6_FLABEL	lib/packets.h	260;"	d
IPV6_FLABEL_MASK	lib/packets.h	262;"	d
IPV6_HEADER_LEN	lib/packets.h	264;"	d
IPV6_ND_HEADER_LEN	lib/packets.h	299;"	d
IPV6_ND_OPT_HD_LEN	lib/packets.h	305;"	d
IPV6_NO_NEXT_HEADER	lib/packets.h	256;"	d
IPV6_TC	lib/packets.h	259;"	d
IPV6_TYPE_AH	lib/packets.h	253;"	d
IPV6_TYPE_DOH	lib/packets.h	250;"	d
IPV6_TYPE_ESP	lib/packets.h	254;"	d
IPV6_TYPE_FH	lib/packets.h	252;"	d
IPV6_TYPE_HBH	lib/packets.h	249;"	d
IPV6_TYPE_ICMPV6	lib/packets.h	255;"	d
IPV6_TYPE_RH	lib/packets.h	251;"	d
IPV6_UTIL_H	lib/ipv6_util.h	2;"	d
IPV6_VER	lib/packets.h	258;"	d
IP_ADDR_LEN	lib/packets.h	232;"	d
IP_ARGS	lib/packets.h	202;"	d
IP_DONT_FRAGMENT	lib/packets.h	226;"	d
IP_DSCP_MASK	lib/packets.h	214;"	d
IP_DSCP_MASK	oflib/ofl-packets.h	73;"	d
IP_ECN_MASK	lib/packets.h	213;"	d
IP_ECN_MASK	oflib/ofl-packets.h	72;"	d
IP_FMT	lib/packets.h	201;"	d
IP_FMT	oflib/ofl-structs-print.c	55;"	d	file:
IP_FRAG_OFF_MASK	lib/packets.h	228;"	d
IP_HEADER_LEN	lib/packets.h	234;"	d
IP_IHL	lib/packets.h	209;"	d
IP_IHL_VER	lib/packets.h	210;"	d
IP_IS_FRAGMENT	lib/packets.h	229;"	d
IP_MORE_FRAGMENTS	lib/packets.h	227;"	d
IP_TYPE_ICMP	lib/packets.h	217;"	d
IP_TYPE_SCTP	lib/packets.h	220;"	d
IP_TYPE_TCP	lib/packets.h	218;"	d
IP_TYPE_UDP	lib/packets.h	219;"	d
IP_VER	lib/packets.h	208;"	d
IP_VERSION	lib/packets.h	224;"	d
IPv6_ADDR_LEN	oflib/ofl-packets.h	44;"	d
IS_HW_PORT	udatapath/dp_ports.h	80;"	d
IS_HW_PORT	udatapath/dp_ports.h	82;"	d
IS_POW2	lib/util.h	73;"	d
KARCH	Makefile	/^KARCH = $/;"	m
KEY_SEP	utilities/dpctl.h	251;"	d
KEY_VAL	utilities/dpctl.h	249;"	d
KEY_VAL2	utilities/dpctl.h	250;"	d
KO	debian/rules	/^KO=$/;"	m
KO	debian/rules	/^KO=k$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LEAK_CHECKER_H	lib/leak-checker.h	35;"	d
LEAK_CHECKER_LONG_OPTIONS	lib/leak-checker.h	42;"	d
LEAK_CHECKER_OPTION_ENUMS	lib/leak-checker.h	39;"	d
LEAK_CHECKER_OPTION_HANDLERS	lib/leak-checker.h	45;"	d
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBRARIES	Makefile	/^LIBRARIES = $(noinst_LIBRARIES)$/;"	m
LIBS	Makefile	/^LIBS = -lnbee $/;"	m
LINK	Makefile	/^LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@$/;"	m
LIST_FOR_EACH	lib/list.h	73;"	d
LIST_FOR_EACH_REVERSE	lib/list.h	77;"	d
LIST_FOR_EACH_SAFE	lib/list.h	81;"	d
LIST_H	lib/list.h	34;"	d
LIST_INITIALIZER	lib/list.h	49;"	d
LIST_IS_EMPTY	udatapath/dp_actions.c	59;"	d	file:
LIST_IS_EMPTY	udatapath/dp_exp_bme.c	54;"	d	file:
LIST_POP_FRONT	udatapath/dp_actions.c	58;"	d	file:
LIST_POP_FRONT	udatapath/dp_exp_bme.c	53;"	d	file:
LLC_CNTL_SNAP	lib/packets.h	139;"	d
LLC_DSAP_SNAP	lib/packets.h	137;"	d
LLC_HEADER_LEN	lib/packets.h	141;"	d
LLC_SNAP_HEADER_LEN	lib/packets.h	158;"	d
LLC_SSAP_SNAP	lib/packets.h	138;"	d
LOG2_N_TAG_BITS	lib/tag.c	44;"	d	file:
LOGDIR	Makefile	/^LOGDIR = ${localstatedir}\/log\/${PACKAGE}$/;"	m
LOG_MODULE	lib/backtrace.c	42;"	d	file:
LOG_MODULE	lib/daemon.c	45;"	d	file:
LOG_MODULE	lib/dhcp-client.c	55;"	d	file:
LOG_MODULE	lib/dhcp.c	45;"	d	file:
LOG_MODULE	lib/dpif.c	55;"	d	file:
LOG_MODULE	lib/fault.c	45;"	d	file:
LOG_MODULE	lib/leak-checker.c	39;"	d	file:
LOG_MODULE	lib/mac-learning.c	49;"	d	file:
LOG_MODULE	lib/netdev.c	131;"	d	file:
LOG_MODULE	lib/netlink.c	52;"	d	file:
LOG_MODULE	lib/ofp.c	69;"	d	file:
LOG_MODULE	lib/pcap.c	43;"	d	file:
LOG_MODULE	lib/poll-loop.c	47;"	d	file:
LOG_MODULE	lib/process.c	51;"	d	file:
LOG_MODULE	lib/rconn.c	51;"	d	file:
LOG_MODULE	lib/socket-util.c	52;"	d	file:
LOG_MODULE	lib/stp.c	48;"	d	file:
LOG_MODULE	lib/svec.c	43;"	d	file:
LOG_MODULE	lib/vconn-stream.c	53;"	d	file:
LOG_MODULE	lib/vconn-tcp.c	52;"	d	file:
LOG_MODULE	lib/vconn-unix.c	56;"	d	file:
LOG_MODULE	lib/vconn.c	54;"	d	file:
LOG_MODULE	lib/vlog-socket.c	58;"	d	file:
LOG_MODULE	lib/vlog.c	52;"	d	file:
LOG_MODULE	oflib-exp/ofl-exp-bme.c	45;"	d	file:
LOG_MODULE	oflib-exp/ofl-exp-nicira.c	42;"	d	file:
LOG_MODULE	oflib-exp/ofl-exp-openflow.c	42;"	d	file:
LOG_MODULE	oflib-exp/ofl-exp.c	45;"	d	file:
LOG_MODULE	oflib/ofl-actions-pack.c	45;"	d	file:
LOG_MODULE	oflib/ofl-actions-unpack.c	47;"	d	file:
LOG_MODULE	oflib/ofl-actions.c	39;"	d	file:
LOG_MODULE	oflib/ofl-messages-pack.c	44;"	d	file:
LOG_MODULE	oflib/ofl-messages-print.c	55;"	d	file:
LOG_MODULE	oflib/ofl-messages-unpack.c	45;"	d	file:
LOG_MODULE	oflib/ofl-messages.c	44;"	d	file:
LOG_MODULE	oflib/ofl-structs-pack.c	46;"	d	file:
LOG_MODULE	oflib/ofl-structs-unpack.c	45;"	d	file:
LOG_MODULE	oflib/ofl-structs.c	45;"	d	file:
LOG_MODULE	oflib/oxm-match.c	65;"	d	file:
LOG_MODULE	secchan/discovery.c	50;"	d	file:
LOG_MODULE	secchan/failover.c	47;"	d	file:
LOG_MODULE	secchan/in-band.c	54;"	d	file:
LOG_MODULE	secchan/port-watcher.c	54;"	d	file:
LOG_MODULE	secchan/secchan.c	71;"	d	file:
LOG_MODULE	secchan/status.c	49;"	d	file:
LOG_MODULE	secchan/stp-secchan.c	50;"	d	file:
LOG_MODULE	udatapath/action_set.c	44;"	d	file:
LOG_MODULE	udatapath/datapath.c	69;"	d	file:
LOG_MODULE	udatapath/dp_actions.c	51;"	d	file:
LOG_MODULE	udatapath/dp_buffers.c	48;"	d	file:
LOG_MODULE	udatapath/dp_control.c	48;"	d	file:
LOG_MODULE	udatapath/dp_exp.c	48;"	d	file:
LOG_MODULE	udatapath/dp_exp_bme.c	44;"	d	file:
LOG_MODULE	udatapath/dp_ports.c	56;"	d	file:
LOG_MODULE	udatapath/flow_entry.c	50;"	d	file:
LOG_MODULE	udatapath/flow_table.c	44;"	d	file:
LOG_MODULE	udatapath/group_entry.c	43;"	d	file:
LOG_MODULE	udatapath/group_table.c	47;"	d	file:
LOG_MODULE	udatapath/match_std.c	38;"	d	file:
LOG_MODULE	udatapath/meter_entry.c	46;"	d	file:
LOG_MODULE	udatapath/meter_table.c	46;"	d	file:
LOG_MODULE	udatapath/pipeline.c	56;"	d	file:
LOG_MODULE	utilities/dpctl.c	77;"	d	file:
LOG_MODULE	utilities/ofp-discover.c	55;"	d	file:
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
LinkLayerType	nbee_link/nbee_link.cpp	/^nbNetPDLLinkLayer_t LinkLayerType;$/;"	v
MAC_HASH_BITS	lib/mac-learning.c	52;"	d	file:
MAC_HASH_MASK	lib/mac-learning.c	53;"	d	file:
MAC_HASH_SIZE	lib/mac-learning.c	54;"	d	file:
MAC_LEARNING_H	lib/mac-learning.h	35;"	d
MAC_MAX	lib/mac-learning.c	56;"	d	file:
MAINTAINERCLEANFILES	Makefile	/^MAINTAINERCLEANFILES = Makefile.in aclocal.m4 config.guess config.sub config.h.in configure depcomp install-sh missing ltmain.sh *~ *.tar.*$/;"	m
MAINTAINERCLEANFILES	nbee_link/automake.mk	/^MAINTAINERCLEANFILES = Makefile.in aclocal.m4 config.guess config.sub config.h.in configure depcomp install-sh missing ltmain.sh *~ *.tar.*$/;"	m
MAIN_CONNECTION	udatapath/datapath.c	87;"	d	file:
MAJOR	debian/rules	/^MAJOR=$(shell echo $(KVERS) | sed -e 's\/\\(...\\).*\/\\1\/')$/;"	m
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/home\/mininet\/of13ofswitch.bme\/build-aux\/missing --run makeinfo$/;"	m
MALLOC_LIKE	lib/compiler.h	42;"	d
MANS	Makefile	/^MANS = $(dist_man_MANS) $(man_MANS)$/;"	m
MASK_SEP	utilities/dpctl.h	252;"	d
MATCH_ARP_OP	utilities/dpctl.h	197;"	d
MATCH_ARP_SHA	utilities/dpctl.h	198;"	d
MATCH_ARP_SPA	utilities/dpctl.h	200;"	d
MATCH_ARP_THA	utilities/dpctl.h	199;"	d
MATCH_ARP_TPA	utilities/dpctl.h	201;"	d
MATCH_DL_DST	utilities/dpctl.h	177;"	d
MATCH_DL_DST_MASK	utilities/dpctl.h	178;"	d
MATCH_DL_SRC	utilities/dpctl.h	175;"	d
MATCH_DL_SRC_MASK	utilities/dpctl.h	176;"	d
MATCH_DL_TYPE	utilities/dpctl.h	183;"	d
MATCH_DL_VLAN	utilities/dpctl.h	179;"	d
MATCH_DL_VLAN_PCP	utilities/dpctl.h	182;"	d
MATCH_EXT_H	udatapath/match_std.h	33;"	d
MATCH_EXT_HDR	utilities/dpctl.h	217;"	d
MATCH_ICMPV4_CODE	utilities/dpctl.h	195;"	d
MATCH_ICMPV4_TYPE	utilities/dpctl.h	196;"	d
MATCH_ICMPV6_CODE	utilities/dpctl.h	204;"	d
MATCH_ICMPV6_TYPE	utilities/dpctl.h	205;"	d
MATCH_IN_PORT	utilities/dpctl.h	174;"	d
MATCH_IPV6_FLABEL	utilities/dpctl.h	206;"	d
MATCH_IPV6_ND_SLL	utilities/dpctl.h	208;"	d
MATCH_IPV6_ND_TARGET	utilities/dpctl.h	207;"	d
MATCH_IPV6_ND_TLL	utilities/dpctl.h	209;"	d
MATCH_IP_DSCP	utilities/dpctl.h	180;"	d
MATCH_IP_ECN	utilities/dpctl.h	181;"	d
MATCH_METADATA	utilities/dpctl.h	213;"	d
MATCH_METADATA_MASK	utilities/dpctl.h	214;"	d
MATCH_MPLS_BOS	utilities/dpctl.h	212;"	d
MATCH_MPLS_LABEL	utilities/dpctl.h	210;"	d
MATCH_MPLS_TC	utilities/dpctl.h	211;"	d
MATCH_NW_DST	utilities/dpctl.h	187;"	d
MATCH_NW_DST_IPV6	utilities/dpctl.h	203;"	d
MATCH_NW_DST_MASK	utilities/dpctl.h	188;"	d
MATCH_NW_PROTO	utilities/dpctl.h	184;"	d
MATCH_NW_SRC	utilities/dpctl.h	185;"	d
MATCH_NW_SRC_IPV6	utilities/dpctl.h	202;"	d
MATCH_NW_SRC_MASK	utilities/dpctl.h	186;"	d
MATCH_PBB_ISID	utilities/dpctl.h	215;"	d
MATCH_SCTP_DST	utilities/dpctl.h	194;"	d
MATCH_SCTP_SRC	utilities/dpctl.h	193;"	d
MATCH_TP_DST	utilities/dpctl.h	190;"	d
MATCH_TP_SRC	utilities/dpctl.h	189;"	d
MATCH_TUNNEL_ID	utilities/dpctl.h	216;"	d
MATCH_UDP_DST	utilities/dpctl.h	192;"	d
MATCH_UDP_SRC	utilities/dpctl.h	191;"	d
MAX	lib/util.h	80;"	d
MAX_CONTROLLERS	secchan/secchan.h	48;"	d
MAX_HOOKS	lib/fatal-signal.c	57;"	d	file:
MAX_HW_NAME_LEN	udatapath/dp_ports.h	74;"	d
MAX_MGMT	secchan/secchan.h	46;"	d
MAX_MONITORS	lib/rconn.c	133;"	d	file:
MAX_PROCESSES	lib/netlink.c	939;"	d	file:
MAX_SOCKETS	lib/netlink.c	936;"	d	file:
MA_DIR	debian/rules	/^MA_DIR ?= \/usr\/share\/modass$/;"	m
MESSAGE_AGE_INCREMENT	lib/stp.c	166;"	d	file:
METER_ENTRY_H	udatapath/meter_entry.h	33;"	d
METER_MOD_COMMAND	utilities/dpctl.h	227;"	d
METER_MOD_FLAGS	utilities/dpctl.h	228;"	d
METER_MOD_METER	utilities/dpctl.h	229;"	d
METER_TABLE_H	udatapath/meter_table.h	33;"	d
METER_TABLE_MAX_BANDS	udatapath/meter_table.h	46;"	d
MFR_DESC	udatapath/datapath.c	81;"	d	file:
MIN	lib/util.h	76;"	d
MIN_ACCEPTABLE_LEASE	lib/dhcp-client.c	125;"	d	file:
MKDIR_P	Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MPLS_HEADER_LEN	lib/packets.h	392;"	d
MPLS_LABEL_MASK	lib/packets.h	403;"	d
MPLS_LABEL_MASK	oflib/ofl-packets.h	64;"	d
MPLS_LABEL_MAX	lib/packets.h	389;"	d
MPLS_LABEL_MAX	oflib/ofl-packets.h	67;"	d
MPLS_LABEL_SHIFT	lib/packets.h	404;"	d
MPLS_LABEL_SHIFT	oflib/ofl-packets.h	65;"	d
MPLS_S_MASK	lib/packets.h	399;"	d
MPLS_S_MASK	oflib/ofl-packets.h	60;"	d
MPLS_S_SHIFT	lib/packets.h	400;"	d
MPLS_S_SHIFT	oflib/ofl-packets.h	61;"	d
MPLS_TC_MASK	lib/packets.h	401;"	d
MPLS_TC_MASK	oflib/ofl-packets.h	62;"	d
MPLS_TC_MAX	lib/packets.h	390;"	d
MPLS_TC_MAX	oflib/ofl-packets.h	68;"	d
MPLS_TC_SHIFT	lib/packets.h	402;"	d
MPLS_TC_SHIFT	oflib/ofl-packets.h	63;"	d
MPLS_TTL_MASK	lib/packets.h	397;"	d
MPLS_TTL_MASK	oflib/ofl-packets.h	58;"	d
MPLS_TTL_SHIFT	lib/packets.h	398;"	d
MPLS_TTL_SHIFT	oflib/ofl-packets.h	59;"	d
NBEE_LINK_H_	nbee_link/nbee_link.h	9;"	d
ND_OPT_SLL	lib/packets.h	296;"	d
ND_OPT_TLL	lib/packets.h	297;"	d
NETDEV_CARRIER	lib/netdev.h	/^    NETDEV_CARRIER = 0x0004     \/* Carrier detected? *\/$/;"	e	enum:netdev_flags
NETDEV_ETH_TYPE_802_2	lib/netdev.h	/^    NETDEV_ETH_TYPE_802_2        \/* Receive all IEEE 802.2 frames. *\/$/;"	e	enum:netdev_pseudo_ethertype
NETDEV_ETH_TYPE_ANY	lib/netdev.h	/^    NETDEV_ETH_TYPE_ANY,         \/* Receive all frames. *\/$/;"	e	enum:netdev_pseudo_ethertype
NETDEV_ETH_TYPE_NONE	lib/netdev.h	/^    NETDEV_ETH_TYPE_NONE = -128, \/* Receive no frames. *\/$/;"	e	enum:netdev_pseudo_ethertype
NETDEV_FEAT_ADVERTISED	lib/netdev.h	/^    NETDEV_FEAT_ADVERTISED,$/;"	e	enum:netdev_feature_type
NETDEV_FEAT_CURRENT	lib/netdev.h	/^    NETDEV_FEAT_CURRENT,$/;"	e	enum:netdev_feature_type
NETDEV_FEAT_PEER	lib/netdev.h	/^    NETDEV_FEAT_PEER$/;"	e	enum:netdev_feature_type
NETDEV_FEAT_SUPPORTED	lib/netdev.h	/^    NETDEV_FEAT_SUPPORTED,$/;"	e	enum:netdev_feature_type
NETDEV_H	lib/netdev.h	35;"	d
NETDEV_MAX_QUEUES	lib/netdev.h	71;"	d
NETDEV_PROMISC	lib/netdev.h	/^    NETDEV_PROMISC = 0x0002,    \/* Promiscuous mode? *\/$/;"	e	enum:netdev_flags
NETDEV_UP	lib/netdev.h	/^    NETDEV_UP = 0x0001,         \/* Device enabled? *\/$/;"	e	enum:netdev_flags
NETLINK_ADD_MEMBERSHIP	lib/netlink-protocol.h	95;"	d
NETLINK_ADD_MEMBERSHIP	lib/netlink.c	170;"	d	file:
NETLINK_DROP_MEMBERSHIP	lib/netlink-protocol.h	96;"	d
NETLINK_GENERIC	lib/netlink-protocol.h	46;"	d
NETLINK_H	lib/netlink.h	35;"	d
NETLINK_PKTINFO	lib/netlink-protocol.h	97;"	d
NETLINK_PROTOCOL_H	lib/netlink-protocol.h	35;"	d
NETPDLFILE	nbee_link/nbee_link.cpp	35;"	d	file:
NETWORK_ORDER	lib/byte-order.h	/^    NETWORK_ORDER = 0,$/;"	e	enum:byte_order
NICIRA_OUI_STR	include/openflow/nicira-ext.h	22;"	d
NLA_ALIGN	lib/netlink-protocol.h	115;"	d
NLA_ALIGNTO	lib/netlink-protocol.h	114;"	d
NLA_HDRLEN	lib/netlink-protocol.h	116;"	d
NLMSG_ALIGN	lib/netlink-protocol.h	85;"	d
NLMSG_ALIGNTO	lib/netlink-protocol.h	84;"	d
NLMSG_DONE	lib/netlink-protocol.h	70;"	d
NLMSG_ERROR	lib/netlink-protocol.h	69;"	d
NLMSG_HDRLEN	lib/netlink-protocol.h	86;"	d
NLMSG_MIN_TYPE	lib/netlink-protocol.h	73;"	d
NLMSG_NOOP	lib/netlink-protocol.h	68;"	d
NLMSG_OVERRUN	lib/netlink-protocol.h	71;"	d
NLM_F_ACK	lib/netlink-protocol.h	59;"	d
NLM_F_ATOMIC	lib/netlink-protocol.h	64;"	d
NLM_F_DUMP	lib/netlink-protocol.h	65;"	d
NLM_F_ECHO	lib/netlink-protocol.h	60;"	d
NLM_F_MATCH	lib/netlink-protocol.h	63;"	d
NLM_F_MULTI	lib/netlink-protocol.h	58;"	d
NLM_F_REQUEST	lib/netlink-protocol.h	57;"	d
NLM_F_ROOT	lib/netlink-protocol.h	62;"	d
NL_ATTR_GET_AS	lib/netlink.c	702;"	d	file:
NL_A_FLAG	lib/netlink.h	/^    NL_A_FLAG,$/;"	e	enum:nl_attr_type
NL_A_NESTED	lib/netlink.h	/^    NL_A_NESTED,$/;"	e	enum:nl_attr_type
NL_A_NO_ATTR	lib/netlink.h	/^    NL_A_NO_ATTR = 0,$/;"	e	enum:nl_attr_type
NL_A_STRING	lib/netlink.h	/^    NL_A_STRING,$/;"	e	enum:nl_attr_type
NL_A_U16	lib/netlink.h	/^    NL_A_U16,$/;"	e	enum:nl_attr_type
NL_A_U32	lib/netlink.h	/^    NL_A_U32,$/;"	e	enum:nl_attr_type
NL_A_U64	lib/netlink.h	/^    NL_A_U64,$/;"	e	enum:nl_attr_type
NL_A_U8	lib/netlink.h	/^    NL_A_U8,$/;"	e	enum:nl_attr_type
NL_A_UNSPEC	lib/netlink.h	/^    NL_A_UNSPEC,$/;"	e	enum:nl_attr_type
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NOT_IMPLEMENTED	lib/util.h	84;"	d
NOT_REACHED	lib/util.h	83;"	d
NOT_TESTED	lib/util.h	85;"	d
NO_BUFFER	udatapath/dp_buffers.h	49;"	d
NO_RETURN	lib/compiler.h	37;"	d
NROFF	Makefile	/^NROFF = nroff$/;"	m
NUM_ELEMS	utilities/dpctl.h	259;"	d
NUM_OXM_FIELDS	oflib/oxm-match.h	/^    NUM_OXM_FIELDS = 56$/;"	e	enum:oxm_field_index
NXAST_DROP_SPOOFED_ARP	include/openflow/nicira-ext.h	/^    NXAST_DROP_SPOOFED_ARP$/;"	e	enum:nx_action_subtype
NXAST_RESUBMIT	include/openflow/nicira-ext.h	/^    NXAST_RESUBMIT,$/;"	e	enum:nx_action_subtype
NXAST_SET_TUNNEL	include/openflow/nicira-ext.h	/^    NXAST_SET_TUNNEL,$/;"	e	enum:nx_action_subtype
NXAST_SNAT__OBSOLETE	include/openflow/nicira-ext.h	/^    NXAST_SNAT__OBSOLETE,           \/* No longer used. *\/$/;"	e	enum:nx_action_subtype
NXFW_ALL	include/openflow/nicira-ext.h	187;"	d
NXFW_DL_DST	include/openflow/nicira-ext.h	185;"	d
NXFW_DL_SRC	include/openflow/nicira-ext.h	184;"	d
NXFW_NW_DST	include/openflow/nicira-ext.h	183;"	d
NXFW_NW_SRC	include/openflow/nicira-ext.h	182;"	d
NXFW_TUN_ID	include/openflow/nicira-ext.h	181;"	d
NXT_ACT_GET_CONFIG__OBSOLETE	include/openflow/nicira-ext.h	/^    NXT_ACT_GET_CONFIG__OBSOLETE,$/;"	e	enum:nicira_type
NXT_ACT_SET_CONFIG__OBSOLETE	include/openflow/nicira-ext.h	/^    NXT_ACT_SET_CONFIG__OBSOLETE,$/;"	e	enum:nicira_type
NXT_COMMAND_REPLY__OBSOLETE	include/openflow/nicira-ext.h	/^    NXT_COMMAND_REPLY__OBSOLETE,$/;"	e	enum:nicira_type
NXT_COMMAND_REQUEST__OBSOLETE	include/openflow/nicira-ext.h	/^    NXT_COMMAND_REQUEST__OBSOLETE,$/;"	e	enum:nicira_type
NXT_FLOW_END_CONFIG__OBSOLETE	include/openflow/nicira-ext.h	/^    NXT_FLOW_END_CONFIG__OBSOLETE,$/;"	e	enum:nicira_type
NXT_FLOW_END__OBSOLETE	include/openflow/nicira-ext.h	/^    NXT_FLOW_END__OBSOLETE,$/;"	e	enum:nicira_type
NXT_MGMT__OBSOLETE	include/openflow/nicira-ext.h	/^    NXT_MGMT__OBSOLETE,$/;"	e	enum:nicira_type
NXT_ROLE_REPLY	include/openflow/nicira-ext.h	/^    NXT_ROLE_REPLY$/;"	e	enum:nicira_type
NXT_ROLE_REQUEST	include/openflow/nicira-ext.h	/^    NXT_ROLE_REQUEST,$/;"	e	enum:nicira_type
NXT_STATUS_REPLY	include/openflow/nicira-ext.h	/^    NXT_STATUS_REPLY,$/;"	e	enum:nicira_type
NXT_STATUS_REQUEST	include/openflow/nicira-ext.h	/^    NXT_STATUS_REQUEST,$/;"	e	enum:nicira_type
NXT_TUN_ID_FROM_COOKIE	include/openflow/nicira-ext.h	/^    NXT_TUN_ID_FROM_COOKIE,$/;"	e	enum:nicira_type
NX_ROLE_MASTER	include/openflow/nicira-ext.h	/^    NX_ROLE_MASTER,             \/* Full access, at most one. *\/$/;"	e	enum:nx_role
NX_ROLE_OTHER	include/openflow/nicira-ext.h	/^    NX_ROLE_OTHER,              \/* Default role, full access. *\/$/;"	e	enum:nx_role
NX_ROLE_SLAVE	include/openflow/nicira-ext.h	/^    NX_ROLE_SLAVE               \/* Read-only access. *\/$/;"	e	enum:nx_role
NX_VENDOR_ID	include/openflow/nicira-ext.h	28;"	d
N_ACTIONS	udatapath/flow_table.h	45;"	d
N_INSTRUCTIONS	udatapath/flow_table.h	44;"	d
N_NL_ATTR_TYPES	lib/netlink.h	/^    N_NL_ATTR_TYPES$/;"	e	enum:nl_attr_type
N_PKT_BUFFERS	udatapath/dp_buffers.c	61;"	d	file:
N_SIGNALS	lib/signals.c	46;"	d	file:
N_SIGNALS	lib/signals.c	48;"	d	file:
N_SIGNALS	lib/signals.c	52;"	d	file:
N_TAG_BITS	lib/tag.c	41;"	d	file:
N_WILDCARDED	udatapath/flow_table.h	46;"	d
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
OFL_ACTIONS_H	oflib/ofl-actions.h	33;"	d
OFL_ERROR	oflib/ofl.h	144;"	d
OFL_EXP_BME_H	oflib-exp/ofl-exp-bme.h	33;"	d
OFL_EXP_H	oflib-exp/ofl-exp.h	33;"	d
OFL_EXP_NICIRA_H	oflib-exp/ofl-exp-nicira.h	33;"	d
OFL_EXP_OPENFLOW_H	oflib-exp/ofl-exp-openflow.h	33;"	d
OFL_H	oflib/ofl.h	33;"	d
OFL_LOG_DBG	oflib/ofl-log-vlog-cc.h	42;"	d
OFL_LOG_DBG	oflib/ofl-log-vlog.h	41;"	d
OFL_LOG_H	oflib/ofl-log.h	33;"	d
OFL_LOG_INIT	oflib-exp/ofl-exp-bme.c	/^OFL_LOG_INIT(LOG_MODULE)$/;"	f
OFL_LOG_INIT	oflib-exp/ofl-exp-nicira.c	/^OFL_LOG_INIT(LOG_MODULE)$/;"	f
OFL_LOG_INIT	oflib-exp/ofl-exp-openflow.c	/^OFL_LOG_INIT(LOG_MODULE)$/;"	f
OFL_LOG_INIT	oflib-exp/ofl-exp.c	/^OFL_LOG_INIT(LOG_MODULE)$/;"	f
OFL_LOG_INIT	oflib/ofl-actions-pack.c	/^OFL_LOG_INIT(LOG_MODULE)$/;"	f
OFL_LOG_INIT	oflib/ofl-actions-unpack.c	/^OFL_LOG_INIT(LOG_MODULE)$/;"	f
OFL_LOG_INIT	oflib/ofl-actions.c	/^OFL_LOG_INIT(LOG_MODULE)$/;"	f
OFL_LOG_INIT	oflib/ofl-log-vlog-cc.h	39;"	d
OFL_LOG_INIT	oflib/ofl-log-vlog.h	39;"	d
OFL_LOG_INIT	oflib/ofl-structs-pack.c	/^OFL_LOG_INIT(LOG_MODULE)$/;"	f
OFL_LOG_INIT	oflib/ofl-structs-unpack.c	/^OFL_LOG_INIT(LOG_MODULE)$/;"	f
OFL_LOG_INIT	oflib/ofl-structs.c	/^OFL_LOG_INIT(LOG_MODULE)$/;"	f
OFL_LOG_IS_DBG_ENABLED	oflib/ofl-log-vlog-cc.h	48;"	d
OFL_LOG_IS_DBG_ENABLED	oflib/ofl-log-vlog.h	47;"	d
OFL_LOG_IS_WARN_ENABLED	oflib/ofl-log-vlog-cc.h	51;"	d
OFL_LOG_IS_WARN_ENABLED	oflib/ofl-log-vlog.h	50;"	d
OFL_LOG_VLOG_CC_H	oflib/ofl-log-vlog-cc.h	33;"	d
OFL_LOG_VLOG_H	oflib/ofl-log-vlog.h	33;"	d
OFL_LOG_WARN	oflib/ofl-log-vlog-cc.h	45;"	d
OFL_LOG_WARN	oflib/ofl-log-vlog.h	44;"	d
OFL_MESSAGES_H	oflib/ofl-messages.h	33;"	d
OFL_PACKETS_H	oflib/ofl-packets.h	32;"	d
OFL_PRINT_H	oflib/ofl-print.h	33;"	d
OFL_STRUCTS_H	oflib/ofl-structs.h	33;"	d
OFL_UTILS_FREE_ARR	oflib/ofl-utils.h	42;"	d
OFL_UTILS_FREE_ARR_FUN	oflib/ofl-utils.h	54;"	d
OFL_UTILS_FREE_ARR_FUN2	oflib/ofl-utils.h	63;"	d
OFL_UTILS_H	oflib/ofl-utils.h	33;"	d
OFL_UTILS_SUM_ARR_FUN	oflib/ofl-utils.h	77;"	d
OFL_UTILS_SUM_ARR_FUN2	oflib/ofl-utils.h	90;"	d
OFPAT_COPY_TTL_IN	include/openflow/openflow.h	/^    OFPAT_COPY_TTL_IN = 12,  \/* Copy TTL "inwards" -- from outermost to$/;"	e	enum:ofp_action_type
OFPAT_COPY_TTL_OUT	include/openflow/openflow.h	/^    OFPAT_COPY_TTL_OUT = 11, \/* Copy TTL "outwards" -- from next-to-outermost$/;"	e	enum:ofp_action_type
OFPAT_DEC_MPLS_TTL	include/openflow/openflow.h	/^    OFPAT_DEC_MPLS_TTL = 16, \/* Decrement MPLS TTL *\/$/;"	e	enum:ofp_action_type
OFPAT_DEC_NW_TTL	include/openflow/openflow.h	/^    OFPAT_DEC_NW_TTL = 24,   \/* Decrement IP TTL. *\/$/;"	e	enum:ofp_action_type
OFPAT_EXPERIMENTER	include/openflow/openflow.h	/^    OFPAT_EXPERIMENTER = 0xffff$/;"	e	enum:ofp_action_type
OFPAT_GROUP	include/openflow/openflow.h	/^    OFPAT_GROUP = 22,        \/* Apply group. *\/$/;"	e	enum:ofp_action_type
OFPAT_OUTPUT	include/openflow/openflow.h	/^    OFPAT_OUTPUT = 0,        \/* Output to switch port. *\/$/;"	e	enum:ofp_action_type
OFPAT_POP_MPLS	include/openflow/openflow.h	/^    OFPAT_POP_MPLS = 20,     \/* Pop the outer MPLS tag *\/$/;"	e	enum:ofp_action_type
OFPAT_POP_PBB	include/openflow/openflow.h	/^    OFPAT_POP_PBB = 27,      \/* Pop the outer PBB service tag (I-TAG) *\/$/;"	e	enum:ofp_action_type
OFPAT_POP_VLAN	include/openflow/openflow.h	/^    OFPAT_POP_VLAN = 18,     \/* Pop the outer VLAN tag *\/$/;"	e	enum:ofp_action_type
OFPAT_PUSH_MPLS	include/openflow/openflow.h	/^    OFPAT_PUSH_MPLS = 19,    \/* Push a new MPLS tag *\/$/;"	e	enum:ofp_action_type
OFPAT_PUSH_PBB	include/openflow/openflow.h	/^    OFPAT_PUSH_PBB = 26,     \/*Push a new PBB service tag (I-TAG) *\/$/;"	e	enum:ofp_action_type
OFPAT_PUSH_VLAN	include/openflow/openflow.h	/^    OFPAT_PUSH_VLAN = 17,    \/* Push a new VLAN tag *\/$/;"	e	enum:ofp_action_type
OFPAT_SET_DL_DST	include/openflow/openflow.h	/^    OFPAT_SET_DL_DST =29,       \/* Ethernet destination address. *\/$/;"	e	enum:ofp_action_type
OFPAT_SET_FIELD	include/openflow/openflow.h	/^    OFPAT_SET_FIELD = 25,    \/* Set a header field using OXM TLV format. *\/$/;"	e	enum:ofp_action_type
OFPAT_SET_MPLS_LABEL	include/openflow/openflow.h	/^    OFPAT_SET_MPLS_LABEL = 28,  \/* MPLS label *\/$/;"	e	enum:ofp_action_type
OFPAT_SET_MPLS_LABEL_FROM_COUNTER	include/openflow/openflow.h	/^    OFPAT_SET_MPLS_LABEL_FROM_COUNTER = 32,  \/* MPLS label from counter*\/$/;"	e	enum:ofp_action_type
OFPAT_SET_MPLS_TTL	include/openflow/openflow.h	/^    OFPAT_SET_MPLS_TTL = 15, \/* MPLS TTL *\/$/;"	e	enum:ofp_action_type
OFPAT_SET_NW_DST	include/openflow/openflow.h	/^    OFPAT_SET_NW_DST =30,       \/* IP destination address. *\/$/;"	e	enum:ofp_action_type
OFPAT_SET_NW_TTL	include/openflow/openflow.h	/^    OFPAT_SET_NW_TTL = 23,   \/* IP TTL. *\/$/;"	e	enum:ofp_action_type
OFPAT_SET_PARITY_MPLS_LABEL	include/openflow/openflow.h	/^    OFPAT_SET_PARITY_MPLS_LABEL = 31,  \/* MPLS label parity *\/$/;"	e	enum:ofp_action_type
OFPAT_SET_QUEUE	include/openflow/openflow.h	/^    OFPAT_SET_QUEUE = 21,    \/* Set queue id when outputting to a port *\/$/;"	e	enum:ofp_action_type
OFPAT_XOR_DECODE	include/openflow/openflow.h	/^    OFPAT_XOR_DECODE = 34,  \/* XOR decoding*\/$/;"	e	enum:ofp_action_type
OFPAT_XOR_ENCODE	include/openflow/openflow.h	/^    OFPAT_XOR_ENCODE = 33,  \/* XOR encoding*\/$/;"	e	enum:ofp_action_type
OFPBAC_BAD_ARGUMENT	include/openflow/openflow.h	/^    OFPBAC_BAD_ARGUMENT = 5,        \/* Bad action argument. *\/$/;"	e	enum:ofp_bad_action_code
OFPBAC_BAD_EXPERIMENTER	include/openflow/openflow.h	/^    OFPBAC_BAD_EXPERIMENTER = 2,    \/* Unknown experimenter id specified. *\/$/;"	e	enum:ofp_bad_action_code
OFPBAC_BAD_EXP_TYPE	include/openflow/openflow.h	/^    OFPBAC_BAD_EXP_TYPE = 3,        \/* Unknown action for experimenter id. *\/$/;"	e	enum:ofp_bad_action_code
OFPBAC_BAD_LEN	include/openflow/openflow.h	/^    OFPBAC_BAD_LEN = 1,             \/* Length problem in actions. *\/$/;"	e	enum:ofp_bad_action_code
OFPBAC_BAD_OUT_GROUP	include/openflow/openflow.h	/^    OFPBAC_BAD_OUT_GROUP = 9,       \/* Invalid group id in forward action. *\/$/;"	e	enum:ofp_bad_action_code
OFPBAC_BAD_OUT_PORT	include/openflow/openflow.h	/^    OFPBAC_BAD_OUT_PORT = 4,        \/* Problem validating output port. *\/$/;"	e	enum:ofp_bad_action_code
OFPBAC_BAD_QUEUE	include/openflow/openflow.h	/^    OFPBAC_BAD_QUEUE = 8,           \/* Problem validating output queue. *\/$/;"	e	enum:ofp_bad_action_code
OFPBAC_BAD_SET_ARGUMENT	include/openflow/openflow.h	/^    OFPBAC_BAD_SET_ARGUMENT = 15,   \/* Bad argument in SET_FIELD action. *\/$/;"	e	enum:ofp_bad_action_code
OFPBAC_BAD_SET_LEN	include/openflow/openflow.h	/^    OFPBAC_BAD_SET_LEN = 14,        \/* Length problem in SET_FIELD action. *\/$/;"	e	enum:ofp_bad_action_code
OFPBAC_BAD_SET_TYPE	include/openflow/openflow.h	/^    OFPBAC_BAD_SET_TYPE = 13,       \/* Unsupported type in SET_FIELD action. *\/$/;"	e	enum:ofp_bad_action_code
OFPBAC_BAD_TAG	include/openflow/openflow.h	/^    OFPBAC_BAD_TAG = 12,            \/* Actions uses an unsupported$/;"	e	enum:ofp_bad_action_code
OFPBAC_BAD_TYPE	include/openflow/openflow.h	/^    OFPBAC_BAD_TYPE = 0,            \/* Unknown action type. *\/$/;"	e	enum:ofp_bad_action_code
OFPBAC_EPERM	include/openflow/openflow.h	/^    OFPBAC_EPERM = 6,               \/* Permissions error. *\/$/;"	e	enum:ofp_bad_action_code
OFPBAC_MATCH_INCONSISTENT	include/openflow/openflow.h	/^    OFPBAC_MATCH_INCONSISTENT = 10, \/* Action can’t apply for this match,$/;"	e	enum:ofp_bad_action_code
OFPBAC_TOO_MANY	include/openflow/openflow.h	/^    OFPBAC_TOO_MANY = 7,            \/* Can’t handle this many actions. *\/$/;"	e	enum:ofp_bad_action_code
OFPBAC_UNSUPPORTED_ORDER	include/openflow/openflow.h	/^    OFPBAC_UNSUPPORTED_ORDER = 11,  \/* Action order is unsupported for the$/;"	e	enum:ofp_bad_action_code
OFPBIC_BAD_EXPERIMENTER	include/openflow/openflow.h	/^    OFPBIC_BAD_EXPERIMENTER = 5,    \/* Unknown experimenter id specified. *\/$/;"	e	enum:ofp_bad_instruction_code
OFPBIC_BAD_EXP_TYPE	include/openflow/openflow.h	/^    OFPBIC_BAD_EXP_TYPE = 6,        \/* Unknown instruction for experimenter id. *\/$/;"	e	enum:ofp_bad_instruction_code
OFPBIC_BAD_LEN	include/openflow/openflow.h	/^    OFPBIC_BAD_LEN = 7,             \/* Length problem in instructions. *\/$/;"	e	enum:ofp_bad_instruction_code
OFPBIC_BAD_TABLE_ID	include/openflow/openflow.h	/^    OFPBIC_BAD_TABLE_ID = 2,        \/* Invalid Table-ID specified. *\/$/;"	e	enum:ofp_bad_instruction_code
OFPBIC_EPERM	include/openflow/openflow.h	/^    OFPBIC_EPERM = 8,               \/* Permissions error. *\/$/;"	e	enum:ofp_bad_instruction_code
OFPBIC_UNKNOWN_INST	include/openflow/openflow.h	/^    OFPBIC_UNKNOWN_INST = 0,        \/* Unknown instruction. *\/$/;"	e	enum:ofp_bad_instruction_code
OFPBIC_UNSUP_INST	include/openflow/openflow.h	/^    OFPBIC_UNSUP_INST = 1,          \/* Switch or table does not support the$/;"	e	enum:ofp_bad_instruction_code
OFPBIC_UNSUP_METADATA	include/openflow/openflow.h	/^    OFPBIC_UNSUP_METADATA = 3,      \/* Metadata value unsupported by datapath. *\/$/;"	e	enum:ofp_bad_instruction_code
OFPBIC_UNSUP_METADATA_MASK	include/openflow/openflow.h	/^    OFPBIC_UNSUP_METADATA_MASK = 4, \/* Metadata mask value unsupported by$/;"	e	enum:ofp_bad_instruction_code
OFPBMC_BAD_DL_ADDR_MASK	include/openflow/openflow.h	/^    OFPBMC_BAD_DL_ADDR_MASK = 3, \/* Unsupported datalink addr mask - switch$/;"	e	enum:ofp_bad_match_code
OFPBMC_BAD_FIELD	include/openflow/openflow.h	/^    OFPBMC_BAD_FIELD = 6,        \/* Unsupported field type in the match. *\/$/;"	e	enum:ofp_bad_match_code
OFPBMC_BAD_LEN	include/openflow/openflow.h	/^    OFPBMC_BAD_LEN = 1,          \/* Length problem in match. *\/$/;"	e	enum:ofp_bad_match_code
OFPBMC_BAD_MASK	include/openflow/openflow.h	/^    OFPBMC_BAD_MASK = 8,         \/* Unsupported mask specified in the match,$/;"	e	enum:ofp_bad_match_code
OFPBMC_BAD_NW_ADDR_MASK	include/openflow/openflow.h	/^    OFPBMC_BAD_NW_ADDR_MASK = 4, \/* Unsupported network addr mask - switch$/;"	e	enum:ofp_bad_match_code
OFPBMC_BAD_PREREQ	include/openflow/openflow.h	/^    OFPBMC_BAD_PREREQ = 9,       \/* A prerequisite was not met. *\/$/;"	e	enum:ofp_bad_match_code
OFPBMC_BAD_TAG	include/openflow/openflow.h	/^    OFPBMC_BAD_TAG = 2,          \/* Match uses an unsupported tag\/encap. *\/$/;"	e	enum:ofp_bad_match_code
OFPBMC_BAD_TYPE	include/openflow/openflow.h	/^    OFPBMC_BAD_TYPE = 0,         \/* Unsupported match type specified by the$/;"	e	enum:ofp_bad_match_code
OFPBMC_BAD_VALUE	include/openflow/openflow.h	/^    OFPBMC_BAD_VALUE = 7,        \/* Unsupported value in a match field. *\/$/;"	e	enum:ofp_bad_match_code
OFPBMC_BAD_WILDCARDS	include/openflow/openflow.h	/^    OFPBMC_BAD_WILDCARDS = 5,    \/* Unsupported combination of fields masked$/;"	e	enum:ofp_bad_match_code
OFPBMC_DUP_FIELD	include/openflow/openflow.h	/^    OFPBMC_DUP_FIELD = 10,       \/* A field type was duplicated. *\/$/;"	e	enum:ofp_bad_match_code
OFPBMC_EPERM	include/openflow/openflow.h	/^    OFPBMC_EPERM = 11,           \/* Permissions error. *\/$/;"	e	enum:ofp_bad_match_code
OFPBRC_BAD_EXPERIMENTER	include/openflow/openflow.h	/^    OFPBRC_BAD_EXPERIMENTER = 3, \/* Experimenter id not supported$/;"	e	enum:ofp_bad_request_code
OFPBRC_BAD_EXP_TYPE	include/openflow/openflow.h	/^    OFPBRC_BAD_EXP_TYPE = 4,     \/* Experimenter type not supported. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_BAD_LEN	include/openflow/openflow.h	/^    OFPBRC_BAD_LEN = 6,          \/* Wrong request length for type. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_BAD_MULTIPART	include/openflow/openflow.h	/^    OFPBRC_BAD_MULTIPART = 2,         \/* ofp_multipart_request.type not supported. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_BAD_PACKET	include/openflow/openflow.h	/^    OFPBRC_BAD_PACKET = 12,      \/* Invalid packet in packet-out. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_BAD_PORT	include/openflow/openflow.h	/^    OFPBRC_BAD_PORT = 11,        \/* Invalid port. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_BAD_TABLE_ID	include/openflow/openflow.h	/^    OFPBRC_BAD_TABLE_ID = 9,     \/* Specified table-id invalid or does not$/;"	e	enum:ofp_bad_request_code
OFPBRC_BAD_TYPE	include/openflow/openflow.h	/^    OFPBRC_BAD_TYPE = 1,         \/* ofp_header.type not supported. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_BAD_VERSION	include/openflow/openflow.h	/^    OFPBRC_BAD_VERSION = 0,      \/* ofp_header.version not supported. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_BUFFER_EMPTY	include/openflow/openflow.h	/^    OFPBRC_BUFFER_EMPTY = 7,     \/* Specified buffer has already been used. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_BUFFER_UNKNOWN	include/openflow/openflow.h	/^    OFPBRC_BUFFER_UNKNOWN = 8,   \/* Specified buffer does not exist. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_EPERM	include/openflow/openflow.h	/^    OFPBRC_EPERM = 5,            \/* Permissions error. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_IS_SLAVE	include/openflow/openflow.h	/^    OFPBRC_IS_SLAVE = 10,        \/* Denied because controller is slave. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_MULTIPART_BUFFER_OVERFLOW	include/openflow/openflow.h	/^    OFPBRC_MULTIPART_BUFFER_OVERFLOW = 13, \/* ofp_multipart_request$/;"	e	enum:ofp_bad_request_code
OFPBUF_H	lib/ofpbuf.h	35;"	d
OFPCML_MAX	include/openflow/openflow.h	/^    OFPCML_MAX = 0xffe5,      \/* maximum max_len value which can be used$/;"	e	enum:ofp_controller_max_len
OFPCML_NO_BUFFER	include/openflow/openflow.h	/^    OFPCML_NO_BUFFER = 0xffff \/* indicates that no buffering should be$/;"	e	enum:ofp_controller_max_len
OFPCR_ROLE_EQUAL	include/openflow/openflow.h	/^    OFPCR_ROLE_EQUAL = 1,    \/* Default role, full access. *\/$/;"	e	enum:ofp_controller_role
OFPCR_ROLE_MASTER	include/openflow/openflow.h	/^    OFPCR_ROLE_MASTER = 2,   \/* Full access, at most one master. *\/$/;"	e	enum:ofp_controller_role
OFPCR_ROLE_NOCHANGE	include/openflow/openflow.h	/^    OFPCR_ROLE_NOCHANGE = 0, \/* Don’t change current role. *\/$/;"	e	enum:ofp_controller_role
OFPCR_ROLE_SLAVE	include/openflow/openflow.h	/^    OFPCR_ROLE_SLAVE = 3,    \/* Read-only access. *\/$/;"	e	enum:ofp_controller_role
OFPC_FLOW_STATS	include/openflow/openflow.h	/^    OFPC_FLOW_STATS = 1 << 0,  \/* Flow statistics. *\/$/;"	e	enum:ofp_capabilities
OFPC_FRAG_DROP	include/openflow/openflow.h	/^    OFPC_FRAG_DROP = 1 << 0,  \/* Drop fragments. *\/$/;"	e	enum:ofp_config_flags
OFPC_FRAG_MASK	include/openflow/openflow.h	/^    OFPC_FRAG_MASK = 3,$/;"	e	enum:ofp_config_flags
OFPC_FRAG_NORMAL	include/openflow/openflow.h	/^    OFPC_FRAG_NORMAL = 0,     \/* No special handling for fragments. *\/$/;"	e	enum:ofp_config_flags
OFPC_FRAG_REASM	include/openflow/openflow.h	/^    OFPC_FRAG_REASM = 1 << 1, \/* Reassemble (only if OFPC_IP_REASM set). *\/$/;"	e	enum:ofp_config_flags
OFPC_GROUP_STATS	include/openflow/openflow.h	/^    OFPC_GROUP_STATS = 1 << 3, \/* Group statistics. *\/$/;"	e	enum:ofp_capabilities
OFPC_INVALID_TTL_TO_CONTROLLER	include/openflow/openflow.h	/^    OFPC_INVALID_TTL_TO_CONTROLLER = 1 << 2, \/* Send packets with invalid TTL$/;"	e	enum:ofp_config_flags
OFPC_IP_REASM	include/openflow/openflow.h	/^    OFPC_IP_REASM = 1 << 5,    \/* Can reassemble IP fragments. *\/$/;"	e	enum:ofp_capabilities
OFPC_PORT_BLOCKED	include/openflow/openflow.h	/^    OFPC_PORT_BLOCKED = 1 << 8 \/* Switch will block looping ports. *\/$/;"	e	enum:ofp_capabilities
OFPC_PORT_STATS	include/openflow/openflow.h	/^    OFPC_PORT_STATS = 1 << 2,  \/* Port statistics. *\/$/;"	e	enum:ofp_capabilities
OFPC_QUEUE_STATS	include/openflow/openflow.h	/^    OFPC_QUEUE_STATS = 1 << 6, \/* Queue statistics. *\/$/;"	e	enum:ofp_capabilities
OFPC_TABLE_STATS	include/openflow/openflow.h	/^    OFPC_TABLE_STATS = 1 << 1, \/* Table statistics. *\/$/;"	e	enum:ofp_capabilities
OFPET_BAD_ACTION	include/openflow/openflow.h	/^    OFPET_BAD_ACTION = 2,            \/* Error in action description. *\/$/;"	e	enum:ofp_error_type
OFPET_BAD_INSTRUCTION	include/openflow/openflow.h	/^    OFPET_BAD_INSTRUCTION = 3,       \/* Error in instruction list. *\/$/;"	e	enum:ofp_error_type
OFPET_BAD_MATCH	include/openflow/openflow.h	/^    OFPET_BAD_MATCH = 4,             \/* Error in match. *\/$/;"	e	enum:ofp_error_type
OFPET_BAD_REQUEST	include/openflow/openflow.h	/^    OFPET_BAD_REQUEST = 1,           \/* Request was not understood. *\/$/;"	e	enum:ofp_error_type
OFPET_EXPERIMENTER	include/openflow/openflow.h	/^    OFPET_EXPERIMENTER = 0xffff      \/* Experimenter error messages. *\/$/;"	e	enum:ofp_error_type
OFPET_FLOW_MOD_FAILED	include/openflow/openflow.h	/^    OFPET_FLOW_MOD_FAILED = 5,       \/* Problem modifying flow entry. *\/$/;"	e	enum:ofp_error_type
OFPET_GROUP_MOD_FAILED	include/openflow/openflow.h	/^    OFPET_GROUP_MOD_FAILED = 6,      \/* Problem modifying group entry. *\/$/;"	e	enum:ofp_error_type
OFPET_HELLO_FAILED	include/openflow/openflow.h	/^    OFPET_HELLO_FAILED = 0,          \/* Hello protocol failed. *\/$/;"	e	enum:ofp_error_type
OFPET_METER_MOD_FAILED	include/openflow/openflow.h	/^    OFPET_METER_MOD_FAILED = 12,     \/* Error in meter. *\/$/;"	e	enum:ofp_error_type
OFPET_PORT_MOD_FAILED	include/openflow/openflow.h	/^    OFPET_PORT_MOD_FAILED = 7,       \/* Port mod request failed. *\/$/;"	e	enum:ofp_error_type
OFPET_QUEUE_OP_FAILED	include/openflow/openflow.h	/^    OFPET_QUEUE_OP_FAILED = 9,       \/* Queue operation failed. *\/$/;"	e	enum:ofp_error_type
OFPET_ROLE_REQUEST_FAILED	include/openflow/openflow.h	/^    OFPET_ROLE_REQUEST_FAILED = 11,  \/* Controller Role request failed. *\/$/;"	e	enum:ofp_error_type
OFPET_SWITCH_CONFIG_FAILED	include/openflow/openflow.h	/^    OFPET_SWITCH_CONFIG_FAILED = 10, \/* Switch config request failed. *\/$/;"	e	enum:ofp_error_type
OFPET_TABLE_FEATURES_FAILED	include/openflow/openflow.h	/^    OFPET_TABLE_FEATURES_FAILED = 13, \/* Setting table features failed. *\/$/;"	e	enum:ofp_error_type
OFPET_TABLE_MOD_FAILED	include/openflow/openflow.h	/^    OFPET_TABLE_MOD_FAILED = 8,      \/* Table mod request failed. *\/$/;"	e	enum:ofp_error_type
OFPFC_ADD	include/openflow/openflow.h	/^    OFPFC_ADD = 0,           \/* New flow. *\/$/;"	e	enum:ofp_flow_mod_command
OFPFC_DELETE	include/openflow/openflow.h	/^    OFPFC_DELETE = 3,        \/* Delete all matching flows. *\/$/;"	e	enum:ofp_flow_mod_command
OFPFC_DELETE_STRICT	include/openflow/openflow.h	/^    OFPFC_DELETE_STRICT = 4, \/* Delete entry strictly matching wildcards and$/;"	e	enum:ofp_flow_mod_command
OFPFC_MODIFY	include/openflow/openflow.h	/^    OFPFC_MODIFY = 1,        \/* Modify all matching flows. *\/$/;"	e	enum:ofp_flow_mod_command
OFPFC_MODIFY_STRICT	include/openflow/openflow.h	/^    OFPFC_MODIFY_STRICT = 2, \/* Modify entry strictly matching wildcards and$/;"	e	enum:ofp_flow_mod_command
OFPFF_CHECK_OVERLAP	include/openflow/openflow.h	/^    OFPFF_CHECK_OVERLAP = 1 << 1, \/* Check for overlapping entries first. *\/$/;"	e	enum:ofp_flow_mod_flags
OFPFF_NO_BYT_COUNTS	include/openflow/openflow.h	/^    OFPFF_NO_BYT_COUNTS = 1 << 4  \/*Don’t keep track of byte count. *\/$/;"	e	enum:ofp_flow_mod_flags
OFPFF_NO_PKT_COUNTS	include/openflow/openflow.h	/^    OFPFF_NO_PKT_COUNTS = 1 << 3,  \/* Don’t keep track of packet count. *\/$/;"	e	enum:ofp_flow_mod_flags
OFPFF_RESET_COUNTS	include/openflow/openflow.h	/^    OFPFF_RESET_COUNTS = 1 << 2,   \/* Reset flow packet and byte counts. *\/$/;"	e	enum:ofp_flow_mod_flags
OFPFF_SEND_FLOW_REM	include/openflow/openflow.h	/^    OFPFF_SEND_FLOW_REM = 1 << 0, \/* Send flow removed message when flow$/;"	e	enum:ofp_flow_mod_flags
OFPFMFC_BAD_COMMAND	include/openflow/openflow.h	/^    OFPFMFC_BAD_COMMAND = 6,  \/* Unsupported or unknown command. *\/$/;"	e	enum:ofp_flow_mod_failed_code
OFPFMFC_BAD_FLAGS	include/openflow/openflow.h	/^    OFPFMFC_BAD_FLAGS = 7,    \/* Unsupported or unknown flags. *\/$/;"	e	enum:ofp_flow_mod_failed_code
OFPFMFC_BAD_TABLE_ID	include/openflow/openflow.h	/^    OFPFMFC_BAD_TABLE_ID = 2, \/* Table does not exist *\/$/;"	e	enum:ofp_flow_mod_failed_code
OFPFMFC_BAD_TIMEOUT	include/openflow/openflow.h	/^    OFPFMFC_BAD_TIMEOUT = 5,  \/* Flow not added because of unsupported$/;"	e	enum:ofp_flow_mod_failed_code
OFPFMFC_EPERM	include/openflow/openflow.h	/^    OFPFMFC_EPERM = 4,        \/* Permissions error. *\/$/;"	e	enum:ofp_flow_mod_failed_code
OFPFMFC_OVERLAP	include/openflow/openflow.h	/^    OFPFMFC_OVERLAP = 3,      \/* Attempted to add overlapping flow with$/;"	e	enum:ofp_flow_mod_failed_code
OFPFMFC_TABLE_FULL	include/openflow/openflow.h	/^    OFPFMFC_TABLE_FULL = 1,   \/* Flow not added because table was full. *\/$/;"	e	enum:ofp_flow_mod_failed_code
OFPFMFC_UNKNOWN	include/openflow/openflow.h	/^    OFPFMFC_UNKNOWN = 0,      \/* Unspecified error. *\/$/;"	e	enum:ofp_flow_mod_failed_code
OFPFMF_DL_DST	include/openflow/openflow.h	/^    OFPFMF_DL_DST      = 1 << 12, \/* Ethernet destination address. *\/$/;"	e	enum:ofp_flow_match_fields
OFPFMF_DL_SRC	include/openflow/openflow.h	/^    OFPFMF_DL_SRC      = 1 << 11, \/* Ethernet source address. *\/$/;"	e	enum:ofp_flow_match_fields
OFPFMF_DL_TYPE	include/openflow/openflow.h	/^    OFPFMF_DL_TYPE     = 1 << 3,  \/* Ethernet frame type. *\/$/;"	e	enum:ofp_flow_match_fields
OFPFMF_DL_VLAN	include/openflow/openflow.h	/^    OFPFMF_DL_VLAN     = 1 << 1,  \/* VLAN id. *\/$/;"	e	enum:ofp_flow_match_fields
OFPFMF_DL_VLAN_PCP	include/openflow/openflow.h	/^    OFPFMF_DL_VLAN_PCP = 1 << 2,  \/* VLAN priority. *\/$/;"	e	enum:ofp_flow_match_fields
OFPFMF_IN_PORT	include/openflow/openflow.h	/^    OFPFMF_IN_PORT     = 1 << 0,  \/* Switch input port. *\/$/;"	e	enum:ofp_flow_match_fields
OFPFMF_METADATA	include/openflow/openflow.h	/^    OFPFMF_METADATA    = 1 << 15, \/* Metadata passed between tables. *\/$/;"	e	enum:ofp_flow_match_fields
OFPFMF_MPLS_LABEL	include/openflow/openflow.h	/^    OFPFMF_MPLS_LABEL  = 1 << 8,  \/* MPLS label. *\/$/;"	e	enum:ofp_flow_match_fields
OFPFMF_MPLS_TC	include/openflow/openflow.h	/^    OFPFMF_MPLS_TC     = 1 << 9,  \/* MPLS TC. *\/$/;"	e	enum:ofp_flow_match_fields
OFPFMF_NW_DST	include/openflow/openflow.h	/^    OFPFMF_NW_DST      = 1 << 14, \/* IP destination address. *\/$/;"	e	enum:ofp_flow_match_fields
OFPFMF_NW_PROTO	include/openflow/openflow.h	/^    OFPFMF_NW_PROTO    = 1 << 5,  \/* IP protocol. *\/$/;"	e	enum:ofp_flow_match_fields
OFPFMF_NW_SRC	include/openflow/openflow.h	/^    OFPFMF_NW_SRC      = 1 << 13, \/* IP source address. *\/$/;"	e	enum:ofp_flow_match_fields
OFPFMF_NW_TOS	include/openflow/openflow.h	/^    OFPFMF_NW_TOS      = 1 << 4,  \/* IP ToS (DSCP field, 6 bits). *\/$/;"	e	enum:ofp_flow_match_fields
OFPFMF_TP_DST	include/openflow/openflow.h	/^    OFPFMF_TP_DST      = 1 << 7,  \/* TCP\/UDP\/SCTP destination port. *\/$/;"	e	enum:ofp_flow_match_fields
OFPFMF_TP_SRC	include/openflow/openflow.h	/^    OFPFMF_TP_SRC      = 1 << 6,  \/* TCP\/UDP\/SCTP source port. *\/$/;"	e	enum:ofp_flow_match_fields
OFPFMF_TYPE	include/openflow/openflow.h	/^    OFPFMF_TYPE        = 1 << 10, \/* Match type. *\/$/;"	e	enum:ofp_flow_match_fields
OFPFW_ALL	include/openflow/openflow.h	/^    OFPFW_ALL           = ((1 << 10) - 1)$/;"	e	enum:ofp_flow_wildcards
OFPFW_DL_TYPE	include/openflow/openflow.h	/^    OFPFW_DL_TYPE     = 1 << 3,  \/* Ethernet frame type. *\/$/;"	e	enum:ofp_flow_wildcards
OFPFW_DL_VLAN	include/openflow/openflow.h	/^    OFPFW_DL_VLAN     = 1 << 1,  \/* VLAN id. *\/$/;"	e	enum:ofp_flow_wildcards
OFPFW_DL_VLAN_PCP	include/openflow/openflow.h	/^    OFPFW_DL_VLAN_PCP = 1 << 2,  \/* VLAN priority. *\/$/;"	e	enum:ofp_flow_wildcards
OFPFW_IN_PORT	include/openflow/openflow.h	/^    OFPFW_IN_PORT     = 1 << 0,  \/* Switch input port. *\/$/;"	e	enum:ofp_flow_wildcards
OFPFW_MPLS_LABEL	include/openflow/openflow.h	/^    OFPFW_MPLS_LABEL  = 1 << 8,  \/* MPLS label. *\/$/;"	e	enum:ofp_flow_wildcards
OFPFW_MPLS_TC	include/openflow/openflow.h	/^    OFPFW_MPLS_TC     = 1 << 9,  \/* MPLS TC. *\/$/;"	e	enum:ofp_flow_wildcards
OFPFW_NW_PROTO	include/openflow/openflow.h	/^    OFPFW_NW_PROTO    = 1 << 5,  \/* IP protocol. *\/$/;"	e	enum:ofp_flow_wildcards
OFPFW_NW_TOS	include/openflow/openflow.h	/^    OFPFW_NW_TOS      = 1 << 4,  \/* IP ToS (DSCP field, 6 bits). *\/$/;"	e	enum:ofp_flow_wildcards
OFPFW_TP_DST	include/openflow/openflow.h	/^    OFPFW_TP_DST      = 1 << 7,  \/* TCP\/UDP\/SCTP destination port. *\/$/;"	e	enum:ofp_flow_wildcards
OFPFW_TP_SRC	include/openflow/openflow.h	/^    OFPFW_TP_SRC      = 1 << 6,  \/* TCP\/UDP\/SCTP source port. *\/$/;"	e	enum:ofp_flow_wildcards
OFPGC_ADD	include/openflow/openflow.h	/^    OFPGC_ADD = 0,    \/* New group. *\/$/;"	e	enum:ofp_group_mod_command
OFPGC_DELETE	include/openflow/openflow.h	/^    OFPGC_DELETE = 2, \/* Delete all matching groups. *\/$/;"	e	enum:ofp_group_mod_command
OFPGC_MODIFY	include/openflow/openflow.h	/^    OFPGC_MODIFY = 1, \/* Modify all matching groups. *\/$/;"	e	enum:ofp_group_mod_command
OFPGFC_CHAINING	include/openflow/openflow.h	/^    OFPGFC_CHAINING = 1 << 2,        \/* Support chaining groups *\/$/;"	e	enum:ofp_group_capabilities
OFPGFC_CHAINING_CHECKS	include/openflow/openflow.h	/^    OFPGFC_CHAINING_CHECKS = 1 << 3, \/* Check chaining for loops and delete *\/$/;"	e	enum:ofp_group_capabilities
OFPGFC_SELECT_LIVENESS	include/openflow/openflow.h	/^    OFPGFC_SELECT_LIVENESS = 1 << 1, \/* Support liveness for select groups *\/$/;"	e	enum:ofp_group_capabilities
OFPGFC_SELECT_WEIGHT	include/openflow/openflow.h	/^    OFPGFC_SELECT_WEIGHT = 1 << 0,   \/* Support weight for select groups *\/$/;"	e	enum:ofp_group_capabilities
OFPGMFC_BAD_BUCKET	include/openflow/openflow.h	/^    OFPGMFC_BAD_BUCKET = 12,          \/* Error in bucket. *\/$/;"	e	enum:ofp_group_mod_failed_code
OFPGMFC_BAD_COMMAND	include/openflow/openflow.h	/^    OFPGMFC_BAD_COMMAND = 11,         \/* Unsupported or unknown command. *\/$/;"	e	enum:ofp_group_mod_failed_code
OFPGMFC_BAD_TYPE	include/openflow/openflow.h	/^    OFPGMFC_BAD_TYPE = 10,            \/* Unsupported or unknown group type. *\/$/;"	e	enum:ofp_group_mod_failed_code
OFPGMFC_BAD_WATCH	include/openflow/openflow.h	/^    OFPGMFC_BAD_WATCH = 13,           \/* Error in watch port\/group. *\/$/;"	e	enum:ofp_group_mod_failed_code
OFPGMFC_CHAINED_GROUP	include/openflow/openflow.h	/^    OFPGMFC_CHAINED_GROUP = 9,        \/* Group not deleted because another$/;"	e	enum:ofp_group_mod_failed_code
OFPGMFC_CHAINING_UNSUPPORTED	include/openflow/openflow.h	/^    OFPGMFC_CHAINING_UNSUPPORTED = 5, \/* Switch does not support groups that$/;"	e	enum:ofp_group_mod_failed_code
OFPGMFC_EPERM	include/openflow/openflow.h	/^    OFPGMFC_EPERM = 14,               \/* Permissions error. *\/$/;"	e	enum:ofp_group_mod_failed_code
OFPGMFC_GROUP_EXISTS	include/openflow/openflow.h	/^    OFPGMFC_GROUP_EXISTS = 0,         \/* Group not added because a group ADD$/;"	e	enum:ofp_group_mod_failed_code
OFPGMFC_INVALID_GROUP	include/openflow/openflow.h	/^    OFPGMFC_INVALID_GROUP = 1,        \/* Group not added because Group *\/$/;"	e	enum:ofp_group_mod_failed_code
OFPGMFC_LOOP	include/openflow/openflow.h	/^    OFPGMFC_LOOP = 7,                 \/* Group entry would cause a loop. *\/$/;"	e	enum:ofp_group_mod_failed_code
OFPGMFC_OUT_OF_BUCKETS	include/openflow/openflow.h	/^    OFPGMFC_OUT_OF_BUCKETS = 4,       \/* The maximum number of action buckets$/;"	e	enum:ofp_group_mod_failed_code
OFPGMFC_OUT_OF_GROUPS	include/openflow/openflow.h	/^    OFPGMFC_OUT_OF_GROUPS = 3,        \/* The group table is full. *\/$/;"	e	enum:ofp_group_mod_failed_code
OFPGMFC_UNKNOWN_GROUP	include/openflow/openflow.h	/^    OFPGMFC_UNKNOWN_GROUP = 8,        \/* Group not modified because a group$/;"	e	enum:ofp_group_mod_failed_code
OFPGMFC_WATCH_UNSUPPORTED	include/openflow/openflow.h	/^    OFPGMFC_WATCH_UNSUPPORTED = 6,    \/* This group cannot watch the watch_port$/;"	e	enum:ofp_group_mod_failed_code
OFPGT_ALL	include/openflow/openflow.h	/^    OFPGT_ALL = 0,      \/* All (multicast\/broadcast) group. *\/$/;"	e	enum:ofp_group_type
OFPGT_FF	include/openflow/openflow.h	/^    OFPGT_FF = 3,       \/* Fast failover group. *\/$/;"	e	enum:ofp_group_type
OFPGT_INDIRECT	include/openflow/openflow.h	/^    OFPGT_INDIRECT = 2, \/* Indirect group. *\/$/;"	e	enum:ofp_group_type
OFPGT_SELECT	include/openflow/openflow.h	/^    OFPGT_SELECT = 1,   \/* Select group. *\/$/;"	e	enum:ofp_group_type
OFPG_ALL	include/openflow/openflow.h	/^    OFPG_ALL        = 0xfffffffc,  \/* Represents all groups for group delete$/;"	e	enum:ofp_group
OFPG_ANY	include/openflow/openflow.h	/^    OFPG_ANY        = 0xffffffff   \/* Wildcard group used only for flow stats$/;"	e	enum:ofp_group
OFPG_MAX	include/openflow/openflow.h	/^    OFPG_MAX        = 0xffffff00,$/;"	e	enum:ofp_group
OFPHFC_EPERM	include/openflow/openflow.h	/^    OFPHFC_EPERM = 1,        \/* Permissions error. *\/$/;"	e	enum:ofp_hello_failed_code
OFPHFC_INCOMPATIBLE	include/openflow/openflow.h	/^    OFPHFC_INCOMPATIBLE = 0, \/* No compatible version. *\/$/;"	e	enum:ofp_hello_failed_code
OFPIEH_AUTH	include/openflow/openflow.h	/^    OFPIEH_AUTH = 1 << 2, \/* Authentication header present. *\/$/;"	e	enum:ofp_ipv6exthdr_flags
OFPIEH_DEST	include/openflow/openflow.h	/^    OFPIEH_DEST = 1 << 3, \/* 1 or 2 dest headers present. *\/$/;"	e	enum:ofp_ipv6exthdr_flags
OFPIEH_ESP	include/openflow/openflow.h	/^    OFPIEH_ESP = 1 << 1, \/* Encrypted Sec Payload header present. *\/$/;"	e	enum:ofp_ipv6exthdr_flags
OFPIEH_FRAG	include/openflow/openflow.h	/^    OFPIEH_FRAG = 1 << 4, \/* Fragment header present. *\/$/;"	e	enum:ofp_ipv6exthdr_flags
OFPIEH_HOP	include/openflow/openflow.h	/^    OFPIEH_HOP = 1 << 6, \/* Hop-by-hop header present. *\/$/;"	e	enum:ofp_ipv6exthdr_flags
OFPIEH_NONEXT	include/openflow/openflow.h	/^    OFPIEH_NONEXT = 1 << 0, \/* "No next header" encountered. *\/$/;"	e	enum:ofp_ipv6exthdr_flags
OFPIEH_ROUTER	include/openflow/openflow.h	/^    OFPIEH_ROUTER = 1 << 5, \/* Router header present. *\/$/;"	e	enum:ofp_ipv6exthdr_flags
OFPIEH_UNREP	include/openflow/openflow.h	/^    OFPIEH_UNREP = 1 << 7, \/* Unexpected repeats encountered. *\/$/;"	e	enum:ofp_ipv6exthdr_flags
OFPIEH_UNSEQ	include/openflow/openflow.h	/^    OFPIEH_UNSEQ = 1 << 8, \/* Unexpected sequencing encountered. *\/$/;"	e	enum:ofp_ipv6exthdr_flags
OFPIT_APPLY_ACTIONS	include/openflow/openflow.h	/^    OFPIT_APPLY_ACTIONS = 4,    \/* Applies the action(s) immediately *\/$/;"	e	enum:ofp_instruction_type
OFPIT_CLEAR_ACTIONS	include/openflow/openflow.h	/^    OFPIT_CLEAR_ACTIONS = 5,    \/* Clears all actions from the datapath$/;"	e	enum:ofp_instruction_type
OFPIT_EXPERIMENTER	include/openflow/openflow.h	/^    OFPIT_EXPERIMENTER = 0xFFFF \/* Experimenter instruction *\/$/;"	e	enum:ofp_instruction_type
OFPIT_GOTO_TABLE	include/openflow/openflow.h	/^    OFPIT_GOTO_TABLE = 1,       \/* Setup the next table in the lookup *\/$/;"	e	enum:ofp_instruction_type
OFPIT_METER	include/openflow/openflow.h	/^    OFPIT_METER = 6,            \/* Apply meter (rate limiter) *\/$/;"	e	enum:ofp_instruction_type
OFPIT_WRITE_ACTIONS	include/openflow/openflow.h	/^    OFPIT_WRITE_ACTIONS = 3,    \/* Write the action(s) onto the datapath action$/;"	e	enum:ofp_instruction_type
OFPIT_WRITE_METADATA	include/openflow/openflow.h	/^    OFPIT_WRITE_METADATA = 2,   \/* Setup the metadata field for use later in$/;"	e	enum:ofp_instruction_type
OFPMBT_DROP	include/openflow/openflow.h	/^    OFPMBT_DROP = 1, \/* Drop packet. *\/$/;"	e	enum:ofp_meter_band_type
OFPMBT_DSCP_REMARK	include/openflow/openflow.h	/^    OFPMBT_DSCP_REMARK = 2, \/* Remark DSCP in the IP header. *\/$/;"	e	enum:ofp_meter_band_type
OFPMBT_EXPERIMENTER	include/openflow/openflow.h	/^    OFPMBT_EXPERIMENTER = 0xFFFF \/* Experimenter meter band. *\/$/;"	e	enum:ofp_meter_band_type
OFPMC_ADD	include/openflow/openflow.h	/^    OFPMC_ADD,    \/* New meter. *\/$/;"	e	enum:ofp_meter_mod_command
OFPMC_DELETE	include/openflow/openflow.h	/^    OFPMC_DELETE, \/* Delete specified meter. *\/$/;"	e	enum:ofp_meter_mod_command
OFPMC_MODIFY	include/openflow/openflow.h	/^    OFPMC_MODIFY, \/* Modify specified meter. *\/$/;"	e	enum:ofp_meter_mod_command
OFPMF_BURST	include/openflow/openflow.h	/^    OFPMF_BURST = 1 << 2, \/* Do burst size. *\/$/;"	e	enum:ofp_meter_flags
OFPMF_KBPS	include/openflow/openflow.h	/^    OFPMF_KBPS = 1 << 0,  \/* Rate value in kb\/s (kilo-bit per second). *\/$/;"	e	enum:ofp_meter_flags
OFPMF_PKTPS	include/openflow/openflow.h	/^    OFPMF_PKTPS = 1 << 1, \/* Rate value in packet\/sec. *\/$/;"	e	enum:ofp_meter_flags
OFPMF_STATS	include/openflow/openflow.h	/^    OFPMF_STATS = 1 << 3, \/* Collect statistics. *\/$/;"	e	enum:ofp_meter_flags
OFPMMFC_BAD_BAND	include/openflow/openflow.h	/^    OFPMMFC_BAD_BAND = 8,       \/* Band unsupported. *\/$/;"	e	enum:ofp_meter_mod_failed_code
OFPMMFC_BAD_BAND_VALUE	include/openflow/openflow.h	/^    OFPMMFC_BAD_BAND_VALUE = 9, \/* Band value unsupported. *\/$/;"	e	enum:ofp_meter_mod_failed_code
OFPMMFC_BAD_BURST	include/openflow/openflow.h	/^    OFPMMFC_BAD_BURST = 7,      \/* Burst size unsupported. *\/$/;"	e	enum:ofp_meter_mod_failed_code
OFPMMFC_BAD_COMMAND	include/openflow/openflow.h	/^    OFPMMFC_BAD_COMMAND = 4,    \/* Unsupported or unknown command. *\/$/;"	e	enum:ofp_meter_mod_failed_code
OFPMMFC_BAD_FLAGS	include/openflow/openflow.h	/^    OFPMMFC_BAD_FLAGS = 5,      \/* Flag configuration unsupported. *\/$/;"	e	enum:ofp_meter_mod_failed_code
OFPMMFC_BAD_RATE	include/openflow/openflow.h	/^    OFPMMFC_BAD_RATE = 6,       \/* Rate unsupported. *\/$/;"	e	enum:ofp_meter_mod_failed_code
OFPMMFC_INVALID_METER	include/openflow/openflow.h	/^    OFPMMFC_INVALID_METER = 2,  \/* Meter not added because Meter specified$/;"	e	enum:ofp_meter_mod_failed_code
OFPMMFC_METER_EXISTS	include/openflow/openflow.h	/^    OFPMMFC_METER_EXISTS = 1,   \/* Meter not added because a Meter ADD$/;"	e	enum:ofp_meter_mod_failed_code
OFPMMFC_OUT_OF_BANDS	include/openflow/openflow.h	/^    OFPMMFC_OUT_OF_BANDS = 11,  \/* The maximum number of properties$/;"	e	enum:ofp_meter_mod_failed_code
OFPMMFC_OUT_OF_METERS	include/openflow/openflow.h	/^    OFPMMFC_OUT_OF_METERS = 10, \/* No more meters available. *\/$/;"	e	enum:ofp_meter_mod_failed_code
OFPMMFC_UNKNOWN	include/openflow/openflow.h	/^    OFPMMFC_UNKNOWN = 0, \/* Unspecified error. *\/$/;"	e	enum:ofp_meter_mod_failed_code
OFPMMFC_UNKNOWN_METER	include/openflow/openflow.h	/^    OFPMMFC_UNKNOWN_METER = 3,  \/* Meter not modified because a Meter$/;"	e	enum:ofp_meter_mod_failed_code
OFPMPF_REPLY_MORE	include/openflow/openflow.h	/^    OFPMPF_REPLY_MORE  = 1 << 0  \/* More replies to follow. *\/$/;"	e	enum:ofp_multipart_reply_flags
OFPMPF_REQ_MORE	include/openflow/openflow.h	/^    OFPMPF_REQ_MORE = 1 << 0 \/* More requests to follow. *\/$/;"	e	enum:ofp_multipart_request_flags
OFPMP_AGGREGATE	include/openflow/openflow.h	/^    OFPMP_AGGREGATE = 2,$/;"	e	enum:ofp_multipart_types
OFPMP_DESC	include/openflow/openflow.h	/^    OFPMP_DESC = 0,$/;"	e	enum:ofp_multipart_types
OFPMP_EXPERIMENTER	include/openflow/openflow.h	/^    OFPMP_EXPERIMENTER = 0xffff$/;"	e	enum:ofp_multipart_types
OFPMP_FLOW	include/openflow/openflow.h	/^    OFPMP_FLOW = 1,$/;"	e	enum:ofp_multipart_types
OFPMP_GROUP	include/openflow/openflow.h	/^    OFPMP_GROUP = 6,$/;"	e	enum:ofp_multipart_types
OFPMP_GROUP_DESC	include/openflow/openflow.h	/^    OFPMP_GROUP_DESC = 7,$/;"	e	enum:ofp_multipart_types
OFPMP_GROUP_FEATURES	include/openflow/openflow.h	/^    OFPMP_GROUP_FEATURES = 8,$/;"	e	enum:ofp_multipart_types
OFPMP_METER	include/openflow/openflow.h	/^    OFPMP_METER = 9,$/;"	e	enum:ofp_multipart_types
OFPMP_METER_CONFIG	include/openflow/openflow.h	/^    OFPMP_METER_CONFIG = 10,$/;"	e	enum:ofp_multipart_types
OFPMP_METER_FEATURES	include/openflow/openflow.h	/^    OFPMP_METER_FEATURES = 11,$/;"	e	enum:ofp_multipart_types
OFPMP_PORT_DESC	include/openflow/openflow.h	/^    OFPMP_PORT_DESC = 13,$/;"	e	enum:ofp_multipart_types
OFPMP_PORT_STATS	include/openflow/openflow.h	/^    OFPMP_PORT_STATS = 4,$/;"	e	enum:ofp_multipart_types
OFPMP_QUEUE	include/openflow/openflow.h	/^    OFPMP_QUEUE = 5,$/;"	e	enum:ofp_multipart_types
OFPMP_TABLE	include/openflow/openflow.h	/^    OFPMP_TABLE = 3,$/;"	e	enum:ofp_multipart_types
OFPMP_TABLE_FEATURES	include/openflow/openflow.h	/^    OFPMP_TABLE_FEATURES = 12,$/;"	e	enum:ofp_multipart_types
OFPMT_OXM	include/openflow/openflow.h	/^    OFPMT_OXM = 1,            \/* OpenFlow Extensible Match *\/$/;"	e	enum:ofp_match_type
OFPMT_STANDARD	include/openflow/openflow.h	/^    OFPMT_STANDARD = 0, \/* Deprecated. *\/$/;"	e	enum:ofp_match_type
OFPMT_STANDARD_LENGTH	include/openflow/openflow.h	253;"	d
OFPM_ALL	include/openflow/openflow.h	/^    OFPM_ALL = 0xffffffff, \/* Meter for slow datapath, if any. *\/$/;"	e	enum:ofp_meter
OFPM_CONTROLLER	include/openflow/openflow.h	/^    OFPM_CONTROLLER = 0xfffffffe,$/;"	e	enum:ofp_meter
OFPM_MAX	include/openflow/openflow.h	/^    OFPM_MAX = 0xffff0000,$/;"	e	enum:ofp_meter
OFPM_SLOWPATH	include/openflow/openflow.h	/^    OFPM_SLOWPATH = 0xfffffffd,$/;"	e	enum:ofp_meter
OFPPC_NO_FWD	include/openflow/openflow.h	/^    OFPPC_NO_FWD = 1 << 5,      \/* Drop packets forwarded to port. *\/$/;"	e	enum:ofp_port_config
OFPPC_NO_PACKET_IN	include/openflow/openflow.h	/^    OFPPC_NO_PACKET_IN = 1 << 6 \/* Do not send packet-in msgs for port. *\/$/;"	e	enum:ofp_port_config
OFPPC_NO_RECV	include/openflow/openflow.h	/^    OFPPC_NO_RECV = 1 << 2,     \/* Drop all packets received by port. *\/$/;"	e	enum:ofp_port_config
OFPPC_PORT_DOWN	include/openflow/openflow.h	/^    OFPPC_PORT_DOWN = 1 << 0,   \/* Port is administratively down. *\/$/;"	e	enum:ofp_port_config
OFPPF_100GB_FD	include/openflow/openflow.h	/^    OFPPF_100GB_FD = 1 << 8,    \/* 100 Gb full-duplex rate support. *\/$/;"	e	enum:ofp_port_features
OFPPF_100MB_FD	include/openflow/openflow.h	/^    OFPPF_100MB_FD = 1 << 3,    \/* 100 Mb full-duplex rate support. *\/$/;"	e	enum:ofp_port_features
OFPPF_100MB_HD	include/openflow/openflow.h	/^    OFPPF_100MB_HD = 1 << 2,    \/* 100 Mb half-duplex rate support. *\/$/;"	e	enum:ofp_port_features
OFPPF_10GB_FD	include/openflow/openflow.h	/^    OFPPF_10GB_FD = 1 << 6,     \/* 10 Gb full-duplex rate support. *\/$/;"	e	enum:ofp_port_features
OFPPF_10MB_FD	include/openflow/openflow.h	/^    OFPPF_10MB_FD = 1 << 1,     \/* 10 Mb full-duplex rate support. *\/$/;"	e	enum:ofp_port_features
OFPPF_10MB_HD	include/openflow/openflow.h	/^    OFPPF_10MB_HD = 1 << 0,     \/* 10 Mb half-duplex rate support. *\/$/;"	e	enum:ofp_port_features
OFPPF_1GB_FD	include/openflow/openflow.h	/^    OFPPF_1GB_FD = 1 << 5,      \/* 1 Gb full-duplex rate support. *\/$/;"	e	enum:ofp_port_features
OFPPF_1GB_HD	include/openflow/openflow.h	/^    OFPPF_1GB_HD = 1 << 4,      \/* 1 Gb half-duplex rate support. *\/$/;"	e	enum:ofp_port_features
OFPPF_1TB_FD	include/openflow/openflow.h	/^    OFPPF_1TB_FD = 1 << 9,      \/* 1 Tb full-duplex rate support. *\/$/;"	e	enum:ofp_port_features
OFPPF_40GB_FD	include/openflow/openflow.h	/^    OFPPF_40GB_FD = 1 << 7,     \/* 40 Gb full-duplex rate support. *\/$/;"	e	enum:ofp_port_features
OFPPF_AUTONEG	include/openflow/openflow.h	/^    OFPPF_AUTONEG = 1 << 13,    \/* Auto-negotiation. *\/$/;"	e	enum:ofp_port_features
OFPPF_COPPER	include/openflow/openflow.h	/^    OFPPF_COPPER = 1 << 11,     \/* Copper medium. *\/$/;"	e	enum:ofp_port_features
OFPPF_FIBER	include/openflow/openflow.h	/^    OFPPF_FIBER = 1 << 12,      \/* Fiber medium. *\/$/;"	e	enum:ofp_port_features
OFPPF_OTHER	include/openflow/openflow.h	/^    OFPPF_OTHER = 1 << 10,      \/* Other rate, not in the list. *\/$/;"	e	enum:ofp_port_features
OFPPF_PAUSE	include/openflow/openflow.h	/^    OFPPF_PAUSE = 1 << 14,      \/* Pause. *\/$/;"	e	enum:ofp_port_features
OFPPF_PAUSE_ASYM	include/openflow/openflow.h	/^    OFPPF_PAUSE_ASYM = 1 << 15  \/* Asymmetric pause. *\/$/;"	e	enum:ofp_port_features
OFPPMFC_BAD_ADVERTISE	include/openflow/openflow.h	/^    OFPPMFC_BAD_ADVERTISE = 3, \/* Specified advertise is invalid. *\/$/;"	e	enum:ofp_port_mod_failed_code
OFPPMFC_BAD_CONFIG	include/openflow/openflow.h	/^    OFPPMFC_BAD_CONFIG = 2,    \/* Specified config is invalid. *\/$/;"	e	enum:ofp_port_mod_failed_code
OFPPMFC_BAD_HW_ADDR	include/openflow/openflow.h	/^    OFPPMFC_BAD_HW_ADDR = 1,   \/* Specified hardware address does not$/;"	e	enum:ofp_port_mod_failed_code
OFPPMFC_BAD_PORT	include/openflow/openflow.h	/^    OFPPMFC_BAD_PORT = 0,      \/* Specified port number does not exist. *\/$/;"	e	enum:ofp_port_mod_failed_code
OFPPMFC_EPERM	include/openflow/openflow.h	/^    OFPPMFC_EPERM = 4,         \/* Permissions error. *\/$/;"	e	enum:ofp_port_mod_failed_code
OFPPR_ADD	include/openflow/openflow.h	/^    OFPPR_ADD = 0,    \/* The port was added. *\/$/;"	e	enum:ofp_port_reason
OFPPR_DELETE	include/openflow/openflow.h	/^    OFPPR_DELETE = 1, \/* The port was removed. *\/$/;"	e	enum:ofp_port_reason
OFPPR_MODIFY	include/openflow/openflow.h	/^    OFPPR_MODIFY = 2, \/* Some attribute of the port has changed. *\/$/;"	e	enum:ofp_port_reason
OFPPS_BLOCKED	include/openflow/openflow.h	/^    OFPPS_BLOCKED = 1 << 1,   \/* Port is blocked *\/$/;"	e	enum:ofp_port_state
OFPPS_LINK_DOWN	include/openflow/openflow.h	/^    OFPPS_LINK_DOWN = 1 << 0, \/* No physical link present. *\/$/;"	e	enum:ofp_port_state
OFPPS_LIVE	include/openflow/openflow.h	/^    OFPPS_LIVE = 1 << 2,      \/* Live for Fast Failover Group. *\/$/;"	e	enum:ofp_port_state
OFPP_ALL	include/openflow/openflow.h	/^    OFPP_ALL = 0xfffffffc,        \/* All physical ports except input port. *\/$/;"	e	enum:ofp_port_no
OFPP_ANY	include/openflow/openflow.h	/^    OFPP_ANY = 0xffffffff         \/* Wildcard port used only for flow mod$/;"	e	enum:ofp_port_no
OFPP_CONTROLLER	include/openflow/openflow.h	/^    OFPP_CONTROLLER = 0xfffffffd, \/* Send to controller. *\/$/;"	e	enum:ofp_port_no
OFPP_FLOOD	include/openflow/openflow.h	/^    OFPP_FLOOD = 0xfffffffb,      \/* All physical ports in VLAN, except input$/;"	e	enum:ofp_port_no
OFPP_IN_PORT	include/openflow/openflow.h	/^    OFPP_IN_PORT = 0xfffffff8,    \/* Send the packet out the input port. This$/;"	e	enum:ofp_port_no
OFPP_LOCAL	include/openflow/openflow.h	/^    OFPP_LOCAL = 0xfffffffe,      \/* Local openflow "port". *\/$/;"	e	enum:ofp_port_no
OFPP_MAX	include/openflow/openflow.h	/^    OFPP_MAX = 0xffffff00, $/;"	e	enum:ofp_port_no
OFPP_NORMAL	include/openflow/openflow.h	/^    OFPP_NORMAL = 0xfffffffa,     \/* Process with normal L2\/L3 switching. *\/$/;"	e	enum:ofp_port_no
OFPP_TABLE	include/openflow/openflow.h	/^    OFPP_TABLE = 0xfffffff9,      \/* Submit the packet to the first flow table$/;"	e	enum:ofp_port_no
OFPQCFC_EPERM	include/openflow/openflow.h	/^    OFPQCFC_EPERM = 2,     \/* Permissions error. *\/$/;"	e	enum:ofp_switch_config_failed_code
OFPQOFC_BAD_PORT	include/openflow/openflow.h	/^    OFPQOFC_BAD_PORT = 0,  \/* Invalid port (or port does not exist). *\/$/;"	e	enum:ofp_queue_op_failed_code
OFPQOFC_BAD_QUEUE	include/openflow/openflow.h	/^    OFPQOFC_BAD_QUEUE = 1, \/* Queue does not exist. *\/$/;"	e	enum:ofp_queue_op_failed_code
OFPQOFC_EPERM	include/openflow/openflow.h	/^    OFPQOFC_EPERM = 2,     \/* Permissions error. *\/$/;"	e	enum:ofp_queue_op_failed_code
OFPQT_EXPERIMENTER	include/openflow/openflow.h	/^    OFPQT_EXPERIMENTER = 0xffff \/* Experimenter defined property. *\/$/;"	e	enum:ofp_queue_properties
OFPQT_MAX_RATE	include/openflow/openflow.h	/^    OFPQT_MAX_RATE = 2,         \/* Maximum datarate. *\/$/;"	e	enum:ofp_queue_properties
OFPQT_MIN_RATE	include/openflow/openflow.h	/^    OFPQT_MIN_RATE = 1,         \/* Minimum datarate guaranteed. *\/$/;"	e	enum:ofp_queue_properties
OFPQ_ALL	include/openflow/openflow.h	212;"	d
OFPQ_MIN_RATE_UNCFG	include/openflow/openflow.h	215;"	d
OFPRRFC_BAD_ROLE	include/openflow/openflow.h	/^    OFPRRFC_BAD_ROLE = 2, \/* Invalid role. *\/$/;"	e	enum:ofp_role_request_failed_code
OFPRRFC_STALE	include/openflow/openflow.h	/^    OFPRRFC_STALE = 0,    \/* Stale Message: old generation_id. *\/$/;"	e	enum:ofp_role_request_failed_code
OFPRRFC_UNSUP	include/openflow/openflow.h	/^    OFPRRFC_UNSUP = 1,    \/* Controller role change unsupported. *\/$/;"	e	enum:ofp_role_request_failed_code
OFPRR_DELETE	include/openflow/openflow.h	/^    OFPRR_DELETE = 2,       \/* Evicted by a DELETE flow mod. *\/$/;"	e	enum:ofp_flow_removed_reason
OFPRR_GROUP_DELETE	include/openflow/openflow.h	/^    OFPRR_GROUP_DELETE = 3, \/* Group was removed. *\/$/;"	e	enum:ofp_flow_removed_reason
OFPRR_HARD_TIMEOUT	include/openflow/openflow.h	/^    OFPRR_HARD_TIMEOUT = 1, \/* Time exceeded hard_timeout. *\/$/;"	e	enum:ofp_flow_removed_reason
OFPRR_IDLE_TIMEOUT	include/openflow/openflow.h	/^    OFPRR_IDLE_TIMEOUT = 0, \/* Flow idle time exceeded idle_timeout. *\/$/;"	e	enum:ofp_flow_removed_reason
OFPRR_METER_DELETE	include/openflow/openflow.h	/^    OFPRR_METER_DELETE = 4, \/* Meter was removed. *\/$/;"	e	enum:ofp_flow_removed_reason
OFPR_ACTION	include/openflow/openflow.h	/^    OFPR_ACTION = 1,      \/* Action explicitly output to controller. *\/$/;"	e	enum:ofp_packet_in_reason
OFPR_INVALID_TTL	include/openflow/openflow.h	/^    OFPR_INVALID_TTL = 2, \/* Packet has invalid TTL *\/$/;"	e	enum:ofp_packet_in_reason
OFPR_NO_MATCH	include/openflow/openflow.h	/^    OFPR_NO_MATCH = 0,    \/* No matching flow. *\/$/;"	e	enum:ofp_packet_in_reason
OFPSCFC_BAD_FLAGS	include/openflow/openflow.h	/^    OFPSCFC_BAD_FLAGS = 0, \/* Specified flags is invalid. *\/$/;"	e	enum:ofp_switch_config_failed_code
OFPSCFC_BAD_LEN	include/openflow/openflow.h	/^    OFPSCFC_BAD_LEN = 1,   \/* Specified len is invalid. *\/$/;"	e	enum:ofp_switch_config_failed_code
OFPSTAT_H_	lib/ofpstat.h	34;"	d
OFPTC_TABLE_MISS_CONTINUE	include/openflow/openflow.h	/^    OFPTC_TABLE_MISS_CONTINUE = 1 << 0, \/* Continue to the next table in the$/;"	e	enum:ofp_table_config
OFPTC_TABLE_MISS_CONTROLLER	include/openflow/openflow.h	/^    OFPTC_TABLE_MISS_CONTROLLER = 0,    \/* Send to controller. *\/$/;"	e	enum:ofp_table_config
OFPTC_TABLE_MISS_DROP	include/openflow/openflow.h	/^    OFPTC_TABLE_MISS_DROP = 1 << 1,     \/* Drop the packet. *\/$/;"	e	enum:ofp_table_config
OFPTC_TABLE_MISS_MASK	include/openflow/openflow.h	/^    OFPTC_TABLE_MISS_MASK = 3$/;"	e	enum:ofp_table_config
OFPTFFC_BAD_ARGUMENT	include/openflow/openflow.h	/^    OFPTFFC_BAD_ARGUMENT = 4, \/* Unsupported property value. *\/$/;"	e	enum:ofp_table_features_failed_code
OFPTFFC_BAD_LEN	include/openflow/openflow.h	/^    OFPTFFC_BAD_LEN = 3,      \/* Length problem in properties. *\/$/;"	e	enum:ofp_table_features_failed_code
OFPTFFC_BAD_METADATA	include/openflow/openflow.h	/^    OFPTFFC_BAD_METADATA = 1, \/* Invalid metadata mask. *\/$/;"	e	enum:ofp_table_features_failed_code
OFPTFFC_BAD_TABLE	include/openflow/openflow.h	/^    OFPTFFC_BAD_TABLE = 0,    \/* Specified table does not exist. *\/$/;"	e	enum:ofp_table_features_failed_code
OFPTFFC_BAD_TYPE	include/openflow/openflow.h	/^    OFPTFFC_BAD_TYPE = 2,     \/* Unknown property type. *\/$/;"	e	enum:ofp_table_features_failed_code
OFPTFFC_EPERM	include/openflow/openflow.h	/^    OFPTFFC_EPERM = 5,        \/* Permissions error. *\/$/;"	e	enum:ofp_table_features_failed_code
OFPTFPT_APPLY_ACTIONS	include/openflow/openflow.h	/^    OFPTFPT_APPLY_ACTIONS = 6, \/* Apply Actions property. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_APPLY_ACTIONS_MISS	include/openflow/openflow.h	/^    OFPTFPT_APPLY_ACTIONS_MISS = 7, \/* Apply Actions for table-miss. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_APPLY_SETFIELD	include/openflow/openflow.h	/^    OFPTFPT_APPLY_SETFIELD  = 14, \/* Apply Set-Field property. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_APPLY_SETFIELD_MISS	include/openflow/openflow.h	/^    OFPTFPT_APPLY_SETFIELD_MISS = 15, \/* Apply Set-Field for table-miss. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_EXPERIMENTER	include/openflow/openflow.h	/^    OFPTFPT_EXPERIMENTER = 0xFFFE, \/* Experimenter property. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_EXPERIMENTER_MISS	include/openflow/openflow.h	/^    OFPTFPT_EXPERIMENTER_MISS = 0xFFFF, \/* Experimenter for table-miss. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_INSTRUCTIONS	include/openflow/openflow.h	/^    OFPTFPT_INSTRUCTIONS = 0, \/* Instructions property. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_INSTRUCTIONS_MISS	include/openflow/openflow.h	/^    OFPTFPT_INSTRUCTIONS_MISS = 1, \/* Instructions for table-miss. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_MATCH	include/openflow/openflow.h	/^    OFPTFPT_MATCH = 8, \/* Match property. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_NEXT_TABLES	include/openflow/openflow.h	/^    OFPTFPT_NEXT_TABLES = 2, \/* Next Table property. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_NEXT_TABLES_MISS	include/openflow/openflow.h	/^    OFPTFPT_NEXT_TABLES_MISS = 3, \/* Next Table for table-miss. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_WILDCARDS	include/openflow/openflow.h	/^    OFPTFPT_WILDCARDS = 10, \/* Wildcards property. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_WRITE_ACTIONS	include/openflow/openflow.h	/^    OFPTFPT_WRITE_ACTIONS = 4, \/* Write Actions property. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_WRITE_ACTIONS_MISS	include/openflow/openflow.h	/^    OFPTFPT_WRITE_ACTIONS_MISS = 5, \/* Write Actions for table-miss. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_WRITE_SETFIELD	include/openflow/openflow.h	/^    OFPTFPT_WRITE_SETFIELD = 12, \/* Write Set-Field property. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_WRITE_SETFIELD_MISS	include/openflow/openflow.h	/^    OFPTFPT_WRITE_SETFIELD_MISS = 13, \/* Write Set-Field for table-miss. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTMFC_BAD_CONFIG	include/openflow/openflow.h	/^    OFPTMFC_BAD_CONFIG = 1, \/* Specified config is invalid. *\/$/;"	e	enum:ofp_table_mod_failed_code
OFPTMFC_BAD_TABLE	include/openflow/openflow.h	/^    OFPTMFC_BAD_TABLE = 0,  \/* Specified table does not exist. *\/$/;"	e	enum:ofp_table_mod_failed_code
OFPTMFC_EPERM	include/openflow/openflow.h	/^    OFPTMFC_EPERM = 2,      \/* Permissions error. *\/$/;"	e	enum:ofp_table_mod_failed_code
OFPTT_ALL	include/openflow/openflow.h	/^    OFPTT_ALL = 0xff \/* Wildcard table used for table config,$/;"	e	enum:ofp_table
OFPTT_MAX	include/openflow/openflow.h	/^    OFPTT_MAX = 0xfe,$/;"	e	enum:ofp_table
OFPT_BARRIER_REPLY	include/openflow/openflow.h	/^    OFPT_BARRIER_REPLY = 21,   \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_BARRIER_REQUEST	include/openflow/openflow.h	/^    OFPT_BARRIER_REQUEST = 20, \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_ECHO_REPLY	include/openflow/openflow.h	/^    OFPT_ECHO_REPLY = 3,   \/* Symmetric message *\/$/;"	e	enum:ofp_type
OFPT_ECHO_REQUEST	include/openflow/openflow.h	/^    OFPT_ECHO_REQUEST = 2, \/* Symmetric message *\/$/;"	e	enum:ofp_type
OFPT_ERROR	include/openflow/openflow.h	/^    OFPT_ERROR = 1,        \/* Symmetric message *\/$/;"	e	enum:ofp_type
OFPT_EXPERIMENTER	include/openflow/openflow.h	/^    OFPT_EXPERIMENTER = 4, \/* Symmetric message *\/$/;"	e	enum:ofp_type
OFPT_FEATURES_REPLY	include/openflow/openflow.h	/^    OFPT_FEATURES_REPLY = 6,     \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_FEATURES_REQUEST	include/openflow/openflow.h	/^    OFPT_FEATURES_REQUEST = 5,   \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_FLOW_MOD	include/openflow/openflow.h	/^    OFPT_FLOW_MOD = 14,    \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_FLOW_REMOVED	include/openflow/openflow.h	/^    OFPT_FLOW_REMOVED = 11, \/* Async message *\/$/;"	e	enum:ofp_type
OFPT_GET_ASYNC_REPLY	include/openflow/openflow.h	/^    OFPT_GET_ASYNC_REPLY   = 27, \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_GET_ASYNC_REQUEST	include/openflow/openflow.h	/^    OFPT_GET_ASYNC_REQUEST = 26, \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_GET_CONFIG_REPLY	include/openflow/openflow.h	/^    OFPT_GET_CONFIG_REPLY = 8,   \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_GET_CONFIG_REQUEST	include/openflow/openflow.h	/^    OFPT_GET_CONFIG_REQUEST = 7, \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_GROUP_MOD	include/openflow/openflow.h	/^    OFPT_GROUP_MOD = 15,   \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_HELLO	include/openflow/openflow.h	/^    OFPT_HELLO = 0,        \/* Symmetric message *\/$/;"	e	enum:ofp_type
OFPT_METER_MOD	include/openflow/openflow.h	/^    OFPT_METER_MOD = 29, \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_MULTIPART_REPLY	include/openflow/openflow.h	/^    OFPT_MULTIPART_REPLY = 19,   \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_MULTIPART_REQUEST	include/openflow/openflow.h	/^    OFPT_MULTIPART_REQUEST = 18, \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_PACKET_IN	include/openflow/openflow.h	/^    OFPT_PACKET_IN = 10,    \/* Async message *\/$/;"	e	enum:ofp_type
OFPT_PACKET_OUT	include/openflow/openflow.h	/^    OFPT_PACKET_OUT = 13,  \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_PORT_MOD	include/openflow/openflow.h	/^    OFPT_PORT_MOD = 16,    \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_PORT_STATUS	include/openflow/openflow.h	/^    OFPT_PORT_STATUS = 12,  \/* Async message *\/$/;"	e	enum:ofp_type
OFPT_QUEUE_GET_CONFIG_REPLY	include/openflow/openflow.h	/^    OFPT_QUEUE_GET_CONFIG_REPLY = 23,   \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_QUEUE_GET_CONFIG_REQUEST	include/openflow/openflow.h	/^    OFPT_QUEUE_GET_CONFIG_REQUEST = 22, \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_ROLE_REPLY	include/openflow/openflow.h	/^    OFPT_ROLE_REPLY = 25,   \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_ROLE_REQUEST	include/openflow/openflow.h	/^    OFPT_ROLE_REQUEST = 24, \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_SET_ASYNC	include/openflow/openflow.h	/^    OFPT_SET_ASYNC = 28, \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_SET_CONFIG	include/openflow/openflow.h	/^    OFPT_SET_CONFIG = 9,         \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_TABLE_MOD	include/openflow/openflow.h	/^    OFPT_TABLE_MOD = 17,   \/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPVID_ANY	include/openflow/openflow.h	/^    OFPVID_ANY  = 0xfffe, \/* Indicate that a VLAN id is set but don't care *\/$/;"	e	enum:ofp_vlan_id
OFPVID_NONE	include/openflow/openflow.h	/^    OFPVID_NONE = 0x0000,    \/* No VLAN id was set. *\/$/;"	e	enum:ofp_vlan_id
OFPVID_PRESENT	include/openflow/openflow.h	/^    OFPVID_PRESENT = 0x1000, \/* Bit that indicate that a VLAN id is set *\/$/;"	e	enum:ofp_vlan_id
OFPXMC_EXPERIMENTER	include/openflow/openflow.h	/^    OFPXMC_EXPERIMENTER = 0xFFFF, \/* Experimenter class *\/$/;"	e	enum:ofp_oxm_class
OFPXMC_NXM_0	include/openflow/openflow.h	/^    OFPXMC_NXM_0 = 0x0000, \/* Backward compatibility with NXM *\/$/;"	e	enum:ofp_oxm_class
OFPXMC_NXM_1	include/openflow/openflow.h	/^    OFPXMC_NXM_1 = 0x0001, \/* Backward compatibility with NXM *\/$/;"	e	enum:ofp_oxm_class
OFPXMC_OPENFLOW_BASIC	include/openflow/openflow.h	/^    OFPXMC_OPENFLOW_BASIC = 0x8000, \/* Basic class for OpenFlow *\/$/;"	e	enum:ofp_oxm_class
OFPXMT_OFB_ARP_OP	include/openflow/openflow.h	/^    OFPXMT_OFB_ARP_OP = 21,         \/* ARP opcode. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ARP_SHA	include/openflow/openflow.h	/^    OFPXMT_OFB_ARP_SHA = 24,        \/* ARP source hardware address. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ARP_SPA	include/openflow/openflow.h	/^    OFPXMT_OFB_ARP_SPA = 22,        \/* ARP source IPv4 address. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ARP_THA	include/openflow/openflow.h	/^    OFPXMT_OFB_ARP_THA = 25,        \/* ARP target hardware address. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ARP_TPA	include/openflow/openflow.h	/^    OFPXMT_OFB_ARP_TPA = 23,        \/* ARP target IPv4 address. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ETH_DST	include/openflow/openflow.h	/^    OFPXMT_OFB_ETH_DST = 3,         \/* Ethernet destination address. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ETH_SRC	include/openflow/openflow.h	/^    OFPXMT_OFB_ETH_SRC = 4,         \/* Ethernet source address. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ETH_TYPE	include/openflow/openflow.h	/^    OFPXMT_OFB_ETH_TYPE = 5,        \/* Ethernet frame type. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ICMPV4_CODE	include/openflow/openflow.h	/^    OFPXMT_OFB_ICMPV4_CODE = 20,    \/* ICMP code. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ICMPV4_TYPE	include/openflow/openflow.h	/^    OFPXMT_OFB_ICMPV4_TYPE = 19,    \/* ICMP type. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ICMPV6_CODE	include/openflow/openflow.h	/^    OFPXMT_OFB_ICMPV6_CODE = 30,    \/* ICMPv6 code. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ICMPV6_TYPE	include/openflow/openflow.h	/^    OFPXMT_OFB_ICMPV6_TYPE = 29,    \/* ICMPv6 type. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IN_PHY_PORT	include/openflow/openflow.h	/^    OFPXMT_OFB_IN_PHY_PORT = 1,     \/* Switch physical input port. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IN_PORT	include/openflow/openflow.h	/^    OFPXMT_OFB_IN_PORT = 0,         \/* Switch input port. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IPV4_DST	include/openflow/openflow.h	/^    OFPXMT_OFB_IPV4_DST = 12,       \/* IPv4 destination address. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IPV4_SRC	include/openflow/openflow.h	/^    OFPXMT_OFB_IPV4_SRC = 11,       \/* IPv4 source address. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IPV6_DST	include/openflow/openflow.h	/^    OFPXMT_OFB_IPV6_DST = 27,       \/* IPv6 destination address. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IPV6_EXTHDR	include/openflow/openflow.h	/^    OFPXMT_OFB_IPV6_EXTHDR = 39     \/* IPv6 Extension Header pseudo-field *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IPV6_FLABEL	include/openflow/openflow.h	/^    OFPXMT_OFB_IPV6_FLABEL = 28,    \/* IPv6 Flow Label *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IPV6_ND_SLL	include/openflow/openflow.h	/^    OFPXMT_OFB_IPV6_ND_SLL = 32,    \/* Source link-layer for ND. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IPV6_ND_TARGET	include/openflow/openflow.h	/^    OFPXMT_OFB_IPV6_ND_TARGET = 31, \/* Target address for ND. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IPV6_ND_TLL	include/openflow/openflow.h	/^    OFPXMT_OFB_IPV6_ND_TLL = 33,    \/* Target link-layer for ND. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IPV6_SRC	include/openflow/openflow.h	/^    OFPXMT_OFB_IPV6_SRC = 26,       \/* IPv6 source address. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IP_DSCP	include/openflow/openflow.h	/^    OFPXMT_OFB_IP_DSCP = 8,         \/* IP DSCP (6 bits in ToS field). *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IP_ECN	include/openflow/openflow.h	/^    OFPXMT_OFB_IP_ECN = 9,          \/* IP ECN (2 bits in ToS field). *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IP_PROTO	include/openflow/openflow.h	/^    OFPXMT_OFB_IP_PROTO = 10,       \/* IP protocol. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_METADATA	include/openflow/openflow.h	/^    OFPXMT_OFB_METADATA = 2,        \/* Metadata passed between tables. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_MPLS_BOS	include/openflow/openflow.h	/^    OFPXMT_OFB_MPLS_BOS = 36,       \/* MPLS BoS bit. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_MPLS_LABEL	include/openflow/openflow.h	/^    OFPXMT_OFB_MPLS_LABEL = 34,     \/* MPLS label. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_MPLS_TC	include/openflow/openflow.h	/^    OFPXMT_OFB_MPLS_TC = 35,        \/* MPLS TC. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_PBB_ISID	include/openflow/openflow.h	/^    OFPXMT_OFB_PBB_ISID = 37,       \/* PBB I-SID. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_SCTP_DST	include/openflow/openflow.h	/^    OFPXMT_OFB_SCTP_DST = 18,       \/* SCTP destination port. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_SCTP_SRC	include/openflow/openflow.h	/^    OFPXMT_OFB_SCTP_SRC = 17,       \/* SCTP source port. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_TCP_DST	include/openflow/openflow.h	/^    OFPXMT_OFB_TCP_DST = 14,        \/* TCP destination port. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_TCP_SRC	include/openflow/openflow.h	/^    OFPXMT_OFB_TCP_SRC = 13,        \/* TCP source port. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_TUNNEL_ID	include/openflow/openflow.h	/^    OFPXMT_OFB_TUNNEL_ID = 38,      \/* Logical Port Metadata. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_UDP_DST	include/openflow/openflow.h	/^    OFPXMT_OFB_UDP_DST = 16,        \/* UDP destination port. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_UDP_SRC	include/openflow/openflow.h	/^    OFPXMT_OFB_UDP_SRC = 15,        \/* UDP source port. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_VLAN_PCP	include/openflow/openflow.h	/^    OFPXMT_OFB_VLAN_PCP = 7,        \/* VLAN priority. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_VLAN_VID	include/openflow/openflow.h	/^    OFPXMT_OFB_VLAN_VID = 6,        \/* VLAN id. *\/$/;"	e	enum:oxm_ofb_match_fields
OFP_ASSERT	include/openflow/openflow.h	12;"	d
OFP_ASSERT	include/openflow/openflow.h	15;"	d
OFP_ASSERT	include/openflow/openflow.h	19;"	d
OFP_DEFAULT_MISS_SEND_LEN	include/openflow/openflow.h	104;"	d
OFP_DEFAULT_PRIORITY	include/openflow/openflow.h	749;"	d
OFP_ETH_ALEN	include/openflow/openflow.h	40;"	d
OFP_EXT_COUNT	include/openflow/openflow-ext.h	/^    OFP_EXT_COUNT$/;"	e	enum:ofp_extension_commands
OFP_EXT_QUEUE_DELETE	include/openflow/openflow-ext.h	/^    OFP_EXT_QUEUE_DELETE,  \/* Remove a queue *\/$/;"	e	enum:ofp_extension_commands
OFP_EXT_QUEUE_MODIFY	include/openflow/openflow-ext.h	/^    OFP_EXT_QUEUE_MODIFY,  \/* Add and\/or modify *\/$/;"	e	enum:ofp_extension_commands
OFP_EXT_SET_DESC	include/openflow/openflow-ext.h	/^    OFP_EXT_SET_DESC,      \/* Set ofp_desc_stat->dp_desc *\/$/;"	e	enum:ofp_extension_commands
OFP_FATAL	udatapath/udatapath.c	87;"	d	file:
OFP_FATAL	udatapath/udatapath.c	92;"	d	file:
OFP_FLOW_PERMANENT	include/openflow/openflow.h	750;"	d
OFP_H	lib/ofp.h	57;"	d
OFP_MAX_PORT_NAME_LEN	include/openflow/openflow.h	37;"	d
OFP_MAX_TABLE_NAME_LEN	include/openflow/openflow.h	36;"	d
OFP_NO_BUFFER	include/openflow/openflow.h	1565;"	d
OFP_PACKED	include/openflow/openflow.h	22;"	d
OFP_PACKED	include/openflow/openflow.h	24;"	d
OFP_SSL_PORT	include/openflow/openflow.h	39;"	d
OFP_TCP_PORT	include/openflow/openflow.h	38;"	d
OFP_VERSION	include/openflow/openflow.h	35;"	d
OFQ_ERR_BW_UNAVAIL	include/openflow/openflow-ext.h	/^    OFQ_ERR_BW_UNAVAIL,         \/* Bandwidth unavailable *\/$/;"	e	enum:openflow_queue_error_code
OFQ_ERR_COUNT	include/openflow/openflow-ext.h	/^    OFQ_ERR_COUNT               \/* Last please *\/$/;"	e	enum:openflow_queue_error_code
OFQ_ERR_DISCIPLINE	include/openflow/openflow-ext.h	/^    OFQ_ERR_DISCIPLINE,         \/* Discipline not supported *\/$/;"	e	enum:openflow_queue_error_code
OFQ_ERR_FAIL	include/openflow/openflow-ext.h	/^    OFQ_ERR_FAIL,               \/* Unspecified failure *\/$/;"	e	enum:openflow_queue_error_code
OFQ_ERR_NONE	include/openflow/openflow-ext.h	/^    OFQ_ERR_NONE,               \/* Success *\/$/;"	e	enum:openflow_queue_error_code
OFQ_ERR_NOT_FOUND	include/openflow/openflow-ext.h	/^    OFQ_ERR_NOT_FOUND,          \/* Queue not found *\/$/;"	e	enum:openflow_queue_error_code
OFQ_ERR_QUEUE_UNAVAIL	include/openflow/openflow-ext.h	/^    OFQ_ERR_QUEUE_UNAVAIL,      \/* Queue unavailable *\/$/;"	e	enum:openflow_queue_error_code
OF_HW_API_H	include/openflow/of_hw_api.h	35;"	d
OF_HW_CNTR_BYTES	include/openflow/of_hw_api.h	305;"	d
OF_HW_CNTR_PACKETS	include/openflow/of_hw_api.h	304;"	d
OF_HW_DRV_COUNT_PKTS_OR_BYTES	include/openflow/of_hw_api.h	/^    OF_HW_DRV_COUNT_PKTS_OR_BYTES     = 1 << 0,$/;"	e	enum:of_hw_driver_flags
OF_HW_DRV_CPU_PKTS_THRU_TABLE	include/openflow/of_hw_api.h	/^    OF_HW_DRV_CPU_PKTS_THRU_TABLE     = 1 << 2$/;"	e	enum:of_hw_driver_flags
OF_HW_DRV_INTERNAL_PRI	include/openflow/of_hw_api.h	/^    OF_HW_DRV_INTERNAL_PRI            = 1 << 1,$/;"	e	enum:of_hw_driver_flags
OF_HW_ERROR	include/openflow/of_hw_api.h	/^    OF_HW_ERROR           = -1,$/;"	e	enum:of_hw_error_e
OF_HW_IOCTL_BYTE_PKT_CNTR_SET	include/openflow/of_hw_api.h	/^    OF_HW_IOCTL_BYTE_PKT_CNTR_SET       = 3$/;"	e	enum:of_hw_ioctl_e
OF_HW_IOCTL_PORT_DEBUG_SET	include/openflow/of_hw_api.h	/^    OF_HW_IOCTL_PORT_DEBUG_SET          = 2,$/;"	e	enum:of_hw_ioctl_e
OF_HW_IOCTL_TABLE_DEBUG_SET	include/openflow/of_hw_api.h	/^    OF_HW_IOCTL_TABLE_DEBUG_SET         = 1,$/;"	e	enum:of_hw_ioctl_e
OF_HW_OKAY	include/openflow/of_hw_api.h	/^    OF_HW_OKAY            = 0,$/;"	e	enum:of_hw_error_e
OF_HW_PORT_DOWN	include/openflow/of_hw_api.h	/^    OF_HW_PORT_DOWN       = -2$/;"	e	enum:of_hw_error_e
OF_PKT_INIT	include/openflow/of_hw_api.h	84;"	d
OPENFLOW_BME_EXT_H	include/openflow/bme-ext.h	33;"	d
OPENFLOW_NICIRA_EXT_H	include/openflow/nicira-ext.h	18;"	d
OPENFLOW_OPENFLOW_EXT_H	include/openflow/openflow-ext.h	7;"	d
OPENFLOW_OPENFLOW_H	include/openflow/openflow.h	4;"	d
OPENFLOW_OPENFLOW_NETLINK_H	include/openflow/openflow-netlink.h	35;"	d
OPENFLOW_PRIVATE_EXT_H_	include/openflow/private-ext.h	34;"	d
OPENFLOW_QUEUE_ERROR_STRINGS_DEF	include/openflow/openflow-ext.h	73;"	d
OPENFLOW_VENDOR_ID	include/openflow/openflow-ext.h	19;"	d
OUTER	soexpand.pl	/^OUTER: while (<STDIN>) {$/;"	l
OVERWRITE_SECS	udatapath/dp_buffers.c	65;"	d	file:
OVSFW_ALL	include/openflow/nicira-ext.h	188;"	d
OXM_FIELD	oflib/oxm-match.h	71;"	d
OXM_HASMASK	oflib/oxm-match.h	73;"	d
OXM_HEADER	oflib/oxm-match.h	59;"	d
OXM_HEADER_VL	oflib/oxm-match.h	64;"	d
OXM_HEADER_VL_W	oflib/oxm-match.h	67;"	d
OXM_HEADER_W	oflib/oxm-match.h	61;"	d
OXM_HEADER__	oflib/oxm-match.h	57;"	d
OXM_LENGTH	oflib/oxm-match.h	74;"	d
OXM_MAKE_WILD_HEADER	oflib/oxm-match.h	78;"	d
OXM_OF_ARP_OP	oflib/oxm-match.h	165;"	d
OXM_OF_ARP_SHA	oflib/oxm-match.h	176;"	d
OXM_OF_ARP_SHA_W	oflib/oxm-match.h	177;"	d
OXM_OF_ARP_SPA	oflib/oxm-match.h	168;"	d
OXM_OF_ARP_SPA_W	oflib/oxm-match.h	169;"	d
OXM_OF_ARP_THA	oflib/oxm-match.h	180;"	d
OXM_OF_ARP_THA_W	oflib/oxm-match.h	181;"	d
OXM_OF_ARP_TPA	oflib/oxm-match.h	172;"	d
OXM_OF_ARP_TPA_W	oflib/oxm-match.h	173;"	d
OXM_OF_ETH_DST	oflib/oxm-match.h	105;"	d
OXM_OF_ETH_DST_W	oflib/oxm-match.h	106;"	d
OXM_OF_ETH_SRC	oflib/oxm-match.h	109;"	d
OXM_OF_ETH_SRC_W	oflib/oxm-match.h	110;"	d
OXM_OF_ETH_TYPE	oflib/oxm-match.h	113;"	d
OXM_OF_ICMPV4_CODE	oflib/oxm-match.h	162;"	d
OXM_OF_ICMPV4_TYPE	oflib/oxm-match.h	159;"	d
OXM_OF_ICMPV6_CODE	oflib/oxm-match.h	199;"	d
OXM_OF_ICMPV6_TYPE	oflib/oxm-match.h	196;"	d
OXM_OF_IN_PHY_PORT	oflib/oxm-match.h	98;"	d
OXM_OF_IN_PORT	oflib/oxm-match.h	90;"	d
OXM_OF_IPV4_DST	oflib/oxm-match.h	137;"	d
OXM_OF_IPV4_DST_W	oflib/oxm-match.h	138;"	d
OXM_OF_IPV4_SRC	oflib/oxm-match.h	133;"	d
OXM_OF_IPV4_SRC_W	oflib/oxm-match.h	134;"	d
OXM_OF_IPV4_TTL	oflib/oxm-match.h	281;"	d
OXM_OF_IPV6_AH_ID	oflib/oxm-match.h	264;"	d
OXM_OF_IPV6_AH_ID_W	oflib/oxm-match.h	265;"	d
OXM_OF_IPV6_DOH_ID	oflib/oxm-match.h	245;"	d
OXM_OF_IPV6_DOH_ID_W	oflib/oxm-match.h	246;"	d
OXM_OF_IPV6_DOH_OPT_CODE	oflib/oxm-match.h	248;"	d
OXM_OF_IPV6_DOH_OPT_VALUE	oflib/oxm-match.h	250;"	d
OXM_OF_IPV6_DST	oflib/oxm-match.h	188;"	d
OXM_OF_IPV6_DST_W	oflib/oxm-match.h	189;"	d
OXM_OF_IPV6_ESP_ID	oflib/oxm-match.h	268;"	d
OXM_OF_IPV6_EXTHDR	oflib/oxm-match.h	224;"	d
OXM_OF_IPV6_EXTHDR_W	oflib/oxm-match.h	225;"	d
OXM_OF_IPV6_FH_ID	oflib/oxm-match.h	260;"	d
OXM_OF_IPV6_FH_ID_W	oflib/oxm-match.h	261;"	d
OXM_OF_IPV6_FLABEL	oflib/oxm-match.h	192;"	d
OXM_OF_IPV6_FLABEL_W	oflib/oxm-match.h	193;"	d
OXM_OF_IPV6_HBH_ID	oflib/oxm-match.h	237;"	d
OXM_OF_IPV6_HBH_ID_W	oflib/oxm-match.h	238;"	d
OXM_OF_IPV6_HBH_OPT_CODE	oflib/oxm-match.h	240;"	d
OXM_OF_IPV6_HBH_OPT_VALUE	oflib/oxm-match.h	242;"	d
OXM_OF_IPV6_MH_ID	oflib/oxm-match.h	271;"	d
OXM_OF_IPV6_ND_SLL	oflib/oxm-match.h	205;"	d
OXM_OF_IPV6_ND_TARGET	oflib/oxm-match.h	202;"	d
OXM_OF_IPV6_ND_TLL	oflib/oxm-match.h	208;"	d
OXM_OF_IPV6_RH_ADDRESS	oflib/oxm-match.h	257;"	d
OXM_OF_IPV6_RH_ID	oflib/oxm-match.h	254;"	d
OXM_OF_IPV6_RH_ID_W	oflib/oxm-match.h	255;"	d
OXM_OF_IPV6_SRC	oflib/oxm-match.h	184;"	d
OXM_OF_IPV6_SRC_W	oflib/oxm-match.h	185;"	d
OXM_OF_IPV6_TC	oflib/oxm-match.h	233;"	d
OXM_OF_IPV6_TC_W	oflib/oxm-match.h	234;"	d
OXM_OF_IP_DSCP	oflib/oxm-match.h	124;"	d
OXM_OF_IP_ECN	oflib/oxm-match.h	127;"	d
OXM_OF_IP_PROTO	oflib/oxm-match.h	130;"	d
OXM_OF_METADATA	oflib/oxm-match.h	101;"	d
OXM_OF_METADATA_W	oflib/oxm-match.h	102;"	d
OXM_OF_MPLS_BOS	oflib/oxm-match.h	216;"	d
OXM_OF_MPLS_LABEL	oflib/oxm-match.h	211;"	d
OXM_OF_MPLS_TC	oflib/oxm-match.h	214;"	d
OXM_OF_MPLS_TTL	oflib/oxm-match.h	278;"	d
OXM_OF_PBB_ISID	oflib/oxm-match.h	218;"	d
OXM_OF_PBB_ISID_W	oflib/oxm-match.h	219;"	d
OXM_OF_SCTP_DST	oflib/oxm-match.h	156;"	d
OXM_OF_SCTP_SRC	oflib/oxm-match.h	153;"	d
OXM_OF_TCP_DST	oflib/oxm-match.h	144;"	d
OXM_OF_TCP_SRC	oflib/oxm-match.h	141;"	d
OXM_OF_TUNNEL_ID	oflib/oxm-match.h	221;"	d
OXM_OF_TUNNEL_ID_W	oflib/oxm-match.h	222;"	d
OXM_OF_UDP_DST	oflib/oxm-match.h	150;"	d
OXM_OF_UDP_SRC	oflib/oxm-match.h	147;"	d
OXM_OF_VLAN_PCP	oflib/oxm-match.h	120;"	d
OXM_OF_VLAN_VID	oflib/oxm-match.h	116;"	d
OXM_OF_VLAN_VID_W	oflib/oxm-match.h	117;"	d
OXM_TYPE	oflib/oxm-match.h	72;"	d
OXM_VENDOR	oflib/oxm-match.h	70;"	d
OX_MATCH_H	oflib/oxm-match.h	47;"	d
PACKAGE	Makefile	/^PACKAGE = openflow$/;"	m
PACKAGE	config.h	73;"	d
PACKAGE	debian/rules	/^PACKAGE=openflow-datapath-module$/;"	m
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = openflow-discuss@openflowswitch.org$/;"	m
PACKAGE_BUGREPORT	config.h	76;"	d
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = openflow$/;"	m
PACKAGE_NAME	config.h	79;"	d
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = openflow 1.3.0$/;"	m
PACKAGE_STRING	config.h	82;"	d
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = openflow$/;"	m
PACKAGE_TARNAME	config.h	85;"	d
PACKAGE_URL	Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	config.h	88;"	d
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 1.3.0$/;"	m
PACKAGE_VERSION	config.h	91;"	d
PACKED	lib/compiler.h	39;"	d
PACKED	lib/pcap.c	/^} PACKED;$/;"	v	typeref:struct:pcap_hdr
PACKED	lib/pcap.c	/^} PACKED;$/;"	v	typeref:struct:pcaprec_hdr
PACKETS_H	lib/packets.h	34;"	d
PACKET_H	udatapath/packet.h	34;"	d
PACKET_HANDLE_STD_H	udatapath/packet_handle_std.h	32;"	d
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
PBB_HEADER_LEN	lib/packets.h	379;"	d
PBB_ISID_MASK	lib/packets.h	380;"	d
PCAP_H	lib/pcap.h	35;"	d
PDMLReader	nbee_link/nbee_link.cpp	/^nbPDMLReader *PDMLReader;$/;"	v
PENDING_MAX_LENGTH	udatapath/dp_actions.c	55;"	d	file:
PENDING_MAX_LENGTH	udatapath/dp_exp_bme.c	50;"	d	file:
PERL	Makefile	/^PERL = \/usr\/bin\/perl$/;"	m
PIPELINE_H	udatapath/pipeline.h	32;"	d
PIPELINE_TABLES	include/openflow/openflow.h	42;"	d
PKG_CONFIG	Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG_LIBDIR	Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_PATH	Makefile	/^PKG_CONFIG_PATH = $/;"	m
PKIDIR	Makefile	/^PKIDIR = ${pkgdatadir}\/pki$/;"	m
PKT_BUFFER_BITS	udatapath/dp_buffers.c	58;"	d	file:
PKT_BUFFER_MASK	udatapath/dp_buffers.c	62;"	d	file:
PKT_COOKIE_BITS	udatapath/dp_buffers.c	59;"	d	file:
PKT_Q_LOCK	udatapath/dp_ports.c	70;"	d	file:
PKT_Q_UNLOCK	udatapath/dp_ports.c	71;"	d	file:
POLL_LOOP_H	lib/poll-loop.h	50;"	d
PORT_ARRAY_H	lib/port-array.h	35;"	d
PORT_ARRAY_L1	lib/port-array.h	51;"	d
PORT_ARRAY_L1_BITS	lib/port-array.h	48;"	d
PORT_ARRAY_L1_SHIFT	lib/port-array.h	49;"	d
PORT_ARRAY_L1_SIZE	lib/port-array.h	50;"	d
PORT_ARRAY_L2	lib/port-array.h	58;"	d
PORT_ARRAY_L2_BITS	lib/port-array.h	55;"	d
PORT_ARRAY_L2_SHIFT	lib/port-array.h	56;"	d
PORT_ARRAY_L2_SIZE	lib/port-array.h	57;"	d
PORT_ARRAY_L3	lib/port-array.h	65;"	d
PORT_ARRAY_L3_BITS	lib/port-array.h	62;"	d
PORT_ARRAY_L3_SHIFT	lib/port-array.h	63;"	d
PORT_ARRAY_L3_SIZE	lib/port-array.h	64;"	d
PORT_ARRAY_SIZE	lib/port-array.h	68;"	d
PORT_IN_USE	udatapath/dp_ports.h	85;"	d
PORT_MOD_ADVERTISE	utilities/dpctl.h	243;"	d
PORT_MOD_HW_ADDR	utilities/dpctl.h	240;"	d
PORT_MOD_HW_CONFIG	utilities/dpctl.h	241;"	d
PORT_MOD_MASK	utilities/dpctl.h	242;"	d
PORT_MOD_PORT	utilities/dpctl.h	239;"	d
PORT_WATCHER_H	secchan/port-watcher.h	35;"	d
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PRINTF_FORMAT	lib/compiler.h	40;"	d
PRIVATEOPT_EMERG_FLOW_PROTECTION	include/openflow/private-ext.h	52;"	d
PRIVATEOPT_EMERG_FLOW_RESTORATION	include/openflow/private-ext.h	53;"	d
PRIVATEOPT_PROTOCOL_STATS_REPLY	include/openflow/private-ext.h	51;"	d
PRIVATEOPT_PROTOCOL_STATS_REQUEST	include/openflow/private-ext.h	50;"	d
PRIVATE_VENDOR_ID	include/openflow/private-ext.h	49;"	d
PROCESS_BITS	lib/netlink.c	938;"	d	file:
PROCESS_H	lib/process.h	35;"	d
PROCESS_MASK	lib/netlink.c	940;"	d	file:
PROGRAMS	Makefile	/^PROGRAMS = $(bin_PROGRAMS) $(noinst_PROGRAMS)$/;"	m
PTIN_CONNECTION	udatapath/datapath.c	88;"	d	file:
PacketCounter	nbee_link/nbee_link.cpp	/^int PacketCounter= 1;$/;"	v
PacketDecoderVars	nbee_link/nbee_link.cpp	/^nbPacketDecoderVars* PacketDecoderVars;$/;"	v
QUEUE_H	lib/queue.h	35;"	d
RANDOM_H	lib/random.h	35;"	d
RANLIB	Makefile	/^RANLIB = ranlib$/;"	m
RATELIMIT_H	secchan/ratelimit.h	35;"	d
RCONN_H	lib/rconn.h	35;"	d
RECURSIVE_CLEAN_TARGETS	Makefile	/^RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\\$/;"	m
RECURSIVE_TARGETS	Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \\$/;"	m
ROUND_DOWN	lib/util.h	72;"	d
ROUND_UP	lib/util.h	71;"	d
ROUTING	lib/packets.h	/^    ROUTING = 1 << 2,$/;"	e	enum:ipv6_ext_hdr_order_T1
ROUTING_ALLOWED	nbee_link/nbee_link.h	27;"	d
RUNDIR	Makefile	/^RUNDIR = ${localstatedir}\/run$/;"	m
SAT_MATH_H	lib/sat-math.h	35;"	d
SCRIPTS	Makefile	/^SCRIPTS = $(bin_SCRIPTS) $(dist_commands_SCRIPTS) \\$/;"	m
SCTP_HEADER_LEN	lib/packets.h	343;"	d
SECCHAN_H	secchan/secchan.h	35;"	d
SERIAL_NUM	udatapath/datapath.c	85;"	d	file:
SERIAL_NUM_LEN	include/openflow/openflow.h	1076;"	d
SERVER	lib/vconn-ssl.c	/^    SERVER$/;"	e	enum:session_type	file:
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SHASH_H	lib/shash.h	35;"	d
SHASH_INITIALIZER	lib/shash.h	49;"	d
SHELL	Makefile	/^SHELL = \/bin\/bash$/;"	m
SIGNAL	utilities/ofp-kill.c	129;"	d	file:
SIGNAL	utilities/ofp-kill.c	160;"	d	file:
SIGNALS_H	lib/signals.h	35;"	d
SNAP_HEADER_LEN	lib/packets.h	151;"	d
SNAP_ORG_ETHERNET	lib/packets.h	149;"	d
SOCKET_BITS	lib/netlink.c	935;"	d	file:
SOCKET_UTIL_H	lib/socket-util.h	35;"	d
SOL_NETLINK	lib/netlink.c	56;"	d	file:
SOURCES	Makefile	/^SOURCES = $(lib_libopenflow_a_SOURCES) \\$/;"	m
SQR	udatapath/dp_actions.c	57;"	d	file:
SQR	udatapath/dp_exp_bme.c	52;"	d	file:
SSL_CFLAGS	Makefile	/^SSL_CFLAGS = $/;"	m
SSL_LIBS	Makefile	/^SSL_LIBS = $/;"	m
STACK_DEPTH_LIMIT	lib/fault.c	67;"	d	file:
STATE	lib/rconn.c	451;"	d	file:
STATE	lib/rconn.c	453;"	d	file:
STATE	lib/rconn.c	61;"	d	file:
STATE	lib/rconn.c	63;"	d	file:
STATE	lib/rconn.c	70;"	d	file:
STATE	lib/rconn.c	72;"	d	file:
STATE	lib/rconn.c	884;"	d	file:
STATE	lib/rconn.c	886;"	d	file:
STATES	lib/rconn.c	/^    STATES$/;"	e	enum:state	file:
STATES	lib/rconn.c	54;"	d	file:
STATE_SSL_CONNECTING	lib/vconn-ssl.c	/^    STATE_SSL_CONNECTING$/;"	e	enum:ssl_state	file:
STATE_TCP_CONNECTING	lib/vconn-ssl.c	/^    STATE_TCP_CONNECTING,$/;"	e	enum:ssl_state	file:
STATUS_H	secchan/status.h	35;"	d
STDC_HEADERS	config.h	97;"	d
STP_BLOCKING	lib/stp.h	/^    STP_BLOCKING = 1 << 4        \/* 8.4.1: Initial boot state. *\/$/;"	e	enum:stp_state
STP_CONFIG_TOPOLOGY_CHANGE	lib/stp.c	/^    STP_CONFIG_TOPOLOGY_CHANGE = 0x01$/;"	e	enum:stp_config_bpdu_flags	file:
STP_CONFIG_TOPOLOGY_CHANGE_ACK	lib/stp.c	/^    STP_CONFIG_TOPOLOGY_CHANGE_ACK = 0x80,$/;"	e	enum:stp_config_bpdu_flags	file:
STP_DEFAULT_BRIDGE_PRIORITY	lib/stp.h	56;"	d
STP_DEFAULT_PORT_PRIORITY	lib/stp.h	57;"	d
STP_DISABLED	lib/stp.h	/^    STP_DISABLED = 1 << 0,       \/* 8.4.5: Disabled by management. *\/$/;"	e	enum:stp_state
STP_EXTRA_BOOT_TIME	secchan/stp-secchan.h	39;"	d
STP_FORWARDING	lib/stp.h	/^    STP_FORWARDING = 1 << 3,     \/* 8.4.4: Learning and relaying frames. *\/$/;"	e	enum:stp_state
STP_H	lib/stp.h	35;"	d
STP_LEARNING	lib/stp.h	/^    STP_LEARNING = 1 << 2,       \/* 8.4.3: Learning but not relaying frames. *\/$/;"	e	enum:stp_state
STP_LISTENING	lib/stp.h	/^    STP_LISTENING = 1 << 1,      \/* 8.4.2: Not learning or relaying frames. *\/$/;"	e	enum:stp_state
STP_LLC_CNTL	lib/stp.h	53;"	d
STP_LLC_DSAP	lib/stp.h	52;"	d
STP_LLC_SSAP	lib/stp.h	51;"	d
STP_MAX_PORTS	lib/stp.h	64;"	d
STP_PROTOCOL_ID	lib/stp.c	54;"	d	file:
STP_PROTOCOL_VERSION	lib/stp.c	55;"	d	file:
STP_SECCHAN_H	secchan/stp-secchan.h	35;"	d
STP_TYPE_CONFIG	lib/stp.c	56;"	d	file:
STP_TYPE_TCN	lib/stp.c	57;"	d	file:
STRFTIME_FORMAT	lib/compiler.h	41;"	d
STRIP	Makefile	/^STRIP = $/;"	m
SUBDIRS	Makefile	/^SUBDIRS = $/;"	m
SUFFIXES	Makefile	/^SUFFIXES = .in$/;"	m
SVEC_EMPTY_INITIALIZER	lib/svec.h	46;"	d
SVEC_H	lib/svec.h	35;"	d
SWP_HW_DRV_PORT	udatapath/dp_ports.h	/^    SWP_HW_DRV_PORT      = 1 << 1,    \/* Port controlled by HW driver *\/$/;"	e	enum:sw_port_flags
SWP_USED	udatapath/dp_ports.h	/^    SWP_USED             = 1 << 0,    \/* Is port being used *\/$/;"	e	enum:sw_port_flags
SW_DESC	udatapath/datapath.c	83;"	d	file:
TABLE_FEATURES_NUM	udatapath/flow_table.h	41;"	d
TABLE_MOD_CONFIG	utilities/dpctl.h	247;"	d
TABLE_MOD_TABLE	utilities/dpctl.h	246;"	d
TAG_H	lib/tag.h	35;"	d
TAG_SET_SIZE	lib/tag.h	118;"	d
TCP_ACK	lib/packets.h	324;"	d
TCP_FIN	lib/packets.h	320;"	d
TCP_FLAGS	lib/packets.h	327;"	d
TCP_HEADER_LEN	lib/packets.h	330;"	d
TCP_OFFSET	lib/packets.h	328;"	d
TCP_PSH	lib/packets.h	323;"	d
TCP_RST	lib/packets.h	322;"	d
TCP_SYN	lib/packets.h	321;"	d
TCP_URG	lib/packets.h	325;"	d
TC_DEFAULT_CLASS	lib/netdev.c	231;"	d	file:
TC_MIN_RATE	lib/netdev.c	232;"	d	file:
TC_QDISC	lib/netdev.c	224;"	d	file:
TC_ROOT_CLASS	lib/netdev.c	227;"	d	file:
TESTS	Makefile	/^TESTS =$/;"	m
TESTS_ENVIRONMENT	Makefile	/^TESTS_ENVIRONMENT = $/;"	m
THIS_MODULE	lib/flow.c	46;"	d	file:
THIS_MODULE	lib/vconn-netlink.c	57;"	d	file:
THIS_MODULE	lib/vconn-ssl.c	63;"	d	file:
THIS_MODULE	udatapath/udatapath.c	68;"	d	file:
TIMEVAL_H	lib/timeval.h	35;"	d
TIME_MAX	lib/timeval.h	50;"	d
TIME_MIN	lib/timeval.h	51;"	d
TIME_UPDATE_INTERVAL	lib/timeval.h	57;"	d
TXQ_LIMIT	udatapath/datapath.h	138;"	d
TYPE_IS_INTEGER	lib/type-props.h	39;"	d
TYPE_IS_SIGNED	lib/type-props.h	40;"	d
TYPE_MAXIMUM	lib/type-props.h	45;"	d
TYPE_MINIMUM	lib/type-props.h	42;"	d
TYPE_PROPS_H	lib/type-props.h	35;"	d
TYPE_VALUE_BITS	lib/type-props.h	41;"	d
UDP_HEADER_LEN	lib/packets.h	311;"	d
UNALIGNED_H	lib/unaligned.h	18;"	d
UNUSED	lib/compiler.h	38;"	d
UNUSED	lib/packets.h	/^static const uint8_t eth_addr_broadcast[ETH_ADDR_LEN] UNUSED$/;"	v
UNUSED	oflib-exp/ofl-exp-bme.c	42;"	d	file:
UNUSED	oflib/ofl-messages-pack.c	42;"	d	file:
UNUSED	oflib/ofl-messages-unpack.c	43;"	d	file:
UNUSED	oflib/ofl-structs.c	43;"	d	file:
UTIL_H	lib/util.h	35;"	d
VAR	debian/commands/reconfigure	/^  VAR:$/;"	l
VAR	debian/ofp-switch-setup	/^  VAR:$/;"	l
VCONN_H	lib/vconn.h	35;"	d
VCONN_PROVIDER_H	lib/vconn-provider.h	35;"	d
VCONN_SSL_H	lib/vconn-ssl.h	34;"	d
VCONN_SSL_LONG_OPTIONS	lib/vconn-ssl.h	45;"	d
VCONN_SSL_LONG_OPTIONS	lib/vconn-ssl.h	67;"	d
VCONN_SSL_OPTION_HANDLERS	lib/vconn-ssl.h	50;"	d
VCONN_SSL_OPTION_HANDLERS	lib/vconn-ssl.h	68;"	d
VCONN_STREAM_H	lib/vconn-stream.h	35;"	d
VCS_CONNECTED	lib/vconn.c	/^    VCS_CONNECTED,              \/* Connection established. *\/$/;"	e	enum:vconn_state	file:
VCS_CONNECTING	lib/vconn.c	/^    VCS_CONNECTING,             \/* Underlying vconn is not connected. *\/$/;"	e	enum:vconn_state	file:
VCS_DISCONNECTED	lib/vconn.c	/^    VCS_DISCONNECTED            \/* Connection failed or connection closed. *\/$/;"	e	enum:vconn_state	file:
VCS_RECV_HELLO	lib/vconn.c	/^    VCS_RECV_HELLO,             \/* Waiting to receive OFPT_HELLO message. *\/$/;"	e	enum:vconn_state	file:
VCS_SEND_ERROR	lib/vconn.c	/^    VCS_SEND_ERROR,             \/* Sending OFPT_ERROR message. *\/$/;"	e	enum:vconn_state	file:
VCS_SEND_HELLO	lib/vconn.c	/^    VCS_SEND_HELLO,             \/* Waiting to send OFPT_HELLO message. *\/$/;"	e	enum:vconn_state	file:
VENDOR_FROM_TYPE	oflib/oxm-match.h	75;"	d
VERSION	Makefile	/^VERSION = 1.3.0$/;"	m
VERSION	config.h	125;"	d
VLAN_ETH_HEADER_LEN	lib/packets.h	187;"	d
VLAN_HEADER_LEN	lib/packets.h	174;"	d
VLAN_PCP_BITMASK	lib/packets.h	169;"	d
VLAN_PCP_BITMASK	oflib/ofl-packets.h	51;"	d
VLAN_PCP_MASK	lib/packets.h	167;"	d
VLAN_PCP_MASK	oflib/ofl-packets.h	49;"	d
VLAN_PCP_MAX	lib/packets.h	172;"	d
VLAN_PCP_MAX	oflib/ofl-packets.h	54;"	d
VLAN_PCP_SHIFT	lib/packets.h	168;"	d
VLAN_PCP_SHIFT	oflib/ofl-packets.h	50;"	d
VLAN_VID_MASK	lib/packets.h	165;"	d
VLAN_VID_MASK	oflib/ofl-packets.h	47;"	d
VLAN_VID_MAX	lib/packets.h	171;"	d
VLAN_VID_MAX	oflib/ofl-packets.h	53;"	d
VLAN_VID_SHIFT	lib/packets.h	166;"	d
VLAN_VID_SHIFT	oflib/ofl-packets.h	48;"	d
VLF_ANY_FACILITY	lib/vlog.h	/^    VLF_ANY_FACILITY = -1$/;"	e	enum:vlog_facility
VLF_N_FACILITIES	lib/vlog.h	/^    VLF_N_FACILITIES,$/;"	e	enum:vlog_facility
VLL_N_LEVELS	lib/vlog.h	/^    VLL_N_LEVELS$/;"	e	enum:vlog_level
VLM_ANY_MODULE	lib/vlog.h	/^    VLM_ANY_MODULE = -1$/;"	e	enum:vlog_module
VLM_N_MODULES	lib/vlog.h	/^    VLM_N_MODULES,$/;"	e	enum:vlog_module
VLOG	lib/vlog.h	184;"	d
VLOG_DBG	lib/vlog.h	150;"	d
VLOG_DBG_RL	lib/vlog.h	167;"	d
VLOG_EMER	lib/vlog.h	146;"	d
VLOG_ERR	lib/vlog.h	147;"	d
VLOG_ERR_RL	lib/vlog.h	164;"	d
VLOG_FACILITIES	lib/vlog.h	/^    VLOG_FACILITIES$/;"	e	enum:vlog_facility
VLOG_FACILITIES	lib/vlog.h	61;"	d
VLOG_FACILITY	lib/vlog.c	82;"	d	file:
VLOG_FACILITY	lib/vlog.c	84;"	d	file:
VLOG_FACILITY	lib/vlog.h	66;"	d
VLOG_FACILITY	lib/vlog.h	68;"	d
VLOG_H	lib/vlog.h	35;"	d
VLOG_INFO	lib/vlog.h	149;"	d
VLOG_INFO_RL	lib/vlog.h	166;"	d
VLOG_IS_DBG_ENABLED	lib/vlog.h	159;"	d
VLOG_IS_EMER_ENABLED	lib/vlog.h	155;"	d
VLOG_IS_ERR_ENABLED	lib/vlog.h	156;"	d
VLOG_IS_INFO_ENABLED	lib/vlog.h	158;"	d
VLOG_IS_WARN_ENABLED	lib/vlog.h	157;"	d
VLOG_LEVEL	lib/vlog.c	56;"	d	file:
VLOG_LEVEL	lib/vlog.c	58;"	d	file:
VLOG_LEVEL	lib/vlog.c	63;"	d	file:
VLOG_LEVEL	lib/vlog.c	65;"	d	file:
VLOG_LEVEL	lib/vlog.h	51;"	d
VLOG_LEVEL	lib/vlog.h	53;"	d
VLOG_LEVELS	lib/vlog.h	/^    VLOG_LEVELS$/;"	e	enum:vlog_level
VLOG_LEVELS	lib/vlog.h	44;"	d
VLOG_LONG_OPTIONS	lib/vlog.h	171;"	d
VLOG_MODULE	lib/vlog.c	70;"	d	file:
VLOG_MODULE	lib/vlog.c	72;"	d	file:
VLOG_MODULE	lib/vlog.h	78;"	d
VLOG_MSG_TOKENS	lib/vlog.h	103;"	d
VLOG_NAME	oflib/ofl-log-vlog-cc.h	37;"	d
VLOG_NAME	oflib/ofl-log-vlog.h	37;"	d
VLOG_OPTION_ENUMS	lib/vlog.h	170;"	d
VLOG_OPTION_HANDLERS	lib/vlog.h	174;"	d
VLOG_RATE_LIMIT_INIT	lib/vlog.h	107;"	d
VLOG_RL	lib/vlog.h	190;"	d
VLOG_SOCKET_H	lib/vlog-socket.h	35;"	d
VLOG_WARN	lib/vlog.h	148;"	d
VLOG_WARN_RL	lib/vlog.h	165;"	d
WAIT_CONNECT	lib/vconn.h	/^    WAIT_CONNECT,$/;"	e	enum:vconn_wait_type
WAIT_RECV	lib/vconn.h	/^    WAIT_RECV,$/;"	e	enum:vconn_wait_type
WAIT_SEND	lib/vconn.h	/^    WAIT_SEND$/;"	e	enum:vconn_wait_type
WILDCARD_SUB	utilities/dpctl.h	255;"	d
X8	lib/netdev.c	204;"	d	file:
XID	utilities/dpctl.c	83;"	d	file:
XOR	udatapath/dp_exp_bme.c	/^XOR(char *dst, char *src, int len)$/;"	f	file:
XOR_ENCODING_WAIT	udatapath/dp_actions.c	52;"	d	file:
XOR_ENCODING_WAIT	udatapath/dp_exp_bme.c	47;"	d	file:
XTOXLL_H	lib/xtoxll.h	34;"	d
_ALL_SOURCE	config.h	104;"	d
_DARWIN_USE_64_BIT_INODE	config.h	129;"	d
_GNU_SOURCE	config.h	108;"	d
_POSIX_PTHREAD_SEMANTICS	config.h	112;"	d
_TANDEM_SOURCE	config.h	116;"	d
__CTRL_ATTR_MAX	lib/netlink-protocol.h	/^        __CTRL_ATTR_MAX,$/;"	e	enum:__anon7
__CTRL_ATTR_OP_MAX	lib/netlink-protocol.h	/^        __CTRL_ATTR_OP_MAX,$/;"	e	enum:__anon8
__CTRL_CMD_MAX	lib/netlink-protocol.h	/^        __CTRL_CMD_MAX,$/;"	e	enum:__anon6
__DP_GENL_A_MAX	include/openflow/openflow-netlink.h	/^	__DP_GENL_A_MAX,$/;"	e	enum:__anon1
__DP_GENL_C_MAX	include/openflow/openflow-netlink.h	/^	__DP_GENL_C_MAX,$/;"	e	enum:dp_genl_command
__EXTENSIONS__	config.h	120;"	d
abs_builddir	Makefile	/^abs_builddir = \/home\/mininet\/of13ofswitch.bme$/;"	m
abs_srcdir	Makefile	/^abs_srcdir = \/home\/mininet\/of13ofswitch.bme$/;"	m
abs_top_builddir	Makefile	/^abs_top_builddir = \/home\/mininet\/of13ofswitch.bme$/;"	m
abs_top_srcdir	Makefile	/^abs_top_srcdir = \/home\/mininet\/of13ofswitch.bme$/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CXX	Makefile	/^ac_ct_CXX = g++$/;"	m
ac_fn_c_check_func	configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	configure	/^ac_fn_c_try_run ()$/;"	f
ac_fn_cxx_try_compile	configure	/^ac_fn_cxx_try_compile ()$/;"	f
accept	lib/vconn-provider.h	/^    int (*accept)(struct pvconn *pvconn, struct vconn **new_vconnp);$/;"	m	struct:pvconn_class
accept_cb	lib/vconn-stream.c	/^    int (*accept_cb)(int fd, const struct sockaddr *, size_t sa_len,$/;"	m	struct:pstream_pvconn	file:
accept_controller_re	secchan/secchan.h	/^    const char *accept_controller_re; \/* String version of regex. *\/$/;"	m	struct:settings
accept_controller_re	utilities/ofp-discover.c	/^static const char *accept_controller_re = ".*";$/;"	v	file:
accept_controller_regex	secchan/secchan.h	/^    regex_t accept_controller_regex;  \/* Controller vconns to accept. *\/$/;"	m	struct:settings
accept_controller_regex	utilities/ofp-discover.c	/^static regex_t accept_controller_regex;$/;"	v	file:
accept_vconn	secchan/secchan.c	/^accept_vconn(struct pvconn *pvconn)$/;"	f	file:
act	oflib/ofl.h	/^    struct ofl_exp_act    *act;$/;"	m	struct:ofl_exp	typeref:struct:ofl_exp::ofl_exp_act
action	udatapath/action_set.c	/^    struct ofl_action_header  *action;  \/* these actions point to actions in$/;"	m	struct:action_set_entry	typeref:struct:action_set_entry::ofl_action_header	file:
action_ids	include/openflow/openflow.h	/^    struct ofp_action_header action_ids[0];\/* List of actions *\/$/;"	m	struct:ofp_table_feature_prop_actions	typeref:struct:ofp_table_feature_prop_actions::ofp_action_header
action_ids	oflib/ofl-structs.h	/^    struct ofl_action_header *action_ids; \/*Actions list*\/$/;"	m	struct:ofl_table_feature_prop_actions	typeref:struct:ofl_table_feature_prop_actions::ofl_action_header
action_names	utilities/dpctl.h	/^static struct names16 action_names[] = {$/;"	v	typeref:struct:names16
action_outputs_to_port	lib/ofp.c	/^action_outputs_to_port(const union ofp_action *action, uint32_t port)$/;"	f
action_set	udatapath/action_set.c	/^struct action_set {$/;"	s	file:
action_set	udatapath/packet.h	/^    struct action_set  *action_set; \/* action set associated with the packet *\/$/;"	m	struct:packet	typeref:struct:packet::action_set
action_set_clear_actions	udatapath/action_set.c	/^action_set_clear_actions(struct action_set *set) {$/;"	f
action_set_clone	udatapath/action_set.c	/^action_set_clone(struct action_set *set) {$/;"	f
action_set_create	udatapath/action_set.c	/^action_set_create(struct ofl_exp *exp) {$/;"	f
action_set_create_entry	udatapath/action_set.c	/^action_set_create_entry(struct ofl_action_header *act) {$/;"	f	file:
action_set_destroy	udatapath/action_set.c	/^void action_set_destroy(struct action_set *set) {$/;"	f
action_set_entry	udatapath/action_set.c	/^struct action_set_entry {$/;"	s	file:
action_set_execute	udatapath/action_set.c	/^action_set_execute(struct action_set *set, struct packet *pkt, uint64_t cookie) {$/;"	f
action_set_order	udatapath/action_set.c	/^action_set_order(struct ofl_action_header *act) {$/;"	f	file:
action_set_print	udatapath/action_set.c	/^action_set_print(FILE *stream, struct action_set *set) {$/;"	f
action_set_to_string	udatapath/action_set.c	/^action_set_to_string(struct action_set *set) {$/;"	f
action_set_write_action	udatapath/action_set.c	/^action_set_write_action(struct action_set *set,$/;"	f	file:
action_set_write_actions	udatapath/action_set.c	/^action_set_write_actions(struct action_set *set,$/;"	f
actions	include/openflow/openflow.h	/^	struct ofp_action_header actions[0]; \/* Action list. *\/$/;"	m	struct:ofp_packet_out	typeref:struct:ofp_packet_out::ofp_action_header
actions	include/openflow/openflow.h	/^	struct ofp_action_header actions[0]; \/* Actions associated with$/;"	m	struct:ofp_instruction_actions	typeref:struct:ofp_instruction_actions::ofp_action_header
actions	include/openflow/openflow.h	/^	struct ofp_action_header actions[0]; \/* The action length is inferred$/;"	m	struct:ofp_bucket	typeref:struct:ofp_bucket::ofp_action_header
actions	include/openflow/openflow.h	/^	uint32_t actions[4];    \/* Bitmaps of OFPAT_* that are supported. *\/$/;"	m	struct:ofp_group_features_stats
actions	oflib/ofl-messages.h	/^    struct ofl_action_header **actions;$/;"	m	struct:ofl_msg_packet_out	typeref:struct:ofl_msg_packet_out::ofl_action_header
actions	oflib/ofl-messages.h	/^    uint32_t actions[4];$/;"	m	struct:ofl_msg_multipart_reply_group_features
actions	oflib/ofl-structs.h	/^    struct ofl_action_header **actions;$/;"	m	struct:ofl_bucket	typeref:struct:ofl_bucket::ofl_action_header
actions	oflib/ofl-structs.h	/^    struct ofl_action_header **actions;$/;"	m	struct:ofl_instruction_actions	typeref:struct:ofl_instruction_actions::ofl_action_header
actions	udatapath/action_set.c	/^    struct list     actions;   \/* the list of actions in the action set,$/;"	m	struct:action_set	typeref:struct:action_set::list	file:
actions	udatapath/flow_table.c	/^struct ofl_action_header actions[] = { {OFPAT_OUTPUT, 4}, $/;"	v	typeref:struct:ofl_action_header
actions_first	lib/ofp.c	/^actions_first(struct actions_iterator *iter,$/;"	f
actions_iterator	lib/ofp.h	/^struct actions_iterator {$/;"	s
actions_len	include/openflow/openflow.h	/^	uint16_t actions_len;                \/* Size of action array in bytes. *\/$/;"	m	struct:ofp_packet_out
actions_next	lib/ofp.c	/^actions_next(struct actions_iterator *iter)$/;"	f
actions_num	oflib/ofl-messages.h	/^    uint32_t                   actions_num;$/;"	m	struct:ofl_msg_packet_out
actions_num	oflib/ofl-structs.h	/^    size_t                     actions_num;$/;"	m	struct:ofl_bucket
actions_num	oflib/ofl-structs.h	/^    size_t                     actions_num;$/;"	m	struct:ofl_instruction_actions
actions_num	oflib/ofl-structs.h	/^    size_t actions_num;$/;"	m	struct:ofl_table_feature_prop_actions
actions_supported	include/openflow/of_hw_api.h	/^    uint32_t actions_supported;  \/* Bitmap of OFPAT_* supported actions *\/$/;"	m	struct:of_hw_driver_caps
active	lib/stp.c	/^    bool active;                 \/* Timer in use? *\/$/;"	m	struct:stp_timer	file:
active_count	include/openflow/openflow.h	/^    uint32_t active_count;  \/* Number of active entries. *\/$/;"	m	struct:ofp_table_stats
active_count	oflib/ofl-structs.h	/^    uint32_t   active_count;  \/* Number of active entries. *\/$/;"	m	struct:ofl_table_stats
add	lib/ofpstat.h	/^		uint64_t add;$/;"	m	struct:ofpstat::__anon4
add_all_targets	utilities/vlogconf.c	/^add_all_targets(struct vlog_client ***clients, size_t *n_clients, bool *ok)$/;"	f	file:
add_hook	secchan/secchan.c	/^add_hook(struct secchan *secchan, const struct hook_class *class, void *aux)$/;"	f
add_mpls_label	udatapath/dp_exp_bme.c	/^add_mpls_label(struct packet *pkt, uint32_t label)$/;"	f	file:
add_ports	udatapath/udatapath.c	/^add_ports(struct datapath *dp, char *port_list)$/;"	f	file:
add_target	utilities/vlogconf.c	/^add_target(struct vlog_client ***clients, size_t *n_clients,$/;"	f	file:
add_to_timeout_lists	udatapath/flow_table.c	/^add_to_timeout_lists(struct flow_table *table, struct flow_entry *entry) {$/;"	f	file:
advertise	include/openflow/openflow.h	/^	uint32_t advertise;            \/* Bitmap of OFPPF_*. Zero all bits to prevent$/;"	m	struct:ofp_port_mod
advertise	oflib/ofl-messages.h	/^    uint32_t   advertise; \/* Bitmap of OFPPF_*. Zero all bits to prevent$/;"	m	struct:ofl_msg_port_mod
advertised	include/openflow/openflow.h	/^	uint32_t advertised;              \/* Features being advertised by the port. *\/$/;"	m	struct:ofp_port
advertised	lib/netdev.c	/^    uint32_t advertised;        \/* Features being advertised by the port. *\/$/;"	m	struct:netdev	file:
advertised	oflib/ofl-structs.h	/^    uint32_t   advertised;    \/* Features being advertised by the port. *\/$/;"	m	struct:ofl_port
af_inet_sock	lib/netdev.c	/^static int af_inet_sock = -1;$/;"	v	file:
aggregate_stats_get	include/openflow/of_hw_api.h	/^    int (*aggregate_stats_get)(struct ofp_match,$/;"	m	struct:of_hw_driver
all_commands	utilities/dpctl.c	/^static struct command all_commands[] = {$/;"	v	typeref:struct:command	file:
all_commands	utilities/dpctl.c	/^static struct command all_commands[];$/;"	v	typeref:struct:command	file:
all_fields	oflib/oxm-match.c	/^struct oxm_field all_fields[NUM_OXM_FIELDS] = {$/;"	v	typeref:struct:oxm_field
all_netdevs_changed	lib/netdev.c	/^all_netdevs_changed(struct netdev_monitor *mon)$/;"	f	file:
all_oxm_fields	oflib/oxm-match.c	/^static struct hmap all_oxm_fields = HMAP_INITIALIZER(&all_oxm_fields);$/;"	v	typeref:struct:hmap	file:
all_processes	lib/process.c	/^static struct list all_processes = LIST_INITIALIZER(&all_processes);$/;"	v	typeref:struct:list	file:
alloc_pid	lib/netlink.c	/^alloc_pid(uint32_t *pid)$/;"	f	file:
alloc_xid	lib/ofp.c	/^alloc_xid(void)$/;"	f	file:
allocated	lib/dynamic-string.h	/^    size_t allocated;   \/* Bytes allocated, not including null terminator. *\/$/;"	m	struct:ds
allocated	lib/ofpbuf.h	/^    size_t allocated;           \/* Number of bytes allocated. *\/$/;"	m	struct:ofpbuf
allocated	lib/svec.h	/^    size_t allocated;$/;"	m	struct:svec
allocated_categories	secchan/status.c	/^    size_t n_categories, allocated_categories;$/;"	m	struct:switch_status	file:
allocated_hooks	secchan/secchan.c	/^    size_t n_hooks, allocated_hooks;$/;"	m	struct:secchan	file:
already_running	lib/daemon.c	/^already_running(void)$/;"	f	file:
am__CONFIG_DISTCLEAN_FILES	Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__DEPENDENCIES_1	Makefile	/^am__DEPENDENCIES_1 =$/;"	m
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/m4\/libopenflow.m4 \\$/;"	m
am__append_3	Makefile	/^am__append_3 = \\$/;"	m
am__base_list	Makefile	/^am__base_list = \\$/;"	m
am__can_run_installinfo	Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__depfiles_maybe	Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__dirstamp	Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__distuninstallcheck_listfiles	Makefile	/^am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\$/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__install_max	Makefile	/^am__install_max = 40$/;"	m
am__installdirs	Makefile	/^am__installdirs = "$(DESTDIR)$(bindir)" "$(DESTDIR)$(bindir)" \\$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__lib_libopenflow_a_SOURCES_DIST	Makefile	/^am__lib_libopenflow_a_SOURCES_DIST = lib\/backtrace.c lib\/backtrace.h \\$/;"	m
am__make_dryrun	Makefile	/^am__make_dryrun = \\$/;"	m
am__mv	Makefile	/^am__mv = mv -f$/;"	m
am__nobase_list	Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_strip	Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip_setup	Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__objects_1	Makefile	/^am__objects_1 = lib\/dpif.$(OBJEXT) \\$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__relativize	Makefile	/^am__relativize = \\$/;"	m
am__remove_distdir	Makefile	/^am__remove_distdir = \\$/;"	m
am__strip_dir	Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__tar	Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__tty_colors	Makefile	/^am__tty_colors = \\$/;"	m
am__udatapath_libudatapath_a_SOURCES_DIST	Makefile	/^am__udatapath_libudatapath_a_SOURCES_DIST = udatapath\/action_set.c \\$/;"	m
am__uninstall_files_from_dir	Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__untar	Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__vpath_adj	Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am_lib_libopenflow_a_OBJECTS	Makefile	/^am_lib_libopenflow_a_OBJECTS = lib\/backtrace.$(OBJEXT) \\$/;"	m
am_nbee_link_libnbee_link_a_OBJECTS	Makefile	/^am_nbee_link_libnbee_link_a_OBJECTS = nbee_link\/nbee_link.$(OBJEXT)$/;"	m
am_oflib_exp_liboflib_exp_a_OBJECTS	Makefile	/^am_oflib_exp_liboflib_exp_a_OBJECTS = oflib-exp\/ofl-exp.$(OBJEXT) \\$/;"	m
am_oflib_liboflib_a_OBJECTS	Makefile	/^am_oflib_liboflib_a_OBJECTS = oflib\/ofl-actions.$(OBJEXT) \\$/;"	m
am_secchan_ofprotocol_OBJECTS	Makefile	/^am_secchan_ofprotocol_OBJECTS = secchan\/discovery.$(OBJEXT) \\$/;"	m
am_udatapath_ofdatapath_OBJECTS	Makefile	/^am_udatapath_ofdatapath_OBJECTS =  \\$/;"	m
am_utilities_dpctl_OBJECTS	Makefile	/^am_utilities_dpctl_OBJECTS = utilities\/dpctl.$(OBJEXT)$/;"	m
am_utilities_ofp_discover_OBJECTS	Makefile	/^am_utilities_ofp_discover_OBJECTS = utilities\/ofp-discover.$(OBJEXT)$/;"	m
am_utilities_ofp_kill_OBJECTS	Makefile	/^am_utilities_ofp_kill_OBJECTS = utilities\/ofp-kill.$(OBJEXT)$/;"	m
am_utilities_vlogconf_OBJECTS	Makefile	/^am_utilities_vlogconf_OBJECTS = utilities\/vlogconf.$(OBJEXT)$/;"	m
append_data	lib/dhcp.c	/^append_data(struct dhcp_msg *msg, const void *data, size_t n)$/;"	f	file:
ar_hln	lib/packets.h	/^    uint8_t ar_hln;            \/* Hardware address length. *\/$/;"	m	struct:arp_eth_header
ar_hrd	lib/packets.h	/^    uint16_t ar_hrd;           \/* Hardware type. *\/$/;"	m	struct:arp_eth_header
ar_op	lib/packets.h	/^    uint16_t ar_op;            \/* Opcode. *\/$/;"	m	struct:arp_eth_header
ar_pln	lib/packets.h	/^    uint8_t ar_pln;            \/* Protocol address length. *\/$/;"	m	struct:arp_eth_header
ar_pro	lib/packets.h	/^    uint16_t ar_pro;           \/* Protocol type. *\/$/;"	m	struct:arp_eth_header
ar_sha	lib/packets.h	/^    uint8_t ar_sha[ETH_ADDR_LEN]; \/* Sender hardware address. *\/$/;"	m	struct:arp_eth_header
ar_spa	lib/packets.h	/^    uint32_t ar_spa;           \/* Sender protocol address. *\/$/;"	m	struct:arp_eth_header
ar_tha	lib/packets.h	/^    uint8_t ar_tha[ETH_ADDR_LEN]; \/* Target hardware address. *\/$/;"	m	struct:arp_eth_header
ar_tpa	lib/packets.h	/^    uint32_t ar_tpa;           \/* Target protocol address. *\/$/;"	m	struct:arp_eth_header
arg_type	lib/dhcp.c	/^struct arg_type {$/;"	s	file:
arp	lib/packets.h	/^   struct arp_eth_header  * arp;$/;"	m	struct:protocols_std	typeref:struct:protocols_std::arp_eth_header
arp_eth_header	lib/packets.h	/^struct arp_eth_header {$/;"	s
as_fn_append	config.status	/^  as_fn_append ()$/;"	f
as_fn_append	configure	/^  as_fn_append ()$/;"	f
as_fn_arith	config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	configure	/^  as_fn_arith ()$/;"	f
as_fn_error	config.status	/^as_fn_error ()$/;"	f
as_fn_error	configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	configure	/^as_fn_exit ()$/;"	f
as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	configure	/^as_fn_set_status ()$/;"	f
as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	configure	/^as_fn_unset ()$/;"	f
async_rconn	secchan/secchan.h	/^    struct rconn *async_rconn;  \/* For receiving asynchronous events. *\/$/;"	m	struct:relay	typeref:struct:relay::rconn
atexit_handler	lib/fatal-signal.c	/^atexit_handler(void)$/;"	f	file:
attr_len_range	lib/netlink.c	/^static const size_t attr_len_range[][2] = {$/;"	v	file:
aux	lib/dhcp-client.c	/^    void *aux;$/;"	m	struct:dhclient	file:
aux	lib/fatal-signal.c	/^    void *aux;$/;"	m	struct:hook	file:
aux	lib/poll-loop.c	/^    void *aux;                  \/* Argument to callback function. *\/$/;"	m	struct:poll_waiter	file:
aux	lib/stp.c	/^    void *aux;$/;"	m	struct:stp	file:
aux	secchan/port-watcher.c	/^    void *aux;$/;"	m	struct:port_watcher_cb	file:
aux	secchan/port-watcher.c	/^    void *aux;$/;"	m	struct:port_watcher_local_cb	file:
aux	secchan/secchan.c	/^    void *aux;$/;"	m	struct:hook	file:
aux	secchan/status.c	/^    void *aux;$/;"	m	struct:switch_status_category	file:
auxiliary_id	include/openflow/openflow.h	/^	uint8_t auxiliary_id;     \/* Identify auxiliary connections. *\/$/;"	m	struct:ofp_switch_features
auxiliary_id	oflib/ofl-messages.h	/^    uint8_t           auxiliary_id; \/* Identify auxiliary connections *\/$/;"	m	struct:ofl_msg_features_reply
avail_sockets	lib/netlink.c	/^static uint32_t avail_sockets[ROUND_UP(MAX_SOCKETS, 32)];$/;"	v	file:
ba_bad_argument	lib/ofpstat.h	/^		uint64_t ba_bad_argument;$/;"	m	struct:ofpstat::__anon3
ba_bad_len	lib/ofpstat.h	/^		uint64_t ba_bad_len;$/;"	m	struct:ofpstat::__anon3
ba_bad_out_port	lib/ofpstat.h	/^		uint64_t ba_bad_out_port;$/;"	m	struct:ofpstat::__anon3
ba_bad_type	lib/ofpstat.h	/^		uint64_t ba_bad_type;$/;"	m	struct:ofpstat::__anon3
ba_bad_vendor	lib/ofpstat.h	/^		uint64_t ba_bad_vendor;$/;"	m	struct:ofpstat::__anon3
ba_bad_vendor_type	lib/ofpstat.h	/^		uint64_t ba_bad_vendor_type;$/;"	m	struct:ofpstat::__anon3
ba_eperm	lib/ofpstat.h	/^		uint64_t ba_eperm;$/;"	m	struct:ofpstat::__anon3
backoff	lib/rconn.c	/^    int backoff;$/;"	m	struct:rconn	file:
backoff_deadline	lib/rconn.c	/^    time_t backoff_deadline;$/;"	m	struct:rconn	file:
backtrace	lib/backtrace.h	/^struct backtrace {$/;"	s
backtrace	lib/poll-loop.c	/^    struct backtrace *backtrace; \/* Optionally, event that created waiter. *\/$/;"	m	struct:poll_waiter	typeref:struct:poll_waiter::backtrace	file:
backtrace_capture	lib/backtrace.c	/^backtrace_capture(struct backtrace *backtrace)$/;"	f
bad_action	lib/ofpstat.h	/^		uint64_t bad_action;$/;"	m	struct:ofpstat::__anon2
bad_request	lib/ofpstat.h	/^		uint64_t bad_request;$/;"	m	struct:ofpstat::__anon2
band_names	utilities/dpctl.h	/^static struct names16 band_names[] = {$/;"	v	typeref:struct:names16
band_stats	include/openflow/openflow.h	/^    struct ofp_meter_band_stats band_stats[0]; \/* The band_stats length is$/;"	m	struct:ofp_meter_stats	typeref:struct:ofp_meter_stats::ofp_meter_band_stats
band_stats	oflib/ofl-structs.h	/^    struct ofl_meter_band_stats **band_stats; \/* The band_stats length is$/;"	m	struct:ofl_meter_stats	typeref:struct:ofl_meter_stats::ofl_meter_band_stats
band_types	include/openflow/openflow.h	/^    uint32_t band_types; \/* Bitmaps of OFPMBT_* values supported. *\/$/;"	m	struct:ofp_meter_features
band_types	oflib/ofl-structs.h	/^    uint32_t band_types; \/* Bitmaps of OFPMBT_* values supported. *\/$/;"	m	struct:ofl_meter_features
bands	include/openflow/openflow.h	/^    struct ofp_meter_band_header bands[0]; \/* The bands length is$/;"	m	struct:ofp_meter_config	typeref:struct:ofp_meter_config::ofp_meter_band_header
bands	include/openflow/openflow.h	/^    struct ofp_meter_band_header bands[0]; \/* The bands length is$/;"	m	struct:ofp_meter_mod	typeref:struct:ofp_meter_mod::ofp_meter_band_header
bands	oflib/ofl-messages.h	/^    struct ofl_meter_band_header **bands; \/* The bands length is$/;"	m	struct:ofl_msg_meter_mod	typeref:struct:ofl_msg_meter_mod::ofl_meter_band_header
bands	oflib/ofl-structs.h	/^    struct ofl_meter_band_header **bands; \/* The bands length is$/;"	m	struct:ofl_meter_config	typeref:struct:ofl_meter_config::ofl_meter_band_header
bands_num	udatapath/meter_table.h	/^	size_t              bands_num;$/;"	m	struct:meter_table
base	lib/ofpbuf.h	/^    void *base;                 \/* First byte of area malloc()'d area. *\/$/;"	m	struct:ofpbuf
bin_PROGRAMS	Makefile	/^bin_PROGRAMS = secchan\/ofprotocol$(EXEEXT) utilities\/vlogconf$(EXEEXT) \\$/;"	m
bin_SCRIPTS	Makefile	/^bin_SCRIPTS = utilities\/ofp-pki$/;"	m
bind_path	lib/vlog-socket.c	/^    char *bind_path;$/;"	m	struct:vlog_client	file:
binding	lib/dhcp-client.c	/^    struct dhcp_msg *binding;$/;"	m	struct:dhclient	typeref:struct:dhclient::dhcp_msg	file:
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
block_level	lib/fatal-signal.c	/^static int block_level = 0;$/;"	v	file:
block_sigalrm	lib/timeval.c	/^block_sigalrm(sigset_t *oldsigs)$/;"	f	file:
block_sigchld	lib/process.c	/^block_sigchld(sigset_t *oldsigs)$/;"	f	file:
bme_action_type	include/openflow/bme-ext.h	/^enum bme_action_type {$/;"	g
bme_instruction_header	include/openflow/bme-ext.h	/^struct bme_instruction_header {$/;"	s
bme_output_by_metadata	include/openflow/bme-ext.h	/^struct bme_output_by_metadata {$/;"	s
body	include/openflow/openflow-ext.h	/^    uint8_t body[0];            \/* Body of ofp_queue objects for op. *\/$/;"	m	struct:openflow_queue_command_header
body	include/openflow/openflow.h	/^	uint8_t body[0]; \/* Body of the reply. *\/$/;"	m	struct:ofp_multipart_reply
body	include/openflow/openflow.h	/^	uint8_t body[0]; \/* Body of the request. *\/$/;"	m	struct:ofp_multipart_request
boot_time	lib/vlog.c	/^static long long int boot_time;$/;"	v	file:
booted	secchan/status.c	/^    time_t booted;$/;"	m	struct:switch_status	file:
bootstrap_ca_cert	lib/vconn-ssl.c	/^static bool bootstrap_ca_cert;$/;"	v	file:
bound_timeout	lib/dhcp-client.c	/^    unsigned int bound_timeout;$/;"	m	struct:dhclient	file:
bpdu_type	lib/stp.c	/^    uint8_t bpdu_type;          \/* One of STP_TYPE_*. *\/$/;"	m	struct:stp_bpdu_header	file:
br_bad_stat	lib/ofpstat.h	/^		uint64_t br_bad_stat;$/;"	m	struct:ofpstat::__anon3
br_bad_type	lib/ofpstat.h	/^		uint64_t br_bad_type;$/;"	m	struct:ofpstat::__anon3
br_bad_vendor	lib/ofpstat.h	/^		uint64_t br_bad_vendor;$/;"	m	struct:ofpstat::__anon3
br_bad_version	lib/ofpstat.h	/^		uint64_t br_bad_version;$/;"	m	struct:ofpstat::__anon3
br_eperm	lib/ofpstat.h	/^		uint64_t br_eperm;$/;"	m	struct:ofpstat::__anon3
bridge_forward_delay	lib/stp.c	/^    int bridge_forward_delay;       \/* 8.5.3.10: forward_delay as root. *\/$/;"	m	struct:stp	file:
bridge_hello_time	lib/stp.c	/^    int bridge_hello_time;          \/* 8.5.3.9: hello_time as root. *\/$/;"	m	struct:stp	file:
bridge_id	lib/stp.c	/^    stp_identifier bridge_id;       \/* 8.5.3.7: This bridge. *\/$/;"	m	struct:stp	file:
bridge_id	lib/stp.c	/^    uint64_t bridge_id;            \/* 8.5.1.3: ID of transmitting bridge. *\/$/;"	m	struct:stp_config_bpdu	file:
bridge_max_age	lib/stp.c	/^    int bridge_max_age;             \/* 8.5.3.8: max_age when we're root. *\/$/;"	m	struct:stp	file:
bring_netdev_up_or_down	secchan/port-watcher.c	/^bring_netdev_up_or_down(const char *name, bool down)$/;"	f	file:
bucket_is_alive	udatapath/group_entry.c	/^bucket_is_alive(struct ofl_bucket *bucket, struct datapath *dp) {$/;"	f	file:
bucket_stats	include/openflow/openflow.h	/^	struct ofp_bucket_counter bucket_stats[0];$/;"	m	struct:ofp_group_stats	typeref:struct:ofp_group_stats::ofp_bucket_counter
buckets	include/openflow/openflow.h	/^	struct ofp_bucket buckets[0]; \/* The length of the bucket array is inferred$/;"	m	struct:ofp_group_mod	typeref:struct:ofp_group_mod::ofp_bucket
buckets	include/openflow/openflow.h	/^	struct ofp_bucket buckets[0];$/;"	m	struct:ofp_group_desc_stats	typeref:struct:ofp_group_desc_stats::ofp_bucket
buckets	lib/hmap.h	/^    struct hmap_node **buckets;$/;"	m	struct:hmap	typeref:struct:hmap::hmap_node
buckets	oflib/ofl-messages.h	/^    struct ofl_bucket          **buckets;   \/* The bucket length is inferred from the$/;"	m	struct:ofl_msg_group_mod	typeref:struct:ofl_msg_group_mod::ofl_bucket
buckets	oflib/ofl-structs.h	/^    struct ofl_bucket **buckets;$/;"	m	struct:ofl_group_desc_stats	typeref:struct:ofl_group_desc_stats::ofl_bucket
buckets_num	oflib/ofl-messages.h	/^    size_t                       buckets_num;$/;"	m	struct:ofl_msg_group_mod
buckets_num	oflib/ofl-structs.h	/^    size_t              buckets_num;$/;"	m	struct:ofl_group_desc_stats
buckets_num	udatapath/group_table.h	/^    size_t            buckets_num;$/;"	m	struct:group_table
buffer	udatapath/dp_ports.h	/^    struct ofpbuf *buffer;$/;"	m	struct:hw_pkt_q_entry	typeref:struct:hw_pkt_q_entry::ofpbuf
buffer	udatapath/packet.h	/^    struct ofpbuf      *buffer;    \/* buffer containing the packet *\/$/;"	m	struct:packet	typeref:struct:packet::ofpbuf
buffer_id	include/openflow/openflow.h	/^	uint32_t buffer_id;                  \/* ID assigned by datapath (OFP_NO_BUFFER$/;"	m	struct:ofp_packet_out
buffer_id	include/openflow/openflow.h	/^	uint32_t buffer_id;     \/* Buffered packet to apply to, or$/;"	m	struct:ofp_flow_mod
buffer_id	include/openflow/openflow.h	/^	uint32_t buffer_id;     \/* ID assigned by datapath. *\/$/;"	m	struct:ofp_packet_in
buffer_id	oflib/ofl-messages.h	/^    uint32_t                        buffer_id;    \/* Buffered packet to apply to (or -1).$/;"	m	struct:ofl_msg_flow_mod
buffer_id	oflib/ofl-messages.h	/^    uint32_t                    buffer_id;   \/* ID assigned by datapath. *\/$/;"	m	struct:ofl_msg_packet_in
buffer_id	oflib/ofl-messages.h	/^    uint32_t                   buffer_id;   \/* ID assigned by datapath$/;"	m	struct:ofl_msg_packet_out
buffer_id	udatapath/packet.h	/^    uint32_t            buffer_id; \/* if packet is stored in buffer, buffer_id;$/;"	m	struct:packet
buffer_idx	udatapath/dp_buffers.c	/^    size_t                 buffer_idx;$/;"	m	struct:dp_buffers	file:
buffer_names	utilities/dpctl.h	/^static struct names32 buffer_names[] = {$/;"	v	typeref:struct:names32
buffers	udatapath/datapath.h	/^    struct dp_buffers *buffers;$/;"	m	struct:datapath	typeref:struct:datapath::dp_buffers
buffers	udatapath/dp_buffers.c	/^    struct packet_buffer   buffers[N_PKT_BUFFERS];$/;"	m	struct:dp_buffers	typeref:struct:dp_buffers::packet_buffer	file:
buffers_num	udatapath/dp_buffers.c	/^    size_t                 buffers_num;$/;"	m	struct:dp_buffers	file:
build_alias	Makefile	/^build_alias = $/;"	m
builddir	Makefile	/^builddir = .$/;"	m
burst	lib/vlog.h	/^    unsigned int burst;         \/* Max cumulative tokens credit. *\/$/;"	m	struct:vlog_rate_limit
burst_limit	secchan/secchan.h	/^    int burst_limit;          \/* Maximum number token bucket size. *\/$/;"	m	struct:settings
burst_size	include/openflow/openflow.h	/^    uint32_t burst_size; \/* Size of bursts. *\/$/;"	m	struct:ofp_meter_band_drop
burst_size	include/openflow/openflow.h	/^    uint32_t burst_size; \/* Size of bursts. *\/$/;"	m	struct:ofp_meter_band_dscp_remark
burst_size	include/openflow/openflow.h	/^    uint32_t burst_size; \/* Size of bursts. *\/$/;"	m	struct:ofp_meter_band_experimenter
burst_size	include/openflow/openflow.h	/^    uint32_t burst_size; \/* Size of bursts. *\/$/;"	m	struct:ofp_meter_band_header
burst_size	oflib/ofl-structs.h	/^    uint32_t burst_size; \/* Size of bursts. *\/$/;"	m	struct:ofl_meter_band_drop
burst_size	oflib/ofl-structs.h	/^    uint32_t burst_size; \/* Size of bursts. *\/$/;"	m	struct:ofl_meter_band_dscp_remark
burst_size	oflib/ofl-structs.h	/^    uint32_t burst_size; \/* Size of bursts. *\/$/;"	m	struct:ofl_meter_band_experimenter
burst_size	oflib/ofl-structs.h	/^    uint32_t burst_size; \/* Size of bursts. *\/$/;"	m	struct:ofl_meter_band_header
byte_band_count	include/openflow/openflow.h	/^    uint64_t byte_band_count; \/* Number of bytes in band. *\/$/;"	m	struct:ofp_meter_band_stats
byte_band_count	oflib/ofl-structs.h	/^    uint64_t byte_band_count;  \/* Number of bytes in band. *\/$/;"	m	struct:ofl_meter_band_stats
byte_count	include/openflow/openflow.h	/^	uint64_t byte_count;    \/* Number of bytes in flow. *\/$/;"	m	struct:ofp_flow_stats
byte_count	include/openflow/openflow.h	/^	uint64_t byte_count;   \/* Number of bytes in flows. *\/$/;"	m	struct:ofp_aggregate_stats_reply
byte_count	include/openflow/openflow.h	/^	uint64_t byte_count;   \/* Number of bytes processed by bucket. *\/$/;"	m	struct:ofp_bucket_counter
byte_count	include/openflow/openflow.h	/^	uint64_t byte_count;   \/* Number of bytes processed by group. *\/$/;"	m	struct:ofp_group_stats
byte_count	include/openflow/openflow.h	/^	uint64_t byte_count;$/;"	m	struct:ofp_flow_removed
byte_count	oflib/ofl-messages.h	/^    uint64_t   byte_count;   \/* Number of bytes in flows. *\/$/;"	m	struct:ofl_msg_multipart_reply_aggregate
byte_count	oflib/ofl-structs.h	/^    uint64_t                        byte_count;    \/* Number of bytes in flow. *\/$/;"	m	struct:ofl_flow_stats
byte_count	oflib/ofl-structs.h	/^    uint64_t   byte_count;   \/* Number of bytes processed by bucket. *\/$/;"	m	struct:ofl_bucket_counter
byte_count	oflib/ofl-structs.h	/^    uint64_t   byte_count;$/;"	m	struct:ofl_group_stats
byte_in_count	include/openflow/openflow.h	/^    uint64_t byte_in_count;   \/* Number of bytes in input. *\/$/;"	m	struct:ofp_meter_stats
byte_in_count	oflib/ofl-structs.h	/^    uint64_t byte_in_count;   \/* Number of bytes in input. *\/$/;"	m	struct:ofl_meter_stats
byte_order	lib/byte-order.h	/^enum byte_order{$/;"	g
c_eth_dst	lib/packets.h	/^    uint8_t c_eth_dst[ETH_ADDR_LEN]; \/* Customer Destination Address *\/$/;"	m	struct:pbb_header
c_eth_src	lib/packets.h	/^    uint8_t c_eth_src[ETH_ADDR_LEN]; \/* Customer Source Address *\/$/;"	m	struct:pbb_header
ca_cert_file	lib/vconn-ssl.c	/^static char *ca_cert_file;$/;"	v	file:
calc_mask	lib/hmap.c	/^calc_mask(size_t capacity)$/;"	f	file:
calc_t1	lib/dhcp-client.c	/^calc_t1(unsigned int lease, unsigned int t2)$/;"	f	file:
calc_t2	lib/dhcp-client.c	/^calc_t2(unsigned int lease)$/;"	f	file:
call_hooks	lib/fatal-signal.c	/^call_hooks(int sig_nr)$/;"	f	file:
call_local_packet_cbs	secchan/secchan.c	/^call_local_packet_cbs(struct secchan *secchan, struct relay *r)$/;"	f	file:
call_local_port_changed_callbacks	secchan/port-watcher.c	/^call_local_port_changed_callbacks(struct port_watcher *pw)$/;"	f	file:
call_port_changed_callbacks	secchan/port-watcher.c	/^call_port_changed_callbacks(struct port_watcher *pw, int port_no,$/;"	f	file:
call_remote_packet_cbs	secchan/secchan.c	/^call_remote_packet_cbs(struct secchan *secchan, struct relay *r)$/;"	f	file:
call_sigprocmask	lib/fatal-signal.c	/^call_sigprocmask(int how, sigset_t* new_set, sigset_t* old_set)$/;"	f	file:
capabilities	include/openflow/openflow.h	/^	uint32_t capabilities;    \/* Bitmap of support "ofp_capabilities". *\/$/;"	m	struct:ofp_switch_features
capabilities	include/openflow/openflow.h	/^	uint32_t capabilities;  \/* Bitmap of OFPGFC_* capability supported. *\/$/;"	m	struct:ofp_group_features_stats
capabilities	include/openflow/openflow.h	/^    uint32_t capabilities; \/* Bitmaps of "ofp_meter_flags". *\/$/;"	m	struct:ofp_meter_features
capabilities	oflib/ofl-messages.h	/^    uint32_t          capabilities; \/* Bitmap of support ofp_capabilities. *\/$/;"	m	struct:ofl_msg_features_reply
capabilities	oflib/ofl-messages.h	/^    uint32_t capabilities;$/;"	m	struct:ofl_msg_multipart_reply_group_features
capabilities	oflib/ofl-structs.h	/^    uint32_t capabilities; \/* Bitmaps of "ofp_meter_flags". *\/$/;"	m	struct:ofl_meter_features
caplen	nbee_link/nbee_link.h	/^	uint32_t caplen;	\/* length of portion present *\/$/;"	m	struct:pcap_pkthdr
caps	include/openflow/of_hw_api.h	/^    of_hw_driver_caps_t caps;$/;"	m	struct:of_hw_driver
categories	secchan/status.c	/^    struct switch_status_category *categories;$/;"	m	struct:switch_status	typeref:struct:switch_status::switch_status_category	file:
category	secchan/status.c	/^    struct switch_status_category *category;$/;"	m	struct:status_reply	typeref:struct:status_reply::switch_status_category	file:
cb	secchan/status.c	/^    void (*cb)(struct status_reply *, void *aux);$/;"	m	struct:switch_status_category	file:
cb_aux	udatapath/datapath.h	/^    void *cb_aux;$/;"	m	struct:remote
cb_done	udatapath/datapath.h	/^    void (*cb_done)(void *aux);$/;"	m	struct:remote
cb_dump	udatapath/datapath.h	/^    int (*cb_dump)(struct datapath *, void *aux);$/;"	m	struct:remote
cbs	secchan/port-watcher.c	/^    struct port_watcher_cb cbs[2];$/;"	m	struct:port_watcher	typeref:struct:port_watcher::port_watcher_cb	file:
chaddr	lib/dhcp.h	/^    uint8_t chaddr[16];         \/* Client hardware address. *\/$/;"	m	struct:dhcp_header
chaddr	lib/dhcp.h	/^    uint8_t chaddr[ETH_ADDR_LEN]; \/* Client hardware address. *\/$/;"	m	struct:dhcp_msg
change_detection_enabled	lib/stp.c	/^    bool change_detection_enabled;  \/* 8.5.5.10: Detect topology changes? *\/$/;"	m	struct:stp_port	file:
changed	lib/dhcp-client.c	/^    bool changed;$/;"	m	struct:dhclient	file:
changed	lib/netdev.c	/^    struct svec changed;$/;"	m	struct:netdev_monitor	typeref:struct:netdev_monitor::svec	file:
changed_flags	lib/netdev.c	/^    int changed_flags;          \/* Flags that we changed. *\/$/;"	m	struct:netdev	file:
check_action	lib/ofp.c	/^check_action(const union ofp_action *a, unsigned int len, int max_ports,$/;"	f	file:
check_action_exact_len	lib/ofp.c	/^check_action_exact_len(const union ofp_action *a, unsigned int len,$/;"	f	file:
check_connection_completion	lib/socket-util.c	/^check_connection_completion(int fd) $/;"	f
check_int_var	debian/openflow-switch.init	/^check_int_var() {$/;"	f
check_message_type	lib/ofp.c	/^check_message_type(uint8_t got_type, uint8_t want_type)$/;"	f	file:
check_new_option	debian/openflow-switch.init	/^check_new_option() {$/;"	f
check_nicira_action	lib/ofp.c	/^check_nicira_action(const union ofp_action *a, unsigned int len)$/;"	f	file:
check_ofp_instruction_array	lib/ofp.c	/^check_ofp_instruction_array(const struct ofp_instruction *inst, uint8_t type,$/;"	f
check_ofp_message	lib/ofp.c	/^check_ofp_message(const struct ofp_header *msg, uint8_t type, size_t size)$/;"	f
check_ofp_message_array	lib/ofp.c	/^check_ofp_message_array(const struct ofp_header *msg, uint8_t type,$/;"	f
check_ofp_packet_out	lib/ofp.c	/^check_ofp_packet_out(const struct ofp_header *oh, struct ofpbuf *data,$/;"	f
check_op	debian/openflow-switch.init	/^check_op() {$/;"	f
check_output_port	lib/ofp.c	/^check_output_port(uint32_t port, int max_ports, bool table_allowed)$/;"	f	file:
check_oxm_dup	oflib/oxm-match.c	/^check_oxm_dup(struct ofl_match *match,const struct oxm_field *om){$/;"	f	file:
check_present_prereq	oflib/oxm-match.c	/^check_present_prereq(const struct ofl_match *match, uint32_t header){$/;"	f	file:
check_queue	lib/queue.c	/^check_queue(struct ofp_queue *q UNUSED)$/;"	f	file:
check_setqueue_action	lib/ofp.c	/^check_setqueue_action(const union ofp_action *a, unsigned int len)$/;"	f	file:
check_type	utilities/ofp-pki.in	/^check_type() {$/;"	f
check_vconn_classes	lib/vconn.c	/^check_vconn_classes(void)$/;"	f	file:
choose_band	udatapath/meter_entry.c	/^choose_band(struct meter_entry *entry, struct packet *pkt)$/;"	f	file:
ciaddr	lib/dhcp.h	/^    uint32_t ciaddr;            \/* Client IP, if it has a lease for one. *\/$/;"	m	struct:dhcp_header
ciaddr	lib/dhcp.h	/^    uint32_t ciaddr;            \/* Client IP, if it has a lease for one. *\/$/;"	m	struct:dhcp_msg
clamp	lib/dhcp-client.c	/^clamp(unsigned int x, unsigned int min, unsigned int max)$/;"	f	file:
clamp	lib/stp.c	/^clamp(int x, int min, int max)$/;"	f	file:
class	secchan/secchan.c	/^    const struct hook_class *class;$/;"	m	struct:hook	typeref:struct:hook::hook_class	file:
class_id	udatapath/dp_ports.h	/^    uint16_t class_id; \/* internal mapping from OF queue_id to tc class_id *\/$/;"	m	struct:sw_queue
close	lib/vconn-provider.h	/^    void (*close)(struct pvconn *pvconn);$/;"	m	struct:pvconn_class
close	lib/vconn-provider.h	/^    void (*close)(struct vconn *vconn);$/;"	m	struct:vconn_class
closing_cb	secchan/secchan.h	/^    void (*closing_cb)(struct relay *, void *aux);$/;"	m	struct:hook_class
cmd	lib/netlink-protocol.h	/^    uint8_t cmd;$/;"	m	struct:genlmsghdr
cmp_mpls_seq_numbers	udatapath/dp_exp_bme.c	/^cmp_mpls_seq_numbers(uint32_t a, uint32_t b)$/;"	f	file:
code	include/openflow/openflow.h	/^	uint16_t code;$/;"	m	struct:ofp_error_msg
code	oflib/ofl-messages.h	/^    uint16_t              code;$/;"	m	struct:ofl_msg_error
code	utilities/dpctl.h	/^    uint16_t   code;$/;"	m	struct:names16
code	utilities/dpctl.h	/^    uint32_t   code;$/;"	m	struct:names32
code	utilities/dpctl.h	/^    uint8_t   code;$/;"	m	struct:names8
collisions	include/openflow/openflow.h	/^	uint64_t collisions;   \/* Number of collisions. *\/$/;"	m	struct:ofp_port_stats
collisions	oflib/ofl-structs.h	/^    uint64_t   collisions;   \/* Number of collisions. *\/$/;"	m	struct:ofl_port_stats
command	include/openflow/openflow.h	/^	uint16_t command;             \/* One of OFPGC_*. *\/$/;"	m	struct:ofp_group_mod
command	include/openflow/openflow.h	/^	uint8_t command;        \/* One of OFPFC_*. *\/$/;"	m	struct:ofp_flow_mod
command	include/openflow/openflow.h	/^    uint16_t command;  \/* One of OFPMC_*. *\/$/;"	m	struct:ofp_meter_mod
command	oflib/ofl-messages.h	/^    enum ofp_flow_mod_command       command;      \/* One of OFPFC_*. *\/$/;"	m	struct:ofl_msg_flow_mod	typeref:enum:ofl_msg_flow_mod::ofp_flow_mod_command
command	oflib/ofl-messages.h	/^    enum ofp_group_mod_command   command;     \/* One of OFPGC_*. *\/$/;"	m	struct:ofl_msg_group_mod	typeref:enum:ofl_msg_group_mod::ofp_group_mod_command
command	oflib/ofl-messages.h	/^    uint16_t command;  \/* One of OFPMC_*. *\/$/;"	m	struct:ofl_msg_meter_mod
command	utilities/dpctl.c	/^struct command {$/;"	s	file:
commandsdir	Makefile	/^commandsdir = ${pkgdatadir}\/commands$/;"	m
commandsdir	secchan/commands/automake.mk	/^commandsdir = ${pkgdatadir}\/commands$/;"	m
compare_strings	lib/svec.c	/^compare_strings(const void *a_, const void *b_)$/;"	f	file:
cond_error	utilities/ofp-kill.c	/^cond_error(int err_no, const char *format, ...)$/;"	f	file:
conf	udatapath/dp_ports.h	/^    struct ofl_port *conf;$/;"	m	struct:sw_port	typeref:struct:sw_port::ofl_port
config	include/openflow/openflow.h	/^	uint32_t config;                  \/* Bitmap of OFPPC_* flags. *\/$/;"	m	struct:ofp_port
config	include/openflow/openflow.h	/^	uint32_t config;               \/* Bitmap of OFPPC_* flags. *\/$/;"	m	struct:ofp_port_mod
config	include/openflow/openflow.h	/^	uint32_t config;  \/* Bitmap of OFPTC_* flags *\/$/;"	m	struct:ofp_table_mod
config	include/openflow/openflow.h	/^    uint32_t config;         \/* Bitmap of OFPTC_* values *\/$/;"	m	struct:ofp_table_features
config	oflib/ofl-messages.h	/^    struct ofl_async_config *config; $/;"	m	struct:ofl_msg_async_config	typeref:struct:ofl_msg_async_config::ofl_async_config
config	oflib/ofl-messages.h	/^    struct ofl_config  *config;$/;"	m	struct:ofl_msg_get_config_reply	typeref:struct:ofl_msg_get_config_reply::ofl_config
config	oflib/ofl-messages.h	/^    struct ofl_config  *config;$/;"	m	struct:ofl_msg_set_config	typeref:struct:ofl_msg_set_config::ofl_config
config	oflib/ofl-messages.h	/^    uint32_t   config;    \/* Bitmap of OFPPC_* flags. *\/$/;"	m	struct:ofl_msg_port_mod
config	oflib/ofl-messages.h	/^    uint32_t   config;   \/* Bitmap of OFPTC_* flags *\/$/;"	m	struct:ofl_msg_table_mod
config	oflib/ofl-structs.h	/^    uint32_t   config;        \/* Bitmap of OFPPC_* flags. *\/$/;"	m	struct:ofl_port
config	oflib/ofl-structs.h	/^    uint32_t config;         \/* Bitmap of OFPTC_* values *\/$/;"	m	struct:ofl_table_features
config	udatapath/datapath.h	/^    struct ofl_async_config config;  \/* Asynchronous messages configuration, $/;"	m	struct:remote	typeref:struct:remote::ofl_async_config
config	udatapath/datapath.h	/^    struct ofl_config config; \/* Configuration, set from controller. *\/$/;"	m	struct:datapath	typeref:struct:datapath::ofl_config
config	udatapath/meter_entry.h	/^	struct ofl_meter_config		*config;		\/* Meter configuration *\/$/;"	m	struct:meter_entry	typeref:struct:meter_entry::ofl_meter_config
config_pending	lib/stp.c	/^    bool config_pending;            \/* 8.5.5.9: Send BPDU when hold expires? *\/$/;"	m	struct:stp_port	file:
config_status_cb	secchan/status.c	/^config_status_cb(struct status_reply *sr, void *s_)$/;"	f	file:
configure_ssl	debian/openflow-switch.init	/^configure_ssl() {$/;"	f
conn_id	lib/ofpbuf.h	/^    uint8_t conn_id;            \/* Connection ID. Application-defined value to $/;"	m	struct:ofpbuf
conn_id	udatapath/datapath.h	/^    uint8_t conn_id;            \/* The connection that sent the message *\/$/;"	m	struct:sender
connect	lib/vconn-provider.h	/^    int (*connect)(struct vconn *vconn);$/;"	m	struct:vconn_class
connect_error	lib/vconn-ssl.c	/^    int connect_error;$/;"	m	struct:ssl_vconn	file:
connect_path	lib/vlog-socket.c	/^    char *connect_path;$/;"	m	struct:vlog_client	file:
consume_tokens	udatapath/meter_entry.c	/^consume_tokens(struct ofl_meter_band_stats *band, uint16_t meter_flag, struct packet *pkt){$/;"	f	file:
control_eh_fields	nbee_link/nbee_link.h	/^struct control_eh_fields {$/;"	s
controller	secchan/in-band.c	/^    struct rconn *controller;$/;"	m	struct:in_band_data	typeref:struct:in_band_data::rconn	file:
controller_names	secchan/secchan.h	/^    const char *controller_names[MAX_CONTROLLERS]; \/* Controllers (if not discovery mode). *\/$/;"	m	struct:settings
cookie	include/openflow/openflow.h	/^	uint64_t cookie;        \/* Opaque controller-issued identifier. *\/$/;"	m	struct:ofp_flow_mod
cookie	include/openflow/openflow.h	/^	uint64_t cookie;        \/* Opaque controller-issued identifier. *\/$/;"	m	struct:ofp_flow_removed
cookie	include/openflow/openflow.h	/^	uint64_t cookie;        \/* Opaque controller-issued identifier. *\/$/;"	m	struct:ofp_flow_stats
cookie	include/openflow/openflow.h	/^	uint64_t cookie;        \/* Require matching entries to contain this$/;"	m	struct:ofp_aggregate_stats_request
cookie	include/openflow/openflow.h	/^	uint64_t cookie;        \/* Require matching entries to contain this$/;"	m	struct:ofp_flow_stats_request
cookie	include/openflow/openflow.h	/^    uint64_t cookie;        \/* Cookie of the flow entry that was looked up. *\/$/;"	m	struct:ofp_packet_in
cookie	oflib/ofl-messages.h	/^    uint64_t                        cookie;      \/* Opaque controller-issued identifier. *\/$/;"	m	struct:ofl_msg_flow_mod
cookie	oflib/ofl-messages.h	/^    uint64_t                    cookie;$/;"	m	struct:ofl_msg_packet_in
cookie	oflib/ofl-messages.h	/^    uint64_t                 cookie;      \/* Require matching entries to contain$/;"	m	struct:ofl_msg_multipart_request_flow
cookie	oflib/ofl-structs.h	/^    uint64_t                        cookie;        \/* Opaque controller-issued identifier. *\/$/;"	m	struct:ofl_flow_stats
cookie	udatapath/dp_buffers.c	/^    uint32_t       cookie;$/;"	m	struct:packet_buffer	file:
cookie_mask	include/openflow/openflow.h	/^	uint64_t cookie_mask;   \/* Mask used to restrict the cookie bits that$/;"	m	struct:ofp_aggregate_stats_request
cookie_mask	include/openflow/openflow.h	/^	uint64_t cookie_mask;   \/* Mask used to restrict the cookie bits that$/;"	m	struct:ofp_flow_stats_request
cookie_mask	include/openflow/openflow.h	/^	uint64_t cookie_mask;   \/* Mask used to restrict the cookie bits$/;"	m	struct:ofp_flow_mod
cookie_mask	oflib/ofl-messages.h	/^    uint64_t                        cookie_mask; \/* Mask used to restrict the cookie bits$/;"	m	struct:ofl_msg_flow_mod
cookie_mask	oflib/ofl-messages.h	/^    uint64_t                 cookie_mask; \/* Mask used to restrict the cookie bits$/;"	m	struct:ofl_msg_multipart_request_flow
copy_data	lib/dhcp.c	/^copy_data(struct dhcp_msg *msg)$/;"	f	file:
copy_to_monitor	lib/rconn.c	/^copy_to_monitor(struct rconn *rc, const struct ofpbuf *b)$/;"	f	file:
copy_ttl_in	udatapath/dp_actions.c	/^copy_ttl_in(struct packet *pkt, struct ofl_action_header *act UNUSED) {$/;"	f	file:
copy_ttl_out	udatapath/dp_actions.c	/^copy_ttl_out(struct packet *pkt, struct ofl_action_header *act UNUSED) {$/;"	f	file:
count_DOEH	nbee_link/nbee_link.h	/^       uint8_t count_DOEH;$/;"	m	struct:control_eh_fields
counters	oflib/ofl-structs.h	/^    struct ofl_bucket_counter **counters;$/;"	m	struct:ofl_group_stats	typeref:struct:ofl_group_stats::ofl_bucket_counter
counters_num	oflib/ofl-structs.h	/^    size_t                      counters_num;$/;"	m	struct:ofl_group_stats
crc32	udatapath/crc32.h	/^struct crc32 {$/;"	s
crc32_calculate	udatapath/crc32.c	/^crc32_calculate(const struct crc32 *crc, const void *data_, size_t n_bytes)$/;"	f
crc32_init	udatapath/crc32.c	/^crc32_init(struct crc32 *crc, unsigned int polynomial)$/;"	f
created	udatapath/dp_ports.h	/^    uint64_t created;$/;"	m	struct:sw_port
created	udatapath/dp_ports.h	/^    uint64_t created;$/;"	m	struct:sw_queue
created	udatapath/flow_entry.h	/^    uint64_t                 created;  \/* time the entry was created at. *\/$/;"	m	struct:flow_entry
created	udatapath/group_entry.h	/^    uint64_t created;$/;"	m	struct:group_entry
created	udatapath/meter_entry.h	/^    uint64_t                    created;  \/* time the entry was created at. *\/$/;"	m	struct:meter_entry
creation_time	lib/rconn.c	/^    time_t creation_time;$/;"	m	struct:rconn	file:
csum	lib/csum.c	/^csum(const void *data, size_t n)$/;"	f
csum_add16	lib/csum.c	/^csum_add16(uint32_t partial, uint16_t new)$/;"	f
csum_add32	lib/csum.c	/^csum_add32(uint32_t partial, uint32_t new)$/;"	f
csum_continue	lib/csum.c	/^csum_continue(uint32_t partial, const void *data_, size_t n)$/;"	f
csum_finish	lib/csum.c	/^csum_finish(uint32_t partial)$/;"	f
ctx	lib/vconn-ssl.c	/^static SSL_CTX *ctx;$/;"	v	file:
curr	include/openflow/openflow.h	/^	uint32_t curr;                    \/* Current features. *\/$/;"	m	struct:ofp_port
curr	lib/netdev.c	/^    uint32_t curr;              \/* Current features. *\/$/;"	m	struct:netdev	file:
curr	oflib/ofl-structs.h	/^    uint32_t   curr;          \/* Current features. *\/$/;"	m	struct:ofl_port
curr_bucket	udatapath/group_entry.c	/^    size_t   curr_bucket; \/* bucket executed last time. *\/$/;"	m	struct:group_entry_wrr_data	file:
curr_speed	include/openflow/openflow.h	/^	uint32_t curr_speed;              \/* Current port bitrate in kbps. *\/$/;"	m	struct:ofp_port
curr_speed	oflib/ofl-structs.h	/^    uint32_t   curr_speed;    \/* Current port bitrate in kbps. *\/$/;"	m	struct:ofl_port
curr_weight	udatapath/group_entry.c	/^    uint16_t curr_weight; \/* current weight in w.r.r. algorithm. *\/$/;"	m	struct:group_entry_wrr_data	file:
daemon_usage	lib/daemon.c	/^daemon_usage(void)$/;"	f
daemonize	lib/daemon.c	/^daemonize(void)$/;"	f
data	include/openflow/of_hw_api.h	/^    unsigned char *data;   \/* Pointer to packet data *\/$/;"	m	struct:of_packet_s
data	include/openflow/openflow.h	/^	uint8_t data[0];                          \/* Experimenter defined data. *\/$/;"	m	struct:ofp_queue_prop_experimenter
data	include/openflow/openflow.h	/^	uint8_t data[0];       \/* Variable-length data. Interpreted based$/;"	m	struct:ofp_error_experimenter_msg
data	include/openflow/openflow.h	/^	uint8_t data[0]; \/* Variable-length data. Interpreted based$/;"	m	struct:ofp_error_msg
data	lib/dhcp.h	/^    uint8_t *data;$/;"	m	struct:dhcp_msg
data	lib/dhcp.h	/^    void *data;                 \/* Data. *\/$/;"	m	struct:dhcp_option
data	lib/ofpbuf.h	/^    void *data;                 \/* First byte actually in use. *\/$/;"	m	struct:ofpbuf
data	lib/shash.h	/^    void *data;$/;"	m	struct:shash_node
data	oflib/ofl-messages.h	/^    uint8_t                   *data;        \/* Packet data. (Only meaningful$/;"	m	struct:ofl_msg_packet_out
data	oflib/ofl-messages.h	/^    uint8_t   *data;          \/* textual errors (OFPET_HELLO_FAILED) or original$/;"	m	struct:ofl_msg_error
data	oflib/ofl-messages.h	/^    uint8_t   *data;$/;"	m	struct:ofl_msg_echo
data	oflib/ofl-messages.h	/^    uint8_t   *data;$/;"	m	struct:ofl_msg_packet_in
data	oflib/ofl-messages.h	/^    uint8_t  *data;$/;"	m	struct:ofl_msg_multipart_reply_experimenter
data	oflib/ofl-structs.h	/^    uint8_t *data; \/* Experimenter defined data. *\/$/;"	m	struct:ofl_queue_prop_experimenter
data	udatapath/group_entry.h	/^    void                        *data;     \/* private data for group implementation. *\/$/;"	m	struct:group_entry
data_allocated	lib/dhcp.h	/^    size_t data_used, data_allocated;$/;"	m	struct:dhcp_msg
data_length	oflib/ofl-messages.h	/^    size_t                     data_length;$/;"	m	struct:ofl_msg_packet_out
data_length	oflib/ofl-messages.h	/^    size_t     data_length;$/;"	m	struct:ofl_msg_echo
data_length	oflib/ofl-messages.h	/^    size_t     data_length;$/;"	m	struct:ofl_msg_error
data_length	oflib/ofl-messages.h	/^    size_t     data_length;$/;"	m	struct:ofl_msg_packet_in
data_length	oflib/ofl-messages.h	/^    size_t    data_length;$/;"	m	struct:ofl_msg_multipart_reply_experimenter
data_used	lib/dhcp.h	/^    size_t data_used, data_allocated;$/;"	m	struct:dhcp_msg
datadir	Makefile	/^datadir = ${datarootdir}$/;"	m
datapath	udatapath/datapath.h	/^struct datapath {$/;"	s
datapath	utilities/dpctl_parser.py	/^datapath = sys.argv[1]$/;"	v
datapath_id	include/openflow/openflow.h	/^	uint64_t datapath_id;     \/* Datapath unique ID. The lower 48-bits are for$/;"	m	struct:ofp_switch_features
datapath_id	oflib/ofl-messages.h	/^    uint64_t          datapath_id;  \/* Datapath unique ID. The lower 48-bits$/;"	m	struct:ofl_msg_features_reply
datapath_id	secchan/port-watcher.c	/^    uint64_t datapath_id;$/;"	m	struct:port_watcher	file:
datarootdir	Makefile	/^datarootdir = ${prefix}\/share$/;"	m
db_fget	debian/ofp-switch-setup	/^sub db_fget {$/;"	s
db_fset	debian/ofp-switch-setup	/^sub db_fset {$/;"	s
db_get	debian/ofp-switch-setup	/^sub db_get {$/;"	s
db_go	debian/ofp-switch-setup	/^sub db_go {$/;"	s
db_input	debian/ofp-switch-setup	/^sub db_input {$/;"	s
db_set	debian/ofp-switch-setup	/^sub db_set {$/;"	s
db_subst	debian/ofp-switch-setup	/^sub db_subst {$/;"	s
deadline	lib/timeval.c	/^static time_t deadline = TIME_MIN;$/;"	v	file:
deadline	udatapath/dp_actions.c	/^    long long int deadline;  \/* in ms *\/$/;"	m	struct:pending_pkt	file:
deadline	udatapath/dp_exp_bme.c	/^    long long int deadline;  \/* in ms *\/$/;"	m	struct:pending_pkt	file:
dec_mpls_ttl	udatapath/dp_actions.c	/^dec_mpls_ttl(struct packet *pkt, struct ofl_action_header *act UNUSED) {$/;"	f	file:
dec_new	udatapath/dp_actions.c	/^    struct list dec_new;$/;"	m	struct:pending_flows	typeref:struct:pending_flows::list	file:
dec_new	udatapath/dp_exp_bme.c	/^    struct list dec_new;$/;"	m	struct:pending_flows	typeref:struct:pending_flows::list	file:
dec_nw_ttl	udatapath/dp_actions.c	/^dec_nw_ttl(struct packet *pkt, struct ofl_action_header *act UNUSED) {$/;"	f	file:
dec_old	udatapath/dp_actions.c	/^    struct list dec_old;$/;"	m	struct:pending_flows	typeref:struct:pending_flows::list	file:
dec_old	udatapath/dp_exp_bme.c	/^    struct list dec_old;$/;"	m	struct:pending_flows	typeref:struct:pending_flows::list	file:
default_pattern	lib/vlog.c	/^    bool default_pattern;       \/* Whether current pattern is the default. *\/$/;"	m	struct:facility	file:
del_group_refs	udatapath/flow_entry.c	/^del_group_refs(struct flow_entry *entry) {$/;"	f	file:
del_meter_refs	udatapath/flow_entry.c	/^del_meter_refs(struct flow_entry *entry) {$/;"	f	file:
delay	lib/dhcp-client.c	/^    unsigned int retransmit, delay; \/* Used by send_reliably(). *\/$/;"	m	struct:dhclient	file:
delete_strict	lib/ofpstat.h	/^		uint64_t delete_strict;$/;"	m	struct:ofpstat::__anon4
depcomp	Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/build-aux\/depcomp$/;"	m
dequeue_packet	secchan/ratelimit.c	/^dequeue_packet(struct rate_limiter *rl)$/;"	f	file:
dequeue_pkt	udatapath/dp_ports.c	/^dequeue_pkt(struct datapath *dp, struct ofpbuf **buffer, of_port_t *port_no,$/;"	f	file:
desc	include/openflow/openflow.h	/^	struct ofp_port desc;$/;"	m	struct:ofp_port_status	typeref:struct:ofp_port_status::ofp_port
desc	oflib/ofl-messages.h	/^    struct ofl_port       *desc;$/;"	m	struct:ofl_msg_port_status	typeref:struct:ofl_msg_port_status::ofl_port
desc	udatapath/group_entry.h	/^    struct ofl_group_desc_stats *desc;$/;"	m	struct:group_entry	typeref:struct:group_entry::ofl_group_desc_stats
designated_bridge	lib/stp.c	/^    stp_identifier designated_bridge; \/* 8.5.5.6. *\/$/;"	m	struct:stp_port	file:
designated_cost	lib/stp.c	/^    int designated_cost;            \/* 8.5.5.5: Path cost to root on port. *\/$/;"	m	struct:stp_port	file:
designated_port	lib/stp.c	/^    int designated_port;            \/* 8.5.5.7: Port to send config msgs on. *\/$/;"	m	struct:stp_port	file:
designated_root	lib/stp.c	/^    stp_identifier designated_root; \/* 8.5.3.1: Bridge believed to be root. *\/$/;"	m	struct:stp	file:
designated_root	lib/stp.c	/^    stp_identifier designated_root; \/* 8.5.5.4. *\/$/;"	m	struct:stp_port	file:
detach	lib/daemon.c	/^static bool detach;$/;"	v	file:
dhclient	lib/dhcp-client.c	/^struct dhclient {$/;"	s	file:
dhclient_changed	lib/dhcp-client.c	/^dhclient_changed(struct dhclient *cli)$/;"	f
dhclient_configure_netdev	lib/dhcp-client.c	/^dhclient_configure_netdev(struct dhclient *cli)$/;"	f
dhclient_create	lib/dhcp-client.c	/^dhclient_create(const char *netdev_name,$/;"	f
dhclient_destroy	lib/dhcp-client.c	/^dhclient_destroy(struct dhclient *cli)$/;"	f
dhclient_force_renew	lib/dhcp-client.c	/^dhclient_force_renew(struct dhclient *cli, int deadline)$/;"	f
dhclient_get_config	lib/dhcp-client.c	/^dhclient_get_config(const struct dhclient *cli)$/;"	f
dhclient_get_ip	lib/dhcp-client.c	/^dhclient_get_ip(const struct dhclient *cli)$/;"	f
dhclient_get_lease_remaining	lib/dhcp-client.c	/^dhclient_get_lease_remaining(const struct dhclient *cli)$/;"	f
dhclient_get_netdev	lib/dhcp-client.c	/^dhclient_get_netdev(struct dhclient *cli)$/;"	f
dhclient_get_netmask	lib/dhcp-client.c	/^dhclient_get_netmask(const struct dhclient *cli)$/;"	f
dhclient_get_router	lib/dhcp-client.c	/^dhclient_get_router(const struct dhclient *cli)$/;"	f
dhclient_get_state	lib/dhcp-client.c	/^dhclient_get_state(const struct dhclient *cli)$/;"	f
dhclient_get_state_elapsed	lib/dhcp-client.c	/^dhclient_get_state_elapsed(const struct dhclient *cli)$/;"	f
dhclient_init	lib/dhcp-client.c	/^dhclient_init(struct dhclient *cli, uint32_t requested_ip)$/;"	f
dhclient_is_bound	lib/dhcp-client.c	/^dhclient_is_bound(const struct dhclient *cli)$/;"	f
dhclient_msg_init	lib/dhcp-client.c	/^dhclient_msg_init(struct dhclient *cli, enum dhcp_msg_type type,$/;"	f	file:
dhclient_release	lib/dhcp-client.c	/^dhclient_release(struct dhclient *cli)$/;"	f
dhclient_run	lib/dhcp-client.c	/^dhclient_run(struct dhclient *cli)$/;"	f
dhclient_run_BOUND	lib/dhcp-client.c	/^dhclient_run_BOUND(struct dhclient *cli)$/;"	f	file:
dhclient_run_INIT	lib/dhcp-client.c	/^dhclient_run_INIT(struct dhclient *cli)$/;"	f	file:
dhclient_run_INIT_REBOOT	lib/dhcp-client.c	/^dhclient_run_INIT_REBOOT(struct dhclient *cli)$/;"	f	file:
dhclient_run_REBINDING	lib/dhcp-client.c	/^dhclient_run_REBINDING(struct dhclient *cli)$/;"	f	file:
dhclient_run_REBOOTING	lib/dhcp-client.c	/^dhclient_run_REBOOTING(struct dhclient *cli)$/;"	f	file:
dhclient_run_RELEASED	lib/dhcp-client.c	/^dhclient_run_RELEASED(struct dhclient *cli UNUSED)$/;"	f	file:
dhclient_run_RENEWING	lib/dhcp-client.c	/^dhclient_run_RENEWING(struct dhclient *cli)$/;"	f	file:
dhclient_run_REQUESTING	lib/dhcp-client.c	/^dhclient_run_REQUESTING(struct dhclient *cli)$/;"	f	file:
dhclient_run_SELECTING	lib/dhcp-client.c	/^dhclient_run_SELECTING(struct dhclient *cli)$/;"	f	file:
dhclient_set_max_timeout	lib/dhcp-client.c	/^dhclient_set_max_timeout(struct dhclient *cli, unsigned int max_timeout)$/;"	f
dhclient_state	lib/dhcp-client.c	/^enum dhclient_state {$/;"	g	file:
dhclient_update_resolv_conf	lib/dhcp-client.c	/^dhclient_update_resolv_conf(struct dhclient *cli)$/;"	f
dhclient_wait	lib/dhcp-client.c	/^dhclient_wait(struct dhclient *cli)$/;"	f
dhcp	secchan/discovery.c	/^    struct dhclient *dhcp;$/;"	m	struct:discovery	typeref:struct:discovery::dhclient	file:
dhcp	utilities/ofp-discover.c	/^    struct dhclient *dhcp;$/;"	m	struct:iface	typeref:struct:iface::dhclient	file:
dhcp_arg_type	lib/dhcp.h	/^enum dhcp_arg_type {$/;"	g
dhcp_assemble	lib/dhcp.c	/^dhcp_assemble(const struct dhcp_msg *msg, struct ofpbuf *b)$/;"	f
dhcp_header	lib/dhcp.h	/^struct dhcp_header {$/;"	s
dhcp_msg	lib/dhcp.h	/^struct dhcp_msg {$/;"	s
dhcp_msg_copy	lib/dhcp.c	/^dhcp_msg_copy(struct dhcp_msg *dst, const struct dhcp_msg *src)$/;"	f
dhcp_msg_get	lib/dhcp.c	/^dhcp_msg_get(const struct dhcp_msg *msg, int code,$/;"	f
dhcp_msg_get_bool	lib/dhcp.c	/^dhcp_msg_get_bool(const struct dhcp_msg *msg, int code, size_t offset,$/;"	f
dhcp_msg_get_ip	lib/dhcp.c	/^dhcp_msg_get_ip(const struct dhcp_msg *msg, int code,$/;"	f
dhcp_msg_get_secs	lib/dhcp.c	/^dhcp_msg_get_secs(const struct dhcp_msg *msg, int code, size_t offset,$/;"	f
dhcp_msg_get_string	lib/dhcp.c	/^dhcp_msg_get_string(const struct dhcp_msg *msg, int code)$/;"	f
dhcp_msg_get_uint16	lib/dhcp.c	/^dhcp_msg_get_uint16(const struct dhcp_msg *msg, int code,$/;"	f
dhcp_msg_get_uint8	lib/dhcp.c	/^dhcp_msg_get_uint8(const struct dhcp_msg *msg, int code,$/;"	f
dhcp_msg_init	lib/dhcp.c	/^dhcp_msg_init(struct dhcp_msg *msg)$/;"	f
dhcp_msg_put	lib/dhcp.c	/^dhcp_msg_put(struct dhcp_msg *msg, int code,$/;"	f
dhcp_msg_put_bool	lib/dhcp.c	/^dhcp_msg_put_bool(struct dhcp_msg *msg, int code, bool b_)$/;"	f
dhcp_msg_put_ip	lib/dhcp.c	/^dhcp_msg_put_ip(struct dhcp_msg *msg, int code, uint32_t ip)$/;"	f
dhcp_msg_put_secs	lib/dhcp.c	/^dhcp_msg_put_secs(struct dhcp_msg *msg, int code, uint32_t secs_)$/;"	f
dhcp_msg_put_string	lib/dhcp.c	/^dhcp_msg_put_string(struct dhcp_msg *msg, int code, const char *string)$/;"	f
dhcp_msg_put_uint16	lib/dhcp.c	/^dhcp_msg_put_uint16(struct dhcp_msg *msg, int code, uint16_t x_)$/;"	f
dhcp_msg_put_uint16_array	lib/dhcp.c	/^dhcp_msg_put_uint16_array(struct dhcp_msg *msg, int code,$/;"	f
dhcp_msg_put_uint8	lib/dhcp.c	/^dhcp_msg_put_uint8(struct dhcp_msg *msg, int code, uint8_t x)$/;"	f
dhcp_msg_put_uint8_array	lib/dhcp.c	/^void dhcp_msg_put_uint8_array(struct dhcp_msg *msg, int code,$/;"	f
dhcp_msg_to_string	lib/dhcp.c	/^dhcp_msg_to_string(const struct dhcp_msg *msg, bool multiline, struct ds *ds)$/;"	f
dhcp_msg_type	lib/dhcp.h	/^enum dhcp_msg_type {$/;"	g
dhcp_msg_uninit	lib/dhcp.c	/^dhcp_msg_uninit(struct dhcp_msg *msg)$/;"	f
dhcp_option	lib/dhcp.h	/^struct dhcp_option {$/;"	s
dhcp_option_equals	lib/dhcp.c	/^dhcp_option_equals(const struct dhcp_option *a, const struct dhcp_option *b)$/;"	f
dhcp_option_to_string	lib/dhcp.c	/^dhcp_option_to_string(const struct dhcp_option *opt, int code, struct ds *ds)$/;"	f
dhcp_parse	lib/dhcp.c	/^dhcp_parse(struct dhcp_msg *msg, const struct ofpbuf *b_)$/;"	f
dhcp_receive	lib/dhcp-client.c	/^dhcp_receive(struct dhclient *cli, unsigned int msgs, struct dhcp_msg *msg)$/;"	f	file:
dhcp_type_name	lib/dhcp.c	/^dhcp_type_name(enum dhcp_msg_type type)$/;"	f
die_if_already_running	lib/daemon.c	/^die_if_already_running(void)$/;"	f
disabled	lib/fatal-signal.c	/^static bool disabled;$/;"	v	file:
disconnect	lib/rconn.c	/^disconnect(struct rconn *rc, int error)$/;"	f	file:
discovery	secchan/discovery.c	/^struct discovery$/;"	s	file:
discovery	secchan/secchan.h	/^    bool discovery;           \/* Discover the controller automatically? *\/$/;"	m	struct:settings
discovery_init	secchan/discovery.c	/^discovery_init(const struct settings *s, struct port_watcher *pw,$/;"	f
discovery_local_port_cb	secchan/discovery.c	/^discovery_local_port_cb(const struct ofp_port *port, void *d_)$/;"	f	file:
discovery_question_connectivity	secchan/discovery.c	/^discovery_question_connectivity(struct discovery *d)$/;"	f
discovery_run	secchan/discovery.c	/^discovery_run(struct discovery *d, char **controller_name)$/;"	f
discovery_status_cb	secchan/discovery.c	/^discovery_status_cb(struct status_reply *sr, void *d_)$/;"	f	file:
discovery_wait	secchan/discovery.c	/^discovery_wait(struct discovery *d)$/;"	f
dist_commands_SCRIPTS	Makefile	/^dist_commands_SCRIPTS = \\$/;"	m
dist_commands_SCRIPTS	secchan/commands/automake.mk	/^dist_commands_SCRIPTS = \\$/;"	m
dist_man_MANS	Makefile	/^dist_man_MANS = $/;"	m
dist_pkgdata_SCRIPTS	Makefile	/^dist_pkgdata_SCRIPTS = $/;"	m
dist_sbin_SCRIPTS	Makefile	/^dist_sbin_SCRIPTS = $/;"	m
distcleancheck_listfiles	Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distdir	Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distuninstallcheck_listfiles	Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
dl_dst	lib/flow.h	/^    uint8_t dl_dst[6];          \/* Ethernet destination address. *\/$/;"	m	struct:flow
dl_dst	oflib/ofl-structs.h	/^    uint8_t    dl_dst[OFP_ETH_ALEN]; \/* Ethernet destination address. *\/$/;"	m	struct:ofl_match
dl_dst	oflib/ofl-structs.h	/^    uint8_t    dl_dst[OFP_ETH_ALEN]; \/* Ethernet destination address. *\/$/;"	m	struct:ofl_match_standard
dl_dst_mask	oflib/ofl-structs.h	/^    uint8_t    dl_dst_mask[OFP_ETH_ALEN]; \/* Ethernet dest. address mask. *\/$/;"	m	struct:ofl_match
dl_dst_mask	oflib/ofl-structs.h	/^    uint8_t    dl_dst_mask[OFP_ETH_ALEN]; \/* Ethernet dest. address mask. *\/$/;"	m	struct:ofl_match_standard
dl_src	lib/flow.h	/^    uint8_t dl_src[6];          \/* Ethernet source address. *\/$/;"	m	struct:flow
dl_src	oflib/ofl-structs.h	/^    uint8_t    dl_src[OFP_ETH_ALEN]; \/* Ethernet source address. *\/$/;"	m	struct:ofl_match
dl_src	oflib/ofl-structs.h	/^    uint8_t    dl_src[OFP_ETH_ALEN]; \/* Ethernet source address. *\/$/;"	m	struct:ofl_match_standard
dl_src_mask	oflib/ofl-structs.h	/^    uint8_t    dl_src_mask[OFP_ETH_ALEN]; \/* Ethernet source address mask. *\/$/;"	m	struct:ofl_match
dl_src_mask	oflib/ofl-structs.h	/^    uint8_t    dl_src_mask[OFP_ETH_ALEN]; \/* Ethernet source address mask. *\/$/;"	m	struct:ofl_match_standard
dl_type	lib/flow.h	/^    uint16_t dl_type;           \/* Ethernet frame type. *\/$/;"	m	struct:flow
dl_type	oflib/ofl-structs.h	/^    uint16_t   dl_type;          \/* Ethernet frame type. *\/$/;"	m	struct:ofl_match
dl_type	oflib/ofl-structs.h	/^    uint16_t   dl_type;          \/* Ethernet frame type. *\/$/;"	m	struct:ofl_match_standard
dl_type	oflib/oxm-match.h	/^    uint16_t dl_type[N_OXM_DL_TYPES]; \/* dl_type prerequisites. *\/$/;"	m	struct:oxm_field
dl_vlan	lib/flow.h	/^    uint16_t dl_vlan;           \/* Input VLAN id. *\/$/;"	m	struct:flow
dl_vlan	oflib/ofl-structs.h	/^    uint16_t   dl_vlan;          \/* Input VLAN id. *\/$/;"	m	struct:ofl_match
dl_vlan	oflib/ofl-structs.h	/^    uint16_t   dl_vlan;          \/* Input VLAN id. *\/$/;"	m	struct:ofl_match_standard
dl_vlan_pcp	lib/flow.h	/^    uint8_t dl_vlan_pcp;        \/* Input VLAN priority. *\/$/;"	m	struct:flow
dl_vlan_pcp	oflib/ofl-structs.h	/^    uint8_t    dl_vlan_pcp;       \/* Input VLAN priority. *\/$/;"	m	struct:ofl_match
dl_vlan_pcp	oflib/ofl-structs.h	/^    uint8_t    dl_vlan_pcp;       \/* Input VLAN priority. *\/$/;"	m	struct:ofl_match_standard
do_ca_cert_bootstrap	lib/vconn-ssl.c	/^do_ca_cert_bootstrap(struct vconn *vconn)$/;"	f	file:
do_ethtool	lib/netdev.c	/^do_ethtool(struct netdev *netdev)$/;"	f	file:
do_force_renew	lib/dhcp-client.c	/^do_force_renew(struct dhclient *cli, int deadline)$/;"	f	file:
do_init	lib/dhcp-client.c	/^do_init(struct dhclient *cli, enum dhclient_state next_state)$/;"	f	file:
do_lookup_genl_family	lib/netlink.c	/^static int do_lookup_genl_family(const char *name) $/;"	f	file:
do_open_netdev	lib/netdev.c	/^do_open_netdev(const char *name, int ethertype, int tap_fd,$/;"	f	file:
do_parse	utilities/dpctl_parser.py	/^def do_parse(line):$/;"	f
do_receive_msg	lib/dhcp-client.c	/^do_receive_msg(struct dhclient *cli, struct dhcp_msg *msg)$/;"	f	file:
do_recv	lib/vconn.c	/^do_recv(struct vconn *vconn, struct ofpbuf **msgp)$/;"	f	file:
do_remove_qdisc	lib/netdev.c	/^do_remove_qdisc(const char *netdev_name)$/;"	f	file:
do_send	lib/vconn.c	/^do_send(struct vconn *vconn, struct ofpbuf *buf)$/;"	f	file:
do_send_msg	lib/dhcp-client.c	/^do_send_msg(struct dhclient *cli, const struct dhcp_msg *msg)$/;"	f	file:
do_set_addr	lib/netdev.c	/^do_set_addr(struct netdev *netdev, int sock,$/;"	f	file:
do_set_pattern	lib/vlog.c	/^do_set_pattern(enum vlog_facility facility, const char *pattern) $/;"	f	file:
do_setup_qdisc	lib/netdev.c	/^do_setup_qdisc(const char *netdev_name)$/;"	f	file:
do_ssl_init	lib/vconn-ssl.c	/^do_ssl_init(void)$/;"	f	file:
do_tx_work	lib/rconn.c	/^do_tx_work(struct rconn *rc)$/;"	f	file:
do_unlink_files	lib/fatal-signal.c	/^do_unlink_files(void)$/;"	f	file:
do_update_flags	lib/netdev.c	/^do_update_flags(struct netdev *netdev, enum netdev_flags off,$/;"	f	file:
docdir	Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
dp	lib/vconn-netlink.c	/^    struct dpif dp;$/;"	m	struct:netlink_vconn	typeref:struct:netlink_vconn::dpif	file:
dp	udatapath/dp_buffers.c	/^    struct datapath       *dp;$/;"	m	struct:dp_buffers	typeref:struct:dp_buffers::datapath	file:
dp	udatapath/dp_ports.h	/^    struct datapath *dp;$/;"	m	struct:sw_port	typeref:struct:sw_port::datapath
dp	udatapath/flow_entry.h	/^    struct datapath         *dp;$/;"	m	struct:flow_entry	typeref:struct:flow_entry::datapath
dp	udatapath/flow_table.h	/^    struct datapath           *dp;$/;"	m	struct:flow_table	typeref:struct:flow_table::datapath
dp	udatapath/group_entry.h	/^    struct datapath             *dp;$/;"	m	struct:group_entry	typeref:struct:group_entry::datapath
dp	udatapath/group_table.h	/^    struct datapath  *dp;$/;"	m	struct:group_table	typeref:struct:group_table::datapath
dp	udatapath/meter_entry.h	/^	struct datapath				*dp;			\/* The datapath *\/$/;"	m	struct:meter_entry	typeref:struct:meter_entry::datapath
dp	udatapath/meter_table.h	/^  struct datapath		*dp;				\/* The datapath *\/$/;"	m	struct:meter_table	typeref:struct:meter_table::datapath
dp	udatapath/packet.h	/^    struct datapath    *dp;$/;"	m	struct:packet	typeref:struct:packet::datapath
dp	udatapath/pipeline.h	/^    struct datapath    *dp;$/;"	m	struct:pipeline	typeref:struct:pipeline::datapath
dp	udatapath/udatapath.c	/^static struct datapath *dp;$/;"	v	typeref:struct:datapath	file:
dp_actions_check_set_field_req	udatapath/dp_actions.c	/^dp_actions_check_set_field_req(struct ofl_msg_flow_mod *msg, size_t actions_num, struct ofl_action_header **actions){$/;"	f
dp_actions_list_has_out_group	udatapath/dp_actions.c	/^dp_actions_list_has_out_group(size_t actions_num, struct ofl_action_header **actions, uint32_t group) {$/;"	f
dp_actions_list_has_out_port	udatapath/dp_actions.c	/^dp_actions_list_has_out_port(size_t actions_num, struct ofl_action_header **actions, uint32_t port) {$/;"	f
dp_actions_output_port	udatapath/dp_actions.c	/^dp_actions_output_port(struct packet *pkt, uint32_t out_port, uint32_t out_queue, uint16_t max_len, uint64_t cookie) {$/;"	f
dp_actions_validate	udatapath/dp_actions.c	/^dp_actions_validate(struct datapath *dp, size_t actions_num, struct ofl_action_header **actions) {$/;"	f
dp_add_pvconn	udatapath/datapath.c	/^dp_add_pvconn(struct datapath *dp, struct pvconn *pvconn, struct pvconn *pvconn_aux) {$/;"	f
dp_buffers	udatapath/dp_buffers.c	/^struct dp_buffers {$/;"	s	file:
dp_buffers_create	udatapath/dp_buffers.c	/^dp_buffers_create(struct datapath *dp) {$/;"	f
dp_buffers_discard	udatapath/dp_buffers.c	/^dp_buffers_discard(struct dp_buffers *dpb, uint32_t id, bool destroy) {$/;"	f
dp_buffers_is_alive	udatapath/dp_buffers.c	/^dp_buffers_is_alive(struct dp_buffers *dpb, uint32_t id) {$/;"	f
dp_buffers_retrieve	udatapath/dp_buffers.c	/^dp_buffers_retrieve(struct dp_buffers *dpb, uint32_t id) {$/;"	f
dp_buffers_save	udatapath/dp_buffers.c	/^dp_buffers_save(struct dp_buffers *dpb, struct packet *pkt) {$/;"	f
dp_buffers_size	udatapath/dp_buffers.c	/^dp_buffers_size(struct dp_buffers *dpb) {$/;"	f
dp_check_generation_id	udatapath/datapath.c	/^dp_check_generation_id(struct datapath *dp, uint64_t new_gen_id){$/;"	f	file:
dp_desc	include/openflow/openflow-ext.h	/^    char dp_desc[DESC_STR_LEN];$/;"	m	struct:openflow_ext_set_dp_desc
dp_desc	include/openflow/openflow.h	/^	char dp_desc[DESC_STR_LEN];      \/* Human readable description of datapath. *\/$/;"	m	struct:ofp_desc
dp_desc	oflib-exp/ofl-exp-openflow.h	/^    char  *dp_desc;$/;"	m	struct:ofl_exp_openflow_msg_set_dp_desc
dp_desc	oflib/ofl-messages.h	/^    char  *dp_desc;      \/* Human readable description of$/;"	m	struct:ofl_msg_reply_desc
dp_desc	udatapath/datapath.h	/^    char  *dp_desc;$/;"	m	struct:datapath
dp_execute_action	udatapath/dp_actions.c	/^dp_execute_action(struct packet *pkt,$/;"	f
dp_execute_action_list	udatapath/dp_actions.c	/^dp_execute_action_list(struct packet *pkt,$/;"	f
dp_exp	udatapath/datapath.c	/^static struct ofl_exp dp_exp =$/;"	v	typeref:struct:ofl_exp	file:
dp_exp_action	udatapath/dp_exp.c	/^dp_exp_action(struct packet * pkt UNUSED, struct ofl_action_experimenter *act) {$/;"	f
dp_exp_bme_action	udatapath/dp_exp_bme.c	/^dp_exp_bme_action(struct packet *pkt, struct ofl_action_experimenter *act)$/;"	f
dp_exp_bme_process_pending	udatapath/dp_exp_bme.c	/^dp_exp_bme_process_pending(struct datapath *dp)$/;"	f
dp_exp_inst	udatapath/dp_exp.c	/^dp_exp_inst(struct packet *pkt UNUSED, struct ofl_instruction_experimenter *inst) {$/;"	f
dp_exp_message	udatapath/dp_exp.c	/^dp_exp_message(struct datapath *dp,$/;"	f
dp_exp_msg	udatapath/datapath.c	/^static struct ofl_exp_msg dp_exp_msg =$/;"	v	typeref:struct:ofl_exp_msg	file:
dp_exp_stats	udatapath/dp_exp.c	/^dp_exp_stats(struct datapath *dp UNUSED,$/;"	f
dp_genl_command	include/openflow/openflow-netlink.h	/^enum dp_genl_command {$/;"	g
dp_handle_async_request	udatapath/datapath.c	/^dp_handle_async_request(struct datapath *dp, struct ofl_msg_async_config *msg,$/;"	f
dp_handle_role_request	udatapath/datapath.c	/^dp_handle_role_request(struct datapath *dp, struct ofl_msg_role_request *msg,$/;"	f
dp_handle_set_desc	udatapath/datapath.c	/^dp_handle_set_desc(struct datapath *dp, struct ofl_exp_openflow_msg_set_dp_desc *msg,$/;"	f
dp_hw_drv_init	udatapath/dp_ports.c	/^dp_hw_drv_init(struct datapath *dp)$/;"	f	file:
dp_idx	lib/vconn-netlink.c	/^    int dp_idx;$/;"	m	struct:netlink_vconn	file:
dp_name	secchan/secchan.h	/^    const char *dp_name;        \/* Local datapath. *\/$/;"	m	struct:settings
dp_new	udatapath/datapath.c	/^dp_new(void) {$/;"	f
dp_port_stats_update	udatapath/dp_ports.c	/^dp_port_stats_update(struct sw_port *port) {$/;"	f	file:
dp_ports_add	udatapath/dp_ports.c	/^dp_ports_add(struct datapath *dp, const char *netdev)$/;"	f
dp_ports_add	udatapath/dp_ports.c	/^dp_ports_add(struct datapath *dp, const char *port_name)$/;"	f
dp_ports_add_local	udatapath/dp_ports.c	/^dp_ports_add_local(struct datapath *dp, const char *netdev)$/;"	f
dp_ports_handle_port_desc_request	udatapath/dp_ports.c	/^dp_ports_handle_port_desc_request(struct datapath *dp,$/;"	f
dp_ports_handle_port_mod	udatapath/dp_ports.c	/^dp_ports_handle_port_mod(struct datapath *dp, struct ofl_msg_port_mod *msg,$/;"	f
dp_ports_handle_queue_delete	udatapath/dp_ports.c	/^dp_ports_handle_queue_delete(struct datapath *dp, struct ofl_exp_openflow_msg_queue *msg,$/;"	f
dp_ports_handle_queue_get_config_request	udatapath/dp_ports.c	/^dp_ports_handle_queue_get_config_request(struct datapath *dp,$/;"	f
dp_ports_handle_queue_modify	udatapath/dp_ports.c	/^dp_ports_handle_queue_modify(struct datapath *dp, struct ofl_exp_openflow_msg_queue *msg,$/;"	f
dp_ports_handle_stats_request_port	udatapath/dp_ports.c	/^dp_ports_handle_stats_request_port(struct datapath *dp,$/;"	f
dp_ports_handle_stats_request_queue	udatapath/dp_ports.c	/^dp_ports_handle_stats_request_queue(struct datapath *dp,$/;"	f
dp_ports_lookup	udatapath/dp_ports.c	/^dp_ports_lookup(struct datapath *dp, uint32_t port_no) {$/;"	f
dp_ports_lookup_queue	udatapath/dp_ports.c	/^dp_ports_lookup_queue(struct sw_port *p, uint32_t queue_id)$/;"	f
dp_ports_output	udatapath/dp_ports.c	/^dp_ports_output(struct datapath *dp, struct ofpbuf *buffer, uint32_t out_port,$/;"	f
dp_ports_output_all	udatapath/dp_ports.c	/^dp_ports_output_all(struct datapath *dp, struct ofpbuf *buffer, int in_port, bool flood)$/;"	f
dp_ports_queue_update	udatapath/dp_ports.c	/^dp_ports_queue_update(struct sw_queue *queue) {$/;"	f	file:
dp_ports_run	udatapath/dp_ports.c	/^dp_ports_run(struct datapath *dp) {$/;"	f
dp_run	udatapath/datapath.c	/^dp_run(struct datapath *dp) {$/;"	f
dp_send_message	udatapath/datapath.c	/^dp_send_message(struct datapath *dp, struct ofl_msg_header *msg,$/;"	f
dp_set_dp_desc	udatapath/datapath.c	/^dp_set_dp_desc(struct datapath *dp, char *dp_desc) {$/;"	f
dp_set_dpid	udatapath/datapath.c	/^dp_set_dpid(struct datapath *dp, uint64_t dpid) {$/;"	f
dp_set_hw_desc	udatapath/datapath.c	/^dp_set_hw_desc(struct datapath *dp, char *hw_desc) {$/;"	f
dp_set_max_queues	udatapath/datapath.c	/^dp_set_max_queues(struct datapath *dp, uint32_t max_queues) {$/;"	f
dp_set_mfr_desc	udatapath/datapath.c	/^dp_set_mfr_desc(struct datapath *dp, char *mfr_desc) {$/;"	f
dp_set_serial_num	udatapath/datapath.c	/^dp_set_serial_num(struct datapath *dp, char *serial_num) {$/;"	f
dp_set_sw_desc	udatapath/datapath.c	/^dp_set_sw_desc(struct datapath *dp, char *sw_desc) {$/;"	f
dp_wait	udatapath/datapath.c	/^dp_wait(struct datapath *dp)$/;"	f
dpctl_barrier	utilities/dpctl.c	/^dpctl_barrier(struct vconn *vconn) {$/;"	f	file:
dpctl_exp	utilities/dpctl.c	/^static struct ofl_exp dpctl_exp =$/;"	v	typeref:struct:ofl_exp	file:
dpctl_exp_msg	utilities/dpctl.c	/^static struct ofl_exp_msg dpctl_exp_msg =$/;"	v	typeref:struct:ofl_exp_msg	file:
dpctl_send	utilities/dpctl.c	/^dpctl_send(struct vconn *vconn, struct ofl_msg_header *msg) {$/;"	f	file:
dpctl_send_and_print	utilities/dpctl.c	/^dpctl_send_and_print(struct vconn *vconn, struct ofl_msg_header *msg) {$/;"	f	file:
dpctl_transact	utilities/dpctl.c	/^dpctl_transact(struct vconn *vconn, struct ofl_msg_header *req,$/;"	f	file:
dpctl_transact_and_print	utilities/dpctl.c	/^dpctl_transact_and_print(struct vconn *vconn, struct ofl_msg_header *req,$/;"	f	file:
dpdir	debian/rules	/^dpdir=datapath\/linux-2.4$/;"	m
dpdir	debian/rules	/^dpdir=datapath\/linux-2.6$/;"	m
dpif	lib/dpif.h	/^struct dpif$/;"	s
dpif_add_dp	lib/dpif.c	/^dpif_add_dp(struct dpif *dp, int dp_idx, const char *dp_name)$/;"	f
dpif_add_port	lib/dpif.c	/^dpif_add_port(struct dpif *dp, int dp_idx, const char *netdev)$/;"	f
dpif_close	lib/dpif.c	/^dpif_close(struct dpif *dp) $/;"	f
dpif_del_dp	lib/dpif.c	/^dpif_del_dp(struct dpif *dp, int dp_idx, const char *dp_name)$/;"	f
dpif_del_port	lib/dpif.c	/^dpif_del_port(struct dpif *dp, int dp_idx, const char *netdev)$/;"	f
dpif_get_idx	lib/dpif.c	/^dpif_get_idx(const char *name)$/;"	f
dpif_open	lib/dpif.c	/^dpif_open(int subscribe_dp_idx, struct dpif *dp)$/;"	f
dpif_recv_openflow	lib/dpif.c	/^dpif_recv_openflow(struct dpif *dp, int dp_idx, struct ofpbuf **bufferp,$/;"	f
dpif_send_openflow	lib/dpif.c	/^dpif_send_openflow(struct dpif *dp, int dp_idx, struct ofpbuf *buffer)$/;"	f
drain_fd	lib/socket-util.c	/^drain_fd(int fd, size_t n_packets)$/;"	f
drain_rcvbuf	lib/socket-util.c	/^drain_rcvbuf(int fd)$/;"	f
drop_packet	secchan/ratelimit.c	/^drop_packet(struct rate_limiter *rl)$/;"	f	file:
ds	lib/dynamic-string.h	/^struct ds {$/;"	s
ds_chomp	lib/dynamic-string.c	/^ds_chomp(struct ds *ds, int c)$/;"	f
ds_clear	lib/dynamic-string.c	/^ds_clear(struct ds *ds) $/;"	f
ds_cstr	lib/dynamic-string.c	/^ds_cstr(struct ds *ds)$/;"	f
ds_destroy	lib/dynamic-string.c	/^ds_destroy(struct ds *ds)$/;"	f
ds_get_line	lib/dynamic-string.c	/^ds_get_line(struct ds *ds, FILE *file)$/;"	f
ds_init	lib/dynamic-string.c	/^ds_init(struct ds *ds)$/;"	f
ds_last	lib/dynamic-string.c	/^ds_last(const struct ds *ds)$/;"	f
ds_put_buffer	lib/dynamic-string.c	/^ds_put_buffer(struct ds *ds, const char *s, size_t n)$/;"	f
ds_put_char	lib/dynamic-string.c	/^ds_put_char(struct ds *ds, char c)$/;"	f
ds_put_char_multiple	lib/dynamic-string.c	/^ds_put_char_multiple(struct ds *ds, char c, size_t n)$/;"	f
ds_put_cstr	lib/dynamic-string.c	/^ds_put_cstr(struct ds *ds, const char *s)$/;"	f
ds_put_format	lib/dynamic-string.c	/^ds_put_format(struct ds *ds, const char *format, ...)$/;"	f
ds_put_format_valist	lib/dynamic-string.c	/^ds_put_format_valist(struct ds *ds, const char *format, va_list args_)$/;"	f
ds_put_hex_dump	lib/dynamic-string.c	/^ds_put_hex_dump(struct ds *ds, const void *buf_, size_t size,$/;"	f
ds_put_printable	lib/dynamic-string.c	/^ds_put_printable(struct ds *ds, const char *s, size_t n) $/;"	f
ds_put_strftime	lib/dynamic-string.c	/^ds_put_strftime(struct ds *ds, const char *template, const struct tm *tm)$/;"	f
ds_put_uninit	lib/dynamic-string.c	/^ds_put_uninit(struct ds *ds, size_t n)$/;"	f
ds_reserve	lib/dynamic-string.c	/^ds_reserve(struct ds *ds, size_t min_length)$/;"	f
ds_truncate	lib/dynamic-string.c	/^ds_truncate(struct ds *ds, size_t new_length)$/;"	f
duration_nsec	include/openflow/openflow.h	/^	uint32_t duration_nsec; \/* Time flow has been alive in nanoseconds beyond$/;"	m	struct:ofp_flow_stats
duration_nsec	include/openflow/openflow.h	/^	uint32_t duration_nsec; \/* Time flow was alive in nanoseconds beyond$/;"	m	struct:ofp_flow_removed
duration_nsec	include/openflow/openflow.h	/^	uint32_t duration_nsec; \/* Time port has been alive in nanoseconds beyond$/;"	m	struct:ofp_port_stats
duration_nsec	include/openflow/openflow.h	/^    uint32_t duration_nsec;   \/* Time meter has been alive in nanoseconds beyond$/;"	m	struct:ofp_meter_stats
duration_nsec	include/openflow/openflow.h	/^    uint32_t duration_nsec; \/* Time group has been alive in nanoseconds beyond$/;"	m	struct:ofp_group_stats
duration_nsec	include/openflow/openflow.h	/^    uint32_t duration_nsec; \/* Time queue has been alive in nanoseconds beyond$/;"	m	struct:ofp_queue_stats
duration_nsec	oflib/ofl-structs.h	/^    uint32_t                        duration_nsec; \/* Time flow has been alive in nsecs$/;"	m	struct:ofl_flow_stats
duration_nsec	oflib/ofl-structs.h	/^    uint32_t   duration_nsec; \/* Time group has been alive in nanoseconds$/;"	m	struct:ofl_group_stats
duration_nsec	oflib/ofl-structs.h	/^    uint32_t   duration_nsec; \/* Time port has been alive in nanoseconds$/;"	m	struct:ofl_port_stats
duration_nsec	oflib/ofl-structs.h	/^    uint32_t   duration_nsec; \/* Time queue has been alive in nanoseconds$/;"	m	struct:ofl_queue_stats
duration_nsec	oflib/ofl-structs.h	/^    uint32_t duration_nsec;   \/* Time meter has been alive in nanoseconds beyond$/;"	m	struct:ofl_meter_stats
duration_sec	include/openflow/openflow.h	/^	uint32_t duration_sec;  \/* Time flow has been alive in seconds. *\/$/;"	m	struct:ofp_flow_stats
duration_sec	include/openflow/openflow.h	/^	uint32_t duration_sec;  \/* Time flow was alive in seconds. *\/$/;"	m	struct:ofp_flow_removed
duration_sec	include/openflow/openflow.h	/^	uint32_t duration_sec; \/* Time group has been alive in seconds. *\/$/;"	m	struct:ofp_group_stats
duration_sec	include/openflow/openflow.h	/^	uint32_t duration_sec; \/* Time port has been alive in seconds. *\/$/;"	m	struct:ofp_port_stats
duration_sec	include/openflow/openflow.h	/^	uint32_t duration_sec; \/* Time queue has been alive in seconds. *\/$/;"	m	struct:ofp_queue_stats
duration_sec	include/openflow/openflow.h	/^    uint32_t duration_sec;    \/* Time meter has been alive in seconds. *\/$/;"	m	struct:ofp_meter_stats
duration_sec	oflib/ofl-structs.h	/^    uint32_t                        duration_sec;  \/* Time flow has been alive in secs. *\/$/;"	m	struct:ofl_flow_stats
duration_sec	oflib/ofl-structs.h	/^    uint32_t   duration_sec; \/* Time group has been alive in seconds *\/$/;"	m	struct:ofl_group_stats
duration_sec	oflib/ofl-structs.h	/^    uint32_t   duration_sec; \/* Time port has been alive in seconds *\/$/;"	m	struct:ofl_port_stats
duration_sec	oflib/ofl-structs.h	/^    uint32_t   duration_sec; \/* Time queue has been alive in seconds *\/$/;"	m	struct:ofl_queue_stats
duration_sec	oflib/ofl-structs.h	/^    uint32_t duration_sec;    \/* Time meter has been alive in seconds. *\/$/;"	m	struct:ofl_meter_stats
dvidir	Makefile	/^dvidir = ${docdir}$/;"	m
elapsed_in_this_state	lib/dhcp-client.c	/^elapsed_in_this_state(const struct dhclient *cli)$/;"	f	file:
elapsed_in_this_state	lib/rconn.c	/^elapsed_in_this_state(const struct rconn *rc)$/;"	f	file:
elapsed_remainder	lib/stp.c	/^    int elapsed_remainder;          \/* Left-over msecs from last stp_tick(). *\/$/;"	m	struct:stp	file:
enable_stp	secchan/secchan.h	/^    bool enable_stp;$/;"	m	struct:settings
enc_01	udatapath/dp_actions.c	/^    struct list enc_01;$/;"	m	struct:pending_flows	typeref:struct:pending_flows::list	file:
enc_01	udatapath/dp_exp_bme.c	/^    struct list enc_01;$/;"	m	struct:pending_flows	typeref:struct:pending_flows::list	file:
enc_10	udatapath/dp_actions.c	/^    struct list enc_10;$/;"	m	struct:pending_flows	typeref:struct:pending_flows::list	file:
enc_10	udatapath/dp_exp_bme.c	/^    struct list enc_10;$/;"	m	struct:pending_flows	typeref:struct:pending_flows::list	file:
end	lib/ofp.h	/^    const uint8_t *pos, *end;$/;"	m	struct:flow_stats_iterator
end	lib/ofp.h	/^    const union ofp_action *pos, *end;$/;"	m	struct:actions_iterator	typeref:union:actions_iterator::
enqueue_pkt	udatapath/dp_ports.c	/^enqueue_pkt(struct datapath *dp, struct ofpbuf *buffer, of_port_t port_no,$/;"	f	file:
entries	lib/mac-learning.c	/^    struct mac_entry entries[MAC_MAX]; \/* All entries. *\/$/;"	m	struct:mac_learning	typeref:struct:mac_learning::mac_entry	file:
entries	udatapath/group_table.h	/^    struct hmap       entries;$/;"	m	struct:group_table	typeref:struct:group_table::hmap
entries_num	udatapath/group_table.h	/^	size_t            entries_num;$/;"	m	struct:group_table
entries_num	udatapath/meter_table.h	/^	size_t				 entries_num;		\/* The number of meters *\/$/;"	m	struct:meter_table
entry	udatapath/group_entry.c	/^    struct flow_entry *entry;$/;"	m	struct:flow_ref_entry	typeref:struct:flow_ref_entry::flow_entry	file:
entry	udatapath/meter_entry.c	/^    struct flow_entry *entry;$/;"	m	struct:flow_ref_entry	typeref:struct:flow_ref_entry::flow_entry	file:
epoch	secchan/failover.c	/^	time_t epoch;$/;"	m	struct:failover_peer	file:
error	lib/netlink-protocol.h	/^        int error;$/;"	m	struct:nlmsgerr
error	lib/vconn-provider.h	/^    int error;$/;"	m	struct:vconn
eth	lib/packets.h	/^   struct eth_header      * eth;$/;"	m	struct:protocols_std	typeref:struct:protocols_std::eth_header
eth_addr_equals	lib/packets.h	/^static inline bool eth_addr_equals(const uint8_t a[ETH_ADDR_LEN],$/;"	f
eth_addr_from_uint64	lib/packets.h	/^static inline void eth_addr_from_uint64(uint64_t x, uint8_t ea[ETH_ADDR_LEN])$/;"	f
eth_addr_is_broadcast	lib/packets.h	/^static inline bool eth_addr_is_broadcast(const uint8_t ea[6])$/;"	f
eth_addr_is_local	lib/packets.h	/^static inline bool eth_addr_is_local(const uint8_t ea[6])$/;"	f
eth_addr_is_multicast	lib/packets.h	/^static inline bool eth_addr_is_multicast(const uint8_t ea[6])$/;"	f
eth_addr_is_reserved	lib/packets.h	/^static inline bool eth_addr_is_reserved(const uint8_t ea[ETH_ADDR_LEN])$/;"	f
eth_addr_is_zero	lib/packets.h	/^static inline bool eth_addr_is_zero(const uint8_t ea[6])$/;"	f
eth_addr_random	lib/packets.h	/^static inline void eth_addr_random(uint8_t ea[ETH_ADDR_LEN])$/;"	f
eth_addr_to_uint64	lib/packets.h	/^static inline uint64_t eth_addr_to_uint64(const uint8_t ea[ETH_ADDR_LEN])$/;"	f
eth_all_0s	oflib/oxm-match.c	/^static const uint8_t eth_all_0s[ETH_ADDR_LEN]$/;"	v	file:
eth_all_1s	oflib/oxm-match.c	/^static const uint8_t eth_all_1s[ETH_ADDR_LEN]$/;"	v	file:
eth_dst	lib/packets.h	/^    uint8_t eth_dst[ETH_ADDR_LEN];$/;"	m	struct:eth_header
eth_header	lib/packets.h	/^struct eth_header {$/;"	s
eth_mcast_0	oflib/oxm-match.c	/^static const uint8_t eth_mcast_0[ETH_ADDR_LEN]$/;"	v	file:
eth_mcast_1	oflib/oxm-match.c	/^static const uint8_t eth_mcast_1[ETH_ADDR_LEN]$/;"	v	file:
eth_snap	lib/packets.h	/^   struct snap_header     * eth_snap; \/* points to SNAP header if eth is 802.3 *\/$/;"	m	struct:protocols_std	typeref:struct:protocols_std::snap_header
eth_src	lib/packets.h	/^    uint8_t eth_src[ETH_ADDR_LEN];$/;"	m	struct:eth_header
eth_type	lib/packets.h	/^    uint16_t eth_type;      \/* ETH_TYPE_VLAN *\/$/;"	m	struct:qtag_prefix
eth_type	lib/packets.h	/^    uint16_t eth_type;$/;"	m	struct:eth_header
etheraddr	lib/netdev.c	/^    uint8_t etheraddr[ETH_ADDR_LEN];$/;"	m	struct:netdev	file:
ethertype	include/openflow/openflow.h	/^	uint16_t ethertype; \/* Ethertype *\/$/;"	m	struct:ofp_action_pop_mpls
ethertype	include/openflow/openflow.h	/^	uint16_t ethertype; \/* Ethertype *\/$/;"	m	struct:ofp_action_push
ethertype	oflib/ofl-actions.h	/^    uint16_t   ethertype; \/* Ethertype *\/$/;"	m	struct:ofl_action_pop_mpls
ethertype	oflib/ofl-actions.h	/^    uint16_t   ethertype; \/* Ethertype *\/$/;"	m	struct:ofl_action_push
events	lib/poll-loop.c	/^    short int events;           \/* Events to wait for (POLLIN, POLLOUT). *\/$/;"	m	struct:poll_waiter	file:
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
execute_all	udatapath/group_entry.c	/^execute_all(struct group_entry *entry, struct packet *pkt) {$/;"	f	file:
execute_entry	udatapath/pipeline.c	/^execute_entry(struct pipeline *pl, struct flow_entry *entry,$/;"	f	file:
execute_ff	udatapath/group_entry.c	/^execute_ff(struct group_entry *entry, struct packet *pkt) {$/;"	f	file:
execute_indirect	udatapath/group_entry.c	/^execute_indirect(struct group_entry *entry, struct packet *pkt) {$/;"	f	file:
execute_select	udatapath/group_entry.c	/^execute_select(struct group_entry *entry, struct packet *pkt) {$/;"	f	file:
exit_after_bind	utilities/ofp-discover.c	/^static bool exit_after_bind;$/;"	v	file:
exit_without_bind	utilities/ofp-discover.c	/^static bool exit_without_bind;$/;"	v	file:
exited	lib/process.c	/^    volatile bool exited;$/;"	m	struct:process	file:
exp	udatapath/action_set.c	/^    struct ofl_exp *exp;       \/* experimenter callbacks *\/$/;"	m	struct:action_set	typeref:struct:action_set::ofl_exp	file:
exp	udatapath/datapath.h	/^    struct ofl_exp  *exp;$/;"	m	struct:datapath	typeref:struct:datapath::ofl_exp
exp_bme	udatapath/datapath.h	/^    void *exp_bme;$/;"	m	struct:datapath
exp_type	include/openflow/openflow.h	/^	uint16_t exp_type;     \/* Experimenter defined. *\/$/;"	m	struct:ofp_error_experimenter_msg
exp_type	include/openflow/openflow.h	/^	uint32_t exp_type;        \/* Experimenter defined. *\/$/;"	m	struct:ofp_experimenter_header
exp_type	include/openflow/openflow.h	/^	uint32_t exp_type;     \/* Experimenter defined. *\/$/;"	m	struct:ofp_experimenter_stats_header
experimenter	include/openflow/openflow.h	/^	uint32_t experimenter;                    \/* Experimenter ID which takes the same$/;"	m	struct:ofp_queue_prop_experimenter
experimenter	include/openflow/openflow.h	/^	uint32_t experimenter;    \/* Experimenter ID:$/;"	m	struct:ofp_experimenter_header
experimenter	include/openflow/openflow.h	/^	uint32_t experimenter; \/* Experimenter ID which takes the same form$/;"	m	struct:ofp_error_experimenter_msg
experimenter	include/openflow/openflow.h	/^	uint32_t experimenter; \/* Experimenter ID which takes the same form$/;"	m	struct:ofp_experimenter_stats_header
experimenter	include/openflow/openflow.h	/^	uint32_t experimenter; \/* Experimenter ID which takes the same$/;"	m	struct:ofp_action_experimenter_header
experimenter	include/openflow/openflow.h	/^	uint32_t experimenter; \/* Experimenter ID which takes the same$/;"	m	struct:ofp_oxm_experimenter_header
experimenter	include/openflow/openflow.h	/^    uint32_t experimenter; \/* Experimenter ID which takes the same$/;"	m	struct:ofp_meter_band_experimenter
experimenter	lib/ofp.h	/^    struct ofp_action_experimenter_header experimenter;$/;"	m	union:ofp_action	typeref:struct:ofp_action::ofp_action_experimenter_header
experimenter	oflib/ofl-structs.h	/^    uint32_t experimenter; \/* Experimenter ID which takes the same$/;"	m	struct:ofl_meter_band_experimenter
experimenter	oflib/ofl-structs.h	/^    uint32_t experimenter;$/;"	m	struct:ofl_queue_prop_experimenter
experimenter_id	oflib-exp/ofl-exp-bme.h	/^    uint32_t experimenter_id;          \/* BME_EXPERIMENTER_ID *\/$/;"	m	struct:ofl_bme_serialize
experimenter_id	oflib-exp/ofl-exp-bme.h	/^    uint32_t experimenter_id;          \/* BME_EXPERIMENTER_ID *\/$/;"	m	struct:ofl_bme_set_metadata
experimenter_id	oflib-exp/ofl-exp-bme.h	/^    uint32_t experimenter_id;          \/* BME_EXPERIMENTER_ID *\/$/;"	m	struct:ofl_bme_set_metadata_from_counter
experimenter_id	oflib-exp/ofl-exp-bme.h	/^    uint32_t experimenter_id;          \/* BME_EXPERIMENTER_ID *\/$/;"	m	struct:ofl_bme_set_mpls_label
experimenter_id	oflib-exp/ofl-exp-bme.h	/^    uint32_t experimenter_id;          \/* BME_EXPERIMENTER_ID *\/$/;"	m	struct:ofl_bme_update_distance
experimenter_id	oflib-exp/ofl-exp-bme.h	/^    uint32_t experimenter_id;          \/* BME_EXPERIMENTER_ID *\/$/;"	m	struct:ofl_bme_xor_packet
experimenter_id	oflib-exp/ofl-exp-bme.h	/^    uint32_t experimenter_id;         \/* BME_EXPERIMENTER_ID *\/$/;"	m	struct:ofl_bme_action_header
experimenter_id	oflib/ofl-actions.h	/^    uint32_t  experimenter_id; \/* Experimenter ID *\/$/;"	m	struct:ofl_action_experimenter
experimenter_id	oflib/ofl-messages.h	/^    uint32_t   experimenter_id;$/;"	m	struct:ofl_msg_experimenter
experimenter_id	oflib/ofl-messages.h	/^    uint32_t   experimenter_id;$/;"	m	struct:ofl_msg_multipart_request_experimenter
experimenter_id	oflib/ofl-messages.h	/^    uint32_t  experimenter_id;$/;"	m	struct:ofl_msg_multipart_reply_experimenter
experimenter_id	oflib/ofl-structs.h	/^    uint32_t   experimenter_id; \/* Experimenter ID *\/$/;"	m	struct:ofl_instruction_experimenter
expires	lib/mac-learning.c	/^    time_t expires;             \/* Expiration time. *\/$/;"	m	struct:mac_entry	file:
ext_hdr_orders	nbee_link/nbee_link.cpp	/^map<uint16_t,uint16_t> ext_hdr_orders;$/;"	v
ext_header_names	utilities/dpctl.h	/^static struct names16 ext_header_names[] = {$/;"	v	typeref:struct:names16
facilities	lib/vlog.c	/^static struct facility facilities[VLF_N_FACILITIES] = {$/;"	v	typeref:struct:facility	file:
facility	lib/vlog.c	/^struct facility {$/;"	s	file:
failover_context	secchan/failover.c	/^struct failover_context {$/;"	s	file:
failover_peer	secchan/failover.c	/^struct failover_peer {$/;"	s	file:
failover_periodic_cb	secchan/failover.c	/^failover_periodic_cb(void *context_)$/;"	f	file:
failover_start	secchan/failover.c	/^failover_start(struct secchan *secchan, const struct settings *settings,$/;"	f
failover_status_cb	secchan/failover.c	/^failover_status_cb(struct status_reply *status_reply, void *context_)$/;"	f	file:
family_policy	lib/netlink.c	/^static const struct nl_policy family_policy[CTRL_ATTR_MAX + 1] = { $/;"	v	typeref:struct:nl_policy	file:
fatal_signal_add_file_to_unlink	lib/fatal-signal.c	/^fatal_signal_add_file_to_unlink(const char *file)$/;"	f
fatal_signal_add_hook	lib/fatal-signal.c	/^fatal_signal_add_hook(void (*func)(void *aux), void *aux, bool run_at_exit)$/;"	f
fatal_signal_block	lib/fatal-signal.c	/^fatal_signal_block(void)$/;"	f
fatal_signal_fork	lib/fatal-signal.c	/^fatal_signal_fork(void)$/;"	f
fatal_signal_handler	lib/fatal-signal.c	/^fatal_signal_handler(int sig_nr)$/;"	f
fatal_signal_remove_file_to_unlink	lib/fatal-signal.c	/^fatal_signal_remove_file_to_unlink(const char *file)$/;"	f
fatal_signal_set	lib/fatal-signal.c	/^static sigset_t fatal_signal_set;$/;"	v	file:
fatal_signal_unblock	lib/fatal-signal.c	/^fatal_signal_unblock(void)$/;"	f
fatal_signals	lib/fatal-signal.c	/^static const int fatal_signals[] = { SIGTERM, SIGINT, SIGHUP, SIGALRM };$/;"	v	file:
fault_handler	lib/fault.c	/^fault_handler(int sig_nr)$/;"	f	file:
fd	lib/netlink.c	/^    int fd;$/;"	m	struct:nl_sock	file:
fd	lib/poll-loop.c	/^    int fd;                     \/* File descriptor. *\/$/;"	m	struct:poll_waiter	file:
fd	lib/vconn-ssl.c	/^    int fd;$/;"	m	struct:pssl_pvconn	file:
fd	lib/vconn-ssl.c	/^    int fd;$/;"	m	struct:ssl_vconn	file:
fd	lib/vconn-stream.c	/^    int fd;$/;"	m	struct:pstream_pvconn	file:
fd	lib/vconn-stream.c	/^    int fd;$/;"	m	struct:stream_vconn	file:
fd	lib/vlog-socket.c	/^    int fd;$/;"	m	struct:vlog_client	file:
fd	lib/vlog-socket.c	/^    int fd;$/;"	m	struct:vlog_server	file:
fds	lib/process.c	/^static int fds[2];$/;"	v	file:
fds	lib/signals.c	/^static int fds[2];$/;"	v	file:
features	oflib/ofl-messages.h	/^    struct ofl_meter_features *features;   $/;"	m	struct:ofl_msg_multipart_reply_meter_features	typeref:struct:ofl_msg_multipart_reply_meter_features::ofl_meter_features
features	udatapath/flow_table.h	/^    struct ofl_table_features *features;      \/*store table features*\/$/;"	m	struct:flow_table	typeref:struct:flow_table::ofl_table_features
features	udatapath/group_table.h	/^	struct ofl_msg_multipart_reply_group_features *features;   $/;"	m	struct:group_table	typeref:struct:group_table::ofl_msg_multipart_reply_group_features
features	udatapath/meter_table.h	/^	struct ofl_meter_features *features;	$/;"	m	struct:meter_table	typeref:struct:meter_table::ofl_meter_features
features	utilities/dpctl.c	/^features(struct vconn *vconn, int argc UNUSED, char *argv[] UNUSED) {$/;"	f	file:
fetch_braces	lib/vlog.c	/^fetch_braces(const char *p, const char *def, char *out, size_t out_size)$/;"	f	file:
field	include/openflow/bme-ext.h	/^    uint32_t field;               \/* One of OFPFMF_*; If more than one bit is$/;"	m	struct:ofp_bme_set_metadata
field	include/openflow/openflow.h	/^	uint8_t field[4]; \/* OXM TLV - Make compiler happy *\/$/;"	m	struct:ofp_action_set_field
field	oflib-exp/ofl-exp-bme.h	/^    uint32_t field;$/;"	m	struct:ofl_bme_set_metadata
field	oflib/ofl-actions.h	/^    struct ofl_match_tlv *field;$/;"	m	struct:ofl_action_set_field	typeref:struct:ofl_action_set_field::ofl_match_tlv
fields	lib/packets.h	/^    uint32_t fields;$/;"	m	struct:mpls_header
file	lib/dhcp.h	/^    char file[128];             \/* Boot file name. *\/$/;"	m	struct:dhcp_header
file	lib/leak-checker.c	/^static FILE *file;$/;"	v	file:
files	lib/fatal-signal.c	/^static char **files;$/;"	v	file:
find_in_path	lib/process.c	/^find_in_path(const char *name)$/;"	f	file:
find_netdevs	debian/ofp-switch-setup	/^sub find_netdevs {$/;"	s
find_pkt_in_dec_old	udatapath/dp_exp_bme.c	/^find_pkt_in_dec_old(struct pending_flows *pl, struct pending_pkt* p_new)$/;"	f	file:
fingerprint	utilities/ofp-pki.in	/^fingerprint() {$/;"	f
first_changed_port	lib/stp.c	/^    struct stp_port *first_changed_port;$/;"	m	struct:stp	typeref:struct:stp::stp_port	file:
first_dropped	lib/vlog.h	/^    time_t first_dropped;       \/* Time first message was dropped. *\/$/;"	m	struct:vlog_rate_limit
first_parse	utilities/dpctl_parser.py	/^first_parse = re.compile(r'^stat_repl\\{type="flow", flags="0x0", stats=\\[')$/;"	v
flags	include/openflow/of_hw_api.h	/^    uint32_t flags;$/;"	m	struct:of_hw_driver_caps
flags	include/openflow/openflow.h	/^	uint16_t flags;         \/* OFPC_* flags. *\/$/;"	m	struct:ofp_switch_config
flags	include/openflow/openflow.h	/^	uint16_t flags;         \/* One of OFPFF_*. *\/$/;"	m	struct:ofp_flow_mod
flags	include/openflow/openflow.h	/^	uint16_t flags;  \/* OFPMP_REPLY_* flags. *\/$/;"	m	struct:ofp_multipart_reply
flags	include/openflow/openflow.h	/^	uint16_t flags;  \/* OFPMP_REQ_* flags (none yet defined). *\/$/;"	m	struct:ofp_multipart_request
flags	include/openflow/openflow.h	/^    uint16_t flags;    \/* One of OFPMF_*. *\/   $/;"	m	struct:ofp_meter_mod
flags	include/openflow/openflow.h	/^    uint16_t flags; \/* All OFPMC_* that apply. *\/$/;"	m	struct:ofp_meter_config
flags	lib/dhcp.h	/^    uint16_t flags;             \/* DHCP_FLAGS_*. *\/$/;"	m	struct:dhcp_header
flags	lib/dhcp.h	/^    uint16_t flags;             \/* DHCP_FLAGS_*. *\/$/;"	m	struct:dhcp_msg
flags	lib/stp.c	/^    uint8_t flags;                 \/* STP_CONFIG_* flags. *\/$/;"	m	struct:stp_config_bpdu	file:
flags	oflib/ofl-messages.h	/^    uint16_t                        flags;        \/* One of OFPFF_*. *\/$/;"	m	struct:ofl_msg_flow_mod
flags	oflib/ofl-messages.h	/^    uint16_t               flags;     \/* OFPMPF_REPLY_* flags. *\/$/;"	m	struct:ofl_msg_multipart_reply_header
flags	oflib/ofl-messages.h	/^    uint16_t               flags;     \/* OFPMPF_REQ_* flags. *\/$/;"	m	struct:ofl_msg_multipart_request_header
flags	oflib/ofl-messages.h	/^    uint16_t flags;    \/* One of OFPMF_*. *\/   $/;"	m	struct:ofl_msg_meter_mod
flags	oflib/ofl-structs.h	/^    uint16_t   flags;         \/* OFPC_* flags. *\/$/;"	m	struct:ofl_config
flags	oflib/ofl-structs.h	/^    uint16_t flags; \/* All OFPMC_* that apply. *\/$/;"	m	struct:ofl_meter_config
flags	udatapath/dp_ports.h	/^    uint32_t flags;             \/* SWP_* flags above *\/$/;"	m	struct:sw_port
flow	lib/flow.h	/^struct flow {$/;"	s
flow_compare	lib/flow.h	/^flow_compare(const struct flow *a, const struct flow *b)$/;"	f
flow_count	include/openflow/openflow.h	/^	uint32_t flow_count;   \/* Number of flows. *\/$/;"	m	struct:ofp_aggregate_stats_reply
flow_count	include/openflow/openflow.h	/^    uint32_t flow_count;      \/* Number of flows bound to meter. *\/$/;"	m	struct:ofp_meter_stats
flow_count	oflib/ofl-messages.h	/^    uint32_t   flow_count;   \/* Number of flows. *\/$/;"	m	struct:ofl_msg_multipart_reply_aggregate
flow_count	oflib/ofl-structs.h	/^    uint32_t flow_count;      \/* Number of flows bound to meter. *\/$/;"	m	struct:ofl_meter_stats
flow_entry	udatapath/flow_entry.h	/^struct flow_entry {$/;"	s
flow_entry_create	udatapath/flow_entry.c	/^flow_entry_create(struct datapath *dp, struct flow_table *table, struct ofl_msg_flow_mod *mod) {$/;"	f
flow_entry_destroy	udatapath/flow_entry.c	/^flow_entry_destroy(struct flow_entry *entry) {$/;"	f
flow_entry_hard_timeout	udatapath/flow_entry.c	/^flow_entry_hard_timeout(struct flow_entry *entry) {$/;"	f
flow_entry_has_out_group	udatapath/flow_entry.c	/^flow_entry_has_out_group(struct flow_entry *entry, uint32_t group) {$/;"	f
flow_entry_has_out_port	udatapath/flow_entry.c	/^flow_entry_has_out_port(struct flow_entry *entry, uint32_t port) {$/;"	f
flow_entry_idle_timeout	udatapath/flow_entry.c	/^flow_entry_idle_timeout(struct flow_entry *entry) {$/;"	f
flow_entry_matches	udatapath/flow_entry.c	/^flow_entry_matches(struct flow_entry *entry, struct ofl_msg_flow_mod *mod, bool strict, bool check_cookie) {$/;"	f
flow_entry_overlaps	udatapath/flow_entry.c	/^flow_entry_overlaps(struct flow_entry *entry, struct ofl_msg_flow_mod *mod) {$/;"	f
flow_entry_remove	udatapath/flow_entry.c	/^flow_entry_remove(struct flow_entry *entry, uint8_t reason) {$/;"	f
flow_entry_replace_instructions	udatapath/flow_entry.c	/^flow_entry_replace_instructions(struct flow_entry *entry,$/;"	f
flow_entry_update	udatapath/flow_entry.c	/^flow_entry_update(struct flow_entry *entry) {$/;"	f
flow_equal	lib/flow.h	/^flow_equal(const struct flow *a, const struct flow *b)$/;"	f
flow_extract	lib/flow.c	/^flow_extract(struct ofpbuf *packet, uint32_t in_port, struct flow *flow)$/;"	f
flow_hash	lib/flow.h	/^flow_hash(const struct flow *flow, uint32_t basis)$/;"	f
flow_label	udatapath/dp_actions.c	/^    uint32_t flow_label;$/;"	m	struct:pending_flows	file:
flow_label	udatapath/dp_exp_bme.c	/^    uint32_t flow_label;$/;"	m	struct:pending_flows	file:
flow_lists	utilities/dpctl_parser.py	/^flow_lists = []$/;"	v
flow_mod	utilities/dpctl.c	/^flow_mod(struct vconn *vconn, int argc, char *argv[]) {$/;"	f	file:
flow_mod_cmd_names	utilities/dpctl.h	/^static struct names8 flow_mod_cmd_names[] = {$/;"	v	typeref:struct:names8
flow_mod_fail	lib/ofpstat.h	/^		uint64_t flow_mod_fail;$/;"	m	struct:ofpstat::__anon2
flow_parse	utilities/dpctl_parser.py	/^flow_parse = re.compile(r'(\\{table="[0-9]+",\\s?match="oxm\\{[.A-Fa-z\\s?+,"0-9:=_-]+\\}",\\s?dur_s="[0-9]+",\\s?dur_ns="[0-9]+",\\s?prio="[0-9]+",\\s?idle_to="[0-9]+",\\s?hard_to="[0-9]+",\\s?cookie="0x[0-9a-fA-F]+",\\s?pkt_cnt="[0-9]+",\\s?byte_cnt="[0-9]+",\\s?insts=\\[((apply\\{acts=\\[[A-Fa-z,\\s\\{\\}"0-9:\\.=_-]*\\]\\})?(write\\{acts=\\[[A-Fa-z,\\s\\{\\}"0-9:\\.=_-]*\\]\\})?(,\\s)?(meta\\{meta="0x[0-9a-fA-F]+", mask="0x[0-9a-fA-F]+"\\})?(,\\s)?(goto\\{table="[0-9]+"\\})?)\\]\\})+')$/;"	v
flow_parse_values	utilities/dpctl_parser.py	/^flow_parse_values = re.compile(r'(\\{table="(?P<table>[0-9]+)",\\s?match="oxm\\{(?P<match>[A-Fa-z,\\s\\?+,"0-9:\\.=_-]+)\\}",\\s?dur_s="(?P<dur_s>[0-9]+)",\\s?dur_ns="(?P<dur_ns>[0-9]+)",\\s?prio="(?P<prio>[0-9]+)",\\s?idle_to="(?P<idle_to>[0-9]+)",\\s?hard_to="[0-9]+",\\s?cookie="(?P<cookie>0x[0-9a-fA-F]+)",\\s?pkt_cnt="(?P<pkts>[0-9]+)",\\s?byte_cnt="(?P<bytes>[0-9]+)",\\s?insts=\\[(?P<insts>(apply\\{acts=\\[[A-Fa-z,\\s\\{\\}"0-9:\\.=_-]*\\]\\})?(write\\{acts=\\[[A-Fa-z,\\s\\{\\}"0-9:\\.=_-]*\\]\\})?(,\\s)?(meta\\{meta="0x[0-9a-fA-F]+", mask="0x[0-9a-fA-F]+"\\})?(,\\s)?(goto\\{table="[0-9]+"\\})?)\\]\\})+')$/;"	v
flow_print	lib/flow.c	/^flow_print(FILE *stream, const struct flow *flow) $/;"	f
flow_ref_entry	udatapath/group_entry.c	/^struct flow_ref_entry {$/;"	s	file:
flow_ref_entry	udatapath/meter_entry.c	/^struct flow_ref_entry {$/;"	s	file:
flow_refs	udatapath/group_entry.h	/^    struct list                  flow_refs; \/* references to flows referencing the group. *\/$/;"	m	struct:group_entry	typeref:struct:group_entry::list
flow_refs	udatapath/meter_entry.h	/^	struct list                 flow_refs;		\/* references to flows referencing the meter. *\/$/;"	m	struct:meter_entry	typeref:struct:meter_entry::list
flow_removed_mask	include/openflow/openflow.h	/^    uint32_t flow_removed_mask[2];\/* Bitmasks of OFPRR_* values. *\/$/;"	m	struct:ofp_async_config
flow_removed_mask	oflib/ofl-structs.h	/^    uint32_t flow_removed_mask[2];\/* Bitmasks of OFPRR_* values. *\/$/;"	m	struct:ofl_async_config
flow_stats_first	lib/ofp.c	/^flow_stats_first(struct flow_stats_iterator *iter,$/;"	f
flow_stats_get	include/openflow/of_hw_api.h	/^    int (*flow_stats_get)(of_hw_driver_t *hw_drv, struct ofp_match,$/;"	m	struct:of_hw_driver
flow_stats_iterator	lib/ofp.h	/^struct flow_stats_iterator {$/;"	s
flow_stats_next	lib/ofp.c	/^flow_stats_next(struct flow_stats_iterator *iter)$/;"	f
flow_table	udatapath/flow_table.h	/^struct flow_table {$/;"	s
flow_table_add	udatapath/flow_table.c	/^flow_table_add(struct flow_table *table, struct ofl_msg_flow_mod *mod, bool check_overlap, bool *match_kept, bool *insts_kept) {$/;"	f	file:
flow_table_aggregate_stats	udatapath/flow_table.c	/^flow_table_aggregate_stats(struct flow_table *table, struct ofl_msg_multipart_request_flow *msg,$/;"	f
flow_table_create	udatapath/flow_table.c	/^flow_table_create(struct datapath *dp, uint8_t table_id) {$/;"	f
flow_table_create_property	udatapath/flow_table.c	/^flow_table_create_property(struct ofl_table_feature_prop_header **prop, enum ofp_table_feature_prop_type type){$/;"	f	file:
flow_table_delete	udatapath/flow_table.c	/^flow_table_delete(struct flow_table *table, struct ofl_msg_flow_mod *mod, bool strict) {$/;"	f	file:
flow_table_destroy	udatapath/flow_table.c	/^flow_table_destroy(struct flow_table *table) {$/;"	f
flow_table_features	udatapath/flow_table.c	/^flow_table_features(struct ofl_table_features *features){$/;"	f	file:
flow_table_flow_mod	udatapath/flow_table.c	/^flow_table_flow_mod(struct flow_table *table, struct ofl_msg_flow_mod *mod, bool *match_kept, bool *insts_kept) {$/;"	f
flow_table_lookup	udatapath/flow_table.c	/^flow_table_lookup(struct flow_table *table, struct packet *pkt) {$/;"	f
flow_table_modify	udatapath/flow_table.c	/^flow_table_modify(struct flow_table *table, struct ofl_msg_flow_mod *mod, bool strict, bool *insts_kept) {$/;"	f	file:
flow_table_stats	udatapath/flow_table.c	/^flow_table_stats(struct flow_table *table, struct ofl_msg_multipart_request_flow *msg,$/;"	f
flow_table_timeout	udatapath/flow_table.c	/^flow_table_timeout(struct flow_table *table) {$/;"	f
flush_queue	lib/rconn.c	/^flush_queue(struct rconn *rc)$/;"	f	file:
fmf_all_tables_full	lib/ofpstat.h	/^		uint64_t fmf_all_tables_full;$/;"	m	struct:ofpstat::__anon3
fmf_emerg	lib/ofpstat.h	/^		uint64_t fmf_emerg;$/;"	m	struct:ofpstat::__anon3
fmf_eperm	lib/ofpstat.h	/^		uint64_t fmf_eperm;$/;"	m	struct:ofpstat::__anon3
fmf_overlap	lib/ofpstat.h	/^		uint64_t fmf_overlap;$/;"	m	struct:ofpstat::__anon3
force	lib/daemon.c	/^static bool force;$/;"	v	file:
force	utilities/ofp-kill.c	/^static bool force;$/;"	v	file:
force_stop	debian/openflow-controller.init	/^force_stop() {$/;"	f
force_stop	debian/openflow-switch.init	/^force_stop() {$/;"	f
format_log_message	lib/vlog.c	/^format_log_message(enum vlog_module module, enum vlog_level level,$/;"	f	file:
forward_delay	lib/stp.c	/^    int forward_delay;              \/* 8.5.3.6: Delay between state changes. *\/$/;"	m	struct:stp	file:
forward_delay	lib/stp.c	/^    uint16_t forward_delay;        \/* 8.5.1.8: State progression delay. *\/$/;"	m	struct:stp_config_bpdu	file:
forward_delay_timer	lib/stp.c	/^    struct stp_timer forward_delay_timer; \/* 8.5.6.2: State change timer. *\/$/;"	m	struct:stp_port	typeref:struct:stp_port::stp_timer	file:
frames	lib/backtrace.h	/^    uintptr_t frames[BACKTRACE_MAX_FRAMES];$/;"	m	struct:backtrace
free	lib/mac-learning.c	/^    struct list free;           \/* Not-in-use entries. *\/$/;"	m	struct:mac_learning	typeref:struct:mac_learning::list	file:
free	oflib/ofl.h	/^    int     (*free)             (struct ofl_action_header *act);$/;"	m	struct:ofl_exp_act
free	oflib/ofl.h	/^    int     (*free)             (struct ofl_msg_experimenter *msg);$/;"	m	struct:ofl_exp_msg
free	oflib/ofl.h	/^    int     (*free)            (struct ofl_instruction_header *i);$/;"	m	struct:ofl_exp_inst
free	oflib/ofl.h	/^    int     (*free)           (struct ofl_match_header *m);$/;"	m	struct:ofl_exp_match
free_hook_func	lib/leak-checker.c	/^    free_hook_type *free_hook_func;$/;"	m	struct:hooks	file:
free_hook_type	lib/leak-checker.c	/^typedef void free_hook_type(void *, const void *);$/;"	t	file:
free_mac_entry	lib/mac-learning.c	/^free_mac_entry(struct mac_learning *ml, struct mac_entry *e)$/;"	f	file:
free_pid	lib/netlink.c	/^free_pid(uint32_t pid)$/;"	f	file:
func	lib/fatal-signal.c	/^    void (*func)(void *aux);$/;"	m	struct:hook	file:
func_cl_dashL	build-aux/compile	/^func_cl_dashL ()$/;"	f
func_cl_dashl	build-aux/compile	/^func_cl_dashl ()$/;"	f
func_cl_wrapper	build-aux/compile	/^func_cl_wrapper ()$/;"	f
func_file_conv	build-aux/compile	/^func_file_conv ()$/;"	f
function	lib/poll-loop.c	/^    poll_fd_func *function;     \/* Callback function, if any, or null. *\/$/;"	m	struct:poll_waiter	file:
fuzz	lib/dhcp-client.c	/^fuzz(unsigned int x, int max_fuzz)$/;"	f	file:
gcd	udatapath/group_entry.c	/^gcd(uint16_t a, uint16_t b) {$/;"	f	file:
gcd_weight	udatapath/group_entry.c	/^    uint16_t gcd_weight;  \/* g.c.d. of bucket weights. *\/$/;"	m	struct:group_entry_wrr_data	file:
gen_datapath_id	udatapath/datapath.c	/^gen_datapath_id(void) {$/;"	f	file:
generation_id	include/openflow/openflow.h	/^	uint64_t generation_id;   \/* Master Election Generation Id *\/$/;"	m	struct:ofp_role_request
generation_id	oflib/ofl-messages.h	/^	uint64_t generation_id;   \/* Master Election Generation Id *\/$/;"	m	struct:ofl_msg_role_request
generation_id	udatapath/datapath.h	/^    uint64_t generation_id;     \/* Identifies a given mastership view *\/$/;"	m	struct:datapath
genlmsghdr	lib/netlink-protocol.h	/^struct genlmsghdr {$/;"	s
get_async	utilities/dpctl.c	/^get_async(struct vconn *vconn, int argc UNUSED, char *argv[] UNUSED){$/;"	f	file:
get_bit	udatapath/match_std.c	/^get_bit(uint32_t n, int bitnum)$/;"	f
get_config	utilities/dpctl.c	/^get_config(struct vconn *vconn, int argc UNUSED, char *argv[] UNUSED) {$/;"	f	file:
get_controller_mac	secchan/in-band.c	/^get_controller_mac(struct in_band_data *in_band)$/;"	f	file:
get_coordinates	udatapath/dp_exp_bme.c	/^get_coordinates(uint64_t addr, int *x, int *y)$/;"	f	file:
get_flags	lib/netdev.c	/^get_flags(const char *netdev_name, int *flags)$/;"	f	file:
get_hooks	lib/leak-checker.c	/^get_hooks(struct hooks *hooks)$/;"	f	file:
get_ipv6_address	lib/netdev.c	/^get_ipv6_address(const char *name, struct in6_addr *in6)$/;"	f	file:
get_lru	lib/mac-learning.c	/^get_lru(struct mac_learning *ml, struct mac_entry **e)$/;"	f	file:
get_max_fds	lib/socket-util.c	/^get_max_fds(void)$/;"	f
get_max_stack	lib/backtrace.c	/^get_max_stack(void)$/;"	f	file:
get_ofp_packet_eth_header	secchan/secchan.c	/^get_ofp_packet_eth_header(struct relay *r, struct ofp_packet_in **opip,$/;"	f
get_ofp_packet_in	secchan/secchan.c	/^get_ofp_packet_in(struct relay *r)$/;"	f
get_ofp_packet_payload	secchan/in-band.c	/^get_ofp_packet_payload(struct ofp_packet_in *opi, struct ofpbuf *payload)$/;"	f
get_option_class	lib/dhcp.c	/^get_option_class(int code)$/;"	f	file:
get_oxm_value	oflib/oxm-match.c	/^static uint8_t* get_oxm_value(struct ofl_match *m, uint32_t header){$/;"	f	file:
get_pending_flow	udatapath/dp_actions.c	/^get_pending_flow(struct datapath *dp, uint32_t flow_label)$/;"	f	file:
get_pending_flow	udatapath/dp_exp_bme.c	/^get_pending_flow(struct datapath *dp, uint32_t flow_label)$/;"	f	file:
get_pidfile	lib/daemon.c	/^get_pidfile(void)$/;"	f
get_port_name	secchan/port-watcher.c	/^get_port_name(const struct ofp_port *port, char *name, size_t name_size)$/;"	f
get_socket_error	lib/socket-util.c	/^get_socket_error(int fd) $/;"	f
get_token	secchan/ratelimit.c	/^get_token(struct rate_limiter *rl)$/;"	f	file:
get_unaligned_u16	lib/unaligned.h	/^static inline uint16_t get_unaligned_u16(const uint16_t *p_)$/;"	f
get_unaligned_u32	lib/unaligned.h	/^static inline uint32_t get_unaligned_u32(const uint32_t *p_)$/;"	f
get_unaligned_u64	lib/unaligned.h	/^static inline uint64_t get_unaligned_u64(const uint64_t *p_)$/;"	f
get_unix_name_len	lib/socket-util.c	/^get_unix_name_len(socklen_t sun_len)$/;"	f
giaddr	lib/dhcp.h	/^    uint32_t giaddr;            \/* Relay agent IP address. *\/$/;"	m	struct:dhcp_header
giaddr	lib/dhcp.h	/^    uint32_t giaddr;            \/* Relay agent IP address. *\/$/;"	m	struct:dhcp_msg
glob	utilities/ofp-pki.in	/^glob() {$/;"	f
got_feature_reply	secchan/port-watcher.c	/^    bool got_feature_reply;$/;"	m	struct:port_watcher	file:
group	udatapath/dp_actions.c	/^group(struct packet *pkt, struct ofl_action_group *act) {$/;"	f	file:
group_entry	udatapath/group_entry.h	/^struct group_entry {$/;"	s
group_entry_add_flow_ref	udatapath/group_entry.c	/^group_entry_add_flow_ref(struct group_entry *entry, struct flow_entry *fe) {$/;"	f
group_entry_create	udatapath/group_entry.c	/^group_entry_create(struct datapath *dp, struct group_table *table, struct ofl_msg_group_mod *mod) {$/;"	f
group_entry_del_flow_ref	udatapath/group_entry.c	/^group_entry_del_flow_ref(struct group_entry *entry, struct flow_entry *fe) {$/;"	f
group_entry_destroy	udatapath/group_entry.c	/^group_entry_destroy(struct group_entry *entry) {$/;"	f
group_entry_execute	udatapath/group_entry.c	/^group_entry_execute(struct group_entry *entry,$/;"	f
group_entry_has_out_group	udatapath/group_entry.c	/^group_entry_has_out_group(struct group_entry *entry, uint32_t group_id) {$/;"	f
group_entry_update	udatapath/group_entry.c	/^group_entry_update(struct group_entry *entry){$/;"	f
group_entry_wrr_data	udatapath/group_entry.c	/^struct group_entry_wrr_data {$/;"	s	file:
group_features	utilities/dpctl.c	/^group_features(struct vconn *vconn, int argc UNUSED, char *argv[] UNUSED){$/;"	f	file:
group_id	include/openflow/openflow.h	/^	uint32_t group_id;            \/* Group identifier. *\/$/;"	m	struct:ofp_group_mod
group_id	include/openflow/openflow.h	/^	uint32_t group_id;     \/* Group identifier. *\/$/;"	m	struct:ofp_group_stats
group_id	include/openflow/openflow.h	/^	uint32_t group_id; \/* All groups if OFPG_ALL. *\/$/;"	m	struct:ofp_group_stats_request
group_id	include/openflow/openflow.h	/^	uint32_t group_id; \/* Group identifier. *\/$/;"	m	struct:ofp_action_group
group_id	include/openflow/openflow.h	/^	uint32_t group_id; \/* Group identifier. *\/$/;"	m	struct:ofp_group_desc_stats
group_id	oflib/ofl-actions.h	/^    uint32_t   group_id;  \/* Group identifier. *\/$/;"	m	struct:ofl_action_group
group_id	oflib/ofl-messages.h	/^    uint32_t                     group_id;    \/* Group identifier. *\/$/;"	m	struct:ofl_msg_group_mod
group_id	oflib/ofl-messages.h	/^    uint32_t   group_id; \/* All groups if OFPG_ALL. *\/$/;"	m	struct:ofl_msg_multipart_request_group
group_id	oflib/ofl-structs.h	/^    uint32_t            group_id;    \/* Group identifier. *\/$/;"	m	struct:ofl_group_desc_stats
group_id	oflib/ofl-structs.h	/^    uint32_t   group_id;$/;"	m	struct:ofl_group_stats
group_id	udatapath/flow_entry.c	/^    uint32_t      group_id;$/;"	m	struct:group_ref_entry	file:
group_id	udatapath/group_table.c	/^	uint32_t      group_id;$/;"	m	struct:group_visit	file:
group_mod	utilities/dpctl.c	/^group_mod(struct vconn *vconn, int argc, char *argv[]) {$/;"	f	file:
group_mod_cmd_names	utilities/dpctl.h	/^static struct names16 group_mod_cmd_names[] = {$/;"	v	typeref:struct:names16
group_names	utilities/dpctl.h	/^static struct names32 group_names[] = {$/;"	v	typeref:struct:names32
group_ref_entry	udatapath/flow_entry.c	/^struct group_ref_entry {$/;"	s	file:
group_refs	udatapath/flow_entry.h	/^    struct list              group_refs;  \/* list of groups referencing the flow. *\/$/;"	m	struct:flow_entry	typeref:struct:flow_entry::list
group_table	udatapath/group_table.h	/^struct group_table {$/;"	s
group_table_add	udatapath/group_table.c	/^group_table_add(struct group_table *table, struct ofl_msg_group_mod *mod) {$/;"	f	file:
group_table_create	udatapath/group_table.c	/^group_table_create(struct datapath *dp) {$/;"	f
group_table_delete	udatapath/group_table.c	/^group_table_delete(struct group_table *table, struct ofl_msg_group_mod *mod) {$/;"	f	file:
group_table_destroy	udatapath/group_table.c	/^group_table_destroy(struct group_table *table) {$/;"	f
group_table_execute	udatapath/group_table.c	/^group_table_execute(struct group_table *table, struct packet *packet, uint32_t group_id) {$/;"	f
group_table_find	udatapath/group_table.c	/^group_table_find(struct group_table *table, uint32_t group_id) {$/;"	f
group_table_handle_group_mod	udatapath/group_table.c	/^group_table_handle_group_mod(struct group_table *table, struct ofl_msg_group_mod *mod,$/;"	f
group_table_handle_stats_request_group	udatapath/group_table.c	/^group_table_handle_stats_request_group(struct group_table *table,$/;"	f
group_table_handle_stats_request_group_desc	udatapath/group_table.c	/^group_table_handle_stats_request_group_desc(struct group_table *table,$/;"	f
group_table_handle_stats_request_group_features	udatapath/group_table.c	/^group_table_handle_stats_request_group_features(struct group_table *table,$/;"	f
group_table_modify	udatapath/group_table.c	/^group_table_modify(struct group_table *table, struct ofl_msg_group_mod *mod) {$/;"	f	file:
group_type_names	utilities/dpctl.h	/^static struct names8 group_type_names[] = {$/;"	v	typeref:struct:names8
group_visit	udatapath/group_table.c	/^struct group_visit {$/;"	s	file:
groups	udatapath/datapath.h	/^    struct group_table *groups; \/* Group tables *\/$/;"	m	struct:datapath	typeref:struct:datapath::group_table
half	secchan/secchan.h	/^struct half {$/;"	s
halves	secchan/secchan.h	/^    struct half halves[2];$/;"	m	struct:relay	typeref:struct:relay::half
handle_control_barrier_request	udatapath/dp_control.c	/^handle_control_barrier_request(struct datapath *dp,$/;"	f	file:
handle_control_echo_reply	udatapath/dp_control.c	/^handle_control_echo_reply(struct datapath *dp UNUSED,$/;"	f	file:
handle_control_echo_request	udatapath/dp_control.c	/^handle_control_echo_request(struct datapath *dp,$/;"	f	file:
handle_control_features_request	udatapath/dp_control.c	/^handle_control_features_request(struct datapath *dp,$/;"	f	file:
handle_control_get_config_request	udatapath/dp_control.c	/^handle_control_get_config_request(struct datapath *dp,$/;"	f	file:
handle_control_msg	udatapath/dp_control.c	/^handle_control_msg(struct datapath *dp, struct ofl_msg_header *msg,$/;"	f
handle_control_packet_out	udatapath/dp_control.c	/^handle_control_packet_out(struct datapath *dp, struct ofl_msg_packet_out *msg,$/;"	f	file:
handle_control_set_config	udatapath/dp_control.c	/^handle_control_set_config(struct datapath *dp, struct ofl_msg_set_config *msg,$/;"	f	file:
handle_control_stats_request	udatapath/dp_control.c	/^handle_control_stats_request(struct datapath *dp,$/;"	f	file:
handle_control_stats_request_desc	udatapath/dp_control.c	/^handle_control_stats_request_desc(struct datapath *dp,$/;"	f	file:
handle_std	udatapath/packet.h	/^    struct packet_handle_std  *handle_std; \/* handler for standard match structure *\/$/;"	m	struct:packet	typeref:struct:packet::packet_handle_std
handler	utilities/dpctl.c	/^    void (*handler)(struct vconn *vconn, int argc, char *argv[]);$/;"	m	struct:command	file:
hard_entries	udatapath/flow_table.h	/^    struct list               hard_entries;   \/* list of entries with hard timeout;$/;"	m	struct:flow_table	typeref:struct:flow_table::list
hard_node	udatapath/flow_entry.h	/^    struct list              hard_node;$/;"	m	struct:flow_entry	typeref:struct:flow_entry::list
hard_timeout	include/openflow/openflow.h	/^	uint16_t hard_timeout;  \/* Hard timeout from original flow mod. *\/$/;"	m	struct:ofp_flow_removed
hard_timeout	include/openflow/openflow.h	/^	uint16_t hard_timeout;  \/* Max time before discarding (seconds). *\/$/;"	m	struct:ofp_flow_mod
hard_timeout	include/openflow/openflow.h	/^	uint16_t hard_timeout;  \/* Number of seconds before expiration. *\/$/;"	m	struct:ofp_flow_stats
hard_timeout	oflib/ofl-messages.h	/^    uint16_t                        hard_timeout; \/* Max time before discarding (secs). *\/$/;"	m	struct:ofl_msg_flow_mod
hard_timeout	oflib/ofl-structs.h	/^    uint16_t                        hard_timeout;  \/* Number of seconds before expiration. *\/$/;"	m	struct:ofl_flow_stats
has_ca_cert	lib/vconn-ssl.c	/^static bool has_private_key, has_certificate, has_ca_cert;$/;"	v	file:
has_certificate	lib/vconn-ssl.c	/^static bool has_private_key, has_certificate, has_ca_cert;$/;"	v	file:
has_flow_ref	udatapath/group_entry.c	/^has_flow_ref(struct group_entry *entry, struct flow_entry *fe) {$/;"	f	file:
has_flow_ref	udatapath/meter_entry.c	/^has_flow_ref(struct meter_entry *entry, struct flow_entry *fe) {$/;"	f	file:
has_group_ref	udatapath/flow_entry.c	/^has_group_ref(struct flow_entry *entry, uint32_t group_id) {$/;"	f	file:
has_meter_ref	udatapath/flow_entry.c	/^has_meter_ref(struct flow_entry *entry, uint32_t meter_id) {$/;"	f	file:
has_private_key	lib/vconn-ssl.c	/^static bool has_private_key, has_certificate, has_ca_cert;$/;"	v	file:
hash	lib/hmap.h	/^    size_t hash;                \/* Hash value. *\/$/;"	m	struct:hmap_node
hash_2words	lib/hash.c	/^hash_2words(uint32_t a, uint32_t b)$/;"	f
hash_3words	lib/hash.c	/^hash_3words(uint32_t a, uint32_t b, uint32_t c)$/;"	f
hash_bytes	lib/hash.c	/^hash_bytes(const void *p_, size_t n, uint32_t basis)$/;"	f
hash_double	lib/hash.h	/^static inline uint32_t hash_double(double x, uint32_t basis)$/;"	f
hash_int	lib/hash.h	/^static inline uint32_t hash_int(uint32_t x, uint32_t basis)$/;"	f
hash_name	lib/shash.c	/^hash_name(const char *name)$/;"	f	file:
hash_node	lib/mac-learning.c	/^    struct list hash_node;      \/* Element in a mac_learning 'table' list. *\/$/;"	m	struct:mac_entry	typeref:struct:mac_entry::list	file:
hash_pointer	lib/hash.h	/^static inline uint32_t hash_pointer(const void *p, uint32_t basis)$/;"	f
hash_string	lib/hash.h	/^static inline uint32_t hash_string(const char *s, uint32_t basis)$/;"	f
hash_words	lib/hash.c	/^hash_words(const uint32_t *p, size_t n, uint32_t basis)$/;"	f
head	lib/queue.h	/^    struct ofpbuf *head;        \/* First queued packet, null if n == 0. *\/$/;"	m	struct:ofp_queue	typeref:struct:ofp_queue::ofpbuf
header	include/openflow/nicira-ext.h	/^    struct ofp_header header;$/;"	m	struct:nicira_header	typeref:struct:nicira_header::ofp_header
header	include/openflow/nicira-ext.h	/^    struct ofp_header header;$/;"	m	struct:nxt_tun_id_cookie	typeref:struct:nxt_tun_id_cookie::ofp_header
header	include/openflow/openflow-ext.h	/^    struct ofp_extension_header header;$/;"	m	struct:openflow_ext_set_dp_desc	typeref:struct:openflow_ext_set_dp_desc::ofp_extension_header
header	include/openflow/openflow-ext.h	/^    struct ofp_extension_header header;$/;"	m	struct:openflow_queue_command_header	typeref:struct:openflow_queue_command_header::ofp_extension_header
header	include/openflow/openflow-ext.h	/^    struct ofp_header header;$/;"	m	struct:ofp_extension_header	typeref:struct:ofp_extension_header::ofp_header
header	include/openflow/openflow.h	/^	struct ofp_header header; \/* Type OFPT_EXPERIMENTER. *\/$/;"	m	struct:ofp_experimenter_header	typeref:struct:ofp_experimenter_header::ofp_header
header	include/openflow/openflow.h	/^	struct ofp_header header; \/* Type OFPT_ROLE_REQUEST\/OFPT_ROLE_REPLY. *\/$/;"	m	struct:ofp_role_request	typeref:struct:ofp_role_request::ofp_header
header	include/openflow/openflow.h	/^	struct ofp_header header;$/;"	m	struct:ofp_error_experimenter_msg	typeref:struct:ofp_error_experimenter_msg::ofp_header
header	include/openflow/openflow.h	/^	struct ofp_header header;$/;"	m	struct:ofp_error_msg	typeref:struct:ofp_error_msg::ofp_header
header	include/openflow/openflow.h	/^	struct ofp_header header;$/;"	m	struct:ofp_flow_mod	typeref:struct:ofp_flow_mod::ofp_header
header	include/openflow/openflow.h	/^	struct ofp_header header;$/;"	m	struct:ofp_flow_removed	typeref:struct:ofp_flow_removed::ofp_header
header	include/openflow/openflow.h	/^	struct ofp_header header;$/;"	m	struct:ofp_group_mod	typeref:struct:ofp_group_mod::ofp_header
header	include/openflow/openflow.h	/^	struct ofp_header header;$/;"	m	struct:ofp_multipart_reply	typeref:struct:ofp_multipart_reply::ofp_header
header	include/openflow/openflow.h	/^	struct ofp_header header;$/;"	m	struct:ofp_multipart_request	typeref:struct:ofp_multipart_request::ofp_header
header	include/openflow/openflow.h	/^	struct ofp_header header;$/;"	m	struct:ofp_packet_in	typeref:struct:ofp_packet_in::ofp_header
header	include/openflow/openflow.h	/^	struct ofp_header header;$/;"	m	struct:ofp_packet_out	typeref:struct:ofp_packet_out::ofp_header
header	include/openflow/openflow.h	/^	struct ofp_header header;$/;"	m	struct:ofp_port_mod	typeref:struct:ofp_port_mod::ofp_header
header	include/openflow/openflow.h	/^	struct ofp_header header;$/;"	m	struct:ofp_port_status	typeref:struct:ofp_port_status::ofp_header
header	include/openflow/openflow.h	/^	struct ofp_header header;$/;"	m	struct:ofp_queue_get_config_reply	typeref:struct:ofp_queue_get_config_reply::ofp_header
header	include/openflow/openflow.h	/^	struct ofp_header header;$/;"	m	struct:ofp_queue_get_config_request	typeref:struct:ofp_queue_get_config_request::ofp_header
header	include/openflow/openflow.h	/^	struct ofp_header header;$/;"	m	struct:ofp_switch_config	typeref:struct:ofp_switch_config::ofp_header
header	include/openflow/openflow.h	/^	struct ofp_header header;$/;"	m	struct:ofp_switch_features	typeref:struct:ofp_switch_features::ofp_header
header	include/openflow/openflow.h	/^	struct ofp_header header;$/;"	m	struct:ofp_table_mod	typeref:struct:ofp_table_mod::ofp_header
header	include/openflow/openflow.h	/^    struct ofp_header header; \/* OFPT_GET_ASYNC_REPLY or OFPT_SET_ASYNC. *\/$/;"	m	struct:ofp_async_config	typeref:struct:ofp_async_config::ofp_header
header	include/openflow/openflow.h	/^    struct ofp_header header;$/;"	m	struct:ofp_hello	typeref:struct:ofp_hello::ofp_header
header	include/openflow/openflow.h	/^    struct ofp_header header;$/;"	m	struct:ofp_meter_mod	typeref:struct:ofp_meter_mod::ofp_header
header	lib/ofp.h	/^    struct ofp_action_header header;$/;"	m	union:ofp_action	typeref:struct:ofp_action::ofp_action_header
header	lib/stp.c	/^    struct stp_bpdu_header header; \/* Type STP_TYPE_CONFIG. *\/$/;"	m	struct:stp_config_bpdu	typeref:struct:stp_config_bpdu::stp_bpdu_header	file:
header	lib/stp.c	/^    struct stp_bpdu_header header; \/* Type STP_TYPE_TCN. *\/$/;"	m	struct:stp_tcn_bpdu	typeref:struct:stp_tcn_bpdu::stp_bpdu_header	file:
header	oflib-exp/ofl-exp-bme.h	/^    struct ofl_action_header   header; \/* OFPAT_EXPERIMENTER *\/$/;"	m	struct:ofl_bme_serialize	typeref:struct:ofl_bme_serialize::ofl_action_header
header	oflib-exp/ofl-exp-bme.h	/^    struct ofl_action_header   header; \/* OFPAT_EXPERIMENTER *\/$/;"	m	struct:ofl_bme_set_metadata	typeref:struct:ofl_bme_set_metadata::ofl_action_header
header	oflib-exp/ofl-exp-bme.h	/^    struct ofl_action_header   header; \/* OFPAT_EXPERIMENTER *\/$/;"	m	struct:ofl_bme_set_metadata_from_counter	typeref:struct:ofl_bme_set_metadata_from_counter::ofl_action_header
header	oflib-exp/ofl-exp-bme.h	/^    struct ofl_action_header   header; \/* OFPAT_EXPERIMENTER *\/$/;"	m	struct:ofl_bme_set_mpls_label	typeref:struct:ofl_bme_set_mpls_label::ofl_action_header
header	oflib-exp/ofl-exp-bme.h	/^    struct ofl_action_header   header; \/* OFPAT_EXPERIMENTER *\/$/;"	m	struct:ofl_bme_update_distance	typeref:struct:ofl_bme_update_distance::ofl_action_header
header	oflib-exp/ofl-exp-bme.h	/^    struct ofl_action_header   header; \/* OFPAT_EXPERIMENTER *\/$/;"	m	struct:ofl_bme_xor_packet	typeref:struct:ofl_bme_xor_packet::ofl_action_header
header	oflib-exp/ofl-exp-bme.h	/^    struct ofl_action_header header;  \/* OFPAT_EXPERIMENTER *\/$/;"	m	struct:ofl_bme_action_header	typeref:struct:ofl_bme_action_header::ofl_action_header
header	oflib-exp/ofl-exp-nicira.h	/^    struct ofl_exp_nicira_msg_header   header; \/* NXT_ROLE_REQUEST|REPLY *\/$/;"	m	struct:ofl_exp_nicira_msg_role	typeref:struct:ofl_exp_nicira_msg_role::ofl_exp_nicira_msg_header
header	oflib-exp/ofl-exp-nicira.h	/^    struct ofl_msg_experimenter   header; \/* NX_VENDOR_ID *\/$/;"	m	struct:ofl_exp_nicira_msg_header	typeref:struct:ofl_exp_nicira_msg_header::ofl_msg_experimenter
header	oflib-exp/ofl-exp-openflow.h	/^    struct ofl_exp_openflow_msg_header   header; \/* OFP_EXT_QUEUE_MODIFY|DELETE *\/$/;"	m	struct:ofl_exp_openflow_msg_queue	typeref:struct:ofl_exp_openflow_msg_queue::ofl_exp_openflow_msg_header
header	oflib-exp/ofl-exp-openflow.h	/^    struct ofl_exp_openflow_msg_header   header; \/* OFP_EXT_SET_DESC *\/$/;"	m	struct:ofl_exp_openflow_msg_set_dp_desc	typeref:struct:ofl_exp_openflow_msg_set_dp_desc::ofl_exp_openflow_msg_header
header	oflib-exp/ofl-exp-openflow.h	/^    struct ofl_msg_experimenter   header; \/* OPENFLOW_VENDOR_ID *\/$/;"	m	struct:ofl_exp_openflow_msg_header	typeref:struct:ofl_exp_openflow_msg_header::ofl_msg_experimenter
header	oflib/ofl-actions.h	/^    struct ofl_action_header   header; \/* OFPAT_EXPERIMENTER. *\/$/;"	m	struct:ofl_action_experimenter	typeref:struct:ofl_action_experimenter::ofl_action_header
header	oflib/ofl-actions.h	/^    struct ofl_action_header   header; \/* OFPAT_GROUP. *\/$/;"	m	struct:ofl_action_group	typeref:struct:ofl_action_group::ofl_action_header
header	oflib/ofl-actions.h	/^    struct ofl_action_header   header; \/* OFPAT_OUTPUT. *\/$/;"	m	struct:ofl_action_output	typeref:struct:ofl_action_output::ofl_action_header
header	oflib/ofl-actions.h	/^    struct ofl_action_header   header; \/* OFPAT_POP_MPLS. *\/$/;"	m	struct:ofl_action_pop_mpls	typeref:struct:ofl_action_pop_mpls::ofl_action_header
header	oflib/ofl-actions.h	/^    struct ofl_action_header   header; \/* OFPAT_PUSH_VLAN\/MPLS\/PBB. *\/$/;"	m	struct:ofl_action_push	typeref:struct:ofl_action_push::ofl_action_header
header	oflib/ofl-actions.h	/^    struct ofl_action_header   header; \/* OFPAT_SET_FIELD. *\/$/;"	m	struct:ofl_action_set_field	typeref:struct:ofl_action_set_field::ofl_action_header
header	oflib/ofl-actions.h	/^    struct ofl_action_header   header; \/* OFPAT_SET_MPLS_LABEL. *\/$/;"	m	struct:ofl_action_set_mpls_label	typeref:struct:ofl_action_set_mpls_label::ofl_action_header
header	oflib/ofl-actions.h	/^    struct ofl_action_header   header; \/* OFPAT_SET_MPLS_LABEL_FROM_COUNTER. *\/$/;"	m	struct:ofl_action_set_mpls_label_from_counter	typeref:struct:ofl_action_set_mpls_label_from_counter::ofl_action_header
header	oflib/ofl-actions.h	/^    struct ofl_action_header   header; \/* OFPAT_SET_MPLS_LABEL_FROM_COUNTER. *\/$/;"	m	struct:ofl_action_xor_decode	typeref:struct:ofl_action_xor_decode::ofl_action_header
header	oflib/ofl-actions.h	/^    struct ofl_action_header   header; \/* OFPAT_SET_MPLS_LABEL_FROM_COUNTER. *\/$/;"	m	struct:ofl_action_xor_encode	typeref:struct:ofl_action_xor_encode::ofl_action_header
header	oflib/ofl-actions.h	/^    struct ofl_action_header   header; \/* OFPAT_SET_MPLS_TTL. *\/$/;"	m	struct:ofl_action_mpls_ttl	typeref:struct:ofl_action_mpls_ttl::ofl_action_header
header	oflib/ofl-actions.h	/^    struct ofl_action_header   header; \/* OFPAT_SET_NW_TTL. *\/$/;"	m	struct:ofl_action_set_nw_ttl	typeref:struct:ofl_action_set_nw_ttl::ofl_action_header
header	oflib/ofl-actions.h	/^    struct ofl_action_header   header; \/* OFPAT_SET_PARITY_MPLS_LABEL. *\/$/;"	m	struct:ofl_action_set_parity_mpls_label	typeref:struct:ofl_action_set_parity_mpls_label::ofl_action_header
header	oflib/ofl-actions.h	/^    struct ofl_action_header   header; \/* OFPAT_SET_QUEUE. *\/$/;"	m	struct:ofl_action_set_queue	typeref:struct:ofl_action_set_queue::ofl_action_header
header	oflib/ofl-messages.h	/^	struct ofl_msg_header header; \/* Type OFPT_ROLE_REQUEST\/OFPT_ROLE_REPLY. *\/$/;"	m	struct:ofl_msg_role_request	typeref:struct:ofl_msg_role_request::ofl_msg_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_header   header;   \/* OFPT_TABLE_MOD *\/$/;"	m	struct:ofl_msg_table_mod	typeref:struct:ofl_msg_table_mod::ofl_msg_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_header   header;  \/* OFPT_SET_CONFIG *\/$/;"	m	struct:ofl_msg_set_config	typeref:struct:ofl_msg_set_config::ofl_msg_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_header   header; \/* OFPT_ECHO_REQUEST|REPLY *\/$/;"	m	struct:ofl_msg_echo	typeref:struct:ofl_msg_echo::ofl_msg_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_header   header; \/* OFPT_ERROR *\/$/;"	m	struct:ofl_msg_error	typeref:struct:ofl_msg_error::ofl_msg_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_header   header; \/* OFPT_EXPERIMENTER *\/$/;"	m	struct:ofl_msg_experimenter	typeref:struct:ofl_msg_experimenter::ofl_msg_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_header   header; \/* OFPT_FEATURES_REPLY *\/$/;"	m	struct:ofl_msg_features_reply	typeref:struct:ofl_msg_features_reply::ofl_msg_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_header   header; \/* OFPT_FLOW_MOD, *\/$/;"	m	struct:ofl_msg_flow_mod	typeref:struct:ofl_msg_flow_mod::ofl_msg_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_header   header; \/* OFPT_FLOW_REMOVED *\/$/;"	m	struct:ofl_msg_flow_removed	typeref:struct:ofl_msg_flow_removed::ofl_msg_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_header   header; \/* OFPT_GET_CONFIG_REPLY *\/$/;"	m	struct:ofl_msg_get_config_reply	typeref:struct:ofl_msg_get_config_reply::ofl_msg_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_header   header; \/* OFPT_GROUP_MOD, *\/$/;"	m	struct:ofl_msg_group_mod	typeref:struct:ofl_msg_group_mod::ofl_msg_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_header   header; \/* OFPT_MULTIPART_REPLY *\/$/;"	m	struct:ofl_msg_multipart_reply_header	typeref:struct:ofl_msg_multipart_reply_header::ofl_msg_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_header   header; \/* OFPT_MULTIPART_REQUEST *\/$/;"	m	struct:ofl_msg_multipart_request_header	typeref:struct:ofl_msg_multipart_request_header::ofl_msg_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_header   header; \/* OFPT_PACKET_IN *\/$/;"	m	struct:ofl_msg_packet_in	typeref:struct:ofl_msg_packet_in::ofl_msg_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_header   header; \/* OFPT_PACKET_OUT, *\/$/;"	m	struct:ofl_msg_packet_out	typeref:struct:ofl_msg_packet_out::ofl_msg_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_header   header; \/* OFPT_PORT_MOD *\/$/;"	m	struct:ofl_msg_port_mod	typeref:struct:ofl_msg_port_mod::ofl_msg_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_header   header; \/* OFPT_PORT_STATUS *\/$/;"	m	struct:ofl_msg_port_status	typeref:struct:ofl_msg_port_status::ofl_msg_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_header   header; \/* OFPT_QUEUE_GET_CONFIG_REQUEST *\/$/;"	m	struct:ofl_msg_queue_get_config_request	typeref:struct:ofl_msg_queue_get_config_request::ofl_msg_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_header header;   \/* OFPT_QUEUE_GET_CONFIG_REPLY *\/$/;"	m	struct:ofl_msg_queue_get_config_reply	typeref:struct:ofl_msg_queue_get_config_reply::ofl_msg_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_header header; \/* OFPT_GET_ASYNC_REPLY or OFPT_SET_ASYNC. *\/$/;"	m	struct:ofl_msg_async_config	typeref:struct:ofl_msg_async_config::ofl_msg_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_header header;$/;"	m	struct:ofl_msg_meter_mod	typeref:struct:ofl_msg_meter_mod::ofl_msg_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_reply_header   header; \/* OFPMP_AGGREGATE *\/$/;"	m	struct:ofl_msg_multipart_reply_aggregate	typeref:struct:ofl_msg_multipart_reply_aggregate::ofl_msg_multipart_reply_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_reply_header   header; \/* OFPMP_DESC *\/$/;"	m	struct:ofl_msg_reply_desc	typeref:struct:ofl_msg_reply_desc::ofl_msg_multipart_reply_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_reply_header   header; \/* OFPMP_EXPERIMENTER *\/$/;"	m	struct:ofl_msg_multipart_reply_experimenter	typeref:struct:ofl_msg_multipart_reply_experimenter::ofl_msg_multipart_reply_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_reply_header   header; \/* OFPMP_FLOW *\/$/;"	m	struct:ofl_msg_multipart_reply_flow	typeref:struct:ofl_msg_multipart_reply_flow::ofl_msg_multipart_reply_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_reply_header   header; \/* OFPMP_GROUP *\/$/;"	m	struct:ofl_msg_multipart_reply_group	typeref:struct:ofl_msg_multipart_reply_group::ofl_msg_multipart_reply_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_reply_header   header; \/* OFPMP_GROUP_DESC *\/$/;"	m	struct:ofl_msg_multipart_reply_group_desc	typeref:struct:ofl_msg_multipart_reply_group_desc::ofl_msg_multipart_reply_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_reply_header   header; \/* OFPMP_GROUP_FEATURES *\/$/;"	m	struct:ofl_msg_multipart_reply_group_features	typeref:struct:ofl_msg_multipart_reply_group_features::ofl_msg_multipart_reply_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_reply_header   header; \/* OFPMP_METER *\/$/;"	m	struct:ofl_msg_multipart_reply_meter	typeref:struct:ofl_msg_multipart_reply_meter::ofl_msg_multipart_reply_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_reply_header   header; \/* OFPMP_METER_CONFIG *\/$/;"	m	struct:ofl_msg_multipart_reply_meter_conf	typeref:struct:ofl_msg_multipart_reply_meter_conf::ofl_msg_multipart_reply_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_reply_header   header; \/* OFPMP_METER_FEATURES *\/$/;"	m	struct:ofl_msg_multipart_reply_meter_features	typeref:struct:ofl_msg_multipart_reply_meter_features::ofl_msg_multipart_reply_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_reply_header   header; \/* OFPMP_PORT_DESC *\/$/;"	m	struct:ofl_msg_multipart_reply_port_desc	typeref:struct:ofl_msg_multipart_reply_port_desc::ofl_msg_multipart_reply_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_reply_header   header; \/* OFPMP_PORT_STATS *\/$/;"	m	struct:ofl_msg_multipart_reply_port	typeref:struct:ofl_msg_multipart_reply_port::ofl_msg_multipart_reply_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_reply_header   header; \/* OFPMP_QUEUE *\/$/;"	m	struct:ofl_msg_multipart_reply_queue	typeref:struct:ofl_msg_multipart_reply_queue::ofl_msg_multipart_reply_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_reply_header   header; \/* OFPMP_TABLE *\/$/;"	m	struct:ofl_msg_multipart_reply_table	typeref:struct:ofl_msg_multipart_reply_table::ofl_msg_multipart_reply_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_reply_header   header; \/* OFPMP_TABLE_FEATURES *\/$/;"	m	struct:ofl_msg_multipart_reply_table_features	typeref:struct:ofl_msg_multipart_reply_table_features::ofl_msg_multipart_reply_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_request_header   header; \/* OFPMP_EXPERIMENTER *\/$/;"	m	struct:ofl_msg_multipart_request_experimenter	typeref:struct:ofl_msg_multipart_request_experimenter::ofl_msg_multipart_request_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_request_header   header; \/* OFPMP_FLOW\/AGGREGATE *\/$/;"	m	struct:ofl_msg_multipart_request_flow	typeref:struct:ofl_msg_multipart_request_flow::ofl_msg_multipart_request_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_request_header   header; \/* OFPMP_GROUP *\/$/;"	m	struct:ofl_msg_multipart_request_group	typeref:struct:ofl_msg_multipart_request_group::ofl_msg_multipart_request_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_request_header   header; \/* OFPMP_METER *\/$/;"	m	struct:ofl_msg_multipart_meter_request	typeref:struct:ofl_msg_multipart_meter_request::ofl_msg_multipart_request_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_request_header   header; \/* OFPMP_PORT_STATS *\/$/;"	m	struct:ofl_msg_multipart_request_port	typeref:struct:ofl_msg_multipart_request_port::ofl_msg_multipart_request_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_request_header   header; \/* OFPMP_QUEUE *\/$/;"	m	struct:ofl_msg_multipart_request_queue	typeref:struct:ofl_msg_multipart_request_queue::ofl_msg_multipart_request_header
header	oflib/ofl-messages.h	/^    struct ofl_msg_multipart_request_header   header; \/* OFPMP_TABLE_FEATURES *\/$/;"	m	struct:ofl_msg_multipart_request_table_features	typeref:struct:ofl_msg_multipart_request_table_features::ofl_msg_multipart_request_header
header	oflib/ofl-structs.h	/^    struct ofl_instruction_header   header; \/* OFPIT_EXPERIMENTER *\/$/;"	m	struct:ofl_instruction_experimenter	typeref:struct:ofl_instruction_experimenter::ofl_instruction_header
header	oflib/ofl-structs.h	/^    struct ofl_instruction_header   header; \/* OFPIT_GOTO_TABLE *\/$/;"	m	struct:ofl_instruction_goto_table	typeref:struct:ofl_instruction_goto_table::ofl_instruction_header
header	oflib/ofl-structs.h	/^    struct ofl_instruction_header   header; \/* OFPIT_METER *\/$/;"	m	struct:ofl_instruction_meter	typeref:struct:ofl_instruction_meter::ofl_instruction_header
header	oflib/ofl-structs.h	/^    struct ofl_instruction_header   header; \/* OFPIT_WRITE_METADATA *\/$/;"	m	struct:ofl_instruction_write_metadata	typeref:struct:ofl_instruction_write_metadata::ofl_instruction_header
header	oflib/ofl-structs.h	/^    struct ofl_instruction_header   header; \/* OFPIT_WRITE|APPLY_ACTIONS *\/$/;"	m	struct:ofl_instruction_actions	typeref:struct:ofl_instruction_actions::ofl_instruction_header
header	oflib/ofl-structs.h	/^    struct ofl_match_header   header; \/* Match header *\/$/;"	m	struct:ofl_match	typeref:struct:ofl_match::ofl_match_header
header	oflib/ofl-structs.h	/^    struct ofl_match_header   header;$/;"	m	struct:ofl_match_standard	typeref:struct:ofl_match_standard::ofl_match_header
header	oflib/ofl-structs.h	/^    struct ofl_queue_prop_header   header; \/* OFPQT_MAX_RATE *\/$/;"	m	struct:ofl_queue_prop_max_rate	typeref:struct:ofl_queue_prop_max_rate::ofl_queue_prop_header
header	oflib/ofl-structs.h	/^    struct ofl_queue_prop_header   header; \/* OFPQT_MIN_RATE *\/$/;"	m	struct:ofl_queue_prop_min_rate	typeref:struct:ofl_queue_prop_min_rate::ofl_queue_prop_header
header	oflib/ofl-structs.h	/^    struct ofl_table_feature_prop_header header;$/;"	m	struct:ofl_table_feature_prop_actions	typeref:struct:ofl_table_feature_prop_actions::ofl_table_feature_prop_header
header	oflib/ofl-structs.h	/^    struct ofl_table_feature_prop_header header;$/;"	m	struct:ofl_table_feature_prop_instructions	typeref:struct:ofl_table_feature_prop_instructions::ofl_table_feature_prop_header
header	oflib/ofl-structs.h	/^    struct ofl_table_feature_prop_header header;$/;"	m	struct:ofl_table_feature_prop_next_tables	typeref:struct:ofl_table_feature_prop_next_tables::ofl_table_feature_prop_header
header	oflib/ofl-structs.h	/^    struct ofl_table_feature_prop_header header;$/;"	m	struct:ofl_table_feature_prop_oxm	typeref:struct:ofl_table_feature_prop_oxm::ofl_table_feature_prop_header
header	oflib/ofl-structs.h	/^    uint32_t header;    \/* TLV header *\/$/;"	m	struct:ofl_match_tlv
header	oflib/oxm-match.h	/^    uint32_t header;                  \/* OXM_* value. *\/$/;"	m	struct:oxm_field
hello_fail	lib/ofpstat.h	/^		uint64_t hello_fail;$/;"	m	struct:ofpstat::__anon2
hello_time	lib/stp.c	/^    int hello_time;                 \/* 8.5.3.5: Time between sending BPDUs. *\/$/;"	m	struct:stp	file:
hello_time	lib/stp.c	/^    uint16_t hello_time;           \/* 8.5.1.7: Time between BPDU generation. *\/$/;"	m	struct:stp_config_bpdu	file:
hello_timer	lib/stp.c	/^    struct stp_timer hello_timer;   \/* 8.5.4.1: Hello timer. *\/$/;"	m	struct:stp	typeref:struct:stp::stp_timer	file:
hf_eperm	lib/ofpstat.h	/^		uint64_t hf_eperm;$/;"	m	struct:ofpstat::__anon3
hf_incompat	lib/ofpstat.h	/^		uint64_t hf_incompat;$/;"	m	struct:ofpstat::__anon3
hlen	lib/dhcp.h	/^    uint8_t hlen;               \/* ETH_ADDR_LEN (typically). *\/$/;"	m	struct:dhcp_header
hmap	lib/hmap.h	/^struct hmap {$/;"	s
hmap_count	lib/hmap.h	/^hmap_count(const struct hmap *hmap)$/;"	f
hmap_destroy	lib/hmap.c	/^hmap_destroy(struct hmap *hmap)$/;"	f
hmap_expand	lib/hmap.c	/^hmap_expand(struct hmap *hmap)$/;"	f
hmap_first	lib/hmap.h	/^hmap_first(const struct hmap *hmap)$/;"	f
hmap_first_with_hash	lib/hmap.h	/^hmap_first_with_hash(const struct hmap *hmap, size_t hash)$/;"	f
hmap_init	lib/hmap.c	/^hmap_init(struct hmap *hmap)$/;"	f
hmap_insert	lib/hmap.h	/^hmap_insert(struct hmap *hmap, struct hmap_node *node, size_t hash)$/;"	f
hmap_insert_fast	lib/hmap.h	/^hmap_insert_fast(struct hmap *hmap, struct hmap_node *node, size_t hash)$/;"	f
hmap_is_empty	lib/hmap.h	/^hmap_is_empty(const struct hmap *hmap)$/;"	f
hmap_next	lib/hmap.h	/^hmap_next(const struct hmap *hmap, const struct hmap_node *node)$/;"	f
hmap_next__	lib/hmap.h	/^hmap_next__(const struct hmap *hmap, size_t start)$/;"	f
hmap_next_with_hash	lib/hmap.h	/^hmap_next_with_hash(const struct hmap_node *node)$/;"	f
hmap_next_with_hash__	lib/hmap.h	/^hmap_next_with_hash__(const struct hmap_node *node, size_t hash)$/;"	f
hmap_node	lib/hmap.h	/^struct hmap_node {$/;"	s
hmap_node	oflib/ofl-structs.h	/^    struct hmap_node hmap_node;$/;"	m	struct:ofl_match_tlv	typeref:struct:ofl_match_tlv::hmap_node
hmap_node	oflib/oxm-match.h	/^    struct hmap_node hmap_node;$/;"	m	struct:oxm_field	typeref:struct:oxm_field::hmap_node
hmap_node_hash	lib/hmap.h	/^static inline size_t hmap_node_hash(const struct hmap_node *node)$/;"	f
hmap_remove	lib/hmap.h	/^hmap_remove(struct hmap *hmap, struct hmap_node *node)$/;"	f
hmap_remove_and_shrink	lib/hmap.c	/^void hmap_remove_and_shrink(struct hmap *hmap, struct hmap_node *node){$/;"	f
hmap_reserve	lib/hmap.c	/^hmap_reserve(struct hmap *hmap, size_t n)$/;"	f
hmap_shrink	lib/hmap.c	/^hmap_shrink(struct hmap *hmap)$/;"	f
hmap_swap	lib/hmap.c	/^hmap_swap(struct hmap *a, struct hmap *b)$/;"	f
hold_timer	lib/stp.c	/^    struct stp_timer hold_timer;        \/* 8.5.6.3: BPDU rate limit timer. *\/$/;"	m	struct:stp_port	typeref:struct:stp_port::stp_timer	file:
hook	lib/fatal-signal.c	/^struct hook {$/;"	s	file:
hook	secchan/secchan.c	/^struct hook {$/;"	s	file:
hook_class	secchan/secchan.h	/^struct hook_class {$/;"	s
hook_free	lib/leak-checker.c	/^hook_free(void *p, const void *caller UNUSED)$/;"	f	file:
hook_free	lib/leak-checker.c	/^static free_hook_type hook_free;$/;"	v	file:
hook_malloc	lib/leak-checker.c	/^hook_malloc(size_t size, const void *caller UNUSED)$/;"	f	file:
hook_malloc	lib/leak-checker.c	/^static malloc_hook_type hook_malloc;$/;"	v	file:
hook_realloc	lib/leak-checker.c	/^hook_realloc(void *p, size_t size, const void *caller UNUSED)$/;"	f	file:
hook_realloc	lib/leak-checker.c	/^static realloc_hook_type hook_realloc;$/;"	v	file:
hooks	lib/fatal-signal.c	/^static struct hook hooks[MAX_HOOKS];$/;"	v	typeref:struct:hook	file:
hooks	lib/leak-checker.c	/^struct hooks {$/;"	s	file:
hooks	secchan/secchan.c	/^    struct hook *hooks;$/;"	m	struct:secchan	typeref:struct:secchan::hook	file:
hops	lib/dhcp.h	/^    uint8_t hops;               \/* Hop count; set to 0 by client. *\/$/;"	m	struct:dhcp_header
host_alias	Makefile	/^host_alias = $/;"	m
htmldir	Makefile	/^htmldir = ${docdir}$/;"	m
hton64	oflib/ofl-utils.h	/^hton64(uint64_t n) {$/;"	f
htonll	lib/byte-order.h	/^htonll(uint64_t n)$/;"	f
htonll	lib/xtoxll.h	/^htonll(uint64_t n)$/;"	f
htype	lib/dhcp.h	/^    uint8_t htype;              \/* ARP_HRD_ETHERNET (typically). *\/$/;"	m	struct:dhcp_header
hw_addr	include/openflow/bme-ext.h	/^    uint8_t  hw_addr[OFP_ETH_ALEN]; $/;"	m	struct:ofp_bme_update_distance
hw_addr	include/openflow/openflow.h	/^	uint8_t hw_addr[OFP_ETH_ALEN]; \/* The hardware address is not$/;"	m	struct:ofp_port_mod
hw_addr	include/openflow/openflow.h	/^	uint8_t hw_addr[OFP_ETH_ALEN];$/;"	m	struct:ofp_port
hw_addr	oflib-exp/ofl-exp-bme.h	/^    uint8_t  hw_addr[OFP_ETH_ALEN];    \/* Ethernet address. *\/$/;"	m	struct:ofl_bme_update_distance
hw_addr	oflib/ofl-messages.h	/^    uint8_t    hw_addr[OFP_ETH_ALEN]; \/* The hardware address is not$/;"	m	struct:ofl_msg_port_mod
hw_addr	oflib/ofl-structs.h	/^    uint8_t    hw_addr[OFP_ETH_ALEN];$/;"	m	struct:ofl_port
hw_desc	include/openflow/openflow.h	/^	char hw_desc[DESC_STR_LEN];      \/* Hardware description. *\/$/;"	m	struct:ofp_desc
hw_desc	oflib/ofl-messages.h	/^    char  *hw_desc;      \/* Hardware description. Max DESC_STR_LEN *\/$/;"	m	struct:ofl_msg_reply_desc
hw_desc	udatapath/datapath.h	/^    char  *hw_desc;$/;"	m	struct:datapath
hw_drv	udatapath/datapath.h	/^    of_hw_driver_t *hw_drv;$/;"	m	struct:datapath
hw_packet_in	udatapath/dp_ports.c	/^hw_packet_in(of_port_t port_no, of_packet_t *packet, int reason,$/;"	f	file:
hw_pkt_list_head	udatapath/datapath.h	/^    struct hw_pkt_q_entry *hw_pkt_list_head, *hw_pkt_list_tail;$/;"	m	struct:datapath	typeref:struct:datapath::hw_pkt_q_entry
hw_pkt_list_tail	udatapath/datapath.h	/^    struct hw_pkt_q_entry *hw_pkt_list_head, *hw_pkt_list_tail;$/;"	m	struct:datapath	typeref:struct:datapath::
hw_pkt_q_entry	udatapath/dp_ports.h	/^struct hw_pkt_q_entry {$/;"	s
hwaddr_family	lib/netdev.c	/^    int hwaddr_family;$/;"	m	struct:netdev	file:
icmp	lib/packets.h	/^   struct icmp_header     * icmp;$/;"	m	struct:protocols_std	typeref:struct:protocols_std::icmp_header
icmp_code	lib/packets.h	/^    uint8_t icmp_code;$/;"	m	struct:icmp_header
icmp_csum	lib/packets.h	/^    uint16_t icmp_csum;$/;"	m	struct:icmp_header
icmp_header	lib/packets.h	/^struct icmp_header {$/;"	s
icmp_type	lib/packets.h	/^    uint8_t icmp_type;$/;"	m	struct:icmp_header
id	lib/packets.h	/^    uint32_t id; \/* Service Instance Identifier *\/$/;"	m	struct:pbb_header
id	udatapath/datapath.h	/^    uint64_t  id;               \/* Unique identifier for this datapath. *\/$/;"	m	struct:datapath
idle_echo_xid	lib/rconn.c	/^    uint32_t idle_echo_xid;$/;"	m	struct:rconn	file:
idle_entries	udatapath/flow_table.h	/^    struct list               idle_entries;   \/* unordered list of entries with$/;"	m	struct:flow_table	typeref:struct:flow_table::list
idle_node	udatapath/flow_entry.h	/^    struct list              idle_node;$/;"	m	struct:flow_entry	typeref:struct:flow_entry::list
idle_timeout	include/openflow/openflow.h	/^	uint16_t idle_timeout;  \/* Idle time before discarding (seconds). *\/$/;"	m	struct:ofp_flow_mod
idle_timeout	include/openflow/openflow.h	/^	uint16_t idle_timeout;  \/* Idle timeout from original flow mod. *\/$/;"	m	struct:ofp_flow_removed
idle_timeout	include/openflow/openflow.h	/^	uint16_t idle_timeout;  \/* Number of seconds idle before expiration. *\/$/;"	m	struct:ofp_flow_stats
idle_timeout	oflib/ofl-messages.h	/^    uint16_t                        idle_timeout; \/* Idle time before discarding (secs). *\/$/;"	m	struct:ofl_msg_flow_mod
idle_timeout	oflib/ofl-structs.h	/^    uint16_t                        idle_timeout;  \/* Number of seconds idle before$/;"	m	struct:ofl_flow_stats
ids_num	oflib/ofl-structs.h	/^    size_t ids_num;$/;"	m	struct:ofl_table_feature_prop_instructions
iface	utilities/ofp-discover.c	/^struct iface {$/;"	s	file:
iface_init	utilities/ofp-discover.c	/^iface_init(struct iface *iface, const char *netdev_name)$/;"	f	file:
ifaces	utilities/ofp-discover.c	/^static struct iface *ifaces;$/;"	v	typeref:struct:iface	file:
ifindex	lib/netdev.c	/^    int ifindex;$/;"	m	struct:netdev	file:
ignore_existing_pidfile	lib/daemon.c	/^ignore_existing_pidfile(void)$/;"	f
in6	lib/netdev.c	/^    struct in6_addr in6;$/;"	m	struct:netdev	typeref:struct:netdev::in6_addr	file:
in6addr_exact	lib/ipv6_util.c	/^const struct in6_addr in6addr_exact = IN6ADDR_EXACT_INIT;$/;"	v	typeref:struct:in6_addr
in6addr_zero	lib/ipv6_util.c	/^const struct in6_addr in6addr_zero = IN6ADDR_ZERO_INIT;$/;"	v	typeref:struct:in6_addr
in_band	secchan/secchan.h	/^    bool in_band;             \/* Connect to controller in-band? *\/$/;"	m	struct:settings
in_band_data	secchan/in-band.c	/^struct in_band_data {$/;"	s	file:
in_band_hook_class	secchan/in-band.c	/^static struct hook_class in_band_hook_class = {$/;"	v	typeref:struct:hook_class	file:
in_band_learn_mac	secchan/in-band.c	/^in_band_learn_mac(struct in_band_data *in_band,$/;"	f	file:
in_band_local_packet_cb	secchan/in-band.c	/^in_band_local_packet_cb(struct relay *r, void *in_band_)$/;"	f	file:
in_band_local_port_cb	secchan/in-band.c	/^in_band_local_port_cb(const struct ofp_port *port, void *in_band_)$/;"	f	file:
in_band_periodic_cb	secchan/in-band.c	/^in_band_periodic_cb(void *in_band_)$/;"	f	file:
in_band_start	secchan/in-band.c	/^in_band_start(struct secchan *secchan,$/;"	f
in_band_status_cb	secchan/in-band.c	/^in_band_status_cb(struct status_reply *sr, void *in_band_)$/;"	f	file:
in_band_wait_cb	secchan/in-band.c	/^in_band_wait_cb(void *in_band_)$/;"	f	file:
in_port	include/openflow/nicira-ext.h	/^    uint16_t in_port;               \/* New in_port for checking flow table. *\/$/;"	m	struct:nx_action_resubmit
in_port	include/openflow/openflow.h	/^	uint32_t in_port;                    \/* Packet’s input port or OFPP_CONTROLLER. *\/$/;"	m	struct:ofp_packet_out
in_port	lib/flow.h	/^    uint32_t in_port;           \/* Input switch port. *\/$/;"	m	struct:flow
in_port	oflib/ofl-messages.h	/^    uint32_t                   in_port;     \/* Packet's input port or$/;"	m	struct:ofl_msg_packet_out
in_port	oflib/ofl-structs.h	/^    uint32_t   in_port;          \/* Input switch port. *\/$/;"	m	struct:ofl_match
in_port	oflib/ofl-structs.h	/^    uint32_t   in_port;          \/* Input switch port. *\/$/;"	m	struct:ofl_match_standard
in_port	udatapath/packet.h	/^    uint32_t            in_port;$/;"	m	struct:packet
in_stack	lib/backtrace.c	/^in_stack(void *p)$/;"	f	file:
inc_error_notification	lib/ofpstat.c	/^inc_error_notification(struct ofpstat *ifps, struct ofp_header *hdr)$/;"	f	file:
inc_flow_manipulation	lib/ofpstat.c	/^inc_flow_manipulation(struct ofpstat *ifps, struct ofp_header *hdr)$/;"	f	file:
inc_protocol_message	lib/ofpstat.c	/^inc_protocol_message(struct ofpstat *ifps, struct ofp_header *hdr)$/;"	f	file:
incl_len	lib/pcap.c	/^    uint32_t incl_len;       \/* number of octets of packet saved in file *\/$/;"	m	struct:pcaprec_hdr	file:
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
incompatible_128	udatapath/match_std.c	/^incompatible_128(uint8_t *a, uint8_t *b, uint8_t *am, uint8_t *bm) {$/;"	f	file:
incompatible_16	udatapath/match_std.c	/^incompatible_16(uint8_t *a, uint8_t *b, uint8_t *am, uint8_t *bm) {$/;"	f	file:
incompatible_32	udatapath/match_std.c	/^incompatible_32(uint8_t *a, uint8_t *b, uint8_t *am, uint8_t *bm) {$/;"	f	file:
incompatible_48	udatapath/match_std.c	/^incompatible_48(uint8_t *a, uint8_t *b, uint8_t *am, uint8_t *bm) {$/;"	f	file:
incompatible_64	udatapath/match_std.c	/^incompatible_64(uint8_t *a, uint8_t *b, uint8_t *am, uint8_t *bm) {$/;"	f	file:
incompatible_8	udatapath/match_std.c	/^incompatible_8(uint8_t *a, uint8_t *b, uint8_t *am, uint8_t *bm) {$/;"	f	file:
increment_mpls_label	udatapath/dp_exp_bme.c	/^increment_mpls_label(uint32_t seq_no)$/;"	f	file:
index	oflib/oxm-match.h	/^    enum oxm_field_index index;       \/* OFI_* value. *\/$/;"	m	struct:oxm_field	typeref:enum:oxm_field::oxm_field_index
index	secchan/failover.c	/^	int index;$/;"	m	struct:failover_context	file:
infodir	Makefile	/^infodir = ${datarootdir}\/info$/;"	m
init	include/openflow/of_hw_api.h	/^    int (*init)(of_hw_driver_t *hw_drv, uint32_t flags);$/;"	m	struct:of_hw_driver
init_delay	lib/dhcp-client.c	/^    unsigned int init_delay;    \/* Used by S_INIT. *\/$/;"	m	struct:dhclient	file:
init_group_refs	udatapath/flow_entry.c	/^init_group_refs(struct flow_entry *entry) {$/;"	f	file:
init_meter_refs	udatapath/flow_entry.c	/^init_meter_refs(struct flow_entry *entry) {$/;"	f	file:
init_netdev	lib/netdev.c	/^init_netdev(void)$/;"	f	file:
init_select_group	udatapath/group_entry.c	/^init_select_group(struct group_entry *entry, struct ofl_msg_group_mod *mod) {$/;"	f	file:
inited	lib/port-array.c	/^static bool inited;$/;"	v	file:
inited	lib/timeval.c	/^static bool inited;$/;"	v	file:
inst	oflib/ofl.h	/^    struct ofl_exp_inst   *inst;$/;"	m	struct:ofl_exp	typeref:struct:ofl_exp::ofl_exp_inst
inst_compare	udatapath/pipeline.c	/^int inst_compare(const void *inst1, const void *inst2){$/;"	f	file:
inst_names	utilities/dpctl.h	/^static struct names16 inst_names[] = {$/;"	v	typeref:struct:names16
install_sh	Makefile	/^install_sh = ${SHELL} \/home\/mininet\/of13ofswitch.bme\/build-aux\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
instruction_ids	include/openflow/openflow.h	/^    struct ofp_instruction instruction_ids[0]; \/* List of instructions *\/$/;"	m	struct:ofp_table_feature_prop_instructions	typeref:struct:ofp_table_feature_prop_instructions::ofp_instruction
instruction_ids	oflib/ofl-structs.h	/^    struct ofl_instruction_header *instruction_ids; \/* List of instructions *\/$/;"	m	struct:ofl_table_feature_prop_instructions	typeref:struct:ofl_table_feature_prop_instructions::ofl_instruction_header
instructions	oflib/ofl-messages.h	/^    struct ofl_instruction_header **instructions; \/* Instruction set *\/$/;"	m	struct:ofl_msg_flow_mod	typeref:struct:ofl_msg_flow_mod::ofl_instruction_header
instructions	oflib/ofl-structs.h	/^    struct ofl_instruction_header **instructions; \/* Instruction set. *\/$/;"	m	struct:ofl_flow_stats	typeref:struct:ofl_flow_stats::ofl_instruction_header
instructions	udatapath/flow_table.c	/^struct ofl_instruction_header instructions[] = { {OFPIT_GOTO_TABLE}, $/;"	v	typeref:struct:ofl_instruction_header
instructions_num	oflib/ofl-messages.h	/^    size_t                          instructions_num;$/;"	m	struct:ofl_msg_flow_mod
instructions_num	oflib/ofl-structs.h	/^    size_t                          instructions_num;$/;"	m	struct:ofl_flow_stats
interpret_ssl_error	lib/vconn-ssl.c	/^interpret_ssl_error(const char *function, int ret, int error,$/;"	f	file:
ioctl	include/openflow/of_hw_api.h	/^    int (*ioctl)(of_hw_driver_t *hw_drv, uint32_t op, void **io_param,$/;"	m	struct:of_hw_driver
ip	lib/vconn-provider.h	/^    uint32_t ip;$/;"	m	struct:vconn
ip_csum	lib/packets.h	/^    uint16_t ip_csum;$/;"	m	struct:ip_header
ip_dst	lib/packets.h	/^    uint32_t ip_dst;$/;"	m	struct:ip_header
ip_frag_off	lib/packets.h	/^    uint16_t ip_frag_off;$/;"	m	struct:ip_header
ip_header	lib/packets.h	/^struct ip_header {$/;"	s
ip_id	lib/packets.h	/^    uint16_t ip_id;$/;"	m	struct:ip_header
ip_ihl_ver	lib/packets.h	/^    uint8_t ip_ihl_ver;$/;"	m	struct:ip_header
ip_proto	lib/packets.h	/^    uint8_t ip_proto;$/;"	m	struct:ip_header
ip_src	lib/packets.h	/^    uint32_t ip_src;$/;"	m	struct:ip_header
ip_tos	lib/packets.h	/^    uint8_t ip_tos;$/;"	m	struct:ip_header
ip_tot_len	lib/packets.h	/^    uint16_t ip_tot_len;$/;"	m	struct:ip_header
ip_ttl	lib/packets.h	/^    uint8_t ip_ttl;$/;"	m	struct:ip_header
ipaddr	lib/dhcp-client.c	/^    uint32_t ipaddr, netmask, router;$/;"	m	struct:dhclient	file:
ipv4	lib/packets.h	/^   struct ip_header       * ipv4;$/;"	m	struct:protocols_std	typeref:struct:protocols_std::ip_header
ipv6	lib/packets.h	/^   struct ipv6_header     * ipv6;$/;"	m	struct:protocols_std	typeref:struct:protocols_std::ipv6_header
ipv6_addr_bitand	lib/ipv6_util.c	/^struct in6_addr ipv6_addr_bitand(const struct in6_addr *a,$/;"	f	file:
ipv6_addr_equals	lib/ipv6_util.h	/^static inline bool ipv6_addr_equals(const struct in6_addr *a,$/;"	f
ipv6_create_mask	lib/ipv6_util.c	/^ipv6_create_mask(int mask)$/;"	f	file:
ipv6_dst	lib/packets.h	/^    struct in6_addr ipv6_dst;$/;"	m	struct:ipv6_header	typeref:struct:ipv6_header::in6_addr
ipv6_ext_hdr_order_T1	lib/packets.h	/^enum ipv6_ext_hdr_order_T1 {$/;"	g
ipv6_header	lib/packets.h	/^struct ipv6_header {$/;"	s
ipv6_hop_limit	lib/packets.h	/^    uint8_t ipv6_hop_limit;$/;"	m	struct:ipv6_header
ipv6_mask_is_exact	lib/ipv6_util.h	/^static inline bool ipv6_mask_is_exact(const struct in6_addr *mask) {$/;"	f
ipv6_nd_header	lib/packets.h	/^struct ipv6_nd_header{$/;"	s
ipv6_nd_options_hd	lib/packets.h	/^struct ipv6_nd_options_hd{$/;"	s
ipv6_next_hd	lib/packets.h	/^    uint8_t  ipv6_next_hd;$/;"	m	struct:ipv6_header
ipv6_pay_len	lib/packets.h	/^    uint16_t ipv6_pay_len;$/;"	m	struct:ipv6_header
ipv6_src	lib/packets.h	/^    struct in6_addr ipv6_src;$/;"	m	struct:ipv6_header	typeref:struct:ipv6_header::in6_addr
ipv6_ver_tc_fl	lib/packets.h	/^    uint32_t ipv6_ver_tc_fl;$/;"	m	struct:ipv6_header
is_admitted_msg	lib/rconn.c	/^is_admitted_msg(const struct ofpbuf *b)$/;"	f	file:
is_connected_state	lib/rconn.c	/^is_connected_state(enum state state) $/;"	f	file:
is_controller_mac	secchan/in-band.c	/^is_controller_mac(const uint8_t dl_addr[ETH_ADDR_LEN],$/;"	f	file:
is_in	udatapath/group_table.c	/^is_in(uint32_t id, struct list *list) {$/;"	f	file:
is_loop_free	udatapath/group_table.c	/^is_loop_free(struct group_table *table, struct ofl_msg_group_mod *mod) {$/;"	f	file:
is_loop_free_visit	udatapath/group_table.c	/^is_loop_free_visit(struct ofl_bucket **buckets, size_t buckets_num, struct list *visited, struct list *to_be_visited) {$/;"	f	file:
is_member	lib/process.c	/^is_member(int x, const int *array, size_t n)$/;"	f	file:
is_mgmt_conn	secchan/secchan.h	/^    bool is_mgmt_conn;          \/* Is this a management connection? *\/$/;"	m	struct:relay
is_requisite	oflib/oxm-match.c	/^is_requisite(uint32_t header){$/;"	f	file:
is_ssl_vconn	debian/ofp-switch-setup	/^sub is_ssl_vconn {$/;"	s
is_table_miss	udatapath/pipeline.c	/^is_table_miss(struct flow_entry *entry){$/;"	f	file:
is_timed_out	secchan/failover.c	/^is_timed_out(const struct failover_peer *peer, int max_backoff)$/;"	f	file:
is_valid_vconn	debian/ofp-switch-setup	/^sub is_valid_vconn {$/;"	s
kill_ofp_discover	debian/ofp-switch-setup	/^sub kill_ofp_discover {$/;"	s
l1	lib/port-array.h	/^    struct port_array_l2 *l1[1u << PORT_ARRAY_L1_BITS];$/;"	m	struct:port_array	typeref:struct:port_array::port_array_l2
l2	lib/ofpbuf.h	/^    void *l2;                   \/* Link-level header. *\/$/;"	m	struct:ofpbuf
l2	lib/port-array.h	/^    struct port_array_l3 *l2[1u << PORT_ARRAY_L2_BITS];$/;"	m	struct:port_array_l2	typeref:struct:port_array_l2::port_array_l3
l2_sentinel	lib/port-array.c	/^static struct port_array_l2 l2_sentinel;$/;"	v	typeref:struct:port_array_l2	file:
l2x	debian/rules	/^l2x=l24$/;"	m
l2x	debian/rules	/^l2x=l26$/;"	m
l3	lib/ofpbuf.h	/^    void *l3;                   \/* Network-level header. *\/$/;"	m	struct:ofpbuf
l3	lib/port-array.h	/^    void *l3[1u << PORT_ARRAY_L3_BITS];$/;"	m	struct:port_array_l3
l3_sentinel	lib/port-array.c	/^static struct port_array_l3 l3_sentinel;$/;"	v	typeref:struct:port_array_l3	file:
l4	lib/ofpbuf.h	/^    void *l4;                   \/* Transport-level header. *\/$/;"	m	struct:ofpbuf
l7	lib/ofpbuf.h	/^    void *l7;                   \/* Application data. *\/$/;"	m	struct:ofpbuf
label_a	include/openflow/bme-ext.h	/^    uint32_t label_a;$/;"	m	struct:ofp_bme_xor_packet
label_a	include/openflow/openflow.h	/^	uint32_t label_a; \/* Label_A *\/$/;"	m	struct:ofp_action_xor_decode
label_a	include/openflow/openflow.h	/^	uint32_t label_a; \/* Label_A *\/$/;"	m	struct:ofp_action_xor_encode
label_a	oflib-exp/ofl-exp-bme.h	/^    uint32_t label_a;$/;"	m	struct:ofl_bme_xor_packet
label_a	oflib/ofl-actions.h	/^    uint32_t   label_a; \/* Label_A *\/$/;"	m	struct:ofl_action_xor_decode
label_a	oflib/ofl-actions.h	/^    uint32_t   label_a; \/* Label_A *\/$/;"	m	struct:ofl_action_xor_encode
label_a	udatapath/dp_actions.c	/^    uint32_t label_a, label_b;$/;"	m	struct:pending_pkt	file:
label_a	udatapath/dp_exp_bme.c	/^    uint32_t label_a, label_b;$/;"	m	struct:pending_pkt	file:
label_b	include/openflow/bme-ext.h	/^    uint32_t label_b;$/;"	m	struct:ofp_bme_xor_packet
label_b	include/openflow/openflow.h	/^	uint32_t label_b; \/* Label_B *\/$/;"	m	struct:ofp_action_xor_decode
label_b	include/openflow/openflow.h	/^	uint32_t label_b; \/* Label_B *\/$/;"	m	struct:ofp_action_xor_encode
label_b	oflib-exp/ofl-exp-bme.h	/^    uint32_t label_b;$/;"	m	struct:ofl_bme_xor_packet
label_b	oflib/ofl-actions.h	/^    uint32_t   label_b; \/* Label_B *\/$/;"	m	struct:ofl_action_xor_decode
label_b	oflib/ofl-actions.h	/^    uint32_t   label_b; \/* Label_B *\/$/;"	m	struct:ofl_action_xor_encode
label_b	udatapath/dp_actions.c	/^    uint32_t label_a, label_b;$/;"	m	struct:pending_pkt	file:
label_b	udatapath/dp_exp_bme.c	/^    uint32_t label_a, label_b;$/;"	m	struct:pending_pkt	file:
last_admitted	lib/rconn.c	/^    time_t last_admitted;$/;"	m	struct:rconn	file:
last_connected	lib/rconn.c	/^    time_t last_connected;$/;"	m	struct:rconn	file:
last_feature_request	secchan/port-watcher.c	/^    time_t last_feature_request;$/;"	m	struct:port_watcher	file:
last_fill	lib/vlog.h	/^    time_t last_fill;           \/* Last time tokens added. *\/$/;"	m	struct:vlog_rate_limit
last_fill	oflib/ofl-structs.h	/^    uint64_t last_fill;$/;"	m	struct:ofl_meter_band_stats
last_fill	secchan/ratelimit.c	/^    long long int last_fill;    \/* Time at which we last added tokens. *\/$/;"	m	struct:rate_limiter	file:
last_questioned	lib/rconn.c	/^    time_t last_questioned;$/;"	m	struct:rconn	file:
last_received	lib/rconn.c	/^    time_t last_received;$/;"	m	struct:rconn	file:
last_seq	udatapath/dp_actions.c	/^    uint32_t last_seq;$/;"	m	struct:pending_flows	file:
last_seq	udatapath/dp_exp_bme.c	/^    uint32_t last_seq;$/;"	m	struct:pending_flows	file:
last_tick	secchan/stp-secchan.c	/^    long long int last_tick;$/;"	m	struct:stp_data	file:
last_timeout	udatapath/datapath.h	/^    time_t last_timeout;$/;"	m	struct:datapath
last_used	udatapath/flow_entry.h	/^    uint64_t                 last_used; \/* last time the flow entry matched a packet *\/$/;"	m	struct:flow_entry
leak_checker_claim	lib/leak-checker.c	/^leak_checker_claim(const void *p UNUSED)$/;"	f
leak_checker_claim	lib/leak-checker.c	/^leak_checker_claim(const void *p)$/;"	f
leak_checker_set_limit	lib/leak-checker.c	/^leak_checker_set_limit(off_t limit_)$/;"	f
leak_checker_set_limit	lib/leak-checker.c	/^leak_checker_set_limit(off_t max_size UNUSED)$/;"	f
leak_checker_start	lib/leak-checker.c	/^leak_checker_start(const char *file_name UNUSED)$/;"	f
leak_checker_start	lib/leak-checker.c	/^leak_checker_start(const char *file_name)$/;"	f
leak_checker_stop	lib/leak-checker.c	/^leak_checker_stop(void)$/;"	f
leak_checker_usage	lib/leak-checker.c	/^leak_checker_usage(void)$/;"	f
lease_expiration	lib/dhcp-client.c	/^    time_t lease_expiration;$/;"	m	struct:dhclient	file:
len	include/openflow/bme-ext.h	/^    uint16_t len;		    \/* Length of this struct in bytes. *\/$/;"	m	struct:bme_instruction_header
len	include/openflow/bme-ext.h	/^    uint16_t len;		  \/* Length of this struct in bytes. *\/$/;"	m	struct:ofp_bme_action_header
len	include/openflow/bme-ext.h	/^    uint16_t len;                 \/* Length of this struct in bytes. *\/$/;"	m	struct:ofp_bme_set_metadata
len	include/openflow/bme-ext.h	/^    uint16_t len;            \/* Length of this struct in bytes. *\/$/;"	m	struct:ofp_bme_serialize
len	include/openflow/bme-ext.h	/^    uint16_t len;            \/* Length of this struct in bytes. *\/$/;"	m	struct:ofp_bme_update_distance
len	include/openflow/bme-ext.h	/^    uint16_t len;            \/* Length of this struct in bytes. *\/$/;"	m	struct:ofp_bme_xor_packet
len	include/openflow/bme-ext.h	/^  uint16_t len;                 \/* Length of this struct in bytes. *\/$/;"	m	struct:bme_output_by_metadata
len	include/openflow/bme-ext.h	/^  uint16_t len;                 \/* Length of this struct in bytes. *\/$/;"	m	struct:ofp_bme_set_metadata_from_counter
len	include/openflow/bme-ext.h	/^  uint16_t len;                 \/* Length of this struct in bytes. *\/$/;"	m	struct:ofp_bme_set_mpls_label
len	include/openflow/nicira-ext.h	/^    uint16_t len;                   \/* Length is 16. *\/$/;"	m	struct:nx_action_header
len	include/openflow/nicira-ext.h	/^    uint16_t len;                   \/* Length is 16. *\/$/;"	m	struct:nx_action_resubmit
len	include/openflow/nicira-ext.h	/^    uint16_t len;                   \/* Length is 16. *\/$/;"	m	struct:nx_action_set_tunnel
len	include/openflow/openflow.h	/^	uint16_t len;                               \/* Length in bytes of this queue desc. *\/$/;"	m	struct:ofp_packet_queue
len	include/openflow/openflow.h	/^	uint16_t len;                        \/* Length of this struct in bytes. *\/$/;"	m	struct:ofp_instruction_actions
len	include/openflow/openflow.h	/^	uint16_t len;                        \/* Length the bucket in bytes, including$/;"	m	struct:ofp_bucket
len	include/openflow/openflow.h	/^	uint16_t len;           \/* Length of this struct in bytes. *\/$/;"	m	struct:ofp_instruction_write_metadata
len	include/openflow/openflow.h	/^	uint16_t len;          \/* Length is a multiple of 8. *\/$/;"	m	struct:ofp_action_experimenter_header
len	include/openflow/openflow.h	/^	uint16_t len;       \/* Length is 8. *\/$/;"	m	struct:ofp_action_pop_mpls
len	include/openflow/openflow.h	/^	uint16_t len;       \/* Length is 8. *\/$/;"	m	struct:ofp_action_push
len	include/openflow/openflow.h	/^	uint16_t len;       \/* Length of property, including this header. *\/$/;"	m	struct:ofp_queue_prop_header
len	include/openflow/openflow.h	/^	uint16_t len;      \/* Len is 8. *\/$/;"	m	struct:ofp_action_set_queue
len	include/openflow/openflow.h	/^	uint16_t len;      \/* Length is 8. *\/$/;"	m	struct:ofp_action_group
len	include/openflow/openflow.h	/^	uint16_t len;     \/* Length is 16. *\/$/;"	m	struct:ofp_action_output
len	include/openflow/openflow.h	/^	uint16_t len;     \/* Length is 8. *\/$/;"	m	struct:ofp_action_mpls_label
len	include/openflow/openflow.h	/^	uint16_t len;     \/* Length is 8. *\/$/;"	m	struct:ofp_action_mpls_ttl
len	include/openflow/openflow.h	/^	uint16_t len;     \/* Length of this struct in bytes. *\/$/;"	m	struct:ofp_instruction_goto_table
len	include/openflow/openflow.h	/^	uint16_t len;   \/* Length is 8. *\/$/;"	m	struct:ofp_action_nw_ttl
len	include/openflow/openflow.h	/^	uint16_t len;  \/* Length is padded to 64 bits. *\/$/;"	m	struct:ofp_action_set_field
len	include/openflow/openflow.h	/^	uint16_t len;  \/* Length of action, including this$/;"	m	struct:ofp_action_header
len	include/openflow/openflow.h	/^        uint16_t len;     \/* Length is 8. *\/$/;"	m	struct:ofp_action_parity_mpls_label
len	include/openflow/openflow.h	/^        uint16_t len;     \/* Length is 8. *\/$/;"	m	struct:ofp_action_set_mpls_label_from_counter
len	include/openflow/openflow.h	/^        uint16_t len;     \/* Length is 8. *\/$/;"	m	struct:ofp_action_xor_decode
len	include/openflow/openflow.h	/^        uint16_t len;     \/* Length is 8. *\/$/;"	m	struct:ofp_action_xor_encode
len	include/openflow/openflow.h	/^    uint16_t len;                 \/* Length of this struct in bytes. *\/$/;"	m	struct:ofp_instruction
len	include/openflow/openflow.h	/^    uint16_t len;             \/* Length in bytes of this stats. *\/$/;"	m	struct:ofp_meter_stats
len	include/openflow/openflow.h	/^    uint16_t len;  \/* Length in bytes of this band. *\/$/;"	m	struct:ofp_meter_band_drop
len	include/openflow/openflow.h	/^    uint16_t len;  \/* Length in bytes of this band. *\/$/;"	m	struct:ofp_meter_band_dscp_remark
len	include/openflow/openflow.h	/^    uint16_t len;  \/* Length in bytes of this band. *\/$/;"	m	struct:ofp_meter_band_experimenter
len	include/openflow/openflow.h	/^    uint16_t len;  \/* Length in bytes of this band. *\/$/;"	m	struct:ofp_meter_band_header
len	include/openflow/openflow.h	/^    uint16_t len;  \/* Length is 8. *\/$/;"	m	struct:ofp_instruction_meter
len	nbee_link/nbee_link.h	/^	uint32_t len;	\/* length this packet (off wire) *\/$/;"	m	struct:pcap_pkthdr
len	oflib/ofl-actions.h	/^    uint16_t len; \/* Total length *\/$/;"	m	struct:ofl_action_header
len	oflib/ofl-structs.h	/^    uint16_t len;             \/* Length in bytes of this stats. *\/$/;"	m	struct:ofl_meter_stats
length	include/openflow/of_hw_api.h	/^    int length;            \/* Length in bytes *\/$/;"	m	struct:of_packet_s
length	include/openflow/openflow.h	/^	uint16_t length;        \/* Length of this entry. *\/$/;"	m	struct:ofp_flow_stats
length	include/openflow/openflow.h	/^	uint16_t length;       \/* Length of this entry. *\/$/;"	m	struct:ofp_group_stats
length	include/openflow/openflow.h	/^	uint16_t length;   \/* Length of this entry. *\/$/;"	m	struct:ofp_group_desc_stats
length	include/openflow/openflow.h	/^	uint16_t length; \/* Length including this ofp_header. *\/$/;"	m	struct:ofp_header
length	include/openflow/openflow.h	/^        uint16_t length; \/* Length of ofp_match (excluding padding) *\/$/;"	m	struct:ofp_match
length	include/openflow/openflow.h	/^    uint16_t length;  \/* Length is padded to 64 bits. *\/$/;"	m	struct:ofp_table_features
length	include/openflow/openflow.h	/^    uint16_t length; \/* Length in bytes of this property. *\/$/;"	m	struct:ofp_table_feature_prop_actions
length	include/openflow/openflow.h	/^    uint16_t length; \/* Length in bytes of this property. *\/$/;"	m	struct:ofp_table_feature_prop_header
length	include/openflow/openflow.h	/^    uint16_t length; \/* Length in bytes of this property. *\/$/;"	m	struct:ofp_table_feature_prop_instructions
length	include/openflow/openflow.h	/^    uint16_t length; \/* Length in bytes of this property. *\/$/;"	m	struct:ofp_table_feature_prop_next_tables
length	include/openflow/openflow.h	/^    uint16_t length; \/* Length in bytes of this property. *\/$/;"	m	struct:ofp_table_feature_prop_oxm
length	include/openflow/openflow.h	/^    uint16_t length; \/* Length of this entry. *\/$/;"	m	struct:ofp_meter_config
length	lib/dynamic-string.h	/^    size_t length;      \/* Bytes used, not including null terminator. *\/$/;"	m	struct:ds
length	lib/packets.h	/^    uint8_t length;$/;"	m	struct:ipv6_nd_options_hd
length	oflib/ofl-structs.h	/^    uint16_t   length;           \/* Match length *\/$/;"	m	struct:ofl_match_header
length	oflib/ofl-structs.h	/^    uint16_t length;              \/* Property length *\/$/;"	m	struct:ofl_table_feature_prop_header
length	oflib/ofl-structs.h	/^    uint16_t length;  \/* Length is padded to 64 bits. *\/$/;"	m	struct:ofl_table_features
length	oflib/ofl-structs.h	/^    uint16_t length; \/* Length of this entry. *\/$/;"	m	struct:ofl_meter_config
length	udatapath/dp_actions.c	/^    int length;  \/* overall length of the lists above *\/$/;"	m	struct:pending_flows	file:
length	udatapath/dp_exp_bme.c	/^    int length;  \/* overall length of the lists above *\/$/;"	m	struct:pending_flows	file:
level_names	lib/vlog.c	/^static const char *level_names[VLL_N_LEVELS] = {$/;"	v	file:
levels	lib/vlog.c	/^static int levels[VLM_N_MODULES][VLF_N_FACILITIES];$/;"	v	file:
lib_libopenflow_a_AR	Makefile	/^lib_libopenflow_a_AR = $(AR) $(ARFLAGS)$/;"	m
lib_libopenflow_a_DEPENDENCIES	Makefile	/^lib_libopenflow_a_DEPENDENCIES = oflib\/ofl-actions.o \\$/;"	m
lib_libopenflow_a_LIBADD	Makefile	/^lib_libopenflow_a_LIBADD = oflib\/ofl-actions.o \\$/;"	m
lib_libopenflow_a_LIBADD	lib/automake.mk	/^lib_libopenflow_a_LIBADD = oflib\/ofl-actions.o \\$/;"	m
lib_libopenflow_a_OBJECTS	Makefile	/^lib_libopenflow_a_OBJECTS = $(am_lib_libopenflow_a_OBJECTS) \\$/;"	m
lib_libopenflow_a_SOURCES	Makefile	/^lib_libopenflow_a_SOURCES = lib\/backtrace.c lib\/backtrace.h \\$/;"	m
lib_libopenflow_a_SOURCES	lib/automake.mk	/^lib_libopenflow_a_SOURCES = \\$/;"	m
libc_hooks	lib/leak-checker.c	/^static struct hooks libc_hooks;$/;"	v	typeref:struct:hooks	file:
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
likely	lib/compiler.h	43;"	d
limit	lib/leak-checker.c	/^static off_t limit = 10 * 1000 * 1000;$/;"	v	file:
list	lib/list.h	/^struct list$/;"	s
list_back	lib/list.c	/^list_back(struct list *list)$/;"	f
list_front	lib/list.c	/^list_front(struct list *list)$/;"	f
list_init	lib/list.c	/^list_init(struct list *list)$/;"	f
list_insert	lib/list.c	/^list_insert(struct list *before, struct list *elem)$/;"	f
list_is_empty	lib/list.c	/^list_is_empty(const struct list *list)$/;"	f
list_pop_back	lib/list.c	/^list_pop_back(struct list *list)$/;"	f
list_pop_front	lib/list.c	/^list_pop_front(struct list *list)$/;"	f
list_push_back	lib/list.c	/^list_push_back(struct list *list, struct list *elem)$/;"	f
list_push_front	lib/list.c	/^list_push_front(struct list *list, struct list *elem)$/;"	f
list_remove	lib/list.c	/^list_remove(struct list *elem)$/;"	f
list_replace	lib/list.c	/^list_replace(struct list *element, const struct list *position)$/;"	f
list_size	lib/list.c	/^list_size(const struct list *list)$/;"	f
list_splice	lib/list.c	/^list_splice(struct list *before, struct list *first, struct list *last)$/;"	f
listen	lib/vconn-provider.h	/^    int (*listen)(const char *name, char *suffix, struct pvconn **pvconnp);$/;"	m	struct:pvconn_class
listener_names	secchan/secchan.h	/^    const char *listener_names[MAX_MGMT]; \/* Listen for mgmt connections. *\/$/;"	m	struct:settings
listeners	udatapath/datapath.h	/^    struct pvconn **listeners;$/;"	m	struct:datapath	typeref:struct:datapath::pvconn
listeners_aux	udatapath/datapath.h	/^    struct pvconn **listeners_aux;$/;"	m	struct:datapath	typeref:struct:datapath::pvconn
llc	lib/packets.h	/^    struct llc_header llc;$/;"	m	struct:llc_snap_header	typeref:struct:llc_snap_header::llc_header
llc_cntl	lib/packets.h	/^    uint8_t llc_cntl;$/;"	m	struct:llc_header
llc_dsap	lib/packets.h	/^    uint8_t llc_dsap;$/;"	m	struct:llc_header
llc_header	lib/packets.h	/^struct llc_header {$/;"	s
llc_snap_header	lib/packets.h	/^struct llc_snap_header {$/;"	s
llc_ssap	lib/packets.h	/^    uint8_t llc_ssap;$/;"	m	struct:llc_header
load_config	debian/commands/reconfigure	/^sub load_config {$/;"	s
load_config	debian/ofp-switch-setup	/^sub load_config {$/;"	s
local_cbs	secchan/port-watcher.c	/^    struct port_watcher_local_cb local_cbs[4];$/;"	m	struct:port_watcher	typeref:struct:port_watcher::port_watcher_local_cb	file:
local_packet_cb	secchan/secchan.h	/^    bool (*local_packet_cb)(struct relay *, void *aux);$/;"	m	struct:hook_class
local_port	udatapath/datapath.h	/^    struct sw_port  *local_port;  \/* OFPP_LOCAL port, if any. *\/$/;"	m	struct:datapath	typeref:struct:datapath::sw_port
local_port	udatapath/udatapath.c	/^static char *local_port = "tap:";$/;"	v	file:
local_port_changed	secchan/port-watcher.c	/^    local_port_changed_cb_func *local_port_changed;$/;"	m	struct:port_watcher_local_cb	file:
local_port_changed_cb_func	secchan/port-watcher.h	/^typedef void local_port_changed_cb_func(const struct ofp_port *new,$/;"	t
local_port_name	secchan/port-watcher.c	/^    char local_port_name[OFP_MAX_PORT_NAME_LEN + 1];$/;"	m	struct:port_watcher	file:
local_rconn	secchan/port-watcher.c	/^    struct rconn *local_rconn;$/;"	m	struct:port_watcher	typeref:struct:port_watcher::rconn	file:
local_rconn	secchan/stp-secchan.c	/^    struct rconn *local_rconn;$/;"	m	struct:stp_data	typeref:struct:stp_data::rconn	file:
localedir	Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
log_backtrace	lib/fault.c	/^log_backtrace(void)$/;"	f
log_ca_cert	lib/vconn-ssl.c	/^log_ca_cert(const char *file_name, X509 *cert)$/;"	f	file:
log_callers	lib/leak-checker.c	/^log_callers(const char *format, ...)$/;"	f
log_file	lib/vlog.c	/^static FILE *log_file;$/;"	v	file:
log_file_name	lib/vlog.c	/^static char *log_file_name;$/;"	v	file:
log_nlmsg	lib/netlink.c	/^log_nlmsg(const char *function, int error,$/;"	f	file:
log_port_status	secchan/port-watcher.c	/^log_port_status(uint32_t port_no,$/;"	f	file:
log_wakeup	lib/poll-loop.c	/^log_wakeup(const struct backtrace *backtrace, const char *format, ...)$/;"	f
long_options_to_short_options	lib/command-line.c	/^long_options_to_short_options(const struct option options[])$/;"	f
lookup_count	include/openflow/openflow.h	/^    uint64_t lookup_count;  \/* Number of packets looked up in table. *\/$/;"	m	struct:ofp_table_stats
lookup_count	oflib/ofl-structs.h	/^    uint64_t   lookup_count;  \/* Number of packets looked up in table. *\/$/;"	m	struct:ofl_table_stats
lookup_ip	lib/socket-util.c	/^lookup_ip(const char *host_name, struct in_addr *addr) $/;"	f
lookup_ipv6	lib/ipv6_util.c	/^lookup_ipv6(const char *host_name, struct in6_addr *addr)$/;"	f	file:
lookup_netdev	lib/netdev.c	/^lookup_netdev(const struct netdev_monitor *mon, const char *name)$/;"	f	file:
lookup_openflow_multicast_group	lib/dpif.c	/^lookup_openflow_multicast_group(int dp_idx, int *multicast_group)$/;"	f	file:
lookup_port	secchan/port-watcher.c	/^lookup_port(const struct port_watcher *pw, uint32_t port_no)$/;"	f	file:
lru_node	lib/mac-learning.c	/^    struct list lru_node;       \/* Element in 'lrus' or 'free' list. *\/$/;"	m	struct:mac_entry	typeref:struct:mac_entry::list	file:
lrus	lib/mac-learning.c	/^    struct list lrus;           \/* In-use entries, least recently used at the$/;"	m	struct:mac_learning	typeref:struct:mac_learning::list	file:
mac	lib/mac-learning.c	/^    uint8_t mac[ETH_ADDR_LEN];  \/* Known MAC address. *\/$/;"	m	struct:mac_entry	file:
mac_entry	lib/mac-learning.c	/^struct mac_entry {$/;"	s	file:
mac_entry_from_lru_node	lib/mac-learning.c	/^mac_entry_from_lru_node(struct list *list)$/;"	f	file:
mac_learning	lib/mac-learning.c	/^struct mac_learning {$/;"	s	file:
mac_learning_create	lib/mac-learning.c	/^mac_learning_create(void)$/;"	f
mac_learning_destroy	lib/mac-learning.c	/^mac_learning_destroy(struct mac_learning *ml)$/;"	f
mac_learning_flush	lib/mac-learning.c	/^mac_learning_flush(struct mac_learning *ml)$/;"	f
mac_learning_learn	lib/mac-learning.c	/^mac_learning_learn(struct mac_learning *ml,$/;"	f
mac_learning_lookup	lib/mac-learning.c	/^mac_learning_lookup(const struct mac_learning *ml,$/;"	f
mac_learning_lookup_tag	lib/mac-learning.c	/^mac_learning_lookup_tag(const struct mac_learning *ml,$/;"	f
mac_learning_run	lib/mac-learning.c	/^mac_learning_run(struct mac_learning *ml, struct tag_set *set)$/;"	f
mac_learning_wait	lib/mac-learning.c	/^mac_learning_wait(struct mac_learning *ml)$/;"	f
mac_table_bucket	lib/mac-learning.c	/^mac_table_bucket(const struct mac_learning *ml,$/;"	f	file:
mac_table_hash	lib/mac-learning.c	/^mac_table_hash(const uint8_t mac[ETH_ADDR_LEN], uint16_t vlan)$/;"	f	file:
magic_number	lib/pcap.c	/^    uint32_t magic_number;   \/* magic number *\/$/;"	m	struct:pcap_hdr	file:
main	secchan/secchan.c	/^main(int argc, char *argv[])$/;"	f
main	udatapath/udatapath.c	/^main(int argc, char *argv[])$/;"	f
main	utilities/dpctl.c	/^int main(int argc, char *argv[])$/;"	f
main	utilities/ofp-discover.c	/^main(int argc, char *argv[])$/;"	f
main	utilities/ofp-kill.c	/^main(int argc, char *argv[])$/;"	f
main	utilities/vlogconf.c	/^int main(int argc, char *argv[])$/;"	f
make_add_flow	lib/ofp.c	/^make_add_flow(const struct flow *flow, uint32_t buffer_id, uint8_t table_id,$/;"	f
make_add_simple_flow	lib/ofp.c	/^make_add_simple_flow(const struct flow *flow,$/;"	f
make_all_match	utilities/dpctl.c	/^make_all_match(struct ofl_match_header **match) {$/;"	f	file:
make_buffered_packet_out	lib/ofp.c	/^make_buffered_packet_out(uint32_t buffer_id,$/;"	f
make_del_flow	lib/ofp.c	/^make_del_flow(const struct flow *flow, uint8_t table_id)$/;"	f
make_dhcpdiscover	lib/dhcp-client.c	/^make_dhcpdiscover(struct dhclient *cli, struct dhcp_msg *msg)$/;"	f	file:
make_dhcprequest	lib/dhcp-client.c	/^make_dhcprequest(struct dhclient *cli, struct dhcp_msg *msg)$/;"	f	file:
make_echo_reply	lib/ofp.c	/^make_echo_reply(const struct ofp_header *rq)$/;"	f
make_echo_request	lib/ofp.c	/^make_echo_request(void)$/;"	f
make_flow_mod	lib/ofp.c	/^make_flow_mod(uint8_t command, uint8_t table_id,$/;"	f
make_in4_sockaddr	lib/netdev.c	/^make_in4_sockaddr(struct sockaddr *sa, struct in_addr addr)$/;"	f	file:
make_openflow	lib/ofp.c	/^make_openflow(size_t openflow_len, uint8_t type, struct ofpbuf **bufferp)$/;"	f
make_openflow_xid	lib/ofp.c	/^make_openflow_xid(size_t openflow_len, uint8_t type, uint32_t xid,$/;"	f
make_packet_out	lib/ofp.c	/^make_packet_out(const struct ofpbuf *packet, uint32_t buffer_id,$/;"	f
make_pidfile	lib/daemon.c	/^make_pidfile(void)$/;"	f	file:
make_pidfile_name	lib/daemon.c	/^make_pidfile_name(const char *name) $/;"	f
make_port_desc_request	lib/ofp.c	/^make_port_desc_request(void){$/;"	f
make_request	utilities/ofp-pki.in	/^make_request() {$/;"	f
make_sockaddr_un	lib/socket-util.c	/^make_sockaddr_un(const char *name, struct sockaddr_un* un, socklen_t *un_len)$/;"	f	file:
make_tmpdir	utilities/ofp-pki.in	/^make_tmpdir() {$/;"	f
make_unbuffered_packet_out	lib/ofp.c	/^make_unbuffered_packet_out(const struct ofpbuf *packet,$/;"	f
make_unix_socket	lib/socket-util.c	/^make_unix_socket(int style, bool nonblock, bool passcred UNUSED,$/;"	f
make_unknown_mac_tag	lib/mac-learning.c	/^make_unknown_mac_tag(const struct mac_learning *ml,$/;"	f	file:
malloc_hook_func	lib/leak-checker.c	/^    malloc_hook_type *malloc_hook_func;$/;"	m	struct:hooks	file:
malloc_hook_type	lib/leak-checker.c	/^typedef void *malloc_hook_type(size_t, const void *);$/;"	t	file:
man8dir	Makefile	/^man8dir = $(mandir)\/man8$/;"	m
man_MANS	Makefile	/^man_MANS = secchan\/ofprotocol.8 utilities\/dpctl.8 \\$/;"	m
mandir	Makefile	/^mandir = ${datarootdir}\/man$/;"	m
map	lib/shash.h	/^    struct hmap map;$/;"	m	struct:shash	typeref:struct:shash::hmap
mask	include/openflow/openflow.h	/^	uint32_t mask;                 \/* Bitmap of OFPPC_* flags to be changed. *\/$/;"	m	struct:ofp_port_mod
mask	lib/hmap.h	/^    size_t mask;$/;"	m	struct:hmap
mask	oflib/ofl-messages.h	/^    uint32_t   mask;      \/* Bitmap of OFPPC_* flags to be changed. *\/$/;"	m	struct:ofl_msg_port_mod
mask_all	utilities/dpctl.c	/^static uint8_t mask_all[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff};$/;"	v	file:
maskable	oflib/oxm-match.h	/^    bool maskable;                    \/* Writable with OXAST_REG_{MOVE,LOAD}? *\/$/;"	m	struct:oxm_field
match	include/openflow/openflow.h	/^	struct ofp_match match; \/* Description of fields. Variable size. *\/$/;"	m	struct:ofp_flow_removed	typeref:struct:ofp_flow_removed::ofp_match
match	include/openflow/openflow.h	/^	struct ofp_match match; \/* Description of fields. Variable size. *\/$/;"	m	struct:ofp_flow_stats	typeref:struct:ofp_flow_stats::ofp_match
match	include/openflow/openflow.h	/^	struct ofp_match match; \/* Fields to match. Variable size. *\/$/;"	m	struct:ofp_aggregate_stats_request	typeref:struct:ofp_aggregate_stats_request::ofp_match
match	include/openflow/openflow.h	/^	struct ofp_match match; \/* Fields to match. Variable size. *\/$/;"	m	struct:ofp_flow_mod	typeref:struct:ofp_flow_mod::ofp_match
match	include/openflow/openflow.h	/^	struct ofp_match match; \/* Fields to match. Variable size. *\/$/;"	m	struct:ofp_flow_stats_request	typeref:struct:ofp_flow_stats_request::ofp_match
match	include/openflow/openflow.h	/^	struct ofp_match match; \/* Packet metadata. Variable size. *\/$/;"	m	struct:ofp_packet_in	typeref:struct:ofp_packet_in::ofp_match
match	oflib/ofl-messages.h	/^    struct ofl_match_header        *match;        \/* Fields to match *\/$/;"	m	struct:ofl_msg_flow_mod	typeref:struct:ofl_msg_flow_mod::ofl_match_header
match	oflib/ofl-messages.h	/^    struct ofl_match_header     *match;$/;"	m	struct:ofl_msg_packet_in	typeref:struct:ofl_msg_packet_in::ofl_match_header
match	oflib/ofl-messages.h	/^    struct ofl_match_header  *match;       \/* Fields to match. *\/$/;"	m	struct:ofl_msg_multipart_request_flow	typeref:struct:ofl_msg_multipart_request_flow::ofl_match_header
match	oflib/ofl-structs.h	/^    struct ofl_match_header        *match;         \/* Description of fields. *\/$/;"	m	struct:ofl_flow_stats	typeref:struct:ofl_flow_stats::ofl_match_header
match	oflib/ofl.h	/^    struct ofl_exp_match  *match;$/;"	m	struct:ofl_exp	typeref:struct:ofl_exp::ofl_exp_match
match	udatapath/flow_entry.h	/^    struct ofl_match_header *match; \/* Original match structure is stored in stats;$/;"	m	struct:flow_entry	typeref:struct:flow_entry::ofl_match_header
match	udatapath/packet_handle_std.h	/^   struct ofl_match  match;  $/;"	m	struct:packet_handle_std	typeref:struct:packet_handle_std::ofl_match
match_128	udatapath/match_std.c	/^match_128(uint8_t *a, uint8_t *b) {$/;"	f	file:
match_16	udatapath/match_std.c	/^match_16(uint8_t *a, uint8_t *b) {$/;"	f	file:
match_32	udatapath/match_std.c	/^match_32(uint8_t *a, uint8_t *b) {$/;"	f	file:
match_48	udatapath/match_std.c	/^match_48(uint8_t *a, uint8_t *b) {$/;"	f	file:
match_64	udatapath/match_std.c	/^match_64(uint8_t *a, uint8_t *b) {$/;"	f	file:
match_8	udatapath/match_std.c	/^match_8(uint8_t *a, uint8_t *b) {$/;"	f	file:
match_entries	udatapath/flow_table.h	/^    struct list               match_entries;  \/* list of entries in order. *\/$/;"	m	struct:flow_table	typeref:struct:flow_table::list
match_fields	oflib/ofl-structs.h	/^    struct hmap match_fields;         \/* Match fields. Contain OXM TLV's  *\/$/;"	m	struct:ofl_match	typeref:struct:ofl_match::hmap
match_mask128	udatapath/match_std.c	/^match_mask128(uint8_t *a, uint8_t *am, uint8_t *b) {$/;"	f	file:
match_mask16	udatapath/match_std.c	/^match_mask16(uint8_t *a, uint8_t *am, uint8_t *b) {$/;"	f	file:
match_mask32	udatapath/match_std.c	/^match_mask32(uint8_t *a, uint8_t *am, uint8_t *b) {$/;"	f	file:
match_mask48	udatapath/match_std.c	/^match_mask48(uint8_t *a, uint8_t *am, uint8_t *b) {$/;"	f	file:
match_mask64	udatapath/match_std.c	/^match_mask64(uint8_t *a, uint8_t *am, uint8_t *b) {$/;"	f	file:
match_mask8	udatapath/match_std.c	/^match_mask8(uint8_t *a, uint8_t *am, uint8_t *b) {$/;"	f	file:
match_node	udatapath/flow_entry.h	/^    struct list              match_node;  \/* list nodes in flow table lists. *\/$/;"	m	struct:flow_entry	typeref:struct:flow_entry::list
match_std_nonstrict	udatapath/match_std.c	/^match_std_nonstrict(struct ofl_match *a, struct ofl_match *b)$/;"	f
match_std_overlap	udatapath/match_std.c	/^match_std_overlap(struct ofl_match *a, struct ofl_match *b)$/;"	f
match_std_strict	udatapath/match_std.c	/^match_std_strict(struct ofl_match *a, struct ofl_match *b) {$/;"	f
matched_count	include/openflow/openflow.h	/^    uint64_t matched_count; \/* Number of packets that hit table. *\/$/;"	m	struct:ofp_table_stats
matched_count	oflib/ofl-structs.h	/^    uint64_t   matched_count; \/* Number of packets that hit table. *\/$/;"	m	struct:ofl_table_stats
max_age	lib/stp.c	/^    int max_age;                    \/* 8.5.3.4: Time to drop received data. *\/$/;"	m	struct:stp	file:
max_age	lib/stp.c	/^    uint16_t max_age;              \/* 8.5.1.6: Timeout for received data. *\/$/;"	m	struct:stp_config_bpdu	file:
max_args	lib/dhcp.c	/^    size_t max_args;            \/* Maximum number of arguments. *\/$/;"	m	struct:option_class	file:
max_args	utilities/dpctl.c	/^    int max_args;$/;"	m	struct:command	file:
max_backoff	lib/rconn.c	/^    int max_backoff;$/;"	m	struct:rconn	file:
max_backoff	secchan/secchan.h	/^    int max_backoff;          \/* Max # seconds between connection attempts. *\/$/;"	m	struct:settings
max_bands	include/openflow/openflow.h	/^    uint8_t max_bands; \/* Maximum bands per meters *\/$/;"	m	struct:ofp_meter_features
max_bands	oflib/ofl-structs.h	/^    uint8_t max_bands; \/* Maximum bands per meters *\/$/;"	m	struct:ofl_meter_features
max_color	include/openflow/openflow.h	/^    uint8_t max_color; \/* Maximum color value *\/$/;"	m	struct:ofp_meter_features
max_color	oflib/ofl-structs.h	/^    uint8_t max_color; \/* Maximum color value *\/$/;"	m	struct:ofl_meter_features
max_entries	include/openflow/openflow.h	/^    uint32_t max_entries;    \/* Max number of entries supported. *\/$/;"	m	struct:ofp_table_features
max_entries	oflib/ofl-structs.h	/^    uint32_t max_entries;    \/* Max number of entries supported. *\/$/;"	m	struct:ofl_table_features
max_files	lib/fatal-signal.c	/^static size_t n_files, max_files;$/;"	v	file:
max_flows	include/openflow/of_hw_api.h	/^    int max_flows;$/;"	m	struct:of_hw_driver_caps
max_groups	include/openflow/openflow.h	/^	uint32_t max_groups[4]; \/* Maximum number of groups for each type. *\/$/;"	m	struct:ofp_group_features_stats
max_groups	oflib/ofl-messages.h	/^    uint32_t max_groups[4];$/;"	m	struct:ofl_msg_multipart_reply_group_features
max_idle	secchan/secchan.h	/^    int max_idle;             \/* Idle time for flows in fail-open mode. *\/$/;"	m	struct:settings
max_len	include/openflow/openflow.h	/^	uint16_t max_len; \/* Max length to send to controller. *\/$/;"	m	struct:ofp_action_output
max_len	lib/netlink.h	/^    size_t min_len, max_len;$/;"	m	struct:nl_policy
max_len	oflib/ofl-actions.h	/^    uint16_t   max_len; \/* Max length to send to controller. *\/$/;"	m	struct:ofl_action_output
max_meter	include/openflow/openflow.h	/^    uint32_t max_meter; \/* Maximum number of meters. *\/$/;"	m	struct:ofp_meter_features
max_meter	oflib/ofl-structs.h	/^    uint32_t max_meter; \/* Maximum number of meters. *\/$/;"	m	struct:ofl_meter_features
max_num	include/openflow/bme-ext.h	/^  uint32_t max_num;$/;"	m	struct:ofp_bme_set_metadata_from_counter
max_num	oflib-exp/ofl-exp-bme.h	/^    uint32_t max_num;$/;"	m	struct:ofl_bme_set_metadata_from_counter
max_queues	udatapath/datapath.h	/^    uint32_t         max_queues; \/* used when creating ports *\/$/;"	m	struct:datapath
max_queues	udatapath/dp_ports.h	/^    uint16_t max_queues;$/;"	m	struct:sw_port
max_speed	include/openflow/openflow.h	/^	uint32_t max_speed;               \/* Max port bitrate in kbps *\/$/;"	m	struct:ofp_port
max_speed	oflib/ofl-structs.h	/^    uint32_t   max_speed;     \/* Max port bitrate in kbps *\/$/;"	m	struct:ofl_port
max_timeout	lib/dhcp-client.c	/^    unsigned int max_timeout;$/;"	m	struct:dhclient	file:
max_weight	udatapath/group_entry.c	/^    uint16_t max_weight;  \/* maximum weight of the buckets. *\/$/;"	m	struct:group_entry_wrr_data	file:
message_age	lib/stp.c	/^    uint16_t message_age;          \/* 8.5.1.5: Age of BPDU at tx time. *\/$/;"	m	struct:stp_config_bpdu	file:
message_age_timer	lib/stp.c	/^    struct stp_timer message_age_timer; \/* 8.5.6.1: Age of received info. *\/$/;"	m	struct:stp_port	typeref:struct:stp_port::stp_timer	file:
metadata	include/openflow/openflow.h	/^	uint64_t metadata;      \/* Metadata value to write *\/$/;"	m	struct:ofp_instruction_write_metadata
metadata	oflib/ofl-structs.h	/^    uint64_t   metadata;         \/* Metadata passed between tables. *\/$/;"	m	struct:ofl_match
metadata	oflib/ofl-structs.h	/^    uint64_t   metadata;         \/* Metadata passed between tables. *\/$/;"	m	struct:ofl_match_standard
metadata	oflib/ofl-structs.h	/^    uint64_t   metadata;      \/* Metadata value to write *\/$/;"	m	struct:ofl_instruction_write_metadata
metadata_mask	include/openflow/openflow.h	/^	uint64_t metadata_mask; \/* Metadata write bitmask *\/$/;"	m	struct:ofp_instruction_write_metadata
metadata_mask	oflib/ofl-structs.h	/^    uint64_t   metadata_mask;    \/* Mask for metadata. *\/$/;"	m	struct:ofl_match
metadata_mask	oflib/ofl-structs.h	/^    uint64_t   metadata_mask;    \/* Mask for metadata. *\/$/;"	m	struct:ofl_match_standard
metadata_mask	oflib/ofl-structs.h	/^    uint64_t   metadata_mask; \/* Metadata write bitmask *\/$/;"	m	struct:ofl_instruction_write_metadata
metadata_match	include/openflow/openflow.h	/^    uint64_t metadata_match; \/* Bits of metadata table can match. *\/$/;"	m	struct:ofp_table_features
metadata_match	oflib/ofl-structs.h	/^    uint64_t metadata_match; \/* Bits of metadata table can match. *\/$/;"	m	struct:ofl_table_features
metadata_write	include/openflow/openflow.h	/^    uint64_t metadata_write; \/* Bits of metadata table can write. *\/$/;"	m	struct:ofp_table_features
metadata_write	oflib/ofl-structs.h	/^    uint64_t metadata_write; \/* Bits of metadata table can write. *\/$/;"	m	struct:ofl_table_features
meter_bands_num	oflib/ofl-messages.h	/^    size_t  meter_bands_num; $/;"	m	struct:ofl_msg_meter_mod
meter_bands_num	oflib/ofl-structs.h	/^    size_t meter_bands_num;$/;"	m	struct:ofl_meter_config
meter_bands_num	oflib/ofl-structs.h	/^    size_t meter_bands_num;$/;"	m	struct:ofl_meter_stats
meter_config	utilities/dpctl.c	/^meter_config(struct vconn *vconn, int argc UNUSED, char *argv[]){$/;"	f	file:
meter_entries	udatapath/meter_table.h	/^  struct hmap			meter_entries;	    \/* Meter entries *\/$/;"	m	struct:meter_table	typeref:struct:meter_table::hmap
meter_entry	udatapath/meter_entry.h	/^struct meter_entry {$/;"	s
meter_entry_add_flow_ref	udatapath/meter_entry.c	/^meter_entry_add_flow_ref(struct meter_entry *entry, struct flow_entry *fe) {$/;"	f
meter_entry_apply	udatapath/meter_entry.c	/^meter_entry_apply(struct meter_entry *entry, struct packet **pkt){$/;"	f
meter_entry_create	udatapath/meter_entry.c	/^meter_entry_create(struct datapath *dp, struct meter_table *table, struct ofl_msg_meter_mod *mod) {$/;"	f
meter_entry_del_flow_ref	udatapath/meter_entry.c	/^meter_entry_del_flow_ref(struct meter_entry *entry, struct flow_entry *fe) {$/;"	f
meter_entry_destroy	udatapath/meter_entry.c	/^meter_entry_destroy(struct meter_entry *entry) {$/;"	f
meter_entry_update	udatapath/meter_entry.c	/^meter_entry_update(struct meter_entry *entry) {$/;"	f
meter_features	utilities/dpctl.c	/^meter_features(struct vconn *vconn, int argc UNUSED, char *argv[] UNUSED){$/;"	f	file:
meter_id	include/openflow/openflow.h	/^    uint32_t meter_id; \/* Meter instance, or OFPM_ALL. *\/$/;"	m	struct:ofp_meter_multipart_request
meter_id	include/openflow/openflow.h	/^    uint32_t meter_id; \/* Meter instance. *\/$/;"	m	struct:ofp_instruction_meter
meter_id	include/openflow/openflow.h	/^    uint32_t meter_id; \/* Meter instance. *\/$/;"	m	struct:ofp_meter_config
meter_id	include/openflow/openflow.h	/^    uint32_t meter_id; \/* Meter instance. *\/$/;"	m	struct:ofp_meter_mod
meter_id	include/openflow/openflow.h	/^    uint32_t meter_id; \/* Meter instance. *\/$/;"	m	struct:ofp_meter_stats
meter_id	oflib/ofl-messages.h	/^    uint32_t meter_id; \/* Meter instance, or OFPM_ALL. *\/$/;"	m	struct:ofl_msg_multipart_meter_request
meter_id	oflib/ofl-messages.h	/^    uint32_t meter_id; \/* Meter instance. *\/$/;"	m	struct:ofl_msg_meter_mod
meter_id	oflib/ofl-structs.h	/^    uint32_t meter_id; \/* Meter instance. *\/$/;"	m	struct:ofl_meter_config
meter_id	oflib/ofl-structs.h	/^    uint32_t meter_id; \/* Meter instance. *\/$/;"	m	struct:ofl_meter_stats
meter_id	oflib/ofl-structs.h	/^    uint32_t meter_id;$/;"	m	struct:ofl_instruction_meter
meter_id	udatapath/flow_entry.c	/^    uint32_t      meter_id;$/;"	m	struct:meter_ref_entry	file:
meter_mod	utilities/dpctl.c	/^static void meter_mod(struct vconn *vconn, int argc, char *argv[]){$/;"	f	file:
meter_mod_cmd_names	utilities/dpctl.h	/^static struct names16 meter_mod_cmd_names[] = {$/;"	v	typeref:struct:names16
meter_ref_entry	udatapath/flow_entry.c	/^struct meter_ref_entry {$/;"	s	file:
meter_refs	udatapath/flow_entry.h	/^    struct list              meter_refs;  \/* list of meters referencing the flow. *\/$/;"	m	struct:flow_entry	typeref:struct:flow_entry::list
meter_table	udatapath/meter_table.h	/^struct meter_table {$/;"	s
meter_table_add	udatapath/meter_table.c	/^meter_table_add(struct meter_table *table, struct ofl_msg_meter_mod *mod) {$/;"	f	file:
meter_table_add_tokens	udatapath/meter_table.c	/^meter_table_add_tokens(struct meter_table *table){$/;"	f
meter_table_apply	udatapath/meter_table.c	/^meter_table_apply(struct meter_table *table, struct packet **packet, uint32_t meter_id) {$/;"	f
meter_table_create	udatapath/meter_table.c	/^meter_table_create(struct datapath *dp) {$/;"	f
meter_table_delete	udatapath/meter_table.c	/^meter_table_delete(struct meter_table *table, struct ofl_msg_meter_mod *mod) {$/;"	f	file:
meter_table_destroy	udatapath/meter_table.c	/^meter_table_destroy(struct meter_table *table) {$/;"	f
meter_table_find	udatapath/meter_table.c	/^meter_table_find(struct meter_table *table, uint32_t meter_id) {$/;"	f
meter_table_handle_features_request	udatapath/meter_table.c	/^meter_table_handle_features_request(struct meter_table *table,$/;"	f
meter_table_handle_meter_mod	udatapath/meter_table.c	/^meter_table_handle_meter_mod(struct meter_table *table, struct ofl_msg_meter_mod *mod,$/;"	f
meter_table_handle_stats_request_meter	udatapath/meter_table.c	/^meter_table_handle_stats_request_meter(struct meter_table *table,$/;"	f
meter_table_handle_stats_request_meter_conf	udatapath/meter_table.c	/^meter_table_handle_stats_request_meter_conf(struct meter_table *table,$/;"	f
meter_table_modify	udatapath/meter_table.c	/^meter_table_modify(struct meter_table *table, struct ofl_msg_meter_mod *mod) {$/;"	f	file:
meters	udatapath/datapath.h	/^    struct meter_table *meters; \/* Meter tables *\/$/;"	m	struct:datapath	typeref:struct:datapath::meter_table
mfr_desc	include/openflow/openflow.h	/^	char mfr_desc[DESC_STR_LEN];     \/* Manufacturer description. *\/$/;"	m	struct:ofp_desc
mfr_desc	oflib/ofl-messages.h	/^    char  *mfr_desc;     \/* Manufacturer description. Max DESC_STR_LEN *\/$/;"	m	struct:ofl_msg_reply_desc
mfr_desc	udatapath/datapath.h	/^    char  *mfr_desc;$/;"	m	struct:datapath
min_args	lib/dhcp.c	/^    size_t min_args;            \/* Minimum number of arguments. *\/$/;"	m	struct:option_class	file:
min_args	utilities/dpctl.c	/^    int min_args;$/;"	m	struct:command	file:
min_len	lib/netlink.h	/^    size_t min_len, max_len;$/;"	m	struct:nl_policy
min_timeout	lib/dhcp-client.c	/^    unsigned int min_timeout;$/;"	m	struct:dhclient	file:
min_version	lib/vconn-provider.h	/^    int min_version;$/;"	m	struct:vconn
min_vlog_levels	lib/vlog.c	/^enum vlog_level min_vlog_levels[VLM_N_MODULES];$/;"	v	typeref:enum:vlog_level
miss_send_len	include/openflow/openflow.h	/^	uint16_t miss_send_len; \/* Max bytes of new flow that datapath$/;"	m	struct:ofp_switch_config
miss_send_len	oflib/ofl-structs.h	/^    uint16_t   miss_send_len; \/* Max bytes of new flow that datapath should$/;"	m	struct:ofl_config
mkdir_p	Makefile	/^mkdir_p = \/bin\/mkdir -p$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
ml	secchan/in-band.c	/^    struct mac_learning *ml;$/;"	m	struct:in_band_data	typeref:struct:in_band_data::mac_learning	file:
modify	lib/ofpstat.h	/^		uint64_t modify;$/;"	m	struct:ofpstat::__anon4
modify_dhcp_request	secchan/discovery.c	/^modify_dhcp_request(struct dhcp_msg *msg, void *aux UNUSED)$/;"	f	file:
modify_dhcp_request	utilities/ofp-discover.c	/^modify_dhcp_request(struct dhcp_msg *msg, void *aux UNUSED)$/;"	f	file:
modify_request	lib/dhcp-client.c	/^    void (*modify_request)(struct dhcp_msg *, void *aux);$/;"	m	struct:dhclient	file:
modify_strict	lib/ofpstat.h	/^		uint64_t modify_strict;$/;"	m	struct:ofpstat::__anon4
module_names	lib/vlog.c	/^static const char *module_names[VLM_N_MODULES] = { $/;"	v	file:
mon	secchan/port-watcher.c	/^    struct netdev_monitor *mon;$/;"	m	struct:port_watcher	typeref:struct:port_watcher::netdev_monitor	file:
monitor	utilities/dpctl.c	/^monitor(struct vconn *vconn, int argc UNUSED, char *argv[] UNUSED) {$/;"	f	file:
monitor_name	secchan/secchan.h	/^    const char *monitor_name;   \/* Listen for traffic monitor connections. *\/$/;"	m	struct:settings
monitors	lib/rconn.c	/^    struct vconn *monitors[8];$/;"	m	struct:rconn	typeref:struct:rconn::vconn	file:
mpls	lib/packets.h	/^   struct mpls_header     * mpls;$/;"	m	struct:protocols_std	typeref:struct:protocols_std::mpls_header
mpls_header	lib/packets.h	/^struct mpls_header {$/;"	s
mpls_label	include/openflow/bme-ext.h	/^    uint32_t mpls_label;$/;"	m	struct:ofp_bme_serialize
mpls_label	include/openflow/openflow.h	/^	uint32_t mpls_label; \/* MPLS label *\/$/;"	m	struct:ofp_action_mpls_label
mpls_label	oflib-exp/ofl-exp-bme.h	/^    uint32_t mpls_label;$/;"	m	struct:ofl_bme_serialize
mpls_label	oflib/ofl-actions.h	/^    uint32_t   mpls_label; \/* MPLS label *\/$/;"	m	struct:ofl_action_set_mpls_label
mpls_label	oflib/ofl-structs.h	/^    uint32_t   mpls_label;       \/* MPLS label. *\/$/;"	m	struct:ofl_match
mpls_label	oflib/ofl-structs.h	/^    uint32_t   mpls_label;       \/* MPLS label. *\/$/;"	m	struct:ofl_match_standard
mpls_tc	oflib/ofl-structs.h	/^    uint8_t    mpls_tc;           \/* MPLS TC. *\/$/;"	m	struct:ofl_match
mpls_tc	oflib/ofl-structs.h	/^    uint8_t    mpls_tc;           \/* MPLS TC. *\/$/;"	m	struct:ofl_match_standard
mpls_ttl	include/openflow/openflow.h	/^	uint8_t mpls_ttl; \/* MPLS TTL *\/$/;"	m	struct:ofp_action_mpls_ttl
mpls_ttl	oflib/ofl-actions.h	/^    uint8_t   mpls_ttl; \/* MPLS TTL *\/$/;"	m	struct:ofl_action_mpls_ttl
mpls_ttl	udatapath/dp_actions.c	/^    uint32_t mpls_ttl;$/;"	m	struct:pending_pkt	file:
mpls_ttl	udatapath/dp_exp_bme.c	/^    uint32_t mpls_ttl;$/;"	m	struct:pending_pkt	file:
ms_to_timer	lib/stp.c	/^ms_to_timer(int ms)$/;"	f	file:
ms_to_timer_remainder	lib/stp.c	/^ms_to_timer_remainder(int ms)$/;"	f	file:
msg	lib/netlink-protocol.h	/^        struct nlmsghdr msg;$/;"	m	struct:nlmsgerr	typeref:struct:nlmsgerr::nlmsghdr
msg	oflib/ofl.h	/^    struct ofl_exp_msg    *msg;$/;"	m	struct:ofl_exp	typeref:struct:ofl_exp::ofl_exp_msg
mtu	lib/netdev.c	/^    int mtu;$/;"	m	struct:netdev	file:
must_exist	utilities/ofp-pki.in	/^must_exist() {$/;"	f
must_not_exist	utilities/ofp-pki.in	/^must_not_exist() {$/;"	f
must_succeed	debian/openflow-switch.init	/^must_succeed() {$/;"	f
n	lib/dhcp.h	/^    size_t n;                   \/* Number of bytes of data. *\/$/;"	m	struct:dhcp_option
n	lib/hmap.h	/^    size_t n;$/;"	m	struct:hmap
n	lib/queue.h	/^    int n;                      \/* Number of queued packets. *\/$/;"	m	struct:ofp_queue
n	lib/svec.h	/^    size_t n;$/;"	m	struct:svec
n	lib/tag.h	/^    unsigned int n;$/;"	m	struct:tag_set
n_attempted_connections	lib/rconn.c	/^    unsigned int n_attempted_connections, n_successful_connections;$/;"	m	struct:rconn	file:
n_buffers	include/openflow/openflow.h	/^	uint32_t n_buffers;       \/* Max packets buffered at once. *\/$/;"	m	struct:ofp_switch_features
n_buffers	oflib/ofl-messages.h	/^    uint32_t          n_buffers;    \/* Max packets buffered at once. *\/$/;"	m	struct:ofl_msg_features_reply
n_categories	secchan/status.c	/^    size_t n_categories, allocated_categories;$/;"	m	struct:switch_status	file:
n_cbs	secchan/port-watcher.c	/^    int n_cbs;$/;"	m	struct:port_watcher	file:
n_changes	secchan/discovery.c	/^    int n_changes;$/;"	m	struct:discovery	file:
n_dropped	lib/vlog.h	/^    unsigned int n_dropped;     \/* Number of messages dropped. *\/$/;"	m	struct:vlog_rate_limit
n_files	lib/fatal-signal.c	/^static size_t n_files, max_files;$/;"	v	file:
n_frames	lib/backtrace.h	/^    int n_frames;$/;"	m	struct:backtrace
n_hooks	lib/fatal-signal.c	/^static size_t n_hooks;$/;"	v	file:
n_hooks	secchan/secchan.c	/^    size_t n_hooks, allocated_hooks;$/;"	m	struct:secchan	file:
n_ifaces	utilities/ofp-discover.c	/^static int n_ifaces;$/;"	v	file:
n_limited	secchan/ratelimit.c	/^    unsigned long long n_limited;       \/* # queued for rate limiting. *\/$/;"	m	struct:rate_limiter	file:
n_listeners	secchan/secchan.h	/^    size_t n_listeners;          \/* Number of mgmt connection listeners. *\/$/;"	m	struct:settings
n_listeners	udatapath/datapath.h	/^    size_t n_listeners;$/;"	m	struct:datapath
n_listeners_aux	udatapath/datapath.h	/^    size_t n_listeners_aux;$/;"	m	struct:datapath
n_local_cbs	secchan/port-watcher.c	/^    int n_local_cbs;$/;"	m	struct:port_watcher	file:
n_monitors	lib/rconn.c	/^    size_t n_monitors;$/;"	m	struct:rconn	file:
n_normal	secchan/ratelimit.c	/^    unsigned long long n_normal;        \/* # txed w\/o rate limit queuing. *\/$/;"	m	struct:rate_limiter	file:
n_queue_dropped	secchan/ratelimit.c	/^    unsigned long long n_queue_dropped; \/* # dropped due to queue overflow. *\/$/;"	m	struct:rate_limiter	file:
n_queued	secchan/in-band.c	/^    int n_queued;$/;"	m	struct:in_band_data	file:
n_queued	secchan/ratelimit.c	/^    int n_queued;               \/* Sum over queues[*].n. *\/$/;"	m	struct:rate_limiter	file:
n_successful_connections	lib/rconn.c	/^    unsigned int n_attempted_connections, n_successful_connections;$/;"	m	struct:rconn	file:
n_tables	include/openflow/openflow.h	/^	uint8_t n_tables;         \/* Number of tables supported by datapath. *\/$/;"	m	struct:ofp_switch_features
n_tables	oflib/ofl-messages.h	/^    uint8_t           n_tables;     \/* Number of tables supported by$/;"	m	struct:ofl_msg_features_reply
n_tx_dropped	secchan/ratelimit.c	/^    unsigned long long n_tx_dropped;    \/* # dropped due to tx overflow. *\/$/;"	m	struct:rate_limiter	file:
n_txq	secchan/port-watcher.c	/^    int n_txq;$/;"	m	struct:port_watcher	file:
n_txq	secchan/ratelimit.c	/^    int n_txq;                  \/* No. of packets waiting in rconn for tx. *\/$/;"	m	struct:rate_limiter	file:
n_txq	secchan/secchan.h	/^    int n_txq;                  \/* No. of packets queued for tx on 'rconn'. *\/$/;"	m	struct:half
n_txq	secchan/stp-secchan.c	/^    int n_txq;$/;"	m	struct:stp_data	file:
n_txq	udatapath/datapath.h	/^    int n_txq;                  \/* Number of packets queued for tx on rconn. *\/$/;"	m	struct:remote
n_unix_sockets	lib/vconn-unix.c	/^static int n_unix_sockets;$/;"	v	file:
n_waiters	lib/poll-loop.c	/^static size_t n_waiters;$/;"	v	file:
name	include/openflow/openflow.h	/^	char name[OFP_MAX_PORT_NAME_LEN]; \/* Null-terminated *\/$/;"	m	struct:ofp_port
name	include/openflow/openflow.h	/^    char name[OFP_MAX_TABLE_NAME_LEN];$/;"	m	struct:ofp_table_features
name	lib/dhcp.c	/^    const char *name;           \/* Name. *\/$/;"	m	struct:arg_type	file:
name	lib/dhcp.c	/^    const char *name;           \/* Name. *\/$/;"	m	struct:option_class	file:
name	lib/netdev.c	/^    char *name;$/;"	m	struct:netdev	file:
name	lib/process.c	/^    char *name;$/;"	m	struct:process	file:
name	lib/rconn.c	/^    char *name;$/;"	m	struct:rconn	file:
name	lib/shash.h	/^    char *name;$/;"	m	struct:shash_node
name	lib/stp.c	/^    char *name;                     \/* Human-readable name for log messages. *\/$/;"	m	struct:stp	file:
name	lib/vconn-provider.h	/^    char *name;$/;"	m	struct:pvconn
name	lib/vconn-provider.h	/^    char *name;$/;"	m	struct:vconn
name	lib/vconn-provider.h	/^    const char *name;$/;"	m	struct:pvconn_class
name	lib/vconn-provider.h	/^    const char *name;$/;"	m	struct:vconn_class
name	lib/vlog.c	/^    const char *name;           \/* Name. *\/$/;"	m	struct:facility	file:
name	oflib/ofl-structs.h	/^    char      *name;$/;"	m	struct:ofl_port
name	oflib/ofl-structs.h	/^    char *name;$/;"	m	struct:ofl_table_features
name	secchan/status.c	/^    char *name;$/;"	m	struct:switch_status_category	file:
name	utilities/dpctl.c	/^    char *name;$/;"	m	struct:command	file:
name	utilities/dpctl.h	/^    char      *name;$/;"	m	struct:names16
name	utilities/dpctl.h	/^    char      *name;$/;"	m	struct:names32
name	utilities/dpctl.h	/^    char     *name;$/;"	m	struct:names8
name	utilities/ofp-discover.c	/^    const char *name;$/;"	m	struct:iface	file:
names	lib/svec.h	/^    char **names;$/;"	m	struct:svec
names16	utilities/dpctl.h	/^struct names16 {$/;"	s
names32	utilities/dpctl.h	/^struct names32 {$/;"	s
names8	utilities/dpctl.h	/^struct names8 {$/;"	s
nbee_link_libnbee_link_a_AR	Makefile	/^nbee_link_libnbee_link_a_AR = $(AR) $(ARFLAGS)$/;"	m
nbee_link_libnbee_link_a_LIBADD	Makefile	/^nbee_link_libnbee_link_a_LIBADD =$/;"	m
nbee_link_libnbee_link_a_OBJECTS	Makefile	/^nbee_link_libnbee_link_a_OBJECTS =  \\$/;"	m
nbee_link_libnbee_link_a_SOURCES	Makefile	/^nbee_link_libnbee_link_a_SOURCES = nbee_link\/nbee_link.cpp \\$/;"	m
nbee_link_libnbee_link_a_SOURCES	nbee_link/automake.mk	/^nbee_link_libnbee_link_a_SOURCES = nbee_link\/nbee_link.cpp \\$/;"	m
nblink_add_entry_hmap	nbee_link/nbee_link.cpp	/^int nblink_add_entry_hmap(struct ofpbuf * pktin, struct hmap * pktout ,struct ofl_match_tlv * pktout_field, int Size)$/;"	f
nblink_check_for_entry_on_hmap	nbee_link/nbee_link.cpp	/^int nblink_check_for_entry_on_hmap(struct hmap * pktout ,uint32_t  header, struct ofl_match_tlv * field)$/;"	f
nblink_extract_exthdr_fields	nbee_link/nbee_link.cpp	/^int nblink_extract_exthdr_fields(struct ofpbuf * pktin, struct ofl_match * pktout, uint16_t type, _nbPDMLField * field, int *destination_num)$/;"	f
nblink_extract_proto_fields	nbee_link/nbee_link.cpp	/^int nblink_extract_proto_fields(struct ofpbuf * pktin, _nbPDMLField * field, struct ofl_match * pktout, uint32_t header)$/;"	f
nblink_initialize	nbee_link/nbee_link.cpp	/^extern "C" int nblink_initialize(void)$/;"	f
nblink_packet_parse	nbee_link/nbee_link.cpp	/^extern "C" int nblink_packet_parse(struct ofpbuf * pktin,  struct ofl_match * pktout, struct protocols_std * pkt_proto)$/;"	f
nd_to_iff_flags	lib/netdev.c	/^nd_to_iff_flags(enum netdev_flags nd)$/;"	f	file:
netdev	lib/dhcp-client.c	/^    struct netdev *netdev;$/;"	m	struct:dhclient	typeref:struct:dhclient::netdev	file:
netdev	lib/netdev.c	/^struct netdev {$/;"	s	file:
netdev	udatapath/dp_ports.h	/^    struct netdev *netdev;$/;"	m	struct:sw_port	typeref:struct:sw_port::netdev
netdev_add_router	lib/netdev.c	/^netdev_add_router(struct in_addr router)$/;"	f
netdev_arp_lookup	lib/netdev.c	/^netdev_arp_lookup(const struct netdev *netdev,$/;"	f
netdev_change_class	lib/netdev.c	/^netdev_change_class(const struct netdev *netdev, uint16_t class_id, uint16_t rate)$/;"	f
netdev_close	lib/netdev.c	/^netdev_close(struct netdev *netdev)$/;"	f
netdev_delete_class	lib/netdev.c	/^netdev_delete_class(const struct netdev *netdev, uint16_t class_id)$/;"	f
netdev_drain	lib/netdev.c	/^netdev_drain(struct netdev *netdev)$/;"	f
netdev_enumerate	lib/netdev.c	/^netdev_enumerate(struct svec *svec)$/;"	f
netdev_fd	lib/netdev.c	/^    int netdev_fd;              \/* Network device. *\/$/;"	m	struct:netdev	file:
netdev_feature_type	lib/netdev.h	/^enum netdev_feature_type {$/;"	g
netdev_flags	lib/netdev.h	/^enum netdev_flags {$/;"	g
netdev_get_etheraddr	lib/netdev.c	/^netdev_get_etheraddr(const struct netdev *netdev)$/;"	f
netdev_get_features	lib/netdev.c	/^netdev_get_features(struct netdev *netdev, int type)$/;"	f
netdev_get_flags	lib/netdev.c	/^netdev_get_flags(const struct netdev *netdev, enum netdev_flags *flagsp)$/;"	f
netdev_get_in4	lib/netdev.c	/^netdev_get_in4(const struct netdev *netdev, struct in_addr *in4)$/;"	f
netdev_get_in6	lib/netdev.c	/^netdev_get_in6(const struct netdev *netdev, struct in6_addr *in6)$/;"	f
netdev_get_mtu	lib/netdev.c	/^netdev_get_mtu(const struct netdev *netdev)$/;"	f
netdev_get_name	lib/netdev.c	/^netdev_get_name(const struct netdev *netdev)$/;"	f
netdev_list	lib/netdev.c	/^static struct list netdev_list = LIST_INITIALIZER(&netdev_list);$/;"	v	typeref:struct:list	file:
netdev_monitor	lib/netdev.c	/^struct netdev_monitor {$/;"	s	file:
netdev_monitor_create	lib/netdev.c	/^netdev_monitor_create(struct netdev_monitor **monp)$/;"	f
netdev_monitor_destroy	lib/netdev.c	/^netdev_monitor_destroy(struct netdev_monitor *mon)$/;"	f
netdev_monitor_poll	lib/netdev.c	/^netdev_monitor_poll(struct netdev_monitor *mon)$/;"	f
netdev_monitor_run	lib/netdev.c	/^netdev_monitor_run(struct netdev_monitor *mon UNUSED)$/;"	f
netdev_monitor_set_devices	lib/netdev.c	/^netdev_monitor_set_devices(struct netdev_monitor *mon,$/;"	f
netdev_monitor_wait	lib/netdev.c	/^netdev_monitor_wait(struct netdev_monitor *mon)$/;"	f
netdev_names	debian/ofp-switch-setup	/^sub netdev_names {$/;"	s
netdev_nodev_get_flags	lib/netdev.c	/^netdev_nodev_get_flags(const char *netdev_name, enum netdev_flags *flagsp)$/;"	f
netdev_open	lib/netdev.c	/^netdev_open(const char *name, int ethertype, struct netdev **netdevp)$/;"	f
netdev_open_tap	lib/netdev.c	/^netdev_open_tap(const char *name, struct netdev **netdevp)$/;"	f
netdev_pseudo_ethertype	lib/netdev.h	/^enum netdev_pseudo_ethertype {$/;"	g
netdev_recv	lib/netdev.c	/^netdev_recv(struct netdev *netdev, struct ofpbuf *buffer)$/;"	f
netdev_recv_wait	lib/netdev.c	/^netdev_recv_wait(struct netdev *netdev)$/;"	f
netdev_send	lib/netdev.c	/^netdev_send(struct netdev *netdev, const struct ofpbuf *buffer,$/;"	f
netdev_send_wait	lib/netdev.c	/^netdev_send_wait(struct netdev *netdev)$/;"	f
netdev_set_etheraddr	lib/netdev.c	/^netdev_set_etheraddr(struct netdev *netdev, const uint8_t mac[ETH_ADDR_LEN])$/;"	f
netdev_set_flags	lib/netdev.c	/^netdev_set_flags(struct netdev *netdev, enum netdev_flags flags,$/;"	f
netdev_set_in4	lib/netdev.c	/^netdev_set_in4(struct netdev *netdev, struct in_addr addr, struct in_addr mask)$/;"	f
netdev_setup_class	lib/netdev.c	/^netdev_setup_class(const struct netdev *netdev, uint16_t class_id,$/;"	f
netdev_setup_root_class	lib/netdev.c	/^netdev_setup_root_class(const struct netdev *netdev, uint16_t class_id,$/;"	f	file:
netdev_setup_slicing	lib/netdev.c	/^netdev_setup_slicing(struct netdev *netdev, uint16_t num_queues)$/;"	f
netdev_turn_flags_off	lib/netdev.c	/^netdev_turn_flags_off(struct netdev *netdev, enum netdev_flags flags,$/;"	f
netdev_turn_flags_on	lib/netdev.c	/^netdev_turn_flags_on(struct netdev *netdev, enum netdev_flags flags,$/;"	f
netdevs	lib/netdev.c	/^    struct svec netdevs;$/;"	m	struct:netdev_monitor	typeref:struct:netdev_monitor::svec	file:
netlink_close	lib/vconn-netlink.c	/^netlink_close(struct vconn *vconn) $/;"	f	file:
netlink_open	lib/vconn-netlink.c	/^netlink_open(const char *name, char *suffix, struct vconn **vconnp)$/;"	f	file:
netlink_recv	lib/vconn-netlink.c	/^netlink_recv(struct vconn *vconn, struct ofpbuf **bufferp)$/;"	f	file:
netlink_send	lib/vconn-netlink.c	/^netlink_send(struct vconn *vconn, struct ofpbuf *buffer) $/;"	f	file:
netlink_vconn	lib/vconn-netlink.c	/^struct netlink_vconn$/;"	s	file:
netlink_vconn_cast	lib/vconn-netlink.c	/^netlink_vconn_cast(struct vconn *vconn) $/;"	f	file:
netlink_vconn_class	lib/vconn-netlink.c	/^struct vconn_class netlink_vconn_class = {$/;"	v	typeref:struct:vconn_class
netlink_wait	lib/vconn-netlink.c	/^netlink_wait(struct vconn *vconn, enum vconn_wait_type wait) $/;"	f	file:
netmask	lib/dhcp-client.c	/^    uint32_t ipaddr, netmask, router;$/;"	m	struct:dhclient	file:
netpdl_DATA	Makefile	/^netpdl_DATA = customnetpdl.xml$/;"	m
netpdldir	Makefile	/^netpdldir = $(datadir)\/openflow$/;"	m
network	lib/pcap.c	/^    uint32_t network;        \/* data link type *\/$/;"	m	struct:pcap_hdr	file:
new_port	udatapath/dp_ports.c	/^new_port(struct datapath *dp, struct sw_port *port, uint32_t port_no,$/;"	f	file:
new_pstream_pvconn	lib/vconn-stream.c	/^new_pstream_pvconn(const char *name, int fd,$/;"	f
new_queue	udatapath/dp_ports.c	/^new_queue(struct sw_port * port, struct sw_queue * queue,$/;"	f	file:
new_ssl_vconn	lib/vconn-ssl.c	/^new_ssl_vconn(const char *name, int fd, enum session_type type,$/;"	f	file:
new_stream_vconn	lib/vconn-stream.c	/^new_stream_vconn(const char *name, int fd, int connect_status,$/;"	f
new_tcp_vconn	lib/vconn-tcp.c	/^new_tcp_vconn(const char *name, int fd, int connect_status,$/;"	f	file:
new_waiter	lib/poll-loop.c	/^new_waiter(int fd, short int events)$/;"	f	file:
next	lib/hmap.h	/^    struct hmap_node *next;     \/* Next in linked list. *\/$/;"	m	struct:hmap_node	typeref:struct:hmap_node::hmap_node
next	lib/list.h	/^    struct list *next;     \/* Next list element. *\/$/;"	m	struct:list	typeref:struct:list::list
next	lib/ofpbuf.h	/^    struct ofpbuf *next;        \/* Next in a list of ofpbufs. *\/$/;"	m	struct:ofpbuf	typeref:struct:ofpbuf::ofpbuf
next	lib/port-array.c	/^next(const struct port_array *pa, unsigned int *idxp)$/;"	f	file:
next	udatapath/dp_ports.h	/^    struct hw_pkt_q_entry *next;$/;"	m	struct:hw_pkt_q_entry	typeref:struct:hw_pkt_q_entry::hw_pkt_q_entry
next_seq	lib/netlink.c	/^static uint32_t next_seq;$/;"	v	file:
next_table_ids	include/openflow/openflow.h	/^    uint8_t next_table_ids[0];$/;"	m	struct:ofp_table_feature_prop_next_tables
next_table_ids	oflib/ofl-structs.h	/^    uint8_t *next_table_ids;$/;"	m	struct:ofl_table_feature_prop_next_tables
next_tx_port	secchan/ratelimit.c	/^    int next_tx_port;           \/* Next port to check in round-robin. *\/$/;"	m	struct:rate_limiter	file:
nicira_header	include/openflow/nicira-ext.h	/^struct nicira_header {$/;"	s
nicira_type	include/openflow/nicira-ext.h	/^enum nicira_type {$/;"	g
nl_attr_get	lib/netlink.c	/^nl_attr_get(const struct nlattr *nla) $/;"	f
nl_attr_get_flag	lib/netlink.c	/^nl_attr_get_flag(const struct nlattr *nla) $/;"	f
nl_attr_get_size	lib/netlink.c	/^nl_attr_get_size(const struct nlattr *nla) $/;"	f
nl_attr_get_string	lib/netlink.c	/^nl_attr_get_string(const struct nlattr *nla) $/;"	f
nl_attr_get_u16	lib/netlink.c	/^nl_attr_get_u16(const struct nlattr *nla) $/;"	f
nl_attr_get_u32	lib/netlink.c	/^nl_attr_get_u32(const struct nlattr *nla) $/;"	f
nl_attr_get_u64	lib/netlink.c	/^nl_attr_get_u64(const struct nlattr *nla) $/;"	f
nl_attr_get_u8	lib/netlink.c	/^nl_attr_get_u8(const struct nlattr *nla) $/;"	f
nl_attr_get_unspec	lib/netlink.c	/^nl_attr_get_unspec(const struct nlattr *nla, size_t size) $/;"	f
nl_attr_type	lib/netlink.h	/^enum nl_attr_type$/;"	g
nl_family	lib/netlink-protocol.h	/^    sa_family_t nl_family;$/;"	m	struct:sockaddr_nl
nl_groups	lib/netlink-protocol.h	/^    uint32_t nl_groups;$/;"	m	struct:sockaddr_nl
nl_lookup_genl_family	lib/netlink.c	/^nl_lookup_genl_family(const char *name, int *number) $/;"	f
nl_msg_genlmsghdr	lib/netlink.c	/^nl_msg_genlmsghdr(const struct ofpbuf *msg) $/;"	f
nl_msg_nlmsgerr	lib/netlink.c	/^nl_msg_nlmsgerr(const struct ofpbuf *msg, int *errorp) $/;"	f
nl_msg_nlmsghdr	lib/netlink.c	/^nl_msg_nlmsghdr(const struct ofpbuf *msg) $/;"	f
nl_msg_put	lib/netlink.c	/^nl_msg_put(struct ofpbuf *msg, const void *data, size_t size) $/;"	f
nl_msg_put_flag	lib/netlink.c	/^nl_msg_put_flag(struct ofpbuf *msg, uint16_t type) $/;"	f
nl_msg_put_genlmsghdr	lib/netlink.c	/^nl_msg_put_genlmsghdr(struct ofpbuf *msg, struct nl_sock *sock,$/;"	f
nl_msg_put_nested	lib/netlink.c	/^nl_msg_put_nested(struct ofpbuf *msg,$/;"	f
nl_msg_put_nlmsghdr	lib/netlink.c	/^nl_msg_put_nlmsghdr(struct ofpbuf *msg, struct nl_sock *sock,$/;"	f
nl_msg_put_string	lib/netlink.c	/^nl_msg_put_string(struct ofpbuf *msg, uint16_t type, const char *value)$/;"	f
nl_msg_put_u16	lib/netlink.c	/^nl_msg_put_u16(struct ofpbuf *msg, uint16_t type, uint16_t value)$/;"	f
nl_msg_put_u32	lib/netlink.c	/^nl_msg_put_u32(struct ofpbuf *msg, uint16_t type, uint32_t value)$/;"	f
nl_msg_put_u64	lib/netlink.c	/^nl_msg_put_u64(struct ofpbuf *msg, uint16_t type, uint64_t value)$/;"	f
nl_msg_put_u8	lib/netlink.c	/^nl_msg_put_u8(struct ofpbuf *msg, uint16_t type, uint8_t value) $/;"	f
nl_msg_put_uninit	lib/netlink.c	/^nl_msg_put_uninit(struct ofpbuf *msg, size_t size) $/;"	f
nl_msg_put_unspec	lib/netlink.c	/^nl_msg_put_unspec(struct ofpbuf *msg, uint16_t type,$/;"	f
nl_msg_put_unspec_uninit	lib/netlink.c	/^nl_msg_put_unspec_uninit(struct ofpbuf *msg, uint16_t type, size_t size) $/;"	f
nl_msg_reserve	lib/netlink.c	/^nl_msg_reserve(struct ofpbuf *msg, size_t size) $/;"	f
nl_pad	lib/netlink-protocol.h	/^    unsigned short int nl_pad;$/;"	m	struct:sockaddr_nl
nl_pid	lib/netlink-protocol.h	/^    uint32_t nl_pid;$/;"	m	struct:sockaddr_nl
nl_policy	lib/netlink.h	/^struct nl_policy$/;"	s
nl_policy_parse	lib/netlink.c	/^nl_policy_parse(const struct ofpbuf *msg, size_t nla_offset,$/;"	f
nl_sock	lib/netlink.c	/^struct nl_sock$/;"	s	file:
nl_sock_create	lib/netlink.c	/^nl_sock_create(int protocol, int multicast_group,$/;"	f
nl_sock_destroy	lib/netlink.c	/^nl_sock_destroy(struct nl_sock *sock) $/;"	f
nl_sock_recv	lib/netlink.c	/^nl_sock_recv(struct nl_sock *sock, struct ofpbuf **bufp, bool wait) $/;"	f
nl_sock_send	lib/netlink.c	/^nl_sock_send(struct nl_sock *sock, const struct ofpbuf *msg, bool wait) $/;"	f
nl_sock_sendv	lib/netlink.c	/^nl_sock_sendv(struct nl_sock *sock, const struct iovec iov[], size_t n_iov,$/;"	f
nl_sock_transact	lib/netlink.c	/^nl_sock_transact(struct nl_sock *sock,$/;"	f
nl_sock_wait	lib/netlink.c	/^nl_sock_wait(const struct nl_sock *sock, short int events)$/;"	f
nla_len	lib/netlink-protocol.h	/^    uint16_t nla_len;$/;"	m	struct:nlattr
nla_type	lib/netlink-protocol.h	/^    uint16_t nla_type;$/;"	m	struct:nlattr
nlattr	lib/netlink-protocol.h	/^struct nlattr {$/;"	s
nlmsg_flags	lib/netlink-protocol.h	/^    uint16_t nlmsg_flags;$/;"	m	struct:nlmsghdr
nlmsg_len	lib/netlink-protocol.h	/^    uint32_t nlmsg_len;$/;"	m	struct:nlmsghdr
nlmsg_pid	lib/netlink-protocol.h	/^    uint32_t nlmsg_pid;$/;"	m	struct:nlmsghdr
nlmsg_seq	lib/netlink-protocol.h	/^    uint32_t nlmsg_seq;$/;"	m	struct:nlmsghdr
nlmsg_to_string	lib/netlink.c	/^nlmsg_to_string(const struct ofpbuf *buffer)$/;"	f	file:
nlmsg_type	lib/netlink-protocol.h	/^    uint16_t nlmsg_type;$/;"	m	struct:nlmsghdr
nlmsgerr	lib/netlink-protocol.h	/^struct nlmsgerr$/;"	s
nlmsghdr	lib/netlink-protocol.h	/^struct nlmsghdr {$/;"	s
nlmsghdr_to_string	lib/netlink.c	/^nlmsghdr_to_string(const struct nlmsghdr *h, struct ds *ds)$/;"	f	file:
no_byt_count	udatapath/flow_entry.h	/^    bool                     no_byt_count; \/* true if doesn't keep track of flow matched bytes*\/$/;"	m	struct:flow_entry
no_pkt_count	udatapath/flow_entry.h	/^    bool                     no_pkt_count; \/* true if doesn't keep track of flow matched packets*\/     $/;"	m	struct:flow_entry
node	lib/netdev.c	/^    struct list node;$/;"	m	struct:netdev	typeref:struct:netdev::list	file:
node	lib/poll-loop.c	/^    struct list node;           \/* Element in global waiters list. *\/$/;"	m	struct:poll_waiter	typeref:struct:poll_waiter::list	file:
node	lib/process.c	/^    struct list node;$/;"	m	struct:process	typeref:struct:process::list	file:
node	lib/shash.h	/^    struct hmap_node node;$/;"	m	struct:shash_node	typeref:struct:shash_node::hmap_node
node	secchan/secchan.h	/^    struct list node;$/;"	m	struct:relay	typeref:struct:relay::list
node	udatapath/action_set.c	/^    struct list                node;$/;"	m	struct:action_set_entry	typeref:struct:action_set_entry::list	file:
node	udatapath/datapath.h	/^    struct list node;$/;"	m	struct:remote	typeref:struct:remote::list
node	udatapath/dp_actions.c	/^    struct list node;$/;"	m	struct:pending_flows	typeref:struct:pending_flows::list	file:
node	udatapath/dp_actions.c	/^    struct list node;$/;"	m	struct:pending_pkt	typeref:struct:pending_pkt::list	file:
node	udatapath/dp_exp_bme.c	/^    struct list node;$/;"	m	struct:pending_flows	typeref:struct:pending_flows::list	file:
node	udatapath/dp_exp_bme.c	/^    struct list node;$/;"	m	struct:pending_pkt	typeref:struct:pending_pkt::list	file:
node	udatapath/dp_ports.h	/^    struct list node; \/* Element in datapath.ports. *\/$/;"	m	struct:sw_port	typeref:struct:sw_port::list
node	udatapath/flow_entry.c	/^    struct list   node;$/;"	m	struct:group_ref_entry	typeref:struct:group_ref_entry::list	file:
node	udatapath/flow_entry.c	/^    struct list   node;$/;"	m	struct:meter_ref_entry	typeref:struct:meter_ref_entry::list	file:
node	udatapath/group_entry.c	/^    struct list node;$/;"	m	struct:flow_ref_entry	typeref:struct:flow_ref_entry::list	file:
node	udatapath/group_entry.h	/^    struct hmap_node             node;$/;"	m	struct:group_entry	typeref:struct:group_entry::hmap_node
node	udatapath/group_table.c	/^	struct list   node;$/;"	m	struct:group_visit	typeref:struct:group_visit::list	file:
node	udatapath/meter_entry.c	/^    struct list node;$/;"	m	struct:flow_ref_entry	typeref:struct:flow_ref_entry::list	file:
node	udatapath/meter_entry.h	/^	struct hmap_node            node;			\/* Refered by the meter table *\/$/;"	m	struct:meter_entry	typeref:struct:meter_entry::hmap_node
nodist_EXTRA_udatapath_ofdatapath_SOURCES	Makefile	/^nodist_EXTRA_udatapath_ofdatapath_SOURCES = dummy.cxx$/;"	m
nodist_EXTRA_udatapath_ofdatapath_SOURCES	udatapath/automake.mk	/^nodist_EXTRA_udatapath_ofdatapath_SOURCES = dummy.cxx$/;"	m
nodist_lib_libopenflow_a_SOURCES	lib/automake.mk	/^nodist_lib_libopenflow_a_SOURCES = lib\/dhparams.c$/;"	m
noinst_HEADERS	Makefile	/^noinst_HEADERS = include\/openflow\/nicira-ext.h \\$/;"	m
noinst_LIBRARIES	Makefile	/^noinst_LIBRARIES = lib\/libopenflow.a nbee_link\/libnbee_link.a \\$/;"	m
noinst_PROGRAMS	Makefile	/^noinst_PROGRAMS =$/;"	m
noinst_SCRIPTS	Makefile	/^noinst_SCRIPTS = utilities\/ofp-pki-cgi utilities\/ofp-parse-leaks$/;"	m
nonstrict_mask128	udatapath/match_std.c	/^nonstrict_mask128(uint8_t *a, uint8_t *b, uint8_t *am, uint8_t *bm) {$/;"	f	file:
nonstrict_mask16	udatapath/match_std.c	/^nonstrict_mask16(uint8_t *a, uint8_t *b, uint8_t *am, uint8_t *bm) {$/;"	f	file:
nonstrict_mask32	udatapath/match_std.c	/^nonstrict_mask32(uint8_t *a, uint8_t *b, uint8_t *am, uint8_t *bm) {$/;"	f	file:
nonstrict_mask48	udatapath/match_std.c	/^nonstrict_mask48(uint8_t *a, uint8_t *b, uint8_t *am, uint8_t *bm) {$/;"	f	file:
nonstrict_mask64	udatapath/match_std.c	/^nonstrict_mask64(uint8_t *a, uint8_t *b, uint8_t *am, uint8_t *bm) {$/;"	f	file:
nonstrict_mask8	udatapath/match_std.c	/^nonstrict_mask8(uint8_t *a, uint8_t *b, uint8_t *am, uint8_t *bm) {$/;"	f	file:
now	lib/timeval.c	/^static struct timeval now;$/;"	v	typeref:struct:timeval	file:
ntoh64	oflib/ofl-utils.h	/^ntoh64(uint64_t n) {$/;"	f
ntohll	lib/byte-order.h	/^ntohll(uint64_t n)$/;"	f
ntohll	lib/xtoxll.h	/^ntohll(uint64_t n)$/;"	f
num_controllers	secchan/secchan.h	/^    int num_controllers;        \/* Number of configured controllers. *\/$/;"	m	struct:settings
num_queues	lib/netdev.c	/^    uint16_t num_queues;$/;"	m	struct:netdev	file:
num_queues	udatapath/dp_ports.h	/^    uint16_t num_queues;$/;"	m	struct:sw_port
nw_dst	lib/flow.h	/^    uint32_t nw_dst;            \/* IP destination address. *\/$/;"	m	struct:flow
nw_dst	oflib/ofl-structs.h	/^    uint32_t   nw_dst;           \/* IP destination address. *\/$/;"	m	struct:ofl_match
nw_dst	oflib/ofl-structs.h	/^    uint32_t   nw_dst;           \/* IP destination address. *\/$/;"	m	struct:ofl_match_standard
nw_dst_mask	oflib/ofl-structs.h	/^    uint32_t   nw_dst_mask;      \/* IP destination address mask. *\/$/;"	m	struct:ofl_match
nw_dst_mask	oflib/ofl-structs.h	/^    uint32_t   nw_dst_mask;      \/* IP destination address mask. *\/$/;"	m	struct:ofl_match_standard
nw_proto	lib/flow.h	/^    uint8_t nw_proto;           \/* IP protocol. *\/$/;"	m	struct:flow
nw_proto	oflib/ofl-structs.h	/^    uint8_t    nw_proto;          \/* IP protocol or lower 8 bits of$/;"	m	struct:ofl_match
nw_proto	oflib/ofl-structs.h	/^    uint8_t    nw_proto;          \/* IP protocol or lower 8 bits of$/;"	m	struct:ofl_match_standard
nw_proto	oflib/oxm-match.h	/^    uint8_t nw_proto;                 \/* nw_proto prerequisite, if nonzero. *\/$/;"	m	struct:oxm_field
nw_src	lib/flow.h	/^    uint32_t nw_src;            \/* IP source address. *\/$/;"	m	struct:flow
nw_src	oflib/ofl-structs.h	/^    uint32_t   nw_src;           \/* IP source address. *\/$/;"	m	struct:ofl_match
nw_src	oflib/ofl-structs.h	/^    uint32_t   nw_src;           \/* IP source address. *\/$/;"	m	struct:ofl_match_standard
nw_src_mask	oflib/ofl-structs.h	/^    uint32_t   nw_src_mask;      \/* IP source address mask. *\/$/;"	m	struct:ofl_match
nw_src_mask	oflib/ofl-structs.h	/^    uint32_t   nw_src_mask;      \/* IP source address mask. *\/$/;"	m	struct:ofl_match_standard
nw_tos	lib/flow.h	/^    uint8_t nw_tos;             \/* IPv4 DSCP. *\/$/;"	m	struct:flow
nw_tos	oflib/ofl-structs.h	/^    uint8_t    nw_tos;            \/* IP ToS (actually DSCP field, 6 bits). *\/$/;"	m	struct:ofl_match
nw_tos	oflib/ofl-structs.h	/^    uint8_t    nw_tos;            \/* IP ToS (actually DSCP field, 6 bits). *\/$/;"	m	struct:ofl_match_standard
nw_ttl	include/openflow/openflow.h	/^	uint8_t nw_ttl; \/* IP TTL *\/$/;"	m	struct:ofp_action_nw_ttl
nw_ttl	oflib/ofl-actions.h	/^    uint8_t   nw_ttl;$/;"	m	struct:ofl_action_set_nw_ttl
nx_action_header	include/openflow/nicira-ext.h	/^struct nx_action_header {$/;"	s
nx_action_resubmit	include/openflow/nicira-ext.h	/^struct nx_action_resubmit {$/;"	s
nx_action_set_tunnel	include/openflow/nicira-ext.h	/^struct nx_action_set_tunnel {$/;"	s
nx_action_subtype	include/openflow/nicira-ext.h	/^enum nx_action_subtype {$/;"	g
nx_role	include/openflow/nicira-ext.h	/^enum nx_role {$/;"	g
nx_role_request	include/openflow/nicira-ext.h	/^struct nx_role_request {$/;"	s
nxh	include/openflow/nicira-ext.h	/^    struct nicira_header nxh;$/;"	m	struct:nx_role_request	typeref:struct:nx_role_request::nicira_header
nxt_tun_id_cookie	include/openflow/nicira-ext.h	/^struct nxt_tun_id_cookie {$/;"	s
of_device	secchan/in-band.c	/^    struct netdev *of_device;$/;"	m	struct:in_band_data	typeref:struct:in_band_data::netdev	file:
of_hw_driver	include/openflow/of_hw_api.h	/^struct of_hw_driver {$/;"	s
of_hw_driver_caps	include/openflow/of_hw_api.h	/^typedef struct of_hw_driver_caps {$/;"	s
of_hw_driver_caps_t	include/openflow/of_hw_api.h	/^} of_hw_driver_caps_t;$/;"	t	typeref:struct:of_hw_driver_caps
of_hw_driver_flags	include/openflow/of_hw_api.h	/^enum of_hw_driver_flags {$/;"	g
of_hw_driver_t	include/openflow/of_hw_api.h	/^typedef struct of_hw_driver of_hw_driver_t;$/;"	t	typeref:struct:of_hw_driver
of_hw_error_e	include/openflow/of_hw_api.h	/^enum of_hw_error_e {$/;"	g
of_hw_ioctl_e	include/openflow/of_hw_api.h	/^enum of_hw_ioctl_e {$/;"	g
of_packet_in_f	include/openflow/of_hw_api.h	/^typedef int (*of_packet_in_f)(of_port_t port,$/;"	t
of_packet_s	include/openflow/of_hw_api.h	/^typedef struct of_packet_s {$/;"	s
of_packet_t	include/openflow/of_hw_api.h	/^} of_packet_t;$/;"	t	typeref:struct:of_packet_s
of_port_change_f	include/openflow/of_hw_api.h	/^typedef void (*of_port_change_f)(of_port_t port,$/;"	t
of_port_t	include/openflow/of_hw_api.h	/^typedef uint32_t of_port_t;$/;"	t
offset	include/openflow/bme-ext.h	/^    uint8_t  offset;              \/* the filed value (and its mask) is shifted $/;"	m	struct:ofp_bme_set_metadata
offset	oflib-exp/ofl-exp-bme.h	/^    uint8_t offset;$/;"	m	struct:ofl_bme_set_metadata
ofl_action_experimenter	oflib/ofl-actions.h	/^struct ofl_action_experimenter {$/;"	s
ofl_action_group	oflib/ofl-actions.h	/^struct ofl_action_group {$/;"	s
ofl_action_header	oflib/ofl-actions.h	/^struct ofl_action_header {$/;"	s
ofl_action_mpls_ttl	oflib/ofl-actions.h	/^struct ofl_action_mpls_ttl {$/;"	s
ofl_action_output	oflib/ofl-actions.h	/^struct ofl_action_output {$/;"	s
ofl_action_pop_mpls	oflib/ofl-actions.h	/^struct ofl_action_pop_mpls {$/;"	s
ofl_action_print	oflib/ofl-actions-print.c	/^ofl_action_print(FILE *stream, struct ofl_action_header *act, struct ofl_exp *exp) {$/;"	f
ofl_action_push	oflib/ofl-actions.h	/^struct ofl_action_push {$/;"	s
ofl_action_set_field	oflib/ofl-actions.h	/^struct ofl_action_set_field {$/;"	s
ofl_action_set_mpls_label	oflib/ofl-actions.h	/^struct ofl_action_set_mpls_label {$/;"	s
ofl_action_set_mpls_label_from_counter	oflib/ofl-actions.h	/^struct ofl_action_set_mpls_label_from_counter {$/;"	s
ofl_action_set_nw_ttl	oflib/ofl-actions.h	/^struct ofl_action_set_nw_ttl {$/;"	s
ofl_action_set_parity_mpls_label	oflib/ofl-actions.h	/^struct ofl_action_set_parity_mpls_label {$/;"	s
ofl_action_set_queue	oflib/ofl-actions.h	/^struct ofl_action_set_queue {$/;"	s
ofl_action_to_string	oflib/ofl-actions-print.c	/^ofl_action_to_string(struct ofl_action_header *act, struct ofl_exp *exp) {$/;"	f
ofl_action_type_print	oflib/ofl-print.c	/^ofl_action_type_print(FILE *stream, uint16_t type) {$/;"	f
ofl_action_type_to_string	oflib/ofl-print.c	/^ofl_action_type_to_string(uint16_t type) {$/;"	f
ofl_action_xor_decode	oflib/ofl-actions.h	/^struct ofl_action_xor_decode {$/;"	s
ofl_action_xor_encode	oflib/ofl-actions.h	/^struct ofl_action_xor_encode {$/;"	s
ofl_actions_ofp_total_len	oflib/ofl-actions-pack.c	/^ofl_actions_ofp_total_len(struct ofl_action_header **actions,$/;"	f
ofl_actions_pack	oflib/ofl-actions-pack.c	/^ofl_actions_pack(struct ofl_action_header *src, struct ofp_action_header *dst, uint8_t* data,  struct ofl_exp *exp) {$/;"	f
ofl_async_config	oflib/ofl-structs.h	/^struct ofl_async_config {$/;"	s
ofl_async_flow_removed	oflib/ofl-print.c	/^ofl_async_flow_removed(FILE *stream, uint32_t flow_rem_mask){$/;"	f
ofl_async_packet_in	oflib/ofl-print.c	/^ofl_async_packet_in(FILE *stream, uint32_t packet_in_mask){$/;"	f
ofl_async_port_status	oflib/ofl-print.c	/^ofl_async_port_status(FILE *stream, uint32_t port_status_mask){$/;"	f
ofl_bme_action_header	oflib-exp/ofl-exp-bme.h	/^struct ofl_bme_action_header {$/;"	s
ofl_bme_serialize	oflib-exp/ofl-exp-bme.h	/^struct ofl_bme_serialize {$/;"	s
ofl_bme_set_metadata	oflib-exp/ofl-exp-bme.h	/^struct ofl_bme_set_metadata {$/;"	s
ofl_bme_set_metadata_from_counter	oflib-exp/ofl-exp-bme.h	/^struct ofl_bme_set_metadata_from_counter {$/;"	s
ofl_bme_set_mpls_label	oflib-exp/ofl-exp-bme.h	/^struct ofl_bme_set_mpls_label {$/;"	s
ofl_bme_update_distance	oflib-exp/ofl-exp-bme.h	/^struct ofl_bme_update_distance {$/;"	s
ofl_bme_xor_packet	oflib-exp/ofl-exp-bme.h	/^struct ofl_bme_xor_packet {$/;"	s
ofl_bucket	oflib/ofl-structs.h	/^struct ofl_bucket {$/;"	s
ofl_bucket_counter	oflib/ofl-structs.h	/^struct ofl_bucket_counter {$/;"	s
ofl_buffer_print	oflib/ofl-print.c	/^ofl_buffer_print(FILE *stream, uint32_t buffer) {$/;"	f
ofl_buffer_to_string	oflib/ofl-print.c	/^ofl_buffer_to_string(uint32_t buffer) {$/;"	f
ofl_config	oflib/ofl-structs.h	/^struct ofl_config {$/;"	s
ofl_err	oflib/ofl.h	/^typedef uint32_t ofl_err;$/;"	t
ofl_error	oflib/ofl.h	/^ofl_error(uint16_t type, uint16_t code) {$/;"	f
ofl_error_code	oflib/ofl.h	/^ofl_error_code(ofl_err error) {$/;"	f
ofl_error_code_print	oflib/ofl-print.c	/^ofl_error_code_print(FILE *stream, uint16_t type, uint16_t code) {$/;"	f
ofl_error_code_to_string	oflib/ofl-print.c	/^ofl_error_code_to_string(uint16_t type, uint16_t code) {$/;"	f
ofl_error_type	oflib/ofl.h	/^ofl_error_type(ofl_err error) {$/;"	f
ofl_error_type_print	oflib/ofl-print.c	/^ofl_error_type_print(FILE *stream, uint16_t type) {$/;"	f
ofl_error_type_to_string	oflib/ofl-print.c	/^ofl_error_type_to_string(uint16_t type) {$/;"	f
ofl_exp	lib/vconn.c	/^static struct ofl_exp ofl_exp =$/;"	v	typeref:struct:ofl_exp	file:
ofl_exp	oflib/ofl.h	/^struct ofl_exp {$/;"	s
ofl_exp_act	oflib/ofl.h	/^struct ofl_exp_act {$/;"	s
ofl_exp_bme_act_free	oflib-exp/ofl-exp-bme.c	/^ofl_exp_bme_act_free(struct ofl_action_header *act)$/;"	f
ofl_exp_bme_act_ofp_len	oflib-exp/ofl-exp-bme.c	/^ofl_exp_bme_act_ofp_len(struct ofl_action_header *act)$/;"	f
ofl_exp_bme_act_to_string	oflib-exp/ofl-exp-bme.c	/^ofl_exp_bme_act_to_string(struct ofl_action_header *act)$/;"	f
ofl_exp_bme_act_unpack	oflib-exp/ofl-exp-bme.c	/^ofl_exp_bme_act_unpack(struct ofp_action_header *src, size_t *len,$/;"	f
ofl_exp_bme_inst_free	oflib-exp/ofl-exp-bme.c	/^ofl_exp_bme_inst_free(struct ofl_instruction_header *i UNUSED)$/;"	f
ofl_exp_bme_inst_ofp_len	oflib-exp/ofl-exp-bme.c	/^ofl_exp_bme_inst_ofp_len(struct ofl_instruction_header *i UNUSED)$/;"	f
ofl_exp_bme_inst_pack	oflib-exp/ofl-exp-bme.c	/^ofl_exp_bme_inst_pack(struct ofl_instruction_header *src UNUSED,$/;"	f
ofl_exp_bme_inst_to_string	oflib-exp/ofl-exp-bme.c	/^ofl_exp_bme_inst_to_string(struct ofl_instruction_header *i UNUSED)$/;"	f
ofl_exp_bme_inst_unpack	oflib-exp/ofl-exp-bme.c	/^ofl_exp_bme_inst_unpack(struct ofp_instruction *src UNUSED, size_t *len UNUSED,$/;"	f
ofl_exp_inst	oflib/ofl.h	/^struct ofl_exp_inst {$/;"	s
ofl_exp_match	oflib/ofl.h	/^struct ofl_exp_match {$/;"	s
ofl_exp_msg	lib/vconn.c	/^static struct ofl_exp_msg ofl_exp_msg =$/;"	v	typeref:struct:ofl_exp_msg	file:
ofl_exp_msg	oflib/ofl.h	/^struct ofl_exp_msg {$/;"	s
ofl_exp_msg_free	oflib-exp/ofl-exp.c	/^ofl_exp_msg_free(struct ofl_msg_experimenter *msg) {$/;"	f
ofl_exp_msg_to_string	oflib-exp/ofl-exp.c	/^ofl_exp_msg_to_string(struct ofl_msg_experimenter *msg) {$/;"	f
ofl_exp_msg_unpack	oflib-exp/ofl-exp.c	/^ofl_exp_msg_unpack(struct ofp_header *oh, size_t *len, struct ofl_msg_experimenter **msg) {$/;"	f
ofl_exp_nicira_msg_free	oflib-exp/ofl-exp-nicira.c	/^ofl_exp_nicira_msg_free(struct ofl_msg_experimenter *msg) {$/;"	f
ofl_exp_nicira_msg_header	oflib-exp/ofl-exp-nicira.h	/^struct ofl_exp_nicira_msg_header {$/;"	s
ofl_exp_nicira_msg_role	oflib-exp/ofl-exp-nicira.h	/^struct ofl_exp_nicira_msg_role {$/;"	s
ofl_exp_nicira_msg_to_string	oflib-exp/ofl-exp-nicira.c	/^ofl_exp_nicira_msg_to_string(struct ofl_msg_experimenter *msg) {$/;"	f
ofl_exp_nicira_msg_unpack	oflib-exp/ofl-exp-nicira.c	/^ofl_exp_nicira_msg_unpack(struct ofp_header *oh, size_t *len, struct ofl_msg_experimenter **msg) {$/;"	f
ofl_exp_openflow_msg_free	oflib-exp/ofl-exp-openflow.c	/^ofl_exp_openflow_msg_free(struct ofl_msg_experimenter *msg) {$/;"	f
ofl_exp_openflow_msg_header	oflib-exp/ofl-exp-openflow.h	/^struct ofl_exp_openflow_msg_header {$/;"	s
ofl_exp_openflow_msg_queue	oflib-exp/ofl-exp-openflow.h	/^struct ofl_exp_openflow_msg_queue {$/;"	s
ofl_exp_openflow_msg_set_dp_desc	oflib-exp/ofl-exp-openflow.h	/^struct ofl_exp_openflow_msg_set_dp_desc {$/;"	s
ofl_exp_openflow_msg_to_string	oflib-exp/ofl-exp-openflow.c	/^ofl_exp_openflow_msg_to_string(struct ofl_msg_experimenter *msg) {$/;"	f
ofl_exp_openflow_msg_unpack	oflib-exp/ofl-exp-openflow.c	/^ofl_exp_openflow_msg_unpack(struct ofp_header *oh, size_t *len, struct ofl_msg_experimenter **msg) {$/;"	f
ofl_exp_stats	oflib/ofl.h	/^struct ofl_exp_stats {$/;"	s
ofl_flow_mod_command_print	oflib/ofl-print.c	/^ofl_flow_mod_command_print(FILE *stream, uint8_t command) {$/;"	f
ofl_flow_mod_command_to_string	oflib/ofl-print.c	/^ofl_flow_mod_command_to_string(uint8_t command) {$/;"	f
ofl_flow_removed_reason_print	oflib/ofl-print.c	/^ofl_flow_removed_reason_print(FILE *stream, uint8_t reason) {$/;"	f
ofl_flow_removed_reason_to_string	oflib/ofl-print.c	/^ofl_flow_removed_reason_to_string(uint8_t reason) {$/;"	f
ofl_flow_stats	oflib/ofl-structs.h	/^struct ofl_flow_stats {$/;"	s
ofl_group_desc_stats	oflib/ofl-structs.h	/^struct ofl_group_desc_stats {$/;"	s
ofl_group_mod_command_print	oflib/ofl-print.c	/^ofl_group_mod_command_print(FILE *stream, uint16_t command) {$/;"	f
ofl_group_mod_command_to_string	oflib/ofl-print.c	/^ofl_group_mod_command_to_string(uint16_t command) {$/;"	f
ofl_group_print	oflib/ofl-print.c	/^ofl_group_print(FILE *stream, uint32_t group) {$/;"	f
ofl_group_stats	oflib/ofl-structs.h	/^struct ofl_group_stats {$/;"	s
ofl_group_to_string	oflib/ofl-print.c	/^ofl_group_to_string(uint32_t group) {$/;"	f
ofl_group_type_print	oflib/ofl-print.c	/^ofl_group_type_print(FILE *stream, uint8_t type) {$/;"	f
ofl_group_type_to_string	oflib/ofl-print.c	/^ofl_group_type_to_string(uint8_t type) {$/;"	f
ofl_hex_print	oflib/ofl-print.c	/^ofl_hex_print(FILE *stream, uint8_t *buf, size_t buf_size) {$/;"	f
ofl_hex_to_string	oflib/ofl-print.c	/^ofl_hex_to_string(uint8_t *buf, size_t buf_size) {$/;"	f
ofl_instruction_actions	oflib/ofl-structs.h	/^struct ofl_instruction_actions {$/;"	s
ofl_instruction_experimenter	oflib/ofl-structs.h	/^struct ofl_instruction_experimenter {$/;"	s
ofl_instruction_goto_table	oflib/ofl-structs.h	/^struct ofl_instruction_goto_table {$/;"	s
ofl_instruction_header	oflib/ofl-structs.h	/^struct ofl_instruction_header {$/;"	s
ofl_instruction_meter	oflib/ofl-structs.h	/^struct ofl_instruction_meter {$/;"	s
ofl_instruction_type_print	oflib/ofl-print.c	/^ofl_instruction_type_print(FILE *stream, uint16_t type) {$/;"	f
ofl_instruction_type_to_string	oflib/ofl-print.c	/^ofl_instruction_type_to_string(uint16_t type) {$/;"	f
ofl_instruction_write_metadata	oflib/ofl-structs.h	/^struct ofl_instruction_write_metadata {$/;"	s
ofl_ipv6_ext_hdr_print	oflib/ofl-print.c	/^ofl_ipv6_ext_hdr_print(FILE *stream, uint16_t ext_hdr) {$/;"	f
ofl_ipv6_ext_hdr_to_string	oflib/ofl-print.c	/^ofl_ipv6_ext_hdr_to_string(uint16_t ext_hdr){$/;"	f
ofl_match	oflib/ofl-structs.h	/^struct ofl_match {$/;"	s
ofl_match_header	oflib/ofl-structs.h	/^struct ofl_match_header {$/;"	s
ofl_match_standard	oflib/ofl-structs.h	/^struct ofl_match_standard {$/;"	s
ofl_match_tlv	oflib/ofl-structs.h	/^struct ofl_match_tlv{$/;"	s
ofl_message_type_print	oflib/ofl-print.c	/^ofl_message_type_print(FILE *stream, uint16_t type) {$/;"	f
ofl_message_type_to_string	oflib/ofl-print.c	/^ofl_message_type_to_string(uint16_t type) {$/;"	f
ofl_meter_band_drop	oflib/ofl-structs.h	/^struct ofl_meter_band_drop {$/;"	s
ofl_meter_band_dscp_remark	oflib/ofl-structs.h	/^struct ofl_meter_band_dscp_remark {$/;"	s
ofl_meter_band_experimenter	oflib/ofl-structs.h	/^struct ofl_meter_band_experimenter {$/;"	s
ofl_meter_band_header	oflib/ofl-structs.h	/^struct ofl_meter_band_header {$/;"	s
ofl_meter_band_stats	oflib/ofl-structs.h	/^struct ofl_meter_band_stats {$/;"	s
ofl_meter_band_type_print	oflib/ofl-print.c	/^ofl_meter_band_type_print(FILE *stream, uint16_t type) {$/;"	f
ofl_meter_band_type_to_string	oflib/ofl-print.c	/^ofl_meter_band_type_to_string(uint16_t type) {$/;"	f
ofl_meter_config	oflib/ofl-structs.h	/^struct ofl_meter_config {$/;"	s
ofl_meter_features	oflib/ofl-structs.h	/^struct ofl_meter_features {$/;"	s
ofl_meter_mod_command_print	oflib/ofl-print.c	/^ofl_meter_mod_command_print(FILE *stream, uint16_t command){$/;"	f
ofl_meter_mod_command_to_string	oflib/ofl-print.c	/^ofl_meter_mod_command_to_string(uint16_t command) {$/;"	f
ofl_meter_stats	oflib/ofl-structs.h	/^struct ofl_meter_stats {$/;"	s
ofl_msg_async_config	oflib/ofl-messages.h	/^struct ofl_msg_async_config {$/;"	s
ofl_msg_echo	oflib/ofl-messages.h	/^struct ofl_msg_echo {$/;"	s
ofl_msg_error	oflib/ofl-messages.h	/^struct ofl_msg_error {$/;"	s
ofl_msg_experimenter	oflib/ofl-messages.h	/^struct ofl_msg_experimenter {$/;"	s
ofl_msg_features_reply	oflib/ofl-messages.h	/^struct ofl_msg_features_reply {$/;"	s
ofl_msg_flow_mod	oflib/ofl-messages.h	/^struct ofl_msg_flow_mod {$/;"	s
ofl_msg_flow_removed	oflib/ofl-messages.h	/^struct ofl_msg_flow_removed {$/;"	s
ofl_msg_free	oflib/ofl-messages.c	/^ofl_msg_free(struct ofl_msg_header *msg, struct ofl_exp *exp) {$/;"	f
ofl_msg_free_error	oflib/ofl-messages.c	/^ofl_msg_free_error(struct ofl_msg_error *msg) {$/;"	f	file:
ofl_msg_free_flow_mod	oflib/ofl-messages.c	/^ofl_msg_free_flow_mod(struct ofl_msg_flow_mod *msg, bool with_match, bool with_instructions, struct ofl_exp *exp) {$/;"	f
ofl_msg_free_flow_removed	oflib/ofl-messages.c	/^ofl_msg_free_flow_removed(struct ofl_msg_flow_removed *msg, bool with_stats, struct ofl_exp *exp) {$/;"	f
ofl_msg_free_group_mod	oflib/ofl-messages.c	/^ofl_msg_free_group_mod(struct ofl_msg_group_mod *msg, bool with_buckets, struct ofl_exp *exp) {$/;"	f
ofl_msg_free_meter_mod	oflib/ofl-messages.c	/^ofl_msg_free_meter_mod(struct ofl_msg_meter_mod * msg, bool with_bands){$/;"	f
ofl_msg_free_multipart_reply	oflib/ofl-messages.c	/^ofl_msg_free_multipart_reply(struct ofl_msg_multipart_reply_header *msg, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_free_multipart_request	oflib/ofl-messages.c	/^ofl_msg_free_multipart_request(struct ofl_msg_multipart_request_header *msg, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_free_packet_out	oflib/ofl-messages.c	/^ofl_msg_free_packet_out(struct ofl_msg_packet_out *msg, bool with_data, struct ofl_exp *exp) {$/;"	f
ofl_msg_get_config_reply	oflib/ofl-messages.h	/^struct ofl_msg_get_config_reply {$/;"	s
ofl_msg_group_mod	oflib/ofl-messages.h	/^struct ofl_msg_group_mod {$/;"	s
ofl_msg_header	oflib/ofl-messages.h	/^struct ofl_msg_header {$/;"	s
ofl_msg_merge_multipart_reply_flow	oflib/ofl-messages.c	/^ofl_msg_merge_multipart_reply_flow(struct ofl_msg_multipart_reply_flow *orig, struct ofl_msg_multipart_reply_flow *merge) {$/;"	f
ofl_msg_merge_multipart_reply_port	oflib/ofl-messages.c	/^ofl_msg_merge_multipart_reply_port(struct ofl_msg_multipart_reply_port *orig, struct ofl_msg_multipart_reply_port *merge) {$/;"	f
ofl_msg_merge_multipart_reply_queue	oflib/ofl-messages.c	/^ofl_msg_merge_multipart_reply_queue(struct ofl_msg_multipart_reply_queue *orig, struct ofl_msg_multipart_reply_queue *merge) {$/;"	f
ofl_msg_merge_multipart_reply_table	oflib/ofl-messages.c	/^ofl_msg_merge_multipart_reply_table(struct ofl_msg_multipart_reply_table *orig, struct ofl_msg_multipart_reply_table *merge) {$/;"	f
ofl_msg_meter_mod	oflib/ofl-messages.h	/^struct ofl_msg_meter_mod {$/;"	s
ofl_msg_multipart_meter_request	oflib/ofl-messages.h	/^struct ofl_msg_multipart_meter_request {$/;"	s
ofl_msg_multipart_reply_aggregate	oflib/ofl-messages.h	/^struct ofl_msg_multipart_reply_aggregate {$/;"	s
ofl_msg_multipart_reply_experimenter	oflib/ofl-messages.h	/^struct ofl_msg_multipart_reply_experimenter {$/;"	s
ofl_msg_multipart_reply_flow	oflib/ofl-messages.h	/^struct ofl_msg_multipart_reply_flow {$/;"	s
ofl_msg_multipart_reply_group	oflib/ofl-messages.h	/^struct ofl_msg_multipart_reply_group {$/;"	s
ofl_msg_multipart_reply_group_desc	oflib/ofl-messages.h	/^struct ofl_msg_multipart_reply_group_desc {$/;"	s
ofl_msg_multipart_reply_group_features	oflib/ofl-messages.h	/^struct ofl_msg_multipart_reply_group_features {$/;"	s
ofl_msg_multipart_reply_header	oflib/ofl-messages.h	/^struct ofl_msg_multipart_reply_header {$/;"	s
ofl_msg_multipart_reply_meter	oflib/ofl-messages.h	/^struct ofl_msg_multipart_reply_meter {$/;"	s
ofl_msg_multipart_reply_meter_conf	oflib/ofl-messages.h	/^struct ofl_msg_multipart_reply_meter_conf {$/;"	s
ofl_msg_multipart_reply_meter_features	oflib/ofl-messages.h	/^struct ofl_msg_multipart_reply_meter_features {$/;"	s
ofl_msg_multipart_reply_port	oflib/ofl-messages.h	/^struct ofl_msg_multipart_reply_port {$/;"	s
ofl_msg_multipart_reply_port_desc	oflib/ofl-messages.h	/^struct ofl_msg_multipart_reply_port_desc {$/;"	s
ofl_msg_multipart_reply_queue	oflib/ofl-messages.h	/^struct ofl_msg_multipart_reply_queue {$/;"	s
ofl_msg_multipart_reply_table	oflib/ofl-messages.h	/^struct ofl_msg_multipart_reply_table {$/;"	s
ofl_msg_multipart_reply_table_features	oflib/ofl-messages.h	/^struct ofl_msg_multipart_reply_table_features {$/;"	s
ofl_msg_multipart_request_experimenter	oflib/ofl-messages.h	/^struct ofl_msg_multipart_request_experimenter {$/;"	s
ofl_msg_multipart_request_flow	oflib/ofl-messages.h	/^struct ofl_msg_multipart_request_flow {$/;"	s
ofl_msg_multipart_request_group	oflib/ofl-messages.h	/^struct ofl_msg_multipart_request_group {$/;"	s
ofl_msg_multipart_request_header	oflib/ofl-messages.h	/^struct ofl_msg_multipart_request_header {$/;"	s
ofl_msg_multipart_request_port	oflib/ofl-messages.h	/^struct ofl_msg_multipart_request_port {$/;"	s
ofl_msg_multipart_request_queue	oflib/ofl-messages.h	/^struct ofl_msg_multipart_request_queue {$/;"	s
ofl_msg_multipart_request_table_features	oflib/ofl-messages.h	/^struct ofl_msg_multipart_request_table_features{$/;"	s
ofl_msg_pack	oflib/ofl-messages-pack.c	/^ofl_msg_pack(struct ofl_msg_header *msg, uint32_t xid, uint8_t **buf, size_t *buf_len, struct ofl_exp *exp) {$/;"	f
ofl_msg_pack_async_config	oflib/ofl-messages-pack.c	/^ofl_msg_pack_async_config(struct ofl_msg_async_config *msg, uint8_t **buf, size_t *buf_len){$/;"	f	file:
ofl_msg_pack_echo	oflib/ofl-messages-pack.c	/^ofl_msg_pack_echo(struct ofl_msg_echo *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_empty	oflib/ofl-messages-pack.c	/^ofl_msg_pack_empty(struct ofl_msg_header *msg UNUSED, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_error	oflib/ofl-messages-pack.c	/^ofl_msg_pack_error(struct ofl_msg_error *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_features_reply	oflib/ofl-messages-pack.c	/^ofl_msg_pack_features_reply(struct ofl_msg_features_reply *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_flow_mod	oflib/ofl-messages-pack.c	/^ofl_msg_pack_flow_mod(struct ofl_msg_flow_mod *msg, uint8_t **buf, size_t *buf_len, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_pack_flow_removed	oflib/ofl-messages-pack.c	/^ofl_msg_pack_flow_removed(struct ofl_msg_flow_removed *msg, uint8_t **buf, size_t *buf_len, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_pack_get_config_reply	oflib/ofl-messages-pack.c	/^ofl_msg_pack_get_config_reply(struct ofl_msg_get_config_reply *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_group_mod	oflib/ofl-messages-pack.c	/^ofl_msg_pack_group_mod(struct ofl_msg_group_mod *msg, uint8_t **buf, size_t *buf_len, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_pack_meter_mod	oflib/ofl-messages-pack.c	/^ofl_msg_pack_meter_mod(struct ofl_msg_meter_mod *msg, uint8_t ** buf, size_t *buf_len){$/;"	f	file:
ofl_msg_pack_meter_multipart_request	oflib/ofl-messages-pack.c	/^ofl_msg_pack_meter_multipart_request(struct ofl_msg_multipart_meter_request *msg, uint8_t **buf, size_t *buf_len){$/;"	f	file:
ofl_msg_pack_multipart_reply	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_reply(struct ofl_msg_multipart_reply_header *msg, uint8_t **buf, size_t *buf_len, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_pack_multipart_reply_aggregate	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_reply_aggregate(struct ofl_msg_multipart_reply_aggregate *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_multipart_reply_desc	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_reply_desc(struct ofl_msg_reply_desc *msg UNUSED, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_multipart_reply_flow	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_reply_flow(struct ofl_msg_multipart_reply_flow *msg, uint8_t **buf, size_t *buf_len, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_pack_multipart_reply_group	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_reply_group(struct ofl_msg_multipart_reply_group *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_multipart_reply_group_desc	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_reply_group_desc(struct ofl_msg_multipart_reply_group_desc *msg, uint8_t **buf, size_t *buf_len, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_pack_multipart_reply_group_features	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_reply_group_features(struct ofl_msg_multipart_reply_group_features *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_multipart_reply_meter_conf	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_reply_meter_conf(struct ofl_msg_multipart_reply_meter_conf *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_multipart_reply_meter_features	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_reply_meter_features(struct ofl_msg_multipart_reply_meter_features *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_multipart_reply_meter_stats	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_reply_meter_stats(struct ofl_msg_multipart_reply_meter *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_multipart_reply_port	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_reply_port(struct ofl_msg_multipart_reply_port *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_multipart_reply_port_status_desc	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_reply_port_status_desc(struct ofl_msg_multipart_reply_port_desc *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_multipart_reply_queue	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_reply_queue(struct ofl_msg_multipart_reply_queue *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_multipart_reply_table	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_reply_table(struct ofl_msg_multipart_reply_table *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_multipart_reply_table_features	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_reply_table_features(struct ofl_msg_multipart_reply_table_features *msg, uint8_t **buf, size_t *buf_len, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_pack_multipart_request	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_request(struct ofl_msg_multipart_request_header *msg, uint8_t **buf, size_t *buf_len, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_pack_multipart_request_empty	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_request_empty(struct ofl_msg_multipart_request_header *msg UNUSED, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_multipart_request_flow	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_request_flow(struct ofl_msg_multipart_request_flow *msg, uint8_t **buf, size_t *buf_len, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_pack_multipart_request_group	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_request_group(struct ofl_msg_multipart_request_group *msg UNUSED, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_multipart_request_port	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_request_port(struct ofl_msg_multipart_request_port *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_multipart_request_queue	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_request_queue(struct ofl_msg_multipart_request_queue *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_multipart_request_table_features	oflib/ofl-messages-pack.c	/^ofl_msg_pack_multipart_request_table_features(struct ofl_msg_multipart_request_table_features *msg, uint8_t **buf, size_t *buf_len, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_pack_packet_in	oflib/ofl-messages-pack.c	/^ofl_msg_pack_packet_in(struct ofl_msg_packet_in *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_packet_out	oflib/ofl-messages-pack.c	/^ofl_msg_pack_packet_out(struct ofl_msg_packet_out *msg, uint8_t **buf, size_t *buf_len, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_pack_port_mod	oflib/ofl-messages-pack.c	/^ofl_msg_pack_port_mod(struct ofl_msg_port_mod *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_port_status	oflib/ofl-messages-pack.c	/^ofl_msg_pack_port_status(struct ofl_msg_port_status *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_queue_get_config_reply	oflib/ofl-messages-pack.c	/^ofl_msg_pack_queue_get_config_reply(struct ofl_msg_queue_get_config_reply *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_queue_get_config_request	oflib/ofl-messages-pack.c	/^ofl_msg_pack_queue_get_config_request(struct ofl_msg_queue_get_config_request *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_role_request	oflib/ofl-messages-pack.c	/^ofl_msg_pack_role_request(struct ofl_msg_role_request *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_set_config	oflib/ofl-messages-pack.c	/^ofl_msg_pack_set_config(struct ofl_msg_set_config *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_pack_table_mod	oflib/ofl-messages-pack.c	/^ofl_msg_pack_table_mod(struct ofl_msg_table_mod *msg, uint8_t **buf, size_t *buf_len) {$/;"	f	file:
ofl_msg_packet_in	oflib/ofl-messages.h	/^struct ofl_msg_packet_in {$/;"	s
ofl_msg_packet_out	oflib/ofl-messages.h	/^struct ofl_msg_packet_out {$/;"	s
ofl_msg_port_mod	oflib/ofl-messages.h	/^struct ofl_msg_port_mod {$/;"	s
ofl_msg_port_status	oflib/ofl-messages.h	/^struct ofl_msg_port_status {$/;"	s
ofl_msg_print	oflib/ofl-messages-print.c	/^ofl_msg_print(FILE *stream, struct ofl_msg_header *msg, struct ofl_exp *exp) {$/;"	f
ofl_msg_print_async	oflib/ofl-messages-print.c	/^ofl_msg_print_async(struct ofl_msg_async_config* msg, FILE *stream){$/;"	f	file:
ofl_msg_print_echo	oflib/ofl-messages-print.c	/^ofl_msg_print_echo(struct ofl_msg_echo *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_error	oflib/ofl-messages-print.c	/^ofl_msg_print_error(struct ofl_msg_error *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_experimenter	oflib/ofl-messages-print.c	/^ofl_msg_print_experimenter(struct ofl_msg_experimenter *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_features_reply	oflib/ofl-messages-print.c	/^ofl_msg_print_features_reply(struct ofl_msg_features_reply *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_flow_mod	oflib/ofl-messages-print.c	/^ofl_msg_print_flow_mod(struct ofl_msg_flow_mod *msg, FILE *stream, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_print_flow_removed	oflib/ofl-messages-print.c	/^ofl_msg_print_flow_removed(struct ofl_msg_flow_removed *msg, FILE *stream, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_print_get_config_reply	oflib/ofl-messages-print.c	/^ofl_msg_print_get_config_reply(struct ofl_msg_get_config_reply *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_group_mod	oflib/ofl-messages-print.c	/^ofl_msg_print_group_mod(struct ofl_msg_group_mod *msg, FILE *stream, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_print_meter_mod	oflib/ofl-messages-print.c	/^ofl_msg_print_meter_mod(struct ofl_msg_meter_mod *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_meter_stats_request	oflib/ofl-messages-print.c	/^ofl_msg_print_meter_stats_request(struct ofl_msg_multipart_meter_request *msg, FILE *stream){$/;"	f	file:
ofl_msg_print_multipart_reply	oflib/ofl-messages-print.c	/^ofl_msg_print_multipart_reply(struct ofl_msg_multipart_reply_header *msg, FILE *stream, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_print_multipart_request	oflib/ofl-messages-print.c	/^ofl_msg_print_multipart_request(struct ofl_msg_multipart_request_header *msg, FILE *stream, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_print_packet_in	oflib/ofl-messages-print.c	/^ofl_msg_print_packet_in(struct ofl_msg_packet_in *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_packet_out	oflib/ofl-messages-print.c	/^ofl_msg_print_packet_out(struct ofl_msg_packet_out *msg, FILE *stream, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_print_port_desc_reply	oflib/ofl-messages-print.c	/^ofl_msg_print_port_desc_reply(struct ofl_msg_multipart_reply_port_desc *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_port_mod	oflib/ofl-messages-print.c	/^ofl_msg_print_port_mod(struct ofl_msg_port_mod *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_port_status	oflib/ofl-messages-print.c	/^ofl_msg_print_port_status(struct ofl_msg_port_status *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_queue_get_config_reply	oflib/ofl-messages-print.c	/^ofl_msg_print_queue_get_config_reply(struct ofl_msg_queue_get_config_reply *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_queue_get_config_request	oflib/ofl-messages-print.c	/^ofl_msg_print_queue_get_config_request(struct ofl_msg_queue_get_config_request *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_reply_meter_features	oflib/ofl-messages-print.c	/^ofl_msg_print_reply_meter_features(struct ofl_msg_multipart_reply_meter_features *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_role_msg	oflib/ofl-messages-print.c	/^ofl_msg_print_role_msg(struct ofl_msg_role_request *msg, FILE *stream){$/;"	f	file:
ofl_msg_print_set_config	oflib/ofl-messages-print.c	/^ofl_msg_print_set_config(struct ofl_msg_set_config *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_stats_reply_aggregate	oflib/ofl-messages-print.c	/^ofl_msg_print_stats_reply_aggregate(struct ofl_msg_multipart_reply_aggregate *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_stats_reply_desc	oflib/ofl-messages-print.c	/^ofl_msg_print_stats_reply_desc(struct ofl_msg_reply_desc *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_stats_reply_experimenter	oflib/ofl-messages-print.c	/^ofl_msg_print_stats_reply_experimenter(struct ofl_msg_multipart_reply_experimenter *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_stats_reply_flow	oflib/ofl-messages-print.c	/^ofl_msg_print_stats_reply_flow(struct ofl_msg_multipart_reply_flow *msg, FILE *stream, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_print_stats_reply_group	oflib/ofl-messages-print.c	/^ofl_msg_print_stats_reply_group(struct ofl_msg_multipart_reply_group *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_stats_reply_group_desc	oflib/ofl-messages-print.c	/^ofl_msg_print_stats_reply_group_desc(struct ofl_msg_multipart_reply_group_desc *msg, FILE *stream, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_print_stats_reply_group_features	oflib/ofl-messages-print.c	/^static void ofl_msg_print_stats_reply_group_features(struct ofl_msg_multipart_reply_group_features *msg, FILE *stream){$/;"	f	file:
ofl_msg_print_stats_reply_meter	oflib/ofl-messages-print.c	/^ofl_msg_print_stats_reply_meter(struct ofl_msg_multipart_reply_meter *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_stats_reply_meter_conf	oflib/ofl-messages-print.c	/^ofl_msg_print_stats_reply_meter_conf(struct ofl_msg_multipart_reply_meter_conf *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_stats_reply_port	oflib/ofl-messages-print.c	/^ofl_msg_print_stats_reply_port(struct ofl_msg_multipart_reply_port *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_stats_reply_queue	oflib/ofl-messages-print.c	/^ofl_msg_print_stats_reply_queue(struct ofl_msg_multipart_reply_queue *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_stats_reply_table	oflib/ofl-messages-print.c	/^ofl_msg_print_stats_reply_table(struct ofl_msg_multipart_reply_table *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_stats_request_experimenter	oflib/ofl-messages-print.c	/^ofl_msg_print_stats_request_experimenter(struct ofl_msg_multipart_request_experimenter *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_stats_request_flow	oflib/ofl-messages-print.c	/^ofl_msg_print_stats_request_flow(struct ofl_msg_multipart_request_flow *msg, FILE *stream, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_print_stats_request_group	oflib/ofl-messages-print.c	/^ofl_msg_print_stats_request_group(struct ofl_msg_multipart_request_group *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_stats_request_port	oflib/ofl-messages-print.c	/^ofl_msg_print_stats_request_port(struct ofl_msg_multipart_request_port *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_stats_request_queue	oflib/ofl-messages-print.c	/^ofl_msg_print_stats_request_queue(struct ofl_msg_multipart_request_queue *msg, FILE *stream) {$/;"	f	file:
ofl_msg_print_table_features_reply	oflib/ofl-messages-print.c	/^ofl_msg_print_table_features_reply(struct ofl_msg_multipart_reply_table_features* msg, FILE *stream){$/;"	f	file:
ofl_msg_print_table_features_request	oflib/ofl-messages-print.c	/^ofl_msg_print_table_features_request(struct ofl_msg_multipart_request_table_features* msg, FILE *stream){$/;"	f	file:
ofl_msg_print_table_mod	oflib/ofl-messages-print.c	/^ofl_msg_print_table_mod(struct ofl_msg_table_mod *msg, FILE *stream) {$/;"	f	file:
ofl_msg_queue_get_config_reply	oflib/ofl-messages.h	/^struct ofl_msg_queue_get_config_reply {$/;"	s
ofl_msg_queue_get_config_request	oflib/ofl-messages.h	/^struct ofl_msg_queue_get_config_request {$/;"	s
ofl_msg_reply_desc	oflib/ofl-messages.h	/^struct ofl_msg_reply_desc {$/;"	s
ofl_msg_role_request	oflib/ofl-messages.h	/^struct ofl_msg_role_request {$/;"	s
ofl_msg_set_config	oflib/ofl-messages.h	/^struct ofl_msg_set_config {$/;"	s
ofl_msg_table_mod	oflib/ofl-messages.h	/^struct ofl_msg_table_mod {$/;"	s
ofl_msg_to_string	oflib/ofl-messages-print.c	/^ofl_msg_to_string(struct ofl_msg_header *msg, struct ofl_exp *exp) {$/;"	f
ofl_msg_unpack	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack(uint8_t *buf, size_t buf_len, struct ofl_msg_header **msg, uint32_t *xid, struct ofl_exp *exp) {$/;"	f
ofl_msg_unpack_async_config	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_async_config(struct ofp_header *src, size_t *len, struct ofl_msg_header **msg){$/;"	f	file:
ofl_msg_unpack_echo	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_echo(struct ofp_header *src, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_empty	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_empty(struct ofp_header *src UNUSED, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_error	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_error(struct ofp_header *src, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_features_reply	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_features_reply(struct ofp_header *src, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_flow_mod	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_flow_mod(struct ofp_header *src,uint8_t* buf, size_t *len, struct ofl_msg_header **msg, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_unpack_flow_removed	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_flow_removed(struct ofp_header *src,uint8_t *buf, size_t *len, struct ofl_msg_header **msg, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_unpack_get_config_reply	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_get_config_reply(struct ofp_header *src, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_group_mod	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_group_mod(struct ofp_header *src, size_t *len, struct ofl_msg_header **msg, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_unpack_meter_mod	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_meter_mod(struct ofp_header *src, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_meter_multipart_request	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_meter_multipart_request(struct ofp_multipart_request *os, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_multipart_reply	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_multipart_reply(struct ofp_header *src, uint8_t *buf, size_t *len, struct ofl_msg_header **msg, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_unpack_multipart_reply_aggregate	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_multipart_reply_aggregate(struct ofp_multipart_reply *os, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_multipart_reply_flow	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_multipart_reply_flow(struct ofp_multipart_reply *os, uint8_t *buf, size_t *len, struct ofl_msg_header **msg, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_unpack_multipart_reply_group	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_multipart_reply_group(struct ofp_multipart_reply *os, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_multipart_reply_group_desc	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_multipart_reply_group_desc(struct ofp_multipart_reply *os, size_t *len, struct ofl_msg_header **msg, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_unpack_multipart_reply_group_features	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_multipart_reply_group_features(struct ofp_multipart_reply *os, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_multipart_reply_meter_config	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_multipart_reply_meter_config(struct ofp_multipart_reply *os, size_t *len, struct ofl_msg_header **msg){$/;"	f	file:
ofl_msg_unpack_multipart_reply_meter_features	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_multipart_reply_meter_features(struct ofp_multipart_reply *os, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_multipart_reply_meter_stats	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_multipart_reply_meter_stats(struct ofp_multipart_reply *os, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_multipart_reply_port	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_multipart_reply_port(struct ofp_multipart_reply *os, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_multipart_reply_port_desc	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_multipart_reply_port_desc(struct ofp_multipart_reply *src, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_multipart_reply_queue	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_multipart_reply_queue(struct ofp_multipart_reply *os, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_multipart_reply_table	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_multipart_reply_table(struct ofp_multipart_reply *os, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_multipart_reply_table_features	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_multipart_reply_table_features(struct ofp_multipart_reply *src, size_t *len, struct ofl_msg_header **msg, struct ofl_exp *exp){$/;"	f	file:
ofl_msg_unpack_multipart_request	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_multipart_request(struct ofp_header *src,uint8_t *buf, size_t *len, struct ofl_msg_header **msg, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_unpack_multipart_request_empty	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_multipart_request_empty(struct ofp_multipart_request *os UNUSED, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_multipart_request_flow	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_multipart_request_flow(struct ofp_multipart_request *os, uint8_t* buf, size_t *len, struct ofl_msg_header **msg, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_unpack_multipart_request_group	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_multipart_request_group(struct ofp_multipart_request *os, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_multipart_request_port	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_multipart_request_port(struct ofp_multipart_request *os, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_multipart_request_queue	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_multipart_request_queue(struct ofp_multipart_request *os, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_multipart_request_table_features	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_multipart_request_table_features(struct ofp_multipart_request *os, size_t *len, struct ofl_msg_header **msg, struct ofl_exp *exp){$/;"	f	file:
ofl_msg_unpack_packet_in	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_packet_in(struct ofp_header *src, uint8_t* buf, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_packet_out	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_packet_out(struct ofp_header *src, size_t *len, struct ofl_msg_header **msg, struct ofl_exp *exp) {$/;"	f	file:
ofl_msg_unpack_port_mod	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_port_mod(struct ofp_header *src, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_port_status	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_port_status(struct ofp_header *src, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_queue_get_config_reply	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_queue_get_config_reply(struct ofp_header *src, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_queue_get_config_request	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_queue_get_config_request(struct ofp_header *src, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_reply_desc	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_reply_desc(struct ofp_multipart_reply *os, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_role_request	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_role_request(struct ofp_header *src, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_set_config	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_set_config(struct ofp_header *src, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_msg_unpack_table_mod	oflib/ofl-messages-unpack.c	/^ofl_msg_unpack_table_mod(struct ofp_header *src, size_t *len, struct ofl_msg_header **msg) {$/;"	f	file:
ofl_oxm_type_print	oflib/ofl-print.c	/^ofl_oxm_type_print(FILE *stream, uint32_t type){$/;"	f
ofl_oxm_type_to_string	oflib/ofl-print.c	/^ofl_oxm_type_to_string(uint16_t type) {$/;"	f
ofl_packet_in_reason_print	oflib/ofl-print.c	/^ofl_packet_in_reason_print(FILE *stream, uint8_t reason) {$/;"	f
ofl_packet_in_reason_to_string	oflib/ofl-print.c	/^ofl_packet_in_reason_to_string(uint8_t reason) {$/;"	f
ofl_packet_queue	oflib/ofl-structs.h	/^struct ofl_packet_queue {$/;"	s
ofl_port	oflib/ofl-structs.h	/^struct ofl_port {$/;"	s
ofl_port_print	oflib/ofl-print.c	/^ofl_port_print(FILE *stream, uint32_t port) {$/;"	f
ofl_port_stats	oflib/ofl-structs.h	/^struct ofl_port_stats {$/;"	s
ofl_port_status_reason_print	oflib/ofl-print.c	/^ofl_port_status_reason_print(FILE *stream, uint8_t reason) {$/;"	f
ofl_port_status_reason_to_string	oflib/ofl-print.c	/^ofl_port_status_reason_to_string(uint8_t reason) {$/;"	f
ofl_port_to_string	oflib/ofl-print.c	/^ofl_port_to_string(uint32_t port) {$/;"	f
ofl_properties_type_print	oflib/ofl-print.c	/^ofl_properties_type_print(FILE *stream, uint16_t type){$/;"	f
ofl_queue_print	oflib/ofl-print.c	/^ofl_queue_print(FILE *stream, uint32_t queue) {$/;"	f
ofl_queue_prop_experimenter	oflib/ofl-structs.h	/^struct ofl_queue_prop_experimenter {$/;"	s
ofl_queue_prop_header	oflib/ofl-structs.h	/^struct ofl_queue_prop_header {$/;"	s
ofl_queue_prop_max_rate	oflib/ofl-structs.h	/^struct ofl_queue_prop_max_rate {$/;"	s
ofl_queue_prop_min_rate	oflib/ofl-structs.h	/^struct ofl_queue_prop_min_rate {$/;"	s
ofl_queue_prop_type_print	oflib/ofl-print.c	/^ofl_queue_prop_type_print(FILE *stream, uint16_t type) {$/;"	f
ofl_queue_prop_type_to_string	oflib/ofl-print.c	/^ofl_queue_prop_type_to_string(uint16_t type) {$/;"	f
ofl_queue_stats	oflib/ofl-structs.h	/^struct ofl_queue_stats {$/;"	s
ofl_queue_to_string	oflib/ofl-print.c	/^ofl_queue_to_string(uint32_t queue) {$/;"	f
ofl_stats_type_print	oflib/ofl-print.c	/^ofl_stats_type_print(FILE *stream, uint16_t type) {$/;"	f
ofl_stats_type_to_string	oflib/ofl-print.c	/^ofl_stats_type_to_string(uint16_t type) {$/;"	f
ofl_structs_async_config_print	oflib/ofl-structs-print.c	/^ofl_structs_async_config_print(FILE * stream, struct ofl_async_config *s){$/;"	f
ofl_structs_async_config_to_string	oflib/ofl-structs-print.c	/^ofl_structs_async_config_to_string(struct ofl_async_config *s) {$/;"	f
ofl_structs_bucket_counter_pack	oflib/ofl-structs-pack.c	/^ofl_structs_bucket_counter_pack(struct ofl_bucket_counter *src, struct ofp_bucket_counter *dst) {$/;"	f
ofl_structs_bucket_counter_print	oflib/ofl-structs-print.c	/^ofl_structs_bucket_counter_print(FILE *stream, struct ofl_bucket_counter *c) {$/;"	f
ofl_structs_bucket_counter_to_string	oflib/ofl-structs-print.c	/^ofl_structs_bucket_counter_to_string(struct ofl_bucket_counter *s) {$/;"	f
ofl_structs_bucket_counter_unpack	oflib/ofl-structs-unpack.c	/^ofl_structs_bucket_counter_unpack(struct ofp_bucket_counter *src, size_t *len, struct ofl_bucket_counter **dst) {$/;"	f
ofl_structs_bucket_pack	oflib/ofl-structs-pack.c	/^ofl_structs_bucket_pack(struct ofl_bucket *src, struct ofp_bucket *dst, struct ofl_exp *exp) {$/;"	f
ofl_structs_bucket_print	oflib/ofl-structs-print.c	/^ofl_structs_bucket_print(FILE *stream, struct ofl_bucket *b, struct ofl_exp *exp) {$/;"	f
ofl_structs_bucket_to_string	oflib/ofl-structs-print.c	/^ofl_structs_bucket_to_string(struct ofl_bucket *b, struct ofl_exp *exp) {$/;"	f
ofl_structs_bucket_unpack	oflib/ofl-structs-unpack.c	/^ofl_structs_bucket_unpack(struct ofp_bucket *src, size_t *len, uint8_t gtype, struct ofl_bucket **dst, struct ofl_exp *exp) {$/;"	f
ofl_structs_buckets_ofp_len	oflib/ofl-structs-pack.c	/^ofl_structs_buckets_ofp_len(struct ofl_bucket *bucket, struct ofl_exp *exp) {$/;"	f
ofl_structs_buckets_ofp_total_len	oflib/ofl-structs-pack.c	/^ofl_structs_buckets_ofp_total_len(struct ofl_bucket **buckets, size_t buckets_num, struct ofl_exp *exp) {$/;"	f
ofl_structs_config_print	oflib/ofl-structs-print.c	/^ofl_structs_config_print(FILE *stream, struct ofl_config *c) {$/;"	f
ofl_structs_config_to_string	oflib/ofl-structs-print.c	/^ofl_structs_config_to_string(struct ofl_config *c) {$/;"	f
ofl_structs_flow_stats_ofp_len	oflib/ofl-structs-pack.c	/^ofl_structs_flow_stats_ofp_len(struct ofl_flow_stats *stats, struct ofl_exp *exp) {$/;"	f
ofl_structs_flow_stats_ofp_total_len	oflib/ofl-structs-pack.c	/^ofl_structs_flow_stats_ofp_total_len(struct ofl_flow_stats ** stats, size_t stats_num, struct ofl_exp *exp) {$/;"	f
ofl_structs_flow_stats_pack	oflib/ofl-structs-pack.c	/^ofl_structs_flow_stats_pack(struct ofl_flow_stats *src, uint8_t *dst, struct ofl_exp *exp) {$/;"	f
ofl_structs_flow_stats_print	oflib/ofl-structs-print.c	/^ofl_structs_flow_stats_print(FILE *stream, struct ofl_flow_stats *s, struct ofl_exp *exp) {$/;"	f
ofl_structs_flow_stats_to_string	oflib/ofl-structs-print.c	/^ofl_structs_flow_stats_to_string(struct ofl_flow_stats *s, struct ofl_exp *exp) {$/;"	f
ofl_structs_flow_stats_unpack	oflib/ofl-structs-unpack.c	/^ofl_structs_flow_stats_unpack(struct ofp_flow_stats *src, uint8_t *buf, size_t *len, struct ofl_flow_stats **dst, struct ofl_exp *exp) {$/;"	f
ofl_structs_free_bucket	oflib/ofl-structs.c	/^ofl_structs_free_bucket(struct ofl_bucket *bucket, struct ofl_exp *exp) {$/;"	f
ofl_structs_free_flow_stats	oflib/ofl-structs.c	/^ofl_structs_free_flow_stats(struct ofl_flow_stats *stats, struct ofl_exp *exp) {$/;"	f
ofl_structs_free_group_desc_stats	oflib/ofl-structs.c	/^ofl_structs_free_group_desc_stats(struct ofl_group_desc_stats *stats, struct ofl_exp *exp) {$/;"	f
ofl_structs_free_group_stats	oflib/ofl-structs.c	/^ofl_structs_free_group_stats(struct ofl_group_stats *stats) {$/;"	f
ofl_structs_free_instruction	oflib/ofl-structs.c	/^ofl_structs_free_instruction(struct ofl_instruction_header *inst, struct ofl_exp *exp) {$/;"	f
ofl_structs_free_match	oflib/ofl-structs.c	/^ofl_structs_free_match(struct ofl_match_header *match, struct ofl_exp *exp) {$/;"	f
ofl_structs_free_meter_band_stats	oflib/ofl-structs.c	/^ofl_structs_free_meter_band_stats(struct ofl_meter_band_stats* s){$/;"	f
ofl_structs_free_meter_bands	oflib/ofl-structs.c	/^void ofl_structs_free_meter_bands(struct ofl_meter_band_header *meter_band){$/;"	f
ofl_structs_free_meter_config	oflib/ofl-structs.c	/^ofl_structs_free_meter_config(struct ofl_meter_config *conf){$/;"	f
ofl_structs_free_meter_stats	oflib/ofl-structs.c	/^ofl_structs_free_meter_stats(struct ofl_meter_stats *stats){$/;"	f
ofl_structs_free_packet_queue	oflib/ofl-structs.c	/^ofl_structs_free_packet_queue(struct ofl_packet_queue *queue) {$/;"	f
ofl_structs_free_port	oflib/ofl-structs.c	/^ofl_structs_free_port(struct ofl_port *port) {$/;"	f
ofl_structs_free_table_features	oflib/ofl-structs.c	/^ofl_structs_free_table_features(struct ofl_table_features* features, struct ofl_exp *exp){$/;"	f
ofl_structs_free_table_properties	oflib/ofl-structs.c	/^ofl_structs_free_table_properties(struct ofl_table_feature_prop_header *prop, struct ofl_exp *exp UNUSED){$/;"	f
ofl_structs_free_table_stats	oflib/ofl-structs.c	/^ofl_structs_free_table_stats(struct ofl_table_stats *stats) {$/;"	f
ofl_structs_group_desc_stats_ofp_len	oflib/ofl-structs-pack.c	/^ofl_structs_group_desc_stats_ofp_len(struct ofl_group_desc_stats *stats, struct ofl_exp *exp) {$/;"	f
ofl_structs_group_desc_stats_ofp_total_len	oflib/ofl-structs-pack.c	/^ofl_structs_group_desc_stats_ofp_total_len(struct ofl_group_desc_stats ** stats, size_t stats_num, struct ofl_exp *exp) {$/;"	f
ofl_structs_group_desc_stats_pack	oflib/ofl-structs-pack.c	/^ofl_structs_group_desc_stats_pack(struct ofl_group_desc_stats *src, struct ofp_group_desc_stats *dst, struct ofl_exp *exp) {$/;"	f
ofl_structs_group_desc_stats_print	oflib/ofl-structs-print.c	/^ofl_structs_group_desc_stats_print(FILE *stream, struct ofl_group_desc_stats *s, struct ofl_exp *exp) {$/;"	f
ofl_structs_group_desc_stats_to_string	oflib/ofl-structs-print.c	/^ofl_structs_group_desc_stats_to_string(struct ofl_group_desc_stats *s, struct ofl_exp *exp) {$/;"	f
ofl_structs_group_desc_stats_unpack	oflib/ofl-structs-unpack.c	/^ofl_structs_group_desc_stats_unpack(struct ofp_group_desc_stats *src, size_t *len, struct ofl_group_desc_stats **dst, struct ofl_exp *exp) {$/;"	f
ofl_structs_group_stats_ofp_len	oflib/ofl-structs-pack.c	/^ofl_structs_group_stats_ofp_len(struct ofl_group_stats *stats) {$/;"	f
ofl_structs_group_stats_ofp_total_len	oflib/ofl-structs-pack.c	/^ofl_structs_group_stats_ofp_total_len(struct ofl_group_stats ** stats, size_t stats_num) {$/;"	f
ofl_structs_group_stats_pack	oflib/ofl-structs-pack.c	/^ofl_structs_group_stats_pack(struct ofl_group_stats *src, struct ofp_group_stats *dst) {$/;"	f
ofl_structs_group_stats_print	oflib/ofl-structs-print.c	/^ofl_structs_group_stats_print(FILE *stream, struct ofl_group_stats *s) {$/;"	f
ofl_structs_group_stats_to_string	oflib/ofl-structs-print.c	/^ofl_structs_group_stats_to_string(struct ofl_group_stats *s) {$/;"	f
ofl_structs_group_stats_unpack	oflib/ofl-structs-unpack.c	/^ofl_structs_group_stats_unpack(struct ofp_group_stats *src, size_t *len, struct ofl_group_stats **dst) {$/;"	f
ofl_structs_instruction_print	oflib/ofl-structs-print.c	/^ofl_structs_instruction_print(FILE *stream, struct ofl_instruction_header *inst, struct ofl_exp *exp) {$/;"	f
ofl_structs_instruction_to_string	oflib/ofl-structs-print.c	/^ofl_structs_instruction_to_string(struct ofl_instruction_header *inst, struct ofl_exp *exp) {$/;"	f
ofl_structs_instructions_ofp_total_len	oflib/ofl-structs-pack.c	/^ofl_structs_instructions_ofp_total_len(struct ofl_instruction_header **instructions, size_t instructions_num, struct ofl_exp *exp) {$/;"	f
ofl_structs_instructions_pack	oflib/ofl-structs-pack.c	/^ofl_structs_instructions_pack(struct ofl_instruction_header *src, struct ofp_instruction *dst, struct ofl_exp *exp) {$/;"	f
ofl_structs_match_init	oflib/ofl-structs-match.c	/^ofl_structs_match_init(struct ofl_match *match){$/;"	f
ofl_structs_match_ofp_len	oflib/ofl-structs-pack.c	/^ofl_structs_match_ofp_len(struct ofl_match_header *match, struct ofl_exp *exp) {$/;"	f
ofl_structs_match_pack	oflib/ofl-structs-pack.c	/^ofl_structs_match_pack(struct ofl_match_header *src, struct ofp_match *dst, uint8_t* oxm_fields, struct ofl_exp *exp) {$/;"	f
ofl_structs_match_print	oflib/ofl-structs-print.c	/^ofl_structs_match_print(FILE *stream, struct ofl_match_header *match, struct ofl_exp *exp) {$/;"	f
ofl_structs_match_put16	oflib/ofl-structs-match.c	/^ofl_structs_match_put16(struct ofl_match *match, uint32_t header, uint16_t value){$/;"	f
ofl_structs_match_put16m	oflib/ofl-structs-match.c	/^ofl_structs_match_put16m(struct ofl_match *match, uint32_t header, uint16_t value, uint16_t mask){$/;"	f
ofl_structs_match_put32	oflib/ofl-structs-match.c	/^ofl_structs_match_put32(struct ofl_match *match, uint32_t header, uint32_t value){$/;"	f
ofl_structs_match_put32m	oflib/ofl-structs-match.c	/^ofl_structs_match_put32m(struct ofl_match *match, uint32_t header, uint32_t value, uint32_t mask){$/;"	f
ofl_structs_match_put64	oflib/ofl-structs-match.c	/^ofl_structs_match_put64(struct ofl_match *match, uint32_t header, uint64_t value){$/;"	f
ofl_structs_match_put64m	oflib/ofl-structs-match.c	/^ofl_structs_match_put64m(struct ofl_match *match, uint32_t header, uint64_t value, uint64_t mask){$/;"	f
ofl_structs_match_put8	oflib/ofl-structs-match.c	/^ofl_structs_match_put8(struct ofl_match *match, uint32_t header, uint8_t value){$/;"	f
ofl_structs_match_put8m	oflib/ofl-structs-match.c	/^ofl_structs_match_put8m(struct ofl_match *match, uint32_t header, uint8_t value, uint8_t mask){$/;"	f
ofl_structs_match_put_eth	oflib/ofl-structs-match.c	/^ofl_structs_match_put_eth(struct ofl_match *match, uint32_t header, uint8_t value[ETH_ADDR_LEN]){$/;"	f
ofl_structs_match_put_eth_m	oflib/ofl-structs-match.c	/^ofl_structs_match_put_eth_m(struct ofl_match *match, uint32_t header, uint8_t value[ETH_ADDR_LEN], uint8_t mask[ETH_ADDR_LEN]){$/;"	f
ofl_structs_match_put_ipv6	oflib/ofl-structs-match.c	/^ofl_structs_match_put_ipv6(struct ofl_match *match, uint32_t header, uint8_t value[IPv6_ADDR_LEN]){$/;"	f
ofl_structs_match_put_ipv6m	oflib/ofl-structs-match.c	/^ofl_structs_match_put_ipv6m(struct ofl_match *match, uint32_t header, uint8_t value[IPv6_ADDR_LEN], uint8_t mask[IPv6_ADDR_LEN]){$/;"	f
ofl_structs_match_to_string	oflib/ofl-structs-print.c	/^ofl_structs_match_to_string(struct ofl_match_header *match, struct ofl_exp *exp) {$/;"	f
ofl_structs_match_unpack	oflib/ofl-structs-unpack.c	/^ofl_structs_match_unpack(struct ofp_match *src,uint8_t * buf, size_t *len, struct ofl_match_header **dst, struct ofl_exp *exp) {$/;"	f
ofl_structs_meter_band_ofp_len	oflib/ofl-structs-pack.c	/^ofl_structs_meter_band_ofp_len(struct ofl_meter_band_header *meter_band) {$/;"	f
ofl_structs_meter_band_pack	oflib/ofl-structs-pack.c	/^ofl_structs_meter_band_pack(struct ofl_meter_band_header *src, struct ofp_meter_band_header *dst){$/;"	f
ofl_structs_meter_band_print	oflib/ofl-structs-print.c	/^ofl_structs_meter_band_print(FILE *stream, struct ofl_meter_band_header* s){$/;"	f
ofl_structs_meter_band_stats_print	oflib/ofl-structs-print.c	/^ofl_structs_meter_band_stats_print(FILE *stream, struct ofl_meter_band_stats* s){$/;"	f
ofl_structs_meter_band_stats_to_string	oflib/ofl-structs-print.c	/^ofl_structs_meter_band_stats_to_string(struct ofl_meter_band_stats* s){$/;"	f
ofl_structs_meter_band_stats_unpack	oflib/ofl-structs-unpack.c	/^ofl_structs_meter_band_stats_unpack(struct ofp_meter_band_stats *src, size_t *len, struct ofl_meter_band_stats **dst){$/;"	f
ofl_structs_meter_band_to_string	oflib/ofl-structs-print.c	/^ofl_structs_meter_band_to_string(struct ofl_meter_band_header* s){$/;"	f
ofl_structs_meter_band_unpack	oflib/ofl-structs-unpack.c	/^ofl_structs_meter_band_unpack(struct ofp_meter_band_header *src, size_t *len, struct ofl_meter_band_header **dst){$/;"	f
ofl_structs_meter_bands_ofp_total_len	oflib/ofl-structs-pack.c	/^ofl_structs_meter_bands_ofp_total_len(struct ofl_meter_band_header **meter_bands, size_t meter_bands_num) {$/;"	f
ofl_structs_meter_conf_ofp_len	oflib/ofl-structs-pack.c	/^ofl_structs_meter_conf_ofp_len(struct ofl_meter_config * meter_conf){$/;"	f
ofl_structs_meter_conf_ofp_total_len	oflib/ofl-structs-pack.c	/^ofl_structs_meter_conf_ofp_total_len(struct ofl_meter_config **meter_conf, size_t stats_num){$/;"	f
ofl_structs_meter_conf_pack	oflib/ofl-structs-pack.c	/^ofl_structs_meter_conf_pack(struct ofl_meter_config *src, struct ofp_meter_config *dst, uint8_t* data){$/;"	f
ofl_structs_meter_config_print	oflib/ofl-structs-print.c	/^ofl_structs_meter_config_print(FILE *stream, struct ofl_meter_config* s){$/;"	f
ofl_structs_meter_config_to_string	oflib/ofl-structs-print.c	/^ofl_structs_meter_config_to_string(struct ofl_meter_config* s){$/;"	f
ofl_structs_meter_config_unpack	oflib/ofl-structs-unpack.c	/^ofl_structs_meter_config_unpack(struct ofp_meter_config *src, size_t *len, struct ofl_meter_config **dst) {$/;"	f
ofl_structs_meter_features_print	oflib/ofl-structs-print.c	/^ofl_structs_meter_features_print(FILE *stream, struct ofl_meter_features* s){$/;"	f
ofl_structs_meter_features_to_string	oflib/ofl-structs-print.c	/^ofl_structs_meter_features_to_string(struct ofl_meter_features* s){$/;"	f
ofl_structs_meter_stats_ofp_len	oflib/ofl-structs-pack.c	/^ofl_structs_meter_stats_ofp_len(struct ofl_meter_stats *stats){$/;"	f
ofl_structs_meter_stats_ofp_total_len	oflib/ofl-structs-pack.c	/^ofl_structs_meter_stats_ofp_total_len(struct ofl_meter_stats **stats, size_t stats_num){$/;"	f
ofl_structs_meter_stats_pack	oflib/ofl-structs-pack.c	/^ofl_structs_meter_stats_pack(struct ofl_meter_stats *src, struct ofp_meter_stats *dst){$/;"	f
ofl_structs_meter_stats_print	oflib/ofl-structs-print.c	/^ofl_structs_meter_stats_print(FILE *stream, struct ofl_meter_stats* s){$/;"	f
ofl_structs_meter_stats_to_string	oflib/ofl-structs-print.c	/^ofl_structs_meter_stats_to_string(struct ofl_meter_stats* s){$/;"	f
ofl_structs_meter_stats_unpack	oflib/ofl-structs-unpack.c	/^ofl_structs_meter_stats_unpack(struct ofp_meter_stats *src, size_t *len, struct ofl_meter_stats **dst) {$/;"	f
ofl_structs_oxm_match_print	oflib/ofl-structs-print.c	/^ofl_structs_oxm_match_print(FILE *stream, const struct ofl_match *omt) {$/;"	f
ofl_structs_oxm_match_to_string	oflib/ofl-structs-print.c	/^ofl_structs_oxm_match_to_string(struct ofl_match *m) {$/;"	f
ofl_structs_oxm_match_unpack	oflib/ofl-structs-unpack.c	/^ofl_structs_oxm_match_unpack(struct ofp_match* src, uint8_t* buf, size_t *len, struct ofl_match **dst){$/;"	f	file:
ofl_structs_oxm_tlv_print	oflib/ofl-structs-print.c	/^ofl_structs_oxm_tlv_print(FILE *stream, struct ofl_match_tlv *f)$/;"	f
ofl_structs_oxm_tlv_to_string	oflib/ofl-structs-print.c	/^ofl_structs_oxm_tlv_to_string(struct ofl_match_tlv *f) {$/;"	f
ofl_structs_pack_band_stats	oflib/ofl-structs-pack.c	/^ofl_structs_pack_band_stats(struct ofl_meter_band_stats *src, struct ofp_meter_band_stats *dst){$/;"	f
ofl_structs_packet_queue_ofp_len	oflib/ofl-structs-pack.c	/^ofl_structs_packet_queue_ofp_len(struct ofl_packet_queue *queue) {$/;"	f
ofl_structs_packet_queue_ofp_total_len	oflib/ofl-structs-pack.c	/^ofl_structs_packet_queue_ofp_total_len(struct ofl_packet_queue ** queues,$/;"	f
ofl_structs_packet_queue_pack	oflib/ofl-structs-pack.c	/^ofl_structs_packet_queue_pack(struct ofl_packet_queue *src, struct ofp_packet_queue *dst) {$/;"	f
ofl_structs_packet_queue_unpack	oflib/ofl-structs-unpack.c	/^ofl_structs_packet_queue_unpack(struct ofp_packet_queue *src, size_t *len, struct ofl_packet_queue **dst) {$/;"	f
ofl_structs_port_pack	oflib/ofl-structs-pack.c	/^ofl_structs_port_pack(struct ofl_port *src, struct ofp_port *dst) {$/;"	f
ofl_structs_port_print	oflib/ofl-structs-print.c	/^ofl_structs_port_print(FILE *stream, struct ofl_port *port) {$/;"	f
ofl_structs_port_stats_pack	oflib/ofl-structs-pack.c	/^ofl_structs_port_stats_pack(struct ofl_port_stats *src, struct ofp_port_stats *dst) {$/;"	f
ofl_structs_port_stats_print	oflib/ofl-structs-print.c	/^ofl_structs_port_stats_print(FILE *stream, struct ofl_port_stats *s) {$/;"	f
ofl_structs_port_stats_to_string	oflib/ofl-structs-print.c	/^ofl_structs_port_stats_to_string(struct ofl_port_stats *s) {$/;"	f
ofl_structs_port_stats_unpack	oflib/ofl-structs-unpack.c	/^ofl_structs_port_stats_unpack(struct ofp_port_stats *src, size_t *len, struct ofl_port_stats **dst) {$/;"	f
ofl_structs_port_to_string	oflib/ofl-structs-print.c	/^ofl_structs_port_to_string(struct ofl_port *port) {$/;"	f
ofl_structs_port_unpack	oflib/ofl-structs-unpack.c	/^ofl_structs_port_unpack(struct ofp_port *src, size_t *len, struct ofl_port **dst) {$/;"	f
ofl_structs_queue_print	oflib/ofl-structs-print.c	/^ofl_structs_queue_print(FILE *stream, struct ofl_packet_queue *q) {$/;"	f
ofl_structs_queue_prop_ofp_len	oflib/ofl-structs-pack.c	/^ofl_structs_queue_prop_ofp_len(struct ofl_queue_prop_header *prop) {$/;"	f
ofl_structs_queue_prop_ofp_total_len	oflib/ofl-structs-pack.c	/^ofl_structs_queue_prop_ofp_total_len(struct ofl_queue_prop_header ** props,$/;"	f
ofl_structs_queue_prop_pack	oflib/ofl-structs-pack.c	/^ofl_structs_queue_prop_pack(struct ofl_queue_prop_header *src,$/;"	f
ofl_structs_queue_prop_print	oflib/ofl-structs-print.c	/^ofl_structs_queue_prop_print(FILE *stream, struct ofl_queue_prop_header *p) {$/;"	f
ofl_structs_queue_prop_to_string	oflib/ofl-structs-print.c	/^ofl_structs_queue_prop_to_string(struct ofl_queue_prop_header *p) {$/;"	f
ofl_structs_queue_prop_unpack	oflib/ofl-structs-unpack.c	/^ofl_structs_queue_prop_unpack(struct ofp_queue_prop_header *src, size_t *len, struct ofl_queue_prop_header **dst) {$/;"	f
ofl_structs_queue_stats_pack	oflib/ofl-structs-pack.c	/^ofl_structs_queue_stats_pack(struct ofl_queue_stats *src, struct ofp_queue_stats *dst) {$/;"	f
ofl_structs_queue_stats_print	oflib/ofl-structs-print.c	/^ofl_structs_queue_stats_print(FILE *stream, struct ofl_queue_stats *s) {$/;"	f
ofl_structs_queue_stats_to_string	oflib/ofl-structs-print.c	/^ofl_structs_queue_stats_to_string(struct ofl_queue_stats *s) {$/;"	f
ofl_structs_queue_stats_unpack	oflib/ofl-structs-unpack.c	/^ofl_structs_queue_stats_unpack(struct ofp_queue_stats *src, size_t *len, struct ofl_queue_stats **dst) {$/;"	f
ofl_structs_queue_to_string	oflib/ofl-structs-print.c	/^ofl_structs_queue_to_string(struct ofl_packet_queue *q) {$/;"	f
ofl_structs_table_features_ofp_total_len	oflib/ofl-structs-pack.c	/^size_t ofl_structs_table_features_ofp_total_len(struct ofl_table_features **feat, size_t tables_num, struct ofl_exp * exp){$/;"	f
ofl_structs_table_features_pack	oflib/ofl-structs-pack.c	/^ofl_structs_table_features_pack(struct ofl_table_features *src, struct ofp_table_features *dst, uint8_t *data,  struct ofl_exp *exp){$/;"	f
ofl_structs_table_features_print	oflib/ofl-structs-print.c	/^ofl_structs_table_features_print(FILE *stream, struct ofl_table_features *s){$/;"	f
ofl_structs_table_features_properties_ofp_len	oflib/ofl-structs-pack.c	/^ofl_structs_table_features_properties_ofp_len(struct ofl_table_feature_prop_header *prop, struct ofl_exp *exp){$/;"	f
ofl_structs_table_features_properties_ofp_total_len	oflib/ofl-structs-pack.c	/^ofl_structs_table_features_properties_ofp_total_len(struct ofl_table_feature_prop_header **props, size_t features_num, struct ofl_exp *exp){$/;"	f
ofl_structs_table_features_to_string	oflib/ofl-structs-print.c	/^ofl_structs_table_features_to_string(struct ofl_table_features *s){$/;"	f
ofl_structs_table_features_unpack	oflib/ofl-structs-unpack.c	/^ofl_structs_table_features_unpack(struct ofp_table_features *src,size_t *len, struct ofl_table_features **dst, struct ofl_exp *exp){$/;"	f
ofl_structs_table_properties_pack	oflib/ofl-structs-pack.c	/^ofl_structs_table_properties_pack(struct ofl_table_feature_prop_header * src, struct ofp_table_feature_prop_header *dst, uint8_t *data, struct ofl_exp *exp){$/;"	f
ofl_structs_table_properties_print	oflib/ofl-structs-print.c	/^ofl_structs_table_properties_print(FILE * stream, struct ofl_table_feature_prop_header* s){$/;"	f
ofl_structs_table_properties_to_string	oflib/ofl-structs-print.c	/^ofl_structs_table_properties_to_string(struct ofl_table_feature_prop_header *s){$/;"	f
ofl_structs_table_properties_unpack	oflib/ofl-structs-unpack.c	/^ofl_structs_table_properties_unpack(struct ofp_table_feature_prop_header * src, size_t *len, struct ofl_table_feature_prop_header **dst, struct ofl_exp *exp){$/;"	f	file:
ofl_structs_table_stats_pack	oflib/ofl-structs-pack.c	/^ofl_structs_table_stats_pack(struct ofl_table_stats *src, struct ofp_table_stats *dst) {$/;"	f
ofl_structs_table_stats_print	oflib/ofl-structs-print.c	/^ofl_structs_table_stats_print(FILE *stream, struct ofl_table_stats *s) {$/;"	f
ofl_structs_table_stats_to_string	oflib/ofl-structs-print.c	/^ofl_structs_table_stats_to_string(struct ofl_table_stats *s) {$/;"	f
ofl_structs_table_stats_unpack	oflib/ofl-structs-unpack.c	/^ofl_structs_table_stats_unpack(struct ofp_table_stats *src, size_t *len, struct ofl_table_stats **dst) {$/;"	f
ofl_table_feature_prop_actions	oflib/ofl-structs.h	/^struct ofl_table_feature_prop_actions {$/;"	s
ofl_table_feature_prop_header	oflib/ofl-structs.h	/^struct ofl_table_feature_prop_header {$/;"	s
ofl_table_feature_prop_instructions	oflib/ofl-structs.h	/^struct ofl_table_feature_prop_instructions {$/;"	s
ofl_table_feature_prop_next_tables	oflib/ofl-structs.h	/^struct ofl_table_feature_prop_next_tables {$/;"	s
ofl_table_feature_prop_oxm	oflib/ofl-structs.h	/^struct ofl_table_feature_prop_oxm {$/;"	s
ofl_table_features	oflib/ofl-structs.h	/^struct ofl_table_features {$/;"	s
ofl_table_print	oflib/ofl-print.c	/^ofl_table_print(FILE *stream, uint8_t table) {$/;"	f
ofl_table_stats	oflib/ofl-structs.h	/^struct ofl_table_stats {$/;"	s
ofl_table_to_string	oflib/ofl-print.c	/^ofl_table_to_string(uint8_t table) {$/;"	f
ofl_utils_count_ofp_actions	oflib/ofl-actions.c	/^ofl_utils_count_ofp_actions(void *data, size_t data_len, size_t *count) {$/;"	f
ofl_utils_count_ofp_bucket_counters	oflib/ofl-structs.c	/^ofl_utils_count_ofp_bucket_counters(void *data UNUSED, size_t data_len, size_t *count) {$/;"	f
ofl_utils_count_ofp_buckets	oflib/ofl-structs.c	/^ofl_utils_count_ofp_buckets(void *data, size_t data_len, size_t *count) {$/;"	f
ofl_utils_count_ofp_flow_stats	oflib/ofl-structs.c	/^ofl_utils_count_ofp_flow_stats(void *data, size_t data_len, size_t *count) {$/;"	f
ofl_utils_count_ofp_group_desc_stats	oflib/ofl-structs.c	/^ofl_utils_count_ofp_group_desc_stats(void *data UNUSED, size_t data_len, size_t *count) {$/;"	f
ofl_utils_count_ofp_group_stats	oflib/ofl-structs.c	/^ofl_utils_count_ofp_group_stats(void *data, size_t data_len, size_t *count) {$/;"	f
ofl_utils_count_ofp_instructions	oflib/ofl-structs.c	/^ofl_utils_count_ofp_instructions(void *data, size_t data_len, size_t *count) {$/;"	f
ofl_utils_count_ofp_meter_band_stats	oflib/ofl-structs.c	/^ofl_utils_count_ofp_meter_band_stats(void *data, size_t data_len, size_t *count){$/;"	f
ofl_utils_count_ofp_meter_bands	oflib/ofl-structs.c	/^ofl_utils_count_ofp_meter_bands(void *data, size_t data_len, size_t *count) {$/;"	f
ofl_utils_count_ofp_meter_config	oflib/ofl-structs.c	/^ofl_utils_count_ofp_meter_config(void *data, size_t data_len, size_t *count){$/;"	f
ofl_utils_count_ofp_meter_stats	oflib/ofl-structs.c	/^ofl_utils_count_ofp_meter_stats(void *data, size_t data_len, size_t *count){$/;"	f
ofl_utils_count_ofp_packet_queues	oflib/ofl-structs.c	/^ofl_utils_count_ofp_packet_queues(void *data, size_t data_len, size_t *count) {$/;"	f
ofl_utils_count_ofp_port_stats	oflib/ofl-structs.c	/^ofl_utils_count_ofp_port_stats(void *data UNUSED, size_t data_len, size_t *count) {$/;"	f
ofl_utils_count_ofp_ports	oflib/ofl-structs.c	/^ofl_utils_count_ofp_ports(void *data UNUSED, size_t data_len, size_t *count) {$/;"	f
ofl_utils_count_ofp_queue_props	oflib/ofl-structs.c	/^ofl_utils_count_ofp_queue_props(void *data, size_t data_len, size_t *count) {$/;"	f
ofl_utils_count_ofp_queue_stats	oflib/ofl-structs.c	/^ofl_utils_count_ofp_queue_stats(void *data UNUSED, size_t data_len, size_t *count) {$/;"	f
ofl_utils_count_ofp_table_features	oflib/ofl-structs.c	/^ofl_utils_count_ofp_table_features(void *data, size_t data_len, size_t *count){$/;"	f
ofl_utils_count_ofp_table_stats	oflib/ofl-structs.c	/^ofl_utils_count_ofp_table_stats(void *data UNUSED, size_t data_len, size_t *count) {$/;"	f
ofl_vlan_vid_print	oflib/ofl-print.c	/^ofl_vlan_vid_print(FILE *stream, uint32_t vid) {$/;"	f
ofl_vlan_vid_to_string	oflib/ofl-print.c	/^ofl_vlan_vid_to_string(uint32_t vid) {$/;"	f
oflib_exp_liboflib_exp_a_AR	Makefile	/^oflib_exp_liboflib_exp_a_AR = $(AR) $(ARFLAGS)$/;"	m
oflib_exp_liboflib_exp_a_LIBADD	Makefile	/^oflib_exp_liboflib_exp_a_LIBADD =$/;"	m
oflib_exp_liboflib_exp_a_OBJECTS	Makefile	/^oflib_exp_liboflib_exp_a_OBJECTS =  \\$/;"	m
oflib_exp_liboflib_exp_a_SOURCES	Makefile	/^oflib_exp_liboflib_exp_a_SOURCES = \\$/;"	m
oflib_exp_liboflib_exp_a_SOURCES	oflib-exp/automake.mk	/^oflib_exp_liboflib_exp_a_SOURCES = \\$/;"	m
oflib_liboflib_a_AR	Makefile	/^oflib_liboflib_a_AR = $(AR) $(ARFLAGS)$/;"	m
oflib_liboflib_a_LIBADD	Makefile	/^oflib_liboflib_a_LIBADD =$/;"	m
oflib_liboflib_a_OBJECTS	Makefile	/^oflib_liboflib_a_OBJECTS = $(am_oflib_liboflib_a_OBJECTS)$/;"	m
oflib_liboflib_a_SOURCES	Makefile	/^oflib_liboflib_a_SOURCES = \\$/;"	m
oflib_liboflib_a_SOURCES	oflib/automake.mk	/^oflib_liboflib_a_SOURCES = \\$/;"	m
ofp_action	lib/ofp.h	/^union ofp_action {$/;"	u
ofp_action_experimenter_header	include/openflow/openflow.h	/^struct ofp_action_experimenter_header {$/;"	s
ofp_action_group	include/openflow/openflow.h	/^struct ofp_action_group {$/;"	s
ofp_action_header	include/openflow/openflow.h	/^struct ofp_action_header {$/;"	s
ofp_action_mpls_label	include/openflow/openflow.h	/^struct ofp_action_mpls_label {$/;"	s
ofp_action_mpls_ttl	include/openflow/openflow.h	/^struct ofp_action_mpls_ttl {$/;"	s
ofp_action_nw_ttl	include/openflow/openflow.h	/^struct ofp_action_nw_ttl {$/;"	s
ofp_action_output	include/openflow/openflow.h	/^struct ofp_action_output {$/;"	s
ofp_action_parity_mpls_label	include/openflow/openflow.h	/^struct ofp_action_parity_mpls_label {$/;"	s
ofp_action_pop_mpls	include/openflow/openflow.h	/^struct ofp_action_pop_mpls {$/;"	s
ofp_action_push	include/openflow/openflow.h	/^struct ofp_action_push {$/;"	s
ofp_action_set_field	include/openflow/openflow.h	/^struct ofp_action_set_field {$/;"	s
ofp_action_set_mpls_label_from_counter	include/openflow/openflow.h	/^struct ofp_action_set_mpls_label_from_counter {$/;"	s
ofp_action_set_queue	include/openflow/openflow.h	/^struct ofp_action_set_queue {$/;"	s
ofp_action_type	include/openflow/openflow.h	/^enum ofp_action_type {$/;"	g
ofp_action_xor_decode	include/openflow/openflow.h	/^struct ofp_action_xor_decode {$/;"	s
ofp_action_xor_encode	include/openflow/openflow.h	/^struct ofp_action_xor_encode {$/;"	s
ofp_aggregate_stats_reply	include/openflow/openflow.h	/^struct ofp_aggregate_stats_reply {$/;"	s
ofp_aggregate_stats_request	include/openflow/openflow.h	/^struct ofp_aggregate_stats_request {$/;"	s
ofp_async_config	include/openflow/openflow.h	/^struct ofp_async_config {$/;"	s
ofp_bad_action_code	include/openflow/openflow.h	/^enum ofp_bad_action_code {$/;"	g
ofp_bad_instruction_code	include/openflow/openflow.h	/^enum ofp_bad_instruction_code {$/;"	g
ofp_bad_match_code	include/openflow/openflow.h	/^enum ofp_bad_match_code {$/;"	g
ofp_bad_request_code	include/openflow/openflow.h	/^enum ofp_bad_request_code {$/;"	g
ofp_bme_action_header	include/openflow/bme-ext.h	/^struct ofp_bme_action_header {$/;"	s
ofp_bme_serialize	include/openflow/bme-ext.h	/^struct ofp_bme_serialize {$/;"	s
ofp_bme_set_metadata	include/openflow/bme-ext.h	/^struct ofp_bme_set_metadata {$/;"	s
ofp_bme_set_metadata_from_counter	include/openflow/bme-ext.h	/^struct ofp_bme_set_metadata_from_counter {$/;"	s
ofp_bme_set_mpls_label	include/openflow/bme-ext.h	/^struct ofp_bme_set_mpls_label {$/;"	s
ofp_bme_update_distance	include/openflow/bme-ext.h	/^struct ofp_bme_update_distance {$/;"	s
ofp_bme_xor_packet	include/openflow/bme-ext.h	/^struct ofp_bme_xor_packet {$/;"	s
ofp_bucket	include/openflow/openflow.h	/^struct ofp_bucket {$/;"	s
ofp_bucket_counter	include/openflow/openflow.h	/^struct ofp_bucket_counter {$/;"	s
ofp_capabilities	include/openflow/openflow.h	/^enum ofp_capabilities {$/;"	g
ofp_config_flags	include/openflow/openflow.h	/^enum ofp_config_flags {$/;"	g
ofp_controller_max_len	include/openflow/openflow.h	/^enum ofp_controller_max_len {$/;"	g
ofp_controller_role	include/openflow/openflow.h	/^enum ofp_controller_role {$/;"	g
ofp_desc	include/openflow/openflow.h	/^struct ofp_desc {$/;"	s
ofp_error	lib/util.c	/^ofp_error(int err_no, const char *format, ...)$/;"	f
ofp_error_experimenter_msg	include/openflow/openflow.h	/^struct ofp_error_experimenter_msg {$/;"	s
ofp_error_msg	include/openflow/openflow.h	/^struct ofp_error_msg {$/;"	s
ofp_error_type	include/openflow/openflow.h	/^enum ofp_error_type {$/;"	g
ofp_experimenter_header	include/openflow/openflow.h	/^struct ofp_experimenter_header {$/;"	s
ofp_experimenter_stats_header	include/openflow/openflow.h	/^struct ofp_experimenter_stats_header {$/;"	s
ofp_extension_commands	include/openflow/openflow-ext.h	/^enum ofp_extension_commands { \/* Queue configuration commands *\/$/;"	g
ofp_extension_header	include/openflow/openflow-ext.h	/^struct ofp_extension_header {$/;"	s
ofp_fatal	lib/util.c	/^ofp_fatal(int err_no, const char *format, ...)$/;"	f
ofp_flow_match_fields	include/openflow/openflow.h	/^enum ofp_flow_match_fields {$/;"	g
ofp_flow_mod	include/openflow/openflow.h	/^struct ofp_flow_mod {$/;"	s
ofp_flow_mod_command	include/openflow/openflow.h	/^enum ofp_flow_mod_command {$/;"	g
ofp_flow_mod_failed_code	include/openflow/openflow.h	/^enum ofp_flow_mod_failed_code {$/;"	g
ofp_flow_mod_flags	include/openflow/openflow.h	/^enum ofp_flow_mod_flags {$/;"	g
ofp_flow_removed	include/openflow/openflow.h	/^struct ofp_flow_removed {$/;"	s
ofp_flow_removed_reason	include/openflow/openflow.h	/^enum ofp_flow_removed_reason {$/;"	g
ofp_flow_stats	include/openflow/openflow.h	/^struct ofp_flow_stats {$/;"	s
ofp_flow_stats_request	include/openflow/openflow.h	/^struct ofp_flow_stats_request {$/;"	s
ofp_flow_wildcards	include/openflow/openflow.h	/^enum ofp_flow_wildcards {$/;"	g
ofp_group	include/openflow/openflow.h	/^enum ofp_group {$/;"	g
ofp_group_capabilities	include/openflow/openflow.h	/^enum ofp_group_capabilities {$/;"	g
ofp_group_desc_stats	include/openflow/openflow.h	/^struct ofp_group_desc_stats {$/;"	s
ofp_group_features_stats	include/openflow/openflow.h	/^struct ofp_group_features_stats {$/;"	s
ofp_group_mod	include/openflow/openflow.h	/^struct ofp_group_mod {$/;"	s
ofp_group_mod_command	include/openflow/openflow.h	/^enum ofp_group_mod_command {$/;"	g
ofp_group_mod_failed_code	include/openflow/openflow.h	/^enum ofp_group_mod_failed_code {$/;"	g
ofp_group_stats	include/openflow/openflow.h	/^struct ofp_group_stats {$/;"	s
ofp_group_stats_request	include/openflow/openflow.h	/^struct ofp_group_stats_request {$/;"	s
ofp_group_type	include/openflow/openflow.h	/^enum ofp_group_type {$/;"	g
ofp_hdr	include/openflow/private-ext.h	/^	struct ofp_header ofp_hdr;	\/* protocol header *\/$/;"	m	struct:private_vxhdr	typeref:struct:private_vxhdr::ofp_header
ofp_header	include/openflow/openflow.h	/^struct ofp_header {$/;"	s
ofp_hello	include/openflow/openflow.h	/^struct ofp_hello {$/;"	s
ofp_hello_failed_code	include/openflow/openflow.h	/^enum ofp_hello_failed_code {$/;"	g
ofp_hex_dump	lib/util.c	/^ofp_hex_dump(FILE *stream, const void *buf_, size_t size,$/;"	f
ofp_instruction	include/openflow/openflow.h	/^struct ofp_instruction {$/;"	s
ofp_instruction_actions	include/openflow/openflow.h	/^struct ofp_instruction_actions {$/;"	s
ofp_instruction_goto_table	include/openflow/openflow.h	/^struct ofp_instruction_goto_table {$/;"	s
ofp_instruction_meter	include/openflow/openflow.h	/^struct ofp_instruction_meter {$/;"	s
ofp_instruction_type	include/openflow/openflow.h	/^enum ofp_instruction_type {$/;"	g
ofp_instruction_write_metadata	include/openflow/openflow.h	/^struct ofp_instruction_write_metadata {$/;"	s
ofp_ipv6exthdr_flags	include/openflow/openflow.h	/^enum ofp_ipv6exthdr_flags {$/;"	g
ofp_len	oflib/ofl.h	/^    size_t  (*ofp_len)          (struct ofl_action_header *act);$/;"	m	struct:ofl_exp_act
ofp_len	oflib/ofl.h	/^    size_t  (*ofp_len)         (struct ofl_instruction_header *i);$/;"	m	struct:ofl_exp_inst
ofp_len	oflib/ofl.h	/^    size_t  (*ofp_len)        (struct ofl_match_header *m);$/;"	m	struct:ofl_exp_match
ofp_logdir	lib/dirs.c	/^const char ofp_logdir[] = "\/usr\/local\/var\/log\/openflow";$/;"	v
ofp_match	include/openflow/openflow.h	/^struct ofp_match {$/;"	s
ofp_match_type	include/openflow/openflow.h	/^enum ofp_match_type {$/;"	g
ofp_meter	include/openflow/openflow.h	/^enum ofp_meter {$/;"	g
ofp_meter_band_drop	include/openflow/openflow.h	/^struct ofp_meter_band_drop {$/;"	s
ofp_meter_band_dscp_remark	include/openflow/openflow.h	/^struct ofp_meter_band_dscp_remark {$/;"	s
ofp_meter_band_experimenter	include/openflow/openflow.h	/^struct ofp_meter_band_experimenter {$/;"	s
ofp_meter_band_header	include/openflow/openflow.h	/^struct ofp_meter_band_header {$/;"	s
ofp_meter_band_stats	include/openflow/openflow.h	/^struct ofp_meter_band_stats {$/;"	s
ofp_meter_band_type	include/openflow/openflow.h	/^enum ofp_meter_band_type {$/;"	g
ofp_meter_config	include/openflow/openflow.h	/^struct ofp_meter_config {$/;"	s
ofp_meter_features	include/openflow/openflow.h	/^struct ofp_meter_features {$/;"	s
ofp_meter_flags	include/openflow/openflow.h	/^enum ofp_meter_flags {$/;"	g
ofp_meter_mod	include/openflow/openflow.h	/^struct ofp_meter_mod {$/;"	s
ofp_meter_mod_command	include/openflow/openflow.h	/^enum ofp_meter_mod_command {$/;"	g
ofp_meter_mod_failed_code	include/openflow/openflow.h	/^enum ofp_meter_mod_failed_code {$/;"	g
ofp_meter_multipart_request	include/openflow/openflow.h	/^struct ofp_meter_multipart_request {$/;"	s
ofp_meter_stats	include/openflow/openflow.h	/^struct ofp_meter_stats {$/;"	s
ofp_mkerr	lib/ofp.h	/^ofp_mkerr(uint16_t type, uint16_t code)$/;"	f
ofp_multipart_reply	include/openflow/openflow.h	/^struct ofp_multipart_reply {$/;"	s
ofp_multipart_reply_flags	include/openflow/openflow.h	/^enum ofp_multipart_reply_flags {$/;"	g
ofp_multipart_request	include/openflow/openflow.h	/^struct ofp_multipart_request {$/;"	s
ofp_multipart_request_flags	include/openflow/openflow.h	/^enum ofp_multipart_request_flags {$/;"	g
ofp_multipart_types	include/openflow/openflow.h	/^enum ofp_multipart_types {$/;"	g
ofp_oxm_class	include/openflow/openflow.h	/^enum ofp_oxm_class {$/;"	g
ofp_oxm_experimenter_header	include/openflow/openflow.h	/^struct ofp_oxm_experimenter_header {$/;"	s
ofp_packet_in	include/openflow/openflow.h	/^struct ofp_packet_in {$/;"	s
ofp_packet_in_reason	include/openflow/openflow.h	/^enum ofp_packet_in_reason {$/;"	g
ofp_packet_out	include/openflow/openflow.h	/^struct ofp_packet_out {$/;"	s
ofp_packet_queue	include/openflow/openflow.h	/^struct ofp_packet_queue {$/;"	s
ofp_pkgdatadir	lib/dirs.c	/^const char ofp_pkgdatadir[] = "\/usr\/local\/share\/openflow";$/;"	v
ofp_port	include/openflow/openflow.h	/^struct ofp_port {$/;"	s
ofp_port_config	include/openflow/openflow.h	/^enum ofp_port_config {$/;"	g
ofp_port_features	include/openflow/openflow.h	/^enum ofp_port_features {$/;"	g
ofp_port_mod	include/openflow/openflow.h	/^struct ofp_port_mod {$/;"	s
ofp_port_mod_failed_code	include/openflow/openflow.h	/^enum ofp_port_mod_failed_code {$/;"	g
ofp_port_no	include/openflow/openflow.h	/^enum ofp_port_no {$/;"	g
ofp_port_reason	include/openflow/openflow.h	/^enum ofp_port_reason {$/;"	g
ofp_port_state	include/openflow/openflow.h	/^enum ofp_port_state {$/;"	g
ofp_port_stats	include/openflow/openflow.h	/^struct ofp_port_stats {$/;"	s
ofp_port_stats_request	include/openflow/openflow.h	/^struct ofp_port_stats_request {$/;"	s
ofp_port_status	include/openflow/openflow.h	/^struct ofp_port_status {$/;"	s
ofp_queue	lib/queue.h	/^struct ofp_queue {$/;"	s
ofp_queue_get_config_reply	include/openflow/openflow.h	/^struct ofp_queue_get_config_reply {$/;"	s
ofp_queue_get_config_request	include/openflow/openflow.h	/^struct ofp_queue_get_config_request {$/;"	s
ofp_queue_op_failed_code	include/openflow/openflow.h	/^enum ofp_queue_op_failed_code {$/;"	g
ofp_queue_prop_experimenter	include/openflow/openflow.h	/^struct ofp_queue_prop_experimenter {$/;"	s
ofp_queue_prop_header	include/openflow/openflow.h	/^struct ofp_queue_prop_header {$/;"	s
ofp_queue_prop_max_rate	include/openflow/openflow.h	/^struct ofp_queue_prop_max_rate {$/;"	s
ofp_queue_prop_min_rate	include/openflow/openflow.h	/^struct ofp_queue_prop_min_rate {$/;"	s
ofp_queue_properties	include/openflow/openflow.h	/^enum ofp_queue_properties {$/;"	g
ofp_queue_stats	include/openflow/openflow.h	/^struct ofp_queue_stats {$/;"	s
ofp_queue_stats_request	include/openflow/openflow.h	/^struct ofp_queue_stats_request {$/;"	s
ofp_role_request	include/openflow/openflow.h	/^struct ofp_role_request {$/;"	s
ofp_role_request_failed_code	include/openflow/openflow.h	/^enum ofp_role_request_failed_code {$/;"	g
ofp_rundir	lib/dirs.c	/^const char ofp_rundir[] = "\/usr\/local\/var\/run";$/;"	v
ofp_switch_config	include/openflow/openflow.h	/^struct ofp_switch_config {$/;"	s
ofp_switch_config_failed_code	include/openflow/openflow.h	/^enum ofp_switch_config_failed_code {$/;"	g
ofp_switch_features	include/openflow/openflow.h	/^struct ofp_switch_features {$/;"	s
ofp_table	include/openflow/openflow.h	/^enum ofp_table {$/;"	g
ofp_table_config	include/openflow/openflow.h	/^enum ofp_table_config {$/;"	g
ofp_table_feature_prop_actions	include/openflow/openflow.h	/^struct ofp_table_feature_prop_actions {$/;"	s
ofp_table_feature_prop_header	include/openflow/openflow.h	/^struct ofp_table_feature_prop_header{$/;"	s
ofp_table_feature_prop_instructions	include/openflow/openflow.h	/^struct ofp_table_feature_prop_instructions {$/;"	s
ofp_table_feature_prop_next_tables	include/openflow/openflow.h	/^struct ofp_table_feature_prop_next_tables {$/;"	s
ofp_table_feature_prop_oxm	include/openflow/openflow.h	/^struct ofp_table_feature_prop_oxm {$/;"	s
ofp_table_feature_prop_type	include/openflow/openflow.h	/^enum ofp_table_feature_prop_type {$/;"	g
ofp_table_features	include/openflow/openflow.h	/^struct ofp_table_features {$/;"	s
ofp_table_features_failed_code	include/openflow/openflow.h	/^enum ofp_table_features_failed_code {$/;"	g
ofp_table_mod	include/openflow/openflow.h	/^struct ofp_table_mod {$/;"	s
ofp_table_mod_failed_code	include/openflow/openflow.h	/^enum ofp_table_mod_failed_code {$/;"	g
ofp_table_stats	include/openflow/openflow.h	/^struct ofp_table_stats {$/;"	s
ofp_type	include/openflow/openflow.h	/^enum ofp_type {$/;"	g
ofp_vlan_id	include/openflow/openflow.h	/^enum ofp_vlan_id {$/;"	g
ofp_vxid	include/openflow/private-ext.h	/^	uint32_t ofp_vxid;	\/* vendor extenion ID *\/$/;"	m	struct:private_vxhdr
ofpbuf	lib/ofpbuf.h	/^struct ofpbuf {$/;"	s
ofpbuf_at	lib/ofpbuf.c	/^ofpbuf_at(const struct ofpbuf *b, size_t offset, size_t size) $/;"	f
ofpbuf_at_assert	lib/ofpbuf.c	/^ofpbuf_at_assert(const struct ofpbuf *b, size_t offset, size_t size) $/;"	f
ofpbuf_clear	lib/ofpbuf.c	/^ofpbuf_clear(struct ofpbuf *b) $/;"	f
ofpbuf_clone	lib/ofpbuf.c	/^ofpbuf_clone(const struct ofpbuf *buffer)$/;"	f
ofpbuf_clone_data	lib/ofpbuf.c	/^ofpbuf_clone_data(const void *data, size_t size)$/;"	f
ofpbuf_clone_with_headroom	lib/ofpbuf.c	/^ofpbuf_clone_with_headroom(const struct ofpbuf *buffer, size_t headroom)$/;"	f
ofpbuf_delete	lib/ofpbuf.c	/^ofpbuf_delete(struct ofpbuf *b) $/;"	f
ofpbuf_end	lib/ofpbuf.c	/^ofpbuf_end(const struct ofpbuf *b) $/;"	f
ofpbuf_headroom	lib/ofpbuf.c	/^ofpbuf_headroom(const struct ofpbuf *b)$/;"	f
ofpbuf_init	lib/ofpbuf.c	/^ofpbuf_init(struct ofpbuf *b, size_t size)$/;"	f
ofpbuf_new	lib/ofpbuf.c	/^ofpbuf_new(size_t size)$/;"	f
ofpbuf_new_with_headroom	lib/ofpbuf.c	/^ofpbuf_new_with_headroom(size_t size, size_t headroom)$/;"	f
ofpbuf_prealloc_headroom	lib/ofpbuf.c	/^ofpbuf_prealloc_headroom(struct ofpbuf *b, size_t size) $/;"	f
ofpbuf_prealloc_tailroom	lib/ofpbuf.c	/^ofpbuf_prealloc_tailroom(struct ofpbuf *b, size_t size)$/;"	f
ofpbuf_pull	lib/ofpbuf.c	/^ofpbuf_pull(struct ofpbuf *b, size_t size) $/;"	f
ofpbuf_push	lib/ofpbuf.c	/^ofpbuf_push(struct ofpbuf *b, const void *p, size_t size) $/;"	f
ofpbuf_push_uninit	lib/ofpbuf.c	/^ofpbuf_push_uninit(struct ofpbuf *b, size_t size) $/;"	f
ofpbuf_push_zeros	lib/ofpbuf.c	/^ofpbuf_push_zeros(struct ofpbuf *b, size_t size)$/;"	f
ofpbuf_put	lib/ofpbuf.c	/^ofpbuf_put(struct ofpbuf *b, const void *p, size_t size) $/;"	f
ofpbuf_put_uninit	lib/ofpbuf.c	/^ofpbuf_put_uninit(struct ofpbuf *b, size_t size) $/;"	f
ofpbuf_put_zeros	lib/ofpbuf.c	/^ofpbuf_put_zeros(struct ofpbuf *b, size_t size)$/;"	f
ofpbuf_rebase__	lib/ofpbuf.c	/^ofpbuf_rebase__(struct ofpbuf *b, void *new_base)$/;"	f	file:
ofpbuf_reinit	lib/ofpbuf.c	/^ofpbuf_reinit(struct ofpbuf *b, size_t size)$/;"	f
ofpbuf_reserve	lib/ofpbuf.c	/^ofpbuf_reserve(struct ofpbuf *b, size_t size) $/;"	f
ofpbuf_resize_tailroom__	lib/ofpbuf.c	/^ofpbuf_resize_tailroom__(struct ofpbuf *b, size_t new_tailroom)$/;"	f	file:
ofpbuf_tail	lib/ofpbuf.c	/^ofpbuf_tail(const struct ofpbuf *b) $/;"	f
ofpbuf_tailroom	lib/ofpbuf.c	/^ofpbuf_tailroom(const struct ofpbuf *b)$/;"	f
ofpbuf_trim	lib/ofpbuf.c	/^ofpbuf_trim(struct ofpbuf *b)$/;"	f
ofpbuf_try_pull	lib/ofpbuf.c	/^ofpbuf_try_pull(struct ofpbuf *b, size_t size) $/;"	f
ofpbuf_uninit	lib/ofpbuf.c	/^ofpbuf_uninit(struct ofpbuf *b)$/;"	f
ofpbuf_use	lib/ofpbuf.c	/^ofpbuf_use(struct ofpbuf *b, void *base, size_t allocated)$/;"	f
ofpc_flags	include/openflow/of_hw_api.h	/^    uint32_t ofpc_flags;         \/* Bitmap of ofp_capabilities flags *\/$/;"	m	struct:of_hw_driver_caps
ofps_barrier_reply	lib/ofpstat.h	/^	uint64_t ofps_barrier_reply;$/;"	m	struct:ofpstat
ofps_barrier_request	lib/ofpstat.h	/^	uint64_t ofps_barrier_request;$/;"	m	struct:ofpstat
ofps_echo_reply	lib/ofpstat.h	/^	uint64_t ofps_echo_reply;$/;"	m	struct:ofpstat
ofps_echo_request	lib/ofpstat.h	/^	uint64_t ofps_echo_request;$/;"	m	struct:ofpstat
ofps_error	lib/ofpstat.h	/^	uint64_t ofps_error;$/;"	m	struct:ofpstat
ofps_error_code	lib/ofpstat.h	/^	} ofps_error_code;$/;"	m	struct:ofpstat	typeref:struct:ofpstat::__anon3
ofps_error_type	lib/ofpstat.h	/^	} ofps_error_type;$/;"	m	struct:ofpstat	typeref:struct:ofpstat::__anon2
ofps_feats_reply	lib/ofpstat.h	/^	uint64_t ofps_feats_reply;$/;"	m	struct:ofpstat
ofps_feats_request	lib/ofpstat.h	/^	uint64_t ofps_feats_request;$/;"	m	struct:ofpstat
ofps_flow_mod	lib/ofpstat.h	/^	uint64_t ofps_flow_mod;$/;"	m	struct:ofpstat
ofps_flow_mod_ops	lib/ofpstat.h	/^	} ofps_flow_mod_ops;$/;"	m	struct:ofpstat	typeref:struct:ofpstat::__anon4
ofps_flow_removed	lib/ofpstat.h	/^	uint64_t ofps_flow_removed;$/;"	m	struct:ofpstat
ofps_get_config_reply	lib/ofpstat.h	/^	uint64_t ofps_get_config_reply;$/;"	m	struct:ofpstat
ofps_get_config_request	lib/ofpstat.h	/^	uint64_t ofps_get_config_request;$/;"	m	struct:ofpstat
ofps_hello	lib/ofpstat.h	/^	uint64_t ofps_hello;$/;"	m	struct:ofpstat
ofps_packet_in	lib/ofpstat.h	/^	uint64_t ofps_packet_in;$/;"	m	struct:ofpstat
ofps_packet_out	lib/ofpstat.h	/^	uint64_t ofps_packet_out;$/;"	m	struct:ofpstat
ofps_port_mod	lib/ofpstat.h	/^	uint64_t ofps_port_mod;$/;"	m	struct:ofpstat
ofps_port_status	lib/ofpstat.h	/^	uint64_t ofps_port_status;$/;"	m	struct:ofpstat
ofps_rcvd	lib/vconn-provider.h	/^    struct ofpstat ofps_rcvd;$/;"	m	struct:vconn	typeref:struct:vconn::ofpstat
ofps_sent	lib/vconn-provider.h	/^    struct ofpstat ofps_sent;$/;"	m	struct:vconn	typeref:struct:vconn::ofpstat
ofps_set_config	lib/ofpstat.h	/^	uint64_t ofps_set_config;$/;"	m	struct:ofpstat
ofps_stats_reply	lib/ofpstat.h	/^	uint64_t ofps_stats_reply;$/;"	m	struct:ofpstat
ofps_stats_request	lib/ofpstat.h	/^	uint64_t ofps_stats_request;$/;"	m	struct:ofpstat
ofps_total	lib/ofpstat.h	/^	uint64_t ofps_total;$/;"	m	struct:ofpstat
ofps_unknown	lib/ofpstat.h	/^	uint64_t ofps_unknown;$/;"	m	struct:ofpstat
ofps_vendor	lib/ofpstat.h	/^	uint64_t ofps_vendor;$/;"	m	struct:ofpstat
ofpstat	lib/ofpstat.h	/^struct ofpstat {$/;"	s
ofpstat_inc_protocol_stat	lib/ofpstat.c	/^ofpstat_inc_protocol_stat(struct ofpstat *ifps, struct ofp_header *hdr)$/;"	f
ofq_error_string	include/openflow/openflow-ext.h	90;"	d
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
one	lib/hmap.h	/^    struct hmap_node *one;$/;"	m	struct:hmap	typeref:struct:hmap::hmap_node
one_arg	utilities/ofp-pki.in	/^one_arg() {$/;"	f
one_or_two_args	utilities/ofp-pki.in	/^one_or_two_args() {$/;"	f
op	lib/dhcp.h	/^    uint8_t op;                 \/* DHCP_BOOTREQUEST or DHCP_BOOTREPLY. *\/$/;"	m	struct:dhcp_header
op	lib/dhcp.h	/^    uint8_t op;                 \/* DHCP_BOOTREQUEST or DHCP_BOOTREPLY. *\/$/;"	m	struct:dhcp_msg
open	lib/vconn-provider.h	/^    int (*open)(const char *name, char *suffix, struct vconn **vconnp);$/;"	m	struct:vconn_class
open_passive_vconn	secchan/secchan.c	/^open_passive_vconn(const char *name)$/;"	f	file:
open_queue_socket	lib/netdev.c	/^open_queue_socket(const char * name, uint16_t class_id, int * fd)$/;"	f	file:
openflow_ext_set_dp_desc	include/openflow/openflow-ext.h	/^struct openflow_ext_set_dp_desc {$/;"	s
openflow_family	lib/dpif.c	/^static int openflow_family;$/;"	v	file:
openflow_multicast_policy	lib/dpif.c	/^static const struct nl_policy openflow_multicast_policy[] = {$/;"	v	typeref:struct:nl_policy	file:
openflow_policy	lib/dpif.c	/^static const struct nl_policy openflow_policy[] = {$/;"	v	typeref:struct:nl_policy	file:
openflow_queue_command_header	include/openflow/openflow-ext.h	/^struct openflow_queue_command_header {$/;"	s
openflow_queue_error_code	include/openflow/openflow-ext.h	/^enum openflow_queue_error_code {$/;"	g
opp_differs	secchan/port-watcher.c	/^opp_differs(const struct ofp_port *a, const struct ofp_port *b)$/;"	f	file:
option_class	lib/dhcp.c	/^struct option_class {$/;"	s	file:
optional	lib/netlink.h	/^    bool optional;$/;"	m	struct:nl_policy
options	lib/dhcp.h	/^    struct dhcp_option options[DHCP_N_OPTIONS]; \/* Indexed by option code. *\/$/;"	m	struct:dhcp_msg	typeref:struct:dhcp_msg::dhcp_option
order	udatapath/action_set.c	/^    int                        order;   \/* order of the entry as defined *\/$/;"	m	struct:action_set_entry	file:
orig_len	lib/pcap.c	/^    uint32_t orig_len;       \/* actual length of packet *\/$/;"	m	struct:pcaprec_hdr	file:
os_pkt	include/openflow/of_hw_api.h	/^    os_pkt_t os_pkt;       \/* OS specific representation *\/$/;"	m	struct:of_packet_s
os_pkt_t	include/openflow/of_hw_api.h	/^typedef void *os_pkt_t;  \/* OS representation of packet *\/$/;"	t
our_hooks	lib/leak-checker.c	/^static const struct hooks our_hooks = { hook_malloc, hook_realloc, hook_free };$/;"	v	typeref:struct:hooks	file:
out_group	include/openflow/openflow.h	/^	uint32_t out_group;     \/* For OFPFC_DELETE* commands, require$/;"	m	struct:ofp_flow_mod
out_group	include/openflow/openflow.h	/^	uint32_t out_group;     \/* Require matching entries to include this$/;"	m	struct:ofp_aggregate_stats_request
out_group	include/openflow/openflow.h	/^	uint32_t out_group;     \/* Require matching entries to include this$/;"	m	struct:ofp_flow_stats_request
out_group	oflib/ofl-messages.h	/^    uint32_t                        out_group;    \/* For OFPFC_DELETE* commands, require$/;"	m	struct:ofl_msg_flow_mod
out_group	oflib/ofl-messages.h	/^    uint32_t                 out_group; \/* Require matching entries to include this$/;"	m	struct:ofl_msg_multipart_request_flow
out_group	udatapath/packet.h	/^    uint32_t            out_group; \/* OFPG_ANY = no out group *\/$/;"	m	struct:packet
out_of_memory	lib/util.c	/^out_of_memory(void) $/;"	f
out_port	include/openflow/openflow.h	/^	uint32_t out_port;      \/* For OFPFC_DELETE* commands, require$/;"	m	struct:ofp_flow_mod
out_port	include/openflow/openflow.h	/^	uint32_t out_port;      \/* Require matching entries to include this$/;"	m	struct:ofp_aggregate_stats_request
out_port	include/openflow/openflow.h	/^	uint32_t out_port;      \/* Require matching entries to include this$/;"	m	struct:ofp_flow_stats_request
out_port	oflib/ofl-messages.h	/^    uint32_t                        out_port;     \/* For OFPFC_DELETE* commands, require$/;"	m	struct:ofl_msg_flow_mod
out_port	oflib/ofl-messages.h	/^    uint32_t                 out_port; \/* Require matching entries to include this$/;"	m	struct:ofl_msg_multipart_request_flow
out_port	udatapath/packet.h	/^    uint32_t            out_port;  \/* OFPP_ANY = no out port *\/$/;"	m	struct:packet
out_port_max_len	udatapath/packet.h	/^    uint16_t            out_port_max_len;  \/* max length to send, if out_port is OFPP_CONTROLLER *\/$/;"	m	struct:packet
out_queue	udatapath/packet.h	/^    uint32_t            out_queue;$/;"	m	struct:packet
output	secchan/status.c	/^    struct ds output;$/;"	m	struct:status_reply	typeref:struct:status_reply::ds	file:
output	udatapath/dp_actions.c	/^output(struct packet *pkt, struct ofl_action_output *action) {$/;"	f	file:
output_by_metadata	udatapath/dp_exp_bme.c	/^output_by_metadata(struct packet *pkt)$/;"	f	file:
oxm_entry_ok	oflib/oxm-match.c	/^oxm_entry_ok(const void *p, unsigned int match_len)$/;"	f
oxm_field	oflib/oxm-match.h	/^struct oxm_field {$/;"	s
oxm_field_index	oflib/oxm-match.h	/^enum oxm_field_index {$/;"	g
oxm_field_lookup	oflib/oxm-match.c	/^oxm_field_lookup(uint32_t header)$/;"	f
oxm_fields	include/openflow/openflow.h	/^        uint8_t oxm_fields[4]; \/* OXMs start here - Make compiler happy *\/$/;"	m	struct:ofp_match
oxm_header	include/openflow/openflow.h	/^	uint32_t oxm_header;   \/* oxm_class = OFPXMC_EXPERIMENTER *\/$/;"	m	struct:ofp_oxm_experimenter_header
oxm_ids	include/openflow/openflow.h	/^    uint32_t oxm_ids[0]; \/* Array of OXM headers *\/$/;"	m	struct:ofp_table_feature_prop_oxm
oxm_ids	oflib/ofl-structs.h	/^    uint32_t *oxm_ids; \/* Array of OXM headers *\/$/;"	m	struct:ofl_table_feature_prop_oxm
oxm_ids	udatapath/flow_table.c	/^uint32_t  oxm_ids[]={OXM_OF_IN_PORT,OXM_OF_IN_PHY_PORT,OXM_OF_METADATA,OXM_OF_ETH_DST,$/;"	v
oxm_init	oflib/oxm-match.c	/^oxm_init(void)$/;"	f	file:
oxm_match_lookup	oflib/oxm-match.c	/^oxm_match_lookup(uint32_t header, const struct ofl_match *omt)$/;"	f
oxm_num	oflib/ofl-structs.h	/^    size_t oxm_num;$/;"	m	struct:ofl_table_feature_prop_oxm
oxm_ofb_match_fields	include/openflow/openflow.h	/^enum oxm_ofb_match_fields {$/;"	g
oxm_prereqs_ok	oflib/oxm-match.c	/^oxm_prereqs_ok(const struct oxm_field *field, const struct ofl_match *rule)$/;"	f
oxm_pull_match	oflib/oxm-match.c	/^oxm_pull_match(struct ofpbuf *buf, struct ofl_match * match_dst, int match_len)$/;"	f
oxm_put_16	oflib/oxm-match.c	/^oxm_put_16(struct ofpbuf *buf, uint32_t header, uint16_t value)$/;"	f	file:
oxm_put_16w	oflib/oxm-match.c	/^oxm_put_16w(struct ofpbuf *buf, uint32_t header, uint16_t value, uint16_t mask)$/;"	f	file:
oxm_put_32	oflib/oxm-match.c	/^oxm_put_32(struct ofpbuf *buf, uint32_t header, uint32_t value)$/;"	f	file:
oxm_put_32w	oflib/oxm-match.c	/^oxm_put_32w(struct ofpbuf *buf, uint32_t header, uint32_t value, uint32_t mask)$/;"	f	file:
oxm_put_64	oflib/oxm-match.c	/^oxm_put_64(struct ofpbuf *buf, uint32_t header, uint64_t value)$/;"	f	file:
oxm_put_64w	oflib/oxm-match.c	/^oxm_put_64w(struct ofpbuf *buf, uint32_t header, uint64_t value, uint64_t mask)$/;"	f	file:
oxm_put_8	oflib/oxm-match.c	/^oxm_put_8(struct ofpbuf *buf, uint32_t header, uint8_t value)$/;"	f	file:
oxm_put_8w	oflib/oxm-match.c	/^oxm_put_8w(struct ofpbuf *buf, uint32_t header, uint8_t value, uint16_t mask){$/;"	f	file:
oxm_put_eth	oflib/oxm-match.c	/^oxm_put_eth(struct ofpbuf *buf, uint32_t header,$/;"	f	file:
oxm_put_ethm	oflib/oxm-match.c	/^oxm_put_ethm(struct ofpbuf *buf, uint32_t header,$/;"	f	file:
oxm_put_header	oflib/oxm-match.c	/^oxm_put_header(struct ofpbuf *buf, uint32_t header)$/;"	f	file:
oxm_put_ipv6	oflib/oxm-match.c	/^static void oxm_put_ipv6(struct ofpbuf *buf, uint32_t header,$/;"	f	file:
oxm_put_ipv6m	oflib/oxm-match.c	/^static void oxm_put_ipv6m(struct ofpbuf *buf, uint32_t header,$/;"	f	file:
oxm_put_match	oflib/oxm-match.c	/^int oxm_put_match(struct ofpbuf *buf, struct ofl_match *omt){$/;"	f
pack	oflib/ofl.h	/^    int     (*pack)             (struct ofl_action_header *src, struct ofp_action_header *dst);$/;"	m	struct:ofl_exp_act
pack	oflib/ofl.h	/^    int     (*pack)             (struct ofl_msg_experimenter *msg, uint8_t **buf, size_t *buf_len);$/;"	m	struct:ofl_exp_msg
pack	oflib/ofl.h	/^    int     (*pack)            (struct ofl_instruction_header *src, struct ofp_instruction *dst);$/;"	m	struct:ofl_exp_inst
pack	oflib/ofl.h	/^    int     (*pack)           (struct ofl_match_header *src, struct ofp_match *dst);$/;"	m	struct:ofl_exp_match
packet	udatapath/packet.h	/^struct packet {$/;"	s
packet_band_count	include/openflow/openflow.h	/^    uint64_t packet_band_count; \/* Number of packets in band. *\/$/;"	m	struct:ofp_meter_band_stats
packet_band_count	oflib/ofl-structs.h	/^    uint64_t packet_band_count; \/* Number of packets in band. *\/$/;"	m	struct:ofl_meter_band_stats
packet_buffer	udatapath/dp_buffers.c	/^struct packet_buffer {$/;"	s	file:
packet_clone	udatapath/packet.c	/^packet_clone(struct packet *pkt) {$/;"	f
packet_count	include/openflow/openflow.h	/^	uint64_t packet_count;  \/* Number of packets in flow. *\/$/;"	m	struct:ofp_flow_stats
packet_count	include/openflow/openflow.h	/^	uint64_t packet_count; \/* Number of packets in flows. *\/$/;"	m	struct:ofp_aggregate_stats_reply
packet_count	include/openflow/openflow.h	/^	uint64_t packet_count; \/* Number of packets processed by bucket. *\/$/;"	m	struct:ofp_bucket_counter
packet_count	include/openflow/openflow.h	/^	uint64_t packet_count; \/* Number of packets processed by group. *\/$/;"	m	struct:ofp_group_stats
packet_count	include/openflow/openflow.h	/^	uint64_t packet_count;$/;"	m	struct:ofp_flow_removed
packet_count	oflib/ofl-messages.h	/^    uint64_t   packet_count; \/* Number of packets in flows. *\/$/;"	m	struct:ofl_msg_multipart_reply_aggregate
packet_count	oflib/ofl-structs.h	/^    uint64_t                        packet_count;  \/* Number of packets in flow. *\/$/;"	m	struct:ofl_flow_stats
packet_count	oflib/ofl-structs.h	/^    uint64_t   packet_count; \/* Number of packets processed by bucket. *\/$/;"	m	struct:ofl_bucket_counter
packet_count	oflib/ofl-structs.h	/^    uint64_t   packet_count;$/;"	m	struct:ofl_group_stats
packet_create	udatapath/packet.c	/^packet_create(struct datapath *dp, uint32_t in_port,$/;"	f
packet_destroy	udatapath/packet.c	/^packet_destroy(struct packet *pkt) {$/;"	f
packet_handle_std	udatapath/packet_handle_std.h	/^struct packet_handle_std {$/;"	s
packet_handle_std_clone	udatapath/packet_handle_std.c	/^packet_handle_std_clone(struct packet *pkt, struct packet_handle_std *handle UNUSED) {$/;"	f
packet_handle_std_create	udatapath/packet_handle_std.c	/^packet_handle_std_create(struct packet *pkt) {$/;"	f
packet_handle_std_destroy	udatapath/packet_handle_std.c	/^packet_handle_std_destroy(struct packet_handle_std *handle) {$/;"	f
packet_handle_std_is_fragment	udatapath/packet_handle_std.c	/^packet_handle_std_is_fragment(struct packet_handle_std *handle) {$/;"	f
packet_handle_std_is_ttl_valid	udatapath/packet_handle_std.c	/^packet_handle_std_is_ttl_valid(struct packet_handle_std *handle) {$/;"	f
packet_handle_std_match	udatapath/packet_handle_std.c	/^packet_handle_std_match(struct packet_handle_std *handle, struct ofl_match *match){$/;"	f
packet_handle_std_print	udatapath/packet_handle_std.c	/^packet_handle_std_print(FILE *stream, struct packet_handle_std *handle) {$/;"	f
packet_handle_std_to_string	udatapath/packet_handle_std.c	/^packet_handle_std_to_string(struct packet_handle_std *handle) {$/;"	f
packet_handle_std_validate	udatapath/packet_handle_std.c	/^packet_handle_std_validate(struct packet_handle_std *handle) {$/;"	f
packet_in_count	include/openflow/openflow.h	/^    uint64_t packet_in_count; \/* Number of packets in input. *\/$/;"	m	struct:ofp_meter_stats
packet_in_count	oflib/ofl-structs.h	/^    uint64_t packet_in_count; \/* Number of packets in input. *\/$/;"	m	struct:ofl_meter_stats
packet_in_mask	include/openflow/openflow.h	/^    uint32_t packet_in_mask[2]; \/* Bitmasks of OFPR_* values. *\/$/;"	m	struct:ofp_async_config
packet_in_mask	oflib/ofl-structs.h	/^    uint32_t packet_in_mask[2]; \/* Bitmasks of OFPR_* values. *\/$/;"	m	struct:ofl_async_config
packet_match	udatapath/match_std.c	/^packet_match(struct ofl_match *flow_match, struct ofl_match *packet){$/;"	f
packet_out	udatapath/packet.h	/^    bool                packet_out; \/* true if the packet arrived in a packet out msg *\/$/;"	m	struct:packet
packet_receive_register	include/openflow/of_hw_api.h	/^    int (*packet_receive_register)(of_hw_driver_t *hw_drv,$/;"	m	struct:of_hw_driver
packet_send	include/openflow/of_hw_api.h	/^    int (*packet_send)(of_hw_driver_t *hw_drv, int of_port, of_packet_t *pkt,$/;"	m	struct:of_hw_driver
packet_to_string	udatapath/packet.c	/^packet_to_string(struct packet *pkt) {$/;"	f
packets_received	lib/rconn.c	/^    unsigned int packets_received;$/;"	m	struct:rconn	file:
packets_sent	lib/rconn.c	/^    unsigned int packets_sent;$/;"	m	struct:rconn	file:
pad	include/openflow/bme-ext.h	/^    uint8_t  pad[2];$/;"	m	struct:ofp_bme_update_distance
pad	include/openflow/bme-ext.h	/^    uint8_t pad[4];               \/* Align to 64-bits *\/$/;"	m	struct:ofp_bme_action_header
pad	include/openflow/bme-ext.h	/^    uint8_t pad[4];$/;"	m	struct:ofp_bme_xor_packet
pad	include/openflow/bme-ext.h	/^    uint8_t pad[6];$/;"	m	struct:ofp_bme_serialize
pad	include/openflow/bme-ext.h	/^    uint8_t pad[7];$/;"	m	struct:ofp_bme_set_metadata
pad	include/openflow/bme-ext.h	/^  uint8_t pad[4];$/;"	m	struct:bme_output_by_metadata
pad	include/openflow/bme-ext.h	/^  uint8_t pad[4];$/;"	m	struct:ofp_bme_set_mpls_label
pad	include/openflow/nicira-ext.h	/^    uint8_t pad[2];$/;"	m	struct:nx_action_set_tunnel
pad	include/openflow/nicira-ext.h	/^    uint8_t pad[4];$/;"	m	struct:nx_action_resubmit
pad	include/openflow/nicira-ext.h	/^    uint8_t pad[6];$/;"	m	struct:nx_action_header
pad	include/openflow/nicira-ext.h	/^    uint8_t pad[7];$/;"	m	struct:nxt_tun_id_cookie
pad	include/openflow/openflow-ext.h	/^    uint8_t pad[4];             \/* Align to 64-bits *\/$/;"	m	struct:openflow_queue_command_header
pad	include/openflow/openflow.h	/^	uint8_t pad;                  \/* Pad to 64 bits. *\/$/;"	m	struct:ofp_group_mod
pad	include/openflow/openflow.h	/^	uint8_t pad;       \/* Pad to 64 bits. *\/$/;"	m	struct:ofp_group_desc_stats
pad	include/openflow/openflow.h	/^	uint8_t pad;$/;"	m	struct:ofp_flow_stats
pad	include/openflow/openflow.h	/^	uint8_t pad[2];           \/* Align to 64-bits. *\/$/;"	m	struct:ofp_switch_features
pad	include/openflow/openflow.h	/^	uint8_t pad[2];        \/* Align to 64 bits. *\/$/;"	m	struct:ofp_group_stats
pad	include/openflow/openflow.h	/^	uint8_t pad[2];$/;"	m	struct:ofp_action_pop_mpls
pad	include/openflow/openflow.h	/^	uint8_t pad[2];$/;"	m	struct:ofp_action_push
pad	include/openflow/openflow.h	/^	uint8_t pad[2];$/;"	m	struct:ofp_flow_mod
pad	include/openflow/openflow.h	/^	uint8_t pad[3];         \/* Align to 32 bits. *\/$/;"	m	struct:ofp_aggregate_stats_request
pad	include/openflow/openflow.h	/^	uint8_t pad[3];         \/* Align to 32 bits. *\/$/;"	m	struct:ofp_flow_stats_request
pad	include/openflow/openflow.h	/^	uint8_t pad[3];   \/* Pad to 32 bits *\/$/;"	m	struct:ofp_table_mod
pad	include/openflow/openflow.h	/^	uint8_t pad[3];   \/* Pad to 64 bits. *\/$/;"	m	struct:ofp_instruction_goto_table
pad	include/openflow/openflow.h	/^	uint8_t pad[3];$/;"	m	struct:ofp_action_mpls_ttl
pad	include/openflow/openflow.h	/^	uint8_t pad[3];$/;"	m	struct:ofp_action_nw_ttl
pad	include/openflow/openflow.h	/^	uint8_t pad[4];                           \/* 64-bit alignment *\/$/;"	m	struct:ofp_queue_prop_experimenter
pad	include/openflow/openflow.h	/^	uint8_t pad[4];                      \/* Align to 64-bits *\/$/;"	m	struct:ofp_instruction_actions
pad	include/openflow/openflow.h	/^	uint8_t pad[4];           \/* Align to 64 bits. *\/$/;"	m	struct:ofp_role_request
pad	include/openflow/openflow.h	/^	uint8_t pad[4];         \/* Align to 64-bits *\/$/;"	m	struct:ofp_instruction_write_metadata
pad	include/openflow/openflow.h	/^	uint8_t pad[4];        \/* Align to 64 bits. *\/$/;"	m	struct:ofp_aggregate_stats_reply
pad	include/openflow/openflow.h	/^	uint8_t pad[4];        \/* Align to 64-bits. *\/$/;"	m	struct:ofp_port_stats
pad	include/openflow/openflow.h	/^	uint8_t pad[4];     \/* 64-bit alignemnt. *\/$/;"	m	struct:ofp_queue_prop_header
pad	include/openflow/openflow.h	/^	uint8_t pad[4];    \/* Align to 64 bits. *\/$/;"	m	struct:ofp_group_stats_request
pad	include/openflow/openflow.h	/^	uint8_t pad[4];$/;"	m	struct:ofp_action_header
pad	include/openflow/openflow.h	/^	uint8_t pad[4];$/;"	m	struct:ofp_bucket
pad	include/openflow/openflow.h	/^	uint8_t pad[4];$/;"	m	struct:ofp_multipart_reply
pad	include/openflow/openflow.h	/^	uint8_t pad[4];$/;"	m	struct:ofp_multipart_request
pad	include/openflow/openflow.h	/^	uint8_t pad[4];$/;"	m	struct:ofp_port
pad	include/openflow/openflow.h	/^	uint8_t pad[4];$/;"	m	struct:ofp_port_mod
pad	include/openflow/openflow.h	/^	uint8_t pad[4];$/;"	m	struct:ofp_port_stats_request
pad	include/openflow/openflow.h	/^	uint8_t pad[4];$/;"	m	struct:ofp_queue_get_config_reply
pad	include/openflow/openflow.h	/^	uint8_t pad[4];$/;"	m	struct:ofp_queue_get_config_request
pad	include/openflow/openflow.h	/^	uint8_t pad[6];                             \/* 64-bit alignment. *\/$/;"	m	struct:ofp_packet_queue
pad	include/openflow/openflow.h	/^	uint8_t pad[6];                           \/* 64-bit alignment *\/$/;"	m	struct:ofp_queue_prop_max_rate
pad	include/openflow/openflow.h	/^	uint8_t pad[6];                           \/* 64-bit alignment *\/$/;"	m	struct:ofp_queue_prop_min_rate
pad	include/openflow/openflow.h	/^	uint8_t pad[6];   \/* Pad to 64 bits. *\/$/;"	m	struct:ofp_action_output
pad	include/openflow/openflow.h	/^	uint8_t pad[6];$/;"	m	struct:ofp_packet_out
pad	include/openflow/openflow.h	/^	uint8_t pad[7]; \/* Align to 64-bits. *\/$/;"	m	struct:ofp_port_status
pad	include/openflow/openflow.h	/^        uint8_t pad[4];$/;"	m	struct:ofp_action_parity_mpls_label
pad	include/openflow/openflow.h	/^        uint8_t pad[4];$/;"	m	struct:ofp_action_set_mpls_label_from_counter
pad	include/openflow/openflow.h	/^        uint8_t pad[4];$/;"	m	struct:ofp_action_xor_decode
pad	include/openflow/openflow.h	/^        uint8_t pad[4];$/;"	m	struct:ofp_action_xor_encode
pad	include/openflow/openflow.h	/^    uint8_t pad[2];$/;"	m	struct:ofp_meter_features
pad	include/openflow/openflow.h	/^    uint8_t pad[3];         \/* Align to 32-bits. *\/$/;"	m	struct:ofp_table_stats
pad	include/openflow/openflow.h	/^    uint8_t pad[3];$/;"	m	struct:ofp_meter_band_dscp_remark
pad	include/openflow/openflow.h	/^    uint8_t pad[4];               \/* Align to 64-bits *\/$/;"	m	struct:ofp_instruction
pad	include/openflow/openflow.h	/^    uint8_t pad[4]; \/* Align to 64 bits. *\/$/;"	m	struct:ofp_meter_multipart_request
pad	include/openflow/openflow.h	/^    uint8_t pad[4];$/;"	m	struct:ofp_meter_band_drop
pad	include/openflow/openflow.h	/^    uint8_t pad[5];   \/* Align to 64-bits. *\/$/;"	m	struct:ofp_table_features
pad	include/openflow/openflow.h	/^    uint8_t pad[6];$/;"	m	struct:ofp_meter_stats
pad	lib/flow.h	/^    uint8_t pad[5];$/;"	m	struct:flow
pad	oflib/ofl-structs.h	/^    uint8_t pad[5];   \/* Align to 64-bits. *\/$/;"	m	struct:ofl_table_features
pad2	include/openflow/openflow.h	/^	uint8_t pad2[2];                  \/* Align to 64 bits. *\/$/;"	m	struct:ofp_port
pad2	include/openflow/openflow.h	/^	uint8_t pad2[2];               \/* Pad to 64 bits. *\/$/;"	m	struct:ofp_port_mod
pad2	include/openflow/openflow.h	/^	uint8_t pad2[4];        \/* Align to 64 bits. *\/$/;"	m	struct:ofp_aggregate_stats_request
pad2	include/openflow/openflow.h	/^	uint8_t pad2[4];        \/* Align to 64 bits. *\/$/;"	m	struct:ofp_flow_stats_request
pad2	include/openflow/openflow.h	/^	uint8_t pad2[4];       \/* Align to 64 bits. *\/$/;"	m	struct:ofp_group_stats
pad2	include/openflow/openflow.h	/^	uint8_t pad2[6];        \/* Align to 64-bits. *\/$/;"	m	struct:ofp_flow_stats
pad3	include/openflow/openflow.h	/^	uint8_t pad3[4];               \/* Pad to 64 bits. *\/$/;"	m	struct:ofp_port_mod
pad_to_minimum_length	lib/netdev.c	/^pad_to_minimum_length(struct ofpbuf *buffer)$/;"	f	file:
parse16	utilities/dpctl.c	/^parse16(char *str, struct names16 *names, size_t names_num, uint16_t max, uint16_t *val) {$/;"	f	file:
parse16m	utilities/dpctl.c	/^parse16m(char *str, struct names16 *names, size_t names_num, uint16_t max, uint16_t *val, uint16_t *mask){$/;"	f	file:
parse32	utilities/dpctl.c	/^parse32(char *str, struct names32 *names, size_t names_num, uint32_t max, uint32_t *val) {$/;"	f	file:
parse32m	utilities/dpctl.c	/^parse32m(char *str, struct names32 *names, size_t names_num, uint32_t max, uint32_t *val, uint32_t **mask){$/;"	f	file:
parse8	utilities/dpctl.c	/^parse8(char *str, struct names8 *names, size_t names_num, uint8_t max, uint8_t *val) {$/;"	f	file:
parse_action	utilities/dpctl.c	/^parse_action(uint16_t type, char *str, struct ofl_action_header **act) {$/;"	f	file:
parse_actions	utilities/dpctl.c	/^parse_actions(char *str, size_t *acts_num, struct ofl_action_header ***acts) {$/;"	f	file:
parse_age	utilities/ofp-pki.in	/^parse_age() {$/;"	f
parse_band	utilities/dpctl.c	/^parse_band(char *str, struct ofl_msg_meter_mod *m, struct ofl_meter_band_header **b){$/;"	f	file:
parse_band_args	utilities/dpctl.c	/^parse_band_args(char *str, struct ofl_msg_meter_mod *m, struct ofl_meter_band_header *b){$/;"	f	file:
parse_bucket	utilities/dpctl.c	/^parse_bucket(char *str, struct ofl_bucket *b) {$/;"	f	file:
parse_config	utilities/dpctl.c	/^parse_config(char *str, struct ofl_config *c) {$/;"	f	file:
parse_dl_addr	utilities/dpctl.c	/^parse_dl_addr(char *str, uint8_t *addr, uint8_t **mask) {$/;"	f	file:
parse_ext_hdr	utilities/dpctl.c	/^parse_ext_hdr(char *str, uint16_t *ext_hdr){$/;"	f	file:
parse_flow_mod_args	utilities/dpctl.c	/^parse_flow_mod_args(char *str, struct ofl_msg_flow_mod *req) {$/;"	f	file:
parse_flow_stat_args	utilities/dpctl.c	/^parse_flow_stat_args(char *str, struct ofl_msg_multipart_request_flow *req) {$/;"	f	file:
parse_group	utilities/dpctl.c	/^parse_group(char *str, uint32_t *group) {$/;"	f	file:
parse_group_mod_args	utilities/dpctl.c	/^parse_group_mod_args(char *str, struct ofl_msg_group_mod *req) {$/;"	f	file:
parse_inst	utilities/dpctl.c	/^parse_inst(char *str, struct ofl_instruction_header **inst) {$/;"	f	file:
parse_list	utilities/dpctl_parser.py	/^def parse_list():$/;"	f
parse_match	utilities/dpctl.c	/^parse_match(char *str, struct ofl_match_header **match) {$/;"	f	file:
parse_meter	utilities/dpctl.c	/^parse_meter(char *str, uint32_t *meter) {$/;"	f	file:
parse_meter_mod_args	utilities/dpctl.c	/^parse_meter_mod_args(char *str, struct ofl_msg_meter_mod *req){$/;"	f	file:
parse_nw_addr	utilities/dpctl.c	/^parse_nw_addr(char *str, uint32_t *addr, uint32_t **mask) {$/;"	f	file:
parse_options	lib/dhcp.c	/^parse_options(struct dhcp_msg *msg, const char *name, void *data, size_t size,$/;"	f	file:
parse_options	secchan/secchan.c	/^parse_options(int argc, char *argv[], struct settings *s)$/;"	f	file:
parse_options	udatapath/udatapath.c	/^parse_options(struct datapath *dp, int argc, char *argv[])$/;"	f	file:
parse_options	utilities/dpctl.c	/^parse_options(int argc, char *argv[])$/;"	f	file:
parse_options	utilities/ofp-discover.c	/^parse_options(int argc, char *argv[])$/;"	f	file:
parse_options	utilities/ofp-kill.c	/^parse_options(int argc, char *argv[])$/;"	f	file:
parse_oxm_entry	oflib/oxm-match.c	/^parse_oxm_entry(struct ofl_match *match, const struct oxm_field *f,$/;"	f	file:
parse_port	utilities/dpctl.c	/^parse_port(char *str, uint32_t *port) {$/;"	f	file:
parse_port_mod	utilities/dpctl.c	/^parse_port_mod(char *str, struct ofl_msg_port_mod *msg) {$/;"	f	file:
parse_queue	utilities/dpctl.c	/^parse_queue(char *str, uint32_t *port) {$/;"	f	file:
parse_set_field	utilities/dpctl.c	/^parse_set_field(char *token, struct ofl_action_set_field *act) {$/;"	f	file:
parse_table	utilities/dpctl.c	/^parse_table(char *str, uint8_t *table) {$/;"	f	file:
parse_table_mod	utilities/dpctl.c	/^parse_table_mod(char *str, struct ofl_msg_table_mod *msg) {$/;"	f	file:
parse_vlan_vid	utilities/dpctl.c	/^parse_vlan_vid(char *str, uint16_t *vid) {$/;"	f	file:
path	lib/vlog-socket.c	/^    char *path;$/;"	m	struct:vlog_server	file:
path_cost	lib/stp.c	/^    int path_cost;                  \/* 8.5.5.3: Cost of tx\/rx on this port. *\/$/;"	m	struct:stp_port	file:
pattern	lib/vlog.c	/^    char *pattern;              \/* Current pattern. *\/$/;"	m	struct:facility	file:
pbb	lib/packets.h	/^   struct pbb_header      * pbb;$/;"	m	struct:protocols_std	typeref:struct:protocols_std::pbb_header
pbb_header	lib/packets.h	/^struct pbb_header {$/;"	s
pbb_next_type	lib/packets.h	/^    uint16_t pbb_next_type;$/;"	m	struct:pbb_header
pcap_hdr	lib/pcap.c	/^struct pcap_hdr {$/;"	s	file:
pcap_open	lib/pcap.c	/^pcap_open(const char *file_name, const char *mode)$/;"	f
pcap_pkthdr	nbee_link/nbee_link.h	/^typedef struct pcap_pkthdr {	\/* needed to make Nbee happy *\/$/;"	s
pcap_pkthdr_t	nbee_link/nbee_link.h	/^}pcap_pkthdr_t;$/;"	t	typeref:struct:pcap_pkthdr
pcap_read	lib/pcap.c	/^pcap_read(FILE *file, struct ofpbuf **bufp)$/;"	f
pcap_read_header	lib/pcap.c	/^pcap_read_header(FILE *file)$/;"	f
pcap_write	lib/pcap.c	/^pcap_write(FILE *file, struct ofpbuf *buf)$/;"	f
pcap_write_header	lib/pcap.c	/^pcap_write_header(FILE *file)$/;"	f
pcaprec_hdr	lib/pcap.c	/^struct pcaprec_hdr {$/;"	s	file:
pdfdir	Makefile	/^pdfdir = ${docdir}$/;"	m
peer	include/openflow/openflow.h	/^	uint32_t peer;                    \/* Features advertised by peer. *\/$/;"	m	struct:ofp_port
peer	lib/netdev.c	/^    uint32_t peer;              \/* Features advertised by the peer. *\/$/;"	m	struct:netdev	file:
peer	oflib/ofl-structs.h	/^    uint32_t   peer;          \/* Features advertised by peer. *\/$/;"	m	struct:ofl_port
peers	secchan/failover.c	/^	struct failover_peer *peers[MAX_CONTROLLERS];$/;"	m	struct:failover_context	typeref:struct:failover_context::failover_peer	file:
pending_flows	udatapath/dp_actions.c	/^struct pending_flows {$/;"	s	file:
pending_flows	udatapath/dp_exp_bme.c	/^struct pending_flows {$/;"	s	file:
pending_pkt	udatapath/dp_actions.c	/^struct pending_pkt {$/;"	s	file:
pending_pkt	udatapath/dp_exp_bme.c	/^struct pending_pkt {$/;"	s	file:
periodic_cb	secchan/secchan.h	/^    void (*periodic_cb)(void *aux);$/;"	m	struct:hook_class
pid	lib/netlink.c	/^    uint32_t pid;$/;"	m	struct:nl_sock	file:
pid	lib/process.c	/^    pid_t pid;$/;"	m	struct:process	file:
pidfile	lib/daemon.c	/^static char *pidfile;$/;"	v	file:
ping	utilities/dpctl.c	/^ping(struct vconn *vconn, int argc, char *argv[]) {$/;"	f	file:
pipeline	udatapath/datapath.h	/^    struct pipeline *pipeline;  \/* Pipeline with multi-tables. *\/$/;"	m	struct:datapath	typeref:struct:datapath::pipeline
pipeline	udatapath/pipeline.h	/^struct pipeline {$/;"	s
pipeline_create	udatapath/pipeline.c	/^pipeline_create(struct datapath *dp) {$/;"	f
pipeline_destroy	udatapath/pipeline.c	/^pipeline_destroy(struct pipeline *pl) {$/;"	f
pipeline_handle_flow_mod	udatapath/pipeline.c	/^pipeline_handle_flow_mod(struct pipeline *pl, struct ofl_msg_flow_mod *msg,$/;"	f
pipeline_handle_stats_request_aggregate	udatapath/pipeline.c	/^pipeline_handle_stats_request_aggregate(struct pipeline *pl,$/;"	f
pipeline_handle_stats_request_flow	udatapath/pipeline.c	/^pipeline_handle_stats_request_flow(struct pipeline *pl,$/;"	f
pipeline_handle_stats_request_table	udatapath/pipeline.c	/^pipeline_handle_stats_request_table(struct pipeline *pl,$/;"	f
pipeline_handle_stats_request_table_features_request	udatapath/pipeline.c	/^pipeline_handle_stats_request_table_features_request(struct pipeline *pl,$/;"	f
pipeline_handle_table_mod	udatapath/pipeline.c	/^pipeline_handle_table_mod(struct pipeline *pl,$/;"	f
pipeline_process_packet	udatapath/pipeline.c	/^pipeline_process_packet(struct pipeline *pl, struct packet *pkt) {$/;"	f
pipeline_timeout	udatapath/pipeline.c	/^pipeline_timeout(struct pipeline *pl) {$/;"	f
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/openflow$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/openflow$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/openflow$/;"	m
pkglibexecdir	Makefile	/^pkglibexecdir = $(libexecdir)\/openflow$/;"	m
pkhdr	nbee_link/nbee_link.cpp	/^struct pcap_pkthdr * pkhdr;$/;"	v	typeref:struct:pcap_pkthdr
pki_host_to_uri	debian/ofp-switch-setup	/^sub pki_host_to_uri {$/;"	s
pkidir_must_exist	utilities/ofp-pki.in	/^pkidir_must_exist() {$/;"	f
pkt	udatapath/dp_actions.c	/^    struct packet *pkt;$/;"	m	struct:pending_pkt	typeref:struct:pending_pkt::packet	file:
pkt	udatapath/dp_buffers.c	/^    struct packet *pkt;$/;"	m	struct:packet_buffer	typeref:struct:packet_buffer::packet	file:
pkt	udatapath/dp_exp_bme.c	/^    struct packet *pkt;$/;"	m	struct:pending_pkt	typeref:struct:pending_pkt::packet	file:
pkt	udatapath/packet_handle_std.h	/^   struct packet              *pkt;$/;"	m	struct:packet_handle_std	typeref:struct:packet_handle_std::packet
pkt_q_mutex	udatapath/dp_ports.c	/^static pthread_mutex_t pkt_q_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
poll_block	lib/poll-loop.c	/^poll_block(void)$/;"	f
poll_cancel	lib/poll-loop.c	/^poll_cancel(struct poll_waiter *pw)$/;"	f
poll_fd_callback	lib/poll-loop.c	/^poll_fd_callback(int fd, short int events, poll_fd_func *function, void *aux)$/;"	f
poll_fd_func	lib/poll-loop.h	/^typedef void poll_fd_func(int fd, short int revents, void *aux);$/;"	t
poll_fd_wait	lib/poll-loop.c	/^poll_fd_wait(int fd, short int events)$/;"	f
poll_immediate_wake	lib/poll-loop.c	/^poll_immediate_wake(void)$/;"	f
poll_server	lib/vlog-socket.c	/^poll_server(int fd UNUSED, short int events UNUSED, void *server_)$/;"	f	file:
poll_timer_wait	lib/poll-loop.c	/^poll_timer_wait(int msec)$/;"	f
poll_timer_wait_decrease	lib/poll-loop.c	/^poll_timer_wait_decrease(int msec)$/;"	f
poll_waiter	lib/poll-loop.c	/^struct poll_waiter {$/;"	s	file:
pollfd	lib/poll-loop.c	/^    struct pollfd *pollfd;      \/* Pointer to element of the pollfds array$/;"	m	struct:poll_waiter	typeref:struct:poll_waiter::pollfd	file:
pop_changed	lib/netdev.c	/^pop_changed(struct netdev_monitor *mon)$/;"	f	file:
pop_mpls	udatapath/dp_actions.c	/^pop_mpls(struct packet *pkt, struct ofl_action_pop_mpls *act) {$/;"	f	file:
pop_mpls_header	udatapath/dp_actions.c	/^pop_mpls_header(struct packet *pkt, uint16_t ethertype)$/;"	f	file:
pop_mpls_header	udatapath/dp_exp_bme.c	/^pop_mpls_header(struct packet *pkt, uint16_t ethertype)$/;"	f	file:
pop_pbb	udatapath/dp_actions.c	/^pop_pbb(struct packet *pkt, struct ofl_action_header *act UNUSED) {$/;"	f	file:
pop_vlan	udatapath/dp_actions.c	/^pop_vlan(struct packet *pkt, struct ofl_action_header *act UNUSED) {$/;"	f	file:
port	include/openflow/bme-ext.h	/^    uint32_t port;$/;"	m	struct:ofp_bme_update_distance
port	include/openflow/openflow-ext.h	/^    uint32_t port;              \/* Port for operations *\/$/;"	m	struct:openflow_queue_command_header
port	include/openflow/openflow.h	/^	uint32_t port;                              \/* Port this queue is attached to. *\/$/;"	m	struct:ofp_packet_queue
port	include/openflow/openflow.h	/^	uint32_t port;    \/* Output port. *\/$/;"	m	struct:ofp_action_output
port	include/openflow/openflow.h	/^	uint32_t port; \/* Port to be queried. Should refer$/;"	m	struct:ofp_queue_get_config_request
port	include/openflow/openflow.h	/^	uint32_t port;$/;"	m	struct:ofp_queue_get_config_reply
port	lib/mac-learning.c	/^    int port;                   \/* Port on which MAC was most recently seen. *\/$/;"	m	struct:mac_entry	file:
port	oflib-exp/ofl-exp-bme.h	/^    uint32_t port;                     \/* Output port. $/;"	m	struct:ofl_bme_update_distance
port	oflib/ofl-actions.h	/^    uint32_t   port;    \/* Output port. *\/$/;"	m	struct:ofl_action_output
port	oflib/ofl-messages.h	/^    uint32_t   port; \/* Port to be queried. Should refer$/;"	m	struct:ofl_msg_queue_get_config_request
port	oflib/ofl-messages.h	/^    uint32_t   port;$/;"	m	struct:ofl_msg_queue_get_config_reply
port	udatapath/dp_ports.h	/^    struct sw_port *port; \/* reference to the parent port *\/$/;"	m	struct:sw_queue	typeref:struct:sw_queue::sw_port
port_add	include/openflow/of_hw_api.h	/^    int (*port_add)(of_hw_driver_t *hw_drv, int of_port, const char *hw_name);$/;"	m	struct:of_hw_driver
port_add_queue	udatapath/dp_ports.c	/^port_add_queue(struct sw_port *p, uint32_t queue_id,$/;"	f	file:
port_array	lib/port-array.h	/^struct port_array {$/;"	s
port_array_clear	lib/port-array.c	/^port_array_clear(struct port_array *pa)$/;"	f
port_array_destroy	lib/port-array.c	/^port_array_destroy(struct port_array *pa)$/;"	f
port_array_extract_bits__	lib/port-array.h	/^port_array_extract_bits__(uint16_t data, int start, int count)$/;"	f
port_array_first	lib/port-array.c	/^port_array_first(const struct port_array *pa, unsigned int *idxp)$/;"	f
port_array_get	lib/port-array.h	/^port_array_get(const struct port_array *pa, uint16_t idx)$/;"	f
port_array_init	lib/port-array.c	/^port_array_init(struct port_array *pa)$/;"	f
port_array_l2	lib/port-array.h	/^struct port_array_l2 {$/;"	s
port_array_l3	lib/port-array.h	/^struct port_array_l3 {$/;"	s
port_array_next	lib/port-array.c	/^port_array_next(const struct port_array *pa, unsigned int *idxp)$/;"	f
port_array_set	lib/port-array.c	/^port_array_set(struct port_array *pa, uint16_t idx, void *p)$/;"	f
port_by_name	secchan/port-watcher.c	/^    struct shash port_by_name;$/;"	m	struct:port_watcher	typeref:struct:port_watcher::shash	file:
port_change_register	include/openflow/of_hw_api.h	/^    int (*port_change_register)(of_hw_driver_t *hw_drv,$/;"	m	struct:of_hw_driver
port_changed	secchan/port-watcher.c	/^    port_changed_cb_func *port_changed;$/;"	m	struct:port_watcher_cb	file:
port_changed_cb_func	secchan/port-watcher.h	/^typedef void port_changed_cb_func(uint32_t port_no,$/;"	t
port_delete_queue	udatapath/dp_ports.c	/^port_delete_queue(struct sw_port *p, struct sw_queue *q)$/;"	f	file:
port_desc	utilities/dpctl.c	/^port_desc(struct vconn *vconn, int argc UNUSED, char *argv[] UNUSED) {$/;"	f	file:
port_enable_get	include/openflow/of_hw_api.h	/^    int (*port_enable_get)(of_hw_driver_t *hw_drv, int of_port);$/;"	m	struct:of_hw_driver
port_enable_set	include/openflow/of_hw_api.h	/^    int (*port_enable_set)(of_hw_driver_t *hw_drv, int of_port, int enable);$/;"	m	struct:of_hw_driver
port_id	lib/stp.c	/^    int port_id;                    \/* 8.5.5.1: Unique port identifier. *\/$/;"	m	struct:stp_port	file:
port_id	lib/stp.c	/^    uint16_t port_id;              \/* 8.5.1.4: Port transmitting the BPDU. *\/$/;"	m	struct:stp_config_bpdu	file:
port_id	oflib-exp/ofl-exp-openflow.h	/^    uint32_t                  port_id;$/;"	m	struct:ofl_exp_openflow_msg_queue
port_link_get	include/openflow/of_hw_api.h	/^    int (*port_link_get)(of_hw_driver_t *hw_drv, int of_port);$/;"	m	struct:of_hw_driver
port_list	udatapath/datapath.h	/^    struct list      port_list; \/* All ports, including local_port. *\/$/;"	m	struct:datapath	typeref:struct:datapath::list
port_list	udatapath/udatapath.c	/^static char *port_list;$/;"	v	file:
port_mod	utilities/dpctl.c	/^port_mod(struct vconn *vconn, int argc UNUSED, char *argv[]) {$/;"	f	file:
port_names	utilities/dpctl.h	/^static struct names32 port_names[] = {$/;"	v	typeref:struct:names32
port_no	include/openflow/openflow.h	/^	uint32_t port_no;  \/* All ports if OFPP_ANY. *\/$/;"	m	struct:ofp_queue_stats_request
port_no	include/openflow/openflow.h	/^	uint32_t port_no; \/* OFPMP_PORT_STATS message must request statistics$/;"	m	struct:ofp_port_stats_request
port_no	include/openflow/openflow.h	/^	uint32_t port_no;$/;"	m	struct:ofp_port
port_no	include/openflow/openflow.h	/^	uint32_t port_no;$/;"	m	struct:ofp_port_mod
port_no	include/openflow/openflow.h	/^	uint32_t port_no;$/;"	m	struct:ofp_port_stats
port_no	include/openflow/openflow.h	/^	uint32_t port_no;$/;"	m	struct:ofp_queue_stats
port_no	oflib/ofl-messages.h	/^    uint32_t   port_no; \/* All ports if OFPP_ANY. *\/$/;"	m	struct:ofl_msg_multipart_request_queue
port_no	oflib/ofl-messages.h	/^    uint32_t   port_no; \/* OFPMP_PORT_STATS message must request statistics$/;"	m	struct:ofl_msg_multipart_request_port
port_no	oflib/ofl-messages.h	/^    uint32_t   port_no;$/;"	m	struct:ofl_msg_port_mod
port_no	oflib/ofl-structs.h	/^    uint32_t   port_no;$/;"	m	struct:ofl_port
port_no	oflib/ofl-structs.h	/^    uint32_t   port_no;$/;"	m	struct:ofl_port_stats
port_no	oflib/ofl-structs.h	/^    uint32_t   port_no;$/;"	m	struct:ofl_queue_stats
port_no	udatapath/dp_ports.h	/^    of_port_t port_no;$/;"	m	struct:hw_pkt_q_entry
port_queue_config	include/openflow/of_hw_api.h	/^    int (*port_queue_config)(of_hw_driver_t *hw_drv, int of_port,$/;"	m	struct:of_hw_driver
port_queue_remove	include/openflow/of_hw_api.h	/^    int (*port_queue_remove)(of_hw_driver_t *hw_drv, int of_port,$/;"	m	struct:of_hw_driver
port_remove	include/openflow/of_hw_api.h	/^    int (*port_remove)(of_hw_driver_t *hw_drv, of_port_t port);$/;"	m	struct:of_hw_driver
port_speed	udatapath/dp_ports.c	/^static uint32_t port_speed(uint32_t conf) {$/;"	f	file:
port_stats_get	include/openflow/of_hw_api.h	/^    int (*port_stats_get)(of_hw_driver_t *hw_drv, int of_port,$/;"	m	struct:of_hw_driver
port_status_mask	include/openflow/openflow.h	/^    uint32_t port_status_mask[2]; \/* Bitmasks of OFPPR_* values. *\/$/;"	m	struct:ofp_async_config
port_status_mask	oflib/ofl-structs.h	/^    uint32_t port_status_mask[2]; \/* Bitmasks of OFPPR_* values. *\/$/;"	m	struct:ofl_async_config
port_watcher	secchan/port-watcher.c	/^struct port_watcher {$/;"	s	file:
port_watcher_cb	secchan/port-watcher.c	/^struct port_watcher_cb {$/;"	s	file:
port_watcher_get_config	secchan/port-watcher.c	/^port_watcher_get_config(const struct port_watcher *pw, uint32_t port_no)$/;"	f
port_watcher_get_hwaddr	secchan/port-watcher.c	/^port_watcher_get_hwaddr(const struct port_watcher *pw, uint32_t port_no)$/;"	f
port_watcher_get_name	secchan/port-watcher.c	/^port_watcher_get_name(const struct port_watcher *pw, uint32_t port_no)$/;"	f
port_watcher_hook_class	secchan/port-watcher.c	/^static struct hook_class port_watcher_hook_class = {$/;"	v	typeref:struct:hook_class	file:
port_watcher_is_ready	secchan/port-watcher.c	/^port_watcher_is_ready(const struct port_watcher *pw)$/;"	f
port_watcher_local_cb	secchan/port-watcher.c	/^struct port_watcher_local_cb {$/;"	s	file:
port_watcher_local_packet_cb	secchan/port-watcher.c	/^port_watcher_local_packet_cb(struct relay *r, void *pw_)$/;"	f	file:
port_watcher_periodic_cb	secchan/port-watcher.c	/^port_watcher_periodic_cb(void *pw_)$/;"	f	file:
port_watcher_register_callback	secchan/port-watcher.c	/^port_watcher_register_callback(struct port_watcher *pw,$/;"	f
port_watcher_register_local_port_callback	secchan/port-watcher.c	/^port_watcher_register_local_port_callback(struct port_watcher *pw,$/;"	f
port_watcher_remote_packet_cb	secchan/port-watcher.c	/^port_watcher_remote_packet_cb(struct relay *r, void *pw_)$/;"	f	file:
port_watcher_set_flags	secchan/port-watcher.c	/^port_watcher_set_flags(struct port_watcher *pw, uint32_t port_no,$/;"	f
port_watcher_start	secchan/port-watcher.c	/^port_watcher_start(struct secchan *secchan,$/;"	f
port_watcher_wait_cb	secchan/port-watcher.c	/^port_watcher_wait_cb(void *pw_)$/;"	f	file:
ports	lib/stp.c	/^    struct stp_port ports[STP_MAX_PORTS];$/;"	m	struct:stp	typeref:struct:stp::stp_port	file:
ports	secchan/port-watcher.c	/^    struct port_array ports;$/;"	m	struct:port_watcher	typeref:struct:port_watcher::port_array	file:
ports	udatapath/datapath.h	/^    struct sw_port   ports[DP_MAX_PORTS + 1];$/;"	m	struct:datapath	typeref:struct:datapath::sw_port
ports_num	udatapath/datapath.h	/^    size_t           ports_num;$/;"	m	struct:datapath
pos	lib/ofp.h	/^    const uint8_t *pos, *end;$/;"	m	struct:flow_stats_iterator
pos	lib/ofp.h	/^    const union ofp_action *pos, *end;$/;"	m	struct:actions_iterator	typeref:union:actions_iterator::ofp_action
position_EH	nbee_link/nbee_link.h	/^       uint32_t position_EH[10];$/;"	m	struct:control_eh_fields
prealloc_data	lib/dhcp.c	/^prealloc_data(struct dhcp_msg *msg, size_t n)$/;"	f	file:
prec_level	include/openflow/openflow.h	/^    uint8_t prec_level; \/* Number of precendence level to substract. *\/$/;"	m	struct:ofp_meter_band_dscp_remark
prec_level	oflib/ofl-structs.h	/^    uint8_t prec_level; \/* Number of precendence level to substract. *\/$/;"	m	struct:ofl_meter_band_dscp_remark
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
prev	lib/list.h	/^    struct list *prev;     \/* Previous list element. *\/$/;"	m	struct:list	typeref:struct:list::list
printbits	udatapath/match_std.c	/^printbits(uint32_t n, FILE *file)$/;"	f
priority	include/openflow/openflow.h	/^	uint16_t priority;      \/* Priority level of flow entry. *\/$/;"	m	struct:ofp_flow_mod
priority	include/openflow/openflow.h	/^	uint16_t priority;      \/* Priority level of flow entry. *\/$/;"	m	struct:ofp_flow_removed
priority	include/openflow/openflow.h	/^	uint16_t priority;      \/* Priority of the entry. *\/$/;"	m	struct:ofp_flow_stats
priority	oflib/ofl-messages.h	/^    uint16_t                        priority;     \/* Priority level of flow entry. *\/$/;"	m	struct:ofl_msg_flow_mod
priority	oflib/ofl-structs.h	/^    uint16_t                        priority;      \/* Priority of the entry. Only meaningful$/;"	m	struct:ofl_flow_stats
private_p	lib/ofpbuf.h	/^    void *private_p;            \/* Private pointer for use by owner. *\/$/;"	m	struct:ofpbuf
private_vxhdr	include/openflow/private-ext.h	/^struct private_vxhdr {$/;"	s
private_vxopt	include/openflow/private-ext.h	/^struct private_vxopt {$/;"	s
probably_admitted	lib/rconn.c	/^    bool probably_admitted;$/;"	m	struct:rconn	file:
probe_interval	lib/rconn.c	/^    int probe_interval;         \/* Secs of inactivity before sending probe. *\/$/;"	m	struct:rconn	file:
probe_interval	secchan/secchan.h	/^    int probe_interval;       \/* # seconds idle before sending echo request. *\/$/;"	m	struct:settings
process	lib/process.c	/^struct process {$/;"	s	file:
process_buffer	udatapath/dp_ports.c	/^process_buffer(struct datapath *dp, struct sw_port *p, struct ofpbuf *buffer) {$/;"	f	file:
process_decoding_queues	udatapath/dp_exp_bme.c	/^process_decoding_queues(struct pending_flows *pl)$/;"	f	file:
process_destroy	lib/process.c	/^process_destroy(struct process *p)$/;"	f
process_encoding_queues	udatapath/dp_exp_bme.c	/^process_encoding_queues(struct pending_flows *pl)$/;"	f	file:
process_escape_args	lib/process.c	/^process_escape_args(char **argv)$/;"	f
process_exited	lib/process.c	/^process_exited(struct process *p)$/;"	f
process_flow	utilities/dpctl_parser.py	/^def process_flow (ix,flow):$/;"	f
process_init	lib/process.c	/^process_init(void)$/;"	f
process_kill	lib/process.c	/^process_kill(const struct process *p, int signr)$/;"	f
process_name	lib/process.c	/^process_name(const struct process *p)$/;"	f
process_pid	lib/process.c	/^process_pid(const struct process *p)$/;"	f
process_run	lib/process.c	/^process_run(char **argv,$/;"	f
process_seq_queue	udatapath/dp_exp_bme.c	/^process_seq_queue(struct pending_flows *pl)$/;"	f	file:
process_start	lib/process.c	/^process_start(char **argv,$/;"	f
process_status	lib/process.c	/^process_status(const struct process *p)$/;"	f
process_status_msg	lib/process.c	/^process_status_msg(int status)$/;"	f
process_wait	lib/process.c	/^process_wait(struct process *p)$/;"	f
program_name	lib/util.c	/^const char *program_name;$/;"	v
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
prop_header	include/openflow/openflow.h	/^	struct ofp_queue_prop_header prop_header; \/* prop: OFPQT_EXPERIMENTER, len: 16. *\/$/;"	m	struct:ofp_queue_prop_experimenter	typeref:struct:ofp_queue_prop_experimenter::ofp_queue_prop_header
prop_header	include/openflow/openflow.h	/^	struct ofp_queue_prop_header prop_header; \/* prop: OFPQT_MAX, len: 16. *\/$/;"	m	struct:ofp_queue_prop_max_rate	typeref:struct:ofp_queue_prop_max_rate::ofp_queue_prop_header
prop_header	include/openflow/openflow.h	/^	struct ofp_queue_prop_header prop_header; \/* prop: OFPQT_MIN, len: 16. *\/$/;"	m	struct:ofp_queue_prop_min_rate	typeref:struct:ofp_queue_prop_min_rate::ofp_queue_prop_header
prop_header	oflib/ofl-structs.h	/^    struct ofl_queue_prop_header prop_header; \/* prop: OFPQT_EXPERIMENTER, len: 16. *\/$/;"	m	struct:ofl_queue_prop_experimenter	typeref:struct:ofl_queue_prop_experimenter::ofl_queue_prop_header
properties	include/openflow/openflow.h	/^	struct ofp_queue_prop_header properties[0]; \/* List of properties. *\/$/;"	m	struct:ofp_packet_queue	typeref:struct:ofp_packet_queue::ofp_queue_prop_header
properties	include/openflow/openflow.h	/^    struct ofp_table_feature_prop_header properties[0];$/;"	m	struct:ofp_table_features	typeref:struct:ofp_table_features::ofp_table_feature_prop_header
properties	oflib/ofl-structs.h	/^    struct ofl_queue_prop_header **properties;$/;"	m	struct:ofl_packet_queue	typeref:struct:ofl_packet_queue::ofl_queue_prop_header
properties	oflib/ofl-structs.h	/^    struct ofl_table_feature_prop_header **properties;$/;"	m	struct:ofl_table_features	typeref:struct:ofl_table_features::ofl_table_feature_prop_header
properties_num	oflib/ofl-structs.h	/^    size_t                         properties_num;$/;"	m	struct:ofl_packet_queue
properties_num	oflib/ofl-structs.h	/^    size_t properties_num;  \/* Number of properties*\/$/;"	m	struct:ofl_table_features
property	include/openflow/openflow.h	/^	uint16_t property;  \/* One of OFPQT_. *\/$/;"	m	struct:ofp_queue_prop_header
props	udatapath/dp_ports.h	/^    struct ofl_packet_queue *props;$/;"	m	struct:sw_queue	typeref:struct:sw_queue::ofl_packet_queue
proto	udatapath/packet_handle_std.h	/^   struct protocols_std       *proto;$/;"	m	struct:packet_handle_std	typeref:struct:packet_handle_std::protocols_std
proto_print	udatapath/packet_handle_std.c	/^proto_print(FILE *stream, struct protocols_std *p) {$/;"	f	file:
protocol_id	lib/stp.c	/^    uint16_t protocol_id;       \/* STP_PROTOCOL_ID. *\/$/;"	m	struct:stp_bpdu_header	file:
protocol_reset	lib/packets.h	/^protocol_reset(struct protocols_std *proto) {$/;"	f
protocol_version	lib/stp.c	/^    uint8_t protocol_version;   \/* STP_PROTOCOL_VERSION. *\/$/;"	m	struct:stp_bpdu_header	file:
protocols_std	lib/packets.h	/^struct protocols_std {$/;"	s
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
psdir	Makefile	/^psdir = ${docdir}$/;"	m
pssl_accept	lib/vconn-ssl.c	/^pssl_accept(struct pvconn *pvconn, struct vconn **new_vconnp)$/;"	f	file:
pssl_close	lib/vconn-ssl.c	/^pssl_close(struct pvconn *pvconn)$/;"	f	file:
pssl_open	lib/vconn-ssl.c	/^pssl_open(const char *name, char *suffix, struct pvconn **pvconnp)$/;"	f	file:
pssl_pvconn	lib/vconn-ssl.c	/^struct pssl_pvconn$/;"	s	file:
pssl_pvconn_cast	lib/vconn-ssl.c	/^pssl_pvconn_cast(struct pvconn *pvconn)$/;"	f	file:
pssl_pvconn_class	lib/vconn-ssl.c	/^struct pvconn_class pssl_pvconn_class = {$/;"	v	typeref:struct:pvconn_class
pssl_pvconn_class	lib/vconn-ssl.c	/^struct pvconn_class pssl_pvconn_class;$/;"	v	typeref:struct:pvconn_class
pssl_wait	lib/vconn-ssl.c	/^pssl_wait(struct pvconn *pvconn)$/;"	f	file:
pstr	udatapath/packet_handle_std.c	/^pstr(void *ptr, const char *str) {$/;"	f	file:
pstream_accept	lib/vconn-stream.c	/^pstream_accept(struct pvconn *pvconn, struct vconn **new_vconnp)$/;"	f	file:
pstream_close	lib/vconn-stream.c	/^pstream_close(struct pvconn *pvconn)$/;"	f	file:
pstream_pvconn	lib/vconn-stream.c	/^struct pstream_pvconn$/;"	s	file:
pstream_pvconn_cast	lib/vconn-stream.c	/^pstream_pvconn_cast(struct pvconn *pvconn)$/;"	f	file:
pstream_pvconn_class	lib/vconn-stream.c	/^static struct pvconn_class pstream_pvconn_class = {$/;"	v	typeref:struct:pvconn_class	file:
pstream_pvconn_class	lib/vconn-stream.c	/^static struct pvconn_class pstream_pvconn_class;$/;"	v	typeref:struct:pvconn_class	file:
pstream_wait	lib/vconn-stream.c	/^pstream_wait(struct pvconn *pvconn)$/;"	f	file:
ptcp_accept	lib/vconn-tcp.c	/^ptcp_accept(int fd, const struct sockaddr *sa, size_t sa_len,$/;"	f	file:
ptcp_open	lib/vconn-tcp.c	/^ptcp_open(const char *name, char *suffix, struct pvconn **pvconnp)$/;"	f	file:
ptcp_pvconn_class	lib/vconn-tcp.c	/^struct pvconn_class ptcp_pvconn_class = {$/;"	v	typeref:struct:pvconn_class
pull_arp	lib/flow.c	/^pull_arp(struct ofpbuf *packet)$/;"	f	file:
pull_eth	lib/flow.c	/^pull_eth(struct ofpbuf *packet) $/;"	f	file:
pull_icmp	lib/flow.c	/^pull_icmp(struct ofpbuf *packet) $/;"	f	file:
pull_ip	lib/flow.c	/^pull_ip(struct ofpbuf *packet)$/;"	f	file:
pull_tcp	lib/flow.c	/^pull_tcp(struct ofpbuf *packet) $/;"	f	file:
pull_udp	lib/flow.c	/^pull_udp(struct ofpbuf *packet) $/;"	f	file:
pull_vlan	lib/flow.c	/^pull_vlan(struct ofpbuf *packet)$/;"	f	file:
punix_accept	lib/vconn-unix.c	/^punix_accept(int fd, const struct sockaddr *sa, size_t sa_len,$/;"	f	file:
punix_open	lib/vconn-unix.c	/^punix_open(const char *name UNUSED, char *suffix, struct pvconn **pvconnp)$/;"	f	file:
punix_pvconn_class	lib/vconn-unix.c	/^struct pvconn_class punix_pvconn_class = {$/;"	v	typeref:struct:pvconn_class
push_mpls	udatapath/dp_actions.c	/^push_mpls(struct packet *pkt, struct ofl_action_push *act) {$/;"	f	file:
push_pbb	udatapath/dp_actions.c	/^push_pbb(struct packet *pkt, struct ofl_action_push *act) {$/;"	f	file:
push_vlan	udatapath/dp_actions.c	/^push_vlan(struct packet *pkt, struct ofl_action_push *act) {$/;"	f	file:
put_duplexes	secchan/port-watcher.c	/^put_duplexes(struct ds *ds, const char *name, uint32_t features,$/;"	f	file:
put_duration	lib/dhcp.c	/^put_duration(struct ds *ds, unsigned int duration)$/;"	f	file:
put_features	secchan/port-watcher.c	/^put_features(struct ds *ds, const char *name, uint32_t features)$/;"	f	file:
put_openflow	lib/ofp.c	/^put_openflow(size_t openflow_len, uint8_t type, struct ofpbuf *buffer)$/;"	f
put_openflow_xid	lib/ofp.c	/^put_openflow_xid(size_t openflow_len, uint8_t type, uint32_t xid,$/;"	f
put_option	lib/dhcp.c	/^put_option(struct ofpbuf *b, uint8_t code, void *data, size_t n)$/;"	f	file:
put_option_chunk	lib/dhcp.c	/^put_option_chunk(struct ofpbuf *b, uint8_t code, void *data, size_t n)$/;"	f	file:
put_unaligned_u16	lib/unaligned.h	/^static inline void put_unaligned_u16(uint16_t *p_, uint16_t x_)$/;"	f
put_unaligned_u32	lib/unaligned.h	/^static inline void put_unaligned_u32(uint32_t *p_, uint32_t x_)$/;"	f
put_unaligned_u64	lib/unaligned.h	/^static inline void put_unaligned_u64(uint64_t *p_, uint64_t x_)$/;"	f
pvconn	lib/vconn-provider.h	/^struct pvconn {$/;"	s
pvconn	lib/vconn-ssl.c	/^    struct pvconn pvconn;$/;"	m	struct:pssl_pvconn	typeref:struct:pssl_pvconn::pvconn	file:
pvconn	lib/vconn-stream.c	/^    struct pvconn pvconn;$/;"	m	struct:pstream_pvconn	typeref:struct:pstream_pvconn::pvconn	file:
pvconn_accept	lib/vconn.c	/^pvconn_accept(struct pvconn *pvconn, int min_version, struct vconn **new_vconn)$/;"	f
pvconn_assert_class	lib/vconn-provider.h	/^static inline void pvconn_assert_class(const struct pvconn *pvconn,$/;"	f
pvconn_class	lib/vconn-provider.h	/^struct pvconn_class {$/;"	s
pvconn_classes	lib/vconn.c	/^static struct pvconn_class *pvconn_classes[] = {$/;"	v	typeref:struct:pvconn_class	file:
pvconn_close	lib/vconn.c	/^pvconn_close(struct pvconn *pvconn)$/;"	f
pvconn_init	lib/vconn.c	/^pvconn_init(struct pvconn *pvconn, struct pvconn_class *class,$/;"	f
pvconn_open	lib/vconn.c	/^pvconn_open(const char *name, struct pvconn **pvconnp)$/;"	f
pvconn_wait	lib/vconn.c	/^pvconn_wait(struct pvconn *pvconn)$/;"	f
pvo_len	include/openflow/private-ext.h	/^	uint16_t pvo_len;	\/* length of value (octet) *\/$/;"	m	struct:private_vxopt
pvo_type	include/openflow/private-ext.h	/^	uint16_t pvo_type;	\/* type of vendor extension option *\/$/;"	m	struct:private_vxopt
pw	secchan/stp-secchan.c	/^    struct port_watcher *pw;$/;"	m	struct:stp_data	typeref:struct:stp_data::port_watcher	file:
qtag_prefix	lib/packets.h	/^struct qtag_prefix {$/;"	s
query_datapath	lib/dpif.c	/^query_datapath(int *dp_idx, int *multicast_group, const char *dp_name)$/;"	f	file:
question_connectivity	lib/rconn.c	/^question_connectivity(struct rconn *rc) $/;"	f	file:
questionable_connectivity	lib/rconn.c	/^    bool questionable_connectivity;$/;"	m	struct:rconn	file:
queue	oflib-exp/ofl-exp-openflow.h	/^    struct ofl_packet_queue  *queue;$/;"	m	struct:ofl_exp_openflow_msg_queue	typeref:struct:ofl_exp_openflow_msg_queue::ofl_packet_queue
queue_advance_head	lib/queue.c	/^queue_advance_head(struct ofp_queue *q, struct ofpbuf *next)$/;"	f
queue_clear	lib/queue.c	/^queue_clear(struct ofp_queue *q)$/;"	f
queue_del	utilities/dpctl.c	/^queue_del(struct vconn *vconn, int argc UNUSED, char *argv[]) {$/;"	f	file:
queue_destroy	lib/queue.c	/^queue_destroy(struct ofp_queue *q)$/;"	f
queue_fd	lib/netdev.c	/^    int queue_fd[NETDEV_MAX_QUEUES + 1];$/;"	m	struct:netdev	file:
queue_get_config	utilities/dpctl.c	/^queue_get_config(struct vconn *vconn, int argc UNUSED, char *argv[]) {$/;"	f	file:
queue_id	include/openflow/openflow.h	/^	uint32_t queue_id;                          \/* id for the specific queue. *\/$/;"	m	struct:ofp_packet_queue
queue_id	include/openflow/openflow.h	/^	uint32_t queue_id;   \/* Queue i.d *\/$/;"	m	struct:ofp_queue_stats
queue_id	include/openflow/openflow.h	/^	uint32_t queue_id; \/* All queues if OFPQ_ALL. *\/$/;"	m	struct:ofp_queue_stats_request
queue_id	include/openflow/openflow.h	/^	uint32_t queue_id; \/* Queue id for the packets. *\/$/;"	m	struct:ofp_action_set_queue
queue_id	oflib/ofl-actions.h	/^    uint32_t   queue_id;$/;"	m	struct:ofl_action_set_queue
queue_id	oflib/ofl-messages.h	/^    uint32_t   queue_id; \/* All queues if OFPQ_ALL. *\/$/;"	m	struct:ofl_msg_multipart_request_queue
queue_id	oflib/ofl-structs.h	/^    uint32_t   queue_id;   \/* Queue i.d *\/$/;"	m	struct:ofl_queue_stats
queue_id	oflib/ofl-structs.h	/^    uint32_t   queue_id; \/* id for the specific queue. *\/$/;"	m	struct:ofl_packet_queue
queue_init	lib/queue.c	/^queue_init(struct ofp_queue *q)$/;"	f
queue_mod	utilities/dpctl.c	/^queue_mod(struct vconn *vconn, int argc UNUSED, char *argv[]) {$/;"	f	file:
queue_names	utilities/dpctl.h	/^static struct names32 queue_names[] = {$/;"	v	typeref:struct:names32
queue_pop_head	lib/queue.c	/^queue_pop_head(struct ofp_queue *q)$/;"	f
queue_push_tail	lib/queue.c	/^queue_push_tail(struct ofp_queue *q, struct ofpbuf *b)$/;"	f
queue_tx	secchan/in-band.c	/^queue_tx(struct rconn *rc, struct in_band_data *in_band, struct ofpbuf *b)$/;"	f	file:
queues	include/openflow/openflow.h	/^	struct ofp_packet_queue queues[0]; \/* List of configured queues. *\/$/;"	m	struct:ofp_queue_get_config_reply	typeref:struct:ofp_queue_get_config_reply::ofp_packet_queue
queues	oflib/ofl-messages.h	/^    struct ofl_packet_queue **queues; \/* List of configured queues. *\/$/;"	m	struct:ofl_msg_queue_get_config_reply	typeref:struct:ofl_msg_queue_get_config_reply::ofl_packet_queue
queues	secchan/ratelimit.c	/^    struct ofp_queue queues[65535]; \/* TODO Zoltan: was OFPP_MAX, but it was 16 bit long in 1.0 *\/$/;"	m	struct:rate_limiter	typeref:struct:rate_limiter::ofp_queue	file:
queues	udatapath/dp_ports.h	/^    struct sw_queue queues[NETDEV_MAX_QUEUES];$/;"	m	struct:sw_port	typeref:struct:sw_port::sw_queue
queues_num	oflib/ofl-messages.h	/^    size_t                    queues_num;$/;"	m	struct:ofl_msg_queue_get_config_reply
race_mpls_label	udatapath/dp_exp_bme.c	/^race_mpls_label(struct packet *pkt, $/;"	f	file:
random_bytes	lib/random.c	/^random_bytes(void *p_, size_t n)$/;"	f
random_init	lib/random.c	/^random_init(void)$/;"	f
random_range	lib/random.c	/^random_range(int max) $/;"	f
random_uint16	lib/random.c	/^random_uint16(void)$/;"	f
random_uint32	lib/random.c	/^random_uint32(void)$/;"	f
random_uint8	lib/random.c	/^random_uint8(void)$/;"	f
rate	include/openflow/openflow.h	/^	uint16_t rate;                            \/* In 1\/10 of a percent; >1000 -> disabled. *\/$/;"	m	struct:ofp_queue_prop_max_rate
rate	include/openflow/openflow.h	/^	uint16_t rate;                            \/* In 1\/10 of a percent; >1000 -> disabled. *\/$/;"	m	struct:ofp_queue_prop_min_rate
rate	include/openflow/openflow.h	/^    uint32_t rate; \/* Rate for dropping packets. *\/$/;"	m	struct:ofp_meter_band_drop
rate	include/openflow/openflow.h	/^    uint32_t rate; \/* Rate for remarking packets. *\/$/;"	m	struct:ofp_meter_band_dscp_remark
rate	include/openflow/openflow.h	/^    uint32_t rate; \/* Rate for this band. *\/$/;"	m	struct:ofp_meter_band_experimenter
rate	include/openflow/openflow.h	/^    uint32_t rate; \/* Rate for this band. *\/$/;"	m	struct:ofp_meter_band_header
rate	lib/vlog.h	/^    unsigned int rate;          \/* Tokens per second. *\/$/;"	m	struct:vlog_rate_limit
rate	oflib/ofl-structs.h	/^    uint16_t   rate; \/* In 1\/10 of a percent; >1000 -> disabled. *\/$/;"	m	struct:ofl_queue_prop_max_rate
rate	oflib/ofl-structs.h	/^    uint16_t   rate; \/* In 1\/10 of a percent; >1000 -> disabled. *\/$/;"	m	struct:ofl_queue_prop_min_rate
rate	oflib/ofl-structs.h	/^    uint32_t rate; \/* Rate for dropping packets. *\/$/;"	m	struct:ofl_meter_band_drop
rate	oflib/ofl-structs.h	/^    uint32_t rate; \/* Rate for remarking packets. *\/$/;"	m	struct:ofl_meter_band_dscp_remark
rate	oflib/ofl-structs.h	/^    uint32_t rate; \/* Rate for this band. *\/$/;"	m	struct:ofl_meter_band_experimenter
rate	oflib/ofl-structs.h	/^    uint32_t rate; \/* Rate for this band. *\/$/;"	m	struct:ofl_meter_band_header
rate_limit	secchan/secchan.h	/^    int rate_limit;           \/* Tokens added to bucket per second. *\/$/;"	m	struct:settings
rate_limit_hook_class	secchan/ratelimit.c	/^static struct hook_class rate_limit_hook_class = {$/;"	v	typeref:struct:hook_class	file:
rate_limit_local_packet_cb	secchan/ratelimit.c	/^rate_limit_local_packet_cb(struct relay *r, void *rl_)$/;"	f	file:
rate_limit_periodic_cb	secchan/ratelimit.c	/^rate_limit_periodic_cb(void *rl_)$/;"	f	file:
rate_limit_start	secchan/ratelimit.c	/^rate_limit_start(struct secchan *secchan, const struct settings *s,$/;"	f
rate_limit_status_cb	secchan/ratelimit.c	/^rate_limit_status_cb(struct status_reply *sr, void *rl_)$/;"	f	file:
rate_limit_wait_cb	secchan/ratelimit.c	/^rate_limit_wait_cb(void *rl_)$/;"	f	file:
rate_limiter	secchan/ratelimit.c	/^struct rate_limiter {$/;"	s	file:
rconn	lib/rconn.c	/^struct rconn {$/;"	s	file:
rconn	secchan/secchan.h	/^    struct rconn *rconn;$/;"	m	struct:half	typeref:struct:half::rconn
rconn	udatapath/datapath.h	/^    struct rconn *rconn;$/;"	m	struct:remote	typeref:struct:remote::rconn
rconn_add_monitor	lib/rconn.c	/^rconn_add_monitor(struct rconn *rc, struct vconn *vconn)$/;"	f
rconn_aux	udatapath/datapath.h	/^    struct rconn *rconn_aux;$/;"	m	struct:remote	typeref:struct:remote::rconn
rconn_connect	lib/rconn.c	/^rconn_connect(struct rconn *rc, const char *name)$/;"	f
rconn_connect_unreliably	lib/rconn.c	/^rconn_connect_unreliably(struct rconn *rc,$/;"	f
rconn_create	lib/rconn.c	/^rconn_create(int probe_interval, int max_backoff)$/;"	f
rconn_destroy	lib/rconn.c	/^rconn_destroy(struct rconn *rc)$/;"	f
rconn_disconnect	lib/rconn.c	/^rconn_disconnect(struct rconn *rc)$/;"	f
rconn_failure_duration	lib/rconn.c	/^rconn_failure_duration(const struct rconn *rconn)$/;"	f
rconn_get_attempted_connections	lib/rconn.c	/^rconn_get_attempted_connections(const struct rconn *rc)$/;"	f
rconn_get_backoff	lib/rconn.c	/^rconn_get_backoff(const struct rconn *rc)$/;"	f
rconn_get_connection_seqno	lib/rconn.c	/^rconn_get_connection_seqno(const struct rconn *rc)$/;"	f
rconn_get_creation_time	lib/rconn.c	/^rconn_get_creation_time(const struct rconn *rc)$/;"	f
rconn_get_ip	lib/rconn.c	/^rconn_get_ip(const struct rconn *rconn) $/;"	f
rconn_get_last_connection	lib/rconn.c	/^rconn_get_last_connection(const struct rconn *rc)$/;"	f
rconn_get_name	lib/rconn.c	/^rconn_get_name(const struct rconn *rc)$/;"	f
rconn_get_state	lib/rconn.c	/^rconn_get_state(const struct rconn *rc)$/;"	f
rconn_get_state_elapsed	lib/rconn.c	/^rconn_get_state_elapsed(const struct rconn *rc)$/;"	f
rconn_get_successful_connections	lib/rconn.c	/^rconn_get_successful_connections(const struct rconn *rc)$/;"	f
rconn_get_total_time_connected	lib/rconn.c	/^rconn_get_total_time_connected(const struct rconn *rc)$/;"	f
rconn_is_alive	lib/rconn.c	/^rconn_is_alive(const struct rconn *rconn)$/;"	f
rconn_is_connected	lib/rconn.c	/^rconn_is_connected(const struct rconn *rconn)$/;"	f
rconn_is_connectivity_questionable	lib/rconn.c	/^rconn_is_connectivity_questionable(struct rconn *rconn)$/;"	f
rconn_new	lib/rconn.c	/^rconn_new(const char *name, int inactivity_probe_interval, int max_backoff)$/;"	f
rconn_new_from_vconn	lib/rconn.c	/^rconn_new_from_vconn(const char *name, struct vconn *vconn) $/;"	f
rconn_packets_received	lib/rconn.c	/^rconn_packets_received(const struct rconn *rc)$/;"	f
rconn_packets_sent	lib/rconn.c	/^rconn_packets_sent(const struct rconn *rc)$/;"	f
rconn_recv	lib/rconn.c	/^rconn_recv(struct rconn *rc)$/;"	f
rconn_recv_wait	lib/rconn.c	/^rconn_recv_wait(struct rconn *rc)$/;"	f
rconn_run	lib/rconn.c	/^rconn_run(struct rconn *rc)$/;"	f
rconn_run_wait	lib/rconn.c	/^rconn_run_wait(struct rconn *rc)$/;"	f
rconn_send	lib/rconn.c	/^rconn_send(struct rconn *rc, struct ofpbuf *b, int *n_queued)$/;"	f
rconn_send_with_limit	lib/rconn.c	/^rconn_send_with_limit(struct rconn *rc, struct ofpbuf *b,$/;"	f
rconn_status_cb	secchan/status.c	/^rconn_status_cb(struct status_reply *sr, void *rconn_)$/;"	f
read_cert_file	lib/vconn-ssl.c	/^read_cert_file(const char *file_name, X509 ***certs, size_t *n_certs)$/;"	f	file:
read_pidfile	lib/daemon.c	/^read_pidfile(const char *pidfile)$/;"	f
read_vars	debian/commands/reconfigure	/^sub read_vars {$/;"	s
read_vars	debian/ofp-switch-setup	/^sub read_vars {$/;"	s
realloc_hook_func	lib/leak-checker.c	/^    realloc_hook_type *realloc_hook_func;$/;"	m	struct:hooks	file:
realloc_hook_type	lib/leak-checker.c	/^typedef void *realloc_hook_type(void *, size_t, const void *);$/;"	t	file:
reason	include/openflow/openflow.h	/^	uint8_t reason;         \/* One of OFPRR_*. *\/$/;"	m	struct:ofp_flow_removed
reason	include/openflow/openflow.h	/^	uint8_t reason;         \/* Reason packet is being sent (one of OFPR_*) *\/$/;"	m	struct:ofp_packet_in
reason	include/openflow/openflow.h	/^	uint8_t reason; \/* One of OFPPR_*. *\/$/;"	m	struct:ofp_port_status
reason	oflib/ofl-messages.h	/^    enum ofp_flow_removed_reason   reason;   \/* One of OFPRR_*. *\/$/;"	m	struct:ofl_msg_flow_removed	typeref:enum:ofl_msg_flow_removed::ofp_flow_removed_reason
reason	oflib/ofl-messages.h	/^    enum ofp_packet_in_reason   reason;      \/* Reason packet is being sent (one of OFPR_*) *\/$/;"	m	struct:ofl_msg_packet_in	typeref:enum:ofl_msg_packet_in::ofp_packet_in_reason
reason	oflib/ofl-messages.h	/^    enum ofp_port_reason   reason; \/* One of OFPPR_*. *\/$/;"	m	struct:ofl_msg_port_status	typeref:enum:ofl_msg_port_status::ofp_port_reason
reason	udatapath/dp_ports.h	/^    int reason;$/;"	m	struct:hw_pkt_q_entry
rebinding_timeout	lib/dhcp-client.c	/^    unsigned int rebinding_timeout;$/;"	m	struct:dhclient	file:
recalc_csum16	lib/csum.c	/^recalc_csum16(uint16_t old_csum, uint16_t old_u16, uint16_t new_u16)$/;"	f
recalc_csum32	lib/csum.c	/^recalc_csum32(uint16_t old_csum, uint32_t old_u32, uint32_t new_u32)$/;"	f
receive_ack	lib/dhcp-client.c	/^receive_ack(struct dhclient *cli)$/;"	f	file:
received	lib/dhcp-client.c	/^    int received;$/;"	m	struct:dhclient	file:
reconnect	lib/rconn.c	/^reconnect(struct rconn *rc)$/;"	f	file:
reconnectable	lib/vconn-provider.h	/^    bool reconnectable;$/;"	m	struct:vconn
recv	lib/vconn-provider.h	/^    int (*recv)(struct vconn *vconn, struct ofpbuf **msgp);$/;"	m	struct:vconn_class
recv_with_creds	lib/vlog-socket.c	/^recv_with_creds(const struct vlog_server *server,$/;"	f	file:
ref_count	include/openflow/openflow.h	/^	uint32_t ref_count;    \/* Number of flows or groups that directly forward$/;"	m	struct:ofp_group_stats
ref_count	oflib/ofl-structs.h	/^    uint32_t   ref_count;$/;"	m	struct:ofl_group_stats
refill_bucket	secchan/ratelimit.c	/^refill_bucket(struct rate_limiter *rl)$/;"	f	file:
refill_bucket	udatapath/meter_entry.c	/^refill_bucket(struct meter_entry *entry)$/;"	f
refresh_if_ticked	lib/timeval.c	/^refresh_if_ticked(void)$/;"	f	file:
register_fault_handlers	lib/fault.c	/^register_fault_handlers(void)$/;"	f
relay	secchan/secchan.h	/^struct relay {$/;"	s
relay_accept	secchan/secchan.c	/^relay_accept(const struct settings *s, struct pvconn *pvconn)$/;"	f	file:
relay_create	secchan/secchan.c	/^relay_create(struct rconn *async, struct rconn *local, struct rconn *remote,$/;"	f	file:
relay_destroy	secchan/secchan.c	/^relay_destroy(struct relay *r)$/;"	f	file:
relay_run	secchan/secchan.c	/^relay_run(struct relay *r, struct secchan *secchan)$/;"	f	file:
relay_wait	secchan/secchan.c	/^relay_wait(struct relay *r)$/;"	f	file:
release_ifaces	utilities/ofp-discover.c	/^release_ifaces(void *aux UNUSED)$/;"	f	file:
reliable	lib/rconn.c	/^    bool reliable;$/;"	m	struct:rconn	file:
reload_server	debian/openflow-controller.init	/^reload_server() {$/;"	f
remote	udatapath/datapath.h	/^    struct remote *remote;      \/* The device that sent the message. *\/$/;"	m	struct:sender	typeref:struct:sender::remote
remote	udatapath/datapath.h	/^struct remote {$/;"	s
remote_create	udatapath/datapath.c	/^remote_create(struct datapath *dp, struct rconn *rconn, struct rconn *rconn_aux)$/;"	f	file:
remote_destroy	udatapath/datapath.c	/^remote_destroy(struct remote *r)$/;"	f	file:
remote_packet_cb	secchan/secchan.h	/^    bool (*remote_packet_cb)(struct relay *, void *aux);$/;"	m	struct:hook_class
remote_rconn	secchan/failover.c	/^	struct rconn *remote_rconn;$/;"	m	struct:failover_context	typeref:struct:failover_context::rconn	file:
remote_rconn	secchan/port-watcher.c	/^    struct rconn *remote_rconn;$/;"	m	struct:port_watcher	typeref:struct:port_watcher::rconn	file:
remote_rconn	secchan/ratelimit.c	/^    struct rconn *remote_rconn;$/;"	m	struct:rate_limiter	typeref:struct:rate_limiter::rconn	file:
remote_rconn	secchan/stp-secchan.c	/^    struct rconn *remote_rconn;$/;"	m	struct:stp_data	typeref:struct:stp_data::rconn	file:
remote_rconn_run	udatapath/datapath.c	/^remote_rconn_run(struct datapath *dp, struct remote *r, uint8_t conn_id) {$/;"	f	file:
remote_run	udatapath/datapath.c	/^remote_run(struct datapath *dp, struct remote *r)$/;"	f	file:
remote_wait	udatapath/datapath.c	/^remote_wait(struct remote *r)$/;"	f	file:
remotes	udatapath/datapath.h	/^    struct list remotes;        \/* Remote connections. *\/$/;"	m	struct:datapath	typeref:struct:datapath::list
remove_at	udatapath/flow_entry.h	/^    uint64_t                 remove_at; \/* time the entry should be removed at$/;"	m	struct:flow_entry
remove_from_pending	udatapath/dp_exp_bme.c	/^remove_from_pending(struct pending_flows *pl, struct pending_pkt* elem)$/;"	f	file:
renewing_timeout	lib/dhcp-client.c	/^    unsigned int renewing_timeout;$/;"	m	struct:dhclient	file:
reply_free	oflib/ofl.h	/^    int     (*reply_free)      (struct ofl_msg_multipart_reply_header *msg);$/;"	m	struct:ofl_exp_stats
reply_pack	oflib/ofl.h	/^    int     (*reply_pack)      (struct ofl_msg_multipart_reply_header *msg, uint8_t **buf, size_t *buf_len);$/;"	m	struct:ofl_exp_stats
reply_to_string	oflib/ofl.h	/^    char   *(*reply_to_string) (struct ofl_msg_multipart_reply_header *msg);$/;"	m	struct:ofl_exp_stats
reply_unpack	oflib/ofl.h	/^    ofl_err (*reply_unpack)    (struct ofp_multipart_reply *os, size_t *len, struct ofl_msg_multipart_reply_header **msg);$/;"	m	struct:ofl_exp_stats
req_free	oflib/ofl.h	/^    int     (*req_free)        (struct ofl_msg_multipart_request_header *msg);$/;"	m	struct:ofl_exp_stats
req_pack	oflib/ofl.h	/^    int     (*req_pack)        (struct ofl_msg_multipart_request_header *msg, uint8_t **buf, size_t *buf_len);$/;"	m	struct:ofl_exp_stats
req_to_string	oflib/ofl.h	/^    char   *(*req_to_string)   (struct ofl_msg_multipart_request_header *msg);$/;"	m	struct:ofl_exp_stats
req_unpack	oflib/ofl.h	/^    ofl_err (*req_unpack)      (struct ofp_multipart_request *os, size_t *len, struct ofl_msg_multipart_request_header **msg);$/;"	m	struct:ofl_exp_stats
request	secchan/status.c	/^    struct ds request;$/;"	m	struct:status_reply	typeref:struct:status_reply::ds	file:
reserved	include/openflow/openflow.h	/^	uint32_t reserved;$/;"	m	struct:ofp_switch_features
reserved	lib/netlink-protocol.h	/^    uint16_t reserved;$/;"	m	struct:genlmsghdr
reserved	lib/packets.h	/^    uint32_t reserved;$/;"	m	struct:ipv6_nd_header
reserved	oflib/ofl-messages.h	/^    uint32_t          reserved;$/;"	m	struct:ofl_msg_features_reply
reset_hooks	lib/leak-checker.c	/^reset_hooks(void)$/;"	f	file:
resize	lib/hmap.c	/^resize(struct hmap *hmap, size_t new_mask)$/;"	f	file:
resolve_prefix	utilities/ofp-pki.in	/^resolve_prefix() {$/;"	f
restore_all_flags	lib/netdev.c	/^restore_all_flags(void *aux UNUSED)$/;"	f	file:
restore_flags	lib/netdev.c	/^restore_flags(struct netdev *netdev)$/;"	f	file:
retransmit	lib/dhcp-client.c	/^    unsigned int retransmit, delay; \/* Used by send_reliably(). *\/$/;"	m	struct:dhclient	file:
rl	lib/dhcp-client.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	lib/dhcp.c	/^struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 600);$/;"	v	typeref:struct:vlog_rate_limit
rl	lib/dpif.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(5, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	lib/netdev.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(5, 20);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	lib/netlink.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 600);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	lib/vconn-ssl.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(10, 25);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	lib/vconn-stream.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(10, 25);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	lib/vconn.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(600, 600);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	oflib/oxm-match.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(1, 5);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	secchan/discovery.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	secchan/in-band.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	secchan/secchan.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	secchan/stp-secchan.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	udatapath/action_set.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	udatapath/datapath.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	udatapath/dp_actions.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	udatapath/dp_buffers.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	udatapath/dp_control.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	udatapath/dp_exp.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	udatapath/dp_exp_bme.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	udatapath/dp_ports.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	udatapath/flow_entry.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	udatapath/flow_table.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	udatapath/group_entry.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	udatapath/group_table.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	udatapath/match_std.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	udatapath/meter_entry.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	udatapath/meter_table.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
rl	udatapath/pipeline.c	/^static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(60, 60);$/;"	v	typeref:struct:vlog_rate_limit	file:
ro_c	Makefile	/^ro_c = echo '\/* -*- mode: c; buffer-read-only: t -*- *\/'$/;"	m
role	include/openflow/nicira-ext.h	/^    uint32_t role;              \/* One of NX_ROLE_*. *\/$/;"	m	struct:nx_role_request
role	include/openflow/openflow.h	/^	uint32_t role;            \/* One of NX_ROLE_*. *\/$/;"	m	struct:ofp_role_request
role	oflib-exp/ofl-exp-nicira.h	/^    uint32_t                  role;$/;"	m	struct:ofl_exp_nicira_msg_role
role	oflib/ofl-messages.h	/^	uint32_t role;            \/* One of OFPCR_ROLE_*. *\/$/;"	m	struct:ofl_msg_role_request
role	udatapath/datapath.h	/^    uint32_t role; \/*OpenFlow controller role.*\/$/;"	m	struct:remote
root_id	lib/stp.c	/^    uint64_t root_id;              \/* 8.5.1.1: Bridge believed to be root. *\/$/;"	m	struct:stp_config_bpdu	file:
root_path_cost	lib/stp.c	/^    uint32_t root_path_cost;       \/* 8.5.1.2: Cost of path to root. *\/$/;"	m	struct:stp_config_bpdu	file:
root_path_cost	lib/stp.c	/^    unsigned int root_path_cost;    \/* 8.5.3.2: Cost of path to root. *\/$/;"	m	struct:stp	file:
root_port	lib/stp.c	/^    struct stp_port *root_port;     \/* 8.5.3.3: Lowest cost port to root. *\/$/;"	m	struct:stp	typeref:struct:stp::stp_port	file:
router	lib/dhcp-client.c	/^    uint32_t ipaddr, netmask, router;$/;"	m	struct:dhclient	file:
rq_forward_delay	lib/stp.c	/^    int rq_forward_delay;           \/* User-requested forward delay, in ms. *\/$/;"	m	struct:stp	file:
rq_hello_time	lib/stp.c	/^    int rq_hello_time;              \/* User-requested hello time, in ms. *\/$/;"	m	struct:stp	file:
rq_max_age	lib/stp.c	/^    int rq_max_age;                 \/* User-requested max age, in ms. *\/$/;"	m	struct:stp	file:
rtnlgrp_link_policy	lib/netdev.c	/^static const struct nl_policy rtnlgrp_link_policy[] = {$/;"	v	typeref:struct:nl_policy	file:
run_ACTIVE	lib/rconn.c	/^run_ACTIVE(struct rconn *rc)$/;"	f	file:
run_BACKOFF	lib/rconn.c	/^run_BACKOFF(struct rconn *rc)$/;"	f	file:
run_CONNECTING	lib/rconn.c	/^run_CONNECTING(struct rconn *rc)$/;"	f	file:
run_IDLE	lib/rconn.c	/^run_IDLE(struct rconn *rc)$/;"	f	file:
run_VOID	lib/rconn.c	/^run_VOID(struct rconn *rc UNUSED)$/;"	f	file:
run_at_exit	lib/fatal-signal.c	/^    bool run_at_exit;$/;"	m	struct:hook	file:
run_cmd	debian/ofp-switch-setup	/^sub run_cmd {$/;"	s
running	debian/openflow-controller.init	/^running() {$/;"	f
running	debian/openflow-switch.init	/^running()$/;"	f
running_cb	lib/poll-loop.c	/^static struct poll_waiter *running_cb;$/;"	v	typeref:struct:poll_waiter	file:
running_pid	debian/openflow-controller.init	/^running_pid() {$/;"	f
running_pid	debian/openflow-switch.init	/^running_pid()$/;"	f
rx_bytes	include/openflow/openflow.h	/^	uint64_t rx_bytes;     \/* Number of received bytes. *\/$/;"	m	struct:ofp_port_stats
rx_bytes	oflib/ofl-structs.h	/^    uint64_t   rx_bytes;     \/* Number of received bytes. *\/$/;"	m	struct:ofl_port_stats
rx_crc_err	include/openflow/openflow.h	/^	uint64_t rx_crc_err;   \/* Number of CRC errors. *\/$/;"	m	struct:ofp_port_stats
rx_crc_err	oflib/ofl-structs.h	/^    uint64_t   rx_crc_err;   \/* Number of CRC errors. *\/$/;"	m	struct:ofl_port_stats
rx_dropped	include/openflow/openflow.h	/^	uint64_t rx_dropped;   \/* Number of packets dropped by RX. *\/$/;"	m	struct:ofp_port_stats
rx_dropped	oflib/ofl-structs.h	/^    uint64_t   rx_dropped;   \/* Number of packets dropped by RX. *\/$/;"	m	struct:ofl_port_stats
rx_errors	include/openflow/openflow.h	/^	uint64_t rx_errors;    \/* Number of receive errors. This is a super-set$/;"	m	struct:ofp_port_stats
rx_errors	oflib/ofl-structs.h	/^    uint64_t   rx_errors;    \/* Number of receive errors. This is a super-set$/;"	m	struct:ofl_port_stats
rx_frame_err	include/openflow/openflow.h	/^	uint64_t rx_frame_err; \/* Number of frame alignment errors. *\/$/;"	m	struct:ofp_port_stats
rx_frame_err	oflib/ofl-structs.h	/^    uint64_t   rx_frame_err; \/* Number of frame alignment errors. *\/$/;"	m	struct:ofl_port_stats
rx_over_err	include/openflow/openflow.h	/^	uint64_t rx_over_err;  \/* Number of packets with RX overrun. *\/$/;"	m	struct:ofp_port_stats
rx_over_err	oflib/ofl-structs.h	/^    uint64_t   rx_over_err;  \/* Number of packets with RX overrun. *\/$/;"	m	struct:ofl_port_stats
rx_packets	include/openflow/openflow.h	/^	uint64_t rx_packets;   \/* Number of received packets. *\/$/;"	m	struct:ofp_port_stats
rx_packets	oflib/ofl-structs.h	/^    uint64_t   rx_packets;   \/* Number of received packets. *\/$/;"	m	struct:ofl_port_stats
rx_want	lib/vconn-ssl.c	/^    int rx_want, tx_want;$/;"	m	struct:ssl_vconn	file:
rxbuf	lib/vconn-ssl.c	/^    struct ofpbuf *rxbuf;$/;"	m	struct:ssl_vconn	typeref:struct:ssl_vconn::ofpbuf	file:
rxbuf	lib/vconn-stream.c	/^    struct ofpbuf *rxbuf;$/;"	m	struct:stream_vconn	typeref:struct:stream_vconn::ofpbuf	file:
rxbuf	secchan/secchan.h	/^    struct ofpbuf *rxbuf;$/;"	m	struct:half	typeref:struct:half::ofpbuf
s	lib/dhcp-client.c	/^    struct ds s;$/;"	m	struct:dhclient	typeref:struct:dhclient::ds	file:
s	secchan/discovery.c	/^    const struct settings *s;$/;"	m	struct:discovery	typeref:struct:discovery::settings	file:
s	secchan/in-band.c	/^    const struct settings *s;$/;"	m	struct:in_band_data	typeref:struct:in_band_data::settings	file:
s	secchan/ratelimit.c	/^    const struct settings *s;$/;"	m	struct:rate_limiter	typeref:struct:rate_limiter::settings	file:
s	secchan/status.c	/^    const struct settings *s;$/;"	m	struct:switch_status	typeref:struct:switch_status::settings	file:
s16	lib/netdev.c	93;"	d	file:
s32	lib/netdev.c	94;"	d	file:
s64	lib/netdev.c	95;"	d	file:
s8	lib/netdev.c	92;"	d	file:
same_binding	lib/dhcp-client.c	/^same_binding(const struct dhcp_msg *old, const struct dhcp_msg *new)$/;"	f	file:
sanitize_opp	secchan/port-watcher.c	/^sanitize_opp(struct ofp_port *opp)$/;"	f	file:
sat_add	lib/sat-math.h	/^sat_add(unsigned int x, unsigned int y)$/;"	f
sat_mul	lib/sat-math.h	/^sat_mul(unsigned int x, unsigned int y)$/;"	f
sat_sub	lib/sat-math.h	/^sat_sub(unsigned int x, unsigned int y)$/;"	f
save_config	debian/commands/reconfigure	/^sub save_config {$/;"	s
save_config	debian/ofp-switch-setup	/^sub save_config {$/;"	s
save_flags	lib/netdev.c	/^    int save_flags;             \/* Initial device flags. *\/$/;"	m	struct:netdev	file:
saved_signal_mask	lib/fatal-signal.c	/^static sigset_t saved_signal_mask;$/;"	v	file:
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sctp	lib/packets.h	/^   struct sctp_header     * sctp;$/;"	m	struct:protocols_std	typeref:struct:protocols_std::sctp_header
sctp_csum	lib/packets.h	/^    uint32_t sctp_csum;$/;"	m	struct:sctp_header
sctp_dst	lib/packets.h	/^    uint16_t sctp_dst;$/;"	m	struct:sctp_header
sctp_header	lib/packets.h	/^struct sctp_header {$/;"	s
sctp_src	lib/packets.h	/^    uint16_t sctp_src;$/;"	m	struct:sctp_header
sctp_verif	lib/packets.h	/^    uint32_t sctp_verif;$/;"	m	struct:sctp_header
search_bucket	lib/mac-learning.c	/^search_bucket(struct list *bucket, const uint8_t mac[ETH_ADDR_LEN],$/;"	f	file:
search_name_array	lib/vlog.c	/^search_name_array(const char *target, const char **names, size_t n_names) $/;"	f	file:
secchan	secchan/failover.c	/^	const struct secchan *secchan;$/;"	m	struct:failover_context	typeref:struct:failover_context::secchan	file:
secchan	secchan/secchan.c	/^struct secchan {$/;"	s	file:
secchan_ofprotocol_DEPENDENCIES	Makefile	/^secchan_ofprotocol_DEPENDENCIES = lib\/libopenflow.a \\$/;"	m
secchan_ofprotocol_LDADD	Makefile	/^secchan_ofprotocol_LDADD = lib\/libopenflow.a $(FAULT_LIBS) $(SSL_LIBS)$/;"	m
secchan_ofprotocol_LDADD	secchan/automake.mk	/^secchan_ofprotocol_LDADD = lib\/libopenflow.a $(FAULT_LIBS) $(SSL_LIBS)$/;"	m
secchan_ofprotocol_OBJECTS	Makefile	/^secchan_ofprotocol_OBJECTS = $(am_secchan_ofprotocol_OBJECTS)$/;"	m
secchan_ofprotocol_SOURCES	Makefile	/^secchan_ofprotocol_SOURCES = \\$/;"	m
secchan_ofprotocol_SOURCES	secchan/automake.mk	/^secchan_ofprotocol_SOURCES = \\$/;"	m
secret	lib/mac-learning.c	/^    uint32_t secret;            \/* Secret for  *\/$/;"	m	struct:mac_learning	file:
secs	lib/dhcp-client.c	/^    uint32_t secs;$/;"	m	struct:dhclient	file:
secs	lib/dhcp.h	/^    uint16_t secs;              \/* Since client started address acquisition. *\/$/;"	m	struct:dhcp_header
secs	lib/dhcp.h	/^    uint16_t secs;              \/* Since client started address acquisition. *\/$/;"	m	struct:dhcp_msg
select_from_ff_group	udatapath/group_entry.c	/^select_from_ff_group(struct group_entry *entry) {$/;"	f	file:
select_from_select_group	udatapath/group_entry.c	/^select_from_select_group(struct group_entry *entry) {$/;"	f	file:
send	lib/vconn-provider.h	/^    int (*send)(struct vconn *vconn, struct ofpbuf *msg);$/;"	m	struct:vconn_class
send_bpdu	lib/stp.c	/^    void (*send_bpdu)(struct ofpbuf *bpdu, int port_no, void *aux);$/;"	m	struct:stp	file:
send_bpdu	secchan/stp-secchan.c	/^send_bpdu(struct ofpbuf *pkt, int port_no, void *stp_)$/;"	f	file:
send_mgmt_command	lib/dpif.c	/^send_mgmt_command(struct dpif *dp, int dp_idx, int command, const char *arg)$/;"	f	file:
send_openflow_buffer	udatapath/datapath.c	/^send_openflow_buffer(struct datapath *dp, struct ofpbuf *buffer,$/;"	f	file:
send_openflow_buffer_to_remote	udatapath/datapath.c	/^send_openflow_buffer_to_remote(struct ofpbuf *buffer, struct remote *remote) {$/;"	f	file:
send_packet_to_controller	udatapath/pipeline.c	/^send_packet_to_controller(struct pipeline *pl, struct packet *pkt, uint8_t table_id, uint8_t reason) {$/;"	f	file:
send_reliably	lib/dhcp-client.c	/^send_reliably(struct dhclient *cli,$/;"	f	file:
send_removed	udatapath/flow_entry.h	/^    bool                     send_removed; \/* true if a flow removed should be sent$/;"	m	struct:flow_entry
sender	udatapath/datapath.h	/^struct sender {$/;"	s
seq	udatapath/dp_actions.c	/^    struct list seq; \/* list for the serializer *\/$/;"	m	struct:pending_flows	typeref:struct:pending_flows::list	file:
seq	udatapath/dp_exp_bme.c	/^    struct list seq; \/* list for the serializer *\/$/;"	m	struct:pending_flows	typeref:struct:pending_flows::list	file:
seq_no_01	udatapath/dp_actions.c	/^    uint32_t seq_no_01;$/;"	m	struct:pending_pkt	file:
seq_no_01	udatapath/dp_exp_bme.c	/^    uint32_t seq_no_01;$/;"	m	struct:pending_pkt	file:
seq_no_10	udatapath/dp_actions.c	/^    uint32_t seq_no_10;$/;"	m	struct:pending_pkt	file:
seq_no_10	udatapath/dp_exp_bme.c	/^    uint32_t seq_no_10;$/;"	m	struct:pending_pkt	file:
seqno	lib/rconn.c	/^    unsigned int seqno;$/;"	m	struct:rconn	file:
serial_num	include/openflow/openflow.h	/^	char serial_num[SERIAL_NUM_LEN]; \/* Serial number. *\/$/;"	m	struct:ofp_desc
serial_num	oflib/ofl-messages.h	/^    char  *serial_num;   \/* Serial number. Max SERIAL_NUM_LEN*\/$/;"	m	struct:ofl_msg_reply_desc
serial_num	udatapath/datapath.h	/^    char  *serial_num;$/;"	m	struct:datapath
serialize	udatapath/dp_exp_bme.c	/^serialize(struct packet *pkt0, struct ofl_bme_serialize *action)$/;"	f	file:
server_ip	lib/dhcp-client.c	/^    uint32_t server_ip;$/;"	m	struct:dhclient	file:
session_type	lib/vconn-ssl.c	/^enum session_type {$/;"	g	file:
set	include/openflow/nicira-ext.h	/^    uint8_t set;                \/* Nonzero to enable, zero to disable. *\/$/;"	m	struct:nxt_tun_id_cookie
set_bit	secchan/port-watcher.c	/^set_bit(uint32_t bit, bool value, uint32_t *word)$/;"	f	file:
set_bridge_id	lib/stp.c	/^set_bridge_id(struct stp *stp, stp_identifier new_bridge_id)$/;"	f	file:
set_config	utilities/dpctl.c	/^set_config(struct vconn *vconn, int argc UNUSED, char *argv[]) {$/;"	f	file:
set_desc	utilities/dpctl.c	/^set_desc(struct vconn *vconn, int argc UNUSED, char *argv[]) {$/;"	f	file:
set_detach	lib/daemon.c	/^set_detach(void)$/;"	f
set_facility_level	lib/vlog.c	/^set_facility_level(enum vlog_facility facility, enum vlog_module module,$/;"	f	file:
set_field	udatapath/dp_actions.c	/^set_field(struct packet *pkt, struct ofl_action_set_field *act )$/;"	f	file:
set_flags	lib/netdev.c	/^set_flags(const char *netdev_name, int flags)$/;"	f	file:
set_hooks	lib/leak-checker.c	/^set_hooks(const struct hooks *hooks)$/;"	f	file:
set_mpls_label	udatapath/dp_actions.c	/^set_mpls_label(struct packet *pkt, struct ofl_action_set_mpls_label *act) {$/;"	f	file:
set_mpls_label	udatapath/dp_exp_bme.c	/^set_mpls_label(struct packet *pkt, uint32_t label)$/;"	f	file:
set_mpls_label_from_counter	udatapath/dp_actions.c	/^set_mpls_label_from_counter(struct packet *pkt)$/;"	f	file:
set_mpls_label_from_counter	udatapath/dp_exp_bme.c	/^set_mpls_label_from_counter(struct packet *pkt, $/;"	f	file:
set_mpls_ttl	udatapath/dp_actions.c	/^set_mpls_ttl(struct packet *pkt, struct ofl_action_mpls_ttl *act) {$/;"	f	file:
set_mpls_ttl	udatapath/dp_exp_bme.c	/^set_mpls_ttl(struct packet *pkt, uint32_t ttl)$/;"	f	file:
set_nonblocking	lib/socket-util.c	/^set_nonblocking(int fd)$/;"	f
set_nw_ttl	udatapath/dp_actions.c	/^set_nw_ttl(struct packet *pkt, struct ofl_action_set_nw_ttl *act) {$/;"	f	file:
set_parity_mpls_label	udatapath/dp_actions.c	/^set_parity_mpls_label(struct packet *pkt) {$/;"	f	file:
set_pidfile	lib/daemon.c	/^set_pidfile(const char *name)$/;"	f
set_program_name	lib/util.c	/^void set_program_name(const char *argv0)$/;"	f
set_queue	udatapath/dp_actions.c	/^set_queue(struct packet *pkt UNUSED, struct ofl_action_set_queue *act) {$/;"	f	file:
set_socket_priority	lib/socket-util.c	/^set_socket_priority(int fd, int priority)$/;"	f
settings	secchan/failover.c	/^	const struct settings *settings;$/;"	m	struct:failover_context	typeref:struct:failover_context::settings	file:
settings	secchan/secchan.h	/^struct settings {$/;"	s
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
shash	lib/shash.h	/^struct shash {$/;"	s
shash_add	lib/shash.c	/^shash_add(struct shash *sh, const char *name, void *data)$/;"	f
shash_clear	lib/shash.c	/^shash_clear(struct shash *sh)$/;"	f
shash_delete	lib/shash.c	/^shash_delete(struct shash *sh, struct shash_node *node)$/;"	f
shash_destroy	lib/shash.c	/^shash_destroy(struct shash *sh)$/;"	f
shash_find	lib/shash.c	/^shash_find(const struct shash *sh, const char *name)$/;"	f
shash_find_data	lib/shash.c	/^shash_find_data(const struct shash *sh, const char *name)$/;"	f
shash_init	lib/shash.c	/^shash_init(struct shash *sh)$/;"	f
shash_node	lib/shash.h	/^struct shash_node {$/;"	s
shell_assign	debian/commands/reconfigure	/^sub shell_assign {$/;"	s
shell_assign	debian/ofp-switch-setup	/^sub shell_assign {$/;"	s
shell_escape	debian/commands/reconfigure	/^sub shell_escape {$/;"	s
shell_escape	debian/ofp-switch-setup	/^sub shell_escape {$/;"	s
siaddr	lib/dhcp.h	/^    uint32_t siaddr;            \/* Next server IP address. *\/$/;"	m	struct:dhcp_header
siaddr	lib/dhcp.h	/^    uint32_t siaddr;            \/* Next server IP address. *\/$/;"	m	struct:dhcp_msg
sig_nr	utilities/ofp-kill.c	/^static int sig_nr = SIGTERM;$/;"	v	file:
sigalrm_handler	lib/timeval.c	/^sigalrm_handler(int sig_nr)$/;"	f	file:
sigchld_handler	lib/process.c	/^sigchld_handler(int signr UNUSED)$/;"	f	file:
sigfigs	lib/pcap.c	/^    uint32_t sigfigs;        \/* accuracy of timestamps *\/$/;"	m	struct:pcap_hdr	file:
sigint_handler	nbee_link/nbee_link.cpp	/^sigint_handler(int sig_nr)$/;"	f	file:
sign_request	utilities/ofp-pki.in	/^sign_request() {$/;"	f
signal	lib/signals.c	/^struct signal {$/;"	s	file:
signal_handler	lib/signals.c	/^signal_handler(int signr)$/;"	f	file:
signal_init	lib/signals.c	/^signal_init(void)$/;"	f
signal_poll	lib/signals.c	/^signal_poll(struct signal *s)$/;"	f
signal_register	lib/signals.c	/^signal_register(int signr)$/;"	f
signal_wait	lib/signals.c	/^signal_wait(struct signal *s)$/;"	f
signaled	lib/signals.c	/^static volatile sig_atomic_t signaled[N_SIGNALS];$/;"	v	file:
signr	lib/signals.c	/^    int signr;$/;"	m	struct:signal	file:
size	lib/dhcp.c	/^    size_t size;                \/* Number of bytes per argument. *\/$/;"	m	struct:arg_type	file:
size	lib/ofpbuf.h	/^    size_t size;                \/* Number of bytes in use. *\/$/;"	m	struct:ofpbuf
sname	lib/dhcp.h	/^    char sname[64];             \/* Optional server host name. *\/$/;"	m	struct:dhcp_header
snap	lib/packets.h	/^    struct snap_header snap;$/;"	m	struct:llc_snap_header	typeref:struct:llc_snap_header::snap_header
snap_header	lib/packets.h	/^struct snap_header {$/;"	s
snap_org	lib/packets.h	/^    uint8_t snap_org[3];$/;"	m	struct:snap_header
snap_type	lib/packets.h	/^    uint16_t snap_type;$/;"	m	struct:snap_header
snaplen	lib/pcap.c	/^    uint32_t snaplen;        \/* max length of captured packets *\/$/;"	m	struct:pcap_hdr	file:
sock	lib/dpif.h	/^    struct nl_sock *sock;$/;"	m	struct:dpif	typeref:struct:dpif::nl_sock
sock	lib/netdev.c	/^    struct nl_sock *sock;$/;"	m	struct:netdev_monitor	typeref:struct:netdev_monitor::nl_sock	file:
sockaddr_nl	lib/netlink-protocol.h	/^struct sockaddr_nl {$/;"	s
speed	lib/netdev.c	/^    int speed;$/;"	m	struct:netdev	file:
srcdir	Makefile	/^srcdir = .$/;"	m
ssl	lib/vconn-ssl.c	/^    SSL *ssl;$/;"	m	struct:ssl_vconn	file:
ssl_clear_txbuf	lib/vconn-ssl.c	/^ssl_clear_txbuf(struct ssl_vconn *sslv)$/;"	f	file:
ssl_close	lib/vconn-ssl.c	/^ssl_close(struct vconn *vconn)$/;"	f	file:
ssl_connect	lib/vconn-ssl.c	/^ssl_connect(struct vconn *vconn)$/;"	f	file:
ssl_do_tx	lib/vconn-ssl.c	/^ssl_do_tx(struct vconn *vconn)$/;"	f	file:
ssl_enabled	debian/ofp-switch-setup	/^sub ssl_enabled {$/;"	s
ssl_init	lib/vconn-ssl.c	/^ssl_init(void)$/;"	f	file:
ssl_open	lib/vconn-ssl.c	/^ssl_open(const char *name, char *suffix, struct vconn **vconnp)$/;"	f	file:
ssl_recv	lib/vconn-ssl.c	/^ssl_recv(struct vconn *vconn, struct ofpbuf **bufferp)$/;"	f	file:
ssl_register_tx_waiter	lib/vconn-ssl.c	/^ssl_register_tx_waiter(struct vconn *vconn)$/;"	f	file:
ssl_send	lib/vconn-ssl.c	/^ssl_send(struct vconn *vconn, struct ofpbuf *buffer)$/;"	f	file:
ssl_state	lib/vconn-ssl.c	/^enum ssl_state {$/;"	g	file:
ssl_tx_poll_callback	lib/vconn-ssl.c	/^ssl_tx_poll_callback(int fd UNUSED, short int revents UNUSED, void *vconn_)$/;"	f	file:
ssl_vconn	lib/vconn-ssl.c	/^struct ssl_vconn$/;"	s	file:
ssl_vconn_cast	lib/vconn-ssl.c	/^ssl_vconn_cast(struct vconn *vconn)$/;"	f	file:
ssl_vconn_class	lib/vconn-ssl.c	/^struct vconn_class ssl_vconn_class = {$/;"	v	typeref:struct:vconn_class
ssl_wait	lib/vconn-ssl.c	/^ssl_wait(struct vconn *vconn, enum vconn_wait_type wait)$/;"	f	file:
ssl_wants_io	lib/vconn-ssl.c	/^ssl_wants_io(int ssl_error)$/;"	f	file:
stack_high	lib/backtrace.c	/^stack_high(void)$/;"	f	file:
stack_low	lib/backtrace.c	/^stack_low(void)$/;"	f	file:
start_server	debian/openflow-controller.init	/^start_server() {$/;"	f
state	include/openflow/openflow.h	/^	uint32_t state;                   \/* Bitmap of OFPPS_* flags. *\/$/;"	m	struct:ofp_port
state	lib/dhcp-client.c	/^    enum dhclient_state state;$/;"	m	struct:dhclient	typeref:enum:dhclient::dhclient_state	file:
state	lib/rconn.c	/^    enum state state;$/;"	m	struct:rconn	typeref:enum:rconn::state	file:
state	lib/rconn.c	/^enum state {$/;"	g	file:
state	lib/stp.c	/^    enum stp_state state;           \/* 8.5.5.2: Current state. *\/$/;"	m	struct:stp_port	typeref:enum:stp_port::stp_state	file:
state	lib/vconn-provider.h	/^    int state;$/;"	m	struct:vconn
state	lib/vconn-ssl.c	/^    enum ssl_state state;$/;"	m	struct:ssl_vconn	typeref:enum:ssl_vconn::ssl_state	file:
state	oflib/ofl-structs.h	/^    uint32_t   state;         \/* Bitmap of OFPPS_* flags. *\/$/;"	m	struct:ofl_port
state_changed	lib/stp.c	/^    bool state_changed;$/;"	m	struct:stp_port	file:
state_entered	lib/dhcp-client.c	/^    unsigned int state_entered; \/* When we transitioned to this state. *\/$/;"	m	struct:dhclient	file:
state_entered	lib/rconn.c	/^    time_t state_entered;$/;"	m	struct:rconn	file:
state_name	lib/dhcp-client.c	/^state_name(enum dhclient_state state)$/;"	f	file:
state_name	lib/rconn.c	/^state_name(enum state state)$/;"	f	file:
state_transition	lib/dhcp-client.c	/^state_transition(struct dhclient *cli, enum dhclient_state state)$/;"	f	file:
state_transition	lib/rconn.c	/^state_transition(struct rconn *rc, enum state state)$/;"	f	file:
stats	oflib/ofl-messages.h	/^    struct ofl_flow_stats         *stats;$/;"	m	struct:ofl_msg_flow_removed	typeref:struct:ofl_msg_flow_removed::ofl_flow_stats
stats	oflib/ofl-messages.h	/^    struct ofl_flow_stats **stats;$/;"	m	struct:ofl_msg_multipart_reply_flow	typeref:struct:ofl_msg_multipart_reply_flow::ofl_flow_stats
stats	oflib/ofl-messages.h	/^    struct ofl_group_desc_stats **stats;$/;"	m	struct:ofl_msg_multipart_reply_group_desc	typeref:struct:ofl_msg_multipart_reply_group_desc::ofl_group_desc_stats
stats	oflib/ofl-messages.h	/^    struct ofl_group_stats **stats;$/;"	m	struct:ofl_msg_multipart_reply_group	typeref:struct:ofl_msg_multipart_reply_group::ofl_group_stats
stats	oflib/ofl-messages.h	/^    struct ofl_meter_config **stats;$/;"	m	struct:ofl_msg_multipart_reply_meter_conf	typeref:struct:ofl_msg_multipart_reply_meter_conf::ofl_meter_config
stats	oflib/ofl-messages.h	/^    struct ofl_meter_stats **stats;$/;"	m	struct:ofl_msg_multipart_reply_meter	typeref:struct:ofl_msg_multipart_reply_meter::ofl_meter_stats
stats	oflib/ofl-messages.h	/^    struct ofl_port **stats;$/;"	m	struct:ofl_msg_multipart_reply_port_desc	typeref:struct:ofl_msg_multipart_reply_port_desc::ofl_port
stats	oflib/ofl-messages.h	/^    struct ofl_port_stats **stats;$/;"	m	struct:ofl_msg_multipart_reply_port	typeref:struct:ofl_msg_multipart_reply_port::ofl_port_stats
stats	oflib/ofl-messages.h	/^    struct ofl_queue_stats **stats;$/;"	m	struct:ofl_msg_multipart_reply_queue	typeref:struct:ofl_msg_multipart_reply_queue::ofl_queue_stats
stats	oflib/ofl-messages.h	/^    struct ofl_table_stats **stats;$/;"	m	struct:ofl_msg_multipart_reply_table	typeref:struct:ofl_msg_multipart_reply_table::ofl_table_stats
stats	oflib/ofl.h	/^    struct ofl_exp_stats  *stats;$/;"	m	struct:ofl_exp	typeref:struct:ofl_exp::ofl_exp_stats
stats	udatapath/dp_ports.h	/^    struct ofl_port_stats *stats;$/;"	m	struct:sw_port	typeref:struct:sw_port::ofl_port_stats
stats	udatapath/dp_ports.h	/^    struct ofl_queue_stats *stats;$/;"	m	struct:sw_queue	typeref:struct:sw_queue::ofl_queue_stats
stats	udatapath/flow_entry.h	/^    struct ofl_flow_stats   *stats;$/;"	m	struct:flow_entry	typeref:struct:flow_entry::ofl_flow_stats
stats	udatapath/flow_table.h	/^    struct ofl_table_stats    *stats;         \/* structure storing table statistics. *\/$/;"	m	struct:flow_table	typeref:struct:flow_table::ofl_table_stats
stats	udatapath/group_entry.h	/^    struct ofl_group_stats      *stats;$/;"	m	struct:group_entry	typeref:struct:group_entry::ofl_group_stats
stats	udatapath/meter_entry.h	/^	struct ofl_meter_stats		*stats;			\/* Meter statistics *\/$/;"	m	struct:meter_entry	typeref:struct:meter_entry::ofl_meter_stats
stats_aggr	utilities/dpctl.c	/^stats_aggr(struct vconn *vconn, int argc, char *argv[]) {$/;"	f	file:
stats_desc	utilities/dpctl.c	/^stats_desc(struct vconn *vconn, int argc UNUSED, char *argv[] UNUSED) {$/;"	f	file:
stats_flow	utilities/dpctl.c	/^stats_flow(struct vconn *vconn, int argc, char *argv[]) {$/;"	f	file:
stats_group	utilities/dpctl.c	/^stats_group(struct vconn *vconn, int argc, char *argv[]) {$/;"	f	file:
stats_group_desc	utilities/dpctl.c	/^stats_group_desc(struct vconn *vconn, int argc, char *argv[]) {$/;"	f	file:
stats_meter	utilities/dpctl.c	/^stats_meter(struct vconn *vconn, int argc UNUSED, char *argv[]){$/;"	f	file:
stats_num	oflib/ofl-messages.h	/^    size_t                        stats_num;$/;"	m	struct:ofl_msg_multipart_reply_group_desc
stats_num	oflib/ofl-messages.h	/^    size_t                        stats_num;$/;"	m	struct:ofl_msg_multipart_reply_meter_conf
stats_num	oflib/ofl-messages.h	/^    size_t                   stats_num;$/;"	m	struct:ofl_msg_multipart_reply_group
stats_num	oflib/ofl-messages.h	/^    size_t                   stats_num;$/;"	m	struct:ofl_msg_multipart_reply_meter
stats_num	oflib/ofl-messages.h	/^    size_t                   stats_num;$/;"	m	struct:ofl_msg_multipart_reply_queue
stats_num	oflib/ofl-messages.h	/^    size_t                   stats_num;$/;"	m	struct:ofl_msg_multipart_reply_table
stats_num	oflib/ofl-messages.h	/^    size_t                  stats_num;$/;"	m	struct:ofl_msg_multipart_reply_flow
stats_num	oflib/ofl-messages.h	/^    size_t                  stats_num;$/;"	m	struct:ofl_msg_multipart_reply_port
stats_num	oflib/ofl-messages.h	/^    size_t                  stats_num;$/;"	m	struct:ofl_msg_multipart_reply_port_desc
stats_port	utilities/dpctl.c	/^stats_port(struct vconn *vconn, int argc, char *argv[]) {$/;"	f	file:
stats_queue	utilities/dpctl.c	/^stats_queue(struct vconn *vconn, int argc, char *argv[]) {$/;"	f	file:
stats_table	utilities/dpctl.c	/^stats_table(struct vconn *vconn, int argc UNUSED, char *argv[] UNUSED) {$/;"	f	file:
status	lib/process.c	/^    volatile int status;$/;"	m	struct:process	file:
status_reply	secchan/status.c	/^struct status_reply {$/;"	s	file:
status_reply_put	secchan/status.c	/^status_reply_put(struct status_reply *sr, const char *content, ...)$/;"	f
stop_server	debian/openflow-controller.init	/^stop_server() {$/;"	f
stp	lib/stp.c	/^    struct stp *stp;$/;"	m	struct:stp_port	typeref:struct:stp_port::stp	file:
stp	lib/stp.c	/^struct stp {$/;"	s	file:
stp	secchan/stp-secchan.c	/^    struct stp *stp;$/;"	m	struct:stp_data	typeref:struct:stp_data::stp	file:
stp_acknowledge_topology_change	lib/stp.c	/^stp_acknowledge_topology_change(struct stp_port *p)$/;"	f	file:
stp_become_designated_port	lib/stp.c	/^stp_become_designated_port(struct stp_port *p)$/;"	f	file:
stp_become_root_bridge	lib/stp.c	/^stp_become_root_bridge(struct stp *stp)$/;"	f	file:
stp_bpdu_header	lib/stp.c	/^struct stp_bpdu_header {$/;"	s	file:
stp_config_bpdu	lib/stp.c	/^struct stp_config_bpdu {$/;"	s	file:
stp_config_bpdu_flags	lib/stp.c	/^enum stp_config_bpdu_flags {$/;"	g	file:
stp_config_bpdu_generation	lib/stp.c	/^stp_config_bpdu_generation(struct stp *stp)$/;"	f	file:
stp_configuration_update	lib/stp.c	/^stp_configuration_update(struct stp *stp)$/;"	f	file:
stp_create	lib/stp.c	/^stp_create(const char *name, stp_identifier bridge_id,$/;"	f
stp_data	secchan/stp-secchan.c	/^struct stp_data {$/;"	s	file:
stp_designated_port_selection	lib/stp.c	/^stp_designated_port_selection(struct stp *stp)$/;"	f	file:
stp_destroy	lib/stp.c	/^stp_destroy(struct stp *stp)$/;"	f
stp_eth_addr	lib/stp.c	/^const uint8_t stp_eth_addr[ETH_ADDR_LEN]$/;"	v
stp_forward_delay_timer_expiry	lib/stp.c	/^stp_forward_delay_timer_expiry(struct stp_port *p)$/;"	f	file:
stp_forward_in_state	lib/stp.c	/^stp_forward_in_state(enum stp_state state)$/;"	f
stp_get_bridge_id	lib/stp.c	/^stp_get_bridge_id(const struct stp *stp)$/;"	f
stp_get_changed_port	lib/stp.c	/^stp_get_changed_port(struct stp *stp, struct stp_port **portp)$/;"	f
stp_get_designated_root	lib/stp.c	/^stp_get_designated_root(const struct stp *stp)$/;"	f
stp_get_forward_delay	lib/stp.c	/^stp_get_forward_delay(const struct stp *stp)$/;"	f
stp_get_hello_time	lib/stp.c	/^stp_get_hello_time(const struct stp *stp)$/;"	f
stp_get_max_age	lib/stp.c	/^stp_get_max_age(const struct stp *stp)$/;"	f
stp_get_name	lib/stp.c	/^stp_get_name(const struct stp *stp)$/;"	f
stp_get_port	lib/stp.c	/^stp_get_port(struct stp *stp, int port_no)$/;"	f
stp_get_root_path_cost	lib/stp.c	/^stp_get_root_path_cost(const struct stp *stp)$/;"	f
stp_get_root_port	lib/stp.c	/^stp_get_root_port(struct stp *stp)$/;"	f
stp_hello_timer_expiry	lib/stp.c	/^stp_hello_timer_expiry(struct stp *stp)$/;"	f	file:
stp_hold_timer_expiry	lib/stp.c	/^stp_hold_timer_expiry(struct stp_port *p)$/;"	f	file:
stp_hook_class	secchan/stp-secchan.c	/^static struct hook_class stp_hook_class = {$/;"	v	typeref:struct:hook_class	file:
stp_identifier	lib/stp.h	/^typedef uint64_t stp_identifier;$/;"	t
stp_initialize_port	lib/stp.c	/^stp_initialize_port(struct stp_port *p, enum stp_state state)$/;"	f	file:
stp_is_designated_for_some_port	lib/stp.c	/^stp_is_designated_for_some_port(const struct stp *stp)$/;"	f	file:
stp_is_designated_port	lib/stp.c	/^stp_is_designated_port(const struct stp_port *p)$/;"	f	file:
stp_is_port_supported	secchan/stp-secchan.c	/^stp_is_port_supported(uint32_t port_no)$/;"	f	file:
stp_is_root_bridge	lib/stp.c	/^stp_is_root_bridge(const struct stp *stp)$/;"	f
stp_learn_in_state	lib/stp.c	/^stp_learn_in_state(enum stp_state state)$/;"	f
stp_local_packet_cb	secchan/stp-secchan.c	/^stp_local_packet_cb(struct relay *r, void *stp_)$/;"	f	file:
stp_local_port_changed_cb	secchan/stp-secchan.c	/^stp_local_port_changed_cb(const struct ofp_port *port, void *stp_)$/;"	f	file:
stp_make_blocking	lib/stp.c	/^stp_make_blocking(struct stp_port *p)$/;"	f	file:
stp_make_forwarding	lib/stp.c	/^stp_make_forwarding(struct stp_port *p)$/;"	f	file:
stp_message_age_timer_expiry	lib/stp.c	/^stp_message_age_timer_expiry(struct stp_port *p)$/;"	f	file:
stp_next_enabled_port	lib/stp.c	/^stp_next_enabled_port(const struct stp *stp, const struct stp_port *port)$/;"	f	file:
stp_periodic_cb	secchan/stp-secchan.c	/^stp_periodic_cb(void *stp_)$/;"	f	file:
stp_port	lib/stp.c	/^struct stp_port {$/;"	s	file:
stp_port_changed_cb	secchan/stp-secchan.c	/^stp_port_changed_cb(uint32_t port_no,$/;"	f	file:
stp_port_disable	lib/stp.c	/^stp_port_disable(struct stp_port *p)$/;"	f
stp_port_disable_change_detection	lib/stp.c	/^stp_port_disable_change_detection(struct stp_port *p)$/;"	f
stp_port_enable	lib/stp.c	/^stp_port_enable(struct stp_port *p)$/;"	f
stp_port_enable_change_detection	lib/stp.c	/^stp_port_enable_change_detection(struct stp_port *p)$/;"	f
stp_port_get_state	lib/stp.c	/^stp_port_get_state(const struct stp_port *p)$/;"	f
stp_port_get_stp	lib/stp.c	/^stp_port_get_stp(struct stp_port *p)$/;"	f
stp_port_no	lib/stp.c	/^stp_port_no(const struct stp_port *p)$/;"	f
stp_port_set_path_cost	lib/stp.c	/^stp_port_set_path_cost(struct stp_port *p, uint16_t path_cost)$/;"	f
stp_port_set_priority	lib/stp.c	/^stp_port_set_priority(struct stp_port *p, uint8_t new_priority)$/;"	f
stp_port_set_speed	lib/stp.c	/^stp_port_set_speed(struct stp_port *p, unsigned int speed)$/;"	f
stp_port_state_selection	lib/stp.c	/^stp_port_state_selection(struct stp *stp)$/;"	f	file:
stp_received_bpdu	lib/stp.c	/^stp_received_bpdu(struct stp_port *p, const void *bpdu, size_t bpdu_size)$/;"	f
stp_received_config_bpdu	lib/stp.c	/^stp_received_config_bpdu(struct stp *stp, struct stp_port *p,$/;"	f
stp_received_tcn_bpdu	lib/stp.c	/^stp_received_tcn_bpdu(struct stp *stp, struct stp_port *p)$/;"	f
stp_record_config_information	lib/stp.c	/^stp_record_config_information(struct stp_port *p,$/;"	f	file:
stp_record_config_timeout_values	lib/stp.c	/^stp_record_config_timeout_values(struct stp *stp,$/;"	f	file:
stp_root_selection	lib/stp.c	/^stp_root_selection(struct stp *stp)$/;"	f	file:
stp_send_bpdu	lib/stp.c	/^stp_send_bpdu(struct stp_port *p, const void *bpdu, size_t bpdu_size)$/;"	f	file:
stp_set_bridge_id	lib/stp.c	/^stp_set_bridge_id(struct stp *stp, stp_identifier bridge_id)$/;"	f
stp_set_bridge_priority	lib/stp.c	/^stp_set_bridge_priority(struct stp *stp, uint16_t new_priority)$/;"	f
stp_set_forward_delay	lib/stp.c	/^stp_set_forward_delay(struct stp *stp, int ms)$/;"	f
stp_set_hello_time	lib/stp.c	/^stp_set_hello_time(struct stp *stp, int ms)$/;"	f
stp_set_max_age	lib/stp.c	/^stp_set_max_age(struct stp *stp, int ms)$/;"	f
stp_set_port_state	lib/stp.c	/^stp_set_port_state(struct stp_port *p, enum stp_state state)$/;"	f	file:
stp_start	secchan/stp-secchan.c	/^stp_start(struct secchan *secchan, struct port_watcher *pw,$/;"	f
stp_start_timer	lib/stp.c	/^stp_start_timer(struct stp_timer *timer, int value)$/;"	f	file:
stp_state	lib/stp.h	/^enum stp_state {$/;"	g
stp_state_name	lib/stp.c	/^stp_state_name(enum stp_state state)$/;"	f
stp_stop_timer	lib/stp.c	/^stp_stop_timer(struct stp_timer *timer)$/;"	f	file:
stp_supersedes_port_info	lib/stp.c	/^stp_supersedes_port_info(const struct stp_port *p,$/;"	f	file:
stp_supersedes_root	lib/stp.c	/^stp_supersedes_root(const struct stp_port *root, const struct stp_port *p)$/;"	f	file:
stp_tcn_bpdu	lib/stp.c	/^struct stp_tcn_bpdu {$/;"	s	file:
stp_tcn_timer_expiry	lib/stp.c	/^stp_tcn_timer_expiry(struct stp *stp)$/;"	f	file:
stp_tick	lib/stp.c	/^stp_tick(struct stp *stp, int ms)$/;"	f
stp_timer	lib/stp.c	/^struct stp_timer {$/;"	s	file:
stp_timer_expired	lib/stp.c	/^stp_timer_expired(struct stp_timer *timer, int elapsed, int timeout)$/;"	f	file:
stp_topology_change_acknowledged	lib/stp.c	/^stp_topology_change_acknowledged(struct stp *stp)$/;"	f	file:
stp_topology_change_detection	lib/stp.c	/^stp_topology_change_detection(struct stp *stp)$/;"	f	file:
stp_topology_change_timer_expiry	lib/stp.c	/^stp_topology_change_timer_expiry(struct stp *stp)$/;"	f	file:
stp_transmit_config	lib/stp.c	/^stp_transmit_config(struct stp_port *p)$/;"	f	file:
stp_transmit_tcn	lib/stp.c	/^stp_transmit_tcn(struct stp *stp)$/;"	f	file:
stp_update_bridge_timers	lib/stp.c	/^stp_update_bridge_timers(struct stp *stp)$/;"	f	file:
stp_wait_cb	secchan/stp-secchan.c	/^stp_wait_cb(void *stp_ UNUSED)$/;"	f	file:
str_to_int	lib/util.c	/^str_to_int(const char *s, int base, int *i)$/;"	f
str_to_ipv6	lib/ipv6_util.c	/^str_to_ipv6(const char *str_, struct in6_addr *addrp, struct in6_addr *maskp)$/;"	f
str_to_llong	lib/util.c	/^str_to_llong(const char *s, int base, long long *x)$/;"	f
str_to_long	lib/util.c	/^str_to_long(const char *s, int base, long *li)$/;"	f
str_to_uint	lib/util.c	/^str_to_uint(const char *s, int base, unsigned int *u)$/;"	f
str_to_ullong	lib/util.c	/^str_to_ullong(const char *s, int base, unsigned long long *ull)$/;"	f
str_to_ulong	lib/util.c	/^str_to_ulong(const char *s, int base, unsigned long *ul)$/;"	f
stream_clear_txbuf	lib/vconn-stream.c	/^stream_clear_txbuf(struct stream_vconn *s)$/;"	f	file:
stream_close	lib/vconn-stream.c	/^stream_close(struct vconn *vconn)$/;"	f	file:
stream_connect	lib/vconn-stream.c	/^stream_connect(struct vconn *vconn)$/;"	f	file:
stream_do_tx	lib/vconn-stream.c	/^stream_do_tx(int fd UNUSED, short int revents UNUSED, void *vconn_)$/;"	f	file:
stream_recv	lib/vconn-stream.c	/^stream_recv(struct vconn *vconn, struct ofpbuf **bufferp)$/;"	f	file:
stream_send	lib/vconn-stream.c	/^stream_send(struct vconn *vconn, struct ofpbuf *buffer)$/;"	f	file:
stream_vconn	lib/vconn-stream.c	/^struct stream_vconn$/;"	s	file:
stream_vconn_cast	lib/vconn-stream.c	/^stream_vconn_cast(struct vconn *vconn)$/;"	f	file:
stream_vconn_class	lib/vconn-stream.c	/^static struct vconn_class stream_vconn_class = {$/;"	v	typeref:struct:vconn_class	file:
stream_vconn_class	lib/vconn-stream.c	/^static struct vconn_class stream_vconn_class;$/;"	v	typeref:struct:vconn_class	file:
stream_wait	lib/vconn-stream.c	/^stream_wait(struct vconn *vconn, enum vconn_wait_type wait)$/;"	f	file:
strict_mask128	udatapath/match_std.c	/^strict_mask128(uint8_t *a, uint8_t *b, uint8_t *am, uint8_t *bm) {$/;"	f	file:
strict_mask16	udatapath/match_std.c	/^strict_mask16(uint8_t *a, uint8_t *b, uint8_t *am, uint8_t *bm) {$/;"	f	file:
strict_mask32	udatapath/match_std.c	/^strict_mask32(uint8_t *a, uint8_t *b, uint8_t *am, uint8_t *bm) {$/;"	f	file:
strict_mask48	udatapath/match_std.c	/^strict_mask48(uint8_t *a, uint8_t *b, uint8_t *am, uint8_t *bm) {$/;"	f	file:
strict_mask64	udatapath/match_std.c	/^strict_mask64(uint8_t *a, uint8_t *b, uint8_t *am, uint8_t *bm) {$/;"	f	file:
strict_mask8	udatapath/match_std.c	/^strict_mask8(uint8_t *a, uint8_t *b, uint8_t *am, uint8_t *bm) {$/;"	f	file:
string	lib/dynamic-string.h	/^    char *string;       \/* Null-terminated string. *\/$/;"	m	struct:ds
strlcpy	lib/util.c	/^strlcpy(char *dst, const char *src, size_t size)$/;"	f
subdir	Makefile	/^subdir = .$/;"	m
subtype	include/openflow/nicira-ext.h	/^    uint16_t subtype;               \/* NXAST_*. *\/$/;"	m	struct:nx_action_header
subtype	include/openflow/nicira-ext.h	/^    uint16_t subtype;               \/* NXAST_RESUBMIT. *\/$/;"	m	struct:nx_action_resubmit
subtype	include/openflow/nicira-ext.h	/^    uint16_t subtype;               \/* NXAST_SET_TUNNEL. *\/$/;"	m	struct:nx_action_set_tunnel
subtype	include/openflow/nicira-ext.h	/^    uint32_t subtype;           \/* NXT_TUN_ID_FROM_COOKIE *\/$/;"	m	struct:nxt_tun_id_cookie
subtype	include/openflow/nicira-ext.h	/^    uint32_t subtype;           \/* One of NXT_* above. *\/$/;"	m	struct:nicira_header
subtype	include/openflow/openflow-ext.h	/^    uint32_t subtype;           \/* One of ofp_extension_commands *\/$/;"	m	struct:ofp_extension_header
supported	include/openflow/openflow.h	/^	uint32_t supported;               \/* Features supported by the port. *\/$/;"	m	struct:ofp_port
supported	lib/netdev.c	/^    uint32_t supported;         \/* Features supported by the port. *\/$/;"	m	struct:netdev	file:
supported	oflib/ofl-structs.h	/^    uint32_t   supported;     \/* Features supported by the port. *\/$/;"	m	struct:ofl_port
svec	lib/svec.h	/^struct svec {$/;"	s
svec_add	lib/svec.c	/^svec_add(struct svec *svec, const char *name)$/;"	f
svec_add_nocopy	lib/svec.c	/^svec_add_nocopy(struct svec *svec, char *name)$/;"	f
svec_append	lib/svec.c	/^svec_append(struct svec *svec, const struct svec *other)$/;"	f
svec_back	lib/svec.c	/^svec_back(const struct svec *svec)$/;"	f
svec_clear	lib/svec.c	/^svec_clear(struct svec *svec) $/;"	f
svec_contains	lib/svec.c	/^svec_contains(const struct svec *svec, const char *name)$/;"	f
svec_destroy	lib/svec.c	/^svec_destroy(struct svec *svec)$/;"	f
svec_diff	lib/svec.c	/^svec_diff(const struct svec *a, const struct svec *b,$/;"	f
svec_equal	lib/svec.c	/^svec_equal(const struct svec *a, const struct svec *b)$/;"	f
svec_expand	lib/svec.c	/^svec_expand(struct svec *svec)$/;"	f	file:
svec_find	lib/svec.c	/^svec_find(const struct svec *svec, const char *name)$/;"	f
svec_get_duplicate	lib/svec.c	/^svec_get_duplicate(const struct svec *svec)$/;"	f
svec_init	lib/svec.c	/^svec_init(struct svec *svec)$/;"	f
svec_is_sorted	lib/svec.c	/^svec_is_sorted(const struct svec *svec)$/;"	f
svec_is_unique	lib/svec.c	/^svec_is_unique(const struct svec *svec)$/;"	f
svec_join	lib/svec.c	/^svec_join(const struct svec *svec, const char *delimiter)$/;"	f
svec_parse_words	lib/svec.c	/^svec_parse_words(struct svec *svec, const char *words)$/;"	f
svec_pop_back	lib/svec.c	/^svec_pop_back(struct svec *svec)$/;"	f
svec_print	lib/svec.c	/^svec_print(const struct svec *svec, const char *title)$/;"	f
svec_sort	lib/svec.c	/^svec_sort(struct svec *svec)$/;"	f
svec_sort_unique	lib/svec.c	/^svec_sort_unique(struct svec *svec)$/;"	f
svec_swap	lib/svec.c	/^svec_swap(struct svec *a, struct svec *b)$/;"	f
svec_terminate	lib/svec.c	/^svec_terminate(struct svec *svec)$/;"	f
svec_unique	lib/svec.c	/^svec_unique(struct svec *svec)$/;"	f
sw_desc	include/openflow/openflow.h	/^	char sw_desc[DESC_STR_LEN];      \/* Software description. *\/$/;"	m	struct:ofp_desc
sw_desc	oflib/ofl-messages.h	/^    char  *sw_desc;      \/* Software description. Max DESC_STR_LEN *\/$/;"	m	struct:ofl_msg_reply_desc
sw_desc	udatapath/datapath.h	/^    char  *sw_desc;$/;"	m	struct:datapath
sw_port	udatapath/dp_ports.h	/^struct sw_port {$/;"	s
sw_port_flags	udatapath/dp_ports.h	/^enum sw_port_flags {$/;"	g
sw_queue	udatapath/dp_ports.h	/^struct sw_queue {$/;"	s
sw_table	include/openflow/of_hw_api.h	/^    struct sw_table sw_table;$/;"	m	struct:of_hw_driver	typeref:struct:of_hw_driver::sw_table
switch_status	secchan/status.c	/^struct switch_status {$/;"	s	file:
switch_status_category	secchan/status.c	/^struct switch_status_category {$/;"	s	file:
switch_status_cb	secchan/status.c	/^switch_status_cb(struct status_reply *sr, void *ss_)$/;"	f	file:
switch_status_hook_class	secchan/status.c	/^static struct hook_class switch_status_hook_class = {$/;"	v	typeref:struct:hook_class	file:
switch_status_register_category	secchan/status.c	/^switch_status_register_category(struct switch_status *ss,$/;"	f
switch_status_remote_packet_cb	secchan/status.c	/^switch_status_remote_packet_cb(struct relay *r, void *ss_)$/;"	f	file:
switch_status_start	secchan/status.c	/^switch_status_start(struct secchan *secchan, const struct settings *s,$/;"	f
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
syslog_levels	lib/vlog.c	/^static int syslog_levels[VLL_N_LEVELS] = {$/;"	v	file:
table	lib/mac-learning.c	/^    struct list table[MAC_HASH_SIZE]; \/* Hash table. *\/$/;"	m	struct:mac_learning	typeref:struct:mac_learning::list	file:
table	udatapath/crc32.h	/^    unsigned int table[CRC32_TABLE_SIZE];$/;"	m	struct:crc32
table	udatapath/flow_entry.h	/^    struct flow_table       *table;$/;"	m	struct:flow_entry	typeref:struct:flow_entry::flow_table
table	udatapath/group_entry.h	/^    struct group_table          *table;$/;"	m	struct:group_entry	typeref:struct:group_entry::group_table
table	udatapath/meter_entry.h	/^	struct meter_table			*table;			\/* The meter table *\/$/;"	m	struct:meter_entry	typeref:struct:meter_entry::meter_table
table_features	oflib/ofl-messages.h	/^    struct ofl_table_features ** table_features;$/;"	m	struct:ofl_msg_multipart_reply_table_features	typeref:struct:ofl_msg_multipart_reply_table_features::ofl_table_features
table_features	oflib/ofl-messages.h	/^    struct ofl_table_features **table_features;    $/;"	m	struct:ofl_msg_multipart_request_table_features	typeref:struct:ofl_msg_multipart_request_table_features::ofl_table_features
table_features	utilities/dpctl.c	/^table_features(struct vconn *vconn, int argc UNUSED, char *argv[] UNUSED) {$/;"	f	file:
table_id	include/openflow/openflow.h	/^	uint8_t table_id;       \/* ID of table flow came from. *\/$/;"	m	struct:ofp_flow_stats
table_id	include/openflow/openflow.h	/^	uint8_t table_id;       \/* ID of table to read (from ofp_table_stats)$/;"	m	struct:ofp_aggregate_stats_request
table_id	include/openflow/openflow.h	/^	uint8_t table_id;       \/* ID of table to read (from ofp_table_stats),$/;"	m	struct:ofp_flow_stats_request
table_id	include/openflow/openflow.h	/^	uint8_t table_id;       \/* ID of the table *\/$/;"	m	struct:ofp_flow_removed
table_id	include/openflow/openflow.h	/^	uint8_t table_id;       \/* ID of the table that was looked up *\/$/;"	m	struct:ofp_packet_in
table_id	include/openflow/openflow.h	/^	uint8_t table_id;       \/* ID of the table to put the flow in.$/;"	m	struct:ofp_flow_mod
table_id	include/openflow/openflow.h	/^	uint8_t table_id; \/* ID of the table, OFPTT_ALL indicates all tables *\/$/;"	m	struct:ofp_table_mod
table_id	include/openflow/openflow.h	/^	uint8_t table_id; \/* Set next table in the lookup pipeline *\/$/;"	m	struct:ofp_instruction_goto_table
table_id	include/openflow/openflow.h	/^    uint8_t table_id;       \/* Identifier of table. Lower numbered tables$/;"	m	struct:ofp_table_stats
table_id	include/openflow/openflow.h	/^    uint8_t table_id; \/* Identifier of table. Lower numbered tables$/;"	m	struct:ofp_table_features
table_id	oflib/ofl-messages.h	/^    uint8_t                         table_id;     \/* ID of the table to put the flow in *\/$/;"	m	struct:ofl_msg_flow_mod
table_id	oflib/ofl-messages.h	/^    uint8_t                     table_id;    \/* ID of the table that was looked up *\/$/;"	m	struct:ofl_msg_packet_in
table_id	oflib/ofl-messages.h	/^    uint8_t                  table_id; \/* ID of table to read$/;"	m	struct:ofl_msg_multipart_request_flow
table_id	oflib/ofl-messages.h	/^    uint8_t    table_id; \/* ID of the table, 0xFF indicates all tables *\/$/;"	m	struct:ofl_msg_table_mod
table_id	oflib/ofl-structs.h	/^    uint8_t                         table_id;      \/* ID of table flow came from. *\/$/;"	m	struct:ofl_flow_stats
table_id	oflib/ofl-structs.h	/^    uint8_t    table_id;      \/* Identifier of table. Lower numbered tables$/;"	m	struct:ofl_table_stats
table_id	oflib/ofl-structs.h	/^    uint8_t   table_id; \/* Set next table in the lookup pipeline *\/$/;"	m	struct:ofl_instruction_goto_table
table_id	oflib/ofl-structs.h	/^    uint8_t table_id; \/* Identifier of table. Lower numbered tables$/;"	m	struct:ofl_table_features
table_id	udatapath/packet.h	/^    uint8_t             table_id; \/* table in which is processed *\/$/;"	m	struct:packet
table_miss	udatapath/packet_handle_std.h	/^   bool						   table_miss; \/*Packet was matched$/;"	m	struct:packet_handle_std
table_mod	utilities/dpctl.c	/^table_mod(struct vconn *vconn, int argc UNUSED, char *argv[]) {$/;"	f	file:
table_names	utilities/dpctl.h	/^static struct names8 table_names[] = {$/;"	v	typeref:struct:names8
table_num	oflib/ofl-structs.h	/^    size_t table_num;$/;"	m	struct:ofl_table_feature_prop_next_tables
table_stats_get	include/openflow/of_hw_api.h	/^    int (*table_stats_get)(of_hw_driver_t *hw_drv, struct$/;"	m	struct:of_hw_driver
table_to_parse	utilities/dpctl_parser.py	/^    table_to_parse = sys.argv[2]$/;"	v
table_to_parse	utilities/dpctl_parser.py	/^table_to_parse = -1$/;"	v
tables	udatapath/pipeline.h	/^    struct flow_table  *tables[PIPELINE_TABLES];$/;"	m	struct:pipeline	typeref:struct:pipeline::flow_table
tables_num	oflib/ofl-messages.h	/^    size_t tables_num;$/;"	m	struct:ofl_msg_multipart_reply_table_features
tables_num	oflib/ofl-messages.h	/^    size_t tables_num;$/;"	m	struct:ofl_msg_multipart_request_table_features
tag	lib/mac-learning.c	/^    tag_type tag;               \/* Tag for this learning entry. *\/$/;"	m	struct:mac_entry	file:
tag_create_deterministic	lib/tag.c	/^tag_create_deterministic(uint32_t seed)$/;"	f
tag_create_random	lib/tag.c	/^tag_create_random(void)$/;"	f
tag_intersects	lib/tag.h	/^tag_intersects(tag_type a, tag_type b)$/;"	f
tag_is_valid	lib/tag.h	/^tag_is_valid(tag_type tag)$/;"	f
tag_set	lib/tag.h	/^struct tag_set {$/;"	s
tag_set_add	lib/tag.c	/^tag_set_add(struct tag_set *set, tag_type tag)$/;"	f
tag_set_init	lib/tag.c	/^tag_set_init(struct tag_set *set)$/;"	f
tag_set_intersects	lib/tag.h	/^tag_set_intersects(const struct tag_set *set, tag_type tags)$/;"	f
tag_set_is_empty	lib/tag.h	/^tag_set_is_empty(const struct tag_set *set)$/;"	f
tag_type	lib/tag.h	/^typedef uint32_t tag_type;$/;"	t
tags	lib/tag.h	/^    tag_type tags[TAG_SET_SIZE];$/;"	m	struct:tag_set
tail	lib/queue.h	/^    struct ofpbuf *tail;        \/* Last queued packet, null if n == 0. *\/$/;"	m	struct:ofp_queue	typeref:struct:ofp_queue::ofpbuf
tap_fd	lib/netdev.c	/^    int tap_fd;                 \/* TAP character device, if any, otherwise the$/;"	m	struct:netdev	file:
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | lzma -9 -c >$(distdir).tar.lzma$/;"	m
target_addr	lib/packets.h	/^    struct in6_addr target_addr;$/;"	m	struct:ipv6_nd_header	typeref:struct:ipv6_nd_header::in6_addr
target_alias	Makefile	/^target_alias = $/;"	m
tci	lib/packets.h	/^    uint16_t tci;$/;"	m	struct:qtag_prefix
tcn_timer	lib/stp.c	/^    struct stp_timer tcn_timer;     \/* 8.5.4.2: Topology change timer. *\/$/;"	m	struct:stp	typeref:struct:stp::stp_timer	file:
tcp	lib/packets.h	/^   struct tcp_header      * tcp;$/;"	m	struct:protocols_std	typeref:struct:protocols_std::tcp_header
tcp_ack	lib/packets.h	/^    uint32_t tcp_ack;$/;"	m	struct:tcp_header
tcp_csum	lib/packets.h	/^    uint16_t tcp_csum;$/;"	m	struct:tcp_header
tcp_ctl	lib/packets.h	/^    uint16_t tcp_ctl;$/;"	m	struct:tcp_header
tcp_dst	lib/packets.h	/^    uint16_t tcp_dst;$/;"	m	struct:tcp_header
tcp_header	lib/packets.h	/^struct tcp_header {$/;"	s
tcp_open	lib/vconn-tcp.c	/^tcp_open(const char *name, char *suffix, struct vconn **vconnp)$/;"	f	file:
tcp_seq	lib/packets.h	/^    uint32_t tcp_seq;$/;"	m	struct:tcp_header
tcp_src	lib/packets.h	/^    uint16_t tcp_src;$/;"	m	struct:tcp_header
tcp_urg	lib/packets.h	/^    uint16_t tcp_urg;$/;"	m	struct:tcp_header
tcp_vconn_class	lib/vconn-tcp.c	/^struct vconn_class tcp_vconn_class = {$/;"	v	typeref:struct:vconn_class
tcp_winsz	lib/packets.h	/^    uint16_t tcp_winsz;$/;"	m	struct:tcp_header
thiszone	lib/pcap.c	/^    int32_t thiszone;        \/* GMT to local correction *\/$/;"	m	struct:pcap_hdr	file:
tick	lib/timeval.c	/^static volatile sig_atomic_t tick;$/;"	v	file:
time_add	lib/timeval.c	/^time_add(time_t a, time_t b)$/;"	f	file:
time_alarm	lib/timeval.c	/^time_alarm(unsigned int secs)$/;"	f
time_init	lib/timeval.c	/^time_init(void)$/;"	f
time_msec	lib/timeval.c	/^time_msec(void)$/;"	f
time_now	lib/timeval.c	/^time_now(void)$/;"	f
time_poll	lib/timeval.c	/^time_poll(struct pollfd *pollfds, int n_pollfds, int timeout)$/;"	f
time_refresh	lib/timeval.c	/^time_refresh(void)$/;"	f
timed_out	lib/rconn.c	/^timed_out(const struct rconn *rc)$/;"	f	file:
timeout	include/openflow/bme-ext.h	/^    uint16_t timeout;$/;"	m	struct:ofp_bme_serialize
timeout	lib/dhcp-client.c	/^timeout(struct dhclient *cli, unsigned int secs)$/;"	f	file:
timeout	lib/poll-loop.c	/^static int timeout = -1;$/;"	v	file:
timeout	lib/rconn.c	/^timeout(const struct rconn *rc)$/;"	f	file:
timeout	oflib-exp/ofl-exp-bme.h	/^    uint16_t timeout;$/;"	m	struct:ofl_bme_serialize
timeout	udatapath/dp_buffers.c	/^    time_t         timeout;$/;"	m	struct:packet_buffer	file:
timeout_ACTIVE	lib/rconn.c	/^timeout_ACTIVE(const struct rconn *rc)$/;"	f	file:
timeout_BACKOFF	lib/rconn.c	/^timeout_BACKOFF(const struct rconn *rc)$/;"	f	file:
timeout_CONNECTING	lib/rconn.c	/^timeout_CONNECTING(const struct rconn *rc)$/;"	f	file:
timeout_IDLE	lib/rconn.c	/^timeout_IDLE(const struct rconn *rc)$/;"	f	file:
timeout_VOID	lib/rconn.c	/^timeout_VOID(const struct rconn *rc UNUSED)$/;"	f	file:
timeout_backtrace	lib/poll-loop.c	/^static struct backtrace timeout_backtrace;$/;"	v	typeref:struct:backtrace	file:
timer_to_ms	lib/stp.c	/^timer_to_ms(int timer)$/;"	f	file:
tmp_dh_callback	lib/vconn-ssl.c	/^tmp_dh_callback(SSL *ssl UNUSED, int is_export UNUSED, int keylength)$/;"	f	file:
to_string	oflib/ofl.h	/^    char   *(*to_string)        (struct ofl_action_header *act);$/;"	m	struct:ofl_exp_act
to_string	oflib/ofl.h	/^    char   *(*to_string)        (struct ofl_msg_experimenter *msg);$/;"	m	struct:ofl_exp_msg
to_string	oflib/ofl.h	/^    char   *(*to_string)       (struct ofl_instruction_header *i);$/;"	m	struct:ofl_exp_inst
to_string	oflib/ofl.h	/^    char   *(*to_string)      (struct ofl_match_header *m);$/;"	m	struct:ofl_exp_match
tokens	lib/vlog.h	/^    unsigned int tokens;        \/* Current number of tokens. *\/$/;"	m	struct:vlog_rate_limit
tokens	oflib/ofl-structs.h	/^    uint64_t tokens;$/;"	m	struct:ofl_meter_band_stats
tokens	secchan/ratelimit.c	/^    int tokens;                 \/* Current number of tokens. *\/$/;"	m	struct:rate_limiter	file:
top_build_prefix	Makefile	/^top_build_prefix = $/;"	m
top_builddir	Makefile	/^top_builddir = .$/;"	m
top_distdir	Makefile	/^top_distdir = $(distdir)$/;"	m
top_srcdir	Makefile	/^top_srcdir = .$/;"	m
topology_change	lib/stp.c	/^    bool topology_change;           \/* 8.5.3.12: Received topology change? *\/$/;"	m	struct:stp	file:
topology_change_ack	lib/stp.c	/^    bool topology_change_ack;       \/* 8.5.5.8: Flag for next config BPDU. *\/$/;"	m	struct:stp_port	file:
topology_change_detected	lib/stp.c	/^    bool topology_change_detected;  \/* 8.5.3.11: Detected a topology change? *\/$/;"	m	struct:stp	file:
topology_change_timer	lib/stp.c	/^    struct stp_timer topology_change_timer; \/* 8.5.4.3. *\/$/;"	m	struct:stp	typeref:struct:stp::stp_timer	file:
total	lib/tag.h	/^    tag_type total;$/;"	m	struct:tag_set
total_len	include/openflow/openflow.h	/^	uint16_t total_len;     \/* Full length of frame. *\/$/;"	m	struct:ofp_packet_in
total_len	oflib/ofl-messages.h	/^    uint16_t                    total_len;   \/* Full length of frame. *\/$/;"	m	struct:ofl_msg_packet_in
total_time_connected	lib/rconn.c	/^    unsigned long int total_time_connected;$/;"	m	struct:rconn	file:
tp_dst	lib/flow.h	/^    uint16_t tp_dst;            \/* TCP\/UDP destination port. *\/$/;"	m	struct:flow
tp_dst	oflib/ofl-structs.h	/^    uint16_t   tp_dst;           \/* TCP\/UDP\/SCTP destination port, or ICMP code. *\/$/;"	m	struct:ofl_match
tp_dst	oflib/ofl-structs.h	/^    uint16_t   tp_dst;           \/* TCP\/UDP\/SCTP destination port, or ICMP code. *\/$/;"	m	struct:ofl_match_standard
tp_src	lib/flow.h	/^    uint16_t tp_src;            \/* TCP\/UDP source port. *\/$/;"	m	struct:flow
tp_src	oflib/ofl-structs.h	/^    uint16_t   tp_src;           \/* TCP\/UDP\/SCTP source port, or ICMP type. *\/$/;"	m	struct:ofl_match
tp_src	oflib/ofl-structs.h	/^    uint16_t   tp_src;           \/* TCP\/UDP\/SCTP source port, or ICMP type. *\/$/;"	m	struct:ofl_match_standard
transact	utilities/vlogconf.c	/^transact(struct vlog_client *client, const char *request, bool *ok)$/;"	f	file:
transact_ack	utilities/vlogconf.c	/^transact_ack(struct vlog_client *client, const char* request, bool *ok)$/;"	f	file:
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
try_send	lib/rconn.c	/^try_send(struct rconn *rc)$/;"	f	file:
ts	nbee_link/nbee_link.h	/^	struct timeval ts;	\/* time stamp *\/$/;"	m	struct:pcap_pkthdr	typeref:struct:pcap_pkthdr::timeval
ts_sec	lib/pcap.c	/^    uint32_t ts_sec;         \/* timestamp seconds *\/$/;"	m	struct:pcaprec_hdr	file:
ts_usec	lib/pcap.c	/^    uint32_t ts_usec;        \/* timestamp microseconds *\/$/;"	m	struct:pcaprec_hdr	file:
tun_id	include/openflow/nicira-ext.h	/^    uint32_t tun_id;                \/* Tunnel ID. *\/$/;"	m	struct:nx_action_set_tunnel
tx_bytes	include/openflow/openflow.h	/^	uint64_t tx_bytes;     \/* Number of transmitted bytes. *\/$/;"	m	struct:ofp_port_stats
tx_bytes	include/openflow/openflow.h	/^	uint64_t tx_bytes;   \/* Number of transmitted bytes. *\/$/;"	m	struct:ofp_queue_stats
tx_bytes	oflib/ofl-structs.h	/^    uint64_t   tx_bytes;     \/* Number of transmitted bytes. *\/$/;"	m	struct:ofl_port_stats
tx_bytes	oflib/ofl-structs.h	/^    uint64_t   tx_bytes;   \/* Number of transmitted bytes. *\/$/;"	m	struct:ofl_queue_stats
tx_dropped	include/openflow/openflow.h	/^	uint64_t tx_dropped;   \/* Number of packets dropped by TX. *\/$/;"	m	struct:ofp_port_stats
tx_dropped	oflib/ofl-structs.h	/^    uint64_t   tx_dropped;   \/* Number of packets dropped by TX. *\/$/;"	m	struct:ofl_port_stats
tx_errors	include/openflow/openflow.h	/^	uint64_t tx_errors;    \/* Number of transmit errors. This is a super-set$/;"	m	struct:ofp_port_stats
tx_errors	include/openflow/openflow.h	/^	uint64_t tx_errors;  \/* Number of packets dropped due to overrun. *\/$/;"	m	struct:ofp_queue_stats
tx_errors	oflib/ofl-structs.h	/^    uint64_t   tx_errors;    \/* Number of transmit errors. This is a super-set$/;"	m	struct:ofl_port_stats
tx_errors	oflib/ofl-structs.h	/^    uint64_t   tx_errors;  \/* Number of packets dropped due to overrun. *\/$/;"	m	struct:ofl_queue_stats
tx_packets	include/openflow/openflow.h	/^	uint64_t tx_packets;   \/* Number of transmitted packets. *\/$/;"	m	struct:ofp_port_stats
tx_packets	include/openflow/openflow.h	/^	uint64_t tx_packets; \/* Number of transmitted packets. *\/$/;"	m	struct:ofp_queue_stats
tx_packets	oflib/ofl-structs.h	/^    uint64_t   tx_packets;   \/* Number of transmitted packets. *\/$/;"	m	struct:ofl_port_stats
tx_packets	oflib/ofl-structs.h	/^    uint64_t   tx_packets; \/* Number of transmitted packets. *\/$/;"	m	struct:ofl_queue_stats
tx_waiter	lib/vconn-ssl.c	/^    struct poll_waiter *tx_waiter;$/;"	m	struct:ssl_vconn	typeref:struct:ssl_vconn::poll_waiter	file:
tx_waiter	lib/vconn-stream.c	/^    struct poll_waiter *tx_waiter;$/;"	m	struct:stream_vconn	typeref:struct:stream_vconn::poll_waiter	file:
tx_want	lib/vconn-ssl.c	/^    int rx_want, tx_want;$/;"	m	struct:ssl_vconn	file:
txbuf	lib/vconn-ssl.c	/^    struct ofpbuf *txbuf;$/;"	m	struct:ssl_vconn	typeref:struct:ssl_vconn::ofpbuf	file:
txbuf	lib/vconn-stream.c	/^    struct ofpbuf *txbuf;$/;"	m	struct:stream_vconn	typeref:struct:stream_vconn::ofpbuf	file:
txq	lib/rconn.c	/^    struct ofp_queue txq;$/;"	m	struct:rconn	typeref:struct:rconn::ofp_queue	file:
txqlen	lib/netdev.c	/^    int txqlen;$/;"	m	struct:netdev	file:
type	include/openflow/bme-ext.h	/^    uint16_t type;                \/* BME_SET_METADATA_FROM_PACKET *\/$/;"	m	struct:ofp_bme_set_metadata
type	include/openflow/bme-ext.h	/^    uint16_t type;           \/* BME_SERIALIZE *\/$/;"	m	struct:ofp_bme_serialize
type	include/openflow/bme-ext.h	/^    uint16_t type;           \/* BME_UPDATE_DISTANCE_IN_METADATA *\/$/;"	m	struct:ofp_bme_update_distance
type	include/openflow/bme-ext.h	/^    uint16_t type;           \/* BME_XOR_* *\/$/;"	m	struct:ofp_bme_xor_packet
type	include/openflow/bme-ext.h	/^    uint16_t type;$/;"	m	struct:bme_instruction_header
type	include/openflow/bme-ext.h	/^    uint16_t type;$/;"	m	struct:ofp_bme_action_header
type	include/openflow/bme-ext.h	/^  uint16_t type;                \/* BME_OUTPUT_BY_METADATA *\/$/;"	m	struct:bme_output_by_metadata
type	include/openflow/bme-ext.h	/^  uint16_t type;                \/* BME_SET_METADATA_FROM_COUNTER *\/$/;"	m	struct:ofp_bme_set_metadata_from_counter
type	include/openflow/bme-ext.h	/^  uint16_t type;                \/* BME_SET_MPLS_LABEL_FROM_COUNTER *\/$/;"	m	struct:ofp_bme_set_mpls_label
type	include/openflow/nicira-ext.h	/^    uint16_t type;                  \/* OFPAT_VENDOR. *\/$/;"	m	struct:nx_action_header
type	include/openflow/nicira-ext.h	/^    uint16_t type;                  \/* OFPAT_VENDOR. *\/$/;"	m	struct:nx_action_resubmit
type	include/openflow/nicira-ext.h	/^    uint16_t type;                  \/* OFPAT_VENDOR. *\/$/;"	m	struct:nx_action_set_tunnel
type	include/openflow/openflow.h	/^	uint16_t type;                       \/* One of OFPIT_*_ACTIONS *\/$/;"	m	struct:ofp_instruction_actions
type	include/openflow/openflow.h	/^	uint16_t type;          \/* OFPIT_WRITE_METADATA *\/$/;"	m	struct:ofp_instruction_write_metadata
type	include/openflow/openflow.h	/^	uint16_t type;         \/* OFPAT_EXPERIMENTER. *\/$/;"	m	struct:ofp_action_experimenter_header
type	include/openflow/openflow.h	/^	uint16_t type;         \/* OFPET_EXPERIMENTER. *\/$/;"	m	struct:ofp_error_experimenter_msg
type	include/openflow/openflow.h	/^	uint16_t type;      \/* OFPAT_POP_MPLS. *\/$/;"	m	struct:ofp_action_pop_mpls
type	include/openflow/openflow.h	/^	uint16_t type;      \/* OFPAT_PUSH_VLAN\/MPLS\/PBB. *\/$/;"	m	struct:ofp_action_push
type	include/openflow/openflow.h	/^	uint16_t type;     \/* OFPAT_GROUP. *\/$/;"	m	struct:ofp_action_group
type	include/openflow/openflow.h	/^	uint16_t type;     \/* OFPAT_SET_QUEUE. *\/$/;"	m	struct:ofp_action_set_queue
type	include/openflow/openflow.h	/^	uint16_t type;    \/* OFPAT_OUTPUT. *\/$/;"	m	struct:ofp_action_output
type	include/openflow/openflow.h	/^	uint16_t type;    \/* OFPAT_SET_MPLS_LABEL. *\/$/;"	m	struct:ofp_action_mpls_label
type	include/openflow/openflow.h	/^	uint16_t type;    \/* OFPAT_SET_MPLS_TTL. *\/$/;"	m	struct:ofp_action_mpls_ttl
type	include/openflow/openflow.h	/^	uint16_t type;    \/* OFPIT_GOTO_TABLE *\/$/;"	m	struct:ofp_instruction_goto_table
type	include/openflow/openflow.h	/^	uint16_t type;   \/* One of the OFPMP_* constants. *\/$/;"	m	struct:ofp_multipart_reply
type	include/openflow/openflow.h	/^	uint16_t type;   \/* One of the OFPMP_* constants. *\/$/;"	m	struct:ofp_multipart_request
type	include/openflow/openflow.h	/^	uint16_t type;  \/* OFPAT_SET_NW_TTL. *\/$/;"	m	struct:ofp_action_nw_ttl
type	include/openflow/openflow.h	/^	uint16_t type; \/* OFPAT_SET_FIELD. *\/$/;"	m	struct:ofp_action_set_field
type	include/openflow/openflow.h	/^	uint16_t type; \/* One of OFPAT_*. *\/$/;"	m	struct:ofp_action_header
type	include/openflow/openflow.h	/^	uint16_t type;$/;"	m	struct:ofp_error_msg
type	include/openflow/openflow.h	/^	uint8_t type;                 \/* One of OFPGT_*. *\/$/;"	m	struct:ofp_group_mod
type	include/openflow/openflow.h	/^	uint8_t type;      \/* One of OFPGT_*. *\/$/;"	m	struct:ofp_group_desc_stats
type	include/openflow/openflow.h	/^	uint8_t type;    \/* One of the OFPT_ constants. *\/$/;"	m	struct:ofp_header
type	include/openflow/openflow.h	/^        uint16_t type;    \/* OFPAT_SET_PARITY_MPLS_LABEL. *\/$/;"	m	struct:ofp_action_parity_mpls_label
type	include/openflow/openflow.h	/^        uint16_t type;    \/* OFPAT_SET_PARITY_MPLS_LABEL. *\/$/;"	m	struct:ofp_action_set_mpls_label_from_counter
type	include/openflow/openflow.h	/^        uint16_t type;    \/* OFPAT_SET_PARITY_MPLS_LABEL. *\/$/;"	m	struct:ofp_action_xor_decode
type	include/openflow/openflow.h	/^        uint16_t type;    \/* OFPAT_SET_PARITY_MPLS_LABEL. *\/$/;"	m	struct:ofp_action_xor_encode
type	include/openflow/openflow.h	/^        uint16_t type; \/* One of OFPMT_* *\/$/;"	m	struct:ofp_match
type	include/openflow/openflow.h	/^    uint16_t type;                \/* Instruction type *\/$/;"	m	struct:ofp_instruction
type	include/openflow/openflow.h	/^    uint16_t type;   \/* One of OFPTFPT_NEXT_TABLES,$/;"	m	struct:ofp_table_feature_prop_next_tables
type	include/openflow/openflow.h	/^    uint16_t type;  \/* One of OFPTFPT_NEXT_TABLES,$/;"	m	struct:ofp_table_feature_prop_header
type	include/openflow/openflow.h	/^    uint16_t type; \/* OFPIT_METER *\/$/;"	m	struct:ofp_instruction_meter
type	include/openflow/openflow.h	/^    uint16_t type; \/* OFPMBT_DROP. *\/$/;"	m	struct:ofp_meter_band_drop
type	include/openflow/openflow.h	/^    uint16_t type; \/* OFPMBT_DSCP_REMARK. *\/$/;"	m	struct:ofp_meter_band_dscp_remark
type	include/openflow/openflow.h	/^    uint16_t type; \/* One of OFPMBT_*. *\/$/;"	m	struct:ofp_meter_band_experimenter
type	include/openflow/openflow.h	/^    uint16_t type; \/* One of OFPMBT_*. *\/$/;"	m	struct:ofp_meter_band_header
type	include/openflow/openflow.h	/^    uint16_t type; \/* One of OFPTFPT_INSTRUCTIONS,$/;"	m	struct:ofp_table_feature_prop_instructions
type	include/openflow/openflow.h	/^    uint16_t type; \/* One of OFPTFPT_MATCH,$/;"	m	struct:ofp_table_feature_prop_oxm
type	include/openflow/openflow.h	/^    uint16_t type; \/* One of OFPTFPT_WRITE_ACTIONS,$/;"	m	struct:ofp_table_feature_prop_actions
type	lib/dhcp.c	/^    enum dhcp_arg_type type;    \/* Argument type. *\/$/;"	m	struct:option_class	typeref:enum:option_class::dhcp_arg_type	file:
type	lib/dhcp.h	/^    enum dhcp_msg_type type;    \/* DHCP_CODE_DHCP_MSG_TYPE option argument. *\/$/;"	m	struct:dhcp_msg	typeref:enum:dhcp_msg::dhcp_msg_type
type	lib/netlink.h	/^    enum nl_attr_type type;$/;"	m	struct:nl_policy	typeref:enum:nl_policy::nl_attr_type
type	lib/ofp.h	/^    uint16_t type;$/;"	m	union:ofp_action
type	lib/packets.h	/^    uint8_t type;$/;"	m	struct:ipv6_nd_options_hd
type	lib/vconn-ssl.c	/^    enum session_type type;$/;"	m	struct:ssl_vconn	typeref:enum:ssl_vconn::session_type	file:
type	oflib-exp/ofl-exp-bme.h	/^    uint32_t type;                     \/* BME_SERIALIZE *\/$/;"	m	struct:ofl_bme_serialize
type	oflib-exp/ofl-exp-bme.h	/^    uint32_t type;                     \/* BME_SET_METADATA_FROM_COUNTER *\/$/;"	m	struct:ofl_bme_set_metadata_from_counter
type	oflib-exp/ofl-exp-bme.h	/^    uint32_t type;                     \/* BME_SET_METADATA_FROM_PACKET *\/$/;"	m	struct:ofl_bme_set_metadata
type	oflib-exp/ofl-exp-bme.h	/^    uint32_t type;                     \/* BME_SET_MPLS_LABEL_FROM_COUNTER *\/$/;"	m	struct:ofl_bme_set_mpls_label
type	oflib-exp/ofl-exp-bme.h	/^    uint32_t type;                     \/* BME_SET_MPLS_LABEL_FROM_COUNTER *\/$/;"	m	struct:ofl_bme_update_distance
type	oflib-exp/ofl-exp-bme.h	/^    uint32_t type;                     \/* BME_XOR_* *\/$/;"	m	struct:ofl_bme_xor_packet
type	oflib-exp/ofl-exp-bme.h	/^    uint32_t type;$/;"	m	struct:ofl_bme_action_header
type	oflib-exp/ofl-exp-nicira.h	/^    uint32_t   type;$/;"	m	struct:ofl_exp_nicira_msg_header
type	oflib-exp/ofl-exp-openflow.h	/^    uint32_t   type;$/;"	m	struct:ofl_exp_openflow_msg_header
type	oflib/ofl-actions.h	/^    enum ofp_action_type   type;   \/* One of OFPAT_*. *\/$/;"	m	struct:ofl_action_header	typeref:enum:ofl_action_header::ofp_action_type
type	oflib/ofl-messages.h	/^    enum ofp_error_type   type;$/;"	m	struct:ofl_msg_error	typeref:enum:ofl_msg_error::ofp_error_type
type	oflib/ofl-messages.h	/^    enum ofp_multipart_types   type;  \/* One of the OFPMP_* constants. *\/$/;"	m	struct:ofl_msg_multipart_reply_header	typeref:enum:ofl_msg_multipart_reply_header::ofp_multipart_types
type	oflib/ofl-messages.h	/^    enum ofp_multipart_types   type;  \/* One of the OFPMP_* constants. *\/$/;"	m	struct:ofl_msg_multipart_request_header	typeref:enum:ofl_msg_multipart_request_header::ofp_multipart_types
type	oflib/ofl-messages.h	/^    enum ofp_type   type;   \/* One of the OFPT_ constants. *\/$/;"	m	struct:ofl_msg_header	typeref:enum:ofl_msg_header::ofp_type
type	oflib/ofl-messages.h	/^    uint8_t                      type;        \/* One of OFPGT_*. *\/$/;"	m	struct:ofl_msg_group_mod
type	oflib/ofl-structs.h	/^    enum ofp_instruction_type   type; \/* Instruction type *\/$/;"	m	struct:ofl_instruction_header	typeref:enum:ofl_instruction_header::ofp_instruction_type
type	oflib/ofl-structs.h	/^    enum ofp_queue_properties   type; \/* One of OFPQT_. *\/$/;"	m	struct:ofl_queue_prop_header	typeref:enum:ofl_queue_prop_header::ofp_queue_properties
type	oflib/ofl-structs.h	/^    uint16_t   type;             \/* One of OFPMT_* *\/$/;"	m	struct:ofl_match_header
type	oflib/ofl-structs.h	/^    uint16_t type;                \/* Table feature type *\/$/;"	m	struct:ofl_table_feature_prop_header
type	oflib/ofl-structs.h	/^    uint16_t type; \/* OFPMBT_DROP. *\/$/;"	m	struct:ofl_meter_band_drop
type	oflib/ofl-structs.h	/^    uint16_t type; \/* OFPMBT_DSCP_REMARK. *\/$/;"	m	struct:ofl_meter_band_dscp_remark
type	oflib/ofl-structs.h	/^    uint16_t type; \/* One of OFPMBT_*. *\/$/;"	m	struct:ofl_meter_band_experimenter
type	oflib/ofl-structs.h	/^    uint16_t type; \/* One of OFPMBT_*. *\/$/;"	m	struct:ofl_meter_band_header
type	oflib/ofl-structs.h	/^    uint8_t             type;        \/* One of OFPGT_*. *\/$/;"	m	struct:ofl_group_desc_stats
types	include/openflow/openflow.h	/^	uint32_t types;         \/* Bitmap of OFPGT_* values supported. *\/$/;"	m	struct:ofp_group_features_stats
types	lib/dhcp.c	/^static struct arg_type types[] = {$/;"	v	typeref:struct:arg_type	file:
types	oflib/ofl-messages.h	/^    uint32_t types;$/;"	m	struct:ofl_msg_multipart_reply_group_features
u16	lib/netdev.c	89;"	d	file:
u32	lib/netdev.c	90;"	d	file:
u64	lib/netdev.c	91;"	d	file:
u8	lib/netdev.c	88;"	d	file:
udatapath_cmd	udatapath/udatapath.c	/^udatapath_cmd(int argc, char *argv[])$/;"	f
udatapath_libudatapath_a_AR	Makefile	/^udatapath_libudatapath_a_AR = $(AR) $(ARFLAGS)$/;"	m
udatapath_libudatapath_a_CPPFLAGS	udatapath/automake.mk	/^udatapath_libudatapath_a_CPPFLAGS = $(AM_CPPFLAGS)$/;"	m
udatapath_libudatapath_a_LIBADD	Makefile	/^udatapath_libudatapath_a_LIBADD =$/;"	m
udatapath_libudatapath_a_OBJECTS	Makefile	/^udatapath_libudatapath_a_OBJECTS =  \\$/;"	m
udatapath_libudatapath_a_SOURCES	udatapath/automake.mk	/^udatapath_libudatapath_a_SOURCES = \\$/;"	m
udatapath_ofdatapath_CPPFLAGS	Makefile	/^udatapath_ofdatapath_CPPFLAGS = $(AM_CPPFLAGS) $(am__append_5)$/;"	m
udatapath_ofdatapath_CPPFLAGS	udatapath/automake.mk	/^udatapath_ofdatapath_CPPFLAGS = $(AM_CPPFLAGS)$/;"	m
udatapath_ofdatapath_DEPENDENCIES	Makefile	/^udatapath_ofdatapath_DEPENDENCIES = lib\/libopenflow.a oflib\/liboflib.a \\$/;"	m
udatapath_ofdatapath_LDADD	Makefile	/^udatapath_ofdatapath_LDADD = lib\/libopenflow.a oflib\/liboflib.a oflib-exp\/liboflib_exp.a nbee_link\/libnbee_link.a $(SSL_LIBS) $(FAULT_LIBS)$/;"	m
udatapath_ofdatapath_LDADD	udatapath/automake.mk	/^udatapath_ofdatapath_LDADD = lib\/libopenflow.a oflib\/liboflib.a oflib-exp\/liboflib_exp.a nbee_link\/libnbee_link.a $(SSL_LIBS) $(FAULT_LIBS)$/;"	m
udatapath_ofdatapath_OBJECTS	Makefile	/^udatapath_ofdatapath_OBJECTS = $(am_udatapath_ofdatapath_OBJECTS)$/;"	m
udatapath_ofdatapath_SOURCES	Makefile	/^udatapath_ofdatapath_SOURCES = \\$/;"	m
udatapath_ofdatapath_SOURCES	udatapath/automake.mk	/^udatapath_ofdatapath_SOURCES = \\$/;"	m
udp	lib/packets.h	/^   struct udp_header      * udp;$/;"	m	struct:protocols_std	typeref:struct:protocols_std::udp_header
udp_csum	lib/packets.h	/^    uint16_t udp_csum;$/;"	m	struct:udp_header
udp_dst	lib/packets.h	/^    uint16_t udp_dst;$/;"	m	struct:udp_header
udp_header	lib/packets.h	/^struct udp_header {$/;"	s
udp_len	lib/packets.h	/^    uint16_t udp_len;$/;"	m	struct:udp_header
udp_src	lib/packets.h	/^    uint16_t udp_src;$/;"	m	struct:udp_header
unblock_sigalrm	lib/timeval.c	/^unblock_sigalrm(const sigset_t *oldsigs)$/;"	f	file:
unblock_sigchld	lib/process.c	/^unblock_sigchld(const sigset_t *oldsigs)$/;"	f	file:
unix_open	lib/vconn-unix.c	/^unix_open(const char *name, char *suffix, struct vconn **vconnp)$/;"	f	file:
unix_vconn_class	lib/vconn-unix.c	/^struct vconn_class unix_vconn_class = {$/;"	v	typeref:struct:vconn_class
unknown	lib/ofpstat.h	/^		uint64_t unknown;$/;"	m	struct:ofpstat::__anon2
unknown	lib/ofpstat.h	/^		uint64_t unknown;$/;"	m	struct:ofpstat::__anon3
unknown	lib/ofpstat.h	/^		uint64_t unknown;$/;"	m	struct:ofpstat::__anon4
unlikely	lib/compiler.h	44;"	d
unlink_files	lib/fatal-signal.c	/^unlink_files(void *aux UNUSED)$/;"	f	file:
unpack	oflib/ofl.h	/^    ofl_err (*unpack)           (struct ofp_action_header *src, size_t *len, struct ofl_action_header **dst);$/;"	m	struct:ofl_exp_act
unpack	oflib/ofl.h	/^    ofl_err (*unpack)           (struct ofp_header *oh, size_t *len, struct ofl_msg_experimenter **msg);$/;"	m	struct:ofl_exp_msg
unpack	oflib/ofl.h	/^    ofl_err (*unpack)          (struct ofp_instruction *src, size_t *len, struct ofl_instruction_header **dst);$/;"	m	struct:ofl_exp_inst
unpack	oflib/ofl.h	/^    ofl_err (*unpack)         (struct ofp_match *src, size_t *len, struct ofl_match_header **dst);$/;"	m	struct:ofl_exp_match
update_instruction_length	lib/ofp.c	/^update_instruction_length(struct ofpbuf *buffer, size_t oia_offset)$/;"	f
update_min_level	lib/vlog.c	/^update_min_level(enum vlog_module module)$/;"	f	file:
update_netdev_monitor_devices	secchan/port-watcher.c	/^update_netdev_monitor_devices(struct port_watcher *pw)$/;"	f	file:
update_openflow_length	lib/ofp.c	/^update_openflow_length(struct ofpbuf *buffer)$/;"	f
update_phy_port	secchan/port-watcher.c	/^update_phy_port(struct port_watcher *pw, struct ofp_port *opp,$/;"	f	file:
update_resolv_conf	secchan/secchan.h	/^    bool update_resolv_conf;          \/* Update \/etc\/resolv.conf? *\/$/;"	m	struct:settings
usage	secchan/secchan.c	/^usage(void)$/;"	f	file:
usage	udatapath/udatapath.c	/^usage(void)$/;"	f	file:
usage	utilities/dpctl.c	/^usage(void)$/;"	f	file:
usage	utilities/ofp-discover.c	/^usage(void)$/;"	f	file:
usage	utilities/ofp-kill.c	/^usage(void)$/;"	f	file:
usage	utilities/vlogconf.c	/^usage(char *prog_name, int exit_code)$/;"	f	file:
use_multiple_connections	udatapath/udatapath.c	/^static bool use_multiple_connections = false;$/;"	v	file:
utilities_dpctl_DEPENDENCIES	Makefile	/^utilities_dpctl_DEPENDENCIES = lib\/libopenflow.a oflib\/liboflib.a \\$/;"	m
utilities_dpctl_LDADD	Makefile	/^utilities_dpctl_LDADD = lib\/libopenflow.a oflib\/liboflib.a oflib-exp\/liboflib_exp.a $(FAULT_LIBS) $(SSL_LIBS)$/;"	m
utilities_dpctl_LDADD	utilities/automake.mk	/^utilities_dpctl_LDADD = lib\/libopenflow.a oflib\/liboflib.a oflib-exp\/liboflib_exp.a $(FAULT_LIBS) $(SSL_LIBS)$/;"	m
utilities_dpctl_OBJECTS	Makefile	/^utilities_dpctl_OBJECTS = $(am_utilities_dpctl_OBJECTS)$/;"	m
utilities_dpctl_SOURCES	Makefile	/^utilities_dpctl_SOURCES = utilities\/dpctl.c$/;"	m
utilities_dpctl_SOURCES	utilities/automake.mk	/^utilities_dpctl_SOURCES = utilities\/dpctl.c$/;"	m
utilities_ofp_discover_DEPENDENCIES	Makefile	/^utilities_ofp_discover_DEPENDENCIES = lib\/libopenflow.a$/;"	m
utilities_ofp_discover_LDADD	Makefile	/^utilities_ofp_discover_LDADD = lib\/libopenflow.a$/;"	m
utilities_ofp_discover_LDADD	utilities/automake.mk	/^utilities_ofp_discover_LDADD = lib\/libopenflow.a$/;"	m
utilities_ofp_discover_OBJECTS	Makefile	/^utilities_ofp_discover_OBJECTS = $(am_utilities_ofp_discover_OBJECTS)$/;"	m
utilities_ofp_discover_SOURCES	Makefile	/^utilities_ofp_discover_SOURCES = utilities\/ofp-discover.c$/;"	m
utilities_ofp_discover_SOURCES	utilities/automake.mk	/^utilities_ofp_discover_SOURCES = utilities\/ofp-discover.c$/;"	m
utilities_ofp_kill_DEPENDENCIES	Makefile	/^utilities_ofp_kill_DEPENDENCIES = lib\/libopenflow.a$/;"	m
utilities_ofp_kill_LDADD	Makefile	/^utilities_ofp_kill_LDADD = lib\/libopenflow.a$/;"	m
utilities_ofp_kill_LDADD	utilities/automake.mk	/^utilities_ofp_kill_LDADD = lib\/libopenflow.a$/;"	m
utilities_ofp_kill_OBJECTS	Makefile	/^utilities_ofp_kill_OBJECTS = $(am_utilities_ofp_kill_OBJECTS)$/;"	m
utilities_ofp_kill_SOURCES	Makefile	/^utilities_ofp_kill_SOURCES = utilities\/ofp-kill.c$/;"	m
utilities_ofp_kill_SOURCES	utilities/automake.mk	/^utilities_ofp_kill_SOURCES = utilities\/ofp-kill.c$/;"	m
utilities_vlogconf_DEPENDENCIES	Makefile	/^utilities_vlogconf_DEPENDENCIES = lib\/libopenflow.a$/;"	m
utilities_vlogconf_LDADD	Makefile	/^utilities_vlogconf_LDADD = lib\/libopenflow.a$/;"	m
utilities_vlogconf_LDADD	utilities/automake.mk	/^utilities_vlogconf_LDADD = lib\/libopenflow.a$/;"	m
utilities_vlogconf_OBJECTS	Makefile	/^utilities_vlogconf_OBJECTS = $(am_utilities_vlogconf_OBJECTS)$/;"	m
utilities_vlogconf_SOURCES	Makefile	/^utilities_vlogconf_SOURCES = utilities\/vlogconf.c$/;"	m
utilities_vlogconf_SOURCES	utilities/automake.mk	/^utilities_vlogconf_SOURCES = utilities\/vlogconf.c$/;"	m
va_copy	lib/util.h	48;"	d
va_copy	lib/util.h	50;"	d
valid	udatapath/packet_handle_std.h	/^   bool                        valid; \/* Set to true if the handler data is valid.$/;"	m	struct:packet_handle_std
validate_actions	lib/ofp.c	/^validate_actions(const union ofp_action *actions, size_t n_actions,$/;"	f
validate_dhcp_offer	secchan/discovery.c	/^validate_dhcp_offer(const struct dhcp_msg *msg, void *s_)$/;"	f	file:
validate_dhcp_offer	utilities/ofp-discover.c	/^validate_dhcp_offer(const struct dhcp_msg *msg, void *aux UNUSED)$/;"	f	file:
validate_offer	lib/dhcp-client.c	/^    bool (*validate_offer)(const struct dhcp_msg *, void *aux);$/;"	m	struct:dhclient	file:
validate_offered_options	lib/dhcp-client.c	/^validate_offered_options(struct dhclient *cli, const struct dhcp_msg *msg)$/;"	f	file:
validate_options	lib/dhcp.c	/^validate_options(struct dhcp_msg *msg)$/;"	f	file:
value	lib/stp.c	/^    int value;                   \/* Current value of timer, counting up. *\/$/;"	m	struct:stp_timer	file:
value	oflib/ofl-structs.h	/^    uint8_t *value;     \/* TLV value *\/$/;"	m	struct:ofl_match_tlv
vconn	lib/rconn.c	/^    struct vconn *vconn;$/;"	m	struct:rconn	typeref:struct:rconn::vconn	file:
vconn	lib/vconn-netlink.c	/^    struct vconn vconn;$/;"	m	struct:netlink_vconn	typeref:struct:netlink_vconn::vconn	file:
vconn	lib/vconn-provider.h	/^struct vconn {$/;"	s
vconn	lib/vconn-ssl.c	/^    struct vconn vconn;$/;"	m	struct:ssl_vconn	typeref:struct:ssl_vconn::vconn	file:
vconn	lib/vconn-stream.c	/^    struct vconn vconn;$/;"	m	struct:stream_vconn	typeref:struct:stream_vconn::vconn	file:
vconn_assert_class	lib/vconn-provider.h	/^static inline void vconn_assert_class(const struct vconn *vconn,$/;"	f
vconn_class	lib/vconn-provider.h	/^struct vconn_class {$/;"	s
vconn_classes	lib/vconn.c	/^static struct vconn_class *vconn_classes[] = {$/;"	v	typeref:struct:vconn_class	file:
vconn_close	lib/vconn.c	/^vconn_close(struct vconn *vconn)$/;"	f
vconn_connect	lib/vconn.c	/^vconn_connect(struct vconn *vconn)$/;"	f
vconn_connect_wait	lib/vconn.c	/^vconn_connect_wait(struct vconn *vconn)$/;"	f
vconn_get_ip	lib/vconn.c	/^vconn_get_ip(const struct vconn *vconn) $/;"	f
vconn_get_name	lib/vconn.c	/^vconn_get_name(const struct vconn *vconn)$/;"	f
vconn_init	lib/vconn.c	/^vconn_init(struct vconn *vconn, struct vconn_class *class, int connect_status,$/;"	f
vconn_is_reconnectable	lib/vconn.c	/^vconn_is_reconnectable(const struct vconn *vconn)$/;"	f
vconn_name_without_subscription	secchan/secchan.c	/^vconn_name_without_subscription(const char *vconn_name)$/;"	f	file:
vconn_open	lib/vconn.c	/^vconn_open(const char *name, int min_version, struct vconn **vconnp)$/;"	f
vconn_open_block	lib/vconn.c	/^vconn_open_block(const char *name, int min_version, struct vconn **vconnp)$/;"	f
vconn_recv	lib/vconn.c	/^vconn_recv(struct vconn *vconn, struct ofpbuf **msgp)$/;"	f
vconn_recv_block	lib/vconn.c	/^vconn_recv_block(struct vconn *vconn, struct ofpbuf **msgp)$/;"	f
vconn_recv_wait	lib/vconn.c	/^vconn_recv_wait(struct vconn *vconn)$/;"	f
vconn_recv_xid	lib/vconn.c	/^vconn_recv_xid(struct vconn *vconn, uint32_t xid, struct ofpbuf **replyp)$/;"	f
vconn_send	lib/vconn.c	/^vconn_send(struct vconn *vconn, struct ofpbuf *msg)$/;"	f
vconn_send_block	lib/vconn.c	/^vconn_send_block(struct vconn *vconn, struct ofpbuf *msg)$/;"	f
vconn_send_wait	lib/vconn.c	/^vconn_send_wait(struct vconn *vconn)$/;"	f
vconn_ssl_is_configured	lib/vconn-ssl.c	/^vconn_ssl_is_configured(void) $/;"	f
vconn_ssl_is_configured	lib/vconn-ssl.h	/^static inline bool vconn_ssl_is_configured(void) $/;"	f
vconn_ssl_set_ca_cert_file	lib/vconn-ssl.c	/^vconn_ssl_set_ca_cert_file(const char *file_name, bool bootstrap)$/;"	f
vconn_ssl_set_certificate_file	lib/vconn-ssl.c	/^vconn_ssl_set_certificate_file(const char *file_name)$/;"	f
vconn_ssl_set_peer_ca_cert_file	lib/vconn-ssl.c	/^vconn_ssl_set_peer_ca_cert_file(const char *file_name)$/;"	f
vconn_ssl_set_private_key_file	lib/vconn-ssl.c	/^vconn_ssl_set_private_key_file(const char *file_name)$/;"	f
vconn_state	lib/vconn.c	/^enum vconn_state {$/;"	g	file:
vconn_transact	lib/vconn.c	/^vconn_transact(struct vconn *vconn, struct ofpbuf *request,$/;"	f
vconn_usage	lib/vconn.c	/^vconn_usage(bool active, bool passive, bool bootstrap UNUSED)$/;"	f
vconn_wait	lib/vconn.c	/^vconn_wait(struct vconn *vconn, enum vconn_wait_type wait)$/;"	f
vconn_wait_type	lib/vconn.h	/^enum vconn_wait_type {$/;"	g
vcs_connecting	lib/vconn.c	/^vcs_connecting(struct vconn *vconn) $/;"	f	file:
vcs_recv_hello	lib/vconn.c	/^vcs_recv_hello(struct vconn *vconn)$/;"	f	file:
vcs_send_error	lib/vconn.c	/^vcs_send_error(struct vconn *vconn)$/;"	f	file:
vcs_send_hello	lib/vconn.c	/^vcs_send_hello(struct vconn *vconn)$/;"	f	file:
vendor	include/openflow/nicira-ext.h	/^    uint32_t vendor;                \/* NX_VENDOR_ID. *\/$/;"	m	struct:nx_action_header
vendor	include/openflow/nicira-ext.h	/^    uint32_t vendor;                \/* NX_VENDOR_ID. *\/$/;"	m	struct:nx_action_resubmit
vendor	include/openflow/nicira-ext.h	/^    uint32_t vendor;                \/* NX_VENDOR_ID. *\/$/;"	m	struct:nx_action_set_tunnel
vendor	include/openflow/nicira-ext.h	/^    uint32_t vendor;            \/* NX_VENDOR_ID. *\/$/;"	m	struct:nicira_header
vendor	include/openflow/nicira-ext.h	/^    uint32_t vendor;            \/* NX_VENDOR_ID. *\/$/;"	m	struct:nxt_tun_id_cookie
vendor	include/openflow/openflow-ext.h	/^    uint32_t vendor;            \/* OPENFLOW_VENDOR_ID. *\/$/;"	m	struct:ofp_extension_header
verify_fingerprint	utilities/ofp-pki.in	/^verify_fingerprint() {$/;"	f
version	include/openflow/openflow.h	/^	uint8_t version; \/* OFP_VERSION. *\/$/;"	m	struct:ofp_header
version	lib/netlink-protocol.h	/^    uint8_t version;$/;"	m	struct:genlmsghdr
version	lib/vconn-provider.h	/^    int version;$/;"	m	struct:vconn
version_major	lib/pcap.c	/^    uint16_t version_major;  \/* major version number *\/$/;"	m	struct:pcap_hdr	file:
version_minor	lib/pcap.c	/^    uint16_t version_minor;  \/* minor version number *\/$/;"	m	struct:pcap_hdr	file:
veth_dst	lib/packets.h	/^    uint8_t veth_dst[ETH_ADDR_LEN];$/;"	m	struct:vlan_eth_header
veth_next_type	lib/packets.h	/^    uint16_t veth_next_type;$/;"	m	struct:vlan_eth_header
veth_src	lib/packets.h	/^    uint8_t veth_src[ETH_ADDR_LEN];$/;"	m	struct:vlan_eth_header
veth_tci	lib/packets.h	/^    uint16_t veth_tci;          \/* Lowest 12 bits are VLAN ID. *\/$/;"	m	struct:vlan_eth_header
veth_type	lib/packets.h	/^    uint16_t veth_type;         \/* Always htons(ETH_TYPE_VLAN). *\/$/;"	m	struct:vlan_eth_header
vlan	lib/mac-learning.c	/^    uint16_t vlan;              \/* VLAN tag. *\/$/;"	m	struct:mac_entry	file:
vlan	lib/packets.h	/^   struct vlan_header     * vlan;$/;"	m	struct:protocols_std	typeref:struct:protocols_std::vlan_header
vlan_eth_header	lib/packets.h	/^struct vlan_eth_header {$/;"	s
vlan_header	lib/packets.h	/^struct vlan_header {$/;"	s
vlan_last	lib/packets.h	/^   struct vlan_header     * vlan_last; \/* points to the last VLAN header *\/$/;"	m	struct:protocols_std	typeref:struct:protocols_std::vlan_header
vlan_next_type	lib/packets.h	/^    uint16_t vlan_next_type;$/;"	m	struct:vlan_header
vlan_tag	lib/packets.h	/^struct vlan_tag {$/;"	s
vlan_tci	lib/packets.h	/^    uint16_t vlan_tci;          \/* Lowest 12 bits are VLAN ID. *\/$/;"	m	struct:vlan_header
vlan_tci	lib/packets.h	/^    uint16_t vlan_tci;$/;"	m	struct:vlan_tag
vlan_tp_id	lib/packets.h	/^    uint16_t vlan_tp_id;          \/* Lowest 12 bits are VLAN ID. *\/$/;"	m	struct:vlan_tag
vlan_vid_names	utilities/dpctl.h	/^static struct names16 vlan_vid_names[] = {$/;"	v	typeref:struct:names16
vlog	lib/vlog.c	/^vlog(enum vlog_module module, enum vlog_level level, const char *message, ...)$/;"	f
vlog_client	lib/vlog-socket.c	/^struct vlog_client {$/;"	s	file:
vlog_client_close	lib/vlog-socket.c	/^vlog_client_close(struct vlog_client *client)$/;"	f
vlog_client_connect	lib/vlog-socket.c	/^vlog_client_connect(const char *path, struct vlog_client **clientp)$/;"	f
vlog_client_recv	lib/vlog-socket.c	/^vlog_client_recv(struct vlog_client *client, char **reply)$/;"	f
vlog_client_send	lib/vlog-socket.c	/^vlog_client_send(struct vlog_client *client, const char *request)$/;"	f
vlog_client_target	lib/vlog-socket.c	/^vlog_client_target(const struct vlog_client *client)$/;"	f
vlog_client_transact	lib/vlog-socket.c	/^vlog_client_transact(struct vlog_client *client,$/;"	f
vlog_exit	lib/vlog.c	/^vlog_exit(void) $/;"	f
vlog_facility	lib/vlog.h	/^enum vlog_facility {$/;"	g
vlog_get_facility_name	lib/vlog.c	/^vlog_get_facility_name(enum vlog_facility facility) $/;"	f
vlog_get_facility_val	lib/vlog.c	/^vlog_get_facility_val(const char *name) $/;"	f
vlog_get_level	lib/vlog.c	/^vlog_get_level(enum vlog_module module, enum vlog_facility facility) $/;"	f
vlog_get_level_name	lib/vlog.c	/^vlog_get_level_name(enum vlog_level level)$/;"	f
vlog_get_level_val	lib/vlog.c	/^vlog_get_level_val(const char *name) $/;"	f
vlog_get_levels	lib/vlog.c	/^vlog_get_levels(void)$/;"	f
vlog_get_log_file	lib/vlog.c	/^vlog_get_log_file(void)$/;"	f
vlog_get_module_name	lib/vlog.c	/^const char *vlog_get_module_name(enum vlog_module module) $/;"	f
vlog_get_module_val	lib/vlog.c	/^vlog_get_module_val(const char *name) $/;"	f
vlog_init	lib/vlog.c	/^vlog_init(void) $/;"	f
vlog_is_enabled	lib/vlog.c	/^vlog_is_enabled(enum vlog_module module, enum vlog_level level)$/;"	f
vlog_level	lib/vlog.h	/^enum vlog_level {$/;"	g
vlog_module	lib/vlog.h	/^enum vlog_module {$/;"	g
vlog_rate_limit	lib/vlog.c	/^vlog_rate_limit(enum vlog_module module, enum vlog_level level,$/;"	f
vlog_rate_limit	lib/vlog.h	/^struct vlog_rate_limit {$/;"	s
vlog_reopen_log_file	lib/vlog.c	/^vlog_reopen_log_file(void)$/;"	f
vlog_server	lib/vlog-socket.c	/^struct vlog_server {$/;"	s	file:
vlog_server_close	lib/vlog-socket.c	/^vlog_server_close(struct vlog_server *server)$/;"	f
vlog_server_listen	lib/vlog-socket.c	/^vlog_server_listen(const char *path, struct vlog_server **serverp)$/;"	f
vlog_set_levels	lib/vlog.c	/^vlog_set_levels(enum vlog_module module, enum vlog_facility facility,$/;"	f
vlog_set_levels_from_string	lib/vlog.c	/^vlog_set_levels_from_string(const char *s_)$/;"	f
vlog_set_log_file	lib/vlog.c	/^vlog_set_log_file(const char *file_name)$/;"	f
vlog_set_pattern	lib/vlog.c	/^vlog_set_pattern(enum vlog_facility facility, const char *pattern)$/;"	f
vlog_set_verbosity	lib/vlog.c	/^vlog_set_verbosity(const char *arg)$/;"	f
vlog_usage	lib/vlog.c	/^vlog_usage(void) $/;"	f
vlog_valist	lib/vlog.c	/^vlog_valist(enum vlog_module module, enum vlog_level level,$/;"	f
wait	lib/vconn-provider.h	/^    void (*wait)(struct pvconn *pvconn);$/;"	m	struct:pvconn_class
wait	lib/vconn-provider.h	/^    void (*wait)(struct vconn *vconn, enum vconn_wait_type type);$/;"	m	struct:vconn_class
wait_cb	secchan/secchan.h	/^    void (*wait_cb)(void *aux);$/;"	m	struct:hook_class
waiter	lib/vlog-socket.c	/^    struct poll_waiter *waiter;$/;"	m	struct:vlog_server	typeref:struct:vlog_server::poll_waiter	file:
waiters	lib/poll-loop.c	/^static struct list waiters = LIST_INITIALIZER(&waiters);$/;"	v	typeref:struct:list	file:
want_to_poll_events	lib/vconn-ssl.c	/^want_to_poll_events(int want)$/;"	f	file:
watch_group	include/openflow/openflow.h	/^	uint32_t watch_group;                \/* Group whose state affects whether this$/;"	m	struct:ofp_bucket
watch_group	oflib/ofl-structs.h	/^    uint32_t   watch_group; \/* Group whose state affects whether this$/;"	m	struct:ofl_bucket
watch_port	include/openflow/openflow.h	/^	uint32_t watch_port;                 \/* Port whose state affects whether this$/;"	m	struct:ofp_bucket
watch_port	oflib/ofl-structs.h	/^    uint32_t   watch_port;  \/* Port whose state affects whether this$/;"	m	struct:ofl_bucket
wc_supported	include/openflow/of_hw_api.h	/^    uint32_t wc_supported;       \/* Bitmap of OFPFW_* supported wildcards *\/$/;"	m	struct:of_hw_driver_caps
weight	include/openflow/openflow.h	/^	uint16_t weight;                     \/* Relative weight of bucket. Only$/;"	m	struct:ofp_bucket
weight	oflib/ofl-structs.h	/^    uint16_t   weight;      \/* Relative weight of bucket. Only$/;"	m	struct:ofl_bucket
wildcarded	udatapath/flow_table.c	/^uint32_t wildcarded[] = {OXM_OF_METADATA, OXM_OF_ETH_DST, OXM_OF_ETH_SRC, OXM_OF_VLAN_VID, OXM_OF_IPV4_SRC,$/;"	v
wildcards	oflib/ofl-structs.h	/^    uint32_t   wildcards;        \/* Wildcard fields. *\/$/;"	m	struct:ofl_match
wildcards	oflib/ofl-structs.h	/^    uint32_t   wildcards;        \/* Wildcard fields. *\/$/;"	m	struct:ofl_match_standard
x2nrealloc	lib/util.c	/^x2nrealloc(void *p, size_t *n, size_t s)$/;"	f
x509_fingerprint	debian/ofp-switch-setup	/^sub x509_fingerprint {$/;"	s
xasprintf	lib/util.c	/^xasprintf(const char *format, ...)$/;"	f
xcalloc	lib/util.c	/^xcalloc(size_t count, size_t size) $/;"	f
xid	include/openflow/openflow.h	/^	uint32_t xid;    \/* Transaction id associated with this packet.$/;"	m	struct:ofp_header
xid	lib/dhcp-client.c	/^    uint32_t xid;               \/* In host byte order. *\/$/;"	m	struct:dhclient	file:
xid	lib/dhcp.h	/^    uint32_t xid;               \/* Transaction ID. *\/$/;"	m	struct:dhcp_header
xid	lib/dhcp.h	/^    uint32_t xid;               \/* Transaction ID. *\/$/;"	m	struct:dhcp_msg
xid	udatapath/datapath.h	/^    uint32_t xid;               \/* The OpenFlow transaction ID. *\/$/;"	m	struct:sender
xmalloc	lib/util.c	/^xmalloc(size_t size) $/;"	f
xmemdup	lib/util.c	/^xmemdup(const void *p_, size_t size)$/;"	f
xmemdup0	lib/util.c	/^xmemdup0(const char *p_, size_t length)$/;"	f
xor_decode_packet_from_queue	udatapath/dp_actions.c	/^xor_decode_packet_from_queue(struct packet *pkt0, struct ofl_action_xor_encode *action)$/;"	f	file:
xor_encode_packet_from_queue	udatapath/dp_actions.c	/^xor_encode_packet_from_queue(struct packet *pkt0, struct ofl_action_xor_encode *action)$/;"	f	file:
xor_packet_from_queue	udatapath/dp_exp_bme.c	/^xor_packet_from_queue(struct packet *pkt0, $/;"	f	file:
xor_packets	udatapath/dp_exp_bme.c	/^xor_packets(struct packet *pkt_1, struct packet *pkt_2)$/;"	f	file:
xrealloc	lib/util.c	/^xrealloc(void *p, size_t size) $/;"	f
xstrdup	lib/util.c	/^xstrdup(const char *s) $/;"	f
xvasprintf	lib/util.c	/^xvasprintf(const char *format, va_list args)$/;"	f
yiaddr	lib/dhcp.h	/^    uint32_t yiaddr;            \/* Client ("your") IP address. *\/$/;"	m	struct:dhcp_header
yiaddr	lib/dhcp.h	/^    uint32_t yiaddr;            \/* Client ("your") IP address. *\/$/;"	m	struct:dhcp_msg
zero_or_one_args	utilities/ofp-pki.in	/^zero_or_one_args() {$/;"	f
